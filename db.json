{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/LICENSE","path":"lib/pace/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/README.md","path":"lib/pace/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flat-top.min.css","path":"lib/pace/pace-theme-flat-top.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-material.min.css","path":"lib/pace/pace-theme-material.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"source/images/Spring+ajax-request-block.png","path":"images/Spring+ajax-request-block.png","modified":0,"renderable":0},{"_id":"source/images/yourbackground.jpg","path":"images/yourbackground.jpg","modified":0,"renderable":0},{"_id":"source/images/heck/1.png","path":"images/heck/1.png","modified":0,"renderable":0},{"_id":"source/images/heck/2.png","path":"images/heck/2.png","modified":0,"renderable":0},{"_id":"source/images/heck/3.png","path":"images/heck/3.png","modified":0,"renderable":0},{"_id":"source/images/heck/4.png","path":"images/heck/4.png","modified":0,"renderable":0},{"_id":"source/images/heck/5.png","path":"images/heck/5.png","modified":0,"renderable":0},{"_id":"source/images/heck/6.png","path":"images/heck/6.png","modified":0,"renderable":0},{"_id":"source/images/heck/7.png","path":"images/heck/7.png","modified":0,"renderable":0},{"_id":"source/images/heck/8.png","path":"images/heck/8.png","modified":0,"renderable":0},{"_id":"source/images/heck/9.png","path":"images/heck/9.png","modified":0,"renderable":0},{"_id":"source/images/personal/alipay.png","path":"images/personal/alipay.png","modified":0,"renderable":0},{"_id":"source/images/personal/icon.png","path":"images/personal/icon.png","modified":0,"renderable":0},{"_id":"source/images/personal/weixinpay.png","path":"images/personal/weixinpay.png","modified":0,"renderable":0},{"_id":"source/images/c-programming-language/firstDay/vs1.jpg","path":"images/c-programming-language/firstDay/vs1.jpg","modified":0,"renderable":0},{"_id":"source/images/c-programming-language/firstDay/vs2.jpg","path":"images/c-programming-language/firstDay/vs2.jpg","modified":0,"renderable":0},{"_id":"source/images/c-programming-language/firstDay/vs3.jpg","path":"images/c-programming-language/firstDay/vs3.jpg","modified":0,"renderable":0},{"_id":"source/images/c-programming-language/firstDay/vs4.jpg","path":"images/c-programming-language/firstDay/vs4.jpg","modified":0,"renderable":0},{"_id":"source/images/c-programming-language/firstDay/vs5.jpg","path":"images/c-programming-language/firstDay/vs5.jpg","modified":0,"renderable":0},{"_id":"source/images/c-programming-language/firstDay/vs6.jpg","path":"images/c-programming-language/firstDay/vs6.jpg","modified":0,"renderable":0},{"_id":"source/images/js/miniProgram/ellipsis.png","path":"images/js/miniProgram/ellipsis.png","modified":0,"renderable":0},{"_id":"source/images/js/miniProgram/miniProgram-1.jpg","path":"images/js/miniProgram/miniProgram-1.jpg","modified":0,"renderable":0},{"_id":"source/images/js/miniProgram/miniprogramFixedTop.gif","path":"images/js/miniProgram/miniprogramFixedTop.gif","modified":0,"renderable":0},{"_id":"source/images/js/miniProgram/miniprogramSelect.gif","path":"images/js/miniProgram/miniprogramSelect.gif","modified":0,"renderable":0},{"_id":"source/images/js/miniProgram/navigateBack.gif","path":"images/js/miniProgram/navigateBack.gif","modified":0,"renderable":0},{"_id":"source/images/linux/computer-operation/linux_daemo.jpg","path":"images/linux/computer-operation/linux_daemo.jpg","modified":0,"renderable":0},{"_id":"source/images/linux/computer-operation/llvm.jpg","path":"images/linux/computer-operation/llvm.jpg","modified":0,"renderable":0},{"_id":"source/images/linux/ethcard/ifconfig.png","path":"images/linux/ethcard/ifconfig.png","modified":0,"renderable":0},{"_id":"source/images/mobile/flutter/flutter-json-class.png","path":"images/mobile/flutter/flutter-json-class.png","modified":0,"renderable":0},{"_id":"source/images/mobile/flutter/flutter_listview_default_constructor.png","path":"images/mobile/flutter/flutter_listview_default_constructor.png","modified":0,"renderable":0},{"_id":"source/images/my-project/hexo/github-create-project0.png","path":"images/my-project/hexo/github-create-project0.png","modified":0,"renderable":0},{"_id":"source/images/my-project/hexo/github-create-project1.png","path":"images/my-project/hexo/github-create-project1.png","modified":0,"renderable":0},{"_id":"source/images/my-project/hexo/github-create-project2.png","path":"images/my-project/hexo/github-create-project2.png","modified":0,"renderable":0},{"_id":"source/images/my-project/hexo/github-create-project3.png","path":"images/my-project/hexo/github-create-project3.png","modified":0,"renderable":0},{"_id":"source/images/my-project/shopping-mall/idea-create-project0.png","path":"images/my-project/shopping-mall/idea-create-project0.png","modified":0,"renderable":0},{"_id":"source/images/my-project/shopping-mall/idea-create-project1.png","path":"images/my-project/shopping-mall/idea-create-project1.png","modified":0,"renderable":0},{"_id":"source/images/my-project/shopping-mall/idea-create-project10.png","path":"images/my-project/shopping-mall/idea-create-project10.png","modified":0,"renderable":0},{"_id":"source/images/my-project/shopping-mall/idea-create-project11.png","path":"images/my-project/shopping-mall/idea-create-project11.png","modified":0,"renderable":0},{"_id":"source/images/my-project/shopping-mall/idea-create-project12.png","path":"images/my-project/shopping-mall/idea-create-project12.png","modified":0,"renderable":0},{"_id":"source/images/my-project/shopping-mall/idea-create-project13.png","path":"images/my-project/shopping-mall/idea-create-project13.png","modified":0,"renderable":0},{"_id":"source/images/my-project/shopping-mall/idea-create-project2.png","path":"images/my-project/shopping-mall/idea-create-project2.png","modified":0,"renderable":0},{"_id":"source/images/my-project/shopping-mall/idea-create-project3.png","path":"images/my-project/shopping-mall/idea-create-project3.png","modified":0,"renderable":0},{"_id":"source/images/my-project/shopping-mall/idea-create-project4.png","path":"images/my-project/shopping-mall/idea-create-project4.png","modified":0,"renderable":0},{"_id":"source/images/my-project/shopping-mall/idea-create-project5.png","path":"images/my-project/shopping-mall/idea-create-project5.png","modified":0,"renderable":0},{"_id":"source/images/my-project/shopping-mall/idea-create-project6.png","path":"images/my-project/shopping-mall/idea-create-project6.png","modified":0,"renderable":0},{"_id":"source/images/my-project/shopping-mall/idea-create-project7.png","path":"images/my-project/shopping-mall/idea-create-project7.png","modified":0,"renderable":0},{"_id":"source/images/my-project/shopping-mall/idea-create-project8.png","path":"images/my-project/shopping-mall/idea-create-project8.png","modified":0,"renderable":0},{"_id":"source/images/my-project/shopping-mall/idea-create-project9.png","path":"images/my-project/shopping-mall/idea-create-project9.png","modified":0,"renderable":0},{"_id":"source/images/python/use-python-to-get-webpage-to-pdf/pythonHtmlToPdf1.png","path":"images/python/use-python-to-get-webpage-to-pdf/pythonHtmlToPdf1.png","modified":0,"renderable":0},{"_id":"source/images/software-setup/mysql/mysql-setup1.jpg","path":"images/software-setup/mysql/mysql-setup1.jpg","modified":0,"renderable":0},{"_id":"source/images/software-setup/mysql/mysql-setup2.jpg","path":"images/software-setup/mysql/mysql-setup2.jpg","modified":0,"renderable":0},{"_id":"source/images/software-setup/mysql/mysql-setup3.jpg","path":"images/software-setup/mysql/mysql-setup3.jpg","modified":0,"renderable":0},{"_id":"source/images/software-setup/mysql/mysql-setup4.jpg","path":"images/software-setup/mysql/mysql-setup4.jpg","modified":0,"renderable":0},{"_id":"source/images/software-setup/mysql/mysql-setup5.jpg","path":"images/software-setup/mysql/mysql-setup5.jpg","modified":0,"renderable":0},{"_id":"source/images/software-setup/mysql/mysql-setup6.jpg","path":"images/software-setup/mysql/mysql-setup6.jpg","modified":0,"renderable":0},{"_id":"source/images/software-setup/mysql/mysql-setup7.jpg","path":"images/software-setup/mysql/mysql-setup7.jpg","modified":0,"renderable":0},{"_id":"source/images/software-setup/mysql/mysql-setup8.jpg","path":"images/software-setup/mysql/mysql-setup8.jpg","modified":0,"renderable":0},{"_id":"source/images/system-tap/own-path-variable/own-path-variable1.jpg","path":"images/system-tap/own-path-variable/own-path-variable1.jpg","modified":0,"renderable":0},{"_id":"source/images/system-tap/own-path-variable/own-path-variable2.jpg","path":"images/system-tap/own-path-variable/own-path-variable2.jpg","modified":0,"renderable":0},{"_id":"source/images/system-tap/own-path-variable/own-path-variable3.jpg","path":"images/system-tap/own-path-variable/own-path-variable3.jpg","modified":0,"renderable":0},{"_id":"source/images/system-tap/own-path-variable/own-path-variable4.jpg","path":"images/system-tap/own-path-variable/own-path-variable4.jpg","modified":0,"renderable":0},{"_id":"source/images/system-tap/own-path-variable/own-path-variable5.jpg","path":"images/system-tap/own-path-variable/own-path-variable5.jpg","modified":0,"renderable":0},{"_id":"source/images/system-tap/own-path-variable/own-path-variable6.jpg","path":"images/system-tap/own-path-variable/own-path-variable6.jpg","modified":0,"renderable":0},{"_id":"source/images/web/dhcp/dhcp.jpg","path":"images/web/dhcp/dhcp.jpg","modified":0,"renderable":0},{"_id":"source/images/spring/spring-family-meals/first-step/spring-family-meals-first-step-1.jpg","path":"images/spring/spring-family-meals/first-step/spring-family-meals-first-step-1.jpg","modified":0,"renderable":0},{"_id":"source/images/spring/spring-family-meals/first-step/spring-family-meals-first-step-2.jpg","path":"images/spring/spring-family-meals/first-step/spring-family-meals-first-step-2.jpg","modified":0,"renderable":0}],"Cache":[{"_id":"source/_data/styles.styl","hash":"03aa84209fcf04ba779c723c472e1d7b6f7cda96","modified":1634199546603},{"_id":"source/_posts/welcome.md","hash":"158ba80740959591f740e9e5e100f2567596830b","modified":1634199531655},{"_id":"source/categories/index.md","hash":"c3269daaadc6939cb856664072df7793a1153583","modified":1634199538527},{"_id":"source/images/Spring+ajax-request-block.png","hash":"d0d419ef98ccf62154ebd717a4a7532022c8aa5c","modified":1634199538543},{"_id":"source/_posts/collect/coding-software.md","hash":"3f0ebf24a737183f7fbcd131f589d24f57566181","modified":1665149242566},{"_id":"source/_posts/other_skill_experience/pay-flow.md","hash":"de4d5b8f480b32a7fc9d208e11aa8d9b99d0c5c8","modified":1665146882133},{"_id":"source/_posts/sentiment/a-fucking-difficult-problem.md","hash":"ade7cf4e50a0f8d03327a1f16414c1c45ccc8a34","modified":1665147346073},{"_id":"source/_posts/sentiment/about-appearance-and-nature.md","hash":"1e6bcef1db3145ab268c8cfde4471a2480c6ae7e","modified":1665147317601},{"_id":"source/images/heck/1.png","hash":"3d76810278db6f4123278d4e0d4ba8ca2febd6d4","modified":1634199539387},{"_id":"source/images/heck/2.png","hash":"99e5f9ac13d4337751f479aa3a0600ea31b2f5f2","modified":1634199539463},{"_id":"source/images/heck/3.png","hash":"16d68ec25126fe7ee5559f0a74447040c59fbc2e","modified":1634199539535},{"_id":"source/images/heck/5.png","hash":"1ada3a36e0a825279244dbe3be22a60bc20233a1","modified":1634199539679},{"_id":"source/images/heck/8.png","hash":"ae4ea25ec46a73260a476be01c2439fda5a52c78","modified":1634199539963},{"_id":"source/images/heck/9.png","hash":"5149dc5b5ee5c17a34d036e29756573fda99994c","modified":1634199540023},{"_id":"source/images/personal/alipay.png","hash":"7a5c4271f40d16e21fe234c3f5c6f2c3c767546d","modified":1634199544543},{"_id":"source/images/personal/icon.png","hash":"13c7600544488d9d793b34ebc4694807d3337d47","modified":1634199544547},{"_id":"source/images/personal/weixinpay.png","hash":"4bda5e27cde6d9310664461534c5edb153161b26","modified":1634199544555},{"_id":"source/_posts/back_skill_experience/assembly/assembly-register.md","hash":"263ecf4e6108b178c72ec436020592d40d48c718","modified":1665148726033},{"_id":"source/_posts/back_skill_experience/java/sha256-java-js.md","hash":"892e63e163c03619901f6170472707a46e0d2a0d","modified":1665146820569},{"_id":"source/_posts/blog_skill_experience/gitbook/gitbook-first-step.md","hash":"bb0a73b58c1026394584abd95cf654e0b4dec89e","modified":1664728594512},{"_id":"source/_posts/blog_skill_experience/hexo/hexo-git-sync-linux.md","hash":"365c1a92c553ab596ab18fbdd9ee4b1408acc115","modified":1664728715376},{"_id":"source/_posts/blog_skill_experience/hexo/hexo-git-sync-windows.md","hash":"f9720a567f26ca4d83e1c7e20f019abb98521e1a","modified":1664728727962},{"_id":"source/_posts/blog_skill_experience/hexo/hexo-writing.md","hash":"f38a38efe777f5fd3f5252997bb9b166cfc808c0","modified":1664728737252},{"_id":"source/_posts/blog_skill_experience/hexo/make-a-hexo-blog.md","hash":"5023e0787f90b22af6c1b61bb9480591d1d3b61b","modified":1664728745124},{"_id":"source/_posts/blog_skill_experience/hexo/modify-new-post.md","hash":"180e21bdfb7521b8bfe76717f6c090424a8f3cb3","modified":1664728757877},{"_id":"source/_posts/front_skill_experience/base/dns-dhcp.md","hash":"8a1afa8f97fdb81cb3fb8363c67b1402a3e22a7f","modified":1665147247033},{"_id":"source/_posts/front_skill_experience/miniProgram/config-descrition.md","hash":"4fa3ff8dae9847ee0176bccfb98ba96e3fee8a08","modified":1664763946493},{"_id":"source/_posts/front_skill_experience/miniProgram/draw.md","hash":"bc8b6aa728f4739415a6efff412ffcf42cf089b0","modified":1664763988645},{"_id":"source/_posts/front_skill_experience/miniProgram/first-step.md","hash":"5bc752d37cc27b526230b018a6006b417e3e4073","modified":1664763999860},{"_id":"source/_posts/front_skill_experience/miniProgram/some-skills.md","hash":"a108d17626c12627d68ac0cad4c92bf1e56a825e","modified":1664764010559},{"_id":"source/_posts/front_skill_experience/vue/vue-hello-world.md","hash":"1490d8b9b266f0cc1662f43ad3e63acbdac69d53","modified":1664764020814},{"_id":"source/_posts/front_skill_experience/webpack/webpack-dev-server.md","hash":"0a43cce89ac72c0e3f10ecee78a37b7c0274d302","modified":1664764034161},{"_id":"source/_posts/front_skill_experience/webpack/webpack-first-step-config.md","hash":"64fdc72c4fb0f459a040a792dddd5cafb75a4428","modified":1664764051686},{"_id":"source/_posts/front_skill_experience/webpack/webpack-first-step.md","hash":"bd36deb0c7f104ba4fbe6032a01f8b415b51461d","modified":1664764043828},{"_id":"source/_posts/front_skill_experience/webpack/webpack-loaders-babel-config.md","hash":"e53b27115351a1429b14920e8ea06a1ea53ce5fa","modified":1664764062893},{"_id":"source/_posts/front_skill_experience/webpack/webpack-source-map.md","hash":"9aedbb80557b8f89591af354ad2e958bb21f490e","modified":1664764072428},{"_id":"source/_posts/leetcode/java/reverse-integer-question.md","hash":"19de73faf040d583b5e95e86f4a8a49c1a6b9308","modified":1664764247681},{"_id":"source/_posts/leetcode/java/two-sum.md","hash":"2a1a99df0606dc12de00fb3077f068fc7f89c5e0","modified":1664764239571},{"_id":"source/_posts/mobile_skill_experience/android/gradle-plugin-version.md","hash":"752b0c022d5b1ffbba8169c99f5f35fa10e55e62","modified":1665145666201},{"_id":"source/_posts/mobile_skill_experience/android/http-connect-failed-EHOSTUNREACH.md","hash":"d63314132ee3537bf14ebe1018abc19349fe9103","modified":1665145709049},{"_id":"source/_posts/mobile_skill_experience/flutter/about-listview.md","hash":"9da4a2d3d64aaa68c90fc719c6c9ec86ee270a5a","modified":1665148856515},{"_id":"source/_posts/mobile_skill_experience/flutter/bottom-bar-unread.md","hash":"6cc4b459169f683dc8574201ac46bdc4488bd28e","modified":1665145814693},{"_id":"source/_posts/mobile_skill_experience/flutter/flutter-android-internet.md","hash":"65db72bef2db54dad1ae359c2f260a945b8a3bec","modified":1665145826673},{"_id":"source/_posts/mobile_skill_experience/flutter/flutter-android-package.md","hash":"82242e8fafd2b2eec54a4fa45ad9c4acb94a92b2","modified":1665145835997},{"_id":"source/_posts/mobile_skill_experience/flutter/flutter-button.md","hash":"0f22d794eb42de8a339e0f63996fd0993be47f9e","modified":1665145842829},{"_id":"source/_posts/mobile_skill_experience/flutter/flutter-ios-package.md","hash":"9505b57ab70c7aaffb7560fa100d226a813e604b","modified":1665145852097},{"_id":"source/_posts/mobile_skill_experience/flutter/flutter-json.md","hash":"e7b5f475187a7dda01a1b6f5917aa6ccd5a77d1d","modified":1665145858077},{"_id":"source/_posts/mobile_skill_experience/flutter/flutter_page_hook_dart.md","hash":"9d7ff2000bb61236bcaf9c1bd92db9c8e5a816e2","modified":1665145867445},{"_id":"source/_posts/mobile_skill_experience/flutter/set-up-environment.md","hash":"0c1eb0d9dad547f16eaa88ab7c604ee0b9522b1a","modified":1665145874605},{"_id":"source/_posts/other_skill_experience/heck/UltraCompare-Brute-force.md","hash":"af02874dd3e8e0fa81fc835d4a19b79685ae8755","modified":1664728678491},{"_id":"source/_posts/script_skill_experience/python/use-python-to-get-webpage-to-pdf.md","hash":"22c135ea2c9cbea9ecfcf4b79ec45b27063ced68","modified":1665147048617},{"_id":"source/_posts/script_skill_experience/python/use-shell-in-python.md","hash":"c9febebbd761edc6c4e02f90b9f9589022c14113","modified":1665146142785},{"_id":"source/images/c-programming-language/firstDay/vs2.jpg","hash":"7af939dfccd41b0d2887a2fbbacf69b2481b59e5","modified":1634199538815},{"_id":"source/images/js/miniProgram/ellipsis.png","hash":"0545c3f31a0e1ee273966c563d1921329856ed62","modified":1634199540091},{"_id":"source/images/js/miniProgram/miniProgram-1.jpg","hash":"a52c854c0ef0c4a283090a383fb6a5b178bf05c9","modified":1634199540099},{"_id":"source/images/js/miniProgram/miniprogramSelect.gif","hash":"feecd76c81dfb22324ff52d15f053b2b1b875b85","modified":1634199542099},{"_id":"source/images/mobile/flutter/flutter_listview_default_constructor.png","hash":"e6d9801f12e76e60448350c142bd3f19a816fdee","modified":1634199546055},{"_id":"source/images/my-project/shopping-mall/idea-create-project0.png","hash":"938f17b3a30436663f968f1b7f1b2006e98af0f4","modified":1634199544451},{"_id":"source/images/my-project/shopping-mall/idea-create-project1.png","hash":"c01df9d7bab2edaec39a94dfe3ef2b071de2ee05","modified":1634199544455},{"_id":"source/images/my-project/shopping-mall/idea-create-project10.png","hash":"cd4ee4075b5135758889f5573153760193a4459e","modified":1634199544459},{"_id":"source/images/my-project/shopping-mall/idea-create-project11.png","hash":"7121228001fea5dadf941da5f751406c485992e8","modified":1634199544467},{"_id":"source/images/my-project/shopping-mall/idea-create-project12.png","hash":"8f8de450827b149bb9f2b01e5db7f3bc48712fa2","modified":1634199544471},{"_id":"source/images/my-project/shopping-mall/idea-create-project13.png","hash":"4060e6361a49fb110e84c0159a13b3148dec8b8b","modified":1634199544475},{"_id":"source/images/my-project/shopping-mall/idea-create-project2.png","hash":"24020e213e8e716ec2ee23310889cad28c683aa1","modified":1634199544479},{"_id":"source/images/my-project/shopping-mall/idea-create-project3.png","hash":"3a2d041cc485e95bff7419879ba9bc061dd51579","modified":1634199544487},{"_id":"source/images/my-project/shopping-mall/idea-create-project4.png","hash":"68554abf798bbf9d4c206fecda79fd0923d16ec8","modified":1634199544491},{"_id":"source/images/my-project/shopping-mall/idea-create-project5.png","hash":"55503067ee16ac93cd8433e93d86a6dcc5bda32a","modified":1634199544495},{"_id":"source/images/my-project/shopping-mall/idea-create-project6.png","hash":"507ea42083de11cf0a295a7c5ba048ab4e13daad","modified":1634199544503},{"_id":"source/images/my-project/shopping-mall/idea-create-project7.png","hash":"16e3d0aae948e9cb4e6ceb419076cd2c0a8666df","modified":1634199544503},{"_id":"source/images/my-project/shopping-mall/idea-create-project8.png","hash":"01f59838f9083a6e03c009cbcdc8560d86cd9aaf","modified":1634199544527},{"_id":"source/images/my-project/shopping-mall/idea-create-project9.png","hash":"af5f02573790816f4da177fee202e5e6734f5d33","modified":1634199544535},{"_id":"source/images/software-setup/mysql/mysql-setup5.jpg","hash":"4f03b40b26e89ad91db97bdc716a8d20e7fb16f0","modified":1634199545231},{"_id":"source/images/software-setup/mysql/mysql-setup6.jpg","hash":"154678765e59b376873c0a406bfb2f7762243785","modified":1634199545243},{"_id":"source/images/system-tap/own-path-variable/own-path-variable1.jpg","hash":"8252d6e5791d95d9a66721225da6936caa33a742","modified":1634199545587},{"_id":"source/images/system-tap/own-path-variable/own-path-variable3.jpg","hash":"fd0d418a0ff700e91e395e71c76de48fd869c943","modified":1634199545615},{"_id":"source/images/web/dhcp/dhcp.jpg","hash":"52f299067b9e701b877082fe71eabbc592858f5d","modified":1634199546071},{"_id":"source/_posts/back_skill_experience/java/fastdfs/fastdfs-java.md","hash":"1cdd5d7fd02cbeb4167136732b7eccceb1d3001a","modified":1664728820618},{"_id":"source/_posts/back_skill_experience/java/fastdfs/nginx-fastdfs-config.md","hash":"954b3623f0bc809234e39065921a2a1a57d15ec1","modified":1664728835822},{"_id":"source/_posts/back_skill_experience/java/javaBased/java-file-learn.md","hash":"be84a17b6e8abc5b56eb77c89bf6bd150b015f46","modified":1664728843486},{"_id":"source/_posts/back_skill_experience/java/javaBased/java-linux-mkdir.md","hash":"2fbd559f1e173f21355f305fb3f7d52db30eb61e","modified":1664728856247},{"_id":"source/_posts/back_skill_experience/java/javafx/javafx-springboot-maven.md","hash":"a158e55a06d7d7089efb19b583b36f93a4934d23","modified":1664728866785},{"_id":"source/_posts/back_skill_experience/java/log4j/log4j-config.md","hash":"177bcd5a6a8fdcaba90096ac833aea9586092441","modified":1664728899816},{"_id":"source/_posts/back_skill_experience/java/maven/maven-test-java-project.md","hash":"24e4a2cb6f39b766652e51b4c687103b6d8dc8f5","modified":1664728920678},{"_id":"source/_posts/back_skill_experience/java/pit/jdbc-mysql-conn.md","hash":"62413defe59d9cd890144b500920e699e295d31f","modified":1664729166673},{"_id":"source/_posts/back_skill_experience/java/tomcat/java-tomcat-http-400.md","hash":"66488b01717a377d31aca025f774d5fb88814cd4","modified":1664763895443},{"_id":"source/_posts/config_skill_experience/develop__tool_config/git/git-server.md","hash":"79f60d9d6e25ff55c983a448617f69c09bc5f72d","modified":1664728487424},{"_id":"source/_posts/config_skill_experience/develop__tool_config/mariadb/mariadb-linux-qa.md","hash":"b227f82a313a9322982f073340a4848807ecfffa","modified":1664726100190},{"_id":"source/_posts/config_skill_experience/develop__tool_config/mysql/mysql-charset.md","hash":"3db7513f74dee8744de793ed382a5b731d38180a","modified":1664726126512},{"_id":"source/_posts/config_skill_experience/develop__tool_config/mysql/mysql-high-version-group-by-error.md","hash":"d1689a776e4161ee97f62ad7c940a66a190b643b","modified":1664726132283},{"_id":"source/_posts/config_skill_experience/develop__tool_config/mysql/mysql-master-slave-error.md","hash":"c9dd2b7cd3577ac4c7d40549a5c3142282cae16d","modified":1664726177254},{"_id":"source/_posts/config_skill_experience/develop__tool_config/mysql/mysql-master-slave.md","hash":"ff792aad733612e2d7498c81a35872b241900324","modified":1664726166913},{"_id":"source/_posts/config_skill_experience/develop__tool_config/mysql/mysql-setup.md","hash":"401caaf198daa972f56ed36aa1da88704c3e2332","modified":1665147526373},{"_id":"source/_posts/config_skill_experience/develop_envior_config/nginx/nginx-cross-pass.md","hash":"09e2662af3eb2d6e3e92365690c7387312adbb36","modified":1665146013617},{"_id":"source/_posts/config_skill_experience/develop_envior_config/ngrok/enable-own-server.md","hash":"c4093bd78eaa30d70bf07dfcf60a8c7ca00c54c2","modified":1665146068297},{"_id":"source/_posts/config_skill_experience/develop_envior_config/ngrok/own-ngrok-server.md","hash":"c396edec68f3061f5397b9707e9d7304094fafbe","modified":1665146105313},{"_id":"source/_posts/config_skill_experience/develop_envior_config/php/apache2-4-php7-3-open-pit.md","hash":"772887721da1ae43dc2c68fa2ea087c8a3dce455","modified":1665146964825},{"_id":"source/_posts/config_skill_experience/develop_envior_config/php/php-apache-config.md","hash":"753dc973dabfc7f5cedf901e40993b778aecdc55","modified":1665146991261},{"_id":"source/_posts/config_skill_experience/middleware/rocketMQ/first-step.md","hash":"7e193b571794f19a355f6a896f1ded9c47663658","modified":1664729058943},{"_id":"source/_posts/config_skill_experience/system_config/linux/connect-ftp.md","hash":"c574b17c104c7e5172fdb4f4dbcc9da1c593cde9","modified":1664764548590},{"_id":"source/_posts/config_skill_experience/system_config/linux/connect-wifi.md","hash":"a8884cb5bc60ab81911cd5b19143e449445bd84c","modified":1664764572739},{"_id":"source/_posts/config_skill_experience/system_config/linux/create-ap.md","hash":"2fc0c2f13a39d04478b191ebd202eea6bddd6ffc","modified":1664764584769},{"_id":"source/_posts/config_skill_experience/system_config/linux/create-linux-service.md","hash":"b30bd05ee20d4d9cd199016496b6928d239260bb","modified":1664764594139},{"_id":"source/_posts/config_skill_experience/system_config/linux/deploy-seafile.md","hash":"2298a7eecf84a26c928c4e3237514f22be71f03e","modified":1664764603244},{"_id":"source/_posts/config_skill_experience/system_config/linux/hexo-create-blog.md","hash":"e910548f09612850ec295eace0670ee0d449fc0f","modified":1665146603145},{"_id":"source/_posts/config_skill_experience/system_config/linux/how-to-install.md","hash":"03c07f75de9ea5e4aa8e7876fd1ba4b9a311692f","modified":1664764341027},{"_id":"source/_posts/config_skill_experience/system_config/linux/how-to-run-process-in-background.md","hash":"8fbcd851bd62a2f07949394272282e9b05fd7c8f","modified":1664764614564},{"_id":"source/_posts/config_skill_experience/system_config/linux/linux-backspace.md","hash":"4c5dac039f3dadb033a013b64675cfe913c5745b","modified":1664764484747},{"_id":"source/_posts/config_skill_experience/system_config/linux/linux-java-git-maven-zookeeper.md","hash":"951f13cc814289af9314e8ed620baa6f53671ed0","modified":1665146687485},{"_id":"source/_posts/config_skill_experience/system_config/linux/linux-path-variable.md","hash":"9d41c49bf5aec24033c2132712eb58a676e7d2f7","modified":1665146697897},{"_id":"source/_posts/config_skill_experience/system_config/linux/linux_daemo.md","hash":"3143f56e63f78e0fdb1ffdf257d1ba732bcfaa64","modified":1665146679705},{"_id":"source/_posts/config_skill_experience/system_config/linux/linux_ssh.md","hash":"50e2ab3918222b78ace833a3dfad52b1a73c1909","modified":1665146708273},{"_id":"source/_posts/config_skill_experience/system_config/linux/open-ftp.md","hash":"cc2ea2f024b70a729e063029fb0dfaa9dc304166","modified":1664764626936},{"_id":"source/_posts/config_skill_experience/system_config/linux/setup-my-environment.md","hash":"7748dd70b8444d5f7befdf7a5daeea4baef2e13d","modified":1665147135885},{"_id":"source/_posts/config_skill_experience/system_config/linux/sudo-env.md","hash":"80f2c74ef9d3a1d90cdfcb8066335e62482945ce","modified":1664764468728},{"_id":"source/_posts/config_skill_experience/system_config/virtual_machine/vmware-not-working.md","hash":"24a54de51d431e2760d7943d20fe76ce76442829","modified":1665149298913},{"_id":"source/_posts/config_skill_experience/system_config/virtual_machine/vmware-share-folder.md","hash":"c82de5afa5dfc1789ef95dac53db86472f3f47f3","modified":1664764714835},{"_id":"source/_posts/config_skill_experience/system_config/windows/deploy-system.md","hash":"39c3845782f20fb927a498e7b2671f9501a583d6","modified":1665146745053},{"_id":"source/_posts/config_skill_experience/system_config/windows/own-path-variable.md","hash":"bdcb9368dedb1f334bc5a3ee2b3c9d07d90d40b6","modified":1665146752317},{"_id":"source/_posts/front_skill_experience/cocos/cocoscreator/cocoscreator-intructration.md","hash":"f0b75ccfbab5c074e7cb129418c775f1bdc07f0a","modified":1664724362856},{"_id":"source/_posts/my_project/shopping_mall/Dependence_and_configuration/Shopping-mall-developNote-actable-new-config.md","hash":"b4d3b6938d2537974fc52f1f02e391f5aec6e028","modified":1634199534351},{"_id":"source/_posts/my_project/shopping_mall/Dependence_and_configuration/Shopping-mall-developNote-common-manager-depend.md","hash":"e83bf3fddcf0608ed3274cda3420f9f879fc7dba","modified":1634199534355},{"_id":"source/_posts/my_project/shopping_mall/Dependence_and_configuration/Shopping-mall-developNote-framework.md","hash":"0338292e946912dcb02587582e1c1f424711364f","modified":1634199534363},{"_id":"source/_posts/my_project/shopping_mall/Dependence_and_configuration/Shopping-mall-developNote-linux-environment.md","hash":"3376c8f1c444b2f958c70bd1378c9f4270582e72","modified":1634199534363},{"_id":"source/_posts/my_project/shopping_mall/Dependence_and_configuration/Shopping-mall-developNote-parent-depend-addSwagger.md","hash":"06166247d6bcda997889dacaaffb17353350abe8","modified":1634199534347},{"_id":"source/_posts/my_project/shopping_mall/Dependence_and_configuration/Shopping-mall-developNote-parent-depend.md","hash":"bac6debcdf1a03fd5f6086e9ec5a5c4f105c72aa","modified":1634199534283},{"_id":"source/_posts/my_project/shopping_mall/Dependence_and_configuration/Shopping-mall-developNote-pojo-dao-interface-service-depend.md","hash":"508ec2ff9cb6769d3370d70a8cc2d711bcf48cff","modified":1634199534371},{"_id":"source/_posts/my_project/shopping_mall/Dependence_and_configuration/Shopping-mall-developNote-service-config.md","hash":"400b54dc9f4d923d5ca765223b92dfde03dd21e5","modified":1634199534375},{"_id":"source/_posts/my_project/shopping_mall/Dependence_and_configuration/Shopping-mall-developNote-setUp-project.md","hash":"23b1c70421fd432cd8fa30f900fca3d2878aba78","modified":1634199534375},{"_id":"source/_posts/my_project/shopping_mall/Dependence_and_configuration/Shopping-mall-developNote-vue-envionmentAndConfig.md","hash":"bbe4076e79a9ffcbce09e6a3af29ba55463f8708","modified":1634199534435},{"_id":"source/_posts/my_project/shopping_mall/Dependence_and_configuration/Shopping-mall-developNote-web-config.md","hash":"33a1ac8fc6e14b73424bcfe154a4c71247fca1ee","modified":1634199534503},{"_id":"source/_posts/my_project/shopping_mall/Dependence_and_configuration/Shopping-mall-developNote-web-depend.md","hash":"ce0c55be778707f94fa6b148fd2b13b84cf0c68c","modified":1634199534507},{"_id":"source/_posts/my_project/shopping_mall/crud/Shopping-mall-developNote-register.md","hash":"b57a060c61a27ed3bd8e587539bde5ac67b640ec","modified":1634199534515},{"_id":"source/_posts/my_project/shopping_mall/js/shopping-mall-developNote-js.md","hash":"612f1c73d573d2f70812c3e41962799f2b9fdb0c","modified":1634199534651},{"_id":"source/_posts/my_project/shopping_mall/taps/shopping-mall-developNote-mybatis-automatic-generation.md","hash":"293230d27e1a4d84f9ed3166e3640de9379484fd","modified":1634199534659},{"_id":"source/_posts/note/blog_note/edit-makefile/edit-makefile-five.md","hash":"3c63d6bc224c7192722047d97f4d6d9307e8581f","modified":1664725349977},{"_id":"source/_posts/note/blog_note/edit-makefile/edit-makefile-four.md","hash":"d184b8c8c63cb0f71fbd4bfddea5392ebd861728","modified":1664725367414},{"_id":"source/_posts/note/blog_note/edit-makefile/edit-makefile-one.md","hash":"816827c80aaa1f14a3fef956eafab5db451a71bb","modified":1664725378107},{"_id":"source/_posts/note/blog_note/edit-makefile/edit-makefile-seven.md","hash":"75f0b0a389121f516f1f0c1c5be57dd3c5de7b41","modified":1664725387792},{"_id":"source/_posts/note/blog_note/edit-makefile/edit-makefile-six.md","hash":"461572c5f36e2444f176c66c6e8e8ae8be57d5bc","modified":1664725395340},{"_id":"source/_posts/note/blog_note/edit-makefile/edit-makefile-three.md","hash":"b01b454feb89982e5b537a9a7a10da936f813984","modified":1664725404997},{"_id":"source/_posts/note/blog_note/edit-makefile/edit-makefile-two.md","hash":"75dc52755b9fefc8e828d0dcfe408125f340e6d1","modified":1664725417695},{"_id":"source/_posts/note/blog_note/edit-makefile/edit-makefile.md","hash":"a85de3e28b9b135ad2b982950b872fc2e52cd629","modified":1664725291536},{"_id":"source/_posts/note/blog_note/the_best_c_plus_plus_course/how-the-cpp-compiler-works.md","hash":"c1e7c55d41320142856dd282927d8a9fb88a0557","modified":1665149348881},{"_id":"source/_posts/note/read_note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-10Day.md","hash":"95e10fd156e1bdbe5b20dd5f57a6c7eb5fe0dad0","modified":1665147818509},{"_id":"source/_posts/note/read_note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-11Day.md","hash":"a10ed44a7aee9ab9a10664530e2488d1af9f8bbf","modified":1665147824825},{"_id":"source/_posts/note/read_note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-12Day.md","hash":"92a0c8ffaff4c0f3fd7c3aeda01048d3b604aa7e","modified":1665147835013},{"_id":"source/_posts/note/read_note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-13Day.md","hash":"4d582658cfb9938c7eddb9138f1faad6a080a9c3","modified":1665147840889},{"_id":"source/_posts/note/read_note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-14Day.md","hash":"8b48ad8e675230fd6cce45a73b1185db6b55a25c","modified":1665147849645},{"_id":"source/_posts/note/read_note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-15Day.md","hash":"47730534604eb9a2342d8777b3bf1e61b7d886b7","modified":1665147859709},{"_id":"source/_posts/note/read_note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-16Day.md","hash":"6e493471a6e9ddbdef2b263dce812821d4122fa7","modified":1665147867977},{"_id":"source/_posts/note/read_note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-17Day.md","hash":"3cf2660953e45dab67bcffdff919087ad0ee6aa9","modified":1665147875685},{"_id":"source/_posts/note/read_note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-18Day.md","hash":"54b67b27c3d180afe3ec3fc1fe10fb23ac22611a","modified":1665147885545},{"_id":"source/_posts/note/read_note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-1Day.md","hash":"a46b69d5e99c00eb985dfa770bc30dfcb042fa2f","modified":1665147731493},{"_id":"source/_posts/note/read_note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-2Day.md","hash":"91b8b4dc17d507fbee01d7b964b3300045844d64","modified":1665147742813},{"_id":"source/_posts/note/read_note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-3Day.md","hash":"901f11631ef64be5b0ee54947911410e64fd01dd","modified":1665147757197},{"_id":"source/_posts/note/read_note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-4Day.md","hash":"f836ed948b818bf84657d6b01a2484e86edde9d6","modified":1665147768933},{"_id":"source/_posts/note/read_note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-5Day.md","hash":"f09cabb44b7ce3f891738aaf1de11131263a0758","modified":1665147775029},{"_id":"source/_posts/note/read_note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-6Day.md","hash":"c8e54c93862122a33feb0cb74bdf61a1d93b314f","modified":1665147784653},{"_id":"source/_posts/note/read_note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-7Day.md","hash":"0671005ce6bbc65b03b7d881b7a0f582f59a4ad2","modified":1665147792017},{"_id":"source/_posts/note/read_note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-8Day.md","hash":"1f11eb6dfd7881373381c1dde3aae616285254a3","modified":1665147801929},{"_id":"source/_posts/note/read_note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-9Day.md","hash":"0b1f96a9b6ed8057e1e51d6a6a7460094da4f20b","modified":1665147808473},{"_id":"source/_posts/note/read_note/assembly_language/assembly-unit.md","hash":"192c8886e38395d9849874e682457efce2e69f4d","modified":1665147680237},{"_id":"source/_posts/note/read_note/javascript-The-Definitive-Guide/javascript-The-Definitive-Guide-read-note-firstDay.md","hash":"b3b183d566f789ace36d4f7c7302fccac4967386","modified":1665147701749},{"_id":"source/_posts/note/read_note/the_c_programming_language/the-c-programming-language-first-day.md","hash":"91197dceb13599e9404b5a21cf9773dc24c0ee75","modified":1665147713321},{"_id":"source/_posts/note/read_note/the_c_programming_language/the-c-programming-language-second-day.md","hash":"6d703490f834f1e31102dc135e816329face81b3","modified":1665147722641},{"_id":"source/_posts/note/read_note/web-site-framework/auto-deploy-hot-update.md","hash":"fa366d40dc0e5d8a5c96405cf011747c14f768cc","modified":1665147893157},{"_id":"source/_posts/note/read_note/web-site-framework/profermence-test-example.md","hash":"f03190bfcd446fc6b4e057fb6b1d4669d282526c","modified":1665147900921},{"_id":"source/_posts/note/read_note/web-site-framework/profermence-test-way-method.md","hash":"35228742d4d37de2c491e3185263684a8604db5f","modified":1665147907649},{"_id":"source/_posts/note/read_note/web-site-framework/use-cache.md","hash":"196fc4712dff7b059b0f0750c6c89e83241f3a06","modified":1665147913165},{"_id":"source/_posts/note/source_note/mybatis-enhance/read-mybatis-enhance-ClassTools.md","hash":"13a93230e01b946a1e66d6b33fe3173cb8e3fec1","modified":1664763714103},{"_id":"source/_posts/note/source_note/mybatis-enhance/read-mybatis-enhance-tableFieldsConstruct.md","hash":"f08d33f3d88ce57d188ed350984b9be245a4796b","modified":1664763727812},{"_id":"source/_posts/note/source_note/mybatis-enhance/read-mybatis-enhance.md","hash":"9945a5e38488bb2b9f8db202fe4b2cb133543048","modified":1664763686558},{"_id":"source/_posts/back_skill_experience/java/maven/servlet/servlet-inline-tomcat.md","hash":"f0bc4105cc01833f53b251e9f2669a0a670e7780","modified":1664728934251},{"_id":"source/_posts/back_skill_experience/java/spring/spring-family-meals/springboot-custom-datasource-exception.md","hash":"142c3bc1f36aad8b73fcf9a1f2e6039936aff271","modified":1665148920926},{"_id":"source/_posts/back_skill_experience/java/spring/spring-family-meals/springboot-datasource-introduction.md","hash":"ab843f05a0d450ed7b30be63e8d68bf27da9d34f","modified":1665148932012},{"_id":"source/_posts/back_skill_experience/java/spring/spring-family-meals/springboot-datasource-multi.md","hash":"f66a15f7ab660f1dda29f19db2e3fcaa73564eb3","modified":1665148939051},{"_id":"source/_posts/back_skill_experience/java/spring/spring-family-meals/springboot-datasource-single.md","hash":"6e647c15ce2cc9deaf06e69d866e1c946d31483d","modified":1665148947530},{"_id":"source/_posts/back_skill_experience/java/spring/spring-family-meals/springboot-first-step.md","hash":"bd3c7fda5b9d06229debdaeab5aefb3e723e82b9","modified":1665148952882},{"_id":"source/_posts/back_skill_experience/java/spring/spring-family-meals/springboot-jdbcTemplate.md","hash":"aa5c74eb06f30612bf1da5ac7b49dab5997adca6","modified":1665148961852},{"_id":"source/_posts/back_skill_experience/java/spring/spring-family-meals/springboot-jpa-intruduction.md","hash":"94a68420b9800314ffe547856232f21b7e82f8f8","modified":1665148967788},{"_id":"source/_posts/back_skill_experience/java/spring/spring-family-meals/springboot-service-translation.md","hash":"da0d1c426f8c6afb14c0d6b0e784af753111e718","modified":1665148975951},{"_id":"source/_posts/config_skill_experience/system_config/linux/vim/llvm.md","hash":"45d18376b9c635de4e722bfa6bd57301c9a44932","modified":1665146727693},{"_id":"source/_posts/back_skill_experience/java/spring/springboot/jpa/springboot-jpa-update-Not-supported-for-DML-operations.md","hash":"e8d9357839b4b47642a6bd2474fbe37f1ee12d1d","modified":1664763872529},{"_id":"source/images/heck/4.png","hash":"8ed5c92e09f344735c82ca59f0ad5efb28d9ea56","modified":1634199539567},{"_id":"source/images/heck/7.png","hash":"a2ac03ec95cad9996e069cab7e097d5a7f7ddd6c","modified":1634199539947},{"_id":"source/images/c-programming-language/firstDay/vs1.jpg","hash":"70a31818faa65a85d4527266c4feb1996a504518","modified":1634199538751},{"_id":"source/images/c-programming-language/firstDay/vs6.jpg","hash":"df7fb9790bebd0ddddc97751bb86bbab2fb537c3","modified":1634199539363},{"_id":"source/images/js/miniProgram/navigateBack.gif","hash":"cb3f838ca1b3792a58990e396573f6f12c892833","modified":1634199542171},{"_id":"source/images/linux/computer-operation/llvm.jpg","hash":"e68998a3cb3b1804892fc6b1c9bfaac402d6d78a","modified":1634199542495},{"_id":"source/images/software-setup/mysql/mysql-setup7.jpg","hash":"22731793af480523133ed04793811a3a42ff7ff0","modified":1634199545295},{"_id":"source/images/software-setup/mysql/mysql-setup8.jpg","hash":"32cb855562bd9798ab3cf21ad3cb9eccc6f59d41","modified":1634199545335},{"_id":"source/images/system-tap/own-path-variable/own-path-variable2.jpg","hash":"8bf13578aca69bc4dd49b95c130b4e180f953026","modified":1634199545603},{"_id":"source/images/system-tap/own-path-variable/own-path-variable4.jpg","hash":"f5ece8c96b4166723210a81b01ddb6d8059327e0","modified":1634199545651},{"_id":"source/images/system-tap/own-path-variable/own-path-variable5.jpg","hash":"167bf8e64bbdcb865c6e42566c0472a518fb5de3","modified":1634199545703},{"_id":"source/images/spring/spring-family-meals/first-step/spring-family-meals-first-step-2.jpg","hash":"538f2434349d798b05869b97b2361af92cb27688","modified":1634199545543},{"_id":"source/images/c-programming-language/firstDay/vs5.jpg","hash":"6ef42cbd29b4b4797199fcf5084685d16cb07d70","modified":1634199539267},{"_id":"source/images/my-project/hexo/github-create-project1.png","hash":"38e431d26d8deffd865a0bee612764cd4aade7f8","modified":1634199544079},{"_id":"source/images/my-project/hexo/github-create-project2.png","hash":"89ac9f6e17926d0fdb6974f889014b426f3fb38f","modified":1634199544271},{"_id":"source/images/my-project/hexo/github-create-project3.png","hash":"206dbae8705fa9e82980d38fe96892cde7119253","modified":1634199544439},{"_id":"source/images/python/use-python-to-get-webpage-to-pdf/pythonHtmlToPdf1.png","hash":"49091326c2d9670bd489e94bf0c1b44d1359e3c1","modified":1634199546171},{"_id":"source/images/software-setup/mysql/mysql-setup3.jpg","hash":"e3259ab628e0cfb5fc186def4ca58d8c660f098c","modified":1634199545095},{"_id":"source/images/c-programming-language/firstDay/vs4.jpg","hash":"4c9085bdd7c951010e17d7bf6fcc530e97aeb0c9","modified":1634199539107},{"_id":"source/images/linux/computer-operation/linux_daemo.jpg","hash":"2cf2bbfbc8baf936301aac36c20e572a60b20d3f","modified":1634199542419},{"_id":"source/images/my-project/hexo/github-create-project0.png","hash":"e89798810af93f95709ce150daf84ce9b0677551","modified":1634199543935},{"_id":"source/images/c-programming-language/firstDay/vs3.jpg","hash":"d94bc276948a4efb7c868919ea4e643afd2aaebc","modified":1634199538943},{"_id":"source/images/mobile/flutter/flutter-json-class.png","hash":"8627af0d33aeb8b0288f715d3d23161301e1a199","modified":1634199546019},{"_id":"source/images/heck/6.png","hash":"0a166ed52aa7624924998acea50e1f2236765a0a","modified":1634199539891},{"_id":"source/images/software-setup/mysql/mysql-setup4.jpg","hash":"f4ac77aae22c06eeb8b5c86fa3942a56a301b310","modified":1634199545227},{"_id":"source/images/spring/spring-family-meals/first-step/spring-family-meals-first-step-1.jpg","hash":"2d5d73cea66dbaed70bf9d08da503523af940420","modified":1634199545491},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1634199663591},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1634199663595},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1634199663599},{"_id":"themes/next/.gitignore","hash":"56f3470755c20311ddd30d421b377697a6e5e68b","modified":1634199663607},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1634199663611},{"_id":"themes/next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1634199663623},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1634199663623},{"_id":"themes/next/README.md","hash":"9b4b7d66aca47f9c65d6321b14eef48d95c4dff1","modified":1634199663639},{"_id":"themes/next/_config.yml","hash":"104854aa1fa18a46599cad78e3ce6c5dcf8b249f","modified":1634199660007},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1634199663643},{"_id":"themes/next/gulpfile.js","hash":"1b4fc262b89948937b9e3794de812a7c1f2f3592","modified":1634199663647},{"_id":"themes/next/package.json","hash":"62fad6de02adbbba9fb096cbe2dcc15fe25f2435","modified":1634199663651},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1634199663675},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"e554931b98f251fd49ff1d2443006d9ea2c20461","modified":1634199663687},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1a435c20ae8fa183d49bbf96ac956f7c6c25c8af","modified":1634199663723},{"_id":"themes/next/.github/config.yml","hash":"1d3f4e8794986817c0fead095c74f756d45f91ed","modified":1634199663735},{"_id":"themes/next/.github/issue-close-app.yml","hash":"7cba457eec47dbfcfd4086acd1c69eaafca2f0cd","modified":1634199663739},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1634199663743},{"_id":"themes/next/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1634199663747},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1634199663755},{"_id":"themes/next/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1634199663767},{"_id":"themes/next/.github/stale.yml","hash":"fdf82de9284f8bc8e0b0712b4cc1cb081a94de59","modified":1634199663775},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1634199663779},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1634199663799},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"c7a994b9542040317d8f99affa1405c143a94a38","modified":1634199663819},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1634199663831},{"_id":"themes/next/docs/DATA-FILES.md","hash":"cddbdc91ee9e65c37a50bec12194f93d36161616","modified":1634199663831},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1634199663835},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"94dc3404ccb0e5f663af2aa883c1af1d6eae553d","modified":1634199663847},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1634199663851},{"_id":"themes/next/docs/MATH.md","hash":"d645b025ec7fb9fbf799b9bb76af33b9f5b9ed93","modified":1634199663867},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"8b6e4b2c9cfcb969833092bdeaed78534082e3e6","modified":1634199663875},{"_id":"themes/next/languages/ar.yml","hash":"9815e84e53d750c8bcbd9193c2d44d8d910e3444","modified":1634199664011},{"_id":"themes/next/languages/de.yml","hash":"74c59f2744217003b717b59d96e275b54635abf5","modified":1634199664015},{"_id":"themes/next/languages/default.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1634199664019},{"_id":"themes/next/languages/en.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1634199664019},{"_id":"themes/next/languages/es.yml","hash":"c64cf05f356096f1464b4b1439da3c6c9b941062","modified":1634199664027},{"_id":"themes/next/languages/fa.yml","hash":"3676b32fda37e122f3c1a655085a1868fb6ad66b","modified":1634199664051},{"_id":"themes/next/languages/fr.yml","hash":"752bf309f46a2cd43890b82300b342d7218d625f","modified":1634199664059},{"_id":"themes/next/languages/hu.yml","hash":"b1ebb77a5fd101195b79f94de293bcf9001d996f","modified":1634199664063},{"_id":"themes/next/languages/id.yml","hash":"572ed855d47aafe26f58c73b1394530754881ec2","modified":1634199664063},{"_id":"themes/next/languages/it.yml","hash":"44759f779ce9c260b895532de1d209ad4bd144bf","modified":1634199664071},{"_id":"themes/next/languages/ja.yml","hash":"0cf0baa663d530f22ff380a051881216d6adcdd8","modified":1634199664075},{"_id":"themes/next/languages/ko.yml","hash":"0feea9e43cd399f3610b94d755a39fff1d371e97","modified":1634199664091},{"_id":"themes/next/languages/nl.yml","hash":"5af3473d9f22897204afabc08bb984b247493330","modified":1634199664107},{"_id":"themes/next/languages/pt-BR.yml","hash":"67555b1ba31a0242b12fc6ce3add28531160e35b","modified":1634199664111},{"_id":"themes/next/languages/pt.yml","hash":"718d131f42f214842337776e1eaddd1e9a584054","modified":1634199664115},{"_id":"themes/next/languages/ru.yml","hash":"e993d5ca072f7f6887e30fc0c19b4da791ca7a88","modified":1634199664119},{"_id":"themes/next/languages/tr.yml","hash":"fe793f4c2608e3f85f0b872fd0ac1fb93e6155e2","modified":1634199664127},{"_id":"themes/next/languages/uk.yml","hash":"3a6d635b1035423b22fc86d9455dba9003724de9","modified":1634199664139},{"_id":"themes/next/languages/vi.yml","hash":"93393b01df148dcbf0863f6eee8e404e2d94ef9e","modified":1634199664143},{"_id":"themes/next/languages/zh-CN.yml","hash":"199e4a903a6fee11204bae2e270b06c40f2b5a9f","modified":1634199663995},{"_id":"themes/next/languages/zh-HK.yml","hash":"3789f94010f948e9f23e21235ef422a191753c65","modified":1634199664147},{"_id":"themes/next/languages/zh-TW.yml","hash":"8c09da7c4ec3fca2c6ee897b2eea260596a2baa1","modified":1634199664151},{"_id":"themes/next/layout/_layout.swig","hash":"6a6e92a4664cdb981890a27ac11fd057f44de1d5","modified":1634199664159},{"_id":"themes/next/layout/archive.swig","hash":"e4e31317a8df68f23156cfc49e9b1aa9a12ad2ed","modified":1634199664299},{"_id":"themes/next/layout/category.swig","hash":"1bde61cf4d2d171647311a0ac2c5c7933f6a53b0","modified":1634199664303},{"_id":"themes/next/layout/index.swig","hash":"7f403a18a68e6d662ae3e154b2c1d3bbe0801a23","modified":1634199664303},{"_id":"themes/next/layout/page.swig","hash":"db581bdeac5c75fabb0f17d7c5e746e47f2a9168","modified":1634199664319},{"_id":"themes/next/layout/post.swig","hash":"2f6d992ced7e067521fdce05ffe4fd75481f41c5","modified":1634199664319},{"_id":"themes/next/layout/tag.swig","hash":"0dfb653bd5de980426d55a0606d1ab122bd8c017","modified":1634199664323},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1634199664575},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c3e6b8196c983c40fd140bdeca012d03e6e86967","modified":1634199663691},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"12d99fb8b62bd9e34d9672f306c9ae4ace7e053e","modified":1634199663703},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d3efc0df0275c98440e69476f733097916a2d579","modified":1634199663711},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"53df7d537e26aaf062d70d86835c5fd8f81412f3","modified":1634199663711},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1634199663883},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1634199663887},{"_id":"themes/next/docs/ru/README.md","hash":"85dd68ed1250897a8e4a444a53a68c1d49eb7e11","modified":1634199663895},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"5237a368ab99123749d724b6c379415f2c142a96","modified":1634199663907},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"34b88784ec120dfdc20fa82aadeb5f64ef614d14","modified":1634199663923},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1634199663927},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"d3f03be036b75dc71cf3c366cd75aee7c127c874","modified":1634199663935},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1634199663943},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1634199663959},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8b18f84503a361fc712b0fe4d4568e2f086ca97d","modified":1634199663967},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b92585d251f1f9ebe401abb5d932cb920f9b8b10","modified":1634199663971},{"_id":"themes/next/docs/zh-CN/README.md","hash":"c038629ff8f3f24e8593c4c8ecf0bef3a35c750d","modified":1634199663975},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"d9ce7331c1236bbe0a551d56cef2405e47e65325","modified":1634199663979},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"9c8dc0b8170679cdc1ee9ee8dbcbaebf3f42897b","modified":1634199664179},{"_id":"themes/next/layout/_macro/post.swig","hash":"090b5a9b6fca8e968178004cbd6cff205b7eba57","modified":1634199664183},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"71655ca21907e9061b6e8ac52d0d8fbf54d0062b","modified":1634199664183},{"_id":"themes/next/layout/_partials/comments.swig","hash":"db6ab5421b5f4b7cb32ac73ad0e053fdf065f83e","modified":1634199664195},{"_id":"themes/next/layout/_partials/footer.swig","hash":"e5a2bdf45fde7cea9cb03993f5a0fd960326ed5d","modified":1634199664199},{"_id":"themes/next/layout/_partials/languages.swig","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1634199664211},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1634199664211},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1634199664211},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1634199664331},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1634199664331},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"4d2c93c66e069852bb0e3ea2e268d213d07bfa3f","modified":1634199664339},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1634199664379},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1634199664383},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"b782eb2e34c0c15440837040b5d65b093ab6ec04","modified":1634199664395},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1634199664427},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"311e5eceec9e949f1ea8d623b083cec0b8700ff2","modified":1634199664439},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1634199664439},{"_id":"themes/next/scripts/events/index.js","hash":"5743cde07f3d2aa11532a168a652e52ec28514fd","modified":1634199664503},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1634199664555},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1634199664559},{"_id":"themes/next/scripts/filters/locals.js","hash":"b193a936ee63451f09f8886343dcfdca577c0141","modified":1634199664559},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1634199664559},{"_id":"themes/next/scripts/filters/post.js","hash":"44ba9b1c0bdda57590b53141306bb90adf0678db","modified":1634199664563},{"_id":"themes/next/scripts/helpers/engine.js","hash":"bdb424c3cc0d145bd0c6015bb1d2443c8a9c6cda","modified":1634199664567},{"_id":"themes/next/scripts/helpers/font.js","hash":"40cf00e9f2b7aa6e5f33d412e03ed10304b15fd7","modified":1634199664571},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1634199664571},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"958e86b2bd24e4fdfcbf9ce73e998efe3491a71f","modified":1634199664575},{"_id":"themes/next/scripts/tags/button.js","hash":"8c6b45f36e324820c919a822674703769e6da32c","modified":1634199664583},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1634199664587},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f1826ade2d135e2f60e2d95cb035383685b3370c","modified":1634199664587},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1634199664587},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1634199664587},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1634199664591},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1634199664599},{"_id":"themes/next/scripts/tags/pdf.js","hash":"8c613b39e7bff735473e35244b5629d02ee20618","modified":1634199664599},{"_id":"themes/next/scripts/tags/tabs.js","hash":"93d8a734a3035c1d3f04933167b500517557ba3e","modified":1634199664599},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1634199664599},{"_id":"themes/next/source/css/_colors.styl","hash":"a8442520f719d3d7a19811cb3b85bcfd4a596e1f","modified":1634199664607},{"_id":"themes/next/source/css/_mixins.styl","hash":"e31a557f8879c2f4d8d5567ee1800b3e03f91f6e","modified":1634199664807},{"_id":"themes/next/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1634199664867},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1634199664935},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1634199664939},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1634199664943},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1634199664959},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1634199664959},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1634199664963},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1634199664967},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1634199664967},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1634199664971},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1634199664975},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1634199664979},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1634199664979},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1634199664983},{"_id":"themes/next/source/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1634199664995},{"_id":"themes/next/source/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1634199664995},{"_id":"themes/next/source/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1634199664999},{"_id":"themes/next/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1634199665003},{"_id":"themes/next/source/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1634199665007},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1634199665047},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"000bad572d76ee95d9c0a78f9ccdc8d97cc7d4b4","modified":1634199664203},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"810d544019e4a8651b756dd23e5592ee851eda71","modified":1634199664207},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"c70f8e71e026e878a4e9d5ab3bbbf9b0b23c240c","modified":1634199664239},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"7dbe93b8297b746afb89700b4d29289556e85267","modified":1634199664243},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"9440d8a3a181698b80e1fa47f5104f4565d8cdf3","modified":1634199664243},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"d31f896680a6c2f2c3f5128b4d4dd46c87ce2130","modified":1634199664247},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1634199664247},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1634199664251},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"9b7a66791d7822c52117fe167612265356512477","modified":1634199664251},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"954ad71536b6eb08bd1f30ac6e2f5493b69d1c04","modified":1634199664263},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"ceba16b9bd3a0c5c8811af7e7e49d0f9dcb2f41e","modified":1634199664263},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1634199664279},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1634199664279},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1634199664279},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1634199664287},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"2be50f9bfb1c56b85b3b6910a7df27f51143632c","modified":1634199664287},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"f48a6a8eba04eb962470ce76dd731e13074d4c45","modified":1634199664287},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"c46849e0af8f8fb78baccd40d2af14df04a074af","modified":1634199664295},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"077b5d66f6309f2e7dcf08645058ff2e03143e6c","modified":1634199664339},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1634199664367},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1634199664379},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1634199664379},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1634199664379},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1634199664391},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1634199664391},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1634199664391},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1634199664391},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1634199664407},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1634199664407},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1634199664419},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1634199664419},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1634199664423},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1634199664423},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1634199664423},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1634199664423},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1634199664435},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1634199664435},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1634199664435},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1634199664459},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1634199664459},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1634199664463},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"4b1986e43d6abce13450d2b41a736dd6a5620a10","modified":1634199664471},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1634199664471},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1634199664475},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1634199664475},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"d56d5af427cdfecc33a0f62ee62c056b4e33d095","modified":1634199664475},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1634199664487},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"d30b0e255a8092043bac46441243f943ed6fb09b","modified":1634199664487},{"_id":"themes/next/scripts/events/lib/config.js","hash":"d34c6040b13649714939f59be5175e137de65ede","modified":1634199664511},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1634199664511},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1634199664515},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"a54708fd9309b4357c423a3730eb67f395344a5e","modified":1634199664527},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1634199664527},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1634199664531},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"4c0c99c7e0f00849003dfce02a131104fb671137","modified":1634199664535},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1634199664535},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1634199664539},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1634199664539},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"6cbd85f9433c06bae22225ccf75ac55e04f2d106","modified":1634199664539},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1634199664919},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"f70be8e229da7e1715c11dd0e975a2e71e453ac8","modified":1634199664919},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1634199664919},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"612ec843372dae709acb17112c1145a53450cc59","modified":1634199664923},{"_id":"themes/next/source/css/_variables/base.styl","hash":"818508748b7a62e02035e87fe58e75b603ed56dc","modified":1634199664927},{"_id":"themes/next/source/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1634199665015},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1634199665015},{"_id":"themes/next/source/lib/pace/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1634199665779},{"_id":"themes/next/source/lib/pace/README.md","hash":"168f57bb63563b9671d0c4f10c0940e7eec261f0","modified":1634199665779},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1634199665783},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1634199665783},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1634199665787},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1634199665787},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1634199665787},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1634199665787},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1634199665791},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1634199665791},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1634199665791},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1634199665795},{"_id":"themes/next/source/lib/pace/pace-theme-flat-top.min.css","hash":"5e1c97e232b46e48592a8e4983ae5a89e0a7da6a","modified":1634199665795},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1634199665799},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1634199665799},{"_id":"themes/next/source/lib/pace/pace-theme-material.min.css","hash":"f1ff83985c090f3a3236554c5ef69542dcceb049","modified":1634199665815},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1634199665819},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1634199665823},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1634199665171},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1634199665175},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"ca5e70662dcfb261c25191cc5db5084dcf661c76","modified":1634199664615},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"8e7b57a72e757cf95278239641726bb2d5b869d1","modified":1634199664619},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"681d33e3bc85bdca407d93b134c089264837378c","modified":1634199664723},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"a1690e035b505d28bdef2b4424c13fc6312ab049","modified":1634199664723},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"0b2c4b78eead410020d7c4ded59c75592a648df8","modified":1634199664747},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a2e9e00962e43e98ec2614d6d248ef1773bb9b78","modified":1634199664747},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"b1f0fab7344a20ed6748b04065b141ad423cf4d9","modified":1634199664751},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1634199664775},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1634199664779},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1634199664779},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"18ce72d90459c9aa66910ac64eae115f2dde3767","modified":1634199664779},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1634199664807},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"7785bd756e0c4acede3a47fec1ed7b55988385a5","modified":1634199664815},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"f6516d0f7d89dc7b6c6e143a5af54b926f585d82","modified":1634199664823},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"bb7ace23345364eb14983e860a7172e1683a4c94","modified":1634199664835},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"7104b9cef90ca3b140d7a7afcf15540a250218fc","modified":1634199664839},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"6136da4bbb7e70cec99f5c7ae8c7e74f5e7c261a","modified":1634199664839},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1634199664839},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"f0131db6275ceaecae7e1a6a3798b8f89f6c850d","modified":1634199664847},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1634199664847},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"93db5dafe9294542a6b5f647643cb9deaced8e06","modified":1634199664847},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"2b2e7b5cea7783c9c8bb92655e26a67c266886f0","modified":1634199664847},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1634199664851},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1634199664851},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"e282df938bd029f391c466168d0e68389978f120","modified":1634199664859},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"70a4324b70501132855b5e59029acfc5d3da1ebd","modified":1634199664859},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"85da2f3006f4bef9a2199416ecfab4d288f848c4","modified":1634199664859},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"44f47c88c06d89d06f220f102649057118715828","modified":1634199664859},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"e740deadcfc4f29c5cb01e40f9df6277262ba4e3","modified":1634199664863},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1634199664863},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1634199665071},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1634199665119},{"_id":"themes/next/source/lib/pace/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1634199665327},{"_id":"themes/next/source/lib/pace/.git/config","hash":"2d2d89ef45678eb4b801dd56299bb7b0216456e9","modified":1634199665275},{"_id":"themes/next/source/lib/pace/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1634199665187},{"_id":"themes/next/source/lib/pace/.git/index","hash":"269fc21ff95ec4bea6d463ddf3ebdc566b00961b","modified":1634199665271},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"a47725574e1bee3bc3b63b0ff2039cc982b17eff","modified":1634199664619},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"2e3bf7baf383c9073ec5e67f157d3cb3823c0957","modified":1634199664667},{"_id":"themes/next/source/lib/pace/.git/packed-refs","hash":"7728d474cdaa7943851d42c42eaa718b8afbab97","modified":1634199665287},{"_id":"themes/next/source/lib/pace/.github/stale.yml","hash":"fd0856f6745db8bd0228079ccb92a662830cc4fb","modified":1634199665831},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1634199664639},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1634199664639},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1634199664639},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"e771dcb0b4673e063c0f3e2d73e7336ac05bcd57","modified":1634199664643},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"d21d4ac1982c13d02f125a67c065412085a92ff2","modified":1634199664643},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"e75693f33dbc92afc55489438267869ae2f3db54","modified":1634199664647},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1634199664651},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"902569a9dea90548bec21a823dd3efd94ff7c133","modified":1634199664651},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ded41fd9d20a5e8db66aaff7cc50f105f5ef2952","modified":1634199664651},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1634199664651},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1634199664655},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"65cb6edb69e94e70e3291e9132408361148d41d5","modified":1634199664655},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"6a97bcfa635d637dc59005be3b931109e0d1ead5","modified":1634199664659},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"d114b2a531129e739a27ba6271cfe6857aa9a865","modified":1634199664659},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1634199664659},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1634199664663},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1634199664663},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a760ee83ba6216871a9f14c5e56dc9bd0d9e2103","modified":1634199664663},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1634199664683},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1634199664683},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1634199664683},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"9f0b93d109c9aec79450c8a0cf4a4eab717d674d","modified":1634199664687},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1634199664687},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"454a4aebfabb4469b92a8cbb49f46c49ac9bf165","modified":1634199664695},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e2d606f1ac343e9be4f15dbbaf3464bc4df8bf81","modified":1634199664703},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"e7a9fdb6478b8674b1cdf94de4f8052843fb71d9","modified":1634199664707},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1634199664707},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1634199664707},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"5f432a6ed9ca80a413c68b00e93d4a411abf280a","modified":1634199664707},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"45a239edca44acecf971d99b04f30a1aafbf6906","modified":1634199664711},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1634199664711},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1634199664727},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"fa0222197b5eee47e18ac864cdc6eac75678b8fe","modified":1634199664731},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1634199664731},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"1f0e7fbe80956f47087c2458ea880acf7a83078b","modified":1634199664731},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1634199664731},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1634199664735},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1634199664739},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1634199664739},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"a9cd93c36bae5af9223e7804963096274e8a4f03","modified":1634199664739},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1634199664739},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f71a3e86c05ea668b008cf05a81f67d92b6d65e4","modified":1634199664763},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1634199664767},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"35c871a809afa8306c8cde13651010e282548bc6","modified":1634199664767},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1634199664771},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"1d2778ca5aeeeafaa690dc2766b01b352ab76a02","modified":1634199664799},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1634199664799},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1634199664799},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"e4d9a77ffe98e851c1202676940097ba28253313","modified":1634199664799},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1634199664803},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"f23670f1d8e749f3e83766d446790d8fd9620278","modified":1634199664803},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1634199664803},{"_id":"themes/next/source/lib/pace/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1634199665243},{"_id":"themes/next/source/lib/pace/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1634199665231},{"_id":"themes/next/source/lib/pace/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1634199665227},{"_id":"themes/next/source/lib/pace/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1634199665239},{"_id":"themes/next/source/lib/pace/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1634199665211},{"_id":"themes/next/source/lib/pace/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1634199665235},{"_id":"themes/next/source/lib/pace/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1634199665235},{"_id":"themes/next/source/lib/pace/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1634199665215},{"_id":"themes/next/source/lib/pace/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1634199665227},{"_id":"themes/next/source/lib/pace/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1634199665231},{"_id":"themes/next/source/lib/pace/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1634199665207},{"_id":"themes/next/source/lib/pace/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1634199665191},{"_id":"themes/next/source/lib/pace/.git/logs/HEAD","hash":"38e325f594484cff6ac83c3a705ebbc02a0b2d34","modified":1634199665295},{"_id":"themes/next/source/lib/pace/.git/objects/00/13175fe71888324d9142744034e8296501174a","hash":"0ad0e50f7fe91fe14491924aa4b1e2e8f060a5cd","modified":1634199665507},{"_id":"themes/next/source/lib/pace/.git/objects/08/38a9623fabb4014d7ed7c0fa4ff8a5bc5e697e","hash":"aeee9d11c3a4c1dec1ad8414dca14e5aa9ca2b7d","modified":1634199665399},{"_id":"themes/next/source/lib/pace/.git/objects/0c/dada082d621dbfdd00f7020c33dc751129167f","hash":"b490c11cdefde6b331a7d4ddb055e34ad08459d8","modified":1634199665479},{"_id":"themes/next/source/lib/pace/.git/objects/1c/159365320ef5dde63906912f3df067376b40d0","hash":"1dd6b7373c3f9c67e34aa319c9c08fd0f667156a","modified":1634199665655},{"_id":"themes/next/source/lib/pace/.git/objects/23/4f9b3e93f06a85cb2ec01acc872ccdc2bec7cb","hash":"63f8640eceff35a80175a102fcbd8789e690cfaa","modified":1634199665663},{"_id":"themes/next/source/lib/pace/.git/objects/27/8da13dccb38df6bb34360d4919ee2ba81ea6c7","hash":"c5618315849061059ddd6cbea8e11252c561cf48","modified":1634199665775},{"_id":"themes/next/source/lib/pace/.git/objects/2f/9eba51ec174b1e0c719d12cafa7c3c07140471","hash":"fc994d9d8b3b21ec7c941eea7e3862970e297e9b","modified":1634199665487},{"_id":"themes/next/source/lib/pace/.git/objects/35/a749d823ad0aae6111a76dc501a1170478f376","hash":"e757129fb6bca3170b62b05f3e850e4b55f3ae88","modified":1634199665627},{"_id":"themes/next/source/lib/pace/.git/objects/3e/dcd352d2a1a60dbb6a43e7e9f00bab8b55791a","hash":"725bf5094855cd943dd1cd351906fb1ebec1d861","modified":1634199665543},{"_id":"themes/next/source/lib/pace/.git/objects/41/28e69301ad36a283c0fc523f3aef89644d2467","hash":"d8b985cf431fbdc5b4fa3be89e27db7a3437c920","modified":1634199665719},{"_id":"themes/next/source/lib/pace/.git/objects/49/0db22b657dd64430d003fe2831905a54858b22","hash":"43694656c4c331cfa3667afca630bd486ac0d0fe","modified":1634199665595},{"_id":"themes/next/source/lib/pace/.git/objects/49/234ebf40b265bb9664d22bc391237ff856a3df","hash":"b527eb3cde1e78771ff68c5f633a3cf91816e274","modified":1634199665603},{"_id":"themes/next/source/lib/pace/.git/objects/4d/fbb499a4f7b2f26a535c335cd66c966ff8b261","hash":"14e4cdcc137045c7efed32f796273d40c9fcef87","modified":1634199665607},{"_id":"themes/next/source/lib/pace/.git/objects/53/3d55db0342c2b011ac05703c3b42e88a25c1ed","hash":"c48454760d2e04602a5499188b33d38839c58aee","modified":1634199665619},{"_id":"themes/next/source/lib/pace/.git/objects/5f/2920b23993e6476c3edc77f76eba566e74dd7e","hash":"122d8ac05247282340317587435273e6f3c5a188","modified":1634199665647},{"_id":"themes/next/source/lib/pace/.git/objects/60/0378418401f2b0e7c58407a7bbc5a5196cfa51","hash":"20489d796247dda758599f40cbfcf14d194ef64a","modified":1634199665423},{"_id":"themes/next/source/lib/pace/.git/objects/60/8cf35556105f51783ede3fa1e6c2102e8945de","hash":"2c71f7a2ff047119ee898a8edec216238710b89b","modified":1634199665427},{"_id":"themes/next/source/lib/pace/.git/objects/61/fcbe3a99ad371eacdf3a3703883f8e95e072c8","hash":"480b60d684f9a077ade5dda0acfc75bcd9597aff","modified":1634199665451},{"_id":"themes/next/source/lib/pace/.git/objects/68/54b8cf544e974998061fb08ea2bd96b561ed68","hash":"1aa0706b6495a5ebd70c3822ac3533df41940fb7","modified":1634199665635},{"_id":"themes/next/source/lib/pace/.git/objects/69/a20d65d83035fdb01734a8eabe3340f740a4cb","hash":"9e95b02d8e43ec92e06bee3f60dffb74e8e7b9fa","modified":1634199665503},{"_id":"themes/next/source/lib/pace/.git/objects/6a/fa2f52022b00caac3817898d4338ce4d99aa45","hash":"1a6e249ff197293bc3733ddb7eb99d82a21b9342","modified":1634199665739},{"_id":"themes/next/source/lib/pace/.git/objects/7e/7e5cf8a2a18caf4e0262d1656dea658374d5ae","hash":"47eb39060193e0032e3223b4dfc1a6a55f6612fd","modified":1634199665743},{"_id":"themes/next/source/lib/pace/.git/objects/82/8dcba3c8a21de08d1eb38f2eee453b51543188","hash":"629aad2ee2e564790e78cd46e99ad396544960ab","modified":1634199665551},{"_id":"themes/next/source/lib/pace/.git/objects/84/a17ac7b4fe9cea559de91f00af88f810bff7f1","hash":"b41b6d3cbccd75b711f0523bba1c26bf19b0a862","modified":1634199665415},{"_id":"themes/next/source/lib/pace/.git/objects/86/ab4cb05d5132451e71dc4ecf6ef663f7404126","hash":"53f157552aa57d405ce6ab58c424bb948c2820d8","modified":1634199665459},{"_id":"themes/next/source/lib/pace/.git/objects/8b/b4535a79cc15127f8906b24c4e0bb4a38a5947","hash":"9c2d65a63f18929b09f3592dda064f24309ff98b","modified":1634199665567},{"_id":"themes/next/source/lib/pace/.git/objects/97/1e8a1f2ad6d45f693980c106af0aead9d1c215","hash":"e45f0963920a53a57f6b53d178e5b05a8e315189","modified":1634199665515},{"_id":"themes/next/source/lib/pace/.git/objects/9b/3058068409f2282607ebb91717d7a6a1406230","hash":"651c5857021e11dc397df86dbe0f01e6c7dc7f16","modified":1634199665575},{"_id":"themes/next/source/lib/pace/.git/objects/a6/dbd9c99e726f621e2bdcd3c6fe2795a5d4272d","hash":"25350dd31f504af7206610ced355d162aabda8dd","modified":1634199665591},{"_id":"themes/next/source/lib/pace/.git/objects/aa/813c5a6398600e01b740696cd889eb3becad84","hash":"c62a1513ca820dc59fe1cd6d9ec16c92e0e2fbf0","modified":1634199665443},{"_id":"themes/next/source/lib/pace/.git/objects/c0/05c71f1a000d8187df58083d215c962d7f5505","hash":"dffd212ca2ec705233fabe82a6f483d6be4b151d","modified":1634199665563},{"_id":"themes/next/source/lib/pace/.git/objects/d4/7aaf8effab41aa414596c56dff4d35ff8da1f5","hash":"33e758f44ad48eb1540363a06c31bed1ed929c60","modified":1634199665755},{"_id":"themes/next/source/lib/pace/.git/objects/da/79363b808519d44a7eda67d7bc81e1587a06e8","hash":"0dc5dc27991da9a09d705e488bc3f1fe5a4d4728","modified":1634199665403},{"_id":"themes/next/source/lib/pace/.git/objects/db/d45db3a1d6c09fdf30fc1f0bdc2c6fab5a0680","hash":"5c0bc5c141068651fcb47ef549f556d67153eecf","modified":1634199665391},{"_id":"themes/next/source/lib/pace/.git/objects/de/79ab6539ac3702aaac64b879d95e6575f4eefa","hash":"0046fefd52ed4679e0fee757cc91ced94e3ddc12","modified":1634199665711},{"_id":"themes/next/source/lib/pace/.git/objects/e8/83088ed2cfe69a983e9e277a6b54b7de226344","hash":"2386487a5933380ac3305ea6b5744d75bdd07292","modified":1634199665475},{"_id":"themes/next/source/lib/pace/.git/objects/ec/6708dc18a5dd312a6735d4d09eddbdb76e75c2","hash":"66e03a78b2f1d36feb9f9347dd5e68e344c3ee68","modified":1634199665767},{"_id":"themes/next/source/lib/pace/.git/objects/f3/0e0a99bb016267bde55537dd47b3657ae59544","hash":"8bf0bc17a6111b6a82981073133f33cc8e815c41","modified":1634199665535},{"_id":"themes/next/source/lib/pace/.git/refs/heads/master","hash":"22684435265b2bb504024b34b80ffbd6786a2411","modified":1634199665251},{"_id":"themes/next/source/lib/pace/.git/logs/refs/heads/master","hash":"38e325f594484cff6ac83c3a705ebbc02a0b2d34","modified":1634199665323},{"_id":"themes/next/source/lib/pace/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1634199665271},{"_id":"themes/next/source/lib/pace/.git/logs/refs/remotes/origin/HEAD","hash":"38e325f594484cff6ac83c3a705ebbc02a0b2d34","modified":1634199665315},{"_id":"source/images/software-setup/mysql/mysql-setup2.jpg","hash":"8a5b1d5b86080fc809c8fe73f56baea664f70b5f","modified":1634199545035},{"_id":"themes/next/source/js/utils.js","hash":"2c6e6b4d9a592fbb4bf04689524db2cdfcd94ca7","modified":1634199665023},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1634199665115},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1634199665151},{"_id":"source/images/system-tap/own-path-variable/own-path-variable6.jpg","hash":"b44f4426d138f0cbe52a9c12150256c323ee11f0","modified":1634199545871},{"_id":"source/images/yourbackground.jpg","hash":"0fbf3935cb092222f8393f3c108fedaf722d9cc8","modified":1634199546563},{"_id":"source/images/software-setup/mysql/mysql-setup1.jpg","hash":"23a72deac5a40b35092310b878bb2456d7620801","modified":1634199544827},{"_id":"source/images/linux/ethcard/ifconfig.png","hash":"7c427d6e3f572b6a1eb2dd4c1ab481500b4ed7db","modified":1634199543539},{"_id":"source/images/js/miniProgram/miniprogramFixedTop.gif","hash":"5418a01af06f4326fa5482bdb688f8d34e1e9a9a","modified":1634199542087},{"_id":"public/content.json","hash":"675230824c0638209dc6695d0ca6f4329de0c521","modified":1665153501746},{"_id":"public/search.xml","hash":"378e861709892dc8d25ca37ec1d0fb56412ebfa4","modified":1665153501746},{"_id":"public/back_skill_experience/assembly/assembly-register.html","hash":"21a0760efc0fdcd3610d8e936776926962953302","modified":1665153501746},{"_id":"public/note/read_note/assembly_language/assembly-unit.html","hash":"d3e22b0c8e327266bcf511b61671d71c3b3dcb3d","modified":1665153501746},{"_id":"public/mobile_skill_experience/android/http-connect-failed-EHOSTUNREACH.html","hash":"dbc87edadede3fe33b122eeab2f6e7ed6cd61070","modified":1665153501746},{"_id":"public/config_skill_experience/system_config/linux/sudo-env.html","hash":"f186219d210b6b755aa5251dd832216028024293","modified":1665153501746},{"_id":"public/config_skill_experience/system_config/linux/how-to-run-process-in-background.html","hash":"4b8198a814cd058617a3b422db08351dddb04c1c","modified":1665153501746},{"_id":"public/config_skill_experience/system_config/linux/how-to-install.html","hash":"25aa5c1dd7f009b914d10b7eff2709b68c899bc0","modified":1665153501746},{"_id":"public/mobile_skill_experience/flutter/flutter_page_hook_dart.html","hash":"38b3f07da888e90b8340bc171793d110d779293c","modified":1665153501746},{"_id":"public/mobile_skill_experience/flutter/bottom-bar-unread.html","hash":"017bd36fa2f3765f88fdff405512130ed976f708","modified":1665153501746},{"_id":"public/mobile_skill_experience/flutter/flutter-android-internet.html","hash":"b45ffe108033cf3e4e0bfb4d05d5967cda43502f","modified":1665153501746},{"_id":"public/mobile_skill_experience/flutter/set-up-environment.html","hash":"e0790555f7e6b830481cf452897a192cd9eb3610","modified":1665153501746},{"_id":"public/config_skill_experience/system_config/linux/connect-wifi.html","hash":"4dbcd78340c4c2795e61ebc60041cf52753badaa","modified":1665153501746},{"_id":"public/sentiment/a-fucking-difficult-problem.html","hash":"e37aeb15e195a3269573bc93313d00a0fd45802e","modified":1665153501746},{"_id":"public/config_skill_experience/develop__tool_config/mysql/mysql-high-version-group-by-error.html","hash":"e62895680d2fbbfc32d792bedcc727865afe1ceb","modified":1665153501746},{"_id":"public/script_skill_experience/python/use-shell-in-python.html","hash":"3a692c605ad549938bfa1f6495c0ff3d4b5c8da8","modified":1665153501746},{"_id":"public/config_skill_experience/develop_envior_config/php/apache2-4-php7-3-open-pit.html","hash":"fc71650d6fd17bad1a3b22fc2a8cf5675aa44467","modified":1665153501746},{"_id":"public/config_skill_experience/system_config/linux/connect-ftp.html","hash":"4f7a6ea72b3660a1d97024a585f5dc86f2527225","modified":1665153501746},{"_id":"public/other_skill_experience/heck/UltraCompare-Brute-force.html","hash":"74daa997f92a37eb8dc1eea824665871f55d7007","modified":1665153501746},{"_id":"public/back_skill_experience/java/pit/jdbc-mysql-conn.html","hash":"bbb158c73cb895a6a3a642f9846defecd28576bb","modified":1665153501746},{"_id":"public/config_skill_experience/system_config/virtual_machine/vmware-not-working.html","hash":"17942e7737191422658cbc47359db94b396d59d1","modified":1665153501746},{"_id":"public/config_skill_experience/system_config/linux/linux-backspace.html","hash":"3e69e74d5dba3d85d16a531d584b196a65ec58ca","modified":1665153501746},{"_id":"public/back_skill_experience/java/javaBased/java-linux-mkdir.html","hash":"a18ecbb930c0bb563ebc9ae7608ef36e4b370e2e","modified":1665153501746},{"_id":"public/back_skill_experience/java/spring/springboot/jpa/springboot-jpa-update-Not-supported-for-DML-operations.html","hash":"e4241c65ce195092f618ac0862a494885800b674","modified":1665153501746},{"_id":"public/front_skill_experience/miniProgram/first-step.html","hash":"593a9212a290e38d8e2a298951ec7358982ccf85","modified":1665153501746},{"_id":"public/config_skill_experience/system_config/virtual_machine/vmware-share-folder.html","hash":"f89e902c94b96b1860832bd72725b55a94a1db51","modified":1665153501746},{"_id":"public/sentiment/about-appearance-and-nature.html","hash":"73d115a0ad37b85b53a351edcfa65e62142d5364","modified":1665153501746},{"_id":"public/note/source_note/mybatis-enhance/read-mybatis-enhance-tableFieldsConstruct.html","hash":"8ce077bb6ce7d01a9f3babe78aae9ef4389d88d2","modified":1665153501746},{"_id":"public/note/read_note/javascript-The-Definitive-Guide/javascript-The-Definitive-Guide-read-note-firstDay.html","hash":"99f26940743f1ac9c649694e4cf5360d274e9d67","modified":1665153501746},{"_id":"public/welcome.html","hash":"1b264bdfbfbc49e556e4f770eaffb45f39c17f48","modified":1665153501746},{"_id":"public/archives/index.html","hash":"5007d11a3932f7459ab87f7d639cc1b12ddc3e82","modified":1665153501746},{"_id":"public/archives/page/2/index.html","hash":"db8303387b39937dfd58f80564774bfff119112f","modified":1665153501746},{"_id":"public/archives/page/3/index.html","hash":"3fae6b3706a495688374f77276b18b9067e0edca","modified":1665153501746},{"_id":"public/archives/page/4/index.html","hash":"0247257b7e4405d8e1bf6a6d337958e02592fb6e","modified":1665153501746},{"_id":"public/archives/page/5/index.html","hash":"6e47c4d97b990afad2241f50c8f111ceb5fa6c40","modified":1665153501746},{"_id":"public/archives/page/6/index.html","hash":"df04917b7cb1213f94e8ccb4cd394dc54d66ad2e","modified":1665153501746},{"_id":"public/archives/page/7/index.html","hash":"06fd7f6cf8f6147db4b2831b50b096c20f788a86","modified":1665153501746},{"_id":"public/archives/page/8/index.html","hash":"0c2f6cf53267de3d8e5fee2ce8cd409347d7bf5c","modified":1665153501746},{"_id":"public/archives/page/9/index.html","hash":"4f886f0f5058f87cd0e8e3725e57873a153ec65b","modified":1665153501746},{"_id":"public/archives/page/10/index.html","hash":"6523a0b752c952b1b1ca4baefd5ac863305436e2","modified":1665153501746},{"_id":"public/archives/page/11/index.html","hash":"ffd1429dd58d15cd54de4efceeda7b74b258bd78","modified":1665153501746},{"_id":"public/archives/page/12/index.html","hash":"48396c489c177c50b2e31d28d03a0a81226bc166","modified":1665153501746},{"_id":"public/archives/page/13/index.html","hash":"88df243b047a93af9cbd86abe8ed17ab5c7a8eca","modified":1665153501746},{"_id":"public/archives/page/14/index.html","hash":"ad019ced069d2a7513b564506bf28e6edda69136","modified":1665153501746},{"_id":"public/archives/page/15/index.html","hash":"55f803e2def74bfcb72b1b635ef79cfa78eb2df9","modified":1665153501746},{"_id":"public/archives/page/16/index.html","hash":"d01da01a0a3be1696be8518d38ef5f3a199d0e8b","modified":1665153501746},{"_id":"public/archives/page/17/index.html","hash":"2873e2bd721b21fc891f34a054c8ee2721a3b663","modified":1665153501746},{"_id":"public/archives/page/18/index.html","hash":"1ae59c1eba486b1375c7e6e4028e48bfff03f861","modified":1665153501746},{"_id":"public/archives/page/19/index.html","hash":"b9e778b2e97d05fb6ba6b5fe59f8dd3884d1b6c7","modified":1665153501746},{"_id":"public/archives/2018/index.html","hash":"d6656f29d1520bd413a225f08c80aa918cdadca4","modified":1665153501746},{"_id":"public/archives/2018/page/2/index.html","hash":"297f7e40309cfccac5c25d50dc7d590a86bc7e7e","modified":1665153501746},{"_id":"public/archives/2018/page/3/index.html","hash":"6ce372ff1ad760e780773e1d47a4841a2802f6f8","modified":1665153501746},{"_id":"public/archives/2018/page/4/index.html","hash":"d3b187fd2882272f3eb5618018dc691a7ed12ed9","modified":1665153501746},{"_id":"public/archives/2018/11/index.html","hash":"8f8ee0c4e7ca2e0f78e262ee846d276c224b0e9d","modified":1665153501746},{"_id":"public/archives/2018/11/page/2/index.html","hash":"6d72517909ed9d6e9986996edde16a172a9c3c26","modified":1665153501746},{"_id":"public/archives/2018/12/index.html","hash":"4a70a251c6df4b45eb56af8e9be14aac548f6da4","modified":1665153501746},{"_id":"public/archives/2018/12/page/2/index.html","hash":"68902daed2685959074ba76f28c391df00e98ef5","modified":1665153501746},{"_id":"public/archives/2019/index.html","hash":"f037e4ce40e3dd8d02ed602cddcbab00c0bc6c44","modified":1665153501746},{"_id":"public/archives/2019/page/2/index.html","hash":"6c99d6a5f7362753e21aa4fa7546177712977db6","modified":1665153501746},{"_id":"public/archives/2019/page/3/index.html","hash":"581048e0a4eebf27f954e18e1143176700561713","modified":1665153501746},{"_id":"public/archives/2019/page/4/index.html","hash":"8603c2cbcb6f525a88b2bfe8ee91452ec410134b","modified":1665153501746},{"_id":"public/archives/2019/page/5/index.html","hash":"218f6f01f675eea531724d1b758939c51ed7215c","modified":1665153501746},{"_id":"public/archives/2019/page/6/index.html","hash":"e5ed077e2ef88b45a8457ea37ab6cfa4ebf83c03","modified":1665153501746},{"_id":"public/archives/2019/page/7/index.html","hash":"6769f15e9115072ac796b139ac3415a246879e25","modified":1665153501746},{"_id":"public/archives/2019/page/8/index.html","hash":"65e7769d5108519b5636e072268a14f2bb54a2da","modified":1665153501746},{"_id":"public/archives/2019/page/9/index.html","hash":"144a1fc3c987af1e8f6d5062a9b84ffb2d3dabdb","modified":1665153501746},{"_id":"public/archives/2019/page/10/index.html","hash":"d963ca2ac10f43eb92c59da730836751e25284ae","modified":1665153501746},{"_id":"public/archives/2019/page/11/index.html","hash":"1659c282c4e5bdb77466136f838d14300d71a9a6","modified":1665153501746},{"_id":"public/archives/2019/page/12/index.html","hash":"da0931237b1e056b4ed3357438f8650cc7b1e2d6","modified":1665153501746},{"_id":"public/archives/2019/page/13/index.html","hash":"dba68a11a462bcf98cd970d162300eef31881967","modified":1665153501746},{"_id":"public/archives/2019/01/index.html","hash":"a81d46d27247432adaec7938d65437a6eff47b10","modified":1665153501746},{"_id":"public/archives/2019/01/page/2/index.html","hash":"47a7dc66bcd84a3971b30eb7127ff2663da8f2ec","modified":1665153501746},{"_id":"public/archives/2019/02/index.html","hash":"f1d9f67495946e820b3de330d832bbb8b6a6ae46","modified":1665153501746},{"_id":"public/archives/2019/02/page/2/index.html","hash":"84c30d7adf4d9a7e697a7a20be95a76c7314fede","modified":1665153501746},{"_id":"public/archives/2019/03/index.html","hash":"bf580a673b37bec2e19683533120e314e90785a6","modified":1665153501746},{"_id":"public/archives/2019/03/page/2/index.html","hash":"b72ed9a83695342c66a080fbdc06d6bd01061743","modified":1665153501746},{"_id":"public/archives/2019/04/index.html","hash":"cafda84da9a6688fbdfd6799faddde8c4b3bc708","modified":1665153501746},{"_id":"public/archives/2019/05/index.html","hash":"e99c2006e470709d1c7326b8d712bee15053eb6b","modified":1665153501746},{"_id":"public/archives/2019/05/page/2/index.html","hash":"c5b7372e9227b925b39504f44bec2579f1e50220","modified":1665153501746},{"_id":"public/archives/2019/06/index.html","hash":"4dca17361dbeec5a4d678da1460a6c6e696ff48c","modified":1665153501746},{"_id":"public/archives/2019/06/page/2/index.html","hash":"4cc7072a168a23cb1feb90da02085e3e689869cd","modified":1665153501746},{"_id":"public/archives/2019/07/index.html","hash":"6accaac1f8ffe319bc056755d1ced010326328d3","modified":1665153501746},{"_id":"public/archives/2019/07/page/2/index.html","hash":"f9ea9953ac5a1ede2b878af4c50c9b087d8dbb79","modified":1665153501746},{"_id":"public/archives/2019/08/index.html","hash":"e2d4241b72bad9f57a5c888dd857bb378df5b302","modified":1665153501746},{"_id":"public/archives/2019/09/index.html","hash":"18680cbc650816e73f109871832d2e7d027853f0","modified":1665153501746},{"_id":"public/archives/2019/10/index.html","hash":"93d5ba8693050d27e07e77a2faa5e7862a090749","modified":1665153501746},{"_id":"public/archives/2019/11/index.html","hash":"0a291bec095d4087f10847218e93190315dbb583","modified":1665153501746},{"_id":"public/archives/2019/12/index.html","hash":"fc9a26036deb847db8a14b40cf45d625657ae341","modified":1665153501746},{"_id":"public/archives/2020/index.html","hash":"0edebede51bd48d90fe961616b5f45f4ee8f6164","modified":1665153501746},{"_id":"public/archives/2020/page/2/index.html","hash":"d0b256482557950b4fddc003b41598b2574bc782","modified":1665153501746},{"_id":"public/archives/2020/page/3/index.html","hash":"d738b2f96da02152b26c643cff3bd7d93d91aa54","modified":1665153501746},{"_id":"public/archives/2020/01/index.html","hash":"52edc2ae2a3ece84e32eba36080ee9a2e3eab9e8","modified":1665153501746},{"_id":"public/archives/2020/02/index.html","hash":"8351a0793d39353394f3f402970c779704f44cd3","modified":1665153501746},{"_id":"public/archives/2020/03/index.html","hash":"1b04c7406646a447a058c49ea1a2e3c9434caa9d","modified":1665153501746},{"_id":"public/archives/2020/04/index.html","hash":"d282e4a7b1144c9accd695c9fb71579eb7aa8f34","modified":1665153501746},{"_id":"public/archives/2020/05/index.html","hash":"1b65e2b9ec2c9f12f2a6a6bf1aaaea147275487e","modified":1665153501746},{"_id":"public/archives/2020/06/index.html","hash":"538df92f677a0667a02ba030b1a0f37b4ff2131c","modified":1665153501746},{"_id":"public/archives/2020/07/index.html","hash":"5b7cb8f2f2903abba1fdfedd9a6e13faebd358bc","modified":1665153501746},{"_id":"public/archives/2020/08/index.html","hash":"f2c91bc05b5fc6f2184f38fac84ab1789c9f4b6f","modified":1665153501746},{"_id":"public/archives/2020/12/index.html","hash":"8ac936fee5d806a8b370318926cd71b134b2c18d","modified":1665153501746},{"_id":"public/categories/collect/index.html","hash":"ac7888287a2f06848d27eb46c8faff4b398b7103","modified":1665153501746},{"_id":"public/categories/other-skill-experience/index.html","hash":"87223fd2c625d452b153547a2f615c0af0def684","modified":1665153501746},{"_id":"public/categories/sentiment/index.html","hash":"2f744ba253dcfc3a350e1f09f9ea04e2ceda7623","modified":1665153501746},{"_id":"public/categories/back-skill-experience/index.html","hash":"ac4abe6881e1609adb0fb1dad057f2d86dda6dbe","modified":1665153501746},{"_id":"public/categories/back-skill-experience/page/2/index.html","hash":"55b878b7ba8e382390ce91318028c9f23efbed65","modified":1665153501746},{"_id":"public/categories/back-skill-experience/page/3/index.html","hash":"4b64803f892d78056b94b94eee654b938ba37869","modified":1665153501746},{"_id":"public/categories/blog-skill-experience/index.html","hash":"8469e5f012c5b54b9c5566a9e9993f47a289e4b8","modified":1665153501746},{"_id":"public/categories/front-skill-experience/index.html","hash":"5ddb7c9ab6d279c3a03dbebccdff7e4891528e1a","modified":1665153501746},{"_id":"public/categories/front-skill-experience/page/2/index.html","hash":"943c4954934aa298ccbc83c34f7b6cd095a56f30","modified":1665153501746},{"_id":"public/categories/back-skill-experience/assembly/index.html","hash":"262229b205befef4038e24e9528c17783a85e05b","modified":1665153501746},{"_id":"public/categories/back-skill-experience/java/index.html","hash":"651e73eee306186860b1216ea9529a99aa6f5b43","modified":1665153501746},{"_id":"public/categories/back-skill-experience/java/page/2/index.html","hash":"6816580b338f374a29c12f755c86bcb09abea936","modified":1665153501746},{"_id":"public/categories/back-skill-experience/java/page/3/index.html","hash":"ea399093b1cb202fbf94191f75b9b1a5cca15a20","modified":1665153501746},{"_id":"public/categories/blog-skill-experience/GitBook/index.html","hash":"11582cc10e66ddcb582c8997d8aad784c5d7bc1e","modified":1665153501746},{"_id":"public/categories/blog-skill-experience/hexo/index.html","hash":"0515940b5fc0149706f77025fd08cba6855e3094","modified":1665153501746},{"_id":"public/categories/leetcode/index.html","hash":"18703958e9ee1b96615d2fd7af430d7b2d987e8f","modified":1665153501746},{"_id":"public/categories/mobile-skill-experience/index.html","hash":"bc5244b25f8b670a111878556651be6debcb1585","modified":1665153501746},{"_id":"public/categories/mobile-skill-experience/page/2/index.html","hash":"64cf1a6cd0e9623df799b6109907e2ee34dcfaad","modified":1665153501746},{"_id":"public/categories/front-skill-experience/base/index.html","hash":"19e46d18cabe1a716aff966494fddbc0501fd822","modified":1665153501746},{"_id":"public/categories/back-skill-experience/assembly/8086/index.html","hash":"0a4a59bb53335f864fb1330f886fd3a06fad70ad","modified":1665153501746},{"_id":"public/categories/front-skill-experience/mini-program/index.html","hash":"2916fa0ab45076067ab835b551f13ad58459a858","modified":1665153501746},{"_id":"public/categories/other-skill-experience/heck/index.html","hash":"714e84b04950cc17c2f239aeb4e13c7f512962df","modified":1665153501746},{"_id":"public/categories/script-skill-experience/index.html","hash":"8eef66d5030eccb1ee48b62b60f062ac2211220a","modified":1665153501746},{"_id":"public/categories/back-skill-experience/javafx/index.html","hash":"8e7372e576fe342ed9556ffbd44b011989a13fa1","modified":1665153501746},{"_id":"public/categories/blog-skill-experience/GitBook/AsciiDoc/index.html","hash":"1d68f378f3ee00bc4302fe1bc1cb82991b7a05c5","modified":1665153501746},{"_id":"public/categories/front-skill-experience/vue/index.html","hash":"697955e2467e62ac24536230edc8b050fa443635","modified":1665153501746},{"_id":"public/categories/front-skill-experience/webpack/index.html","hash":"c39039f1c89980fbe12575a68d1ced9b0fb13edc","modified":1665153501746},{"_id":"public/categories/config-skill-experience/index.html","hash":"8d3edbdbd1d006f47755d0bd81290fc34c531d68","modified":1665153501746},{"_id":"public/categories/config-skill-experience/page/2/index.html","hash":"99a2da436ad6eb99679755a3cc15be0d50cc3fec","modified":1665153501746},{"_id":"public/categories/config-skill-experience/page/3/index.html","hash":"f6d8b3d77d25a50d976cf9e207ef16e395f1a9eb","modified":1665153501746},{"_id":"public/categories/config-skill-experience/page/4/index.html","hash":"e6a9f0d59d393889dc8190b0e7a05d9cbf6532ea","modified":1665153501746},{"_id":"public/categories/leetcode/java/index.html","hash":"709a0edc937e2965f9213fa486642c549f3c94d8","modified":1665153501746},{"_id":"public/categories/mobile-skill-experience/android/index.html","hash":"7c520c61ad41d515eac1c98009b77343713a6336","modified":1665153501746},{"_id":"public/categories/mobile-skill-experience/flutter/index.html","hash":"051d875f8034d35e7ddfa91f1834a7c17e34cd1b","modified":1665153501746},{"_id":"public/categories/mobile-skill-experience/flutter/page/2/index.html","hash":"811b40b04728041002f4e7f0b3091dee38edad5f","modified":1665153501746},{"_id":"public/categories/develop-note/index.html","hash":"aff4be634d877b547a2d2c8e03811838c080c556","modified":1665153501746},{"_id":"public/categories/develop-note/page/2/index.html","hash":"af9a2bce99ce2b736ed9eee1f12a8192a5e5c806","modified":1665153501746},{"_id":"public/categories/note/index.html","hash":"a71e64e45a4f52d7213144ef9f5c9e148fbd59c8","modified":1665153501746},{"_id":"public/categories/note/page/2/index.html","hash":"e419302cd3b74fb998497709bd96b0c36346d46c","modified":1665153501746},{"_id":"public/categories/note/page/3/index.html","hash":"80563a81901580128b7019e6f538f185504c12c1","modified":1665153501746},{"_id":"public/categories/note/page/4/index.html","hash":"08a34f3892f7257727868fd3bbb213372575e4ac","modified":1665153501746},{"_id":"public/categories/note/page/5/index.html","hash":"0997703f7498358e8af8c7697205b263ec2aad52","modified":1665153501746},{"_id":"public/categories/script-skill-experience/python/index.html","hash":"caa93975ea0ec073da8eab55fe0bb3c36d67635f","modified":1665153501746},{"_id":"public/categories/config-skill-experience/develop-tool-config/index.html","hash":"17abb126333fc49f2a1a3bd80fb812cd4dcc9bd6","modified":1665153501746},{"_id":"public/categories/back-skill-experience/java/spring/index.html","hash":"8ba3d4a3a82458901097a8cfc433f2e2248c4eef","modified":1665153501746},{"_id":"public/categories/config-skill-experience/develop-envior-config/index.html","hash":"7b7dd6df5b467c8ef5e0b66363b1260820f17eb4","modified":1665153501746},{"_id":"public/categories/config-skill-experience/system-config/index.html","hash":"fba2784e42a54608bcb99e2461ca066982ca75dc","modified":1665153501746},{"_id":"public/categories/config-skill-experience/system-config/page/2/index.html","hash":"7fb4a901e55ffff17f253c175f83b1a19af37b38","modified":1665153501746},{"_id":"public/categories/config-skill-experience/system-config/page/3/index.html","hash":"3ee01dc4ce7ae3b88da4200f5b977d69f7bc79cc","modified":1665153501746},{"_id":"public/categories/config-skill-experience/middleware/index.html","hash":"2a4d1aaac11b14f42382b66c2257e77f218574ba","modified":1665153501746},{"_id":"public/categories/config-skill-experience/virtual-machine/index.html","hash":"667ab28614678c7962590b50e61ddc94e8073f6c","modified":1665153501746},{"_id":"public/categories/develop-note/商城/index.html","hash":"877bc8746d62ed0cd54a9f9ccbd3536c1bc84bb0","modified":1665153501746},{"_id":"public/categories/develop-note/商城/page/2/index.html","hash":"9d0b98b703d4f3dcb89543452ae462ee87ee46f4","modified":1665153501746},{"_id":"public/categories/note/blog-note/index.html","hash":"63e58bcd4b5643973e49799a43ef808e16e964db","modified":1665153501746},{"_id":"public/categories/note/the-best-c-plus-plus-course/index.html","hash":"70cb15e3bfd14d5db896282bb94db452b992a8e8","modified":1665153501746},{"_id":"public/categories/note/read-note/index.html","hash":"8062a310ce1e87f5f8663c02503eac4855b0a267","modified":1665153501746},{"_id":"public/categories/note/read-note/page/2/index.html","hash":"89872b172c742fd11a53b4850da20bc9412475d7","modified":1665153501746},{"_id":"public/categories/note/read-note/page/3/index.html","hash":"00dbcc7e3019b04e42a7b81cf38c60d02ac6941a","modified":1665153501746},{"_id":"public/categories/note/read-note/page/4/index.html","hash":"6c2a09354fd3cb452cb18daa87132ca114e09eb3","modified":1665153501746},{"_id":"public/categories/config-skill-experience/develop-tool-config/git/index.html","hash":"4f0b695a1720eb1a514c7e8632e1f2187235422f","modified":1665153501746},{"_id":"public/categories/config-skill-experience/develop-tool-config/mariadb/index.html","hash":"1938aff49a6a1fb52766fe23231406fbc9106d0a","modified":1665153501746},{"_id":"public/categories/config-skill-experience/develop-tool-config/mysql/index.html","hash":"bb88d99bce5a33185eac8a2c7b76b802beac3171","modified":1665153501746},{"_id":"public/categories/note/source-note/index.html","hash":"224ad12ee0bc6eff9e76e8c3d04b31272a4272d9","modified":1665153501746},{"_id":"public/categories/config-skill-experience/system-config/linux/index.html","hash":"79d224fc5a0f880269e376e492a099d12d07f15b","modified":1665153501746},{"_id":"public/categories/config-skill-experience/system-config/linux/page/2/index.html","hash":"ce1f44105cdbee90f53341ea0fafdce70dfba84d","modified":1665153501746},{"_id":"public/categories/config-skill-experience/develop-envior-config/php/index.html","hash":"d617158e4009aaa7ed19c3129c49c454b56064ac","modified":1665153501746},{"_id":"public/categories/config-skill-experience/middleware/rocketMQ/index.html","hash":"0c14bfa39f05862420b4a7f074dc221e73083f8a","modified":1665153501746},{"_id":"public/categories/config-skill-experience/system-config/virtual-machine/index.html","hash":"83061f87dd1d67e23e08094da4331f572c6f57c6","modified":1665153501746},{"_id":"public/categories/config-skill-experience/system-config/windows/index.html","hash":"191305b633295a7b7786305aaba2946ec5bf5dfc","modified":1665153501746},{"_id":"public/categories/develop-note/商城/配置篇/index.html","hash":"10b6b56845ed81d6a2f9cd011d6b94273c4eab07","modified":1665153501746},{"_id":"public/categories/develop-note/商城/配置篇/page/2/index.html","hash":"c5f7d08202f70056992c74cf2c1728dc2f9878c7","modified":1665153501746},{"_id":"public/categories/develop-note/商城/功能篇/index.html","hash":"97a05b334549d184425e48a3f2a5447bd68418d2","modified":1665153501746},{"_id":"public/categories/develop-note/商城/前端篇/index.html","hash":"6a0ccda2f0cab093e225c41f655f22734183fa21","modified":1665153501746},{"_id":"public/categories/develop-note/商城/技巧篇/index.html","hash":"5b556324007cd6ca6572ba0e65f9de87f1858e04","modified":1665153501746},{"_id":"public/categories/note/blog-note/edit-makefile/index.html","hash":"08e8d7a14807de0e4007607e31e0e83e905be5ec","modified":1665153501746},{"_id":"public/categories/note/read-note/The-Linux-Command-Line/index.html","hash":"8819288c55729c9d82b901027119bb8a4539562f","modified":1665153501746},{"_id":"public/categories/note/read-note/The-Linux-Command-Line/page/2/index.html","hash":"f9405aea49df3ffa98f6ddafbeee7a71955adaeb","modified":1665153501746},{"_id":"public/categories/note/read-note/The-Linux-Command-Line/page/3/index.html","hash":"be10abfea41ef2232e374e9ab2b57f3fa77c85a8","modified":1665153501746},{"_id":"public/categories/note/read-note/assembly/index.html","hash":"fbdbfc0a81fed02130c7f149bd59f0bece7edcee","modified":1665153501746},{"_id":"public/categories/note/read-note/javascript-The-Definitive-Guide/index.html","hash":"652cf29c080c9e7210261cd54172008ae8a6f810","modified":1665153501746},{"_id":"public/categories/note/read-note/the-c-programming-language/index.html","hash":"9283dea693b5d8d69258e53420c18df5f347d721","modified":1665153501746},{"_id":"public/categories/note/read-note/大型网站技术架构/index.html","hash":"3b3d21252b3a28cc1f760bb01a7c1ffd2165ad67","modified":1665153501746},{"_id":"public/categories/note/source-note/mybatis-enhance/index.html","hash":"f6f2ee586a11cef16ef6bb5c5f0250c7f46fc70d","modified":1665153501746},{"_id":"public/index.html","hash":"a8f3ec570a436f81484bbd82f5a9fd5d16f168f0","modified":1665153501746},{"_id":"public/page/74/index.html","hash":"969d69c6ade6e5b7fe20fb5c5b1aadc0a9ca165f","modified":1665153501746},{"_id":"public/tags/welcome/index.html","hash":"a9449e4be5aff724a74e8fb714dce6f04aaca772","modified":1665153501746},{"_id":"public/tags/coding/index.html","hash":"827ea8e60616524951741bd5a95b56430e4d3ace","modified":1665153501746},{"_id":"public/tags/software/index.html","hash":"b2c2a352b388621a230849b19e0fe7373dfb804f","modified":1665153501746},{"_id":"public/tags/支付/index.html","hash":"898a7c4073b8d7e528aa4f9d5fccaa896df42c74","modified":1665153501746},{"_id":"public/tags/essay/index.html","hash":"63cc1b40610fe888bd66e2115e5f50ace1a70c82","modified":1665153501746},{"_id":"public/tags/experience/index.html","hash":"ff893136e42cb4f73fbd85a5bdbc6f2b2cfa5a73","modified":1665153501746},{"_id":"public/tags/想法/index.html","hash":"90daa77d4c4d5d6d2aeb1fb95bc27761d3f6cd50","modified":1665153501746},{"_id":"public/tags/enlighten/index.html","hash":"2f53a1235cb9ecfee1f7ed3d701f0194ab7573da","modified":1665153501746},{"_id":"public/tags/assembly/index.html","hash":"3af878e7a8ffa73e95d0b73308784cf1f2fa5d12","modified":1665153501746},{"_id":"public/tags/encode/index.html","hash":"36222e8ae5c319878f9b7278e9c55765b5a0f300","modified":1665153501746},{"_id":"public/tags/GitBook/index.html","hash":"114e1255610fc594c5568e874827120c308f608a","modified":1665153501746},{"_id":"public/tags/AsciiDoc/index.html","hash":"9d8279e532ae297ffecba0de7103aa4a241ca6c9","modified":1665153501746},{"_id":"public/tags/hexo/index.html","hash":"45bfab798d210449fca66400480ef4b6dc410cdb","modified":1665153501746},{"_id":"public/tags/web/index.html","hash":"821ac7c006f40e3b32eb95dab45e69bb1da0bcfc","modified":1665153501746},{"_id":"public/tags/dns/index.html","hash":"911997193d9a79b87091667da7e43a128074164a","modified":1665153501746},{"_id":"public/tags/dhcp/index.html","hash":"2a65bb3ec94c5456016db7c96ba0c21f10e73f61","modified":1665153501746},{"_id":"public/tags/mini-program/index.html","hash":"120c0b11b0d5f5d8e75b6c51c77ef7a5a88f5f94","modified":1665153501746},{"_id":"public/tags/canvas/index.html","hash":"c705c929e40899fa9d7fc96a8a73df22ebb04c82","modified":1665153501746},{"_id":"public/tags/vue/index.html","hash":"72aef1338ad1008c79a6678c16e7626a27b8168d","modified":1665153501746},{"_id":"public/tags/webpack/index.html","hash":"5627796202ea711ad24683f079d2e868a6a2246c","modified":1665153501746},{"_id":"public/tags/leetcode/index.html","hash":"d58742ab72f966882c067118c488000c6e82b206","modified":1665153501746},{"_id":"public/tags/android/index.html","hash":"92bd3a1fcf07d0d332b9d8d9424aee73c2d51bcc","modified":1665153501746},{"_id":"public/tags/gradle/index.html","hash":"3b71e95d7eb93a861dff1dc9c900c934d7a16d20","modified":1665153501746},{"_id":"public/tags/pit/index.html","hash":"70bdcaf7eaf8e80b7155d7f27de4ebb8fe3a093c","modified":1665153501746},{"_id":"public/tags/flutter/index.html","hash":"f4e4c315ee020af77a1cd7196916c1815ce6a87b","modified":1665153501746},{"_id":"public/tags/flutter/page/2/index.html","hash":"dee317e018f4e66b0e7b231ab97dcb4626b0f056","modified":1665153501746},{"_id":"public/tags/json/index.html","hash":"856dba65607e786da0617a5c0f0b6f2c905927c8","modified":1665153501746},{"_id":"public/tags/heck/index.html","hash":"6cfa07c69b1f275ee97d772b3bcf3faf45ad8139","modified":1665153501746},{"_id":"public/tags/beautiful-soup/index.html","hash":"1464916633bb9a652e42c06acae87aa31bf1bd43","modified":1665153501746},{"_id":"public/tags/reportlab/index.html","hash":"a6c95ec3a05783f7608e4e21aa27e1f544f986fe","modified":1665153501746},{"_id":"public/tags/python/index.html","hash":"b69c0286e7745866ef98db3991178f621b1efe33","modified":1665153501746},{"_id":"public/tags/fastdfs/index.html","hash":"e77968d649259aeb4ec8936ab5778d1932d07fec","modified":1665153501746},{"_id":"public/tags/nginx/index.html","hash":"1004a22f6315b1d69e5d30d67dcb2297b58b04b9","modified":1665153501746},{"_id":"public/tags/java/index.html","hash":"ff3e3b1c990d0cb6ca0042d1ac9c5feb87ad61a7","modified":1665153501746},{"_id":"public/tags/java/page/2/index.html","hash":"16233fa9dc86accd2404c7f913050f7431f0d11f","modified":1665153501746},{"_id":"public/tags/io/index.html","hash":"e34b8d6046d8ee2c210d48c54108a6c35ef3c77f","modified":1665153501746},{"_id":"public/tags/javafx/index.html","hash":"0076495a05fe0c1e408bbbc00f1848f86b5c4f2a","modified":1665153501746},{"_id":"public/tags/jog4j2/index.html","hash":"fa8774e2d36d27f7bc719b46ca6f939ddad7907e","modified":1665153501746},{"_id":"public/tags/maven/index.html","hash":"1f37b39dba4c47fe3083e0de91b2f95f706bd4a5","modified":1665153501746},{"_id":"public/tags/jdbc/index.html","hash":"7d0457c41be269ff6d831887c54bbb95207f5ea9","modified":1665153501746},{"_id":"public/tags/mysql/index.html","hash":"9b1e08d972a68108c83dfb5b4a0cab158a117b3d","modified":1665153501746},{"_id":"public/tags/tomcat/index.html","hash":"d71d5e2bbc5b8e147e508e20abe4ca94449a250a","modified":1665153501746},{"_id":"public/tags/git/index.html","hash":"614e1c7e78f2e383811b821c11fb030b59628382","modified":1665153501746},{"_id":"public/tags/mariadb/index.html","hash":"0d8091954c07c0f4d8e6f0255dc94c75ade60c82","modified":1665153501746},{"_id":"public/tags/跨域/index.html","hash":"34a7eb5c228b4792babacd3218c99d8bb9a1d6c0","modified":1665153501746},{"_id":"public/tags/ngrok/index.html","hash":"7bf402a649ed160910c6cbf47aba779092d48692","modified":1665153501746},{"_id":"public/tags/php/index.html","hash":"642174270954b5df66a43bac7f952f8da3158ed6","modified":1665153501746},{"_id":"public/tags/apache/index.html","hash":"bce039106f83301d77e96d5b15607b0c819d3150","modified":1665153501746},{"_id":"public/tags/thinkPHP/index.html","hash":"e26df75bb26c26090f5284b9e216072e2b0299e1","modified":1665153501746},{"_id":"public/tags/rocketMQ/index.html","hash":"5be962a7e259ba47cc1efb4b307ee1534f9a2ae6","modified":1665153501746},{"_id":"public/tags/use-linux/index.html","hash":"0186f2008a648f67d5f660a950b249c4e321eb2e","modified":1665153501746},{"_id":"public/tags/linux/index.html","hash":"4ea7c44160ec7c65d209b38884c649ab6532857a","modified":1665153501746},{"_id":"public/tags/linux/page/2/index.html","hash":"7e62e75fba4460005168186682cc3f4ecbcaab0e","modified":1665153501746},{"_id":"public/tags/linux/page/3/index.html","hash":"4f306031ae406244014af32413ac6d38dace6652","modified":1665153501746},{"_id":"public/tags/linux/page/4/index.html","hash":"7606b5fd47285b079f67b285ac815b9e385a188c","modified":1665153501746},{"_id":"public/tags/archlinux/index.html","hash":"58380e6a997d91b76836568d9ee9359639e12790","modified":1665153501746},{"_id":"public/tags/centos/index.html","hash":"6d7063c1b98cee385f9b3b28b9fb58001df685f0","modified":1665153501746},{"_id":"public/tags/ssh/index.html","hash":"8975b1c666600690314cadc4583c952dfb2f021c","modified":1665153501746},{"_id":"public/tags/shell/index.html","hash":"5bc3f43154279ff6a6b45106e4362335ae21b468","modified":1665153501746},{"_id":"public/tags/raspberry/index.html","hash":"30276376d17bd0ced8fd7d4f9771b8c1d52c6aa6","modified":1665153501746},{"_id":"public/tags/virual-machine/index.html","hash":"dd0026084fad63c8b24800cc092077a87e85658c","modified":1665153501746},{"_id":"public/tags/windows/index.html","hash":"104b48aff5ac4e5e11ea64b554ae3a6c61045882","modified":1665153501746},{"_id":"public/tags/cocos/index.html","hash":"2fce90503b8fc91c475ec1137f30f27fe337cf59","modified":1665153501746},{"_id":"public/tags/shopping-mall/index.html","hash":"fb3ff627ee71b722b80110e1d1cf72b3b182851c","modified":1665153501746},{"_id":"public/tags/shopping-mall/page/2/index.html","hash":"b9e29b33aaf798e299cdcdcac8f370d3261e8428","modified":1665153501746},{"_id":"public/tags/js/index.html","hash":"ac1840218290dc230949286f5b9f4198abfb5137","modified":1665153501746},{"_id":"public/tags/taps/index.html","hash":"a2097178e922d052ea3f3bbfedf7f4d7ef3f5b65","modified":1665153501746},{"_id":"public/tags/c/index.html","hash":"47675fa0d944b960329d8e71bf572e1721e01c67","modified":1665153501746},{"_id":"public/tags/note/index.html","hash":"11f857cc58132375f51929ec7b1f3296846b72cf","modified":1665153501746},{"_id":"public/tags/note/page/2/index.html","hash":"52ca281eabca4e0d52c278a2dc98aca9cddf8264","modified":1665153501746},{"_id":"public/tags/note/page/3/index.html","hash":"b8e16e6b9e3ad161c5c242353494aaab1b06107f","modified":1665153501746},{"_id":"public/tags/note/page/4/index.html","hash":"903fd060602b616760c351f37c5090930c987ce3","modified":1665153501746},{"_id":"public/tags/makefile/index.html","hash":"dfcbc3cbaca3abdef003d687d0e9c9b2520d3dd7","modified":1665153501746},{"_id":"public/tags/write-makefile-with-me/index.html","hash":"385f757d2753ff60bb08253ecfbdb2e997209202","modified":1665153501746},{"_id":"public/tags/最好的c-教程/index.html","hash":"d84f7f9854438741c9c9514a370499efc9a39680","modified":1665153501746},{"_id":"public/tags/The-Linux-Command-Line/index.html","hash":"1f9a94c5e037e3d6f90580f67fee4ce4b422dee3","modified":1665153501746},{"_id":"public/tags/The-Linux-Command-Line/page/2/index.html","hash":"cc4f0825a28f71f7f5d968fb45a7632da375d999","modified":1665153501746},{"_id":"public/tags/The-Linux-Command-Line/page/3/index.html","hash":"ea6e929001c5f870aa079435869161085c01ea38","modified":1665153501746},{"_id":"public/tags/读书笔记/index.html","hash":"62d4cdae5412f8ea20b441d9a00e7023e5696d89","modified":1665153501746},{"_id":"public/tags/C/index.html","hash":"40333df14e15887a9f6bb2ef3297b7b771e77d84","modified":1665153501746},{"_id":"public/tags/架构/index.html","hash":"16c73bce21f61b34db177cfda52098de8074c0ec","modified":1665153501746},{"_id":"public/tags/性能/index.html","hash":"8d6008b0acb8da569c6b2b71e48c2c0c85ad10ad","modified":1665153501746},{"_id":"public/tags/缓存/index.html","hash":"faff0322da2d0597e07f8947e007c226922f0f55","modified":1665153501746},{"_id":"public/tags/mybatis/index.html","hash":"fb9a94580ce35fee2c6350a48c3fc92cda2e2dd4","modified":1665153501746},{"_id":"public/tags/open-source/index.html","hash":"db2de91861f6b79a302e13e41cf8bd2a6367d215","modified":1665153501746},{"_id":"public/tags/mybatis-enhance/index.html","hash":"3672fd45e452123b14d0c65a117bb0b739aa3e53","modified":1665153501746},{"_id":"public/tags/servlet/index.html","hash":"fc70e5e11e6ce10dbd3efc34b396ca18a5a35ab3","modified":1665153501746},{"_id":"public/tags/spring/index.html","hash":"0136ebf4053ae6b15c574010826dc037cf7679dd","modified":1665153501746},{"_id":"public/tags/llvm/index.html","hash":"8af5565305cd09921dc4071ffaa443f60fbdfc65","modified":1665153501746},{"_id":"public/tags/gcc/index.html","hash":"a239f1427d056430299e96f3300dce2342857e24","modified":1665153501746},{"_id":"public/tags/ycm/index.html","hash":"9225c0f3dfa23a17ec9d694d1e5f4469037c6477","modified":1665153501746},{"_id":"public/tags/jpa/index.html","hash":"3a889a88de4b0f5a8f2f94b3036a5266d7952672","modified":1665153501746},{"_id":"public/categories/index.html","hash":"9b6c79a52a150167f31439d13e763ae808778959","modified":1665153501746},{"_id":"public/mobile_skill_experience/flutter/flutter-button.html","hash":"428349f80c39d79736c9e7e07a782ecb9dcb0bf9","modified":1665153501746},{"_id":"public/config_skill_experience/develop__tool_config/mariadb/mariadb-linux-qa.html","hash":"590c8b84f6c4e5da05c3b2e6e2b8fbb8a954348e","modified":1665153501746},{"_id":"public/config_skill_experience/system_config/linux/setup-my-environment.html","hash":"57751e5493a82fedc5a9fc0e0822595f41b347a2","modified":1665153501746},{"_id":"public/note/read_note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-18Day.html","hash":"ddf2a36abcd6bee01f7d0aa2fcd9d20477ba690b","modified":1665153501746},{"_id":"public/note/read_note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-17Day.html","hash":"6621b179c0a02d4b65fb9694166f756ce5c9e837","modified":1665153501746},{"_id":"public/script_skill_experience/python/use-python-to-get-webpage-to-pdf.html","hash":"c23ae7532381d806af632649aaeb1c97d1b0cfd3","modified":1665153501746},{"_id":"public/config_skill_experience/develop_envior_config/nginx/nginx-cross-pass.html","hash":"998d98abca9746af91d8ca7609af96e533abc85b","modified":1665153501746},{"_id":"public/other_skill_experience/pay-flow.html","hash":"c3220de74ca788200a4eb23500f95d07b3ee279d","modified":1665153501746},{"_id":"public/mobile_skill_experience/android/gradle-plugin-version.html","hash":"68c21e372d37a25ef9898c7ef6519fc08e30e64a","modified":1665153501746},{"_id":"public/mobile_skill_experience/flutter/flutter-android-package.html","hash":"27a76488618c2f53a394a427fb2cfd2e6d2f9a41","modified":1665153501746},{"_id":"public/mobile_skill_experience/flutter/flutter-ios-package.html","hash":"5d2e8c7c8313bb846993bbc55fe01e0bdf1c7c6c","modified":1665153501746},{"_id":"public/mobile_skill_experience/flutter/about-listview.html","hash":"5b7235bb79920d8546c383d3d92d69f46e080ec6","modified":1665153501746},{"_id":"public/back_skill_experience/java/maven/servlet/servlet-inline-tomcat.html","hash":"d270987035729c5c3d06753f9b42646dda2e9f76","modified":1665153501746},{"_id":"public/mobile_skill_experience/flutter/flutter-json.html","hash":"e3359037d9cfffdd922340171f97ffd1aff0caa7","modified":1665153501746},{"_id":"public/back_skill_experience/java/log4j/log4j-config.html","hash":"e75cef4eba60c585cc20ddd8166ab68e4d07aefc","modified":1665153501746},{"_id":"public/note/read_note/web-site-framework/profermence-test-way-method.html","hash":"0994522642d03ad8f71a04c572e87f6d46f70320","modified":1665153501746},{"_id":"public/note/read_note/web-site-framework/use-cache.html","hash":"40026024c0e9a79e39e71405186c77c55fac479f","modified":1665153501746},{"_id":"public/note/read_note/web-site-framework/profermence-test-example.html","hash":"bc6520a324c84ed722749b3a98606faad43a960f","modified":1665153501746},{"_id":"public/note/read_note/web-site-framework/auto-deploy-hot-update.html","hash":"ad162287160c6709d5be8349bb85f00607e297aa","modified":1665153501746},{"_id":"public/front_skill_experience/cocos/cocoscreator/cocoscreator-intructration.html","hash":"4b07ef9965b0cc0502ee570b1cdb8697cfc07a74","modified":1665153501746},{"_id":"public/my_project/shopping_mall/crud/Shopping-mall-developNote-register.html","hash":"56efc4cdcf228c81266614fafeb499bff2a2b66a","modified":1665153501746},{"_id":"public/my_project/shopping_mall/Dependence_and_configuration/Shopping-mall-developNote-parent-depend-addSwagger.html","hash":"3fa49c89da535ec4340dcfe6dc8ae0f8ec6a7126","modified":1665153501746},{"_id":"public/note/blog_note/the_best_c_plus_plus_course/how-the-cpp-compiler-works.html","hash":"4496e14f8fcb1478033cfb469e019fbdf770fd51","modified":1665153501746},{"_id":"public/config_skill_experience/develop__tool_config/mysql/mysql-master-slave-error.html","hash":"53823efca25f9ca0769e57c15c0fe974b93760cb","modified":1665153501746},{"_id":"public/config_skill_experience/system_config/linux/create-linux-service.html","hash":"747b0da1b2b941cba2d4590c69e59e82ade108d1","modified":1665153501746},{"_id":"public/config_skill_experience/system_config/linux/deploy-seafile.html","hash":"6b6944a8d280ac144797fc3289bc5dedba17df78","modified":1665153501746},{"_id":"public/config_skill_experience/develop_envior_config/ngrok/enable-own-server.html","hash":"1fefe4c22a8a03ed5de9de46477d730e20d601b6","modified":1665153501746},{"_id":"public/front_skill_experience/base/dns-dhcp.html","hash":"5b275b7a5c460e0be4e204c0de9077806d53e74d","modified":1665153501746},{"_id":"public/back_skill_experience/java/maven/maven-test-java-project.html","hash":"ddc148fb3ad32d0cdfa8193cc4adb76d11c765db","modified":1665153501746},{"_id":"public/config_skill_experience/develop__tool_config/git/git-server.html","hash":"1a34e22b729dda2f3d5a30d28bfd9ddd0c787354","modified":1665153501746},{"_id":"public/config_skill_experience/system_config/linux/create-ap.html","hash":"169b7c14d7bb8cb5723d9abb79d07c80b64c35e4","modified":1665153501746},{"_id":"public/config_skill_experience/system_config/linux/open-ftp.html","hash":"90a1989fcd68b499ceb3be05e47cb267153c9589","modified":1665153501746},{"_id":"public/front_skill_experience/miniProgram/some-skills.html","hash":"2d9125d2ea778ae13ac30d7e71578e0e6c3cf112","modified":1665153501746},{"_id":"public/back_skill_experience/java/fastdfs/fastdfs-java.html","hash":"e4a5281d9c7b5e5c3756b9c55739d7c906995384","modified":1665153501746},{"_id":"public/back_skill_experience/java/sha256-java-js.html","hash":"40329fa06b540a9a993d76d0850d7e31aeea2759","modified":1665153501746},{"_id":"public/config_skill_experience/develop__tool_config/mysql/mysql-master-slave.html","hash":"0de2870ed03ab6894acb7a18135097f55dac4634","modified":1665153501746},{"_id":"public/config_skill_experience/develop__tool_config/mysql/mysql-charset.html","hash":"e04f9e46ede2ce7533b7795064cdbe24668cc7ac","modified":1665153501746},{"_id":"public/back_skill_experience/java/fastdfs/nginx-fastdfs-config.html","hash":"282342517df40825690a28e1296e6774bd66bd84","modified":1665153501746},{"_id":"public/note/blog_note/edit-makefile/edit-makefile-seven.html","hash":"26ab3e3d9bacc0f8b61c374a8327a6875ca5bf06","modified":1665153501746},{"_id":"public/front_skill_experience/vue/vue-hello-world.html","hash":"439f9bc678a1730dc31020889c8f890335117d64","modified":1665153501746},{"_id":"public/config_skill_experience/system_config/linux/linux_ssh.html","hash":"8914346fda6777f304c63b32b6bc5221368b1d0c","modified":1665153501746},{"_id":"public/note/blog_note/edit-makefile/edit-makefile-six.html","hash":"e224b321f1a45edf770f9d744d431e4ce4c1ef31","modified":1665153501746},{"_id":"public/front_skill_experience/miniProgram/draw.html","hash":"94723f9871dd215962eeeadbff6412bfabbf824f","modified":1665153501746},{"_id":"public/note/blog_note/edit-makefile/edit-makefile-five.html","hash":"0442bab805fbfd76ef23609992256e6d1c6bd783","modified":1665153501746},{"_id":"public/note/blog_note/edit-makefile/edit-makefile-four.html","hash":"83a0de54a38c4ed55ff74c1d8893e41ea6651fa4","modified":1665153501746},{"_id":"public/note/blog_note/edit-makefile/edit-makefile-three.html","hash":"94f688380fa69833094ac5885cd2da119c694dfa","modified":1665153501746},{"_id":"public/note/blog_note/edit-makefile/edit-makefile-two.html","hash":"aa2f56343dee5c2786c89c56c998a04bd7514a48","modified":1665153501746},{"_id":"public/note/blog_note/edit-makefile/edit-makefile-one.html","hash":"f34da312c6383dcc0926526ef6dcb87fd4a955a9","modified":1665153501746},{"_id":"public/config_skill_experience/system_config/linux/hexo-create-blog.html","hash":"251886c9e630f4066888ca5710e6e90315fb4a06","modified":1665153501746},{"_id":"public/blog_skill_experience/hexo/modify-new-post.html","hash":"b7dfbf645100f8aae67af6579e8f232894251ee7","modified":1665153501746},{"_id":"public/note/blog_note/edit-makefile/edit-makefile.html","hash":"1b3f319b269d55f543f65844756e5c4ea0668ac1","modified":1665153501746},{"_id":"public/back_skill_experience/java/spring/spring-family-meals/springboot-jpa-intruduction.html","hash":"0ade91ef84145c0da13b977b5f1f882f0d43b4c5","modified":1665153501746},{"_id":"public/back_skill_experience/java/spring/spring-family-meals/springboot-custom-datasource-exception.html","hash":"0dd9bfb2b0d8274079793a30b0ccf482cdc250ea","modified":1665153501746},{"_id":"public/back_skill_experience/java/spring/spring-family-meals/springboot-service-translation.html","hash":"2a9353b078bcb94bf66eabfa60803edbb472cd24","modified":1665153501746},{"_id":"public/back_skill_experience/java/spring/spring-family-meals/springboot-jdbcTemplate.html","hash":"e31032a65aedfe0d8e86bd5c2edef7cbd18bd07f","modified":1665153501746},{"_id":"public/back_skill_experience/java/spring/spring-family-meals/springboot-datasource-introduction.html","hash":"343cd302202ee5fe5c3d196a5bb258319148997c","modified":1665153501746},{"_id":"public/back_skill_experience/java/spring/spring-family-meals/springboot-datasource-multi.html","hash":"f9f8b425d1147c6f7132c93505d37612dce2255c","modified":1665153501746},{"_id":"public/leetcode/java/reverse-integer-question.html","hash":"8705e867c3df9929c351f413134a377aa8fe9a18","modified":1665153501746},{"_id":"public/back_skill_experience/java/tomcat/java-tomcat-http-400.html","hash":"ee43b192ed5bcd1d1798d53bd300959c58643e2e","modified":1665153501746},{"_id":"public/back_skill_experience/java/javafx/javafx-springboot-maven.html","hash":"e8844c29ea301cd9c51dc7f3d903cb374c91b910","modified":1665153501746},{"_id":"public/config_skill_experience/system_config/linux/vim/llvm.html","hash":"4a11a5826a6977d2d9287cd714a07984d1f2a35e","modified":1665153501746},{"_id":"public/config_skill_experience/system_config/linux/linux_daemo.html","hash":"e2cff441e48b333dee8a52d9a04b6cd946dc9b31","modified":1665153501746},{"_id":"public/config_skill_experience/develop_envior_config/ngrok/own-ngrok-server.html","hash":"12a61dd4de4e1436b82465c87e19d02c1a2ae7ad","modified":1665153501746},{"_id":"public/back_skill_experience/java/javaBased/java-file-learn.html","hash":"7aec72993a0b207f30496c6dbfde21663c57a209","modified":1665153501746},{"_id":"public/front_skill_experience/miniProgram/config-descrition.html","hash":"9c081f72e2426b556de1b619002ccfa0efb5da34","modified":1665153501746},{"_id":"public/config_skill_experience/middleware/rocketMQ/first-step.html","hash":"7e0f77be6c4dcf2ebcd8388499f2b93b1216e56b","modified":1665153501746},{"_id":"public/back_skill_experience/java/spring/spring-family-meals/springboot-datasource-single.html","hash":"2640484d879e157e2793f961392826934e97ff9c","modified":1665153501746},{"_id":"public/back_skill_experience/java/spring/spring-family-meals/springboot-first-step.html","hash":"99e3f3f40d1d2d774e3181c2d55d9e800cf6ee38","modified":1665153501746},{"_id":"public/note/read_note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-16Day.html","hash":"5d23ba75047793b9f885505aa4d2bd6932de5e01","modified":1665153501746},{"_id":"public/leetcode/java/two-sum.html","hash":"3c1b6671b832c437f20f2a66b5505acc91b978c1","modified":1665153501746},{"_id":"public/blog_skill_experience/gitbook/gitbook-first-step.html","hash":"43a7cc369542960712a8fc2ec3bbc5ac75aa1f27","modified":1665153501746},{"_id":"public/front_skill_experience/webpack/webpack-loaders-babel-config.html","hash":"1bf9958fbe0476d7d0e2f2155a2cb98d61c6dc40","modified":1665153501746},{"_id":"public/front_skill_experience/webpack/webpack-dev-server.html","hash":"983728c7c4381d93bb8780c63d62dfa85c8cf367","modified":1665153501746},{"_id":"public/front_skill_experience/webpack/webpack-source-map.html","hash":"6c7f09f7c06d0ce7e61188a7258b7cee1d8d7f87","modified":1665153501746},{"_id":"public/front_skill_experience/webpack/webpack-first-step-config.html","hash":"28dc5d3bcde1cdcb485491e2eb054426af9e3bd5","modified":1665153501746},{"_id":"public/blog_skill_experience/hexo/hexo-git-sync-linux.html","hash":"5b29c503f61a16672128362b61f8352b2d7bed18","modified":1665153501746},{"_id":"public/note/read_note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-15Day.html","hash":"81412136cf49565dfd296adacb3f11bdc1b2066b","modified":1665153501746},{"_id":"public/note/read_note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-14Day.html","hash":"32cce6020945269132570b38899de731b67a52d5","modified":1665153501746},{"_id":"public/note/read_note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-13Day.html","hash":"15e0cdad517e5e5f78d595b9e06f7eb58045e8d0","modified":1665153501746},{"_id":"public/note/read_note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-12Day.html","hash":"63d1a1134abc28880fdff651519d2e89aea1ca8b","modified":1665153501746},{"_id":"public/note/read_note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-11Day.html","hash":"1ef8bed065f5e1fe890abab3ac8300a6aa8d299c","modified":1665153501746},{"_id":"public/note/read_note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-10Day.html","hash":"f983bdf4699bd8beb7f1dce126dd1b5db01d7ec0","modified":1665153501746},{"_id":"public/note/read_note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-9Day.html","hash":"cbb641823d8333f535e9c378f1bff044dcdcc8cc","modified":1665153501746},{"_id":"public/note/read_note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-8Day.html","hash":"4e4213c391ae3fe77c2eef9abe102f60b0f4ad11","modified":1665153501746},{"_id":"public/note/read_note/the_c_programming_language/the-c-programming-language-second-day.html","hash":"df0bbe0c453c4111e539ab17d69a44fb53717196","modified":1665153501746},{"_id":"public/note/read_note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-7Day.html","hash":"34ae5385899252950e938cf14e02aed82fb3d54b","modified":1665153501746},{"_id":"public/note/read_note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-6Day.html","hash":"aec399a19572c125999daa6f2ae417a74f63ec77","modified":1665153501746},{"_id":"public/my_project/shopping_mall/Dependence_and_configuration/Shopping-mall-developNote-actable-new-config.html","hash":"32db0ae9ae2cf4de5956ad3ac64f29aa7760e473","modified":1665153501746},{"_id":"public/note/read_note/the_c_programming_language/the-c-programming-language-first-day.html","hash":"196db010e1918f9a06b440c1ff0907d81e3fb1ea","modified":1665153501746},{"_id":"public/config_skill_experience/system_config/windows/own-path-variable.html","hash":"b57d1a3c7385e54b6a0cf4167b37a47e2079070d","modified":1665153501746},{"_id":"public/note/source_note/mybatis-enhance/read-mybatis-enhance-ClassTools.html","hash":"a8c80e3f891b1c5b54146eeb4d18f0e6eb950569","modified":1665153501746},{"_id":"public/note/source_note/mybatis-enhance/read-mybatis-enhance.html","hash":"42894bc33c8bef4d684cbb6e622b4c9e92414388","modified":1665153501746},{"_id":"public/config_skill_experience/develop__tool_config/mysql/mysql-setup.html","hash":"15637c999468ccc09d3ec7f448e870597326f931","modified":1665153501746},{"_id":"public/blog_skill_experience/hexo/hexo-git-sync-windows.html","hash":"3e385ff0d6efe7324498ce0719397e1e97c92e65","modified":1665153501746},{"_id":"public/collect/coding-software.html","hash":"ac2a324656f17f5f9cc888c4ebf66c9cc4808697","modified":1665153501746},{"_id":"public/config_skill_experience/develop_envior_config/php/php-apache-config.html","hash":"b7d1264b43c2719458e45554d80ee4439eeb2bde","modified":1665153501746},{"_id":"public/note/read_note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-5Day.html","hash":"0b4712a8de6715a3fa9afb4caf8e08787b6ed280","modified":1665153501746},{"_id":"public/front_skill_experience/webpack/webpack-first-step.html","hash":"0cb18f408889885cd5051b230ead95ee4fcc467c","modified":1665153501746},{"_id":"public/my_project/shopping_mall/js/shopping-mall-developNote-js.html","hash":"f18f9a64fd70af2559f70c6cd299cc45868cad5c","modified":1665153501746},{"_id":"public/my_project/shopping_mall/Dependence_and_configuration/Shopping-mall-developNote-linux-environment.html","hash":"e0845b5794925664c5d862eb00e5a92bf7ac9778","modified":1665153501746},{"_id":"public/my_project/shopping_mall/Dependence_and_configuration/Shopping-mall-developNote-vue-envionmentAndConfig.html","hash":"0fb86bab56d5c338e3a4b3fadc63f0259247ab12","modified":1665153501746},{"_id":"public/config_skill_experience/system_config/linux/linux-java-git-maven-zookeeper.html","hash":"a3378b3aaf09381555a8b3533f970abfd995e857","modified":1665153501746},{"_id":"public/config_skill_experience/system_config/linux/linux-path-variable.html","hash":"399f3c26850f5b80ca900cc453a48d276c94d562","modified":1665153501746},{"_id":"public/my_project/shopping_mall/taps/shopping-mall-developNote-mybatis-automatic-generation.html","hash":"7dc8c617579174e0c1ddc08424ebe04f6369ac41","modified":1665153501746},{"_id":"public/note/read_note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-4Day.html","hash":"82ad3f167238f0415339ff991253312fe0229236","modified":1665153501746},{"_id":"public/note/read_note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-3Day.html","hash":"5b5e0087a897aa74dac3b0e5ef08c7e270331a8a","modified":1665153501746},{"_id":"public/config_skill_experience/system_config/windows/deploy-system.html","hash":"1b6f4e78054ee0772658c96714e6743a99713271","modified":1665153501746},{"_id":"public/my_project/shopping_mall/Dependence_and_configuration/Shopping-mall-developNote-web-config.html","hash":"51c2aa5f774e4efe04e9f52268e8f9bb567a7e13","modified":1665153501746},{"_id":"public/my_project/shopping_mall/Dependence_and_configuration/Shopping-mall-developNote-service-config.html","hash":"509fc53cd77e29c74c678ac2f851553e118c7a22","modified":1665153501746},{"_id":"public/my_project/shopping_mall/Dependence_and_configuration/Shopping-mall-developNote-web-depend.html","hash":"6b394aaa68805b8787f1acd286d3c18839ce16a8","modified":1665153501746},{"_id":"public/my_project/shopping_mall/Dependence_and_configuration/Shopping-mall-developNote-pojo-dao-interface-service-depend.html","hash":"a1826acfabaf8a714894f1f5c5e00b63323cbc4b","modified":1665153501746},{"_id":"public/note/read_note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-2Day.html","hash":"9c95312bd1f8d733967fa47fc62d679097f85845","modified":1665153501746},{"_id":"public/my_project/shopping_mall/Dependence_and_configuration/Shopping-mall-developNote-common-manager-depend.html","hash":"dfafebef1342e6cede6203360133ab12c490203e","modified":1665153501746},{"_id":"public/my_project/shopping_mall/Dependence_and_configuration/Shopping-mall-developNote-parent-depend.html","hash":"f1dea3598586239801f3093c6a8486f4469536e3","modified":1665153501746},{"_id":"public/note/read_note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-1Day.html","hash":"a282211b70f6172cb0e4b92c62643884442ebead","modified":1665153501746},{"_id":"public/my_project/shopping_mall/Dependence_and_configuration/Shopping-mall-developNote-setUp-project.html","hash":"af14aea5bffd9f0a88c23d0fe58d74c0b99f9384","modified":1665153501746},{"_id":"public/blog_skill_experience/hexo/hexo-writing.html","hash":"1cecc82e49e544ea3075b57109bd5cfbc791c7f6","modified":1665153501746},{"_id":"public/my_project/shopping_mall/Dependence_and_configuration/Shopping-mall-developNote-framework.html","hash":"3f5f9e1a352c0c0c1127cd5eafdd6595aa5559d4","modified":1665153501746},{"_id":"public/blog_skill_experience/hexo/make-a-hexo-blog.html","hash":"46fc2cf8d7793b9acdaab30da9e6c875d294f1c9","modified":1665153501746},{"_id":"public/books/index.html","hash":"e64f5ef331f8686f26d2bf20635ee3c25af14ed2","modified":1665153501746},{"_id":"public/page/2/index.html","hash":"05ab6a530caba50dae0633b7eade608742dea262","modified":1665153501746},{"_id":"public/page/3/index.html","hash":"0fbfd8847e3a07f3edebb062e7445830d631c078","modified":1665153501746},{"_id":"public/page/4/index.html","hash":"0ee67ba12d9454f802a00975af958220357546ba","modified":1665153501746},{"_id":"public/page/5/index.html","hash":"a36ba9fffd7b7eebf05aa5fc0e0dca7e1381d390","modified":1665153501746},{"_id":"public/page/6/index.html","hash":"4fbff613a36aa4d6184f1b80740d1dcd841c7eab","modified":1665153501746},{"_id":"public/page/7/index.html","hash":"6257fd228dfde53d33b767c96bba6d1057a8e263","modified":1665153501746},{"_id":"public/page/8/index.html","hash":"dfb9f4824076c07cb4224b55a76940bff245cd53","modified":1665153501746},{"_id":"public/page/9/index.html","hash":"d668fd154bc351333212cb8bfda9d3752a03a353","modified":1665153501746},{"_id":"public/page/10/index.html","hash":"b17418fdba2403db59455e4044ca01046b2d5a26","modified":1665153501746},{"_id":"public/page/11/index.html","hash":"563a6692199c520b3e5470d5d57939126128ef08","modified":1665153501746},{"_id":"public/page/12/index.html","hash":"685863a318fe07bdaf9ae5b8cb851ebf229bea06","modified":1665153501746},{"_id":"public/page/13/index.html","hash":"4d21cf2c6b3924486e12faff6a5e29d633189396","modified":1665153501746},{"_id":"public/page/14/index.html","hash":"b1e49c6b2e5a17054f224bec8df63424048d43e9","modified":1665153501746},{"_id":"public/page/15/index.html","hash":"4b88ff8f30799aff5b85ab333b20d64bf5ba1985","modified":1665153501746},{"_id":"public/page/16/index.html","hash":"3c9223cc128792ac1460d9d073c0a375c6582de6","modified":1665153501746},{"_id":"public/page/17/index.html","hash":"1cc6f7354010a445b6e843a2ea042e358a6ede69","modified":1665153501746},{"_id":"public/page/18/index.html","hash":"c33c8836013154aefd752daef069b3cfa7733141","modified":1665153501746},{"_id":"public/page/19/index.html","hash":"0c9937c6be904bf5dfd3624f4b1bf4b9038c87aa","modified":1665153501746},{"_id":"public/page/20/index.html","hash":"a28141e83b62c610a4def2b06cb56558d24abf86","modified":1665153501746},{"_id":"public/page/21/index.html","hash":"627d172572c66f83277cdfe99deae1d215062efd","modified":1665153501746},{"_id":"public/page/22/index.html","hash":"8ac5496bdfc36c5b68423a4b528d155be3f9cc7f","modified":1665153501746},{"_id":"public/page/23/index.html","hash":"05ac09170088d14fe368a3af69573d233a3a9aae","modified":1665153501746},{"_id":"public/page/24/index.html","hash":"a94e9a21bfe9e8170d81745535e052c61fda6176","modified":1665153501746},{"_id":"public/page/25/index.html","hash":"2c88c7380a5f15df12800272f5fe4c2bf66ded03","modified":1665153501746},{"_id":"public/page/26/index.html","hash":"ae14afb5652ef4d3fd7cc9f7e6d3f781cb503203","modified":1665153501746},{"_id":"public/page/27/index.html","hash":"b0e4eaef4e4276457a15eb7fc6ec46869d473769","modified":1665153501746},{"_id":"public/page/28/index.html","hash":"774d3848b48213a3720bbed8233303653b0b41d0","modified":1665153501746},{"_id":"public/page/29/index.html","hash":"04cf1655200bfefdc39cc5c0445d7e43cc1c4d5f","modified":1665153501746},{"_id":"public/page/30/index.html","hash":"8b6055aaf1fe220be4ded9002a3c7cccc0e236ae","modified":1665153501746},{"_id":"public/page/31/index.html","hash":"1e25a56d6037357dd310bac86e83080c3eeaf5c8","modified":1665153501746},{"_id":"public/page/32/index.html","hash":"827a2113368a377a89210372b48364d5c14ab816","modified":1665153501746},{"_id":"public/page/33/index.html","hash":"d5b17d490c336d0893eea181b68d0bcde2c509b3","modified":1665153501746},{"_id":"public/page/34/index.html","hash":"148f2097d6e463e997b3fa471cb97d3a5ed6a203","modified":1665153501746},{"_id":"public/page/35/index.html","hash":"8f4dcd8c577450604286ee7c3a9417c03002baed","modified":1665153501746},{"_id":"public/page/36/index.html","hash":"884a6ee2671f38f274fc94a5e6f6d49ae2a32240","modified":1665153501746},{"_id":"public/page/37/index.html","hash":"d038b0527cfb9cbf3120522420b2eb360eff8b6e","modified":1665153501746},{"_id":"public/page/38/index.html","hash":"9b93e5a6e7c1b14b393ff99aa6d78bc8d9b1d38f","modified":1665153501746},{"_id":"public/page/39/index.html","hash":"57bc53921fc9db9e3b3f0792cd6d90b056fbdbf0","modified":1665153501746},{"_id":"public/page/40/index.html","hash":"9519539f386331d802c741c9efcae22a202a6ce5","modified":1665153501746},{"_id":"public/page/41/index.html","hash":"2a49e278fa47057a21a99d89140e631e6749e23e","modified":1665153501746},{"_id":"public/page/42/index.html","hash":"23b0360ca92720af6e2f1beded55e738c7d6744a","modified":1665153501746},{"_id":"public/page/43/index.html","hash":"f51a3d50bfd35ad25f32c40e8493d082640988ad","modified":1665153501746},{"_id":"public/page/44/index.html","hash":"0d89e6f0ec89f122d322effc05c504fbcaf1f974","modified":1665153501746},{"_id":"public/page/45/index.html","hash":"b603379513c193a387316236a176049672bdd675","modified":1665153501746},{"_id":"public/page/46/index.html","hash":"411c464ff803bd8d917101ff4a7785507cacd765","modified":1665153501746},{"_id":"public/page/47/index.html","hash":"659478ef0be785a03b51b607b7879db3a5d736a0","modified":1665153501746},{"_id":"public/page/48/index.html","hash":"cbdb40ef33f99a4517abe9746dad5efb60c2546f","modified":1665153501746},{"_id":"public/page/49/index.html","hash":"ad7eb3c5f07a6366183f3ab304afd1c6fe034a59","modified":1665153501746},{"_id":"public/page/50/index.html","hash":"409121d00d5c52102bae87199aa1b504739e3e3d","modified":1665153501746},{"_id":"public/page/51/index.html","hash":"4d2a7623757d541ab8d912e47d1288d90f213d89","modified":1665153501746},{"_id":"public/page/52/index.html","hash":"8c58e0f2d2685fa79df08287e6e8c4439102c15e","modified":1665153501746},{"_id":"public/page/53/index.html","hash":"938633464b0fc8bb5cf633cbc908c430902ee047","modified":1665153501746},{"_id":"public/page/54/index.html","hash":"16450cacb8f48ce6a9091f11523a0962e54404f2","modified":1665153501746},{"_id":"public/page/55/index.html","hash":"be5fe337b465e8bb5d11f654fce730019574cf56","modified":1665153501746},{"_id":"public/page/56/index.html","hash":"5cb1303c2677b7b9097c878871112e5305e51d5f","modified":1665153501746},{"_id":"public/page/57/index.html","hash":"43c9a2ef7011524b54e7456c5e9d9412694d2d59","modified":1665153501746},{"_id":"public/page/58/index.html","hash":"18282348d980dabe60d0585045614cdee94bdc92","modified":1665153501746},{"_id":"public/page/59/index.html","hash":"ba6fca3607f87ac1866efebd9bc2eef543b9f078","modified":1665153501746},{"_id":"public/page/60/index.html","hash":"54c80df7c590d885efd1e4006a6461dc13306860","modified":1665153501746},{"_id":"public/page/61/index.html","hash":"2dab6ed8b08719484fe51943ec65bb665cd2875e","modified":1665153501746},{"_id":"public/page/62/index.html","hash":"64a21572e49650edaf3af8741c6ff24b52f379dc","modified":1665153501746},{"_id":"public/page/63/index.html","hash":"e280eb40d69c8622848eb4455a68f806370bab24","modified":1665153501746},{"_id":"public/page/64/index.html","hash":"9fd719418a5bfa9cb6e62905cc687f26ea51c3a4","modified":1665153501746},{"_id":"public/page/65/index.html","hash":"0bd0126af23aa1d1160db19c286c703b0fef4b03","modified":1665153501746},{"_id":"public/page/66/index.html","hash":"1355f221d2acd0707f6e305490025a02c326ec36","modified":1665153501746},{"_id":"public/page/67/index.html","hash":"730e69bb243ab574062a4696f4e62f7ee04f6e59","modified":1665153501746},{"_id":"public/page/68/index.html","hash":"09d3fa79f5fb83e43fa9def98e4fc89d73757424","modified":1665153501746},{"_id":"public/page/69/index.html","hash":"ec56a857fd75ad81b793c667312876fc68f89da8","modified":1665153501746},{"_id":"public/page/70/index.html","hash":"45d30811446052d956213d4382910cc0cee0948e","modified":1665153501746},{"_id":"public/page/71/index.html","hash":"34a47fdc38a070c5702019149e057ab1d13921cf","modified":1665153501746},{"_id":"public/page/72/index.html","hash":"d4be60bc71603b5b5b3dfbde1e4ba2a6d74e64bc","modified":1665153501746},{"_id":"public/page/73/index.html","hash":"ae850765f6d4f235fe47a80990ae2ff2f217fe49","modified":1665153501746},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1665153501746},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1665153501746},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1665153501746},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1665153501746},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1665153501746},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1665153501746},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1665153501746},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1665153501746},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1665153501746},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1665153501746},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1665153501746},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1665153501746},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1665153501746},{"_id":"public/lib/pace/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1665153501746},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1665153501746},{"_id":"public/images/Spring+ajax-request-block.png","hash":"d0d419ef98ccf62154ebd717a4a7532022c8aa5c","modified":1665153501746},{"_id":"public/images/heck/2.png","hash":"99e5f9ac13d4337751f479aa3a0600ea31b2f5f2","modified":1665153501746},{"_id":"public/images/heck/1.png","hash":"3d76810278db6f4123278d4e0d4ba8ca2febd6d4","modified":1665153501746},{"_id":"public/images/heck/3.png","hash":"16d68ec25126fe7ee5559f0a74447040c59fbc2e","modified":1665153501746},{"_id":"public/images/heck/5.png","hash":"1ada3a36e0a825279244dbe3be22a60bc20233a1","modified":1665153501746},{"_id":"public/images/heck/8.png","hash":"ae4ea25ec46a73260a476be01c2439fda5a52c78","modified":1665153501746},{"_id":"public/images/heck/9.png","hash":"5149dc5b5ee5c17a34d036e29756573fda99994c","modified":1665153501746},{"_id":"public/images/personal/alipay.png","hash":"7a5c4271f40d16e21fe234c3f5c6f2c3c767546d","modified":1665153501746},{"_id":"public/images/personal/icon.png","hash":"13c7600544488d9d793b34ebc4694807d3337d47","modified":1665153501746},{"_id":"public/images/personal/weixinpay.png","hash":"4bda5e27cde6d9310664461534c5edb153161b26","modified":1665153501746},{"_id":"public/images/c-programming-language/firstDay/vs2.jpg","hash":"7af939dfccd41b0d2887a2fbbacf69b2481b59e5","modified":1665153501746},{"_id":"public/images/js/miniProgram/ellipsis.png","hash":"0545c3f31a0e1ee273966c563d1921329856ed62","modified":1665153501746},{"_id":"public/images/js/miniProgram/miniProgram-1.jpg","hash":"a52c854c0ef0c4a283090a383fb6a5b178bf05c9","modified":1665153501746},{"_id":"public/images/js/miniProgram/miniprogramSelect.gif","hash":"feecd76c81dfb22324ff52d15f053b2b1b875b85","modified":1665153501746},{"_id":"public/images/mobile/flutter/flutter_listview_default_constructor.png","hash":"e6d9801f12e76e60448350c142bd3f19a816fdee","modified":1665153501746},{"_id":"public/images/my-project/shopping-mall/idea-create-project1.png","hash":"c01df9d7bab2edaec39a94dfe3ef2b071de2ee05","modified":1665153501746},{"_id":"public/images/my-project/shopping-mall/idea-create-project0.png","hash":"938f17b3a30436663f968f1b7f1b2006e98af0f4","modified":1665153501746},{"_id":"public/images/my-project/shopping-mall/idea-create-project10.png","hash":"cd4ee4075b5135758889f5573153760193a4459e","modified":1665153501746},{"_id":"public/images/my-project/shopping-mall/idea-create-project11.png","hash":"7121228001fea5dadf941da5f751406c485992e8","modified":1665153501746},{"_id":"public/images/my-project/shopping-mall/idea-create-project12.png","hash":"8f8de450827b149bb9f2b01e5db7f3bc48712fa2","modified":1665153501746},{"_id":"public/images/my-project/shopping-mall/idea-create-project2.png","hash":"24020e213e8e716ec2ee23310889cad28c683aa1","modified":1665153501746},{"_id":"public/images/my-project/shopping-mall/idea-create-project13.png","hash":"4060e6361a49fb110e84c0159a13b3148dec8b8b","modified":1665153501746},{"_id":"public/images/my-project/shopping-mall/idea-create-project4.png","hash":"68554abf798bbf9d4c206fecda79fd0923d16ec8","modified":1665153501746},{"_id":"public/images/my-project/shopping-mall/idea-create-project5.png","hash":"55503067ee16ac93cd8433e93d86a6dcc5bda32a","modified":1665153501746},{"_id":"public/images/my-project/shopping-mall/idea-create-project3.png","hash":"3a2d041cc485e95bff7419879ba9bc061dd51579","modified":1665153501746},{"_id":"public/images/my-project/shopping-mall/idea-create-project7.png","hash":"16e3d0aae948e9cb4e6ceb419076cd2c0a8666df","modified":1665153501746},{"_id":"public/images/my-project/shopping-mall/idea-create-project6.png","hash":"507ea42083de11cf0a295a7c5ba048ab4e13daad","modified":1665153501746},{"_id":"public/images/my-project/shopping-mall/idea-create-project8.png","hash":"01f59838f9083a6e03c009cbcdc8560d86cd9aaf","modified":1665153501746},{"_id":"public/images/my-project/shopping-mall/idea-create-project9.png","hash":"af5f02573790816f4da177fee202e5e6734f5d33","modified":1665153501746},{"_id":"public/images/software-setup/mysql/mysql-setup5.jpg","hash":"4f03b40b26e89ad91db97bdc716a8d20e7fb16f0","modified":1665153501746},{"_id":"public/images/software-setup/mysql/mysql-setup6.jpg","hash":"154678765e59b376873c0a406bfb2f7762243785","modified":1665153501746},{"_id":"public/images/system-tap/own-path-variable/own-path-variable1.jpg","hash":"8252d6e5791d95d9a66721225da6936caa33a742","modified":1665153501746},{"_id":"public/images/system-tap/own-path-variable/own-path-variable3.jpg","hash":"fd0d418a0ff700e91e395e71c76de48fd869c943","modified":1665153501746},{"_id":"public/images/web/dhcp/dhcp.jpg","hash":"52f299067b9e701b877082fe71eabbc592858f5d","modified":1665153501746},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1665153501746},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1665153501746},{"_id":"public/images/heck/4.png","hash":"8ed5c92e09f344735c82ca59f0ad5efb28d9ea56","modified":1665153501746},{"_id":"public/images/heck/7.png","hash":"a2ac03ec95cad9996e069cab7e097d5a7f7ddd6c","modified":1665153501746},{"_id":"public/images/c-programming-language/firstDay/vs1.jpg","hash":"70a31818faa65a85d4527266c4feb1996a504518","modified":1665153501746},{"_id":"public/images/c-programming-language/firstDay/vs6.jpg","hash":"df7fb9790bebd0ddddc97751bb86bbab2fb537c3","modified":1665153501746},{"_id":"public/images/js/miniProgram/navigateBack.gif","hash":"cb3f838ca1b3792a58990e396573f6f12c892833","modified":1665153501746},{"_id":"public/images/linux/computer-operation/llvm.jpg","hash":"e68998a3cb3b1804892fc6b1c9bfaac402d6d78a","modified":1665153501746},{"_id":"public/images/software-setup/mysql/mysql-setup7.jpg","hash":"22731793af480523133ed04793811a3a42ff7ff0","modified":1665153501746},{"_id":"public/images/software-setup/mysql/mysql-setup8.jpg","hash":"32cb855562bd9798ab3cf21ad3cb9eccc6f59d41","modified":1665153501746},{"_id":"public/images/system-tap/own-path-variable/own-path-variable2.jpg","hash":"8bf13578aca69bc4dd49b95c130b4e180f953026","modified":1665153501746},{"_id":"public/images/system-tap/own-path-variable/own-path-variable4.jpg","hash":"f5ece8c96b4166723210a81b01ddb6d8059327e0","modified":1665153501746},{"_id":"public/images/system-tap/own-path-variable/own-path-variable5.jpg","hash":"167bf8e64bbdcb865c6e42566c0472a518fb5de3","modified":1665153501746},{"_id":"public/images/spring/spring-family-meals/first-step/spring-family-meals-first-step-2.jpg","hash":"538f2434349d798b05869b97b2361af92cb27688","modified":1665153501746},{"_id":"public/images/c-programming-language/firstDay/vs5.jpg","hash":"6ef42cbd29b4b4797199fcf5084685d16cb07d70","modified":1665153501746},{"_id":"public/images/my-project/hexo/github-create-project1.png","hash":"38e431d26d8deffd865a0bee612764cd4aade7f8","modified":1665153501746},{"_id":"public/images/my-project/hexo/github-create-project3.png","hash":"206dbae8705fa9e82980d38fe96892cde7119253","modified":1665153501746},{"_id":"public/images/python/use-python-to-get-webpage-to-pdf/pythonHtmlToPdf1.png","hash":"49091326c2d9670bd489e94bf0c1b44d1359e3c1","modified":1665153501746},{"_id":"public/images/software-setup/mysql/mysql-setup3.jpg","hash":"e3259ab628e0cfb5fc186def4ca58d8c660f098c","modified":1665153501746},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1665153501746},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1665153501746},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1665153501746},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1665153501746},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1665153501746},{"_id":"public/js/utils.js","hash":"2c6e6b4d9a592fbb4bf04689524db2cdfcd94ca7","modified":1665153501746},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1665153501746},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1665153501746},{"_id":"public/lib/pace/README.html","hash":"b1db0e6c71c25fbdc5a161e1bd70382846ce99ab","modified":1665153501746},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1665153501746},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1665153501746},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1665153501746},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1665153501746},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1665153501746},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1665153501746},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1665153501746},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1665153501746},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1665153501746},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1665153501746},{"_id":"public/lib/pace/pace-theme-flat-top.min.css","hash":"5e1c97e232b46e48592a8e4983ae5a89e0a7da6a","modified":1665153501746},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1665153501746},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1665153501746},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1665153501746},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1665153501746},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1665153501746},{"_id":"public/css/main.css","hash":"d61c9a985c6d56d6ba50aacabca2757474283fd1","modified":1665153501746},{"_id":"public/images/linux/computer-operation/linux_daemo.jpg","hash":"2cf2bbfbc8baf936301aac36c20e572a60b20d3f","modified":1665153501746},{"_id":"public/images/my-project/hexo/github-create-project0.png","hash":"e89798810af93f95709ce150daf84ce9b0677551","modified":1665153501746},{"_id":"public/images/my-project/hexo/github-create-project2.png","hash":"89ac9f6e17926d0fdb6974f889014b426f3fb38f","modified":1665153501746},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1665153501746},{"_id":"public/lib/pace/pace-theme-material.min.css","hash":"f1ff83985c090f3a3236554c5ef69542dcceb049","modified":1665153501746},{"_id":"public/images/c-programming-language/firstDay/vs3.jpg","hash":"d94bc276948a4efb7c868919ea4e643afd2aaebc","modified":1665153501746},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1665153501746},{"_id":"public/images/c-programming-language/firstDay/vs4.jpg","hash":"4c9085bdd7c951010e17d7bf6fcc530e97aeb0c9","modified":1665153501746},{"_id":"public/images/mobile/flutter/flutter-json-class.png","hash":"8627af0d33aeb8b0288f715d3d23161301e1a199","modified":1665153501746},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1665153501746},{"_id":"public/images/heck/6.png","hash":"0a166ed52aa7624924998acea50e1f2236765a0a","modified":1665153501746},{"_id":"public/images/software-setup/mysql/mysql-setup4.jpg","hash":"f4ac77aae22c06eeb8b5c86fa3942a56a301b310","modified":1665153501746},{"_id":"public/images/spring/spring-family-meals/first-step/spring-family-meals-first-step-1.jpg","hash":"2d5d73cea66dbaed70bf9d08da503523af940420","modified":1665153501746},{"_id":"public/images/yourbackground.jpg","hash":"0fbf3935cb092222f8393f3c108fedaf722d9cc8","modified":1665153501746},{"_id":"public/images/software-setup/mysql/mysql-setup2.jpg","hash":"8a5b1d5b86080fc809c8fe73f56baea664f70b5f","modified":1665153501746},{"_id":"public/images/system-tap/own-path-variable/own-path-variable6.jpg","hash":"b44f4426d138f0cbe52a9c12150256c323ee11f0","modified":1665153501746},{"_id":"public/images/software-setup/mysql/mysql-setup1.jpg","hash":"23a72deac5a40b35092310b878bb2456d7620801","modified":1665153501746},{"_id":"public/images/linux/ethcard/ifconfig.png","hash":"7c427d6e3f572b6a1eb2dd4c1ab481500b4ed7db","modified":1665153501746},{"_id":"public/images/js/miniProgram/miniprogramFixedTop.gif","hash":"5418a01af06f4326fa5482bdb688f8d34e1e9a9a","modified":1665153501746}],"Category":[{"name":"好物收集","_id":"cl8yleji500053vsbei1o265j"},{"name":"其他无法归类的技巧/经验","_id":"cl8ylejii000b3vsbgnwv90nc"},{"name":"感悟","_id":"cl8ylejit000g3vsb530zd6sh"},{"name":"后端技巧/经验","_id":"cl8ylejji000r3vsb6pd71p8l"},{"name":"博客技巧/经验","_id":"cl8ylejk000123vsb9c8a4vai"},{"name":"前端技巧/经验","_id":"cl8ylejlx001w3vsb1onxe1mg"},{"name":"汇编","parent":"cl8ylejji000r3vsb6pd71p8l","_id":"cl8ylejm800213vsb5d1p72rh"},{"name":"java","parent":"cl8ylejji000r3vsb6pd71p8l","_id":"cl8ylejmy002h3vsb6rxm592p"},{"name":"GitBook","parent":"cl8ylejk000123vsb9c8a4vai","_id":"cl8ylejnp002x3vsb6mybepsb"},{"name":"hexo","parent":"cl8ylejk000123vsb9c8a4vai","_id":"cl8ylejoi003j3vsb182t7ef1"},{"name":"做题","_id":"cl8ylejqc004x3vsbgjzu4409"},{"name":"移动开发技巧/经验","_id":"cl8ylejrb005e3vsb5n6m80rx"},{"name":"基础","parent":"cl8ylejlx001w3vsb1onxe1mg","_id":"cl8ylejsy00663vsb37s3587o"},{"name":"8086","parent":"cl8ylejm800213vsb5d1p72rh","_id":"cl8ylejtn006o3vsbfs58856r"},{"name":"微信小程序","parent":"cl8ylejlx001w3vsb1onxe1mg","_id":"cl8ylejue00763vsb08x4dio0"},{"name":"破解","parent":"cl8ylejii000b3vsbgnwv90nc","_id":"cl8ylejvm007y3vsbdhkucajd"},{"name":"脚本语言技巧/经验","_id":"cl8ylejvu00853vsbcsjc1ew3"},{"name":"javafx","parent":"cl8ylejji000r3vsb6pd71p8l","_id":"cl8ylejws008p3vsb90noah39"},{"name":"AsciiDoc","parent":"cl8ylejnp002x3vsb6mybepsb","_id":"cl8ylejx1008z3vsb8qk28m8q"},{"name":"vue","parent":"cl8ylejlx001w3vsb1onxe1mg","_id":"cl8ylejxa00963vsb2hc00d4z"},{"name":"webpack","parent":"cl8ylejlx001w3vsb1onxe1mg","_id":"cl8ylejxi009c3vsbbr105po3"},{"name":"配置技巧/经验","_id":"cl8ylejxw009l3vsb4u862s7y"},{"name":"java","parent":"cl8ylejqc004x3vsbgjzu4409","_id":"cl8ylek1v00c83vsbb9ar2yah"},{"name":"android","parent":"cl8ylejrb005e3vsb5n6m80rx","_id":"cl8ylek2p00cz3vsbhe2d6l8n"},{"name":"flutter","parent":"cl8ylejrb005e3vsb5n6m80rx","_id":"cl8ylek3d00dr3vsbe85a53g0"},{"name":"开发笔记","_id":"cl8ylek3v00ee3vsbgprk8u4s"},{"name":"笔记","_id":"cl8ylek5x00ge3vsbh51g2xmw"},{"name":"python","parent":"cl8ylejvu00853vsbcsjc1ew3","_id":"cl8ylek6u00hc3vsbf0vvavpj"},{"name":"开发工具配置","parent":"cl8ylejxw009l3vsb4u862s7y","_id":"cl8ylek8j00iy3vsbb9esfdbi"},{"name":"spring","parent":"cl8ylejmy002h3vsb6rxm592p","_id":"cl8yleka600kg3vsbfx6m1zr9"},{"name":"开发环境配置（运维）","parent":"cl8ylejxw009l3vsb4u862s7y","_id":"cl8ylekb200l63vsb1pfp76pq"},{"name":"系统配置","parent":"cl8ylejxw009l3vsb4u862s7y","_id":"cl8ylekbj00lw3vsbhk3b11z8"},{"name":"中间件","parent":"cl8ylejxw009l3vsb4u862s7y","_id":"cl8ylekbt00mc3vsbhqnph7vg"},{"name":"虚拟机","parent":"cl8ylejxw009l3vsb4u862s7y","_id":"cl8ylekd800nw3vsbh8xqg8de"},{"name":"商城","parent":"cl8ylek3v00ee3vsbgprk8u4s","_id":"cl8ylekdl00oa3vsbfrfg44xm"},{"name":"读博客笔记","parent":"cl8ylek5x00ge3vsbh51g2xmw","_id":"cl8ylekf400pl3vsbb0f5c5vk"},{"name":"最好的c++教程","parent":"cl8ylek5x00ge3vsbh51g2xmw","_id":"cl8ylekfp00q63vsb2nkb6oh8"},{"name":"读书笔记","parent":"cl8ylek5x00ge3vsbh51g2xmw","_id":"cl8ylekfv00q93vsbfh5qezl6"},{"name":"git","parent":"cl8ylek8j00iy3vsbb9esfdbi","_id":"cl8ylekhi00rz3vsb908kf8xr"},{"name":"mariadb","parent":"cl8ylek8j00iy3vsbb9esfdbi","_id":"cl8ylekhq00s83vsb2itb17r2"},{"name":"mysql","parent":"cl8ylek8j00iy3vsbb9esfdbi","_id":"cl8ylekhw00sj3vsb2swx4vus"},{"name":"解读源码笔记","parent":"cl8ylek5x00ge3vsbh51g2xmw","_id":"cl8ylekid00sx3vsb1y8k234z"},{"name":"linux","parent":"cl8ylekbj00lw3vsbhk3b11z8","_id":"cl8ylekil00t53vsb5p27ghs9"},{"name":"php","parent":"cl8ylekb200l63vsb1pfp76pq","_id":"cl8ylekin00t73vsb0zy3d6em"},{"name":"rocketMQ","parent":"cl8ylekbt00mc3vsbhqnph7vg","_id":"cl8ylekio00ta3vsbcgkw88c7"},{"name":"虚拟机","parent":"cl8ylekbj00lw3vsbhk3b11z8","_id":"cl8ylekjv00um3vsb8wag59tf"},{"name":"windows","parent":"cl8ylekbj00lw3vsbhk3b11z8","_id":"cl8ylekjx00up3vsbdcwjgkkr"},{"name":"配置篇","parent":"cl8ylekdl00oa3vsbfrfg44xm","_id":"cl8ylekk100uw3vsbelab70m8"},{"name":"功能篇","parent":"cl8ylekdl00oa3vsbfrfg44xm","_id":"cl8ylekkt00vw3vsb1uk5fan6"},{"name":"前端篇","parent":"cl8ylekdl00oa3vsbfrfg44xm","_id":"cl8ylekkv00vz3vsbgpn9hm50"},{"name":"技巧篇","parent":"cl8ylekdl00oa3vsbfrfg44xm","_id":"cl8ylekkx00w23vsb69j472au"},{"name":"跟我一起写makefile","parent":"cl8ylekf400pl3vsbb0f5c5vk","_id":"cl8ylekkz00w63vsb9wdf8nq5"},{"name":"快乐的Linux命令行","parent":"cl8ylekfv00q93vsbfh5qezl6","_id":"cl8ylekli00wu3vsbg2bxe9na"},{"name":"汇编语言","parent":"cl8ylekfv00q93vsbfh5qezl6","_id":"cl8ylekmt00yc3vsbavy24aqg"},{"name":"JavaScript权威指南","parent":"cl8ylekfv00q93vsbfh5qezl6","_id":"cl8ylekmv00yf3vsb9geu5x64"},{"name":"C程序设计语言","parent":"cl8ylekfv00q93vsbfh5qezl6","_id":"cl8ylekmy00yj3vsbf8gd7pdg"},{"name":"大型网站技术架构","parent":"cl8ylekfv00q93vsbfh5qezl6","_id":"cl8ylekn300yp3vsb74g8ac3n"},{"name":"mybatis-enhance","parent":"cl8ylekid00sx3vsb1y8k234z","_id":"cl8yleknd00z13vsb39uvhklw"}],"Data":[{"_id":"styles","data":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}],"Page":[{"title":"总分类","date":"2018-12-13T15:22:20.000Z","type":"categories","layout":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 总分类\ndate: 2018-12-13 23:22:20\ntype: \"categories\"\nlayout: \"categories\"\ncomments: false\n---","updated":"2021-10-14T08:18:58.527Z","path":"categories/index.html","_id":"cl8ylejh600003vsbaexyczck","content":"","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"","more":""}],"Post":[{"title":"welcome","date":"2018-11-14T00:23:32.000Z","_content":"\n你好, 这里是littleboyDK, 欢迎来到我的博客, 我会不定时的把我的技术博文发布到我的博客当中去, 希望能帮助到更多的人! 谢谢。\n\n如果有什么想和我交流的问题，可以通过 dahazidk@163.com\n\n 来联系我, 欢迎打扰!\n","source":"_posts/welcome.md","raw":"---\ntitle: welcome\ndate: 2018-11-14 08:23:32\ntags: welcome\n---\n\n你好, 这里是littleboyDK, 欢迎来到我的博客, 我会不定时的把我的技术博文发布到我的博客当中去, 希望能帮助到更多的人! 谢谢。\n\n如果有什么想和我交流的问题，可以通过 dahazidk@163.com\n\n 来联系我, 欢迎打扰!\n","slug":"welcome","published":1,"updated":"2021-10-14T08:18:51.655Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejhg00013vsbeptf4c2z","content":"<p>你好, 这里是littleboyDK, 欢迎来到我的博客, 我会不定时的把我的技术博文发布到我的博客当中去, 希望能帮助到更多的人! 谢谢。</p>\n<p>如果有什么想和我交流的问题，可以通过 <a href=\"mailto:&#x64;&#97;&#104;&#x61;&#x7a;&#x69;&#100;&#x6b;&#x40;&#49;&#54;&#51;&#x2e;&#x63;&#x6f;&#x6d;\">&#x64;&#97;&#104;&#x61;&#x7a;&#x69;&#100;&#x6b;&#x40;&#49;&#54;&#51;&#x2e;&#x63;&#x6f;&#x6d;</a></p>\n<p> 来联系我, 欢迎打扰!</p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"","more":"<p>你好, 这里是littleboyDK, 欢迎来到我的博客, 我会不定时的把我的技术博文发布到我的博客当中去, 希望能帮助到更多的人! 谢谢。</p>\n<p>如果有什么想和我交流的问题，可以通过 <a href=\"mailto:&#x64;&#97;&#104;&#x61;&#x7a;&#x69;&#100;&#x6b;&#x40;&#49;&#54;&#51;&#x2e;&#x63;&#x6f;&#x6d;\">&#x64;&#97;&#104;&#x61;&#x7a;&#x69;&#100;&#x6b;&#x40;&#49;&#54;&#51;&#x2e;&#x63;&#x6f;&#x6d;</a></p>\n<p> 来联系我, 欢迎打扰!</p>\n"},{"title":"编程方面的软件整理","date":"2019-01-04T15:15:01.000Z","_content":"\n# 前言\n\n望着我电脑桌面乱糟糟的一团, 突然就决定开始来好好的整理一下自打买了这台电脑之后收集的软件, 这篇文章就是这一个系列的开始, 首先我想要整理一下编程方面, 都有什么比较好的工具。\n\n<!--more-->\n\n# IDE/editor\n\n先来介绍一下我平常会使用的一些IDE和editor(编辑器), 首先是一些好用的编辑器。\n\n## editor\n\n[notepad++](https://notepad-plus-plus.org/) 用过的人都说好。\n\n[Sublime](http://www.sublimetext.com/) 代码编译器, 最初被设计为拥有丰富扩展的vim, 这里是[破解版](http://www.dayanzai.me/sublime-text-3.html)。\n\n[ultraedit](https://www.ultraedit.com/) 16进制的编译器, 这里是[破解版](http://www.dayanzai.me/ultraedit.html)。\n\n\n\n## Java\n\nIntellij idea, 只要是一名合格的Java程序员就应该知道的一款集大成的IDE。良好的代码提示, 友好的交互界面将大部分的Eclipse用户吸引过来, 当然, 如果你想使用她来进行web开发, 那么你如果有足够的能力, 还是希望支持正版, 但是学生肯定是没办法支付这么昂贵的价格的, 所以, 破解请看这里。\n\n## PHP\n\nPHP Storm, 也是intellij家族的一员, 相同的风格, 当然, 破解方式也是大同小异。\n\nPHP study, php调试环境的集成包\n\n## 小工具\n\nadobe 全家桶\n\n这里要提一下, adobe还有一个epub的阅读器: adobe digital edition\n\ndosbox\n\nmactype(字体渲染器)\n\nreg organizer (注册表管理工具)\n\nburpsuite (渗透测试工具)\n\nmangodb\n\nngrok\n\ncalibre\n\ndgital paper app (dpt)\n\nsimplenote\n\nuestudio\n\nultracompare (比较文件工具)\n\nultraISO\n\natom\n\neverything\n\nicoFX (图标制作)\n\niDisplay(苹果手机共享电脑屏幕)\n\ninternet download manager\n\ncydiaimpactor(ipa安装工具)\n\nNBTExplorer (mc存档修改器)\n\nfish-v321 (文库下载)\n\nnordVPN\n\ntypora\n\nautoHotKey\n\nbulk rename utility(多文件修改名字)\n\npotplayer\n\nduet\n\nfidder\n\n\n","source":"_posts/collect/coding-software.md","raw":"---\ntitle: 编程方面的软件整理\ndate: 2019-01-04 23:15:01\ncategories:\n- 好物收集\ntags:\n- 编程\n- 软件\n---\n\n# 前言\n\n望着我电脑桌面乱糟糟的一团, 突然就决定开始来好好的整理一下自打买了这台电脑之后收集的软件, 这篇文章就是这一个系列的开始, 首先我想要整理一下编程方面, 都有什么比较好的工具。\n\n<!--more-->\n\n# IDE/editor\n\n先来介绍一下我平常会使用的一些IDE和editor(编辑器), 首先是一些好用的编辑器。\n\n## editor\n\n[notepad++](https://notepad-plus-plus.org/) 用过的人都说好。\n\n[Sublime](http://www.sublimetext.com/) 代码编译器, 最初被设计为拥有丰富扩展的vim, 这里是[破解版](http://www.dayanzai.me/sublime-text-3.html)。\n\n[ultraedit](https://www.ultraedit.com/) 16进制的编译器, 这里是[破解版](http://www.dayanzai.me/ultraedit.html)。\n\n\n\n## Java\n\nIntellij idea, 只要是一名合格的Java程序员就应该知道的一款集大成的IDE。良好的代码提示, 友好的交互界面将大部分的Eclipse用户吸引过来, 当然, 如果你想使用她来进行web开发, 那么你如果有足够的能力, 还是希望支持正版, 但是学生肯定是没办法支付这么昂贵的价格的, 所以, 破解请看这里。\n\n## PHP\n\nPHP Storm, 也是intellij家族的一员, 相同的风格, 当然, 破解方式也是大同小异。\n\nPHP study, php调试环境的集成包\n\n## 小工具\n\nadobe 全家桶\n\n这里要提一下, adobe还有一个epub的阅读器: adobe digital edition\n\ndosbox\n\nmactype(字体渲染器)\n\nreg organizer (注册表管理工具)\n\nburpsuite (渗透测试工具)\n\nmangodb\n\nngrok\n\ncalibre\n\ndgital paper app (dpt)\n\nsimplenote\n\nuestudio\n\nultracompare (比较文件工具)\n\nultraISO\n\natom\n\neverything\n\nicoFX (图标制作)\n\niDisplay(苹果手机共享电脑屏幕)\n\ninternet download manager\n\ncydiaimpactor(ipa安装工具)\n\nNBTExplorer (mc存档修改器)\n\nfish-v321 (文库下载)\n\nnordVPN\n\ntypora\n\nautoHotKey\n\nbulk rename utility(多文件修改名字)\n\npotplayer\n\nduet\n\nfidder\n\n\n","slug":"collect/coding-software","published":1,"updated":"2022-10-07T13:27:22.566Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejhq00023vsb6q5le0a4","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>望着我电脑桌面乱糟糟的一团, 突然就决定开始来好好的整理一下自打买了这台电脑之后收集的软件, 这篇文章就是这一个系列的开始, 首先我想要整理一下编程方面, 都有什么比较好的工具。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"IDE-x2F-editor\"><a href=\"#IDE-x2F-editor\" class=\"headerlink\" title=\"IDE&#x2F;editor\"></a>IDE&#x2F;editor</h1><p>先来介绍一下我平常会使用的一些IDE和editor(编辑器), 首先是一些好用的编辑器。</p>\n<h2 id=\"editor\"><a href=\"#editor\" class=\"headerlink\" title=\"editor\"></a>editor</h2><p><a href=\"https://notepad-plus-plus.org/\">notepad++</a> 用过的人都说好。</p>\n<p><a href=\"http://www.sublimetext.com/\">Sublime</a> 代码编译器, 最初被设计为拥有丰富扩展的vim, 这里是<a href=\"http://www.dayanzai.me/sublime-text-3.html\">破解版</a>。</p>\n<p><a href=\"https://www.ultraedit.com/\">ultraedit</a> 16进制的编译器, 这里是<a href=\"http://www.dayanzai.me/ultraedit.html\">破解版</a>。</p>\n<h2 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java\"></a>Java</h2><p>Intellij idea, 只要是一名合格的Java程序员就应该知道的一款集大成的IDE。良好的代码提示, 友好的交互界面将大部分的Eclipse用户吸引过来, 当然, 如果你想使用她来进行web开发, 那么你如果有足够的能力, 还是希望支持正版, 但是学生肯定是没办法支付这么昂贵的价格的, 所以, 破解请看这里。</p>\n<h2 id=\"PHP\"><a href=\"#PHP\" class=\"headerlink\" title=\"PHP\"></a>PHP</h2><p>PHP Storm, 也是intellij家族的一员, 相同的风格, 当然, 破解方式也是大同小异。</p>\n<p>PHP study, php调试环境的集成包</p>\n<h2 id=\"小工具\"><a href=\"#小工具\" class=\"headerlink\" title=\"小工具\"></a>小工具</h2><p>adobe 全家桶</p>\n<p>这里要提一下, adobe还有一个epub的阅读器: adobe digital edition</p>\n<p>dosbox</p>\n<p>mactype(字体渲染器)</p>\n<p>reg organizer (注册表管理工具)</p>\n<p>burpsuite (渗透测试工具)</p>\n<p>mangodb</p>\n<p>ngrok</p>\n<p>calibre</p>\n<p>dgital paper app (dpt)</p>\n<p>simplenote</p>\n<p>uestudio</p>\n<p>ultracompare (比较文件工具)</p>\n<p>ultraISO</p>\n<p>atom</p>\n<p>everything</p>\n<p>icoFX (图标制作)</p>\n<p>iDisplay(苹果手机共享电脑屏幕)</p>\n<p>internet download manager</p>\n<p>cydiaimpactor(ipa安装工具)</p>\n<p>NBTExplorer (mc存档修改器)</p>\n<p>fish-v321 (文库下载)</p>\n<p>nordVPN</p>\n<p>typora</p>\n<p>autoHotKey</p>\n<p>bulk rename utility(多文件修改名字)</p>\n<p>potplayer</p>\n<p>duet</p>\n<p>fidder</p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>望着我电脑桌面乱糟糟的一团, 突然就决定开始来好好的整理一下自打买了这台电脑之后收集的软件, 这篇文章就是这一个系列的开始, 首先我想要整理一下编程方面, 都有什么比较好的工具。</p>","more":"<h1 id=\"IDE-x2F-editor\"><a href=\"#IDE-x2F-editor\" class=\"headerlink\" title=\"IDE&#x2F;editor\"></a>IDE&#x2F;editor</h1><p>先来介绍一下我平常会使用的一些IDE和editor(编辑器), 首先是一些好用的编辑器。</p>\n<h2 id=\"editor\"><a href=\"#editor\" class=\"headerlink\" title=\"editor\"></a>editor</h2><p><a href=\"https://notepad-plus-plus.org/\">notepad++</a> 用过的人都说好。</p>\n<p><a href=\"http://www.sublimetext.com/\">Sublime</a> 代码编译器, 最初被设计为拥有丰富扩展的vim, 这里是<a href=\"http://www.dayanzai.me/sublime-text-3.html\">破解版</a>。</p>\n<p><a href=\"https://www.ultraedit.com/\">ultraedit</a> 16进制的编译器, 这里是<a href=\"http://www.dayanzai.me/ultraedit.html\">破解版</a>。</p>\n<h2 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java\"></a>Java</h2><p>Intellij idea, 只要是一名合格的Java程序员就应该知道的一款集大成的IDE。良好的代码提示, 友好的交互界面将大部分的Eclipse用户吸引过来, 当然, 如果你想使用她来进行web开发, 那么你如果有足够的能力, 还是希望支持正版, 但是学生肯定是没办法支付这么昂贵的价格的, 所以, 破解请看这里。</p>\n<h2 id=\"PHP\"><a href=\"#PHP\" class=\"headerlink\" title=\"PHP\"></a>PHP</h2><p>PHP Storm, 也是intellij家族的一员, 相同的风格, 当然, 破解方式也是大同小异。</p>\n<p>PHP study, php调试环境的集成包</p>\n<h2 id=\"小工具\"><a href=\"#小工具\" class=\"headerlink\" title=\"小工具\"></a>小工具</h2><p>adobe 全家桶</p>\n<p>这里要提一下, adobe还有一个epub的阅读器: adobe digital edition</p>\n<p>dosbox</p>\n<p>mactype(字体渲染器)</p>\n<p>reg organizer (注册表管理工具)</p>\n<p>burpsuite (渗透测试工具)</p>\n<p>mangodb</p>\n<p>ngrok</p>\n<p>calibre</p>\n<p>dgital paper app (dpt)</p>\n<p>simplenote</p>\n<p>uestudio</p>\n<p>ultracompare (比较文件工具)</p>\n<p>ultraISO</p>\n<p>atom</p>\n<p>everything</p>\n<p>icoFX (图标制作)</p>\n<p>iDisplay(苹果手机共享电脑屏幕)</p>\n<p>internet download manager</p>\n<p>cydiaimpactor(ipa安装工具)</p>\n<p>NBTExplorer (mc存档修改器)</p>\n<p>fish-v321 (文库下载)</p>\n<p>nordVPN</p>\n<p>typora</p>\n<p>autoHotKey</p>\n<p>bulk rename utility(多文件修改名字)</p>\n<p>potplayer</p>\n<p>duet</p>\n<p>fidder</p>"},{"title":"支付流程","date":"2020-04-20T06:06:31.000Z","_content":"\n# 支付流程\n\n最近对接了不少支付相关的业务, 也遇到了很多问题, 今天特此来做一个复盘。\n\n首先来总结一下支付流程:\n\n```mermaid\n\ngraph LR\n\nclient[客户端发起调用] --携带订单金额等必要信息--> server[商户服务器接受到请求]\nserver --根据收款主体给的唯一密钥对所有参数进行签名, 并将回调路径一并传送--> payServer[收款主体]\npayServer --对签名进行校验并处理支付请求, 并根据回调路径调用商户服务器 --> server\nserver --在回调函数中对返回值进行签名校验, 并根据其他的参数来处理订单--> client\n```\n\n这是一个非常简单的支付流程图, 省略了所有不必要的细节, 其中在校验签名部分, 有不同的方式可以校验, 第一种就是流程图中呈现的, 商户需要在收款方注册账号并生成唯一密钥, 在商户服务器和收款方服务器来回传参的过程中, 都需要根据签名来进行校验。\n\n另外一种, 是让商户自己来生成一个私钥和公钥, 在收款方服务器中将公钥填写进去, 并生成一个收款方的公钥。在每次传参的过程中, 将应用私钥和收款方公钥携带进参数中, 这样也保证了支付的安全性。在回调部分中, 直接校验商户id(商户在收款方注册时会有一个唯一值)和订单号来确定商户和订单。\n\n<!--more-->\n\n# 遇到的问题\n\n我在对接收款方通道时, 遇到了一些问题:\n\n* app 如何对接 h5 网站的支付方式?\n* 当遇到了在成功之外的情况应该如何处理?\n\n## app 如何对接 h5 网站的支付方式?\n\n由于 app 原生的通道非常之少, 大部分都是给 h5 网站对接的通道, 所以就会遇到这种问题。\n那么流程是这样的:\n\napp 向商户服务器发起支付请求 -> 商户服务器收到请求后, 使用 HttpUrlConnection 对收款方服务器进行请求 -> 收款方服务器收到请求后会返回一段自动提交的 html 表单返回给商户服务器\n\n到这里, 似乎就有点问题了, 服务器拿到一段 html 应该怎么办呢? 直接处理? 还是啥也不管直接返回给 app ? 那 app 拿到 html 应该怎么办? 我自己考虑有两种解决方式:\n\n第一种: 在服务器中搞一个文件, 将这一段 html 写入到文件中, 然后将该文件的路径返回给 app, 这样 app就可以直接根据这个路径跳转到浏览器, 让浏览器去处理了。\n第二种: 使用 jsoup 来处理 html 中的表单中的参数, 将参数提取出来, 然后继续使用 HttpUrlConnection 来模拟 http 请求, 直到拿到最后的支付路径。将路径传给 app 在去跳转。\n\n这两种方式都可以, 但是我比较推荐第一种, 因为采用第二种方式, 在后台处理的时间会变得很长, 用户等待的时间也变得很长。\n\n## 当遇到了在支付成功之外的情况应该如何处理?\n\n我在对接一个通道的时候就遇到了一个情况, 这个通道不是支付通道, 是提现通道, 也就是说商户在账户中存钱, 用户有提现操作时进行提款。同样是 h5 的对接方式, 但是如果商户的账户中的款项不足时, 直接将错误信息返回给服务器, 而不是异步回调的方式来返回, 所以, 需要检测一下该情况。\n\n\n","source":"_posts/other_skill_experience/pay-flow.md","raw":"---\ntitle: 支付流程\ndate: 2020-04-20 14:06:31\ncategories:\n- 其他无法归类的技巧/经验\ntags:\n- 支付\n---\n\n# 支付流程\n\n最近对接了不少支付相关的业务, 也遇到了很多问题, 今天特此来做一个复盘。\n\n首先来总结一下支付流程:\n\n```mermaid\n\ngraph LR\n\nclient[客户端发起调用] --携带订单金额等必要信息--> server[商户服务器接受到请求]\nserver --根据收款主体给的唯一密钥对所有参数进行签名, 并将回调路径一并传送--> payServer[收款主体]\npayServer --对签名进行校验并处理支付请求, 并根据回调路径调用商户服务器 --> server\nserver --在回调函数中对返回值进行签名校验, 并根据其他的参数来处理订单--> client\n```\n\n这是一个非常简单的支付流程图, 省略了所有不必要的细节, 其中在校验签名部分, 有不同的方式可以校验, 第一种就是流程图中呈现的, 商户需要在收款方注册账号并生成唯一密钥, 在商户服务器和收款方服务器来回传参的过程中, 都需要根据签名来进行校验。\n\n另外一种, 是让商户自己来生成一个私钥和公钥, 在收款方服务器中将公钥填写进去, 并生成一个收款方的公钥。在每次传参的过程中, 将应用私钥和收款方公钥携带进参数中, 这样也保证了支付的安全性。在回调部分中, 直接校验商户id(商户在收款方注册时会有一个唯一值)和订单号来确定商户和订单。\n\n<!--more-->\n\n# 遇到的问题\n\n我在对接收款方通道时, 遇到了一些问题:\n\n* app 如何对接 h5 网站的支付方式?\n* 当遇到了在成功之外的情况应该如何处理?\n\n## app 如何对接 h5 网站的支付方式?\n\n由于 app 原生的通道非常之少, 大部分都是给 h5 网站对接的通道, 所以就会遇到这种问题。\n那么流程是这样的:\n\napp 向商户服务器发起支付请求 -> 商户服务器收到请求后, 使用 HttpUrlConnection 对收款方服务器进行请求 -> 收款方服务器收到请求后会返回一段自动提交的 html 表单返回给商户服务器\n\n到这里, 似乎就有点问题了, 服务器拿到一段 html 应该怎么办呢? 直接处理? 还是啥也不管直接返回给 app ? 那 app 拿到 html 应该怎么办? 我自己考虑有两种解决方式:\n\n第一种: 在服务器中搞一个文件, 将这一段 html 写入到文件中, 然后将该文件的路径返回给 app, 这样 app就可以直接根据这个路径跳转到浏览器, 让浏览器去处理了。\n第二种: 使用 jsoup 来处理 html 中的表单中的参数, 将参数提取出来, 然后继续使用 HttpUrlConnection 来模拟 http 请求, 直到拿到最后的支付路径。将路径传给 app 在去跳转。\n\n这两种方式都可以, 但是我比较推荐第一种, 因为采用第二种方式, 在后台处理的时间会变得很长, 用户等待的时间也变得很长。\n\n## 当遇到了在支付成功之外的情况应该如何处理?\n\n我在对接一个通道的时候就遇到了一个情况, 这个通道不是支付通道, 是提现通道, 也就是说商户在账户中存钱, 用户有提现操作时进行提款。同样是 h5 的对接方式, 但是如果商户的账户中的款项不足时, 直接将错误信息返回给服务器, 而不是异步回调的方式来返回, 所以, 需要检测一下该情况。\n\n\n","slug":"other_skill_experience/pay-flow","published":1,"updated":"2022-10-07T12:48:02.133Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8yleji100043vsbg8ea2qzb","content":"<h1 id=\"支付流程\"><a href=\"#支付流程\" class=\"headerlink\" title=\"支付流程\"></a>支付流程</h1><p>最近对接了不少支付相关的业务, 也遇到了很多问题, 今天特此来做一个复盘。</p>\n<p>首先来总结一下支付流程:</p>\n<pre class=\"mermaid\">\ngraph LR\n\nclient[客户端发起调用] --携带订单金额等必要信息--> server[商户服务器接受到请求]\nserver --根据收款主体给的唯一密钥对所有参数进行签名, 并将回调路径一并传送--> payServer[收款主体]\npayServer --对签名进行校验并处理支付请求, 并根据回调路径调用商户服务器 --> server\nserver --在回调函数中对返回值进行签名校验, 并根据其他的参数来处理订单--> client</pre>\n\n<p>这是一个非常简单的支付流程图, 省略了所有不必要的细节, 其中在校验签名部分, 有不同的方式可以校验, 第一种就是流程图中呈现的, 商户需要在收款方注册账号并生成唯一密钥, 在商户服务器和收款方服务器来回传参的过程中, 都需要根据签名来进行校验。</p>\n<p>另外一种, 是让商户自己来生成一个私钥和公钥, 在收款方服务器中将公钥填写进去, 并生成一个收款方的公钥。在每次传参的过程中, 将应用私钥和收款方公钥携带进参数中, 这样也保证了支付的安全性。在回调部分中, 直接校验商户id(商户在收款方注册时会有一个唯一值)和订单号来确定商户和订单。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h1><p>我在对接收款方通道时, 遇到了一些问题:</p>\n<ul>\n<li>app 如何对接 h5 网站的支付方式?</li>\n<li>当遇到了在成功之外的情况应该如何处理?</li>\n</ul>\n<h2 id=\"app-如何对接-h5-网站的支付方式\"><a href=\"#app-如何对接-h5-网站的支付方式\" class=\"headerlink\" title=\"app 如何对接 h5 网站的支付方式?\"></a>app 如何对接 h5 网站的支付方式?</h2><p>由于 app 原生的通道非常之少, 大部分都是给 h5 网站对接的通道, 所以就会遇到这种问题。<br>那么流程是这样的:</p>\n<p>app 向商户服务器发起支付请求 -&gt; 商户服务器收到请求后, 使用 HttpUrlConnection 对收款方服务器进行请求 -&gt; 收款方服务器收到请求后会返回一段自动提交的 html 表单返回给商户服务器</p>\n<p>到这里, 似乎就有点问题了, 服务器拿到一段 html 应该怎么办呢? 直接处理? 还是啥也不管直接返回给 app ? 那 app 拿到 html 应该怎么办? 我自己考虑有两种解决方式:</p>\n<p>第一种: 在服务器中搞一个文件, 将这一段 html 写入到文件中, 然后将该文件的路径返回给 app, 这样 app就可以直接根据这个路径跳转到浏览器, 让浏览器去处理了。<br>第二种: 使用 jsoup 来处理 html 中的表单中的参数, 将参数提取出来, 然后继续使用 HttpUrlConnection 来模拟 http 请求, 直到拿到最后的支付路径。将路径传给 app 在去跳转。</p>\n<p>这两种方式都可以, 但是我比较推荐第一种, 因为采用第二种方式, 在后台处理的时间会变得很长, 用户等待的时间也变得很长。</p>\n<h2 id=\"当遇到了在支付成功之外的情况应该如何处理\"><a href=\"#当遇到了在支付成功之外的情况应该如何处理\" class=\"headerlink\" title=\"当遇到了在支付成功之外的情况应该如何处理?\"></a>当遇到了在支付成功之外的情况应该如何处理?</h2><p>我在对接一个通道的时候就遇到了一个情况, 这个通道不是支付通道, 是提现通道, 也就是说商户在账户中存钱, 用户有提现操作时进行提款。同样是 h5 的对接方式, 但是如果商户的账户中的款项不足时, 直接将错误信息返回给服务器, 而不是异步回调的方式来返回, 所以, 需要检测一下该情况。</p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"支付流程\"><a href=\"#支付流程\" class=\"headerlink\" title=\"支付流程\"></a>支付流程</h1><p>最近对接了不少支付相关的业务, 也遇到了很多问题, 今天特此来做一个复盘。</p>\n<p>首先来总结一下支付流程:</p>\n<pre class=\"mermaid\">\ngraph LR\n\nclient[客户端发起调用] --携带订单金额等必要信息--> server[商户服务器接受到请求]\nserver --根据收款主体给的唯一密钥对所有参数进行签名, 并将回调路径一并传送--> payServer[收款主体]\npayServer --对签名进行校验并处理支付请求, 并根据回调路径调用商户服务器 --> server\nserver --在回调函数中对返回值进行签名校验, 并根据其他的参数来处理订单--> client</pre>\n\n<p>这是一个非常简单的支付流程图, 省略了所有不必要的细节, 其中在校验签名部分, 有不同的方式可以校验, 第一种就是流程图中呈现的, 商户需要在收款方注册账号并生成唯一密钥, 在商户服务器和收款方服务器来回传参的过程中, 都需要根据签名来进行校验。</p>\n<p>另外一种, 是让商户自己来生成一个私钥和公钥, 在收款方服务器中将公钥填写进去, 并生成一个收款方的公钥。在每次传参的过程中, 将应用私钥和收款方公钥携带进参数中, 这样也保证了支付的安全性。在回调部分中, 直接校验商户id(商户在收款方注册时会有一个唯一值)和订单号来确定商户和订单。</p>","more":"<h1 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h1><p>我在对接收款方通道时, 遇到了一些问题:</p>\n<ul>\n<li>app 如何对接 h5 网站的支付方式?</li>\n<li>当遇到了在成功之外的情况应该如何处理?</li>\n</ul>\n<h2 id=\"app-如何对接-h5-网站的支付方式\"><a href=\"#app-如何对接-h5-网站的支付方式\" class=\"headerlink\" title=\"app 如何对接 h5 网站的支付方式?\"></a>app 如何对接 h5 网站的支付方式?</h2><p>由于 app 原生的通道非常之少, 大部分都是给 h5 网站对接的通道, 所以就会遇到这种问题。<br>那么流程是这样的:</p>\n<p>app 向商户服务器发起支付请求 -&gt; 商户服务器收到请求后, 使用 HttpUrlConnection 对收款方服务器进行请求 -&gt; 收款方服务器收到请求后会返回一段自动提交的 html 表单返回给商户服务器</p>\n<p>到这里, 似乎就有点问题了, 服务器拿到一段 html 应该怎么办呢? 直接处理? 还是啥也不管直接返回给 app ? 那 app 拿到 html 应该怎么办? 我自己考虑有两种解决方式:</p>\n<p>第一种: 在服务器中搞一个文件, 将这一段 html 写入到文件中, 然后将该文件的路径返回给 app, 这样 app就可以直接根据这个路径跳转到浏览器, 让浏览器去处理了。<br>第二种: 使用 jsoup 来处理 html 中的表单中的参数, 将参数提取出来, 然后继续使用 HttpUrlConnection 来模拟 http 请求, 直到拿到最后的支付路径。将路径传给 app 在去跳转。</p>\n<p>这两种方式都可以, 但是我比较推荐第一种, 因为采用第二种方式, 在后台处理的时间会变得很长, 用户等待的时间也变得很长。</p>\n<h2 id=\"当遇到了在支付成功之外的情况应该如何处理\"><a href=\"#当遇到了在支付成功之外的情况应该如何处理\" class=\"headerlink\" title=\"当遇到了在支付成功之外的情况应该如何处理?\"></a>当遇到了在支付成功之外的情况应该如何处理?</h2><p>我在对接一个通道的时候就遇到了一个情况, 这个通道不是支付通道, 是提现通道, 也就是说商户在账户中存钱, 用户有提现操作时进行提款。同样是 h5 的对接方式, 但是如果商户的账户中的款项不足时, 直接将错误信息返回给服务器, 而不是异步回调的方式来返回, 所以, 需要检测一下该情况。</p>"},{"title":"一个非常操蛋的难题","date":"2019-12-07T09:36:15.000Z","_content":"\n# 问题描述\n\n前段时间, 工作方面遇到了一些问题, 具体情况是这样的:\n\n前端和后端建立长连接(websocket), 但是有的时候会出现客户端非常卡, 然后会造成客户丢分, 甚至会造成负分的情况。我就开始找程序的逻辑, 怎么找都找不到问题。\n\n# 解决经历\n\n后来我发现出问题的时间很有规律, 都是发生在数据库自动备份的时间, 那么其实找到原因, 解决办法就有了, 直接取消自动备份, 完事!\n","source":"_posts/sentiment/a-fucking-difficult-problem.md","raw":"---\ntitle: 一个非常操蛋的难题\ndate: 2019-12-07 17:36:15\ncategories:\n- 感悟\ntags:\n- 随笔\n- 经历\n---\n\n# 问题描述\n\n前段时间, 工作方面遇到了一些问题, 具体情况是这样的:\n\n前端和后端建立长连接(websocket), 但是有的时候会出现客户端非常卡, 然后会造成客户丢分, 甚至会造成负分的情况。我就开始找程序的逻辑, 怎么找都找不到问题。\n\n# 解决经历\n\n后来我发现出问题的时间很有规律, 都是发生在数据库自动备份的时间, 那么其实找到原因, 解决办法就有了, 直接取消自动备份, 完事!\n","slug":"sentiment/a-fucking-difficult-problem","published":1,"updated":"2022-10-07T12:55:46.073Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8yleji700063vsbadgs888z","content":"<h1 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h1><p>前段时间, 工作方面遇到了一些问题, 具体情况是这样的:</p>\n<p>前端和后端建立长连接(websocket), 但是有的时候会出现客户端非常卡, 然后会造成客户丢分, 甚至会造成负分的情况。我就开始找程序的逻辑, 怎么找都找不到问题。</p>\n<h1 id=\"解决经历\"><a href=\"#解决经历\" class=\"headerlink\" title=\"解决经历\"></a>解决经历</h1><p>后来我发现出问题的时间很有规律, 都是发生在数据库自动备份的时间, 那么其实找到原因, 解决办法就有了, 直接取消自动备份, 完事!</p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"","more":"<h1 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h1><p>前段时间, 工作方面遇到了一些问题, 具体情况是这样的:</p>\n<p>前端和后端建立长连接(websocket), 但是有的时候会出现客户端非常卡, 然后会造成客户丢分, 甚至会造成负分的情况。我就开始找程序的逻辑, 怎么找都找不到问题。</p>\n<h1 id=\"解决经历\"><a href=\"#解决经历\" class=\"headerlink\" title=\"解决经历\"></a>解决经历</h1><p>后来我发现出问题的时间很有规律, 都是发生在数据库自动备份的时间, 那么其实找到原因, 解决办法就有了, 直接取消自动备份, 完事!</p>\n"},{"title":"听《左耳听风》专栏第十九章产生的一些启发和思考","date":"2019-02-16T03:55:54.000Z","_content":"# 前言\n\n今天听了`左耳朵耗子`大神的专栏, 主题是《我们应该能够识别的表象和本质》, 深受启发, 固有此文。\n<!--more-->\n\n# 关于兴趣的表象和本质\n\n兴趣从来都不是可以长久坚持做一件事情的原因, 它可以帮助你开始一件事, 但真正能让你坚持的, 是在做这件事情的过程中产生的正反馈, 通俗一点来讲就是成就感。\n\n在这里, 左老师举了一个例子, 我觉得非常恰当。如果家里有一个两三岁的孩子, 父母买了一桶积木, 孩子开始会对这桶积木非常感兴趣, 但是时间一长, 他只是将积木胡乱的堆放, 很快就会失去兴趣。但是如果这时, 父母将积木搭成一幢城堡(第一个正反馈), 孩子就又会重新对积木产生兴趣, 然后父母积极配合, 最后和孩子一起搭成一幢城堡(不断地正反馈)。所以做一件事, 起因是因为你的兴趣, 持续则是这件事给你带来的成就感。\n\n# 关于技术和价值\n\n一项技术的技术含量并不能决定这项技术的价值, 价值取决于这项技术的实用性和易用性和它的使用场景, 这项技术的实用性越强, 使用场景越广, 则它的价值越大。\n\n嗯, 听了这节课对我帮助很大, 希望可以有更多类似的总结和收获。\n","source":"_posts/sentiment/about-appearance-and-nature.md","raw":"---\ntitle: 听《左耳听风》专栏第十九章产生的一些启发和思考\ndate: 2019-02-16 11:55:54\ncategories:\n- 感悟\ntags:\n- 想法\n- 启发\n---\n# 前言\n\n今天听了`左耳朵耗子`大神的专栏, 主题是《我们应该能够识别的表象和本质》, 深受启发, 固有此文。\n<!--more-->\n\n# 关于兴趣的表象和本质\n\n兴趣从来都不是可以长久坚持做一件事情的原因, 它可以帮助你开始一件事, 但真正能让你坚持的, 是在做这件事情的过程中产生的正反馈, 通俗一点来讲就是成就感。\n\n在这里, 左老师举了一个例子, 我觉得非常恰当。如果家里有一个两三岁的孩子, 父母买了一桶积木, 孩子开始会对这桶积木非常感兴趣, 但是时间一长, 他只是将积木胡乱的堆放, 很快就会失去兴趣。但是如果这时, 父母将积木搭成一幢城堡(第一个正反馈), 孩子就又会重新对积木产生兴趣, 然后父母积极配合, 最后和孩子一起搭成一幢城堡(不断地正反馈)。所以做一件事, 起因是因为你的兴趣, 持续则是这件事给你带来的成就感。\n\n# 关于技术和价值\n\n一项技术的技术含量并不能决定这项技术的价值, 价值取决于这项技术的实用性和易用性和它的使用场景, 这项技术的实用性越强, 使用场景越广, 则它的价值越大。\n\n嗯, 听了这节课对我帮助很大, 希望可以有更多类似的总结和收获。\n","slug":"sentiment/about-appearance-and-nature","published":1,"updated":"2022-10-07T12:55:17.601Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejia00073vsbg3x9hn1p","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>今天听了<code>左耳朵耗子</code>大神的专栏, 主题是《我们应该能够识别的表象和本质》, 深受启发, 固有此文。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"关于兴趣的表象和本质\"><a href=\"#关于兴趣的表象和本质\" class=\"headerlink\" title=\"关于兴趣的表象和本质\"></a>关于兴趣的表象和本质</h1><p>兴趣从来都不是可以长久坚持做一件事情的原因, 它可以帮助你开始一件事, 但真正能让你坚持的, 是在做这件事情的过程中产生的正反馈, 通俗一点来讲就是成就感。</p>\n<p>在这里, 左老师举了一个例子, 我觉得非常恰当。如果家里有一个两三岁的孩子, 父母买了一桶积木, 孩子开始会对这桶积木非常感兴趣, 但是时间一长, 他只是将积木胡乱的堆放, 很快就会失去兴趣。但是如果这时, 父母将积木搭成一幢城堡(第一个正反馈), 孩子就又会重新对积木产生兴趣, 然后父母积极配合, 最后和孩子一起搭成一幢城堡(不断地正反馈)。所以做一件事, 起因是因为你的兴趣, 持续则是这件事给你带来的成就感。</p>\n<h1 id=\"关于技术和价值\"><a href=\"#关于技术和价值\" class=\"headerlink\" title=\"关于技术和价值\"></a>关于技术和价值</h1><p>一项技术的技术含量并不能决定这项技术的价值, 价值取决于这项技术的实用性和易用性和它的使用场景, 这项技术的实用性越强, 使用场景越广, 则它的价值越大。</p>\n<p>嗯, 听了这节课对我帮助很大, 希望可以有更多类似的总结和收获。</p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>今天听了<code>左耳朵耗子</code>大神的专栏, 主题是《我们应该能够识别的表象和本质》, 深受启发, 固有此文。</p>","more":"<h1 id=\"关于兴趣的表象和本质\"><a href=\"#关于兴趣的表象和本质\" class=\"headerlink\" title=\"关于兴趣的表象和本质\"></a>关于兴趣的表象和本质</h1><p>兴趣从来都不是可以长久坚持做一件事情的原因, 它可以帮助你开始一件事, 但真正能让你坚持的, 是在做这件事情的过程中产生的正反馈, 通俗一点来讲就是成就感。</p>\n<p>在这里, 左老师举了一个例子, 我觉得非常恰当。如果家里有一个两三岁的孩子, 父母买了一桶积木, 孩子开始会对这桶积木非常感兴趣, 但是时间一长, 他只是将积木胡乱的堆放, 很快就会失去兴趣。但是如果这时, 父母将积木搭成一幢城堡(第一个正反馈), 孩子就又会重新对积木产生兴趣, 然后父母积极配合, 最后和孩子一起搭成一幢城堡(不断地正反馈)。所以做一件事, 起因是因为你的兴趣, 持续则是这件事给你带来的成就感。</p>\n<h1 id=\"关于技术和价值\"><a href=\"#关于技术和价值\" class=\"headerlink\" title=\"关于技术和价值\"></a>关于技术和价值</h1><p>一项技术的技术含量并不能决定这项技术的价值, 价值取决于这项技术的实用性和易用性和它的使用场景, 这项技术的实用性越强, 使用场景越广, 则它的价值越大。</p>\n<p>嗯, 听了这节课对我帮助很大, 希望可以有更多类似的总结和收获。</p>"},{"title":"16位cpu标准寄存器说明","date":"2020-08-13T04:43:49.000Z","_content":"\n# 16位cpu标准寄存器说明\n\n数据寄存器:\nax, bx, cx, dx\n由于之前的cpu为8位, 所以为了兼容以前的8位程序, 在8086cpu中, 每一个数据寄存器都能当作两个单独的8位寄存器使用。\n\n段寄存器:\ncs, ds, ss, es\n\ncs: 代码段寄存器 ss: 堆栈段寄存器 ds: 数据段寄存器\n\n不能直接将常量通过指令存放进ds中, 只能先将常量存放到数据寄存器中, 然后将数据寄存器中的值存放到数据段寄存器中。\n","source":"_posts/back_skill_experience/assembly/assembly-register.md","raw":"---\ntitle: 16位cpu标准寄存器说明\ndate: 2020-08-13 12:43:49\ncategories:\n- 后端技巧/经验\n- 汇编\n- 8086\ntags:\n- 汇编\n---\n\n# 16位cpu标准寄存器说明\n\n数据寄存器:\nax, bx, cx, dx\n由于之前的cpu为8位, 所以为了兼容以前的8位程序, 在8086cpu中, 每一个数据寄存器都能当作两个单独的8位寄存器使用。\n\n段寄存器:\ncs, ds, ss, es\n\ncs: 代码段寄存器 ss: 堆栈段寄存器 ds: 数据段寄存器\n\n不能直接将常量通过指令存放进ds中, 只能先将常量存放到数据寄存器中, 然后将数据寄存器中的值存放到数据段寄存器中。\n","slug":"back_skill_experience/assembly/assembly-register","published":1,"updated":"2022-10-07T13:18:46.033Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejig000a3vsbeervht6a","content":"<h1 id=\"16位cpu标准寄存器说明\"><a href=\"#16位cpu标准寄存器说明\" class=\"headerlink\" title=\"16位cpu标准寄存器说明\"></a>16位cpu标准寄存器说明</h1><p>数据寄存器:<br>ax, bx, cx, dx<br>由于之前的cpu为8位, 所以为了兼容以前的8位程序, 在8086cpu中, 每一个数据寄存器都能当作两个单独的8位寄存器使用。</p>\n<p>段寄存器:<br>cs, ds, ss, es</p>\n<p>cs: 代码段寄存器 ss: 堆栈段寄存器 ds: 数据段寄存器</p>\n<p>不能直接将常量通过指令存放进ds中, 只能先将常量存放到数据寄存器中, 然后将数据寄存器中的值存放到数据段寄存器中。</p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"","more":"<h1 id=\"16位cpu标准寄存器说明\"><a href=\"#16位cpu标准寄存器说明\" class=\"headerlink\" title=\"16位cpu标准寄存器说明\"></a>16位cpu标准寄存器说明</h1><p>数据寄存器:<br>ax, bx, cx, dx<br>由于之前的cpu为8位, 所以为了兼容以前的8位程序, 在8086cpu中, 每一个数据寄存器都能当作两个单独的8位寄存器使用。</p>\n<p>段寄存器:<br>cs, ds, ss, es</p>\n<p>cs: 代码段寄存器 ss: 堆栈段寄存器 ds: 数据段寄存器</p>\n<p>不能直接将常量通过指令存放进ds中, 只能先将常量存放到数据寄存器中, 然后将数据寄存器中的值存放到数据段寄存器中。</p>\n"},{"title":"js和java自带sha密码加密","date":"2019-07-24T08:54:24.000Z","_content":"\n# 前言\n\n用到了对数据库密码进行一个简单的加密的功能, 顺便总结一下。\n<!--more-->\n\n# js实现SHA加密\n\n[Google的加密库](http://blog.kwin.wang/downloads/CryptoJS-v3.1.2.zip)包含了很多常用的加密方式, 包括AES、DES、SHA-1、SHA-2、SHA256、MD5等。\n\n* SHA-256\n\n```js\n<script src=\"components/core.js\"></script>\n<script src=\"rollups/sha256.js\"></script>\n\nvar waitSignData = '123'\nvar signData = CryptoJS.SHA256(waitSignData).toString();\n\nconsole.log(signData)\n```\n\n# Java实现加密\n\n```java\nimport javax.xml.bind.annotation.adapters.HexBinaryAdapter;\nimport java.security.MessageDigest;\n\npublic static String encodeSHA256(byte[] data) throws Exception {\n    // 初始化MessageDigest\n    MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n    // 执行摘要方法\n    byte[] digest = md.digest(data);\n    return new HexBinaryAdapter().marshal(digest);\n}\n\n/**\n * 将原数据和加密后的数据进行比较\n * @param passwd 原数据\n * @param encode 加密后的数据\n * @return 比较结果\n */\npublic static boolean validatePasswd(String data, String encodeData) {\n    return MessageDigest.isEqual(data.getBytes(), encodeData.getBytes());\n}\n```\n","source":"_posts/back_skill_experience/java/sha256-java-js.md","raw":"---\ntitle: js和java自带sha密码加密\ndate: 2019-07-24 16:54:24\ncategories:\n- 后端技巧/经验\n- java\ntags:\n- 加密\n---\n\n# 前言\n\n用到了对数据库密码进行一个简单的加密的功能, 顺便总结一下。\n<!--more-->\n\n# js实现SHA加密\n\n[Google的加密库](http://blog.kwin.wang/downloads/CryptoJS-v3.1.2.zip)包含了很多常用的加密方式, 包括AES、DES、SHA-1、SHA-2、SHA256、MD5等。\n\n* SHA-256\n\n```js\n<script src=\"components/core.js\"></script>\n<script src=\"rollups/sha256.js\"></script>\n\nvar waitSignData = '123'\nvar signData = CryptoJS.SHA256(waitSignData).toString();\n\nconsole.log(signData)\n```\n\n# Java实现加密\n\n```java\nimport javax.xml.bind.annotation.adapters.HexBinaryAdapter;\nimport java.security.MessageDigest;\n\npublic static String encodeSHA256(byte[] data) throws Exception {\n    // 初始化MessageDigest\n    MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n    // 执行摘要方法\n    byte[] digest = md.digest(data);\n    return new HexBinaryAdapter().marshal(digest);\n}\n\n/**\n * 将原数据和加密后的数据进行比较\n * @param passwd 原数据\n * @param encode 加密后的数据\n * @return 比较结果\n */\npublic static boolean validatePasswd(String data, String encodeData) {\n    return MessageDigest.isEqual(data.getBytes(), encodeData.getBytes());\n}\n```\n","slug":"back_skill_experience/java/sha256-java-js","published":1,"updated":"2022-10-07T12:47:00.569Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejil000c3vsb7oblgkau","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>用到了对数据库密码进行一个简单的加密的功能, 顺便总结一下。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"js实现SHA加密\"><a href=\"#js实现SHA加密\" class=\"headerlink\" title=\"js实现SHA加密\"></a>js实现SHA加密</h1><p><a href=\"http://blog.kwin.wang/downloads/CryptoJS-v3.1.2.zip\">Google的加密库</a>包含了很多常用的加密方式, 包括AES、DES、SHA-1、SHA-2、SHA256、MD5等。</p>\n<ul>\n<li>SHA-256</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=<span class=\"string\">&quot;components/core.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;rollups/sha256.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> waitSignData = <span class=\"string\">&#x27;123&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> signData = CryptoJS.SHA256(waitSignData).toString();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(signData)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Java实现加密\"><a href=\"#Java实现加密\" class=\"headerlink\" title=\"Java实现加密\"></a>Java实现加密</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> javax.xml.bind.annotation.adapters.HexBinaryAdapter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.security.MessageDigest;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">encodeSHA256</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] data)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 初始化MessageDigest</span></span><br><span class=\"line\">    MessageDigest md = MessageDigest.getInstance(<span class=\"string\">&quot;SHA-256&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行摘要方法</span></span><br><span class=\"line\">    <span class=\"keyword\">byte</span>[] digest = md.digest(data);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> HexBinaryAdapter().marshal(digest);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 将原数据和加密后的数据进行比较</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> passwd 原数据</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> encode 加密后的数据</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 比较结果</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">validatePasswd</span><span class=\"params\">(String data, String encodeData)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> MessageDigest.isEqual(data.getBytes(), encodeData.getBytes());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>用到了对数据库密码进行一个简单的加密的功能, 顺便总结一下。</p>","more":"<h1 id=\"js实现SHA加密\"><a href=\"#js实现SHA加密\" class=\"headerlink\" title=\"js实现SHA加密\"></a>js实现SHA加密</h1><p><a href=\"http://blog.kwin.wang/downloads/CryptoJS-v3.1.2.zip\">Google的加密库</a>包含了很多常用的加密方式, 包括AES、DES、SHA-1、SHA-2、SHA256、MD5等。</p>\n<ul>\n<li>SHA-256</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=<span class=\"string\">&quot;components/core.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;rollups/sha256.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> waitSignData = <span class=\"string\">&#x27;123&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> signData = CryptoJS.SHA256(waitSignData).toString();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(signData)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Java实现加密\"><a href=\"#Java实现加密\" class=\"headerlink\" title=\"Java实现加密\"></a>Java实现加密</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> javax.xml.bind.annotation.adapters.HexBinaryAdapter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.security.MessageDigest;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">encodeSHA256</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] data)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 初始化MessageDigest</span></span><br><span class=\"line\">    MessageDigest md = MessageDigest.getInstance(<span class=\"string\">&quot;SHA-256&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行摘要方法</span></span><br><span class=\"line\">    <span class=\"keyword\">byte</span>[] digest = md.digest(data);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> HexBinaryAdapter().marshal(digest);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 将原数据和加密后的数据进行比较</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> passwd 原数据</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> encode 加密后的数据</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 比较结果</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">validatePasswd</span><span class=\"params\">(String data, String encodeData)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> MessageDigest.isEqual(data.getBytes(), encodeData.getBytes());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"gitBook入门","date":"2019-03-14T14:19:43.000Z","_content":"\n# 前言\n\n相见恨晚啊! 现在不管是写文档还是做笔记, markdown一直是我的心头好。但是在遇到一些复杂的场景的时候, markdown就无能为力了。比如如果你想在你的博客中放入一个视频, 你就不知道该如何是好, 而这个时候, 我知道了AsciiDoc, 这个标记语言兼容markdown的语法, 同时支持更多的特性, 和Gitbook搭配起来真的是天衣无缝。\nGitbook可以通过markdown和asciidoc两种格式来生成精美的电子书工具, 真的是写文档的利器, 那么我们先来简单的认识一下Gitbook。\n<!--more-->\n# 安装\n\n安装的过程非常简单, 但是需要用到`Node.js`, 这里就不多介绍了, 感兴趣的同学可以自行搜索。\n\n那么有了Node环境之后, 我们可以直接使用\n\n```shell\n# 全局安装\nnpm install -g gitbook-cli\n# 或者局部安装\nnpm install -save gitbook-cli\n```\n\n安装好之后, 可以使用`gitbook serve` 命令来预览生成的文档, 当然如果是局部安装的话, 需要在命令前加上`node_modules/.bin/` 前缀。\n\n其他的命令可通过 `gitbook help` 来查看。\n\n另外, 还需要安装 `calibre`, 安装命令是:\n\n```shell\nsudo -v && wget -nv -O- https://download.calibre-ebook.com/linux-installer.sh | sudo sh /dev/stdin\n```\n\n# asciidoc语法\n\n详细的语法可以参考[官网](https://asciidoctor.org/docs/asciidoc-syntax-quick-reference/), 如果掌握了markdown的话, 掌握这个也很快。\n\n# 总结\n\n简单的总结了一下如何搭建gitbook环境, 也介绍了asciidoc这个标记语言, 工欲善其事必先利其器, 嗯, 希望以后可以使用它制作出精美的电子书。`\n","source":"_posts/blog_skill_experience/gitbook/gitbook-first-step.md","raw":"---\ntitle: gitBook入门\ndate: 2019-03-14 22:19:43\ncategories:\n- 博客技巧/经验\n- GitBook\n- AsciiDoc\ntags:\n- GitBook\n- AsciiDoc\n---\n\n# 前言\n\n相见恨晚啊! 现在不管是写文档还是做笔记, markdown一直是我的心头好。但是在遇到一些复杂的场景的时候, markdown就无能为力了。比如如果你想在你的博客中放入一个视频, 你就不知道该如何是好, 而这个时候, 我知道了AsciiDoc, 这个标记语言兼容markdown的语法, 同时支持更多的特性, 和Gitbook搭配起来真的是天衣无缝。\nGitbook可以通过markdown和asciidoc两种格式来生成精美的电子书工具, 真的是写文档的利器, 那么我们先来简单的认识一下Gitbook。\n<!--more-->\n# 安装\n\n安装的过程非常简单, 但是需要用到`Node.js`, 这里就不多介绍了, 感兴趣的同学可以自行搜索。\n\n那么有了Node环境之后, 我们可以直接使用\n\n```shell\n# 全局安装\nnpm install -g gitbook-cli\n# 或者局部安装\nnpm install -save gitbook-cli\n```\n\n安装好之后, 可以使用`gitbook serve` 命令来预览生成的文档, 当然如果是局部安装的话, 需要在命令前加上`node_modules/.bin/` 前缀。\n\n其他的命令可通过 `gitbook help` 来查看。\n\n另外, 还需要安装 `calibre`, 安装命令是:\n\n```shell\nsudo -v && wget -nv -O- https://download.calibre-ebook.com/linux-installer.sh | sudo sh /dev/stdin\n```\n\n# asciidoc语法\n\n详细的语法可以参考[官网](https://asciidoctor.org/docs/asciidoc-syntax-quick-reference/), 如果掌握了markdown的话, 掌握这个也很快。\n\n# 总结\n\n简单的总结了一下如何搭建gitbook环境, 也介绍了asciidoc这个标记语言, 工欲善其事必先利其器, 嗯, 希望以后可以使用它制作出精美的电子书。`\n","slug":"blog_skill_experience/gitbook/gitbook-first-step","published":1,"updated":"2022-10-02T16:36:34.512Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejip000e3vsb2rnqa7n3","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>相见恨晚啊! 现在不管是写文档还是做笔记, markdown一直是我的心头好。但是在遇到一些复杂的场景的时候, markdown就无能为力了。比如如果你想在你的博客中放入一个视频, 你就不知道该如何是好, 而这个时候, 我知道了AsciiDoc, 这个标记语言兼容markdown的语法, 同时支持更多的特性, 和Gitbook搭配起来真的是天衣无缝。<br>Gitbook可以通过markdown和asciidoc两种格式来生成精美的电子书工具, 真的是写文档的利器, 那么我们先来简单的认识一下Gitbook。</p>\n<span id=\"more\"></span>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><p>安装的过程非常简单, 但是需要用到<code>Node.js</code>, 这里就不多介绍了, 感兴趣的同学可以自行搜索。</p>\n<p>那么有了Node环境之后, 我们可以直接使用</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 全局安装</span></span><br><span class=\"line\">npm install -g gitbook-cli</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 或者局部安装</span></span><br><span class=\"line\">npm install -save gitbook-cli</span><br></pre></td></tr></table></figure>\n\n<p>安装好之后, 可以使用<code>gitbook serve</code> 命令来预览生成的文档, 当然如果是局部安装的话, 需要在命令前加上<code>node_modules/.bin/</code> 前缀。</p>\n<p>其他的命令可通过 <code>gitbook help</code> 来查看。</p>\n<p>另外, 还需要安装 <code>calibre</code>, 安装命令是:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo -v &amp;&amp; wget -nv -O- https://download.calibre-ebook.com/linux-installer.sh | sudo sh /dev/stdin</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"asciidoc语法\"><a href=\"#asciidoc语法\" class=\"headerlink\" title=\"asciidoc语法\"></a>asciidoc语法</h1><p>详细的语法可以参考<a href=\"https://asciidoctor.org/docs/asciidoc-syntax-quick-reference/\">官网</a>, 如果掌握了markdown的话, 掌握这个也很快。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>简单的总结了一下如何搭建gitbook环境, 也介绍了asciidoc这个标记语言, 工欲善其事必先利其器, 嗯, 希望以后可以使用它制作出精美的电子书。&#96;</p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>相见恨晚啊! 现在不管是写文档还是做笔记, markdown一直是我的心头好。但是在遇到一些复杂的场景的时候, markdown就无能为力了。比如如果你想在你的博客中放入一个视频, 你就不知道该如何是好, 而这个时候, 我知道了AsciiDoc, 这个标记语言兼容markdown的语法, 同时支持更多的特性, 和Gitbook搭配起来真的是天衣无缝。<br>Gitbook可以通过markdown和asciidoc两种格式来生成精美的电子书工具, 真的是写文档的利器, 那么我们先来简单的认识一下Gitbook。</p>","more":"<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><p>安装的过程非常简单, 但是需要用到<code>Node.js</code>, 这里就不多介绍了, 感兴趣的同学可以自行搜索。</p>\n<p>那么有了Node环境之后, 我们可以直接使用</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 全局安装</span></span><br><span class=\"line\">npm install -g gitbook-cli</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 或者局部安装</span></span><br><span class=\"line\">npm install -save gitbook-cli</span><br></pre></td></tr></table></figure>\n\n<p>安装好之后, 可以使用<code>gitbook serve</code> 命令来预览生成的文档, 当然如果是局部安装的话, 需要在命令前加上<code>node_modules/.bin/</code> 前缀。</p>\n<p>其他的命令可通过 <code>gitbook help</code> 来查看。</p>\n<p>另外, 还需要安装 <code>calibre</code>, 安装命令是:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo -v &amp;&amp; wget -nv -O- https://download.calibre-ebook.com/linux-installer.sh | sudo sh /dev/stdin</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"asciidoc语法\"><a href=\"#asciidoc语法\" class=\"headerlink\" title=\"asciidoc语法\"></a>asciidoc语法</h1><p>详细的语法可以参考<a href=\"https://asciidoctor.org/docs/asciidoc-syntax-quick-reference/\">官网</a>, 如果掌握了markdown的话, 掌握这个也很快。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>简单的总结了一下如何搭建gitbook环境, 也介绍了asciidoc这个标记语言, 工欲善其事必先利其器, 嗯, 希望以后可以使用它制作出精美的电子书。&#96;</p>"},{"title":"hexo博客使用git同步遇到的一些问题[linux版]","date":"2019-02-24T14:17:34.000Z","_content":"\n# 前言\n\n最早写博客的时候, 使用的是markdown, 工具使用的是[typora](https:://www.typora.io)。因为本人没有苹果电脑, 这个工具在windows上还没有正式版, 在使用的时候遇到了各种各样的问题, 所以后来转战[visual studio code](https://code.visualstudio.com)。\n\n直到后来, 我通过一本书(这本书叫The Linux Command Line, 这里有它的[中文版](bill66.github.io/TLCL/index.html), 我还做了[读书笔记](https://icecreamzhao.github.io/linux/The_Linux_Command_Line/The-Linux-Command-Line-read-note-1Day.html) )接触了Linux, 知道了vim, 就开始使用vim来写博客。\n\n一开始使用的是vim的windows版本, 这里是[我在windows上使用git同步博客遇到的一些问题](/hexo/hexo-git-sync-windows.html), 但是因为vim的windows版本是运行在windows的命令行中的, 而windows命令行在键入中文的时候删除拼音总是删不干净, 会留下第一个字的第一个拼音, 所以索性直接在Linux中使用原汁原味的vim来写博客, 这篇博客就是在Linux下使用vim写成的。\n<!--more-->\n# 步骤\n\n首先是环境的搭建。\n\n不管在windows中还是Linux中搭建hexo博客, 步骤都是一样的。\n\n1. 下载[git](https://git-scm.com/download/linux)\n2. 下载[node](https://github.com/nodejs/help/wiki/Installation)\n3. 如果hexo博客使用的主题是yilia, 则还需要[python](https://www.python.org/downloads/source/)环境\n4. 配置环境变量\n5. 生成git密钥\n6. 在你的github账户中加入你的密钥\n7. 将博客源代码下载下来\n8. 在博客根目录下执行 `npm install`\n9. 如果使用的主题是yilia, 需要在主题根目录下执行 `npm install`\n10. 启动博客\n\n# 遇到的问题\n\n* 配置python环境变量\n\n> 这里我就只说一下对当前用户有效的办法, 全局设置的话其实一样, 只是修改的文件不同, 详情[请看这里](/operation_system/linux/linux-path-variable.html)。 \n在 `home` 目录下, 在.bashrc文件中添加:\n\n```shell\nexport PATH=$PATH:/usr/local/bin/python\n```\n\n> 注意, 这里 `/usr/local/bin/python` 是Python的安装目录。\n\n* 配置hexo环境变量\n\n> 同样的, 修改 `home` 目录下的.bashrc文件。\n\n```shell\n# hexo path variable\nHEXO=\"你的博客源码的根目录\"/node_modules/hexo/node_modules/.bin\nexport PATH=$HEXO:$PATH\n\n# 加入一些命令别名， 可以简化输入, 注意, 这里和windows执行hexo命令有一点区别, 在Linux中需要使用sh命令来执行\nalias hexo='sh $HEXO/hexo'\nalias startMyBlog='hexo clean; hexo g; hexo s'\n```\n\n* node-sass的问题\n\n> node-sass这个插件很不乖, 我在windows上同步博客的时候, 它就总是出问题, 导致我用不了yilia主题。\n这次也是, 总是版本的问题, 好在这次的错误提示给出了解决方案, 就是执行\n\n```shell\nnpm rebuild node-sass\n```\n\n这个方法, 他就会根据Linux环境下载合适的版本。\n\n**注意! 我在node的新版本上使用这个命令会报错! 所以, 没事别瞎升级node版本...**\n\n* System limit for number of file watchers reached 错误\n\n遇到这个错误, 是因为系统对文件监控的数量达到默认的限制了, 可以修改系统文件, 增加对文件监控的数量。\n\nCentOS的解决方案:\n在CentOS 7之前, 修改系统内核参数, 修改的是 `/etc/sysctl.conf` 文件, 而7之后, 则是修改 `/usr/lib/sysctl.d/00-system.conf`\n\ndebian的解决方案:\n修改 `/etc/sysctl.conf` 文件。\n\n```shell\nfs.inotify.max_user_watches=524288\n```\n\n修改好之后重启系统, 就可以生效了。\n\n* \"use strict: not found\" 的问题\n\n这个问题我只在debian系统下遇到了, 由于我之前调用hexo命令的时候使用的是 `sh hexo`, 使用的是shell的方式调用的, 但是不知道debian和centos哪里不一样, debian可以直接使用hexo, 所以在调用的时候就可以直接去掉sh。\n\n# 总结\n\n嗯, 我在将hexo博客转移到Linux系统中暂时就遇到了这些问题, 以后可能还会遇到其他的问题, 我也会随时记录下来。\n","source":"_posts/blog_skill_experience/hexo/hexo-git-sync-linux.md","raw":"---\ntitle: 'hexo博客使用git同步遇到的一些问题[linux版]'\ndate: 2019-02-24 22:17:34\ncategories:\n- 博客技巧/经验\n- hexo\ntags:\n- hexo\n---\n\n# 前言\n\n最早写博客的时候, 使用的是markdown, 工具使用的是[typora](https:://www.typora.io)。因为本人没有苹果电脑, 这个工具在windows上还没有正式版, 在使用的时候遇到了各种各样的问题, 所以后来转战[visual studio code](https://code.visualstudio.com)。\n\n直到后来, 我通过一本书(这本书叫The Linux Command Line, 这里有它的[中文版](bill66.github.io/TLCL/index.html), 我还做了[读书笔记](https://icecreamzhao.github.io/linux/The_Linux_Command_Line/The-Linux-Command-Line-read-note-1Day.html) )接触了Linux, 知道了vim, 就开始使用vim来写博客。\n\n一开始使用的是vim的windows版本, 这里是[我在windows上使用git同步博客遇到的一些问题](/hexo/hexo-git-sync-windows.html), 但是因为vim的windows版本是运行在windows的命令行中的, 而windows命令行在键入中文的时候删除拼音总是删不干净, 会留下第一个字的第一个拼音, 所以索性直接在Linux中使用原汁原味的vim来写博客, 这篇博客就是在Linux下使用vim写成的。\n<!--more-->\n# 步骤\n\n首先是环境的搭建。\n\n不管在windows中还是Linux中搭建hexo博客, 步骤都是一样的。\n\n1. 下载[git](https://git-scm.com/download/linux)\n2. 下载[node](https://github.com/nodejs/help/wiki/Installation)\n3. 如果hexo博客使用的主题是yilia, 则还需要[python](https://www.python.org/downloads/source/)环境\n4. 配置环境变量\n5. 生成git密钥\n6. 在你的github账户中加入你的密钥\n7. 将博客源代码下载下来\n8. 在博客根目录下执行 `npm install`\n9. 如果使用的主题是yilia, 需要在主题根目录下执行 `npm install`\n10. 启动博客\n\n# 遇到的问题\n\n* 配置python环境变量\n\n> 这里我就只说一下对当前用户有效的办法, 全局设置的话其实一样, 只是修改的文件不同, 详情[请看这里](/operation_system/linux/linux-path-variable.html)。 \n在 `home` 目录下, 在.bashrc文件中添加:\n\n```shell\nexport PATH=$PATH:/usr/local/bin/python\n```\n\n> 注意, 这里 `/usr/local/bin/python` 是Python的安装目录。\n\n* 配置hexo环境变量\n\n> 同样的, 修改 `home` 目录下的.bashrc文件。\n\n```shell\n# hexo path variable\nHEXO=\"你的博客源码的根目录\"/node_modules/hexo/node_modules/.bin\nexport PATH=$HEXO:$PATH\n\n# 加入一些命令别名， 可以简化输入, 注意, 这里和windows执行hexo命令有一点区别, 在Linux中需要使用sh命令来执行\nalias hexo='sh $HEXO/hexo'\nalias startMyBlog='hexo clean; hexo g; hexo s'\n```\n\n* node-sass的问题\n\n> node-sass这个插件很不乖, 我在windows上同步博客的时候, 它就总是出问题, 导致我用不了yilia主题。\n这次也是, 总是版本的问题, 好在这次的错误提示给出了解决方案, 就是执行\n\n```shell\nnpm rebuild node-sass\n```\n\n这个方法, 他就会根据Linux环境下载合适的版本。\n\n**注意! 我在node的新版本上使用这个命令会报错! 所以, 没事别瞎升级node版本...**\n\n* System limit for number of file watchers reached 错误\n\n遇到这个错误, 是因为系统对文件监控的数量达到默认的限制了, 可以修改系统文件, 增加对文件监控的数量。\n\nCentOS的解决方案:\n在CentOS 7之前, 修改系统内核参数, 修改的是 `/etc/sysctl.conf` 文件, 而7之后, 则是修改 `/usr/lib/sysctl.d/00-system.conf`\n\ndebian的解决方案:\n修改 `/etc/sysctl.conf` 文件。\n\n```shell\nfs.inotify.max_user_watches=524288\n```\n\n修改好之后重启系统, 就可以生效了。\n\n* \"use strict: not found\" 的问题\n\n这个问题我只在debian系统下遇到了, 由于我之前调用hexo命令的时候使用的是 `sh hexo`, 使用的是shell的方式调用的, 但是不知道debian和centos哪里不一样, debian可以直接使用hexo, 所以在调用的时候就可以直接去掉sh。\n\n# 总结\n\n嗯, 我在将hexo博客转移到Linux系统中暂时就遇到了这些问题, 以后可能还会遇到其他的问题, 我也会随时记录下来。\n","slug":"blog_skill_experience/hexo/hexo-git-sync-linux","published":1,"updated":"2022-10-02T16:38:35.376Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejiu000h3vsbb2yk6oyo","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最早写博客的时候, 使用的是markdown, 工具使用的是<a href=\"https:://www.typora.io\">typora</a>。因为本人没有苹果电脑, 这个工具在windows上还没有正式版, 在使用的时候遇到了各种各样的问题, 所以后来转战<a href=\"https://code.visualstudio.com/\">visual studio code</a>。</p>\n<p>直到后来, 我通过一本书(这本书叫The Linux Command Line, 这里有它的<a href=\"bill66.github.io/TLCL/index.html\">中文版</a>, 我还做了<a href=\"https://icecreamzhao.github.io/linux/The_Linux_Command_Line/The-Linux-Command-Line-read-note-1Day.html\">读书笔记</a> )接触了Linux, 知道了vim, 就开始使用vim来写博客。</p>\n<p>一开始使用的是vim的windows版本, 这里是<a href=\"/hexo/hexo-git-sync-windows.html\">我在windows上使用git同步博客遇到的一些问题</a>, 但是因为vim的windows版本是运行在windows的命令行中的, 而windows命令行在键入中文的时候删除拼音总是删不干净, 会留下第一个字的第一个拼音, 所以索性直接在Linux中使用原汁原味的vim来写博客, 这篇博客就是在Linux下使用vim写成的。</p>\n<span id=\"more\"></span>\n<h1 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h1><p>首先是环境的搭建。</p>\n<p>不管在windows中还是Linux中搭建hexo博客, 步骤都是一样的。</p>\n<ol>\n<li>下载<a href=\"https://git-scm.com/download/linux\">git</a></li>\n<li>下载<a href=\"https://github.com/nodejs/help/wiki/Installation\">node</a></li>\n<li>如果hexo博客使用的主题是yilia, 则还需要<a href=\"https://www.python.org/downloads/source/\">python</a>环境</li>\n<li>配置环境变量</li>\n<li>生成git密钥</li>\n<li>在你的github账户中加入你的密钥</li>\n<li>将博客源代码下载下来</li>\n<li>在博客根目录下执行 <code>npm install</code></li>\n<li>如果使用的主题是yilia, 需要在主题根目录下执行 <code>npm install</code></li>\n<li>启动博客</li>\n</ol>\n<h1 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h1><ul>\n<li>配置python环境变量</li>\n</ul>\n<blockquote>\n<p>这里我就只说一下对当前用户有效的办法, 全局设置的话其实一样, 只是修改的文件不同, 详情<a href=\"/operation_system/linux/linux-path-variable.html\">请看这里</a>。<br>在 <code>home</code> 目录下, 在.bashrc文件中添加:</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export PATH=$PATH:/usr/local/bin/python</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意, 这里 <code>/usr/local/bin/python</code> 是Python的安装目录。</p>\n</blockquote>\n<ul>\n<li>配置hexo环境变量</li>\n</ul>\n<blockquote>\n<p>同样的, 修改 <code>home</code> 目录下的.bashrc文件。</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> hexo path variable</span></span><br><span class=\"line\">HEXO=&quot;你的博客源码的根目录&quot;/node_modules/hexo/node_modules/.bin</span><br><span class=\"line\">export PATH=$HEXO:$PATH</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 加入一些命令别名， 可以简化输入, 注意, 这里和windows执行hexo命令有一点区别, 在Linux中需要使用sh命令来执行</span></span><br><span class=\"line\">alias hexo=&#x27;sh $HEXO/hexo&#x27;</span><br><span class=\"line\">alias startMyBlog=&#x27;hexo clean; hexo g; hexo s&#x27;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>node-sass的问题</li>\n</ul>\n<blockquote>\n<p>node-sass这个插件很不乖, 我在windows上同步博客的时候, 它就总是出问题, 导致我用不了yilia主题。<br>这次也是, 总是版本的问题, 好在这次的错误提示给出了解决方案, 就是执行</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm rebuild node-sass</span><br></pre></td></tr></table></figure>\n\n<p>这个方法, 他就会根据Linux环境下载合适的版本。</p>\n<p><strong>注意! 我在node的新版本上使用这个命令会报错! 所以, 没事别瞎升级node版本…</strong></p>\n<ul>\n<li>System limit for number of file watchers reached 错误</li>\n</ul>\n<p>遇到这个错误, 是因为系统对文件监控的数量达到默认的限制了, 可以修改系统文件, 增加对文件监控的数量。</p>\n<p>CentOS的解决方案:<br>在CentOS 7之前, 修改系统内核参数, 修改的是 <code>/etc/sysctl.conf</code> 文件, 而7之后, 则是修改 <code>/usr/lib/sysctl.d/00-system.conf</code></p>\n<p>debian的解决方案:<br>修改 <code>/etc/sysctl.conf</code> 文件。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fs.inotify.max_user_watches=524288</span><br></pre></td></tr></table></figure>\n\n<p>修改好之后重启系统, 就可以生效了。</p>\n<ul>\n<li>“use strict: not found” 的问题</li>\n</ul>\n<p>这个问题我只在debian系统下遇到了, 由于我之前调用hexo命令的时候使用的是 <code>sh hexo</code>, 使用的是shell的方式调用的, 但是不知道debian和centos哪里不一样, debian可以直接使用hexo, 所以在调用的时候就可以直接去掉sh。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>嗯, 我在将hexo博客转移到Linux系统中暂时就遇到了这些问题, 以后可能还会遇到其他的问题, 我也会随时记录下来。</p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最早写博客的时候, 使用的是markdown, 工具使用的是<a href=\"https:://www.typora.io\">typora</a>。因为本人没有苹果电脑, 这个工具在windows上还没有正式版, 在使用的时候遇到了各种各样的问题, 所以后来转战<a href=\"https://code.visualstudio.com/\">visual studio code</a>。</p>\n<p>直到后来, 我通过一本书(这本书叫The Linux Command Line, 这里有它的<a href=\"bill66.github.io/TLCL/index.html\">中文版</a>, 我还做了<a href=\"https://icecreamzhao.github.io/linux/The_Linux_Command_Line/The-Linux-Command-Line-read-note-1Day.html\">读书笔记</a> )接触了Linux, 知道了vim, 就开始使用vim来写博客。</p>\n<p>一开始使用的是vim的windows版本, 这里是<a href=\"/hexo/hexo-git-sync-windows.html\">我在windows上使用git同步博客遇到的一些问题</a>, 但是因为vim的windows版本是运行在windows的命令行中的, 而windows命令行在键入中文的时候删除拼音总是删不干净, 会留下第一个字的第一个拼音, 所以索性直接在Linux中使用原汁原味的vim来写博客, 这篇博客就是在Linux下使用vim写成的。</p>","more":"<h1 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h1><p>首先是环境的搭建。</p>\n<p>不管在windows中还是Linux中搭建hexo博客, 步骤都是一样的。</p>\n<ol>\n<li>下载<a href=\"https://git-scm.com/download/linux\">git</a></li>\n<li>下载<a href=\"https://github.com/nodejs/help/wiki/Installation\">node</a></li>\n<li>如果hexo博客使用的主题是yilia, 则还需要<a href=\"https://www.python.org/downloads/source/\">python</a>环境</li>\n<li>配置环境变量</li>\n<li>生成git密钥</li>\n<li>在你的github账户中加入你的密钥</li>\n<li>将博客源代码下载下来</li>\n<li>在博客根目录下执行 <code>npm install</code></li>\n<li>如果使用的主题是yilia, 需要在主题根目录下执行 <code>npm install</code></li>\n<li>启动博客</li>\n</ol>\n<h1 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h1><ul>\n<li>配置python环境变量</li>\n</ul>\n<blockquote>\n<p>这里我就只说一下对当前用户有效的办法, 全局设置的话其实一样, 只是修改的文件不同, 详情<a href=\"/operation_system/linux/linux-path-variable.html\">请看这里</a>。<br>在 <code>home</code> 目录下, 在.bashrc文件中添加:</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export PATH=$PATH:/usr/local/bin/python</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意, 这里 <code>/usr/local/bin/python</code> 是Python的安装目录。</p>\n</blockquote>\n<ul>\n<li>配置hexo环境变量</li>\n</ul>\n<blockquote>\n<p>同样的, 修改 <code>home</code> 目录下的.bashrc文件。</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> hexo path variable</span></span><br><span class=\"line\">HEXO=&quot;你的博客源码的根目录&quot;/node_modules/hexo/node_modules/.bin</span><br><span class=\"line\">export PATH=$HEXO:$PATH</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 加入一些命令别名， 可以简化输入, 注意, 这里和windows执行hexo命令有一点区别, 在Linux中需要使用sh命令来执行</span></span><br><span class=\"line\">alias hexo=&#x27;sh $HEXO/hexo&#x27;</span><br><span class=\"line\">alias startMyBlog=&#x27;hexo clean; hexo g; hexo s&#x27;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>node-sass的问题</li>\n</ul>\n<blockquote>\n<p>node-sass这个插件很不乖, 我在windows上同步博客的时候, 它就总是出问题, 导致我用不了yilia主题。<br>这次也是, 总是版本的问题, 好在这次的错误提示给出了解决方案, 就是执行</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm rebuild node-sass</span><br></pre></td></tr></table></figure>\n\n<p>这个方法, 他就会根据Linux环境下载合适的版本。</p>\n<p><strong>注意! 我在node的新版本上使用这个命令会报错! 所以, 没事别瞎升级node版本…</strong></p>\n<ul>\n<li>System limit for number of file watchers reached 错误</li>\n</ul>\n<p>遇到这个错误, 是因为系统对文件监控的数量达到默认的限制了, 可以修改系统文件, 增加对文件监控的数量。</p>\n<p>CentOS的解决方案:<br>在CentOS 7之前, 修改系统内核参数, 修改的是 <code>/etc/sysctl.conf</code> 文件, 而7之后, 则是修改 <code>/usr/lib/sysctl.d/00-system.conf</code></p>\n<p>debian的解决方案:<br>修改 <code>/etc/sysctl.conf</code> 文件。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fs.inotify.max_user_watches=524288</span><br></pre></td></tr></table></figure>\n\n<p>修改好之后重启系统, 就可以生效了。</p>\n<ul>\n<li>“use strict: not found” 的问题</li>\n</ul>\n<p>这个问题我只在debian系统下遇到了, 由于我之前调用hexo命令的时候使用的是 <code>sh hexo</code>, 使用的是shell的方式调用的, 但是不知道debian和centos哪里不一样, debian可以直接使用hexo, 所以在调用的时候就可以直接去掉sh。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>嗯, 我在将hexo博客转移到Linux系统中暂时就遇到了这些问题, 以后可能还会遇到其他的问题, 我也会随时记录下来。</p>"},{"title":"hexo博客使用git同步遇到的一些问题[windows版]","date":"2019-01-08T13:30:55.000Z","_content":"\n# 前言\n\n最近频繁的在多台电脑上编写我的博客, 这就出现了同步的问题, 一开始是使用坚果云进行同步, 因为我只打算同步博客文件(也就是markdown文件), 但是有的时候我会修改一些博客的样式, 然后就把js和css文件也加入到同步文件之列, 可是使用了一段时间体验并不好, 索性干脆直接放到github上, 在这个过程中也遇到了一些问题, 也就有了今天的博客。\n\n<!--more-->\n\n# 创建一个github项目并上传博客文件\n\n首先在你的github上创建一个项目, 之后将本地的git仓库同步到github的项目上, 在你的博客的根目录下, 创建一个git仓库:\n\n```shell\nyourBlogFloder>git init\n```\n\n接着编辑`.gitignore`文件:\n\n```txt\n.DS_Store\nThumbs.db\n*.log\npublic/\n.deploy*/\n```\n\n其余的都删掉, 因为那些文件需要被同步。然后将文件提交:\n\n```shell\ngit add --all\ngit commit -m \"first commit\"\ngit remote add origin 你的git项目的ssh地址\ngit push -u origin master\n```\n\nOK, 这样你就可以使用`git clone`命令下载你的博客了。\n\n# 需要注意的问题\n\n1. 下载好你的博客之后还是需要`npm install`一下\n2. 下载好并`npm install`之后你可能会遇到识别不了hexo命令的问题, 不要慌, 将博客根目录`/node_modules/hexo/node_modules/.bin`这个目录放到`PATH`环境变量中就没问题了。\n3. 如果你使用的是yilia主题, 那么你首先需要安装[python](https://www.python.org/downloads), 然后编辑yilia主题的根目录下的package.json文件, 将`node-sass`的版本号改为新的版本, 截止到这篇博客为止, 最新的版本号为`4.11.0`\n","source":"_posts/blog_skill_experience/hexo/hexo-git-sync-windows.md","raw":"---\ntitle: hexo博客使用git同步遇到的一些问题[windows版]\ndate: 2019-01-08 21:30:55\ncategories:\n- 博客技巧/经验\n- hexo\ntags:\n- hexo\n---\n\n# 前言\n\n最近频繁的在多台电脑上编写我的博客, 这就出现了同步的问题, 一开始是使用坚果云进行同步, 因为我只打算同步博客文件(也就是markdown文件), 但是有的时候我会修改一些博客的样式, 然后就把js和css文件也加入到同步文件之列, 可是使用了一段时间体验并不好, 索性干脆直接放到github上, 在这个过程中也遇到了一些问题, 也就有了今天的博客。\n\n<!--more-->\n\n# 创建一个github项目并上传博客文件\n\n首先在你的github上创建一个项目, 之后将本地的git仓库同步到github的项目上, 在你的博客的根目录下, 创建一个git仓库:\n\n```shell\nyourBlogFloder>git init\n```\n\n接着编辑`.gitignore`文件:\n\n```txt\n.DS_Store\nThumbs.db\n*.log\npublic/\n.deploy*/\n```\n\n其余的都删掉, 因为那些文件需要被同步。然后将文件提交:\n\n```shell\ngit add --all\ngit commit -m \"first commit\"\ngit remote add origin 你的git项目的ssh地址\ngit push -u origin master\n```\n\nOK, 这样你就可以使用`git clone`命令下载你的博客了。\n\n# 需要注意的问题\n\n1. 下载好你的博客之后还是需要`npm install`一下\n2. 下载好并`npm install`之后你可能会遇到识别不了hexo命令的问题, 不要慌, 将博客根目录`/node_modules/hexo/node_modules/.bin`这个目录放到`PATH`环境变量中就没问题了。\n3. 如果你使用的是yilia主题, 那么你首先需要安装[python](https://www.python.org/downloads), 然后编辑yilia主题的根目录下的package.json文件, 将`node-sass`的版本号改为新的版本, 截止到这篇博客为止, 最新的版本号为`4.11.0`\n","slug":"blog_skill_experience/hexo/hexo-git-sync-windows","published":1,"updated":"2022-10-02T16:38:47.962Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejiz000j3vsb8imofln6","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最近频繁的在多台电脑上编写我的博客, 这就出现了同步的问题, 一开始是使用坚果云进行同步, 因为我只打算同步博客文件(也就是markdown文件), 但是有的时候我会修改一些博客的样式, 然后就把js和css文件也加入到同步文件之列, 可是使用了一段时间体验并不好, 索性干脆直接放到github上, 在这个过程中也遇到了一些问题, 也就有了今天的博客。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"创建一个github项目并上传博客文件\"><a href=\"#创建一个github项目并上传博客文件\" class=\"headerlink\" title=\"创建一个github项目并上传博客文件\"></a>创建一个github项目并上传博客文件</h1><p>首先在你的github上创建一个项目, 之后将本地的git仓库同步到github的项目上, 在你的博客的根目录下, 创建一个git仓库:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">yourBlogFloder&gt;</span><span class=\"bash\">git init</span></span><br></pre></td></tr></table></figure>\n\n<p>接着编辑<code>.gitignore</code>文件:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.DS_Store</span><br><span class=\"line\">Thumbs.db</span><br><span class=\"line\">*.log</span><br><span class=\"line\">public/</span><br><span class=\"line\">.deploy*/</span><br></pre></td></tr></table></figure>\n\n<p>其余的都删掉, 因为那些文件需要被同步。然后将文件提交:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add --all</span><br><span class=\"line\">git commit -m &quot;first commit&quot;</span><br><span class=\"line\">git remote add origin 你的git项目的ssh地址</span><br><span class=\"line\">git push -u origin master</span><br></pre></td></tr></table></figure>\n\n<p>OK, 这样你就可以使用<code>git clone</code>命令下载你的博客了。</p>\n<h1 id=\"需要注意的问题\"><a href=\"#需要注意的问题\" class=\"headerlink\" title=\"需要注意的问题\"></a>需要注意的问题</h1><ol>\n<li>下载好你的博客之后还是需要<code>npm install</code>一下</li>\n<li>下载好并<code>npm install</code>之后你可能会遇到识别不了hexo命令的问题, 不要慌, 将博客根目录<code>/node_modules/hexo/node_modules/.bin</code>这个目录放到<code>PATH</code>环境变量中就没问题了。</li>\n<li>如果你使用的是yilia主题, 那么你首先需要安装<a href=\"https://www.python.org/downloads\">python</a>, 然后编辑yilia主题的根目录下的package.json文件, 将<code>node-sass</code>的版本号改为新的版本, 截止到这篇博客为止, 最新的版本号为<code>4.11.0</code></li>\n</ol>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最近频繁的在多台电脑上编写我的博客, 这就出现了同步的问题, 一开始是使用坚果云进行同步, 因为我只打算同步博客文件(也就是markdown文件), 但是有的时候我会修改一些博客的样式, 然后就把js和css文件也加入到同步文件之列, 可是使用了一段时间体验并不好, 索性干脆直接放到github上, 在这个过程中也遇到了一些问题, 也就有了今天的博客。</p>","more":"<h1 id=\"创建一个github项目并上传博客文件\"><a href=\"#创建一个github项目并上传博客文件\" class=\"headerlink\" title=\"创建一个github项目并上传博客文件\"></a>创建一个github项目并上传博客文件</h1><p>首先在你的github上创建一个项目, 之后将本地的git仓库同步到github的项目上, 在你的博客的根目录下, 创建一个git仓库:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">yourBlogFloder&gt;</span><span class=\"bash\">git init</span></span><br></pre></td></tr></table></figure>\n\n<p>接着编辑<code>.gitignore</code>文件:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.DS_Store</span><br><span class=\"line\">Thumbs.db</span><br><span class=\"line\">*.log</span><br><span class=\"line\">public/</span><br><span class=\"line\">.deploy*/</span><br></pre></td></tr></table></figure>\n\n<p>其余的都删掉, 因为那些文件需要被同步。然后将文件提交:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add --all</span><br><span class=\"line\">git commit -m &quot;first commit&quot;</span><br><span class=\"line\">git remote add origin 你的git项目的ssh地址</span><br><span class=\"line\">git push -u origin master</span><br></pre></td></tr></table></figure>\n\n<p>OK, 这样你就可以使用<code>git clone</code>命令下载你的博客了。</p>\n<h1 id=\"需要注意的问题\"><a href=\"#需要注意的问题\" class=\"headerlink\" title=\"需要注意的问题\"></a>需要注意的问题</h1><ol>\n<li>下载好你的博客之后还是需要<code>npm install</code>一下</li>\n<li>下载好并<code>npm install</code>之后你可能会遇到识别不了hexo命令的问题, 不要慌, 将博客根目录<code>/node_modules/hexo/node_modules/.bin</code>这个目录放到<code>PATH</code>环境变量中就没问题了。</li>\n<li>如果你使用的是yilia主题, 那么你首先需要安装<a href=\"https://www.python.org/downloads\">python</a>, 然后编辑yilia主题的根目录下的package.json文件, 将<code>node-sass</code>的版本号改为新的版本, 截止到这篇博客为止, 最新的版本号为<code>4.11.0</code></li>\n</ol>"},{"title":"hexo-写作","date":"2018-11-16T14:41:55.000Z","_content":"\n# 使用hexo来编写一篇博客的步骤\n\n上一篇博客讲了如何使用GitHub Pages和hexo搭建属于你自己的博客, 那么现在, 我们来看看该怎么写我们的第一篇博客。\n\n<!--more-->\n\n## 让你的博客支持流程图(mermaid)\n\n我们都知道, markdown是支持流程图的, 小子不才, 只知道mermaid, 其他的倒是也知道, 但是了解的不多, hexo本身是不支持mermaid的, 但是上一篇博客也说过, hexo是有很多插件的, [hexo-filter-mermaid-diagrams](https://github.com/webappdevelp/hexo-filter-mermaid-diagrams)就是这么一个东西, 下面我们来讲讲该怎么安装它。\n\n这个插件需要通过[yarn](https://yarn.bootcss.com/)来安装, yarn安装的前提是已经安装了node.js, 所以请注意需要先安装node, 在安装yarn。<br>安装好yarn之后, cd到你的博客文件夹根目录, 执行<br>`yarn add hexo-filter-mermaid-diagrams`<br>这条命令, 之后在你的根目录下找到_config.yml这个文件, 加上这些配置<br>\n\n然后进入`\\themes\\landscape\\layout\\_partial`目录下, 修改footer.ejs文件, 在文件的最后添加:\n\n```js\n<% if (theme.mermaid.enable) { %>\n  <script src='https://unpkg.com/mermaid@<%= theme.mermaid.version %>/dist/mermaid.min.js'></script>\n  <script>\n    if (window.mermaid) {\n      mermaid.initialize({theme: 'forest'});\n    }\n  </script>\n<% } %>\n```\n\n行了, 现在你的博客已经支持流程图了!\n\n<br>\n\n## 创建一个新博文\n\n现在让我们来创建一个博文来试试\n\n1. 创建一个新博客\n\n   命令:\n\n   ```\n   hexo new \"你的博客名字\"\n   ```\n\n   这行命令会在`\\source\\_posts`路径下新建一个.md文件, 你可以直接编辑这个文件, 然后他就可以出现在你的文章中了!\n\n   现在来启动server看看是什么样子\n\n2. 启动server\n\n   ```shell\n   hexo server\n   ```\n\n好了, 搭建博客, 编写博客我们都知道了, 有时间我会去写一写该怎么自定义博客的样式以及一些其他有用的插件的!\n","source":"_posts/blog_skill_experience/hexo/hexo-writing.md","raw":"---\ntitle: hexo-写作\ndate: 2018-11-16 22:41:55\ncategories:\n- 博客技巧/经验\n- hexo\ntags:\n- hexo\n---\n\n# 使用hexo来编写一篇博客的步骤\n\n上一篇博客讲了如何使用GitHub Pages和hexo搭建属于你自己的博客, 那么现在, 我们来看看该怎么写我们的第一篇博客。\n\n<!--more-->\n\n## 让你的博客支持流程图(mermaid)\n\n我们都知道, markdown是支持流程图的, 小子不才, 只知道mermaid, 其他的倒是也知道, 但是了解的不多, hexo本身是不支持mermaid的, 但是上一篇博客也说过, hexo是有很多插件的, [hexo-filter-mermaid-diagrams](https://github.com/webappdevelp/hexo-filter-mermaid-diagrams)就是这么一个东西, 下面我们来讲讲该怎么安装它。\n\n这个插件需要通过[yarn](https://yarn.bootcss.com/)来安装, yarn安装的前提是已经安装了node.js, 所以请注意需要先安装node, 在安装yarn。<br>安装好yarn之后, cd到你的博客文件夹根目录, 执行<br>`yarn add hexo-filter-mermaid-diagrams`<br>这条命令, 之后在你的根目录下找到_config.yml这个文件, 加上这些配置<br>\n\n然后进入`\\themes\\landscape\\layout\\_partial`目录下, 修改footer.ejs文件, 在文件的最后添加:\n\n```js\n<% if (theme.mermaid.enable) { %>\n  <script src='https://unpkg.com/mermaid@<%= theme.mermaid.version %>/dist/mermaid.min.js'></script>\n  <script>\n    if (window.mermaid) {\n      mermaid.initialize({theme: 'forest'});\n    }\n  </script>\n<% } %>\n```\n\n行了, 现在你的博客已经支持流程图了!\n\n<br>\n\n## 创建一个新博文\n\n现在让我们来创建一个博文来试试\n\n1. 创建一个新博客\n\n   命令:\n\n   ```\n   hexo new \"你的博客名字\"\n   ```\n\n   这行命令会在`\\source\\_posts`路径下新建一个.md文件, 你可以直接编辑这个文件, 然后他就可以出现在你的文章中了!\n\n   现在来启动server看看是什么样子\n\n2. 启动server\n\n   ```shell\n   hexo server\n   ```\n\n好了, 搭建博客, 编写博客我们都知道了, 有时间我会去写一写该怎么自定义博客的样式以及一些其他有用的插件的!\n","slug":"blog_skill_experience/hexo/hexo-writing","published":1,"updated":"2022-10-02T16:38:57.252Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejj9000n3vsb1wrx2wr7","content":"<h1 id=\"使用hexo来编写一篇博客的步骤\"><a href=\"#使用hexo来编写一篇博客的步骤\" class=\"headerlink\" title=\"使用hexo来编写一篇博客的步骤\"></a>使用hexo来编写一篇博客的步骤</h1><p>上一篇博客讲了如何使用GitHub Pages和hexo搭建属于你自己的博客, 那么现在, 我们来看看该怎么写我们的第一篇博客。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"让你的博客支持流程图-mermaid\"><a href=\"#让你的博客支持流程图-mermaid\" class=\"headerlink\" title=\"让你的博客支持流程图(mermaid)\"></a>让你的博客支持流程图(mermaid)</h2><p>我们都知道, markdown是支持流程图的, 小子不才, 只知道mermaid, 其他的倒是也知道, 但是了解的不多, hexo本身是不支持mermaid的, 但是上一篇博客也说过, hexo是有很多插件的, <a href=\"https://github.com/webappdevelp/hexo-filter-mermaid-diagrams\">hexo-filter-mermaid-diagrams</a>就是这么一个东西, 下面我们来讲讲该怎么安装它。</p>\n<p>这个插件需要通过<a href=\"https://yarn.bootcss.com/\">yarn</a>来安装, yarn安装的前提是已经安装了node.js, 所以请注意需要先安装node, 在安装yarn。<br>安装好yarn之后, cd到你的博客文件夹根目录, 执行<br><code>yarn add hexo-filter-mermaid-diagrams</code><br>这条命令, 之后在你的根目录下找到_config.yml这个文件, 加上这些配置<br></p>\n<p>然后进入<code>\\themes\\landscape\\layout\\_partial</code>目录下, 修改footer.ejs文件, 在文件的最后添加:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% <span class=\"keyword\">if</span> (theme.mermaid.enable) &#123; %&gt;</span><br><span class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&#x27;https://unpkg.com/mermaid@&lt;%= theme.mermaid.version %&gt;/dist/mermaid.min.js&#x27;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.mermaid) &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      mermaid.initialize(&#123;<span class=\"attr\">theme</span>: <span class=\"string\">&#x27;forest&#x27;</span>&#125;);</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>\n\n<p>行了, 现在你的博客已经支持流程图了!</p>\n<br>\n\n<h2 id=\"创建一个新博文\"><a href=\"#创建一个新博文\" class=\"headerlink\" title=\"创建一个新博文\"></a>创建一个新博文</h2><p>现在让我们来创建一个博文来试试</p>\n<ol>\n<li><p>创建一个新博客</p>\n<p>命令:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new &quot;你的博客名字&quot;</span><br></pre></td></tr></table></figure>\n\n<p>这行命令会在<code>\\source\\_posts</code>路径下新建一个.md文件, 你可以直接编辑这个文件, 然后他就可以出现在你的文章中了!</p>\n<p>现在来启动server看看是什么样子</p>\n</li>\n<li><p>启动server</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>好了, 搭建博客, 编写博客我们都知道了, 有时间我会去写一写该怎么自定义博客的样式以及一些其他有用的插件的!</p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"使用hexo来编写一篇博客的步骤\"><a href=\"#使用hexo来编写一篇博客的步骤\" class=\"headerlink\" title=\"使用hexo来编写一篇博客的步骤\"></a>使用hexo来编写一篇博客的步骤</h1><p>上一篇博客讲了如何使用GitHub Pages和hexo搭建属于你自己的博客, 那么现在, 我们来看看该怎么写我们的第一篇博客。</p>","more":"<h2 id=\"让你的博客支持流程图-mermaid\"><a href=\"#让你的博客支持流程图-mermaid\" class=\"headerlink\" title=\"让你的博客支持流程图(mermaid)\"></a>让你的博客支持流程图(mermaid)</h2><p>我们都知道, markdown是支持流程图的, 小子不才, 只知道mermaid, 其他的倒是也知道, 但是了解的不多, hexo本身是不支持mermaid的, 但是上一篇博客也说过, hexo是有很多插件的, <a href=\"https://github.com/webappdevelp/hexo-filter-mermaid-diagrams\">hexo-filter-mermaid-diagrams</a>就是这么一个东西, 下面我们来讲讲该怎么安装它。</p>\n<p>这个插件需要通过<a href=\"https://yarn.bootcss.com/\">yarn</a>来安装, yarn安装的前提是已经安装了node.js, 所以请注意需要先安装node, 在安装yarn。<br>安装好yarn之后, cd到你的博客文件夹根目录, 执行<br><code>yarn add hexo-filter-mermaid-diagrams</code><br>这条命令, 之后在你的根目录下找到_config.yml这个文件, 加上这些配置<br></p>\n<p>然后进入<code>\\themes\\landscape\\layout\\_partial</code>目录下, 修改footer.ejs文件, 在文件的最后添加:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% <span class=\"keyword\">if</span> (theme.mermaid.enable) &#123; %&gt;</span><br><span class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&#x27;https://unpkg.com/mermaid@&lt;%= theme.mermaid.version %&gt;/dist/mermaid.min.js&#x27;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.mermaid) &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      mermaid.initialize(&#123;<span class=\"attr\">theme</span>: <span class=\"string\">&#x27;forest&#x27;</span>&#125;);</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>\n\n<p>行了, 现在你的博客已经支持流程图了!</p>\n<br>\n\n<h2 id=\"创建一个新博文\"><a href=\"#创建一个新博文\" class=\"headerlink\" title=\"创建一个新博文\"></a>创建一个新博文</h2><p>现在让我们来创建一个博文来试试</p>\n<ol>\n<li><p>创建一个新博客</p>\n<p>命令:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new &quot;你的博客名字&quot;</span><br></pre></td></tr></table></figure>\n\n<p>这行命令会在<code>\\source\\_posts</code>路径下新建一个.md文件, 你可以直接编辑这个文件, 然后他就可以出现在你的文章中了!</p>\n<p>现在来启动server看看是什么样子</p>\n</li>\n<li><p>启动server</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>好了, 搭建博客, 编写博客我们都知道了, 有时间我会去写一写该怎么自定义博客的样式以及一些其他有用的插件的!</p>"},{"title":"hexo建站教程","date":"2018-11-15T11:43:59.000Z","_content":"\n# 使用GitHub Pages加hexo搭建博客教程\n\n## 介绍\n\n如果你需要搭建属于自己的博客, 但又觉得犯不上为了这么个类似于记笔记的地方花上个大几百块钱来租一台服务器, 那么GitPages了解一下! \n\nGitPages是Github网站用于给开发者搭建介绍自己的开源项目的静态网站, 不使用数据库存储数据, 所以我觉得用来写博客再合适不过了。而且显然不只我自己一个人这么认为, 甚至现在已经有帮助你更快速的搭建一个看起来现代化的博客的工具了, 就比如hexo, 它支持你使用**markdown**语法来写笔记, 其他的一切交给它就好, 是一款非常棒的工具。\n\n<!--more-->\n\n## 安装\n\n### 新建一个 GitHub Pages 项目\n\n介绍完了这两个东西, 那么就开始吧! \n\n1. 首先, 使用你的GitHub账号来新建一个项目\n\n   ![点击这里!](/images/my-project/hexo/github-create-project0.png)\n\n   ![命名规则是 username.github.io](/images/my-project/hexo/github-create-project1.png)\n\n2. 接着进入到你刚刚创建的项目的设置里\n\n   ![进入设置](/images/my-project/hexo/github-create-project2.png)\n\n3. 然后找到GitHub Pages那一行, 选择一个分支, 点击保存\n\n   ![开启GitHub](/images/my-project/hexo/github-create-project3.png)\n\n**ok! 这样你就拥有了属于你自己的GitHub Pages项目!**\n\n### 安装hexo\n\nhexo自带[简中文档](https://hexo.io/zh-cn/docs/), 简单来说, 就是使用markdown解析文章, 并自动生成漂亮的静态网页。\n\n由于hexo基于node, 所以需要首先安装node, [安装地址](https://nodejs.org/zh-cn/)。 ~~不知道的请去面壁...~~\n\n安装好node之后, 使用`npm install -g hexo-cli` 来安装hexo\n\n由于hexo3.0之后分模块化了, 所以, 必备的插件还是需要单独安装的, 比如:\n\nhexo-server\n\n安装命令是: `npm install hexo-server --save`\n\n其他的插件[在这里](https://hexo.io/plugins/)\n\n### 安装Git\n\nGit是用来管理项目版本的, 可以使用这个工具将你的项目上传至你刚刚创建的GitHub工程中。[Git官网](https://git-scm.com/)\n\n安装好Git之后, 我们还需要创建一个SSH密钥, 在开始菜单中找到Git bash, 设置Git 的Username 和 Email\n\n命令是:\n\n`git config --global user.name \"你的username\"`\n\n`git config --global user.email \"你的邮箱\"`\n\n然后创建一个SSH密钥\n\n`ssh-keygen -t rsa -C \"你的邮箱\"`\n\n连续三个回车, 你就能在你的用户根目录下找到.ssh文件夹了, 将id_rsa.pub文件中的内容拷贝到你的github账号设置中的SSH and GPG keys中去, 这样你就可以将你的项目上传至你的Github账号的项目中了。\n\n### 万事大吉, 创建博客!\n\n创建一个新的目录, 在该目录下使用`hexo init <folder>`命令, folder就是将要存放你的博客的内容的地方\n\ncd到该目录下, 执行`npm install`\n\n会创建以下目录\n\n```\n|---_config.yml   配置文件\n|---package.json  \n|---scaffolds 存放模板的地方\n|---source 存放你的博客和其他资源的地方\n|---themes 主题\n```\n\n修改配置文件`_config.yml`的头部分:\n\n```xml\ntitle: LittleboyDK's Blog <!-- 全局变量, 你的博客的标题 -->\nsubtitle:\ndescription:\nkeywords:\nauthor: littleboydk <!-- 作者名字 -->\nlanguage: zh <!-- 使用的语言 -->\ntimezone: Asia/Shanghai <!-- 时区 -->\n```\n\n以及尾部分:\n\n```xml\ndeploy:\n  type: git\n  repo: git@github.com:icecreamzhao/icecreamzhao.github.io.git\n  branch: master\n```\n\n配置好了之后, 就大功告成了! 现在让我们来看看搭建好的博客长什么样子吧! 使用`hexo server` 命令(需要安装hexo-server插件), 启动服务器, 在浏览器访问http://localhost:4000\n","source":"_posts/blog_skill_experience/hexo/make-a-hexo-blog.md","raw":"---\ntitle: hexo建站教程\ndate: 2018-11-15 19:43:59\ncategories:\n- 博客技巧/经验\n- hexo\ntags:\n- hexo\n---\n\n# 使用GitHub Pages加hexo搭建博客教程\n\n## 介绍\n\n如果你需要搭建属于自己的博客, 但又觉得犯不上为了这么个类似于记笔记的地方花上个大几百块钱来租一台服务器, 那么GitPages了解一下! \n\nGitPages是Github网站用于给开发者搭建介绍自己的开源项目的静态网站, 不使用数据库存储数据, 所以我觉得用来写博客再合适不过了。而且显然不只我自己一个人这么认为, 甚至现在已经有帮助你更快速的搭建一个看起来现代化的博客的工具了, 就比如hexo, 它支持你使用**markdown**语法来写笔记, 其他的一切交给它就好, 是一款非常棒的工具。\n\n<!--more-->\n\n## 安装\n\n### 新建一个 GitHub Pages 项目\n\n介绍完了这两个东西, 那么就开始吧! \n\n1. 首先, 使用你的GitHub账号来新建一个项目\n\n   ![点击这里!](/images/my-project/hexo/github-create-project0.png)\n\n   ![命名规则是 username.github.io](/images/my-project/hexo/github-create-project1.png)\n\n2. 接着进入到你刚刚创建的项目的设置里\n\n   ![进入设置](/images/my-project/hexo/github-create-project2.png)\n\n3. 然后找到GitHub Pages那一行, 选择一个分支, 点击保存\n\n   ![开启GitHub](/images/my-project/hexo/github-create-project3.png)\n\n**ok! 这样你就拥有了属于你自己的GitHub Pages项目!**\n\n### 安装hexo\n\nhexo自带[简中文档](https://hexo.io/zh-cn/docs/), 简单来说, 就是使用markdown解析文章, 并自动生成漂亮的静态网页。\n\n由于hexo基于node, 所以需要首先安装node, [安装地址](https://nodejs.org/zh-cn/)。 ~~不知道的请去面壁...~~\n\n安装好node之后, 使用`npm install -g hexo-cli` 来安装hexo\n\n由于hexo3.0之后分模块化了, 所以, 必备的插件还是需要单独安装的, 比如:\n\nhexo-server\n\n安装命令是: `npm install hexo-server --save`\n\n其他的插件[在这里](https://hexo.io/plugins/)\n\n### 安装Git\n\nGit是用来管理项目版本的, 可以使用这个工具将你的项目上传至你刚刚创建的GitHub工程中。[Git官网](https://git-scm.com/)\n\n安装好Git之后, 我们还需要创建一个SSH密钥, 在开始菜单中找到Git bash, 设置Git 的Username 和 Email\n\n命令是:\n\n`git config --global user.name \"你的username\"`\n\n`git config --global user.email \"你的邮箱\"`\n\n然后创建一个SSH密钥\n\n`ssh-keygen -t rsa -C \"你的邮箱\"`\n\n连续三个回车, 你就能在你的用户根目录下找到.ssh文件夹了, 将id_rsa.pub文件中的内容拷贝到你的github账号设置中的SSH and GPG keys中去, 这样你就可以将你的项目上传至你的Github账号的项目中了。\n\n### 万事大吉, 创建博客!\n\n创建一个新的目录, 在该目录下使用`hexo init <folder>`命令, folder就是将要存放你的博客的内容的地方\n\ncd到该目录下, 执行`npm install`\n\n会创建以下目录\n\n```\n|---_config.yml   配置文件\n|---package.json  \n|---scaffolds 存放模板的地方\n|---source 存放你的博客和其他资源的地方\n|---themes 主题\n```\n\n修改配置文件`_config.yml`的头部分:\n\n```xml\ntitle: LittleboyDK's Blog <!-- 全局变量, 你的博客的标题 -->\nsubtitle:\ndescription:\nkeywords:\nauthor: littleboydk <!-- 作者名字 -->\nlanguage: zh <!-- 使用的语言 -->\ntimezone: Asia/Shanghai <!-- 时区 -->\n```\n\n以及尾部分:\n\n```xml\ndeploy:\n  type: git\n  repo: git@github.com:icecreamzhao/icecreamzhao.github.io.git\n  branch: master\n```\n\n配置好了之后, 就大功告成了! 现在让我们来看看搭建好的博客长什么样子吧! 使用`hexo server` 命令(需要安装hexo-server插件), 启动服务器, 在浏览器访问http://localhost:4000\n","slug":"blog_skill_experience/hexo/make-a-hexo-blog","published":1,"updated":"2022-10-02T16:39:05.124Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejjf000q3vsb9io2au6i","content":"<h1 id=\"使用GitHub-Pages加hexo搭建博客教程\"><a href=\"#使用GitHub-Pages加hexo搭建博客教程\" class=\"headerlink\" title=\"使用GitHub Pages加hexo搭建博客教程\"></a>使用GitHub Pages加hexo搭建博客教程</h1><h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>如果你需要搭建属于自己的博客, 但又觉得犯不上为了这么个类似于记笔记的地方花上个大几百块钱来租一台服务器, 那么GitPages了解一下! </p>\n<p>GitPages是Github网站用于给开发者搭建介绍自己的开源项目的静态网站, 不使用数据库存储数据, 所以我觉得用来写博客再合适不过了。而且显然不只我自己一个人这么认为, 甚至现在已经有帮助你更快速的搭建一个看起来现代化的博客的工具了, 就比如hexo, 它支持你使用<strong>markdown</strong>语法来写笔记, 其他的一切交给它就好, 是一款非常棒的工具。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h3 id=\"新建一个-GitHub-Pages-项目\"><a href=\"#新建一个-GitHub-Pages-项目\" class=\"headerlink\" title=\"新建一个 GitHub Pages 项目\"></a>新建一个 GitHub Pages 项目</h3><p>介绍完了这两个东西, 那么就开始吧! </p>\n<ol>\n<li><p>首先, 使用你的GitHub账号来新建一个项目</p>\n<p><img src=\"/images/my-project/hexo/github-create-project0.png\" alt=\"点击这里!\"></p>\n<p><img src=\"/images/my-project/hexo/github-create-project1.png\" alt=\"命名规则是 username.github.io\"></p>\n</li>\n<li><p>接着进入到你刚刚创建的项目的设置里</p>\n<p><img src=\"/images/my-project/hexo/github-create-project2.png\" alt=\"进入设置\"></p>\n</li>\n<li><p>然后找到GitHub Pages那一行, 选择一个分支, 点击保存</p>\n<p><img src=\"/images/my-project/hexo/github-create-project3.png\" alt=\"开启GitHub\"></p>\n</li>\n</ol>\n<p><strong>ok! 这样你就拥有了属于你自己的GitHub Pages项目!</strong></p>\n<h3 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h3><p>hexo自带<a href=\"https://hexo.io/zh-cn/docs/\">简中文档</a>, 简单来说, 就是使用markdown解析文章, 并自动生成漂亮的静态网页。</p>\n<p>由于hexo基于node, 所以需要首先安装node, <a href=\"https://nodejs.org/zh-cn/\">安装地址</a>。 <del>不知道的请去面壁…</del></p>\n<p>安装好node之后, 使用<code>npm install -g hexo-cli</code> 来安装hexo</p>\n<p>由于hexo3.0之后分模块化了, 所以, 必备的插件还是需要单独安装的, 比如:</p>\n<p>hexo-server</p>\n<p>安装命令是: <code>npm install hexo-server --save</code></p>\n<p>其他的插件<a href=\"https://hexo.io/plugins/\">在这里</a></p>\n<h3 id=\"安装Git\"><a href=\"#安装Git\" class=\"headerlink\" title=\"安装Git\"></a>安装Git</h3><p>Git是用来管理项目版本的, 可以使用这个工具将你的项目上传至你刚刚创建的GitHub工程中。<a href=\"https://git-scm.com/\">Git官网</a></p>\n<p>安装好Git之后, 我们还需要创建一个SSH密钥, 在开始菜单中找到Git bash, 设置Git 的Username 和 Email</p>\n<p>命令是:</p>\n<p><code>git config --global user.name &quot;你的username&quot;</code></p>\n<p><code>git config --global user.email &quot;你的邮箱&quot;</code></p>\n<p>然后创建一个SSH密钥</p>\n<p><code>ssh-keygen -t rsa -C &quot;你的邮箱&quot;</code></p>\n<p>连续三个回车, 你就能在你的用户根目录下找到.ssh文件夹了, 将id_rsa.pub文件中的内容拷贝到你的github账号设置中的SSH and GPG keys中去, 这样你就可以将你的项目上传至你的Github账号的项目中了。</p>\n<h3 id=\"万事大吉-创建博客\"><a href=\"#万事大吉-创建博客\" class=\"headerlink\" title=\"万事大吉, 创建博客!\"></a>万事大吉, 创建博客!</h3><p>创建一个新的目录, 在该目录下使用<code>hexo init &lt;folder&gt;</code>命令, folder就是将要存放你的博客的内容的地方</p>\n<p>cd到该目录下, 执行<code>npm install</code></p>\n<p>会创建以下目录</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|---_config.yml   配置文件</span><br><span class=\"line\">|---package.json  </span><br><span class=\"line\">|---scaffolds 存放模板的地方</span><br><span class=\"line\">|---source 存放你的博客和其他资源的地方</span><br><span class=\"line\">|---themes 主题</span><br></pre></td></tr></table></figure>\n\n<p>修改配置文件<code>_config.yml</code>的头部分:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: LittleboyDK&#x27;s Blog <span class=\"comment\">&lt;!-- 全局变量, 你的博客的标题 --&gt;</span></span><br><span class=\"line\">subtitle:</span><br><span class=\"line\">description:</span><br><span class=\"line\">keywords:</span><br><span class=\"line\">author: littleboydk <span class=\"comment\">&lt;!-- 作者名字 --&gt;</span></span><br><span class=\"line\">language: zh <span class=\"comment\">&lt;!-- 使用的语言 --&gt;</span></span><br><span class=\"line\">timezone: Asia/Shanghai <span class=\"comment\">&lt;!-- 时区 --&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>以及尾部分:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: git@github.com:icecreamzhao/icecreamzhao.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n\n<p>配置好了之后, 就大功告成了! 现在让我们来看看搭建好的博客长什么样子吧! 使用<code>hexo server</code> 命令(需要安装hexo-server插件), 启动服务器, 在浏览器访问<a href=\"http://localhost:4000/\">http://localhost:4000</a></p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"使用GitHub-Pages加hexo搭建博客教程\"><a href=\"#使用GitHub-Pages加hexo搭建博客教程\" class=\"headerlink\" title=\"使用GitHub Pages加hexo搭建博客教程\"></a>使用GitHub Pages加hexo搭建博客教程</h1><h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>如果你需要搭建属于自己的博客, 但又觉得犯不上为了这么个类似于记笔记的地方花上个大几百块钱来租一台服务器, 那么GitPages了解一下! </p>\n<p>GitPages是Github网站用于给开发者搭建介绍自己的开源项目的静态网站, 不使用数据库存储数据, 所以我觉得用来写博客再合适不过了。而且显然不只我自己一个人这么认为, 甚至现在已经有帮助你更快速的搭建一个看起来现代化的博客的工具了, 就比如hexo, 它支持你使用<strong>markdown</strong>语法来写笔记, 其他的一切交给它就好, 是一款非常棒的工具。</p>","more":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h3 id=\"新建一个-GitHub-Pages-项目\"><a href=\"#新建一个-GitHub-Pages-项目\" class=\"headerlink\" title=\"新建一个 GitHub Pages 项目\"></a>新建一个 GitHub Pages 项目</h3><p>介绍完了这两个东西, 那么就开始吧! </p>\n<ol>\n<li><p>首先, 使用你的GitHub账号来新建一个项目</p>\n<p><img src=\"/images/my-project/hexo/github-create-project0.png\" alt=\"点击这里!\"></p>\n<p><img src=\"/images/my-project/hexo/github-create-project1.png\" alt=\"命名规则是 username.github.io\"></p>\n</li>\n<li><p>接着进入到你刚刚创建的项目的设置里</p>\n<p><img src=\"/images/my-project/hexo/github-create-project2.png\" alt=\"进入设置\"></p>\n</li>\n<li><p>然后找到GitHub Pages那一行, 选择一个分支, 点击保存</p>\n<p><img src=\"/images/my-project/hexo/github-create-project3.png\" alt=\"开启GitHub\"></p>\n</li>\n</ol>\n<p><strong>ok! 这样你就拥有了属于你自己的GitHub Pages项目!</strong></p>\n<h3 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h3><p>hexo自带<a href=\"https://hexo.io/zh-cn/docs/\">简中文档</a>, 简单来说, 就是使用markdown解析文章, 并自动生成漂亮的静态网页。</p>\n<p>由于hexo基于node, 所以需要首先安装node, <a href=\"https://nodejs.org/zh-cn/\">安装地址</a>。 <del>不知道的请去面壁…</del></p>\n<p>安装好node之后, 使用<code>npm install -g hexo-cli</code> 来安装hexo</p>\n<p>由于hexo3.0之后分模块化了, 所以, 必备的插件还是需要单独安装的, 比如:</p>\n<p>hexo-server</p>\n<p>安装命令是: <code>npm install hexo-server --save</code></p>\n<p>其他的插件<a href=\"https://hexo.io/plugins/\">在这里</a></p>\n<h3 id=\"安装Git\"><a href=\"#安装Git\" class=\"headerlink\" title=\"安装Git\"></a>安装Git</h3><p>Git是用来管理项目版本的, 可以使用这个工具将你的项目上传至你刚刚创建的GitHub工程中。<a href=\"https://git-scm.com/\">Git官网</a></p>\n<p>安装好Git之后, 我们还需要创建一个SSH密钥, 在开始菜单中找到Git bash, 设置Git 的Username 和 Email</p>\n<p>命令是:</p>\n<p><code>git config --global user.name &quot;你的username&quot;</code></p>\n<p><code>git config --global user.email &quot;你的邮箱&quot;</code></p>\n<p>然后创建一个SSH密钥</p>\n<p><code>ssh-keygen -t rsa -C &quot;你的邮箱&quot;</code></p>\n<p>连续三个回车, 你就能在你的用户根目录下找到.ssh文件夹了, 将id_rsa.pub文件中的内容拷贝到你的github账号设置中的SSH and GPG keys中去, 这样你就可以将你的项目上传至你的Github账号的项目中了。</p>\n<h3 id=\"万事大吉-创建博客\"><a href=\"#万事大吉-创建博客\" class=\"headerlink\" title=\"万事大吉, 创建博客!\"></a>万事大吉, 创建博客!</h3><p>创建一个新的目录, 在该目录下使用<code>hexo init &lt;folder&gt;</code>命令, folder就是将要存放你的博客的内容的地方</p>\n<p>cd到该目录下, 执行<code>npm install</code></p>\n<p>会创建以下目录</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|---_config.yml   配置文件</span><br><span class=\"line\">|---package.json  </span><br><span class=\"line\">|---scaffolds 存放模板的地方</span><br><span class=\"line\">|---source 存放你的博客和其他资源的地方</span><br><span class=\"line\">|---themes 主题</span><br></pre></td></tr></table></figure>\n\n<p>修改配置文件<code>_config.yml</code>的头部分:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: LittleboyDK&#x27;s Blog <span class=\"comment\">&lt;!-- 全局变量, 你的博客的标题 --&gt;</span></span><br><span class=\"line\">subtitle:</span><br><span class=\"line\">description:</span><br><span class=\"line\">keywords:</span><br><span class=\"line\">author: littleboydk <span class=\"comment\">&lt;!-- 作者名字 --&gt;</span></span><br><span class=\"line\">language: zh <span class=\"comment\">&lt;!-- 使用的语言 --&gt;</span></span><br><span class=\"line\">timezone: Asia/Shanghai <span class=\"comment\">&lt;!-- 时区 --&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>以及尾部分:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: git@github.com:icecreamzhao/icecreamzhao.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n\n<p>配置好了之后, 就大功告成了! 现在让我们来看看搭建好的博客长什么样子吧! 使用<code>hexo server</code> 命令(需要安装hexo-server插件), 启动服务器, 在浏览器访问<a href=\"http://localhost:4000/\">http://localhost:4000</a></p>"},{"title":"记一次修改hexo新建文件的方式","date":"2019-05-27T17:09:19.000Z","_content":"\n# 前言\n\n众所周知, 使用hexo新建一篇博客的命令是 `hexo new \"博客名\"`, 新建的博客文件会被放到 `source/_posts` 下, 然后我尝试了一下直接加入目录, 比如: `hexo new \"目录/博客\"`, 发现hexo会自动将 `/` 符号替换成 `-`, 我打算改回来。\n\n<!--more-->\n\n# 思路\n\n起先我的思路很简单, 直接去看hexo的依赖, 在node_modules下的依赖中, 带有hexo字样的如下:\n\n```\nhexo\nhexo-bunyan\nhexo-deployer-git\nhexo-filter-mermaid-diagrams\nhexo-front-matter\nhexo-fs\nhexo-generator-archive\nhexo-generator-category\nhexo-generator-index\nhexo-generator-json-content\nhexo-generator-tag\nhexo-i18n\nhexo-log\nhexo-pagination\nhexo-renderer-ejs\nhexo-renderer-marked\nhexo-renderer-stylus\nhexo-server\nhexo-util\n```\n\n看了一圈之后, 感觉还是hexo这个依赖比较像, 点进去看了一下, 里面有一个`lib`文件夹, 里面有一个hexo文件夹, 看起来就是它了, 我先看了看index.js文件, 里面有这样一段代码:\n\n```js\nHexo.prototype.init = function() {\n  const self = this;\n\n  this.log.debug('Hexo version: %s', chalk.magenta(this.version));\n  this.log.debug('Working directory: %s', chalk.magenta(tildify(this.base_dir)));\n\n  // Load internal plugins\n  require('../plugins/console')(this);\n  require('../plugins/filter')(this);\n  require('../plugins/generator')(this);\n  require('../plugins/helper')(this);\n  require('../plugins/processor')(this);\n  require('../plugins/renderer')(this);\n  require('../plugins/tag')(this);\n\n  // Load config\n  return Promise.each([\n    'update_package', // Update package.json\n    'load_config', // Load config\n    'load_plugins' // Load external plugins & scripts\n  ], name => require(`./${name}`)(self)).then(() => self.execFilter('after_init', null, {context: self})).then(() => {\n    // Ready to go!\n    self.emit('ready');\n  });\n};\n```\n\n这应该就是初始化的代码了, 其中还加载了一些插件, 所以我就又去看了一下plugins这个文件夹, 所以我就挨个点进去看, 谁想到第一个就找到了:\n\n```js\n// console/index.js\nconsole.register('new', 'Create a new post.', {\n  usage: '[layout] <title>',\n  arguments: [\n    {name: 'layout', desc: 'Post layout. Use post, page, draft or whatever you want.'},\n    {name: 'title', desc: 'Post title. Wrap it with quotations to escape.'}\n  ],\n  options: [\n    {name: '-r, --replace', desc: 'Replace the current post if existed.'},\n    {name: '-s, --slug', desc: 'Post slug. Customize the URL of the post.'},\n    {name: '-p, --path', desc: 'Post path. Customize the path of the post.'}\n  ]\n}, require('./new'));\n```\n\n这是`console/index.js`里面的一段代码, 看起来就是加载新建文件的一段js了, 还说明了一些选项, 这个我之前可不知道, 哈哈。\n\n之后我打开了`new.js`文件, 里面只有一个函数:\n\n```js\nfunction newConsole(args) {\n  // 省略前面的代码\n  return this.post.create(data, args.r || args.replace).then(post => {\n    self.log.info('Created: %s', chalk.magenta(tildify(post.path)));\n  });\n}\n```\n\n这里调用了post的create()方法, 我这里尝试着console了一下this, 发现是一个Hexo对象, 所以我就又回到了`hexo/index.js`中看了一下:\n\n```js\nthis.post = new Post(this);\n```\n\n然后发现它是在同级目录下的post.js, 发现了这个post的create()方法的定义:\n\n```js\n// post的create方法:\n// 省略前面的代码...\nreturn Promise.all([\n  // Get the post path\n  ctx.execFilter('new_post_path', data, {\n    args: [replace],\n    context: ctx\n  }),\n  this._renderScaffold(data)\n]) //... 省略后面的代码\n```\n\n这里我发现他在调用了ctx的execfileter()方法之后就可以获取到path, 而ctx则是在`hexo/index.js`中初始化时传入的this, 那么也就是说execfilter()方法还是定义在`hexo/index.js`中:\n\n```js\nHexo.prototype.execFilter = function(type, data, options) {\n  return this.extend.filter.exec(type, data, options);\n};\n```\n\n这里的`this.extend`被定义到了第57行:\n\n```js\n  this.extend = {\n    console: new extend.Console(),\n    deployer: new extend.Deployer(),\n    filter: new extend.Filter(),\n    generator: new extend.Generator(),\n    helper: new extend.Helper(),\n    migrator: new extend.Migrator(),\n    processor: new extend.Processor(),\n    renderer: new extend.Renderer(),\n    tag: new extend.Tag()\n  };\n```\n\n而Filter则是`extend`文件夹, 这里自不必多说, 不用看就知道`extend/index.js`里面肯定将其他的js都注册好了, 所以我这里直接去看了filter.js:\n\n```js\nFilter.prototype.exec = function(type, data, options = {}) {\n  const filters = this.list(type);\n  const ctx = options.context;\n  const args = options.args || [];\n\n  args.unshift(data);\n  \n  return Promise.each(filters, filter => Promise.method(filter).apply(ctx, args).then(result => {\n    args[0] = result == null ? args[0] : result;\n\t\n    return args[0];\n  })).then(() => args[0]);\n};\n```\n\n这里先使用了list()方法使用index.js中传过来的`new_post_path`初始化了这个变量, 而在list方法中根据store数组中的数据进行判断调用哪一个方法, 我这里console了一下这个Filters, 打印的结果是\n\n```\n[ { [Function: newPostPathFilter] priority: 10 } ]\n```\n\n由此可知使用的方法是newPostPathFilter()来进行添加文件这个操作的, 而在register()方法中对store数组进行了初始化, 那么这个register是在哪里调用的呢? 还有newPostPathFilter()这个方法是在哪里定义的呢? 其实我也不知道, 找了很久, 最后在`plugins/filter`这个文件夹找到了一些蛛丝马迹:\n\n```js\n// plugins/filter/index.js\nmodule.exports = ctx => {\n  const filter = ctx.extend.filter;\n\n  require('./after_post_render')(ctx);\n  require('./before_post_render')(ctx);\n  require('./before_exit')(ctx);\n  require('./before_generate')(ctx);\n  require('./template_locals')(ctx);\n\n  filter.register('new_post_path', require('./new_post_path'));\n  filter.register('post_permalink', require('./post_permalink'));\n  filter.register('after_render:html', require('./meta_generator'));\n};\n```\n\n这里可以看到调用了register()方法注册了一些js, 那么我们就可以很容易的想到newPostPathFilter()方法是在`new_post_path.js`中定义的, 果不其然:\n\n```js\n// newPostPathFilter 方法\n  if (path) {\n    switch (layout) {\n      case 'page':\n        target = pathFn.join(sourceDir, path);\n        break;\n\n      case 'draft':\n        target = pathFn.join(draftDir, path);\n        break;\n\n      default:\n        target = pathFn.join(postDir, path);\n    }\n  } else if (slug) {\n    switch (layout) {\n      case 'page':\n        target = pathFn.join(sourceDir, slug, 'index');\n        break;\n\n      case 'draft':\n        target = pathFn.join(draftDir, slug);\n        break;\n\n      default: {\n        const date = moment(data.date || Date.now());\n        const keys = Object.keys(data);\n        let key = '';\n\n        const filenameData = {\n          year: date.format('YYYY'),\n          month: date.format('MM'),\n          i_month: date.format('M'),\n          day: date.format('DD'),\n          i_day: date.format('D'),\n          title: slug\n        };\n\n        for (let i = 0, len = keys.length; i < len; i++) {\n          key = keys[i];\n          if (!reservedKeys[key]) filenameData[key] = data[key];\n        }\n\n\t\tconsole.log(permalink.stringify(\n          defaults(filenameData, permalinkDefaults)))\n\n        target = pathFn.join(postDir, permalink.stringify(\n          defaults(filenameData, permalinkDefaults)));\n      }\n    }\n  } else {\n    return Promise.reject(new TypeError('Either data.path or data.slug is required!'));\n  }\n```\n\n上面是`new_post_path.js`中的部分代码, 这里有一个判断, 然后我发现如果是新建文件的话, 他会走第二个判断, 随即我console了slug的值, 然后绝望的发现, 这个slug已经被转化好了! 天啊, 什么时候转化的啊! 但是我依旧没有放弃, 回到之前的步骤看看有没有遗漏, 但是也不是白折腾, 至少我知道了转化的变量的名字, 通过我不懈的努力, 终于被我发现在`hexo/post.js`中的create方法里, 有一句话是用来初始化data.slug的:\n\n```js\ndata.slug = slugize((data.slug || data.title).toString(), {transform: config.filename_case});\n```\n\n哈哈, 就是你了! 我看了一下这个slugize, 是hexo-util中的一个js, 然后我打开了这个js, 稳了! 就是他!\n\n```js\nvar rSpecial = /[\\s~`!@#\\$%\\^&\\*\\(\\)\\\\\\/\\-_\\+=\\[\\]\\{\\}\\|;:\"'<>,\\.\\?]+/g;\n\nfunction slugize(str, options) {\n  if (typeof str !== 'string') throw new TypeError('str must be a string!');\n  options = options || {};\n\n  var separator = options.separator || '-';\n  var escapedSep = escapeRegExp(separator);\n\n  var result = escapeDiacritic(str)\n    // Remove control characters\n    .replace(rControl, '')\n    // Replace special characters\n    .replace(rSpecial, separator)\n    // Remove continous separators\n    .replace(new RegExp(escapedSep + '{2,}', 'g'), separator)\n    // Remove prefixing and trailing separtors\n    .replace(new RegExp('^' + escapedSep + '+|' + escapedSep + '+$', 'g'), '');\n\n  switch (options.transform){\n    case 1:\n      return result.toLowerCase();\n\n    case 2:\n      return result.toUpperCase();\n\n    default:\n      return result;\n  }\n}\n```\n\n这里的rSpecial是用来存储一些特殊字符的, 在slugize中进行替换, 那么我只需要将rSpecial中的`\\\\`和`\\/`这两个符号去掉, 大功告成~\n\n# 总结\n\n其实没什么好总结的, 感觉nodejs还是不太好调试, 我这里全程都是用的notpad++来查看代码的, 并不能像java一样可以ctrl+单击到某一个方法实现, 嗯, 其实也还好, js居然也可以写这么复杂的框架了, 感觉自己的学习之路还很漫长啊...\n","source":"_posts/blog_skill_experience/hexo/modify-new-post.md","raw":"---\ntitle: 记一次修改hexo新建文件的方式\ndate: 2019-05-28 01:09:19\ncategories:\n- 博客技巧/经验\n- hexo\ntags:\n- hexo\n---\n\n# 前言\n\n众所周知, 使用hexo新建一篇博客的命令是 `hexo new \"博客名\"`, 新建的博客文件会被放到 `source/_posts` 下, 然后我尝试了一下直接加入目录, 比如: `hexo new \"目录/博客\"`, 发现hexo会自动将 `/` 符号替换成 `-`, 我打算改回来。\n\n<!--more-->\n\n# 思路\n\n起先我的思路很简单, 直接去看hexo的依赖, 在node_modules下的依赖中, 带有hexo字样的如下:\n\n```\nhexo\nhexo-bunyan\nhexo-deployer-git\nhexo-filter-mermaid-diagrams\nhexo-front-matter\nhexo-fs\nhexo-generator-archive\nhexo-generator-category\nhexo-generator-index\nhexo-generator-json-content\nhexo-generator-tag\nhexo-i18n\nhexo-log\nhexo-pagination\nhexo-renderer-ejs\nhexo-renderer-marked\nhexo-renderer-stylus\nhexo-server\nhexo-util\n```\n\n看了一圈之后, 感觉还是hexo这个依赖比较像, 点进去看了一下, 里面有一个`lib`文件夹, 里面有一个hexo文件夹, 看起来就是它了, 我先看了看index.js文件, 里面有这样一段代码:\n\n```js\nHexo.prototype.init = function() {\n  const self = this;\n\n  this.log.debug('Hexo version: %s', chalk.magenta(this.version));\n  this.log.debug('Working directory: %s', chalk.magenta(tildify(this.base_dir)));\n\n  // Load internal plugins\n  require('../plugins/console')(this);\n  require('../plugins/filter')(this);\n  require('../plugins/generator')(this);\n  require('../plugins/helper')(this);\n  require('../plugins/processor')(this);\n  require('../plugins/renderer')(this);\n  require('../plugins/tag')(this);\n\n  // Load config\n  return Promise.each([\n    'update_package', // Update package.json\n    'load_config', // Load config\n    'load_plugins' // Load external plugins & scripts\n  ], name => require(`./${name}`)(self)).then(() => self.execFilter('after_init', null, {context: self})).then(() => {\n    // Ready to go!\n    self.emit('ready');\n  });\n};\n```\n\n这应该就是初始化的代码了, 其中还加载了一些插件, 所以我就又去看了一下plugins这个文件夹, 所以我就挨个点进去看, 谁想到第一个就找到了:\n\n```js\n// console/index.js\nconsole.register('new', 'Create a new post.', {\n  usage: '[layout] <title>',\n  arguments: [\n    {name: 'layout', desc: 'Post layout. Use post, page, draft or whatever you want.'},\n    {name: 'title', desc: 'Post title. Wrap it with quotations to escape.'}\n  ],\n  options: [\n    {name: '-r, --replace', desc: 'Replace the current post if existed.'},\n    {name: '-s, --slug', desc: 'Post slug. Customize the URL of the post.'},\n    {name: '-p, --path', desc: 'Post path. Customize the path of the post.'}\n  ]\n}, require('./new'));\n```\n\n这是`console/index.js`里面的一段代码, 看起来就是加载新建文件的一段js了, 还说明了一些选项, 这个我之前可不知道, 哈哈。\n\n之后我打开了`new.js`文件, 里面只有一个函数:\n\n```js\nfunction newConsole(args) {\n  // 省略前面的代码\n  return this.post.create(data, args.r || args.replace).then(post => {\n    self.log.info('Created: %s', chalk.magenta(tildify(post.path)));\n  });\n}\n```\n\n这里调用了post的create()方法, 我这里尝试着console了一下this, 发现是一个Hexo对象, 所以我就又回到了`hexo/index.js`中看了一下:\n\n```js\nthis.post = new Post(this);\n```\n\n然后发现它是在同级目录下的post.js, 发现了这个post的create()方法的定义:\n\n```js\n// post的create方法:\n// 省略前面的代码...\nreturn Promise.all([\n  // Get the post path\n  ctx.execFilter('new_post_path', data, {\n    args: [replace],\n    context: ctx\n  }),\n  this._renderScaffold(data)\n]) //... 省略后面的代码\n```\n\n这里我发现他在调用了ctx的execfileter()方法之后就可以获取到path, 而ctx则是在`hexo/index.js`中初始化时传入的this, 那么也就是说execfilter()方法还是定义在`hexo/index.js`中:\n\n```js\nHexo.prototype.execFilter = function(type, data, options) {\n  return this.extend.filter.exec(type, data, options);\n};\n```\n\n这里的`this.extend`被定义到了第57行:\n\n```js\n  this.extend = {\n    console: new extend.Console(),\n    deployer: new extend.Deployer(),\n    filter: new extend.Filter(),\n    generator: new extend.Generator(),\n    helper: new extend.Helper(),\n    migrator: new extend.Migrator(),\n    processor: new extend.Processor(),\n    renderer: new extend.Renderer(),\n    tag: new extend.Tag()\n  };\n```\n\n而Filter则是`extend`文件夹, 这里自不必多说, 不用看就知道`extend/index.js`里面肯定将其他的js都注册好了, 所以我这里直接去看了filter.js:\n\n```js\nFilter.prototype.exec = function(type, data, options = {}) {\n  const filters = this.list(type);\n  const ctx = options.context;\n  const args = options.args || [];\n\n  args.unshift(data);\n  \n  return Promise.each(filters, filter => Promise.method(filter).apply(ctx, args).then(result => {\n    args[0] = result == null ? args[0] : result;\n\t\n    return args[0];\n  })).then(() => args[0]);\n};\n```\n\n这里先使用了list()方法使用index.js中传过来的`new_post_path`初始化了这个变量, 而在list方法中根据store数组中的数据进行判断调用哪一个方法, 我这里console了一下这个Filters, 打印的结果是\n\n```\n[ { [Function: newPostPathFilter] priority: 10 } ]\n```\n\n由此可知使用的方法是newPostPathFilter()来进行添加文件这个操作的, 而在register()方法中对store数组进行了初始化, 那么这个register是在哪里调用的呢? 还有newPostPathFilter()这个方法是在哪里定义的呢? 其实我也不知道, 找了很久, 最后在`plugins/filter`这个文件夹找到了一些蛛丝马迹:\n\n```js\n// plugins/filter/index.js\nmodule.exports = ctx => {\n  const filter = ctx.extend.filter;\n\n  require('./after_post_render')(ctx);\n  require('./before_post_render')(ctx);\n  require('./before_exit')(ctx);\n  require('./before_generate')(ctx);\n  require('./template_locals')(ctx);\n\n  filter.register('new_post_path', require('./new_post_path'));\n  filter.register('post_permalink', require('./post_permalink'));\n  filter.register('after_render:html', require('./meta_generator'));\n};\n```\n\n这里可以看到调用了register()方法注册了一些js, 那么我们就可以很容易的想到newPostPathFilter()方法是在`new_post_path.js`中定义的, 果不其然:\n\n```js\n// newPostPathFilter 方法\n  if (path) {\n    switch (layout) {\n      case 'page':\n        target = pathFn.join(sourceDir, path);\n        break;\n\n      case 'draft':\n        target = pathFn.join(draftDir, path);\n        break;\n\n      default:\n        target = pathFn.join(postDir, path);\n    }\n  } else if (slug) {\n    switch (layout) {\n      case 'page':\n        target = pathFn.join(sourceDir, slug, 'index');\n        break;\n\n      case 'draft':\n        target = pathFn.join(draftDir, slug);\n        break;\n\n      default: {\n        const date = moment(data.date || Date.now());\n        const keys = Object.keys(data);\n        let key = '';\n\n        const filenameData = {\n          year: date.format('YYYY'),\n          month: date.format('MM'),\n          i_month: date.format('M'),\n          day: date.format('DD'),\n          i_day: date.format('D'),\n          title: slug\n        };\n\n        for (let i = 0, len = keys.length; i < len; i++) {\n          key = keys[i];\n          if (!reservedKeys[key]) filenameData[key] = data[key];\n        }\n\n\t\tconsole.log(permalink.stringify(\n          defaults(filenameData, permalinkDefaults)))\n\n        target = pathFn.join(postDir, permalink.stringify(\n          defaults(filenameData, permalinkDefaults)));\n      }\n    }\n  } else {\n    return Promise.reject(new TypeError('Either data.path or data.slug is required!'));\n  }\n```\n\n上面是`new_post_path.js`中的部分代码, 这里有一个判断, 然后我发现如果是新建文件的话, 他会走第二个判断, 随即我console了slug的值, 然后绝望的发现, 这个slug已经被转化好了! 天啊, 什么时候转化的啊! 但是我依旧没有放弃, 回到之前的步骤看看有没有遗漏, 但是也不是白折腾, 至少我知道了转化的变量的名字, 通过我不懈的努力, 终于被我发现在`hexo/post.js`中的create方法里, 有一句话是用来初始化data.slug的:\n\n```js\ndata.slug = slugize((data.slug || data.title).toString(), {transform: config.filename_case});\n```\n\n哈哈, 就是你了! 我看了一下这个slugize, 是hexo-util中的一个js, 然后我打开了这个js, 稳了! 就是他!\n\n```js\nvar rSpecial = /[\\s~`!@#\\$%\\^&\\*\\(\\)\\\\\\/\\-_\\+=\\[\\]\\{\\}\\|;:\"'<>,\\.\\?]+/g;\n\nfunction slugize(str, options) {\n  if (typeof str !== 'string') throw new TypeError('str must be a string!');\n  options = options || {};\n\n  var separator = options.separator || '-';\n  var escapedSep = escapeRegExp(separator);\n\n  var result = escapeDiacritic(str)\n    // Remove control characters\n    .replace(rControl, '')\n    // Replace special characters\n    .replace(rSpecial, separator)\n    // Remove continous separators\n    .replace(new RegExp(escapedSep + '{2,}', 'g'), separator)\n    // Remove prefixing and trailing separtors\n    .replace(new RegExp('^' + escapedSep + '+|' + escapedSep + '+$', 'g'), '');\n\n  switch (options.transform){\n    case 1:\n      return result.toLowerCase();\n\n    case 2:\n      return result.toUpperCase();\n\n    default:\n      return result;\n  }\n}\n```\n\n这里的rSpecial是用来存储一些特殊字符的, 在slugize中进行替换, 那么我只需要将rSpecial中的`\\\\`和`\\/`这两个符号去掉, 大功告成~\n\n# 总结\n\n其实没什么好总结的, 感觉nodejs还是不太好调试, 我这里全程都是用的notpad++来查看代码的, 并不能像java一样可以ctrl+单击到某一个方法实现, 嗯, 其实也还好, js居然也可以写这么复杂的框架了, 感觉自己的学习之路还很漫长啊...\n","slug":"blog_skill_experience/hexo/modify-new-post","published":1,"updated":"2022-10-02T16:39:17.877Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejjk000u3vsbbgfy2syh","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>众所周知, 使用hexo新建一篇博客的命令是 <code>hexo new &quot;博客名&quot;</code>, 新建的博客文件会被放到 <code>source/_posts</code> 下, 然后我尝试了一下直接加入目录, 比如: <code>hexo new &quot;目录/博客&quot;</code>, 发现hexo会自动将 <code>/</code> 符号替换成 <code>-</code>, 我打算改回来。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>起先我的思路很简单, 直接去看hexo的依赖, 在node_modules下的依赖中, 带有hexo字样的如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo</span><br><span class=\"line\">hexo-bunyan</span><br><span class=\"line\">hexo-deployer-git</span><br><span class=\"line\">hexo-filter-mermaid-diagrams</span><br><span class=\"line\">hexo-front-matter</span><br><span class=\"line\">hexo-fs</span><br><span class=\"line\">hexo-generator-archive</span><br><span class=\"line\">hexo-generator-category</span><br><span class=\"line\">hexo-generator-index</span><br><span class=\"line\">hexo-generator-json-content</span><br><span class=\"line\">hexo-generator-tag</span><br><span class=\"line\">hexo-i18n</span><br><span class=\"line\">hexo-log</span><br><span class=\"line\">hexo-pagination</span><br><span class=\"line\">hexo-renderer-ejs</span><br><span class=\"line\">hexo-renderer-marked</span><br><span class=\"line\">hexo-renderer-stylus</span><br><span class=\"line\">hexo-server</span><br><span class=\"line\">hexo-util</span><br></pre></td></tr></table></figure>\n\n<p>看了一圈之后, 感觉还是hexo这个依赖比较像, 点进去看了一下, 里面有一个<code>lib</code>文件夹, 里面有一个hexo文件夹, 看起来就是它了, 我先看了看index.js文件, 里面有这样一段代码:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hexo.prototype.init = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> self = <span class=\"built_in\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">this</span>.log.debug(<span class=\"string\">&#x27;Hexo version: %s&#x27;</span>, chalk.magenta(<span class=\"built_in\">this</span>.version));</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.log.debug(<span class=\"string\">&#x27;Working directory: %s&#x27;</span>, chalk.magenta(tildify(<span class=\"built_in\">this</span>.base_dir)));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Load internal plugins</span></span><br><span class=\"line\">  <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../plugins/console&#x27;</span>)(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">  <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../plugins/filter&#x27;</span>)(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">  <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../plugins/generator&#x27;</span>)(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">  <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../plugins/helper&#x27;</span>)(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">  <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../plugins/processor&#x27;</span>)(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">  <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../plugins/renderer&#x27;</span>)(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">  <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../plugins/tag&#x27;</span>)(<span class=\"built_in\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Load config</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.each([</span><br><span class=\"line\">    <span class=\"string\">&#x27;update_package&#x27;</span>, <span class=\"comment\">// Update package.json</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;load_config&#x27;</span>, <span class=\"comment\">// Load config</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;load_plugins&#x27;</span> <span class=\"comment\">// Load external plugins &amp; scripts</span></span><br><span class=\"line\">  ], <span class=\"function\"><span class=\"params\">name</span> =&gt;</span> <span class=\"built_in\">require</span>(<span class=\"string\">`./<span class=\"subst\">$&#123;name&#125;</span>`</span>)(self)).then(<span class=\"function\">() =&gt;</span> self.execFilter(<span class=\"string\">&#x27;after_init&#x27;</span>, <span class=\"literal\">null</span>, &#123;<span class=\"attr\">context</span>: self&#125;)).then(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Ready to go!</span></span><br><span class=\"line\">    self.emit(<span class=\"string\">&#x27;ready&#x27;</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>这应该就是初始化的代码了, 其中还加载了一些插件, 所以我就又去看了一下plugins这个文件夹, 所以我就挨个点进去看, 谁想到第一个就找到了:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// console/index.js</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.register(<span class=\"string\">&#x27;new&#x27;</span>, <span class=\"string\">&#x27;Create a new post.&#x27;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">usage</span>: <span class=\"string\">&#x27;[layout] &lt;title&gt;&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">arguments</span>: [</span><br><span class=\"line\">    &#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;layout&#x27;</span>, <span class=\"attr\">desc</span>: <span class=\"string\">&#x27;Post layout. Use post, page, draft or whatever you want.&#x27;</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;title&#x27;</span>, <span class=\"attr\">desc</span>: <span class=\"string\">&#x27;Post title. Wrap it with quotations to escape.&#x27;</span>&#125;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">options</span>: [</span><br><span class=\"line\">    &#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;-r, --replace&#x27;</span>, <span class=\"attr\">desc</span>: <span class=\"string\">&#x27;Replace the current post if existed.&#x27;</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;-s, --slug&#x27;</span>, <span class=\"attr\">desc</span>: <span class=\"string\">&#x27;Post slug. Customize the URL of the post.&#x27;</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;-p, --path&#x27;</span>, <span class=\"attr\">desc</span>: <span class=\"string\">&#x27;Post path. Customize the path of the post.&#x27;</span>&#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;, <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./new&#x27;</span>));</span><br></pre></td></tr></table></figure>\n\n<p>这是<code>console/index.js</code>里面的一段代码, 看起来就是加载新建文件的一段js了, 还说明了一些选项, 这个我之前可不知道, 哈哈。</p>\n<p>之后我打开了<code>new.js</code>文件, 里面只有一个函数:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">newConsole</span>(<span class=\"params\">args</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 省略前面的代码</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.post.create(data, args.r || args.replace).then(<span class=\"function\"><span class=\"params\">post</span> =&gt;</span> &#123;</span><br><span class=\"line\">    self.log.info(<span class=\"string\">&#x27;Created: %s&#x27;</span>, chalk.magenta(tildify(post.path)));</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里调用了post的create()方法, 我这里尝试着console了一下this, 发现是一个Hexo对象, 所以我就又回到了<code>hexo/index.js</code>中看了一下:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">this</span>.post = <span class=\"keyword\">new</span> Post(<span class=\"built_in\">this</span>);</span><br></pre></td></tr></table></figure>\n\n<p>然后发现它是在同级目录下的post.js, 发现了这个post的create()方法的定义:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// post的create方法:</span></span><br><span class=\"line\"><span class=\"comment\">// 省略前面的代码...</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.all([</span><br><span class=\"line\">  <span class=\"comment\">// Get the post path</span></span><br><span class=\"line\">  ctx.execFilter(<span class=\"string\">&#x27;new_post_path&#x27;</span>, data, &#123;</span><br><span class=\"line\">    <span class=\"attr\">args</span>: [replace],</span><br><span class=\"line\">    <span class=\"attr\">context</span>: ctx</span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\">  <span class=\"built_in\">this</span>._renderScaffold(data)</span><br><span class=\"line\">]) <span class=\"comment\">//... 省略后面的代码</span></span><br></pre></td></tr></table></figure>\n\n<p>这里我发现他在调用了ctx的execfileter()方法之后就可以获取到path, 而ctx则是在<code>hexo/index.js</code>中初始化时传入的this, 那么也就是说execfilter()方法还是定义在<code>hexo/index.js</code>中:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hexo.prototype.execFilter = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">type, data, options</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.extend.filter.exec(type, data, options);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>这里的<code>this.extend</code>被定义到了第57行:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">this</span>.extend = &#123;</span><br><span class=\"line\">  <span class=\"attr\">console</span>: <span class=\"keyword\">new</span> extend.Console(),</span><br><span class=\"line\">  <span class=\"attr\">deployer</span>: <span class=\"keyword\">new</span> extend.Deployer(),</span><br><span class=\"line\">  <span class=\"attr\">filter</span>: <span class=\"keyword\">new</span> extend.Filter(),</span><br><span class=\"line\">  <span class=\"attr\">generator</span>: <span class=\"keyword\">new</span> extend.Generator(),</span><br><span class=\"line\">  <span class=\"attr\">helper</span>: <span class=\"keyword\">new</span> extend.Helper(),</span><br><span class=\"line\">  <span class=\"attr\">migrator</span>: <span class=\"keyword\">new</span> extend.Migrator(),</span><br><span class=\"line\">  <span class=\"attr\">processor</span>: <span class=\"keyword\">new</span> extend.Processor(),</span><br><span class=\"line\">  <span class=\"attr\">renderer</span>: <span class=\"keyword\">new</span> extend.Renderer(),</span><br><span class=\"line\">  <span class=\"attr\">tag</span>: <span class=\"keyword\">new</span> extend.Tag()</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>而Filter则是<code>extend</code>文件夹, 这里自不必多说, 不用看就知道<code>extend/index.js</code>里面肯定将其他的js都注册好了, 所以我这里直接去看了filter.js:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Filter.prototype.exec = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">type, data, options = &#123;&#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> filters = <span class=\"built_in\">this</span>.list(type);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ctx = options.context;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> args = options.args || [];</span><br><span class=\"line\"></span><br><span class=\"line\">  args.unshift(data);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.each(filters, <span class=\"function\"><span class=\"params\">filter</span> =&gt;</span> <span class=\"built_in\">Promise</span>.method(filter).apply(ctx, args).then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</span><br><span class=\"line\">    args[<span class=\"number\">0</span>] = result == <span class=\"literal\">null</span> ? args[<span class=\"number\">0</span>] : result;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> args[<span class=\"number\">0</span>];</span><br><span class=\"line\">  &#125;)).then(<span class=\"function\">() =&gt;</span> args[<span class=\"number\">0</span>]);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>这里先使用了list()方法使用index.js中传过来的<code>new_post_path</code>初始化了这个变量, 而在list方法中根据store数组中的数据进行判断调用哪一个方法, 我这里console了一下这个Filters, 打印的结果是</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ &#123; [Function: newPostPathFilter] priority: 10 &#125; ]</span><br></pre></td></tr></table></figure>\n\n<p>由此可知使用的方法是newPostPathFilter()来进行添加文件这个操作的, 而在register()方法中对store数组进行了初始化, 那么这个register是在哪里调用的呢? 还有newPostPathFilter()这个方法是在哪里定义的呢? 其实我也不知道, 找了很久, 最后在<code>plugins/filter</code>这个文件夹找到了一些蛛丝马迹:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// plugins/filter/index.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"params\">ctx</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> filter = ctx.extend.filter;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./after_post_render&#x27;</span>)(ctx);</span><br><span class=\"line\">  <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./before_post_render&#x27;</span>)(ctx);</span><br><span class=\"line\">  <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./before_exit&#x27;</span>)(ctx);</span><br><span class=\"line\">  <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./before_generate&#x27;</span>)(ctx);</span><br><span class=\"line\">  <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./template_locals&#x27;</span>)(ctx);</span><br><span class=\"line\"></span><br><span class=\"line\">  filter.register(<span class=\"string\">&#x27;new_post_path&#x27;</span>, <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./new_post_path&#x27;</span>));</span><br><span class=\"line\">  filter.register(<span class=\"string\">&#x27;post_permalink&#x27;</span>, <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./post_permalink&#x27;</span>));</span><br><span class=\"line\">  filter.register(<span class=\"string\">&#x27;after_render:html&#x27;</span>, <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./meta_generator&#x27;</span>));</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>这里可以看到调用了register()方法注册了一些js, 那么我们就可以很容易的想到newPostPathFilter()方法是在<code>new_post_path.js</code>中定义的, 果不其然:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// newPostPathFilter 方法</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (path) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (layout) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">&#x27;page&#x27;</span>:</span><br><span class=\"line\">        target = pathFn.join(sourceDir, path);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">&#x27;draft&#x27;</span>:</span><br><span class=\"line\">        target = pathFn.join(draftDir, path);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        target = pathFn.join(postDir, path);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (slug) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (layout) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">&#x27;page&#x27;</span>:</span><br><span class=\"line\">        target = pathFn.join(sourceDir, slug, <span class=\"string\">&#x27;index&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">&#x27;draft&#x27;</span>:</span><br><span class=\"line\">        target = pathFn.join(draftDir, slug);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">default</span>: &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> date = moment(data.date || <span class=\"built_in\">Date</span>.now());</span><br><span class=\"line\">        <span class=\"keyword\">const</span> keys = <span class=\"built_in\">Object</span>.keys(data);</span><br><span class=\"line\">        <span class=\"keyword\">let</span> key = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">const</span> filenameData = &#123;</span><br><span class=\"line\">          <span class=\"attr\">year</span>: date.format(<span class=\"string\">&#x27;YYYY&#x27;</span>),</span><br><span class=\"line\">          <span class=\"attr\">month</span>: date.format(<span class=\"string\">&#x27;MM&#x27;</span>),</span><br><span class=\"line\">          <span class=\"attr\">i_month</span>: date.format(<span class=\"string\">&#x27;M&#x27;</span>),</span><br><span class=\"line\">          <span class=\"attr\">day</span>: date.format(<span class=\"string\">&#x27;DD&#x27;</span>),</span><br><span class=\"line\">          <span class=\"attr\">i_day</span>: date.format(<span class=\"string\">&#x27;D&#x27;</span>),</span><br><span class=\"line\">          <span class=\"attr\">title</span>: slug</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, len = keys.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">          key = keys[i];</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (!reservedKeys[key]) filenameData[key] = data[key];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(permalink.stringify(</span><br><span class=\"line\">          defaults(filenameData, permalinkDefaults)))</span><br><span class=\"line\"></span><br><span class=\"line\">        target = pathFn.join(postDir, permalink.stringify(</span><br><span class=\"line\">          defaults(filenameData, permalinkDefaults)));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(<span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">&#x27;Either data.path or data.slug is required!&#x27;</span>));</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面是<code>new_post_path.js</code>中的部分代码, 这里有一个判断, 然后我发现如果是新建文件的话, 他会走第二个判断, 随即我console了slug的值, 然后绝望的发现, 这个slug已经被转化好了! 天啊, 什么时候转化的啊! 但是我依旧没有放弃, 回到之前的步骤看看有没有遗漏, 但是也不是白折腾, 至少我知道了转化的变量的名字, 通过我不懈的努力, 终于被我发现在<code>hexo/post.js</code>中的create方法里, 有一句话是用来初始化data.slug的:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data.slug = slugize((data.slug || data.title).toString(), &#123;<span class=\"attr\">transform</span>: config.filename_case&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>哈哈, 就是你了! 我看了一下这个slugize, 是hexo-util中的一个js, 然后我打开了这个js, 稳了! 就是他!</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> rSpecial = <span class=\"regexp\">/[\\s~`!@#\\$%\\^&amp;\\*\\(\\)\\\\\\/\\-_\\+=\\[\\]\\&#123;\\&#125;\\|;:&quot;&#x27;&lt;&gt;,\\.\\?]+/g</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">slugize</span>(<span class=\"params\">str, options</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> str !== <span class=\"string\">&#x27;string&#x27;</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">&#x27;str must be a string!&#x27;</span>);</span><br><span class=\"line\">  options = options || &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> separator = options.separator || <span class=\"string\">&#x27;-&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> escapedSep = escapeRegExp(separator);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> result = escapeDiacritic(str)</span><br><span class=\"line\">    <span class=\"comment\">// Remove control characters</span></span><br><span class=\"line\">    .replace(rControl, <span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\">// Replace special characters</span></span><br><span class=\"line\">    .replace(rSpecial, separator)</span><br><span class=\"line\">    <span class=\"comment\">// Remove continous separators</span></span><br><span class=\"line\">    .replace(<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(escapedSep + <span class=\"string\">&#x27;&#123;2,&#125;&#x27;</span>, <span class=\"string\">&#x27;g&#x27;</span>), separator)</span><br><span class=\"line\">    <span class=\"comment\">// Remove prefixing and trailing separtors</span></span><br><span class=\"line\">    .replace(<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">&#x27;^&#x27;</span> + escapedSep + <span class=\"string\">&#x27;+|&#x27;</span> + escapedSep + <span class=\"string\">&#x27;+$&#x27;</span>, <span class=\"string\">&#x27;g&#x27;</span>), <span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (options.transform)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> result.toLowerCase();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> result.toUpperCase();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里的rSpecial是用来存储一些特殊字符的, 在slugize中进行替换, 那么我只需要将rSpecial中的<code>\\\\</code>和<code>\\/</code>这两个符号去掉, 大功告成~</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>其实没什么好总结的, 感觉nodejs还是不太好调试, 我这里全程都是用的notpad++来查看代码的, 并不能像java一样可以ctrl+单击到某一个方法实现, 嗯, 其实也还好, js居然也可以写这么复杂的框架了, 感觉自己的学习之路还很漫长啊…</p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>众所周知, 使用hexo新建一篇博客的命令是 <code>hexo new &quot;博客名&quot;</code>, 新建的博客文件会被放到 <code>source/_posts</code> 下, 然后我尝试了一下直接加入目录, 比如: <code>hexo new &quot;目录/博客&quot;</code>, 发现hexo会自动将 <code>/</code> 符号替换成 <code>-</code>, 我打算改回来。</p>","more":"<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>起先我的思路很简单, 直接去看hexo的依赖, 在node_modules下的依赖中, 带有hexo字样的如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo</span><br><span class=\"line\">hexo-bunyan</span><br><span class=\"line\">hexo-deployer-git</span><br><span class=\"line\">hexo-filter-mermaid-diagrams</span><br><span class=\"line\">hexo-front-matter</span><br><span class=\"line\">hexo-fs</span><br><span class=\"line\">hexo-generator-archive</span><br><span class=\"line\">hexo-generator-category</span><br><span class=\"line\">hexo-generator-index</span><br><span class=\"line\">hexo-generator-json-content</span><br><span class=\"line\">hexo-generator-tag</span><br><span class=\"line\">hexo-i18n</span><br><span class=\"line\">hexo-log</span><br><span class=\"line\">hexo-pagination</span><br><span class=\"line\">hexo-renderer-ejs</span><br><span class=\"line\">hexo-renderer-marked</span><br><span class=\"line\">hexo-renderer-stylus</span><br><span class=\"line\">hexo-server</span><br><span class=\"line\">hexo-util</span><br></pre></td></tr></table></figure>\n\n<p>看了一圈之后, 感觉还是hexo这个依赖比较像, 点进去看了一下, 里面有一个<code>lib</code>文件夹, 里面有一个hexo文件夹, 看起来就是它了, 我先看了看index.js文件, 里面有这样一段代码:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hexo.prototype.init = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> self = <span class=\"built_in\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">this</span>.log.debug(<span class=\"string\">&#x27;Hexo version: %s&#x27;</span>, chalk.magenta(<span class=\"built_in\">this</span>.version));</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.log.debug(<span class=\"string\">&#x27;Working directory: %s&#x27;</span>, chalk.magenta(tildify(<span class=\"built_in\">this</span>.base_dir)));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Load internal plugins</span></span><br><span class=\"line\">  <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../plugins/console&#x27;</span>)(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">  <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../plugins/filter&#x27;</span>)(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">  <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../plugins/generator&#x27;</span>)(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">  <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../plugins/helper&#x27;</span>)(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">  <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../plugins/processor&#x27;</span>)(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">  <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../plugins/renderer&#x27;</span>)(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">  <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../plugins/tag&#x27;</span>)(<span class=\"built_in\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Load config</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.each([</span><br><span class=\"line\">    <span class=\"string\">&#x27;update_package&#x27;</span>, <span class=\"comment\">// Update package.json</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;load_config&#x27;</span>, <span class=\"comment\">// Load config</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;load_plugins&#x27;</span> <span class=\"comment\">// Load external plugins &amp; scripts</span></span><br><span class=\"line\">  ], <span class=\"function\"><span class=\"params\">name</span> =&gt;</span> <span class=\"built_in\">require</span>(<span class=\"string\">`./<span class=\"subst\">$&#123;name&#125;</span>`</span>)(self)).then(<span class=\"function\">() =&gt;</span> self.execFilter(<span class=\"string\">&#x27;after_init&#x27;</span>, <span class=\"literal\">null</span>, &#123;<span class=\"attr\">context</span>: self&#125;)).then(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Ready to go!</span></span><br><span class=\"line\">    self.emit(<span class=\"string\">&#x27;ready&#x27;</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>这应该就是初始化的代码了, 其中还加载了一些插件, 所以我就又去看了一下plugins这个文件夹, 所以我就挨个点进去看, 谁想到第一个就找到了:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// console/index.js</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.register(<span class=\"string\">&#x27;new&#x27;</span>, <span class=\"string\">&#x27;Create a new post.&#x27;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">usage</span>: <span class=\"string\">&#x27;[layout] &lt;title&gt;&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">arguments</span>: [</span><br><span class=\"line\">    &#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;layout&#x27;</span>, <span class=\"attr\">desc</span>: <span class=\"string\">&#x27;Post layout. Use post, page, draft or whatever you want.&#x27;</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;title&#x27;</span>, <span class=\"attr\">desc</span>: <span class=\"string\">&#x27;Post title. Wrap it with quotations to escape.&#x27;</span>&#125;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">options</span>: [</span><br><span class=\"line\">    &#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;-r, --replace&#x27;</span>, <span class=\"attr\">desc</span>: <span class=\"string\">&#x27;Replace the current post if existed.&#x27;</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;-s, --slug&#x27;</span>, <span class=\"attr\">desc</span>: <span class=\"string\">&#x27;Post slug. Customize the URL of the post.&#x27;</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;-p, --path&#x27;</span>, <span class=\"attr\">desc</span>: <span class=\"string\">&#x27;Post path. Customize the path of the post.&#x27;</span>&#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;, <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./new&#x27;</span>));</span><br></pre></td></tr></table></figure>\n\n<p>这是<code>console/index.js</code>里面的一段代码, 看起来就是加载新建文件的一段js了, 还说明了一些选项, 这个我之前可不知道, 哈哈。</p>\n<p>之后我打开了<code>new.js</code>文件, 里面只有一个函数:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">newConsole</span>(<span class=\"params\">args</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 省略前面的代码</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.post.create(data, args.r || args.replace).then(<span class=\"function\"><span class=\"params\">post</span> =&gt;</span> &#123;</span><br><span class=\"line\">    self.log.info(<span class=\"string\">&#x27;Created: %s&#x27;</span>, chalk.magenta(tildify(post.path)));</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里调用了post的create()方法, 我这里尝试着console了一下this, 发现是一个Hexo对象, 所以我就又回到了<code>hexo/index.js</code>中看了一下:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">this</span>.post = <span class=\"keyword\">new</span> Post(<span class=\"built_in\">this</span>);</span><br></pre></td></tr></table></figure>\n\n<p>然后发现它是在同级目录下的post.js, 发现了这个post的create()方法的定义:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// post的create方法:</span></span><br><span class=\"line\"><span class=\"comment\">// 省略前面的代码...</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.all([</span><br><span class=\"line\">  <span class=\"comment\">// Get the post path</span></span><br><span class=\"line\">  ctx.execFilter(<span class=\"string\">&#x27;new_post_path&#x27;</span>, data, &#123;</span><br><span class=\"line\">    <span class=\"attr\">args</span>: [replace],</span><br><span class=\"line\">    <span class=\"attr\">context</span>: ctx</span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\">  <span class=\"built_in\">this</span>._renderScaffold(data)</span><br><span class=\"line\">]) <span class=\"comment\">//... 省略后面的代码</span></span><br></pre></td></tr></table></figure>\n\n<p>这里我发现他在调用了ctx的execfileter()方法之后就可以获取到path, 而ctx则是在<code>hexo/index.js</code>中初始化时传入的this, 那么也就是说execfilter()方法还是定义在<code>hexo/index.js</code>中:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hexo.prototype.execFilter = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">type, data, options</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.extend.filter.exec(type, data, options);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>这里的<code>this.extend</code>被定义到了第57行:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">this</span>.extend = &#123;</span><br><span class=\"line\">  <span class=\"attr\">console</span>: <span class=\"keyword\">new</span> extend.Console(),</span><br><span class=\"line\">  <span class=\"attr\">deployer</span>: <span class=\"keyword\">new</span> extend.Deployer(),</span><br><span class=\"line\">  <span class=\"attr\">filter</span>: <span class=\"keyword\">new</span> extend.Filter(),</span><br><span class=\"line\">  <span class=\"attr\">generator</span>: <span class=\"keyword\">new</span> extend.Generator(),</span><br><span class=\"line\">  <span class=\"attr\">helper</span>: <span class=\"keyword\">new</span> extend.Helper(),</span><br><span class=\"line\">  <span class=\"attr\">migrator</span>: <span class=\"keyword\">new</span> extend.Migrator(),</span><br><span class=\"line\">  <span class=\"attr\">processor</span>: <span class=\"keyword\">new</span> extend.Processor(),</span><br><span class=\"line\">  <span class=\"attr\">renderer</span>: <span class=\"keyword\">new</span> extend.Renderer(),</span><br><span class=\"line\">  <span class=\"attr\">tag</span>: <span class=\"keyword\">new</span> extend.Tag()</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>而Filter则是<code>extend</code>文件夹, 这里自不必多说, 不用看就知道<code>extend/index.js</code>里面肯定将其他的js都注册好了, 所以我这里直接去看了filter.js:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Filter.prototype.exec = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">type, data, options = &#123;&#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> filters = <span class=\"built_in\">this</span>.list(type);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ctx = options.context;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> args = options.args || [];</span><br><span class=\"line\"></span><br><span class=\"line\">  args.unshift(data);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.each(filters, <span class=\"function\"><span class=\"params\">filter</span> =&gt;</span> <span class=\"built_in\">Promise</span>.method(filter).apply(ctx, args).then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</span><br><span class=\"line\">    args[<span class=\"number\">0</span>] = result == <span class=\"literal\">null</span> ? args[<span class=\"number\">0</span>] : result;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> args[<span class=\"number\">0</span>];</span><br><span class=\"line\">  &#125;)).then(<span class=\"function\">() =&gt;</span> args[<span class=\"number\">0</span>]);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>这里先使用了list()方法使用index.js中传过来的<code>new_post_path</code>初始化了这个变量, 而在list方法中根据store数组中的数据进行判断调用哪一个方法, 我这里console了一下这个Filters, 打印的结果是</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ &#123; [Function: newPostPathFilter] priority: 10 &#125; ]</span><br></pre></td></tr></table></figure>\n\n<p>由此可知使用的方法是newPostPathFilter()来进行添加文件这个操作的, 而在register()方法中对store数组进行了初始化, 那么这个register是在哪里调用的呢? 还有newPostPathFilter()这个方法是在哪里定义的呢? 其实我也不知道, 找了很久, 最后在<code>plugins/filter</code>这个文件夹找到了一些蛛丝马迹:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// plugins/filter/index.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"params\">ctx</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> filter = ctx.extend.filter;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./after_post_render&#x27;</span>)(ctx);</span><br><span class=\"line\">  <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./before_post_render&#x27;</span>)(ctx);</span><br><span class=\"line\">  <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./before_exit&#x27;</span>)(ctx);</span><br><span class=\"line\">  <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./before_generate&#x27;</span>)(ctx);</span><br><span class=\"line\">  <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./template_locals&#x27;</span>)(ctx);</span><br><span class=\"line\"></span><br><span class=\"line\">  filter.register(<span class=\"string\">&#x27;new_post_path&#x27;</span>, <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./new_post_path&#x27;</span>));</span><br><span class=\"line\">  filter.register(<span class=\"string\">&#x27;post_permalink&#x27;</span>, <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./post_permalink&#x27;</span>));</span><br><span class=\"line\">  filter.register(<span class=\"string\">&#x27;after_render:html&#x27;</span>, <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./meta_generator&#x27;</span>));</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>这里可以看到调用了register()方法注册了一些js, 那么我们就可以很容易的想到newPostPathFilter()方法是在<code>new_post_path.js</code>中定义的, 果不其然:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// newPostPathFilter 方法</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (path) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (layout) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">&#x27;page&#x27;</span>:</span><br><span class=\"line\">        target = pathFn.join(sourceDir, path);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">&#x27;draft&#x27;</span>:</span><br><span class=\"line\">        target = pathFn.join(draftDir, path);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        target = pathFn.join(postDir, path);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (slug) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (layout) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">&#x27;page&#x27;</span>:</span><br><span class=\"line\">        target = pathFn.join(sourceDir, slug, <span class=\"string\">&#x27;index&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">&#x27;draft&#x27;</span>:</span><br><span class=\"line\">        target = pathFn.join(draftDir, slug);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">default</span>: &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> date = moment(data.date || <span class=\"built_in\">Date</span>.now());</span><br><span class=\"line\">        <span class=\"keyword\">const</span> keys = <span class=\"built_in\">Object</span>.keys(data);</span><br><span class=\"line\">        <span class=\"keyword\">let</span> key = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">const</span> filenameData = &#123;</span><br><span class=\"line\">          <span class=\"attr\">year</span>: date.format(<span class=\"string\">&#x27;YYYY&#x27;</span>),</span><br><span class=\"line\">          <span class=\"attr\">month</span>: date.format(<span class=\"string\">&#x27;MM&#x27;</span>),</span><br><span class=\"line\">          <span class=\"attr\">i_month</span>: date.format(<span class=\"string\">&#x27;M&#x27;</span>),</span><br><span class=\"line\">          <span class=\"attr\">day</span>: date.format(<span class=\"string\">&#x27;DD&#x27;</span>),</span><br><span class=\"line\">          <span class=\"attr\">i_day</span>: date.format(<span class=\"string\">&#x27;D&#x27;</span>),</span><br><span class=\"line\">          <span class=\"attr\">title</span>: slug</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, len = keys.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">          key = keys[i];</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (!reservedKeys[key]) filenameData[key] = data[key];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(permalink.stringify(</span><br><span class=\"line\">          defaults(filenameData, permalinkDefaults)))</span><br><span class=\"line\"></span><br><span class=\"line\">        target = pathFn.join(postDir, permalink.stringify(</span><br><span class=\"line\">          defaults(filenameData, permalinkDefaults)));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(<span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">&#x27;Either data.path or data.slug is required!&#x27;</span>));</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面是<code>new_post_path.js</code>中的部分代码, 这里有一个判断, 然后我发现如果是新建文件的话, 他会走第二个判断, 随即我console了slug的值, 然后绝望的发现, 这个slug已经被转化好了! 天啊, 什么时候转化的啊! 但是我依旧没有放弃, 回到之前的步骤看看有没有遗漏, 但是也不是白折腾, 至少我知道了转化的变量的名字, 通过我不懈的努力, 终于被我发现在<code>hexo/post.js</code>中的create方法里, 有一句话是用来初始化data.slug的:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data.slug = slugize((data.slug || data.title).toString(), &#123;<span class=\"attr\">transform</span>: config.filename_case&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>哈哈, 就是你了! 我看了一下这个slugize, 是hexo-util中的一个js, 然后我打开了这个js, 稳了! 就是他!</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> rSpecial = <span class=\"regexp\">/[\\s~`!@#\\$%\\^&amp;\\*\\(\\)\\\\\\/\\-_\\+=\\[\\]\\&#123;\\&#125;\\|;:&quot;&#x27;&lt;&gt;,\\.\\?]+/g</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">slugize</span>(<span class=\"params\">str, options</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> str !== <span class=\"string\">&#x27;string&#x27;</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">&#x27;str must be a string!&#x27;</span>);</span><br><span class=\"line\">  options = options || &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> separator = options.separator || <span class=\"string\">&#x27;-&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> escapedSep = escapeRegExp(separator);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> result = escapeDiacritic(str)</span><br><span class=\"line\">    <span class=\"comment\">// Remove control characters</span></span><br><span class=\"line\">    .replace(rControl, <span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\">// Replace special characters</span></span><br><span class=\"line\">    .replace(rSpecial, separator)</span><br><span class=\"line\">    <span class=\"comment\">// Remove continous separators</span></span><br><span class=\"line\">    .replace(<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(escapedSep + <span class=\"string\">&#x27;&#123;2,&#125;&#x27;</span>, <span class=\"string\">&#x27;g&#x27;</span>), separator)</span><br><span class=\"line\">    <span class=\"comment\">// Remove prefixing and trailing separtors</span></span><br><span class=\"line\">    .replace(<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">&#x27;^&#x27;</span> + escapedSep + <span class=\"string\">&#x27;+|&#x27;</span> + escapedSep + <span class=\"string\">&#x27;+$&#x27;</span>, <span class=\"string\">&#x27;g&#x27;</span>), <span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (options.transform)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> result.toLowerCase();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> result.toUpperCase();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里的rSpecial是用来存储一些特殊字符的, 在slugize中进行替换, 那么我只需要将rSpecial中的<code>\\\\</code>和<code>\\/</code>这两个符号去掉, 大功告成~</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>其实没什么好总结的, 感觉nodejs还是不太好调试, 我这里全程都是用的notpad++来查看代码的, 并不能像java一样可以ctrl+单击到某一个方法实现, 嗯, 其实也还好, js居然也可以写这么复杂的框架了, 感觉自己的学习之路还很漫长啊…</p>"},{"title":"DNS 和 DHCP 的区别以及原理","date":"2019-09-14T10:55:00.000Z","_content":"\nDHCP 是一种能够将 ip 地址和 相关的 ip 信息分配给网络中计算机的协议; 而 DNS 技术可以将域名转换成 ip 地址。这都是为了确保计算机可以找到合适的站点。虽然上面一句话概括了 DNS 和 DHCP 的定义, 但是他们具体的工作原理是怎么样的? 它们又有什么区别? 下面将逐一介绍。\n\n<!--more-->\n\n# DHCP 是什么?\n\nDHCP (Dynamic Host Configuration Protocol) 即动态主机配置协议。主要用于快速给计算机分配 ip 地址。此外, 它还可以给设备正确的配置子网掩码, 默认网关和 DNS 服务器信息。由于这些功能, 现在几乎每台连接到网络的机器都配置了 DHCP。例如计算机, 千兆网交换机, 网络交换机等。在网络交换机上使用 DHCP 可以提供许多有价值的 TCP/IP 服务, 例如自动升级客户端系统上的软件。因此, 现在大多数的网络交换机都支持 DHCP。\n\n# DHCP 如何工作?\n\nDHCP 的工作原理是将 IP 地址和 IP 信息 \"出租\" 给设备一段时间。因此 DHCP 客户端必须通过一系列 DHCP 消息与 DHCP 服务器进行交互, 主要包括 DHCP DISCOVER, DHCP OFFER, DHCP REQUEST, DHCP ACK。如下图所示:\n\n![dhcp工作原理](/images/web/dhcp/dhcp.jpg)\n\n首先客户端发送广播数据包 DHCP DISCOVER(包括计算机的 MAC 地址和名称), 便于 DHCP 相应。它基本上在说 \"我正在寻找一个可以租用 ip 地址的 DHCP 服务器\"。服务器接收 DHCP DISCOVER 并使用 DHCP OFFER 响应, 然后客户端回复 DHCP REQUEST, 这意味着他想接收 DHCP 服务器发送的配置。获取此 DHCP REQUEST 消息后, DHCP 服务器将发送 DHCP ACK 消息给 DHCP 客户端, 告知 DHCP 客户端可以使用分给他的 ip 地址。\n\n# DNS 是什么?\n\nDNS(Domain Name System) 即域名系统。由解析器和域名服务器构成。如上述所提, 他们可以匹配可读名称和他们相关的 ip 地址。DNS 是网络基础架构中的重要组件, 它在提供内容和应用程序的同时确保了高可用性和用户响应时间。若是 DNS 失败, 则大多数应用程序将无法运行。\n\n# DNS 如何工作?\n\n如下图所示:\n\n![DNS工作原理](http://image109.360doc.com/DownloadImg/2018/10/1207/146713824_2_20181012072214527)\n\n当我们在浏览器中输入域名的时候, 例如 [icecreamzhao.github.io](https://icecreamzhao.github.io), 浏览器通常不知道该域名在哪里。因此, 它向本地 DNS 服务器 (LDNS) 发送查询。询问关于该域名的 ip 地址是多少的问题。如果 LDNS 没有记录, 他将在互联网中搜索查找出谁拥有该域名。首先, LDNS 进入其中一个根服务器, 将其定向到 .io DNS 服务器。然后该服务器找到拥有者并通知 LDNS 该域名的名称服务器(NS)的记录。LDNS 通过请求包含该域名的 ip 地址的地址记录来响应。LDNS 收到 ip 地址记录后, 会将 ip 地址发送给浏览器, 并缓存该记录以备将来参考。\n","source":"_posts/front_skill_experience/base/dns-dhcp.md","raw":"---\ntitle: DNS 和 DHCP 的区别以及原理\ndate: 2019-09-14 18:55:00\ncategories:\n- 前端技巧/经验\n- 基础\ntags:\n- web\n- dns\n- dhcp\n---\n\nDHCP 是一种能够将 ip 地址和 相关的 ip 信息分配给网络中计算机的协议; 而 DNS 技术可以将域名转换成 ip 地址。这都是为了确保计算机可以找到合适的站点。虽然上面一句话概括了 DNS 和 DHCP 的定义, 但是他们具体的工作原理是怎么样的? 它们又有什么区别? 下面将逐一介绍。\n\n<!--more-->\n\n# DHCP 是什么?\n\nDHCP (Dynamic Host Configuration Protocol) 即动态主机配置协议。主要用于快速给计算机分配 ip 地址。此外, 它还可以给设备正确的配置子网掩码, 默认网关和 DNS 服务器信息。由于这些功能, 现在几乎每台连接到网络的机器都配置了 DHCP。例如计算机, 千兆网交换机, 网络交换机等。在网络交换机上使用 DHCP 可以提供许多有价值的 TCP/IP 服务, 例如自动升级客户端系统上的软件。因此, 现在大多数的网络交换机都支持 DHCP。\n\n# DHCP 如何工作?\n\nDHCP 的工作原理是将 IP 地址和 IP 信息 \"出租\" 给设备一段时间。因此 DHCP 客户端必须通过一系列 DHCP 消息与 DHCP 服务器进行交互, 主要包括 DHCP DISCOVER, DHCP OFFER, DHCP REQUEST, DHCP ACK。如下图所示:\n\n![dhcp工作原理](/images/web/dhcp/dhcp.jpg)\n\n首先客户端发送广播数据包 DHCP DISCOVER(包括计算机的 MAC 地址和名称), 便于 DHCP 相应。它基本上在说 \"我正在寻找一个可以租用 ip 地址的 DHCP 服务器\"。服务器接收 DHCP DISCOVER 并使用 DHCP OFFER 响应, 然后客户端回复 DHCP REQUEST, 这意味着他想接收 DHCP 服务器发送的配置。获取此 DHCP REQUEST 消息后, DHCP 服务器将发送 DHCP ACK 消息给 DHCP 客户端, 告知 DHCP 客户端可以使用分给他的 ip 地址。\n\n# DNS 是什么?\n\nDNS(Domain Name System) 即域名系统。由解析器和域名服务器构成。如上述所提, 他们可以匹配可读名称和他们相关的 ip 地址。DNS 是网络基础架构中的重要组件, 它在提供内容和应用程序的同时确保了高可用性和用户响应时间。若是 DNS 失败, 则大多数应用程序将无法运行。\n\n# DNS 如何工作?\n\n如下图所示:\n\n![DNS工作原理](http://image109.360doc.com/DownloadImg/2018/10/1207/146713824_2_20181012072214527)\n\n当我们在浏览器中输入域名的时候, 例如 [icecreamzhao.github.io](https://icecreamzhao.github.io), 浏览器通常不知道该域名在哪里。因此, 它向本地 DNS 服务器 (LDNS) 发送查询。询问关于该域名的 ip 地址是多少的问题。如果 LDNS 没有记录, 他将在互联网中搜索查找出谁拥有该域名。首先, LDNS 进入其中一个根服务器, 将其定向到 .io DNS 服务器。然后该服务器找到拥有者并通知 LDNS 该域名的名称服务器(NS)的记录。LDNS 通过请求包含该域名的 ip 地址的地址记录来响应。LDNS 收到 ip 地址记录后, 会将 ip 地址发送给浏览器, 并缓存该记录以备将来参考。\n","slug":"front_skill_experience/base/dns-dhcp","published":1,"updated":"2022-10-07T12:54:07.033Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejjn000v3vsb8iz80v8j","content":"<p>DHCP 是一种能够将 ip 地址和 相关的 ip 信息分配给网络中计算机的协议; 而 DNS 技术可以将域名转换成 ip 地址。这都是为了确保计算机可以找到合适的站点。虽然上面一句话概括了 DNS 和 DHCP 的定义, 但是他们具体的工作原理是怎么样的? 它们又有什么区别? 下面将逐一介绍。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"DHCP-是什么\"><a href=\"#DHCP-是什么\" class=\"headerlink\" title=\"DHCP 是什么?\"></a>DHCP 是什么?</h1><p>DHCP (Dynamic Host Configuration Protocol) 即动态主机配置协议。主要用于快速给计算机分配 ip 地址。此外, 它还可以给设备正确的配置子网掩码, 默认网关和 DNS 服务器信息。由于这些功能, 现在几乎每台连接到网络的机器都配置了 DHCP。例如计算机, 千兆网交换机, 网络交换机等。在网络交换机上使用 DHCP 可以提供许多有价值的 TCP&#x2F;IP 服务, 例如自动升级客户端系统上的软件。因此, 现在大多数的网络交换机都支持 DHCP。</p>\n<h1 id=\"DHCP-如何工作\"><a href=\"#DHCP-如何工作\" class=\"headerlink\" title=\"DHCP 如何工作?\"></a>DHCP 如何工作?</h1><p>DHCP 的工作原理是将 IP 地址和 IP 信息 “出租” 给设备一段时间。因此 DHCP 客户端必须通过一系列 DHCP 消息与 DHCP 服务器进行交互, 主要包括 DHCP DISCOVER, DHCP OFFER, DHCP REQUEST, DHCP ACK。如下图所示:</p>\n<p><img src=\"/images/web/dhcp/dhcp.jpg\" alt=\"dhcp工作原理\"></p>\n<p>首先客户端发送广播数据包 DHCP DISCOVER(包括计算机的 MAC 地址和名称), 便于 DHCP 相应。它基本上在说 “我正在寻找一个可以租用 ip 地址的 DHCP 服务器”。服务器接收 DHCP DISCOVER 并使用 DHCP OFFER 响应, 然后客户端回复 DHCP REQUEST, 这意味着他想接收 DHCP 服务器发送的配置。获取此 DHCP REQUEST 消息后, DHCP 服务器将发送 DHCP ACK 消息给 DHCP 客户端, 告知 DHCP 客户端可以使用分给他的 ip 地址。</p>\n<h1 id=\"DNS-是什么\"><a href=\"#DNS-是什么\" class=\"headerlink\" title=\"DNS 是什么?\"></a>DNS 是什么?</h1><p>DNS(Domain Name System) 即域名系统。由解析器和域名服务器构成。如上述所提, 他们可以匹配可读名称和他们相关的 ip 地址。DNS 是网络基础架构中的重要组件, 它在提供内容和应用程序的同时确保了高可用性和用户响应时间。若是 DNS 失败, 则大多数应用程序将无法运行。</p>\n<h1 id=\"DNS-如何工作\"><a href=\"#DNS-如何工作\" class=\"headerlink\" title=\"DNS 如何工作?\"></a>DNS 如何工作?</h1><p>如下图所示:</p>\n<p><img src=\"http://image109.360doc.com/DownloadImg/2018/10/1207/146713824_2_20181012072214527\" alt=\"DNS工作原理\"></p>\n<p>当我们在浏览器中输入域名的时候, 例如 <a href=\"https://icecreamzhao.github.io/\">icecreamzhao.github.io</a>, 浏览器通常不知道该域名在哪里。因此, 它向本地 DNS 服务器 (LDNS) 发送查询。询问关于该域名的 ip 地址是多少的问题。如果 LDNS 没有记录, 他将在互联网中搜索查找出谁拥有该域名。首先, LDNS 进入其中一个根服务器, 将其定向到 .io DNS 服务器。然后该服务器找到拥有者并通知 LDNS 该域名的名称服务器(NS)的记录。LDNS 通过请求包含该域名的 ip 地址的地址记录来响应。LDNS 收到 ip 地址记录后, 会将 ip 地址发送给浏览器, 并缓存该记录以备将来参考。</p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<p>DHCP 是一种能够将 ip 地址和 相关的 ip 信息分配给网络中计算机的协议; 而 DNS 技术可以将域名转换成 ip 地址。这都是为了确保计算机可以找到合适的站点。虽然上面一句话概括了 DNS 和 DHCP 的定义, 但是他们具体的工作原理是怎么样的? 它们又有什么区别? 下面将逐一介绍。</p>","more":"<h1 id=\"DHCP-是什么\"><a href=\"#DHCP-是什么\" class=\"headerlink\" title=\"DHCP 是什么?\"></a>DHCP 是什么?</h1><p>DHCP (Dynamic Host Configuration Protocol) 即动态主机配置协议。主要用于快速给计算机分配 ip 地址。此外, 它还可以给设备正确的配置子网掩码, 默认网关和 DNS 服务器信息。由于这些功能, 现在几乎每台连接到网络的机器都配置了 DHCP。例如计算机, 千兆网交换机, 网络交换机等。在网络交换机上使用 DHCP 可以提供许多有价值的 TCP&#x2F;IP 服务, 例如自动升级客户端系统上的软件。因此, 现在大多数的网络交换机都支持 DHCP。</p>\n<h1 id=\"DHCP-如何工作\"><a href=\"#DHCP-如何工作\" class=\"headerlink\" title=\"DHCP 如何工作?\"></a>DHCP 如何工作?</h1><p>DHCP 的工作原理是将 IP 地址和 IP 信息 “出租” 给设备一段时间。因此 DHCP 客户端必须通过一系列 DHCP 消息与 DHCP 服务器进行交互, 主要包括 DHCP DISCOVER, DHCP OFFER, DHCP REQUEST, DHCP ACK。如下图所示:</p>\n<p><img src=\"/images/web/dhcp/dhcp.jpg\" alt=\"dhcp工作原理\"></p>\n<p>首先客户端发送广播数据包 DHCP DISCOVER(包括计算机的 MAC 地址和名称), 便于 DHCP 相应。它基本上在说 “我正在寻找一个可以租用 ip 地址的 DHCP 服务器”。服务器接收 DHCP DISCOVER 并使用 DHCP OFFER 响应, 然后客户端回复 DHCP REQUEST, 这意味着他想接收 DHCP 服务器发送的配置。获取此 DHCP REQUEST 消息后, DHCP 服务器将发送 DHCP ACK 消息给 DHCP 客户端, 告知 DHCP 客户端可以使用分给他的 ip 地址。</p>\n<h1 id=\"DNS-是什么\"><a href=\"#DNS-是什么\" class=\"headerlink\" title=\"DNS 是什么?\"></a>DNS 是什么?</h1><p>DNS(Domain Name System) 即域名系统。由解析器和域名服务器构成。如上述所提, 他们可以匹配可读名称和他们相关的 ip 地址。DNS 是网络基础架构中的重要组件, 它在提供内容和应用程序的同时确保了高可用性和用户响应时间。若是 DNS 失败, 则大多数应用程序将无法运行。</p>\n<h1 id=\"DNS-如何工作\"><a href=\"#DNS-如何工作\" class=\"headerlink\" title=\"DNS 如何工作?\"></a>DNS 如何工作?</h1><p>如下图所示:</p>\n<p><img src=\"http://image109.360doc.com/DownloadImg/2018/10/1207/146713824_2_20181012072214527\" alt=\"DNS工作原理\"></p>\n<p>当我们在浏览器中输入域名的时候, 例如 <a href=\"https://icecreamzhao.github.io/\">icecreamzhao.github.io</a>, 浏览器通常不知道该域名在哪里。因此, 它向本地 DNS 服务器 (LDNS) 发送查询。询问关于该域名的 ip 地址是多少的问题。如果 LDNS 没有记录, 他将在互联网中搜索查找出谁拥有该域名。首先, LDNS 进入其中一个根服务器, 将其定向到 .io DNS 服务器。然后该服务器找到拥有者并通知 LDNS 该域名的名称服务器(NS)的记录。LDNS 通过请求包含该域名的 ip 地址的地址记录来响应。LDNS 收到 ip 地址记录后, 会将 ip 地址发送给浏览器, 并缓存该记录以备将来参考。</p>"},{"title":"微信小程序的配置介绍","date":"2019-03-24T01:26:32.000Z","_content":"\n# 总结\n\n本篇博客介绍了各个配置文件可以设置的一些选项以及含义\n<!--more-->\n\n# 全局配置文件介绍\n\napp.json\n\n| 属性 | 含义 |\n| :--- | :--- |\n| pages | 可以注册小程序的所有的页面 |\n| tabBar | 注册小程序的所有的tab |\n| networkTimeout | 可以设置网络请求的超时时间 |\n| debug | 可以开启debug模式, 在微信调试控制台中打印调试信息 |\n\n# 单独页面的配置文件介绍\n\n以下所有的元素, 全局配置文件中也可以进行配置\n\n| 属性 | 含义 |\n| :--- | :--- |\n| navigationBarBackgroundColor | 导航栏的背景颜色 |\n| navigationBarTextStyle | 导航栏的标题颜色 |\n| navigationBarTitleText | 导航栏的标题文字内容 | \n\n**窗体表现**\n\n| 属性 | 含义 |\n| :--- | :--- |\n| backgroundColor | 窗体背景颜色 |\n| backgroundTextStyle | 窗体下拉时文字的样式 |\n| onReachButtonDistance | 上拉事件执行 |\n| enablePullDownRefresh | 可以设置全局窗体下拉刷新的表现 |\n\ndisableScroll\n\n> 可以设置页面是否开启滚动\n\n只有单独页面可以设置此选项\n","source":"_posts/front_skill_experience/miniProgram/config-descrition.md","raw":"---\ntitle: 微信小程序的配置介绍\ndate: 2019-03-24 09:26:32\ncategories:\n- 前端技巧/经验\n- 微信小程序\ntags:\n- 微信小程序\n---\n\n# 总结\n\n本篇博客介绍了各个配置文件可以设置的一些选项以及含义\n<!--more-->\n\n# 全局配置文件介绍\n\napp.json\n\n| 属性 | 含义 |\n| :--- | :--- |\n| pages | 可以注册小程序的所有的页面 |\n| tabBar | 注册小程序的所有的tab |\n| networkTimeout | 可以设置网络请求的超时时间 |\n| debug | 可以开启debug模式, 在微信调试控制台中打印调试信息 |\n\n# 单独页面的配置文件介绍\n\n以下所有的元素, 全局配置文件中也可以进行配置\n\n| 属性 | 含义 |\n| :--- | :--- |\n| navigationBarBackgroundColor | 导航栏的背景颜色 |\n| navigationBarTextStyle | 导航栏的标题颜色 |\n| navigationBarTitleText | 导航栏的标题文字内容 | \n\n**窗体表现**\n\n| 属性 | 含义 |\n| :--- | :--- |\n| backgroundColor | 窗体背景颜色 |\n| backgroundTextStyle | 窗体下拉时文字的样式 |\n| onReachButtonDistance | 上拉事件执行 |\n| enablePullDownRefresh | 可以设置全局窗体下拉刷新的表现 |\n\ndisableScroll\n\n> 可以设置页面是否开启滚动\n\n只有单独页面可以设置此选项\n","slug":"front_skill_experience/miniProgram/config-descrition","published":1,"updated":"2022-10-03T02:25:46.493Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejjs000z3vsbe2n5hnku","content":"<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>本篇博客介绍了各个配置文件可以设置的一些选项以及含义</p>\n<span id=\"more\"></span>\n\n<h1 id=\"全局配置文件介绍\"><a href=\"#全局配置文件介绍\" class=\"headerlink\" title=\"全局配置文件介绍\"></a>全局配置文件介绍</h1><p>app.json</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">属性</th>\n<th align=\"left\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">pages</td>\n<td align=\"left\">可以注册小程序的所有的页面</td>\n</tr>\n<tr>\n<td align=\"left\">tabBar</td>\n<td align=\"left\">注册小程序的所有的tab</td>\n</tr>\n<tr>\n<td align=\"left\">networkTimeout</td>\n<td align=\"left\">可以设置网络请求的超时时间</td>\n</tr>\n<tr>\n<td align=\"left\">debug</td>\n<td align=\"left\">可以开启debug模式, 在微信调试控制台中打印调试信息</td>\n</tr>\n</tbody></table>\n<h1 id=\"单独页面的配置文件介绍\"><a href=\"#单独页面的配置文件介绍\" class=\"headerlink\" title=\"单独页面的配置文件介绍\"></a>单独页面的配置文件介绍</h1><p>以下所有的元素, 全局配置文件中也可以进行配置</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">属性</th>\n<th align=\"left\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">navigationBarBackgroundColor</td>\n<td align=\"left\">导航栏的背景颜色</td>\n</tr>\n<tr>\n<td align=\"left\">navigationBarTextStyle</td>\n<td align=\"left\">导航栏的标题颜色</td>\n</tr>\n<tr>\n<td align=\"left\">navigationBarTitleText</td>\n<td align=\"left\">导航栏的标题文字内容</td>\n</tr>\n</tbody></table>\n<p><strong>窗体表现</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">属性</th>\n<th align=\"left\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">backgroundColor</td>\n<td align=\"left\">窗体背景颜色</td>\n</tr>\n<tr>\n<td align=\"left\">backgroundTextStyle</td>\n<td align=\"left\">窗体下拉时文字的样式</td>\n</tr>\n<tr>\n<td align=\"left\">onReachButtonDistance</td>\n<td align=\"left\">上拉事件执行</td>\n</tr>\n<tr>\n<td align=\"left\">enablePullDownRefresh</td>\n<td align=\"left\">可以设置全局窗体下拉刷新的表现</td>\n</tr>\n</tbody></table>\n<p>disableScroll</p>\n<blockquote>\n<p>可以设置页面是否开启滚动</p>\n</blockquote>\n<p>只有单独页面可以设置此选项</p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>本篇博客介绍了各个配置文件可以设置的一些选项以及含义</p>","more":"<h1 id=\"全局配置文件介绍\"><a href=\"#全局配置文件介绍\" class=\"headerlink\" title=\"全局配置文件介绍\"></a>全局配置文件介绍</h1><p>app.json</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">属性</th>\n<th align=\"left\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">pages</td>\n<td align=\"left\">可以注册小程序的所有的页面</td>\n</tr>\n<tr>\n<td align=\"left\">tabBar</td>\n<td align=\"left\">注册小程序的所有的tab</td>\n</tr>\n<tr>\n<td align=\"left\">networkTimeout</td>\n<td align=\"left\">可以设置网络请求的超时时间</td>\n</tr>\n<tr>\n<td align=\"left\">debug</td>\n<td align=\"left\">可以开启debug模式, 在微信调试控制台中打印调试信息</td>\n</tr>\n</tbody></table>\n<h1 id=\"单独页面的配置文件介绍\"><a href=\"#单独页面的配置文件介绍\" class=\"headerlink\" title=\"单独页面的配置文件介绍\"></a>单独页面的配置文件介绍</h1><p>以下所有的元素, 全局配置文件中也可以进行配置</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">属性</th>\n<th align=\"left\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">navigationBarBackgroundColor</td>\n<td align=\"left\">导航栏的背景颜色</td>\n</tr>\n<tr>\n<td align=\"left\">navigationBarTextStyle</td>\n<td align=\"left\">导航栏的标题颜色</td>\n</tr>\n<tr>\n<td align=\"left\">navigationBarTitleText</td>\n<td align=\"left\">导航栏的标题文字内容</td>\n</tr>\n</tbody></table>\n<p><strong>窗体表现</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">属性</th>\n<th align=\"left\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">backgroundColor</td>\n<td align=\"left\">窗体背景颜色</td>\n</tr>\n<tr>\n<td align=\"left\">backgroundTextStyle</td>\n<td align=\"left\">窗体下拉时文字的样式</td>\n</tr>\n<tr>\n<td align=\"left\">onReachButtonDistance</td>\n<td align=\"left\">上拉事件执行</td>\n</tr>\n<tr>\n<td align=\"left\">enablePullDownRefresh</td>\n<td align=\"left\">可以设置全局窗体下拉刷新的表现</td>\n</tr>\n</tbody></table>\n<p>disableScroll</p>\n<blockquote>\n<p>可以设置页面是否开启滚动</p>\n</blockquote>\n<p>只有单独页面可以设置此选项</p>"},{"title":"关于微信小程序的canvas","date":"2019-06-09T02:45:14.000Z","_content":"\n# 目录\n\n[在canvas上显示图片](#在canvas上显示图片)\n[在canvas上画图](#在canvas上画图)\n\n# 在canvas上显示图片\n\n首先, 我们需要一个canvas的页面元素:\n\n<!--more-->\n\n```html\n<!-- canvas.wxml -->\n<canvas style=\"width: {{canvasWidth}}px; height: {{canvasHeight}}px;\" canvas-id=\"firstCanvas\"></canvas>\n```\n\n> 这里我们采用了canvas自适应屏幕的方案\n\n然后js里我们需要这些数据:\n\n```js\nPage({\n  data: {\n    pictureUrlTmp: '',\n    pictureUrl: '',\n    canvasHeight: 0,\n    canvasWidth: 0,\n  }\n})\n```\n\n> pictureUrlTmp 是本地缓存图片的路径\n\n这里需要说明, 在真机上经过测试之后发现, 显示图片需要先将图片下载下来, 缓存到本地之后才可以正常显示。\n\n那么我们就来写一个downloadFile的方法:\n\n```js\ndownloadF: function (appPictureUrl, that) {\n  return new Promise(function (resolve, reject) {\n    wx.downloadFile({\n      url: appPictureUrl,\n      success(res) {\n        if (res.statusCode == 200) {\n          console.log(res.tempFilePath)\n          that.setData({\n            pictureUrlTmp: res.tempFilePath,\n            pictureUrl: appPictureUrl\n          })\n          resolve(res.tempFilePath);\n        }\n      }\n    })\n  })\n}\n```\n\n由于我们需要先将文件下载好, 在显示, 所以我们这里使用了promise。\n\n接下来我们需要将图片显示出来:\n\n```js\nonReady: function () {\n  var that = this\n  var myCanvasWidth\n  var myCanvasHeight\n  wx.getSystemInfo({\n    //获取系统信息成功，将系统窗口的宽高赋给页面的宽高  \n    success: function (res) {\n      myCanvasHeight = res.windowHeight\n      myCanvasWidth = res.windowWidth\n    }\n  })\n  that.setData({\n    canvasWidth: myCanvasWidth,\n    canvasHeight: myCanvasHeight\n  })\n\n  var context = wx.createCanvasContext('firstCanvas', this)\n  that.downloadF(appPictureUrl, that).then(res => {\n    console.log(res)\n    context.drawImage(that.__data__.pictureUrlTmp, 0, 0, myCanvasWidth, myCanvasHeight))\n    context.stroke()\n    context.draw()\n  })\n}\n```\n\n> 这里将全局变量的pictureUrl下载下来, 然后画到画布上\n\n# 在canvas上画图\n\n这个官方文档比较全, 我这边只是简单做个介绍。这里是[官方文档地址](https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasContext.html)。\n\n```js\n// 按照上面的步骤已经获取到了context:\n\ncontext.setStrokeStyle('#000')\ncontext.setLineWidth(2)\ncontext.moveTo(0, 0);\ncontext.lineTo(0, 100);\ncontext.stroke()\ncontext.draw()\n```\n","source":"_posts/front_skill_experience/miniProgram/draw.md","raw":"---\ntitle: 关于微信小程序的canvas\ndate: 2019-06-09 10:45:14\ncategories:\n- 前端技巧/经验\n- 微信小程序\ntags:\n- 微信小程序\n- canvas\n---\n\n# 目录\n\n[在canvas上显示图片](#在canvas上显示图片)\n[在canvas上画图](#在canvas上画图)\n\n# 在canvas上显示图片\n\n首先, 我们需要一个canvas的页面元素:\n\n<!--more-->\n\n```html\n<!-- canvas.wxml -->\n<canvas style=\"width: {{canvasWidth}}px; height: {{canvasHeight}}px;\" canvas-id=\"firstCanvas\"></canvas>\n```\n\n> 这里我们采用了canvas自适应屏幕的方案\n\n然后js里我们需要这些数据:\n\n```js\nPage({\n  data: {\n    pictureUrlTmp: '',\n    pictureUrl: '',\n    canvasHeight: 0,\n    canvasWidth: 0,\n  }\n})\n```\n\n> pictureUrlTmp 是本地缓存图片的路径\n\n这里需要说明, 在真机上经过测试之后发现, 显示图片需要先将图片下载下来, 缓存到本地之后才可以正常显示。\n\n那么我们就来写一个downloadFile的方法:\n\n```js\ndownloadF: function (appPictureUrl, that) {\n  return new Promise(function (resolve, reject) {\n    wx.downloadFile({\n      url: appPictureUrl,\n      success(res) {\n        if (res.statusCode == 200) {\n          console.log(res.tempFilePath)\n          that.setData({\n            pictureUrlTmp: res.tempFilePath,\n            pictureUrl: appPictureUrl\n          })\n          resolve(res.tempFilePath);\n        }\n      }\n    })\n  })\n}\n```\n\n由于我们需要先将文件下载好, 在显示, 所以我们这里使用了promise。\n\n接下来我们需要将图片显示出来:\n\n```js\nonReady: function () {\n  var that = this\n  var myCanvasWidth\n  var myCanvasHeight\n  wx.getSystemInfo({\n    //获取系统信息成功，将系统窗口的宽高赋给页面的宽高  \n    success: function (res) {\n      myCanvasHeight = res.windowHeight\n      myCanvasWidth = res.windowWidth\n    }\n  })\n  that.setData({\n    canvasWidth: myCanvasWidth,\n    canvasHeight: myCanvasHeight\n  })\n\n  var context = wx.createCanvasContext('firstCanvas', this)\n  that.downloadF(appPictureUrl, that).then(res => {\n    console.log(res)\n    context.drawImage(that.__data__.pictureUrlTmp, 0, 0, myCanvasWidth, myCanvasHeight))\n    context.stroke()\n    context.draw()\n  })\n}\n```\n\n> 这里将全局变量的pictureUrl下载下来, 然后画到画布上\n\n# 在canvas上画图\n\n这个官方文档比较全, 我这边只是简单做个介绍。这里是[官方文档地址](https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasContext.html)。\n\n```js\n// 按照上面的步骤已经获取到了context:\n\ncontext.setStrokeStyle('#000')\ncontext.setLineWidth(2)\ncontext.moveTo(0, 0);\ncontext.lineTo(0, 100);\ncontext.stroke()\ncontext.draw()\n```\n","slug":"front_skill_experience/miniProgram/draw","published":1,"updated":"2022-10-03T02:26:28.645Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejjw00103vsb3vv6aayc","content":"<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><p><a href=\"#%E5%9C%A8canvas%E4%B8%8A%E6%98%BE%E7%A4%BA%E5%9B%BE%E7%89%87\">在canvas上显示图片</a><br><a href=\"#%E5%9C%A8canvas%E4%B8%8A%E7%94%BB%E5%9B%BE\">在canvas上画图</a></p>\n<h1 id=\"在canvas上显示图片\"><a href=\"#在canvas上显示图片\" class=\"headerlink\" title=\"在canvas上显示图片\"></a>在canvas上显示图片</h1><p>首先, 我们需要一个canvas的页面元素:</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- canvas.wxml --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width: &#123;&#123;canvasWidth&#125;&#125;px; height: &#123;&#123;canvasHeight&#125;&#125;px;&quot;</span> <span class=\"attr\">canvas-id</span>=<span class=\"string\">&quot;firstCanvas&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这里我们采用了canvas自适应屏幕的方案</p>\n</blockquote>\n<p>然后js里我们需要这些数据:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Page(&#123;</span><br><span class=\"line\">  <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">pictureUrlTmp</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">pictureUrl</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">canvasHeight</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"attr\">canvasWidth</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>pictureUrlTmp 是本地缓存图片的路径</p>\n</blockquote>\n<p>这里需要说明, 在真机上经过测试之后发现, 显示图片需要先将图片下载下来, 缓存到本地之后才可以正常显示。</p>\n<p>那么我们就来写一个downloadFile的方法:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">downloadF: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">appPictureUrl, that</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    wx.downloadFile(&#123;</span><br><span class=\"line\">      <span class=\"attr\">url</span>: appPictureUrl,</span><br><span class=\"line\">      <span class=\"function\"><span class=\"title\">success</span>(<span class=\"params\">res</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (res.statusCode == <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(res.tempFilePath)</span><br><span class=\"line\">          that.setData(&#123;</span><br><span class=\"line\">            <span class=\"attr\">pictureUrlTmp</span>: res.tempFilePath,</span><br><span class=\"line\">            <span class=\"attr\">pictureUrl</span>: appPictureUrl</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">          resolve(res.tempFilePath);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>由于我们需要先将文件下载好, 在显示, 所以我们这里使用了promise。</p>\n<p>接下来我们需要将图片显示出来:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onReady: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> that = <span class=\"built_in\">this</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> myCanvasWidth</span><br><span class=\"line\">  <span class=\"keyword\">var</span> myCanvasHeight</span><br><span class=\"line\">  wx.getSystemInfo(&#123;</span><br><span class=\"line\">    <span class=\"comment\">//获取系统信息成功，将系统窗口的宽高赋给页面的宽高  </span></span><br><span class=\"line\">    <span class=\"attr\">success</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">      myCanvasHeight = res.windowHeight</span><br><span class=\"line\">      myCanvasWidth = res.windowWidth</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  that.setData(&#123;</span><br><span class=\"line\">    <span class=\"attr\">canvasWidth</span>: myCanvasWidth,</span><br><span class=\"line\">    <span class=\"attr\">canvasHeight</span>: myCanvasHeight</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> context = wx.createCanvasContext(<span class=\"string\">&#x27;firstCanvas&#x27;</span>, <span class=\"built_in\">this</span>)</span><br><span class=\"line\">  that.downloadF(appPictureUrl, that).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res)</span><br><span class=\"line\">    context.drawImage(that.__data__.pictureUrlTmp, <span class=\"number\">0</span>, <span class=\"number\">0</span>, myCanvasWidth, myCanvasHeight))</span><br><span class=\"line\">    context.stroke()</span><br><span class=\"line\">    context.draw()</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这里将全局变量的pictureUrl下载下来, 然后画到画布上</p>\n</blockquote>\n<h1 id=\"在canvas上画图\"><a href=\"#在canvas上画图\" class=\"headerlink\" title=\"在canvas上画图\"></a>在canvas上画图</h1><p>这个官方文档比较全, 我这边只是简单做个介绍。这里是<a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasContext.html\">官方文档地址</a>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 按照上面的步骤已经获取到了context:</span></span><br><span class=\"line\"></span><br><span class=\"line\">context.setStrokeStyle(<span class=\"string\">&#x27;#000&#x27;</span>)</span><br><span class=\"line\">context.setLineWidth(<span class=\"number\">2</span>)</span><br><span class=\"line\">context.moveTo(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">context.lineTo(<span class=\"number\">0</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\">context.stroke()</span><br><span class=\"line\">context.draw()</span><br></pre></td></tr></table></figure>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><p><a href=\"#%E5%9C%A8canvas%E4%B8%8A%E6%98%BE%E7%A4%BA%E5%9B%BE%E7%89%87\">在canvas上显示图片</a><br><a href=\"#%E5%9C%A8canvas%E4%B8%8A%E7%94%BB%E5%9B%BE\">在canvas上画图</a></p>\n<h1 id=\"在canvas上显示图片\"><a href=\"#在canvas上显示图片\" class=\"headerlink\" title=\"在canvas上显示图片\"></a>在canvas上显示图片</h1><p>首先, 我们需要一个canvas的页面元素:</p>","more":"<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- canvas.wxml --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width: &#123;&#123;canvasWidth&#125;&#125;px; height: &#123;&#123;canvasHeight&#125;&#125;px;&quot;</span> <span class=\"attr\">canvas-id</span>=<span class=\"string\">&quot;firstCanvas&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这里我们采用了canvas自适应屏幕的方案</p>\n</blockquote>\n<p>然后js里我们需要这些数据:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Page(&#123;</span><br><span class=\"line\">  <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">pictureUrlTmp</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">pictureUrl</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">canvasHeight</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"attr\">canvasWidth</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>pictureUrlTmp 是本地缓存图片的路径</p>\n</blockquote>\n<p>这里需要说明, 在真机上经过测试之后发现, 显示图片需要先将图片下载下来, 缓存到本地之后才可以正常显示。</p>\n<p>那么我们就来写一个downloadFile的方法:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">downloadF: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">appPictureUrl, that</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    wx.downloadFile(&#123;</span><br><span class=\"line\">      <span class=\"attr\">url</span>: appPictureUrl,</span><br><span class=\"line\">      <span class=\"function\"><span class=\"title\">success</span>(<span class=\"params\">res</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (res.statusCode == <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(res.tempFilePath)</span><br><span class=\"line\">          that.setData(&#123;</span><br><span class=\"line\">            <span class=\"attr\">pictureUrlTmp</span>: res.tempFilePath,</span><br><span class=\"line\">            <span class=\"attr\">pictureUrl</span>: appPictureUrl</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">          resolve(res.tempFilePath);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>由于我们需要先将文件下载好, 在显示, 所以我们这里使用了promise。</p>\n<p>接下来我们需要将图片显示出来:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onReady: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> that = <span class=\"built_in\">this</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> myCanvasWidth</span><br><span class=\"line\">  <span class=\"keyword\">var</span> myCanvasHeight</span><br><span class=\"line\">  wx.getSystemInfo(&#123;</span><br><span class=\"line\">    <span class=\"comment\">//获取系统信息成功，将系统窗口的宽高赋给页面的宽高  </span></span><br><span class=\"line\">    <span class=\"attr\">success</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">      myCanvasHeight = res.windowHeight</span><br><span class=\"line\">      myCanvasWidth = res.windowWidth</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  that.setData(&#123;</span><br><span class=\"line\">    <span class=\"attr\">canvasWidth</span>: myCanvasWidth,</span><br><span class=\"line\">    <span class=\"attr\">canvasHeight</span>: myCanvasHeight</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> context = wx.createCanvasContext(<span class=\"string\">&#x27;firstCanvas&#x27;</span>, <span class=\"built_in\">this</span>)</span><br><span class=\"line\">  that.downloadF(appPictureUrl, that).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res)</span><br><span class=\"line\">    context.drawImage(that.__data__.pictureUrlTmp, <span class=\"number\">0</span>, <span class=\"number\">0</span>, myCanvasWidth, myCanvasHeight))</span><br><span class=\"line\">    context.stroke()</span><br><span class=\"line\">    context.draw()</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这里将全局变量的pictureUrl下载下来, 然后画到画布上</p>\n</blockquote>\n<h1 id=\"在canvas上画图\"><a href=\"#在canvas上画图\" class=\"headerlink\" title=\"在canvas上画图\"></a>在canvas上画图</h1><p>这个官方文档比较全, 我这边只是简单做个介绍。这里是<a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasContext.html\">官方文档地址</a>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 按照上面的步骤已经获取到了context:</span></span><br><span class=\"line\"></span><br><span class=\"line\">context.setStrokeStyle(<span class=\"string\">&#x27;#000&#x27;</span>)</span><br><span class=\"line\">context.setLineWidth(<span class=\"number\">2</span>)</span><br><span class=\"line\">context.moveTo(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">context.lineTo(<span class=\"number\">0</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\">context.stroke()</span><br><span class=\"line\">context.draw()</span><br></pre></td></tr></table></figure>"},{"title":"微信小程序的目录结构以及各个文件的用处","date":"2019-03-24T01:02:08.000Z","_content":"\n# 总结\n\n本篇博客介绍了微信小程序的目录结构以及各个文件的作用。\n<!--more-->\n# 微信小程序的目录结构\n\n新建好一个微信小程序之后, 会有很多初始的目录和js文件, 来看看他们具体代表了什么意义。\n\n## 根目录下的四个文件\n\n分别是:\n\n* app.js\n* app.json\n* app.wxss\n* project.config.json\n\napp.js\n\n> 可以通过这个文件注册微信小程序应用\n\napp.json\n\n> 微信小程序应用的全局配置, 比如网络响应时间, 路径等等\n\napp.wxss\n\n> 微信小程序的全局样式\n\n\n## 目录\n\n有三个初始目录, 分别是:\n\n* pages\n* logs\n* utils\n\npages\n\n> 存放着小程序的所有页面, 每个小程序最多由四个文件组成, 分别是js文件, json文件, wxml文件, wxss文件\njs文件可以处理页面的逻辑和数据交互\njson 文件可以配置小程序的配置信息\nwxml 文件可以展示页面的元素和内容\nwxss 文件可以设置页面的样式\n\nutils\n\n> 存放着util.js文件, 存放工具函数, 达到代码复用的目的。\n","source":"_posts/front_skill_experience/miniProgram/first-step.md","raw":"---\ntitle: 微信小程序的目录结构以及各个文件的用处\ndate: 2019-03-24 09:02:08\ncategories:\n- 前端技巧/经验\n- 微信小程序\ntags:\n- 微信小程序\n---\n\n# 总结\n\n本篇博客介绍了微信小程序的目录结构以及各个文件的作用。\n<!--more-->\n# 微信小程序的目录结构\n\n新建好一个微信小程序之后, 会有很多初始的目录和js文件, 来看看他们具体代表了什么意义。\n\n## 根目录下的四个文件\n\n分别是:\n\n* app.js\n* app.json\n* app.wxss\n* project.config.json\n\napp.js\n\n> 可以通过这个文件注册微信小程序应用\n\napp.json\n\n> 微信小程序应用的全局配置, 比如网络响应时间, 路径等等\n\napp.wxss\n\n> 微信小程序的全局样式\n\n\n## 目录\n\n有三个初始目录, 分别是:\n\n* pages\n* logs\n* utils\n\npages\n\n> 存放着小程序的所有页面, 每个小程序最多由四个文件组成, 分别是js文件, json文件, wxml文件, wxss文件\njs文件可以处理页面的逻辑和数据交互\njson 文件可以配置小程序的配置信息\nwxml 文件可以展示页面的元素和内容\nwxss 文件可以设置页面的样式\n\nutils\n\n> 存放着util.js文件, 存放工具函数, 达到代码复用的目的。\n","slug":"front_skill_experience/miniProgram/first-step","published":1,"updated":"2022-10-03T02:26:39.860Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejk100133vsba8w5b5ck","content":"<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>本篇博客介绍了微信小程序的目录结构以及各个文件的作用。</p>\n<span id=\"more\"></span>\n<h1 id=\"微信小程序的目录结构\"><a href=\"#微信小程序的目录结构\" class=\"headerlink\" title=\"微信小程序的目录结构\"></a>微信小程序的目录结构</h1><p>新建好一个微信小程序之后, 会有很多初始的目录和js文件, 来看看他们具体代表了什么意义。</p>\n<h2 id=\"根目录下的四个文件\"><a href=\"#根目录下的四个文件\" class=\"headerlink\" title=\"根目录下的四个文件\"></a>根目录下的四个文件</h2><p>分别是:</p>\n<ul>\n<li>app.js</li>\n<li>app.json</li>\n<li>app.wxss</li>\n<li>project.config.json</li>\n</ul>\n<p>app.js</p>\n<blockquote>\n<p>可以通过这个文件注册微信小程序应用</p>\n</blockquote>\n<p>app.json</p>\n<blockquote>\n<p>微信小程序应用的全局配置, 比如网络响应时间, 路径等等</p>\n</blockquote>\n<p>app.wxss</p>\n<blockquote>\n<p>微信小程序的全局样式</p>\n</blockquote>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><p>有三个初始目录, 分别是:</p>\n<ul>\n<li>pages</li>\n<li>logs</li>\n<li>utils</li>\n</ul>\n<p>pages</p>\n<blockquote>\n<p>存放着小程序的所有页面, 每个小程序最多由四个文件组成, 分别是js文件, json文件, wxml文件, wxss文件<br>js文件可以处理页面的逻辑和数据交互<br>json 文件可以配置小程序的配置信息<br>wxml 文件可以展示页面的元素和内容<br>wxss 文件可以设置页面的样式</p>\n</blockquote>\n<p>utils</p>\n<blockquote>\n<p>存放着util.js文件, 存放工具函数, 达到代码复用的目的。</p>\n</blockquote>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>本篇博客介绍了微信小程序的目录结构以及各个文件的作用。</p>","more":"<h1 id=\"微信小程序的目录结构\"><a href=\"#微信小程序的目录结构\" class=\"headerlink\" title=\"微信小程序的目录结构\"></a>微信小程序的目录结构</h1><p>新建好一个微信小程序之后, 会有很多初始的目录和js文件, 来看看他们具体代表了什么意义。</p>\n<h2 id=\"根目录下的四个文件\"><a href=\"#根目录下的四个文件\" class=\"headerlink\" title=\"根目录下的四个文件\"></a>根目录下的四个文件</h2><p>分别是:</p>\n<ul>\n<li>app.js</li>\n<li>app.json</li>\n<li>app.wxss</li>\n<li>project.config.json</li>\n</ul>\n<p>app.js</p>\n<blockquote>\n<p>可以通过这个文件注册微信小程序应用</p>\n</blockquote>\n<p>app.json</p>\n<blockquote>\n<p>微信小程序应用的全局配置, 比如网络响应时间, 路径等等</p>\n</blockquote>\n<p>app.wxss</p>\n<blockquote>\n<p>微信小程序的全局样式</p>\n</blockquote>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><p>有三个初始目录, 分别是:</p>\n<ul>\n<li>pages</li>\n<li>logs</li>\n<li>utils</li>\n</ul>\n<p>pages</p>\n<blockquote>\n<p>存放着小程序的所有页面, 每个小程序最多由四个文件组成, 分别是js文件, json文件, wxml文件, wxss文件<br>js文件可以处理页面的逻辑和数据交互<br>json 文件可以配置小程序的配置信息<br>wxml 文件可以展示页面的元素和内容<br>wxss 文件可以设置页面的样式</p>\n</blockquote>\n<p>utils</p>\n<blockquote>\n<p>存放着util.js文件, 存放工具函数, 达到代码复用的目的。</p>\n</blockquote>"},{"title":"微信小程序的一些技巧","date":"2019-08-01T05:18:55.000Z","_content":"\n# 前言\n\n最近工作上遇到了关于一些微信小程序开发的业务, 今天把遇到的问题总结一下。\n\n# 目录\n\n* 小程序设置tabbar选中颜色\n* 将溢出的文本用省略号代替\n* 特定区域滚动到顶部时固定\n* 微信小程序select下拉框实现\n* wx.navigateBack() 携带参数返回\n* 微信小程序 选择器picker的使用\n\n<!--more-->\n\n# 小程序设置tabbar选中颜色\n\n```js\n'tabbar': {\n  'selectedColor': '#4da9ff',\n  'list': [\n    {\n      'pagePath': 'pages/index/index',\n      'text': '首页',\n      'iconPath': 'images/index.png',\n      'selectedIconPath': 'images/index_on.png'\n    }\n  ]\n}\n```\n\n`selectedColor`就是被选中tab的字体颜色。\n\n# 将溢出的文本用省略号代替\n\n先来看看效果:\n\n![省略号代替溢出文本](/images/js/miniProgram/ellipsis.png)\n\n比如有一个很长的文本需要展示:\n\n```html\n<view class=\"text-deal\">aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa</view>\n```\n\n但是又只能用一行去显示, 剩下的需要用省略号代替, 那么就可以这样:\n\n```css\n.text-deal{\n  overflow : hidden;\n  text-overflow: ellipsis;\n  display: -webkit-box;\n  /* 这里可以控制显示行数, 1 代表只显示1行, 2 代表显示两行 */\n  -webkit-line-clamp: 1;\n  -webkit-box-orient: vertical;\n  word-break: break-all;\n}\n```\n\n\n# 特定区域滚动到顶部时固定\n\n先来看看效果:\n\n![固定顶部](/images/js/miniProgram/miniprogramFixedTop.gif)\n\n页面部分:\n\n```html\n<scroll-view scroll-y scroll-width-animation style=\"width:100%; height:{{scrollheight}}px\" bindscroll=\"scrollTopFun\">\n  <view wx:for=\"{{arr}}\" wx:for-item=\"item\" wx:key=\"{{item.id}}\">\n    <view>\n      {{item.name}}\n      <view wx:if=\"{{item.id == 10}}\">\n        topppppppppppp\n      </view>\n      <view wx:if=\"{{item.id == 10}}\"  class=\"{{top > 252 ? 'topnav' : ''}}\">\n        我是要固定到顶部的\n      </view>\n      <view wx:if=\"{{item.id == 10}}\">\n        downnnnnnnnnnn\n      </view>\n    </view>\n  </view>\n</scroll-view>\n```\n\njs:\n\n```js\ndata: {\n  arr: [],\n  top: 0,\n  scrollheight: ''\n},\n\nonLoad: function () {\n  // 初始化数组\n  var arrT = new Array();\n  for (var i = 0; i != 50; ++i) {\n    arrT.push({id: i, name: 'abcd'})\n  }\n  this.setData({\n    arr: arrT\n  })\n\n  // 获取屏幕的长度, 将这个长度固定到scroll-view的长度上\n  var me = this;\n  wx.getSystemInfo({\n    success: function (res) {\n      me.setData({\n        scrollheight: res.windowHeight\n      })\n    }\n  })\n},\n\n// 滚动时的调用方法\nscrollTopFun(e) {\n  this.setData({\n    top : e.detail.scrollTop\n  })\n  console.log(e.detail.scrollTop)\n}\n```\n\n最后是样式部分:\n\n```css\n.topnav{\n  position: fixed;\n  top: 0rpx;\n  z-index:99;\n  background: #fff;\n  width: 100%;\n}\n```\n\n# 微信小程序select下拉框实现\n\n先来看下效果:\n\n![下拉框](/images/js/miniProgram/miniprogramSelect.gif)\n\n```html\n<view class=\"select-group\">\n  <view>测试下拉框</view>\n  <view class=\"select-all\">\n    <view class='list-msg2' bindtap='bindShowMsg'>\n      <text>{{tihuoWay}}</text>\n    </view>\n    <view class=\"select_box\" wx:if=\"{{select}}\">\n      <view class=\"select_one\" bindtap=\"mySelect\" data-name=\"1\">下拉1</view>\n      <view class=\"select_one\" bindtap=\"mySelect\" data-name=\"2\">下拉2</view>\n      <view class=\"select_one\" bindtap=\"mySelect\" data-name=\"3\">下拉3</view>\n    </view>\n  </view>\n</view>\n```\n\njs:\n\n```js\ndata: {\n  select: false,\n  tihuoWay: '1'\n},\n\nbindShowMsg() {\n  this.setData({\n    select: !this.data.select\n  })\n},\n\nmySelect(e) {\n  var name = e.currentTarget.dataset.name\n  this.setData({\n    tihuoWay: name,\n    select: false\n  })\n}\n```\n\nwxss:\n\n```css\n.select-group {\n  display: flex;\n  flex-direction: row;\n}\n\n.select-all {\n  display: flex;\n  flex-direction: column;\n}\n\n.select_box {\n  background-color: #eee;\n  padding: 0 10rpx;\n  width: 100rpx;\n  position: absolute;\n  top: 80rpx;\n  z-index: 1;\n  overflow: hidden;\n  animation: myfirst 0.3s;\n}\n\n.list-msg2 {\n  height: 60rpx;\n  width: 100rpx;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  border: 1px solid #ccc;\n  padding: 0 10rpx;\n}\n```\n\n# wx.navigateBack() 携带参数返回 \n\n先来看看效果:\n\n![navigateBack](/images/js/miniProgram/navigateBack.gif)\n\n第一个页面的js:\n\n```js\ndata: {\n  // 获取上个页面返回的数值\n  prePageData: ''\n},\n\ntoNextPage: function() {\n  wx.navigateTo({\n    url: '/pages/prePage/prePage',\n  })\n},\n```\n\n第一个页面的wxml:\n\n```html\n<view bindtap='toNextPage'>到下个页面</view>\n<view>上个页面的东西: {{prePageData}}</view>\n```\n\n第二个页面的js:\n\n```js\nreturnToPrePage: function() {\n  // 获取页面栈\n  var pages = getCurrentPages();\n  // 获取上个页面的实例\n  var prePage = pages[pages.length - 2];\n\n  prePage.setData({\n    prePageData: 'hahaha'\n  })\n\n  wx.navigateBack({\n    delta: 1\n  })\n}\n```\n\n第二个页面的wxml:\n\n```html\n<view bindtap='returnToPrePage'>返回上个页面</view>\n```\n\n# 微信小程序 选择器picker的使用\n\n","source":"_posts/front_skill_experience/miniProgram/some-skills.md","raw":"---\ntitle: 微信小程序的一些技巧\ndate: 2019-08-01 13:18:55\ncategories:\n- 前端技巧/经验\n- 微信小程序\ntags:\n- 微信小程序\n---\n\n# 前言\n\n最近工作上遇到了关于一些微信小程序开发的业务, 今天把遇到的问题总结一下。\n\n# 目录\n\n* 小程序设置tabbar选中颜色\n* 将溢出的文本用省略号代替\n* 特定区域滚动到顶部时固定\n* 微信小程序select下拉框实现\n* wx.navigateBack() 携带参数返回\n* 微信小程序 选择器picker的使用\n\n<!--more-->\n\n# 小程序设置tabbar选中颜色\n\n```js\n'tabbar': {\n  'selectedColor': '#4da9ff',\n  'list': [\n    {\n      'pagePath': 'pages/index/index',\n      'text': '首页',\n      'iconPath': 'images/index.png',\n      'selectedIconPath': 'images/index_on.png'\n    }\n  ]\n}\n```\n\n`selectedColor`就是被选中tab的字体颜色。\n\n# 将溢出的文本用省略号代替\n\n先来看看效果:\n\n![省略号代替溢出文本](/images/js/miniProgram/ellipsis.png)\n\n比如有一个很长的文本需要展示:\n\n```html\n<view class=\"text-deal\">aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa</view>\n```\n\n但是又只能用一行去显示, 剩下的需要用省略号代替, 那么就可以这样:\n\n```css\n.text-deal{\n  overflow : hidden;\n  text-overflow: ellipsis;\n  display: -webkit-box;\n  /* 这里可以控制显示行数, 1 代表只显示1行, 2 代表显示两行 */\n  -webkit-line-clamp: 1;\n  -webkit-box-orient: vertical;\n  word-break: break-all;\n}\n```\n\n\n# 特定区域滚动到顶部时固定\n\n先来看看效果:\n\n![固定顶部](/images/js/miniProgram/miniprogramFixedTop.gif)\n\n页面部分:\n\n```html\n<scroll-view scroll-y scroll-width-animation style=\"width:100%; height:{{scrollheight}}px\" bindscroll=\"scrollTopFun\">\n  <view wx:for=\"{{arr}}\" wx:for-item=\"item\" wx:key=\"{{item.id}}\">\n    <view>\n      {{item.name}}\n      <view wx:if=\"{{item.id == 10}}\">\n        topppppppppppp\n      </view>\n      <view wx:if=\"{{item.id == 10}}\"  class=\"{{top > 252 ? 'topnav' : ''}}\">\n        我是要固定到顶部的\n      </view>\n      <view wx:if=\"{{item.id == 10}}\">\n        downnnnnnnnnnn\n      </view>\n    </view>\n  </view>\n</scroll-view>\n```\n\njs:\n\n```js\ndata: {\n  arr: [],\n  top: 0,\n  scrollheight: ''\n},\n\nonLoad: function () {\n  // 初始化数组\n  var arrT = new Array();\n  for (var i = 0; i != 50; ++i) {\n    arrT.push({id: i, name: 'abcd'})\n  }\n  this.setData({\n    arr: arrT\n  })\n\n  // 获取屏幕的长度, 将这个长度固定到scroll-view的长度上\n  var me = this;\n  wx.getSystemInfo({\n    success: function (res) {\n      me.setData({\n        scrollheight: res.windowHeight\n      })\n    }\n  })\n},\n\n// 滚动时的调用方法\nscrollTopFun(e) {\n  this.setData({\n    top : e.detail.scrollTop\n  })\n  console.log(e.detail.scrollTop)\n}\n```\n\n最后是样式部分:\n\n```css\n.topnav{\n  position: fixed;\n  top: 0rpx;\n  z-index:99;\n  background: #fff;\n  width: 100%;\n}\n```\n\n# 微信小程序select下拉框实现\n\n先来看下效果:\n\n![下拉框](/images/js/miniProgram/miniprogramSelect.gif)\n\n```html\n<view class=\"select-group\">\n  <view>测试下拉框</view>\n  <view class=\"select-all\">\n    <view class='list-msg2' bindtap='bindShowMsg'>\n      <text>{{tihuoWay}}</text>\n    </view>\n    <view class=\"select_box\" wx:if=\"{{select}}\">\n      <view class=\"select_one\" bindtap=\"mySelect\" data-name=\"1\">下拉1</view>\n      <view class=\"select_one\" bindtap=\"mySelect\" data-name=\"2\">下拉2</view>\n      <view class=\"select_one\" bindtap=\"mySelect\" data-name=\"3\">下拉3</view>\n    </view>\n  </view>\n</view>\n```\n\njs:\n\n```js\ndata: {\n  select: false,\n  tihuoWay: '1'\n},\n\nbindShowMsg() {\n  this.setData({\n    select: !this.data.select\n  })\n},\n\nmySelect(e) {\n  var name = e.currentTarget.dataset.name\n  this.setData({\n    tihuoWay: name,\n    select: false\n  })\n}\n```\n\nwxss:\n\n```css\n.select-group {\n  display: flex;\n  flex-direction: row;\n}\n\n.select-all {\n  display: flex;\n  flex-direction: column;\n}\n\n.select_box {\n  background-color: #eee;\n  padding: 0 10rpx;\n  width: 100rpx;\n  position: absolute;\n  top: 80rpx;\n  z-index: 1;\n  overflow: hidden;\n  animation: myfirst 0.3s;\n}\n\n.list-msg2 {\n  height: 60rpx;\n  width: 100rpx;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  border: 1px solid #ccc;\n  padding: 0 10rpx;\n}\n```\n\n# wx.navigateBack() 携带参数返回 \n\n先来看看效果:\n\n![navigateBack](/images/js/miniProgram/navigateBack.gif)\n\n第一个页面的js:\n\n```js\ndata: {\n  // 获取上个页面返回的数值\n  prePageData: ''\n},\n\ntoNextPage: function() {\n  wx.navigateTo({\n    url: '/pages/prePage/prePage',\n  })\n},\n```\n\n第一个页面的wxml:\n\n```html\n<view bindtap='toNextPage'>到下个页面</view>\n<view>上个页面的东西: {{prePageData}}</view>\n```\n\n第二个页面的js:\n\n```js\nreturnToPrePage: function() {\n  // 获取页面栈\n  var pages = getCurrentPages();\n  // 获取上个页面的实例\n  var prePage = pages[pages.length - 2];\n\n  prePage.setData({\n    prePageData: 'hahaha'\n  })\n\n  wx.navigateBack({\n    delta: 1\n  })\n}\n```\n\n第二个页面的wxml:\n\n```html\n<view bindtap='returnToPrePage'>返回上个页面</view>\n```\n\n# 微信小程序 选择器picker的使用\n\n","slug":"front_skill_experience/miniProgram/some-skills","published":1,"updated":"2022-10-03T02:26:50.559Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejk500153vsbhs6yb3y5","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最近工作上遇到了关于一些微信小程序开发的业务, 今天把遇到的问题总结一下。</p>\n<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><ul>\n<li>小程序设置tabbar选中颜色</li>\n<li>将溢出的文本用省略号代替</li>\n<li>特定区域滚动到顶部时固定</li>\n<li>微信小程序select下拉框实现</li>\n<li>wx.navigateBack() 携带参数返回</li>\n<li>微信小程序 选择器picker的使用</li>\n</ul>\n<span id=\"more\"></span>\n\n<h1 id=\"小程序设置tabbar选中颜色\"><a href=\"#小程序设置tabbar选中颜色\" class=\"headerlink\" title=\"小程序设置tabbar选中颜色\"></a>小程序设置tabbar选中颜色</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;tabbar&#x27;</span>: &#123;</span><br><span class=\"line\">  <span class=\"string\">&#x27;selectedColor&#x27;</span>: <span class=\"string\">&#x27;#4da9ff&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;list&#x27;</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"string\">&#x27;pagePath&#x27;</span>: <span class=\"string\">&#x27;pages/index/index&#x27;</span>,</span><br><span class=\"line\">      <span class=\"string\">&#x27;text&#x27;</span>: <span class=\"string\">&#x27;首页&#x27;</span>,</span><br><span class=\"line\">      <span class=\"string\">&#x27;iconPath&#x27;</span>: <span class=\"string\">&#x27;images/index.png&#x27;</span>,</span><br><span class=\"line\">      <span class=\"string\">&#x27;selectedIconPath&#x27;</span>: <span class=\"string\">&#x27;images/index_on.png&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>selectedColor</code>就是被选中tab的字体颜色。</p>\n<h1 id=\"将溢出的文本用省略号代替\"><a href=\"#将溢出的文本用省略号代替\" class=\"headerlink\" title=\"将溢出的文本用省略号代替\"></a>将溢出的文本用省略号代替</h1><p>先来看看效果:</p>\n<p><img src=\"/images/js/miniProgram/ellipsis.png\" alt=\"省略号代替溢出文本\"></p>\n<p>比如有一个很长的文本需要展示:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;text-deal&quot;</span>&gt;</span>aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>但是又只能用一行去显示, 剩下的需要用省略号代替, 那么就可以这样:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.text-deal</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span> : hidden;</span><br><span class=\"line\">  <span class=\"attribute\">text-overflow</span>: ellipsis;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: -webkit-box;</span><br><span class=\"line\">  <span class=\"comment\">/* 这里可以控制显示行数, 1 代表只显示1行, 2 代表显示两行 */</span></span><br><span class=\"line\">  -webkit-line-clamp: <span class=\"number\">1</span>;</span><br><span class=\"line\">  -webkit-box-orient: vertical;</span><br><span class=\"line\">  <span class=\"attribute\">word-break</span>: break-all;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"特定区域滚动到顶部时固定\"><a href=\"#特定区域滚动到顶部时固定\" class=\"headerlink\" title=\"特定区域滚动到顶部时固定\"></a>特定区域滚动到顶部时固定</h1><p>先来看看效果:</p>\n<p><img src=\"/images/js/miniProgram/miniprogramFixedTop.gif\" alt=\"固定顶部\"></p>\n<p>页面部分:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">scroll-view</span> <span class=\"attr\">scroll-y</span> <span class=\"attr\">scroll-width-animation</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width:100%; height:&#123;&#123;scrollheight&#125;&#125;px&quot;</span> <span class=\"attr\">bindscroll</span>=<span class=\"string\">&quot;scrollTopFun&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">wx:for</span>=<span class=\"string\">&quot;&#123;&#123;arr&#125;&#125;&quot;</span> <span class=\"attr\">wx:for-item</span>=<span class=\"string\">&quot;item&quot;</span> <span class=\"attr\">wx:key</span>=<span class=\"string\">&quot;&#123;&#123;item.id&#125;&#125;&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">      &#123;&#123;item.name&#125;&#125;</span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">wx:if</span>=<span class=\"string\">&quot;&#123;&#123;item.id == 10&#125;&#125;&quot;</span>&gt;</span></span><br><span class=\"line\">        topppppppppppp</span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">wx:if</span>=<span class=\"string\">&quot;&#123;&#123;item.id == 10&#125;&#125;&quot;</span>  <span class=\"attr\">class</span>=<span class=\"string\">&quot;&#123;&#123;top &gt; 252 ? &#x27;topnav&#x27; : &#x27;&#x27;&#125;&#125;&quot;</span>&gt;</span></span><br><span class=\"line\">        我是要固定到顶部的</span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">wx:if</span>=<span class=\"string\">&quot;&#123;&#123;item.id == 10&#125;&#125;&quot;</span>&gt;</span></span><br><span class=\"line\">        downnnnnnnnnnn</span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">scroll-view</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>js:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data: &#123;</span><br><span class=\"line\">  <span class=\"attr\">arr</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">top</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">  <span class=\"attr\">scrollheight</span>: <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">onLoad</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 初始化数组</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> arrT = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i != <span class=\"number\">50</span>; ++i) &#123;</span><br><span class=\"line\">    arrT.push(&#123;<span class=\"attr\">id</span>: i, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;abcd&#x27;</span>&#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.setData(&#123;</span><br><span class=\"line\">    <span class=\"attr\">arr</span>: arrT</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 获取屏幕的长度, 将这个长度固定到scroll-view的长度上</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> me = <span class=\"built_in\">this</span>;</span><br><span class=\"line\">  wx.getSystemInfo(&#123;</span><br><span class=\"line\">    <span class=\"attr\">success</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">      me.setData(&#123;</span><br><span class=\"line\">        <span class=\"attr\">scrollheight</span>: res.windowHeight</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 滚动时的调用方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">scrollTopFun</span>(<span class=\"params\">e</span>)</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.setData(&#123;</span><br><span class=\"line\">    <span class=\"attr\">top</span> : e.detail.scrollTop</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(e.detail.scrollTop)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最后是样式部分:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.topnav</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: fixed;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">z-index</span>:<span class=\"number\">99</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"微信小程序select下拉框实现\"><a href=\"#微信小程序select下拉框实现\" class=\"headerlink\" title=\"微信小程序select下拉框实现\"></a>微信小程序select下拉框实现</h1><p>先来看下效果:</p>\n<p><img src=\"/images/js/miniProgram/miniprogramSelect.gif\" alt=\"下拉框\"></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;select-group&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">view</span>&gt;</span>测试下拉框<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;select-all&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">&#x27;list-msg2&#x27;</span> <span class=\"attr\">bindtap</span>=<span class=\"string\">&#x27;bindShowMsg&#x27;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">text</span>&gt;</span>&#123;&#123;tihuoWay&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">text</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;select_box&quot;</span> <span class=\"attr\">wx:if</span>=<span class=\"string\">&quot;&#123;&#123;select&#125;&#125;&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;select_one&quot;</span> <span class=\"attr\">bindtap</span>=<span class=\"string\">&quot;mySelect&quot;</span> <span class=\"attr\">data-name</span>=<span class=\"string\">&quot;1&quot;</span>&gt;</span>下拉1<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;select_one&quot;</span> <span class=\"attr\">bindtap</span>=<span class=\"string\">&quot;mySelect&quot;</span> <span class=\"attr\">data-name</span>=<span class=\"string\">&quot;2&quot;</span>&gt;</span>下拉2<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;select_one&quot;</span> <span class=\"attr\">bindtap</span>=<span class=\"string\">&quot;mySelect&quot;</span> <span class=\"attr\">data-name</span>=<span class=\"string\">&quot;3&quot;</span>&gt;</span>下拉3<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>js:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data: &#123;</span><br><span class=\"line\">  <span class=\"attr\">select</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"attr\">tihuoWay</span>: <span class=\"string\">&#x27;1&#x27;</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">bindShowMsg</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.setData(&#123;</span><br><span class=\"line\">    <span class=\"attr\">select</span>: !<span class=\"built_in\">this</span>.data.select</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">mySelect</span>(<span class=\"params\">e</span>)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> name = e.currentTarget.dataset.name</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.setData(&#123;</span><br><span class=\"line\">    <span class=\"attr\">tihuoWay</span>: name,</span><br><span class=\"line\">    <span class=\"attr\">select</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>wxss:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.select-group</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">flex-direction</span>: row;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.select-all</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">flex-direction</span>: column;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.select_box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#eee</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">0</span> <span class=\"number\">10</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">80</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">z-index</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">  <span class=\"attribute\">animation</span>: myfirst <span class=\"number\">0.3s</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.list-msg2</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">60</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">align-items</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">justify-content</span>: space-between;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ccc</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">0</span> <span class=\"number\">10</span>rpx;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"wx-navigateBack-携带参数返回\"><a href=\"#wx-navigateBack-携带参数返回\" class=\"headerlink\" title=\"wx.navigateBack() 携带参数返回\"></a>wx.navigateBack() 携带参数返回</h1><p>先来看看效果:</p>\n<p><img src=\"/images/js/miniProgram/navigateBack.gif\" alt=\"navigateBack\"></p>\n<p>第一个页面的js:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data: &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 获取上个页面返回的数值</span></span><br><span class=\"line\">  <span class=\"attr\">prePageData</span>: <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">toNextPage</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  wx.navigateTo(&#123;</span><br><span class=\"line\">    <span class=\"attr\">url</span>: <span class=\"string\">&#x27;/pages/prePage/prePage&#x27;</span>,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>第一个页面的wxml:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">bindtap</span>=<span class=\"string\">&#x27;toNextPage&#x27;</span>&gt;</span>到下个页面<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">view</span>&gt;</span>上个页面的东西: &#123;&#123;prePageData&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>第二个页面的js:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">returnToPrePage: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 获取页面栈</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> pages = getCurrentPages();</span><br><span class=\"line\">  <span class=\"comment\">// 获取上个页面的实例</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> prePage = pages[pages.length - <span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">  prePage.setData(&#123;</span><br><span class=\"line\">    <span class=\"attr\">prePageData</span>: <span class=\"string\">&#x27;hahaha&#x27;</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  wx.navigateBack(&#123;</span><br><span class=\"line\">    <span class=\"attr\">delta</span>: <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>第二个页面的wxml:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">bindtap</span>=<span class=\"string\">&#x27;returnToPrePage&#x27;</span>&gt;</span>返回上个页面<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"微信小程序-选择器picker的使用\"><a href=\"#微信小程序-选择器picker的使用\" class=\"headerlink\" title=\"微信小程序 选择器picker的使用\"></a>微信小程序 选择器picker的使用</h1>","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最近工作上遇到了关于一些微信小程序开发的业务, 今天把遇到的问题总结一下。</p>\n<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><ul>\n<li>小程序设置tabbar选中颜色</li>\n<li>将溢出的文本用省略号代替</li>\n<li>特定区域滚动到顶部时固定</li>\n<li>微信小程序select下拉框实现</li>\n<li>wx.navigateBack() 携带参数返回</li>\n<li>微信小程序 选择器picker的使用</li>\n</ul>","more":"<h1 id=\"小程序设置tabbar选中颜色\"><a href=\"#小程序设置tabbar选中颜色\" class=\"headerlink\" title=\"小程序设置tabbar选中颜色\"></a>小程序设置tabbar选中颜色</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;tabbar&#x27;</span>: &#123;</span><br><span class=\"line\">  <span class=\"string\">&#x27;selectedColor&#x27;</span>: <span class=\"string\">&#x27;#4da9ff&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;list&#x27;</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"string\">&#x27;pagePath&#x27;</span>: <span class=\"string\">&#x27;pages/index/index&#x27;</span>,</span><br><span class=\"line\">      <span class=\"string\">&#x27;text&#x27;</span>: <span class=\"string\">&#x27;首页&#x27;</span>,</span><br><span class=\"line\">      <span class=\"string\">&#x27;iconPath&#x27;</span>: <span class=\"string\">&#x27;images/index.png&#x27;</span>,</span><br><span class=\"line\">      <span class=\"string\">&#x27;selectedIconPath&#x27;</span>: <span class=\"string\">&#x27;images/index_on.png&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>selectedColor</code>就是被选中tab的字体颜色。</p>\n<h1 id=\"将溢出的文本用省略号代替\"><a href=\"#将溢出的文本用省略号代替\" class=\"headerlink\" title=\"将溢出的文本用省略号代替\"></a>将溢出的文本用省略号代替</h1><p>先来看看效果:</p>\n<p><img src=\"/images/js/miniProgram/ellipsis.png\" alt=\"省略号代替溢出文本\"></p>\n<p>比如有一个很长的文本需要展示:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;text-deal&quot;</span>&gt;</span>aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>但是又只能用一行去显示, 剩下的需要用省略号代替, 那么就可以这样:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.text-deal</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span> : hidden;</span><br><span class=\"line\">  <span class=\"attribute\">text-overflow</span>: ellipsis;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: -webkit-box;</span><br><span class=\"line\">  <span class=\"comment\">/* 这里可以控制显示行数, 1 代表只显示1行, 2 代表显示两行 */</span></span><br><span class=\"line\">  -webkit-line-clamp: <span class=\"number\">1</span>;</span><br><span class=\"line\">  -webkit-box-orient: vertical;</span><br><span class=\"line\">  <span class=\"attribute\">word-break</span>: break-all;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"特定区域滚动到顶部时固定\"><a href=\"#特定区域滚动到顶部时固定\" class=\"headerlink\" title=\"特定区域滚动到顶部时固定\"></a>特定区域滚动到顶部时固定</h1><p>先来看看效果:</p>\n<p><img src=\"/images/js/miniProgram/miniprogramFixedTop.gif\" alt=\"固定顶部\"></p>\n<p>页面部分:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">scroll-view</span> <span class=\"attr\">scroll-y</span> <span class=\"attr\">scroll-width-animation</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width:100%; height:&#123;&#123;scrollheight&#125;&#125;px&quot;</span> <span class=\"attr\">bindscroll</span>=<span class=\"string\">&quot;scrollTopFun&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">wx:for</span>=<span class=\"string\">&quot;&#123;&#123;arr&#125;&#125;&quot;</span> <span class=\"attr\">wx:for-item</span>=<span class=\"string\">&quot;item&quot;</span> <span class=\"attr\">wx:key</span>=<span class=\"string\">&quot;&#123;&#123;item.id&#125;&#125;&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">      &#123;&#123;item.name&#125;&#125;</span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">wx:if</span>=<span class=\"string\">&quot;&#123;&#123;item.id == 10&#125;&#125;&quot;</span>&gt;</span></span><br><span class=\"line\">        topppppppppppp</span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">wx:if</span>=<span class=\"string\">&quot;&#123;&#123;item.id == 10&#125;&#125;&quot;</span>  <span class=\"attr\">class</span>=<span class=\"string\">&quot;&#123;&#123;top &gt; 252 ? &#x27;topnav&#x27; : &#x27;&#x27;&#125;&#125;&quot;</span>&gt;</span></span><br><span class=\"line\">        我是要固定到顶部的</span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">wx:if</span>=<span class=\"string\">&quot;&#123;&#123;item.id == 10&#125;&#125;&quot;</span>&gt;</span></span><br><span class=\"line\">        downnnnnnnnnnn</span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">scroll-view</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>js:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data: &#123;</span><br><span class=\"line\">  <span class=\"attr\">arr</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">top</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">  <span class=\"attr\">scrollheight</span>: <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">onLoad</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 初始化数组</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> arrT = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i != <span class=\"number\">50</span>; ++i) &#123;</span><br><span class=\"line\">    arrT.push(&#123;<span class=\"attr\">id</span>: i, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;abcd&#x27;</span>&#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.setData(&#123;</span><br><span class=\"line\">    <span class=\"attr\">arr</span>: arrT</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 获取屏幕的长度, 将这个长度固定到scroll-view的长度上</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> me = <span class=\"built_in\">this</span>;</span><br><span class=\"line\">  wx.getSystemInfo(&#123;</span><br><span class=\"line\">    <span class=\"attr\">success</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">      me.setData(&#123;</span><br><span class=\"line\">        <span class=\"attr\">scrollheight</span>: res.windowHeight</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 滚动时的调用方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">scrollTopFun</span>(<span class=\"params\">e</span>)</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.setData(&#123;</span><br><span class=\"line\">    <span class=\"attr\">top</span> : e.detail.scrollTop</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(e.detail.scrollTop)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最后是样式部分:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.topnav</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: fixed;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">z-index</span>:<span class=\"number\">99</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"微信小程序select下拉框实现\"><a href=\"#微信小程序select下拉框实现\" class=\"headerlink\" title=\"微信小程序select下拉框实现\"></a>微信小程序select下拉框实现</h1><p>先来看下效果:</p>\n<p><img src=\"/images/js/miniProgram/miniprogramSelect.gif\" alt=\"下拉框\"></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;select-group&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">view</span>&gt;</span>测试下拉框<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;select-all&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">&#x27;list-msg2&#x27;</span> <span class=\"attr\">bindtap</span>=<span class=\"string\">&#x27;bindShowMsg&#x27;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">text</span>&gt;</span>&#123;&#123;tihuoWay&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">text</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;select_box&quot;</span> <span class=\"attr\">wx:if</span>=<span class=\"string\">&quot;&#123;&#123;select&#125;&#125;&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;select_one&quot;</span> <span class=\"attr\">bindtap</span>=<span class=\"string\">&quot;mySelect&quot;</span> <span class=\"attr\">data-name</span>=<span class=\"string\">&quot;1&quot;</span>&gt;</span>下拉1<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;select_one&quot;</span> <span class=\"attr\">bindtap</span>=<span class=\"string\">&quot;mySelect&quot;</span> <span class=\"attr\">data-name</span>=<span class=\"string\">&quot;2&quot;</span>&gt;</span>下拉2<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;select_one&quot;</span> <span class=\"attr\">bindtap</span>=<span class=\"string\">&quot;mySelect&quot;</span> <span class=\"attr\">data-name</span>=<span class=\"string\">&quot;3&quot;</span>&gt;</span>下拉3<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>js:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data: &#123;</span><br><span class=\"line\">  <span class=\"attr\">select</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"attr\">tihuoWay</span>: <span class=\"string\">&#x27;1&#x27;</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">bindShowMsg</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.setData(&#123;</span><br><span class=\"line\">    <span class=\"attr\">select</span>: !<span class=\"built_in\">this</span>.data.select</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">mySelect</span>(<span class=\"params\">e</span>)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> name = e.currentTarget.dataset.name</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.setData(&#123;</span><br><span class=\"line\">    <span class=\"attr\">tihuoWay</span>: name,</span><br><span class=\"line\">    <span class=\"attr\">select</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>wxss:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.select-group</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">flex-direction</span>: row;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.select-all</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">flex-direction</span>: column;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.select_box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#eee</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">0</span> <span class=\"number\">10</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">80</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">z-index</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">  <span class=\"attribute\">animation</span>: myfirst <span class=\"number\">0.3s</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.list-msg2</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">60</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">align-items</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">justify-content</span>: space-between;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ccc</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">0</span> <span class=\"number\">10</span>rpx;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"wx-navigateBack-携带参数返回\"><a href=\"#wx-navigateBack-携带参数返回\" class=\"headerlink\" title=\"wx.navigateBack() 携带参数返回\"></a>wx.navigateBack() 携带参数返回</h1><p>先来看看效果:</p>\n<p><img src=\"/images/js/miniProgram/navigateBack.gif\" alt=\"navigateBack\"></p>\n<p>第一个页面的js:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data: &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 获取上个页面返回的数值</span></span><br><span class=\"line\">  <span class=\"attr\">prePageData</span>: <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">toNextPage</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  wx.navigateTo(&#123;</span><br><span class=\"line\">    <span class=\"attr\">url</span>: <span class=\"string\">&#x27;/pages/prePage/prePage&#x27;</span>,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>第一个页面的wxml:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">bindtap</span>=<span class=\"string\">&#x27;toNextPage&#x27;</span>&gt;</span>到下个页面<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">view</span>&gt;</span>上个页面的东西: &#123;&#123;prePageData&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>第二个页面的js:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">returnToPrePage: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 获取页面栈</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> pages = getCurrentPages();</span><br><span class=\"line\">  <span class=\"comment\">// 获取上个页面的实例</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> prePage = pages[pages.length - <span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">  prePage.setData(&#123;</span><br><span class=\"line\">    <span class=\"attr\">prePageData</span>: <span class=\"string\">&#x27;hahaha&#x27;</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  wx.navigateBack(&#123;</span><br><span class=\"line\">    <span class=\"attr\">delta</span>: <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>第二个页面的wxml:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">bindtap</span>=<span class=\"string\">&#x27;returnToPrePage&#x27;</span>&gt;</span>返回上个页面<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"微信小程序-选择器picker的使用\"><a href=\"#微信小程序-选择器picker的使用\" class=\"headerlink\" title=\"微信小程序 选择器picker的使用\"></a>微信小程序 选择器picker的使用</h1>"},{"title":"创建一个 vue 项目","date":"2019-06-24T06:48:19.000Z","_content":"\n# 前言\n\n之前学过一段时间的vue, 过了小半年不用, 居然连怎么创建vue项目都想不起来了, 很难受。所以这次打算把这个过程记录下来。\n<!--more-->\n\n# 配置环境\n\n1. 下载node.js\n2. 下载webpack\n3. 下载vue\n4. 使用vue创建项目\n\n## 下载node.js\n\n访问[这里](http://nodejs.cn/download/)来下载windows或者linux版本。\n\n## 下载webpack\n\n当下载和安装好node之后, 可以使用\n\n```\nnode -v\n```\n\n来查看node是否安装好。node安装好之后就可以下载webpack了。\n\n```\nnpm install webpack -g\nnpm install webpack-cli -g\n```\n\n这里使用的是全局安装, 也可以去掉`-g`替换成`--save-dev`来局部安装, 就是安装到当前文件夹。\n\n## 下载vue\n\n使用\n\n```\nnpm install vue -g\nnpm install vue-cli -g\n```\n\n来下载vue和vue的脚手架。\n\n## 使用vue创建项目\n\n如果以上都是全局安装的话, 那么可以直接使用\n\n```\nvue init webpack project-name\n```\n\n这里`project-name`是你的项目名。\n\n我之前在尝试新建一个vue项目的时候, 遇到的问题是我并不是全局安装, 全都是局部安装。那么在使用`vue init`的时候会说找不到这个命令, 那么可以将`node_modules/.bin`这个文件夹放到环境变量中, 这样`.bin`文件夹里面的`.cmd`文件就会被访问到了。\n\n## 总结\n\n嗯, 突然就想玩玩前端了。\n","source":"_posts/front_skill_experience/vue/vue-hello-world.md","raw":"---\ntitle: 创建一个 vue 项目\ndate: 2019-06-24 14:48:19\ncategories:\n- 前端技巧/经验\n- vue\ntags:\n- vue\n---\n\n# 前言\n\n之前学过一段时间的vue, 过了小半年不用, 居然连怎么创建vue项目都想不起来了, 很难受。所以这次打算把这个过程记录下来。\n<!--more-->\n\n# 配置环境\n\n1. 下载node.js\n2. 下载webpack\n3. 下载vue\n4. 使用vue创建项目\n\n## 下载node.js\n\n访问[这里](http://nodejs.cn/download/)来下载windows或者linux版本。\n\n## 下载webpack\n\n当下载和安装好node之后, 可以使用\n\n```\nnode -v\n```\n\n来查看node是否安装好。node安装好之后就可以下载webpack了。\n\n```\nnpm install webpack -g\nnpm install webpack-cli -g\n```\n\n这里使用的是全局安装, 也可以去掉`-g`替换成`--save-dev`来局部安装, 就是安装到当前文件夹。\n\n## 下载vue\n\n使用\n\n```\nnpm install vue -g\nnpm install vue-cli -g\n```\n\n来下载vue和vue的脚手架。\n\n## 使用vue创建项目\n\n如果以上都是全局安装的话, 那么可以直接使用\n\n```\nvue init webpack project-name\n```\n\n这里`project-name`是你的项目名。\n\n我之前在尝试新建一个vue项目的时候, 遇到的问题是我并不是全局安装, 全都是局部安装。那么在使用`vue init`的时候会说找不到这个命令, 那么可以将`node_modules/.bin`这个文件夹放到环境变量中, 这样`.bin`文件夹里面的`.cmd`文件就会被访问到了。\n\n## 总结\n\n嗯, 突然就想玩玩前端了。\n","slug":"front_skill_experience/vue/vue-hello-world","published":1,"updated":"2022-10-03T02:27:00.814Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejk900183vsbd8ue3guq","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>之前学过一段时间的vue, 过了小半年不用, 居然连怎么创建vue项目都想不起来了, 很难受。所以这次打算把这个过程记录下来。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"配置环境\"><a href=\"#配置环境\" class=\"headerlink\" title=\"配置环境\"></a>配置环境</h1><ol>\n<li>下载node.js</li>\n<li>下载webpack</li>\n<li>下载vue</li>\n<li>使用vue创建项目</li>\n</ol>\n<h2 id=\"下载node-js\"><a href=\"#下载node-js\" class=\"headerlink\" title=\"下载node.js\"></a>下载node.js</h2><p>访问<a href=\"http://nodejs.cn/download/\">这里</a>来下载windows或者linux版本。</p>\n<h2 id=\"下载webpack\"><a href=\"#下载webpack\" class=\"headerlink\" title=\"下载webpack\"></a>下载webpack</h2><p>当下载和安装好node之后, 可以使用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node -v</span><br></pre></td></tr></table></figure>\n\n<p>来查看node是否安装好。node安装好之后就可以下载webpack了。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install webpack -g</span><br><span class=\"line\">npm install webpack-cli -g</span><br></pre></td></tr></table></figure>\n\n<p>这里使用的是全局安装, 也可以去掉<code>-g</code>替换成<code>--save-dev</code>来局部安装, 就是安装到当前文件夹。</p>\n<h2 id=\"下载vue\"><a href=\"#下载vue\" class=\"headerlink\" title=\"下载vue\"></a>下载vue</h2><p>使用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install vue -g</span><br><span class=\"line\">npm install vue-cli -g</span><br></pre></td></tr></table></figure>\n\n<p>来下载vue和vue的脚手架。</p>\n<h2 id=\"使用vue创建项目\"><a href=\"#使用vue创建项目\" class=\"headerlink\" title=\"使用vue创建项目\"></a>使用vue创建项目</h2><p>如果以上都是全局安装的话, 那么可以直接使用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vue init webpack project-name</span><br></pre></td></tr></table></figure>\n\n<p>这里<code>project-name</code>是你的项目名。</p>\n<p>我之前在尝试新建一个vue项目的时候, 遇到的问题是我并不是全局安装, 全都是局部安装。那么在使用<code>vue init</code>的时候会说找不到这个命令, 那么可以将<code>node_modules/.bin</code>这个文件夹放到环境变量中, 这样<code>.bin</code>文件夹里面的<code>.cmd</code>文件就会被访问到了。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>嗯, 突然就想玩玩前端了。</p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>之前学过一段时间的vue, 过了小半年不用, 居然连怎么创建vue项目都想不起来了, 很难受。所以这次打算把这个过程记录下来。</p>","more":"<h1 id=\"配置环境\"><a href=\"#配置环境\" class=\"headerlink\" title=\"配置环境\"></a>配置环境</h1><ol>\n<li>下载node.js</li>\n<li>下载webpack</li>\n<li>下载vue</li>\n<li>使用vue创建项目</li>\n</ol>\n<h2 id=\"下载node-js\"><a href=\"#下载node-js\" class=\"headerlink\" title=\"下载node.js\"></a>下载node.js</h2><p>访问<a href=\"http://nodejs.cn/download/\">这里</a>来下载windows或者linux版本。</p>\n<h2 id=\"下载webpack\"><a href=\"#下载webpack\" class=\"headerlink\" title=\"下载webpack\"></a>下载webpack</h2><p>当下载和安装好node之后, 可以使用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node -v</span><br></pre></td></tr></table></figure>\n\n<p>来查看node是否安装好。node安装好之后就可以下载webpack了。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install webpack -g</span><br><span class=\"line\">npm install webpack-cli -g</span><br></pre></td></tr></table></figure>\n\n<p>这里使用的是全局安装, 也可以去掉<code>-g</code>替换成<code>--save-dev</code>来局部安装, 就是安装到当前文件夹。</p>\n<h2 id=\"下载vue\"><a href=\"#下载vue\" class=\"headerlink\" title=\"下载vue\"></a>下载vue</h2><p>使用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install vue -g</span><br><span class=\"line\">npm install vue-cli -g</span><br></pre></td></tr></table></figure>\n\n<p>来下载vue和vue的脚手架。</p>\n<h2 id=\"使用vue创建项目\"><a href=\"#使用vue创建项目\" class=\"headerlink\" title=\"使用vue创建项目\"></a>使用vue创建项目</h2><p>如果以上都是全局安装的话, 那么可以直接使用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vue init webpack project-name</span><br></pre></td></tr></table></figure>\n\n<p>这里<code>project-name</code>是你的项目名。</p>\n<p>我之前在尝试新建一个vue项目的时候, 遇到的问题是我并不是全局安装, 全都是局部安装。那么在使用<code>vue init</code>的时候会说找不到这个命令, 那么可以将<code>node_modules/.bin</code>这个文件夹放到环境变量中, 这样<code>.bin</code>文件夹里面的<code>.cmd</code>文件就会被访问到了。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>嗯, 突然就想玩玩前端了。</p>"},{"title":"webpack-dev-server","date":"2019-03-03T12:50:49.000Z","_content":"\n# 前言\n\n[上一篇](/js/webpack/webpack-source-map.html)讨论了如何配置基本的webpack配置文件, 并且设置source-map。\n今天来看看如何设置webpack-dev-server。\n<!--more-->\n# 安装\n\n安装命令为:\n\n```shell\nnpm install --save-dev webpack-dev-server\n```\n\n# 配置\n\n详细的配置可以参考[官网配置](https://webpack.js.org/configuration/dev-server/)\n\n其实安装之后就可以启动了, 不需要任何设置, 但是我们之前的html放在了public文件夹中, 那么我们需要将服务器加载的页面所在的目录改为public文件夹:\n\n```js\nmodule.exports = {\n    // 省略一些代码...\n    devServer: {\n        contentBase: \"./public\", //本地服务器所加载的页面所在的目录\n        host: \"0.0.0.0\",\n        inline: true // 实时刷新\n    }\n}\n```\n\n这里需要注意, **我是在cent OS上搭建的webpack-dev-server, 没有配置host, 在打开服务器之后发生了连接不上的情况, 配置了host之后就可以了, 原因不明。**\n\n# 启动\n\nok, 一切配置准备就绪, 那么我们开始启动它吧!\n\n启动命令是:\n\n```shell\n# 局部安装\nnode_modules/.bin/webpack-dev-server\n# 全局安装\nwebpack-dev-server\n```\n\n这个是直接通过命令行启动, 我们也可以把它写在配置文件中, 这样可以直接通过npm run [命令]来启动:\n\n```shell\n// package.json\n\"scripts\": {\n    \"server\": \"webpack-dev-server\"\n}\n```\n\n这样写好之后, 我们就可以直接通过 `npm run server` 来启动它。\n","source":"_posts/front_skill_experience/webpack/webpack-dev-server.md","raw":"---\ntitle: webpack-dev-server\ndate: 2019-03-03 20:50:49\ncategories:\n- 前端技巧/经验\n- webpack\ntags:\n- webpack\n---\n\n# 前言\n\n[上一篇](/js/webpack/webpack-source-map.html)讨论了如何配置基本的webpack配置文件, 并且设置source-map。\n今天来看看如何设置webpack-dev-server。\n<!--more-->\n# 安装\n\n安装命令为:\n\n```shell\nnpm install --save-dev webpack-dev-server\n```\n\n# 配置\n\n详细的配置可以参考[官网配置](https://webpack.js.org/configuration/dev-server/)\n\n其实安装之后就可以启动了, 不需要任何设置, 但是我们之前的html放在了public文件夹中, 那么我们需要将服务器加载的页面所在的目录改为public文件夹:\n\n```js\nmodule.exports = {\n    // 省略一些代码...\n    devServer: {\n        contentBase: \"./public\", //本地服务器所加载的页面所在的目录\n        host: \"0.0.0.0\",\n        inline: true // 实时刷新\n    }\n}\n```\n\n这里需要注意, **我是在cent OS上搭建的webpack-dev-server, 没有配置host, 在打开服务器之后发生了连接不上的情况, 配置了host之后就可以了, 原因不明。**\n\n# 启动\n\nok, 一切配置准备就绪, 那么我们开始启动它吧!\n\n启动命令是:\n\n```shell\n# 局部安装\nnode_modules/.bin/webpack-dev-server\n# 全局安装\nwebpack-dev-server\n```\n\n这个是直接通过命令行启动, 我们也可以把它写在配置文件中, 这样可以直接通过npm run [命令]来启动:\n\n```shell\n// package.json\n\"scripts\": {\n    \"server\": \"webpack-dev-server\"\n}\n```\n\n这样写好之后, 我们就可以直接通过 `npm run server` 来启动它。\n","slug":"front_skill_experience/webpack/webpack-dev-server","published":1,"updated":"2022-10-03T02:27:14.161Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejkg001a3vsbckwza62a","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p><a href=\"/js/webpack/webpack-source-map.html\">上一篇</a>讨论了如何配置基本的webpack配置文件, 并且设置source-map。<br>今天来看看如何设置webpack-dev-server。</p>\n<span id=\"more\"></span>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><p>安装命令为:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev webpack-dev-server</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><p>详细的配置可以参考<a href=\"https://webpack.js.org/configuration/dev-server/\">官网配置</a></p>\n<p>其实安装之后就可以启动了, 不需要任何设置, 但是我们之前的html放在了public文件夹中, 那么我们需要将服务器加载的页面所在的目录改为public文件夹:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 省略一些代码...</span></span><br><span class=\"line\">    <span class=\"attr\">devServer</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">contentBase</span>: <span class=\"string\">&quot;./public&quot;</span>, <span class=\"comment\">//本地服务器所加载的页面所在的目录</span></span><br><span class=\"line\">        <span class=\"attr\">host</span>: <span class=\"string\">&quot;0.0.0.0&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">inline</span>: <span class=\"literal\">true</span> <span class=\"comment\">// 实时刷新</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里需要注意, <strong>我是在cent OS上搭建的webpack-dev-server, 没有配置host, 在打开服务器之后发生了连接不上的情况, 配置了host之后就可以了, 原因不明。</strong></p>\n<h1 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h1><p>ok, 一切配置准备就绪, 那么我们开始启动它吧!</p>\n<p>启动命令是:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 局部安装</span></span><br><span class=\"line\">node_modules/.bin/webpack-dev-server</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 全局安装</span></span><br><span class=\"line\">webpack-dev-server</span><br></pre></td></tr></table></figure>\n\n<p>这个是直接通过命令行启动, 我们也可以把它写在配置文件中, 这样可以直接通过npm run [命令]来启动:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// package.json</span><br><span class=\"line\">&quot;scripts&quot;: &#123;</span><br><span class=\"line\">    &quot;server&quot;: &quot;webpack-dev-server&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样写好之后, 我们就可以直接通过 <code>npm run server</code> 来启动它。</p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p><a href=\"/js/webpack/webpack-source-map.html\">上一篇</a>讨论了如何配置基本的webpack配置文件, 并且设置source-map。<br>今天来看看如何设置webpack-dev-server。</p>","more":"<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><p>安装命令为:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev webpack-dev-server</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><p>详细的配置可以参考<a href=\"https://webpack.js.org/configuration/dev-server/\">官网配置</a></p>\n<p>其实安装之后就可以启动了, 不需要任何设置, 但是我们之前的html放在了public文件夹中, 那么我们需要将服务器加载的页面所在的目录改为public文件夹:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 省略一些代码...</span></span><br><span class=\"line\">    <span class=\"attr\">devServer</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">contentBase</span>: <span class=\"string\">&quot;./public&quot;</span>, <span class=\"comment\">//本地服务器所加载的页面所在的目录</span></span><br><span class=\"line\">        <span class=\"attr\">host</span>: <span class=\"string\">&quot;0.0.0.0&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">inline</span>: <span class=\"literal\">true</span> <span class=\"comment\">// 实时刷新</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里需要注意, <strong>我是在cent OS上搭建的webpack-dev-server, 没有配置host, 在打开服务器之后发生了连接不上的情况, 配置了host之后就可以了, 原因不明。</strong></p>\n<h1 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h1><p>ok, 一切配置准备就绪, 那么我们开始启动它吧!</p>\n<p>启动命令是:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 局部安装</span></span><br><span class=\"line\">node_modules/.bin/webpack-dev-server</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 全局安装</span></span><br><span class=\"line\">webpack-dev-server</span><br></pre></td></tr></table></figure>\n\n<p>这个是直接通过命令行启动, 我们也可以把它写在配置文件中, 这样可以直接通过npm run [命令]来启动:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// package.json</span><br><span class=\"line\">&quot;scripts&quot;: &#123;</span><br><span class=\"line\">    &quot;server&quot;: &quot;webpack-dev-server&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样写好之后, 我们就可以直接通过 <code>npm run server</code> 来启动它。</p>"},{"title":"webpack-起步-配置文件","date":"2019-02-28T11:58:47.000Z","_content":"\n# 前言\n\n接着[上一篇](/js/webpack/webpack-first-step.html), 这一篇要来学习一下Webpack的配置。\n\n<!--more-->\n# 通过配置文件来使用Webpack\n\n## 配置打包文件路径和文件名\n\n首先在项目根目录下新建一个名为`webpack.config.js`的文件, 内容:\n\n```js\nmodule.exports = {\n    // 入口文件\n    entry: __dirname + \"/app/main.js\";\n    output: {\n        // 打包后文件存放的地方\n        path: __dirname + \"/public\",\n        // 打包后输出文件的文件名\n        filename: \"bundle.js\"\n    }\n}\n```\n\n> `__dirname`是node.js的一个全局变量, 它指向当前脚本所在的目录。\n\n有了这个配置之后, 就可以直接运行webpack命令来编译代码了。\n\n# 使用npm start来执行打包任务\n\n在`package.json`中对`script`对象进行设置:\n\n```json\n{\n    \"name\": \"webpack-sample-project\",\n    \"version\": \"1.0.0\",\n    \"description\": \"Sample webpack project\",\n    \"scripts\": {\n        // 这里设置 json不支持注释, 引用时请删除\n        \"start\": \"webpack\"\n    },\n    \"author\": \"zhang\",\n    \"license\": \"ISC\",\n    \"devDependencies\": {\n        \"webpack\": \"3.10.0\"\n    }\n}\n```\n\nnpm的start命令是一个特殊的命令, 在命令行中使用`npm start`就可以执行配置的命令, 如果对应的脚本名称不是`start`, 则需要这样`npm run {script name}`, 如`npm run build`。\n","source":"_posts/front_skill_experience/webpack/webpack-first-step-config.md","raw":"---\ntitle: webpack-起步-配置文件\ndate: 2019-02-28 19:58:47\ncategories:\n- 前端技巧/经验\n- webpack\ntags:\n- webpack\n---\n\n# 前言\n\n接着[上一篇](/js/webpack/webpack-first-step.html), 这一篇要来学习一下Webpack的配置。\n\n<!--more-->\n# 通过配置文件来使用Webpack\n\n## 配置打包文件路径和文件名\n\n首先在项目根目录下新建一个名为`webpack.config.js`的文件, 内容:\n\n```js\nmodule.exports = {\n    // 入口文件\n    entry: __dirname + \"/app/main.js\";\n    output: {\n        // 打包后文件存放的地方\n        path: __dirname + \"/public\",\n        // 打包后输出文件的文件名\n        filename: \"bundle.js\"\n    }\n}\n```\n\n> `__dirname`是node.js的一个全局变量, 它指向当前脚本所在的目录。\n\n有了这个配置之后, 就可以直接运行webpack命令来编译代码了。\n\n# 使用npm start来执行打包任务\n\n在`package.json`中对`script`对象进行设置:\n\n```json\n{\n    \"name\": \"webpack-sample-project\",\n    \"version\": \"1.0.0\",\n    \"description\": \"Sample webpack project\",\n    \"scripts\": {\n        // 这里设置 json不支持注释, 引用时请删除\n        \"start\": \"webpack\"\n    },\n    \"author\": \"zhang\",\n    \"license\": \"ISC\",\n    \"devDependencies\": {\n        \"webpack\": \"3.10.0\"\n    }\n}\n```\n\nnpm的start命令是一个特殊的命令, 在命令行中使用`npm start`就可以执行配置的命令, 如果对应的脚本名称不是`start`, 则需要这样`npm run {script name}`, 如`npm run build`。\n","slug":"front_skill_experience/webpack/webpack-first-step-config","published":1,"updated":"2022-10-03T02:27:31.686Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejkl001c3vsbd1915zck","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>接着<a href=\"/js/webpack/webpack-first-step.html\">上一篇</a>, 这一篇要来学习一下Webpack的配置。</p>\n<span id=\"more\"></span>\n<h1 id=\"通过配置文件来使用Webpack\"><a href=\"#通过配置文件来使用Webpack\" class=\"headerlink\" title=\"通过配置文件来使用Webpack\"></a>通过配置文件来使用Webpack</h1><h2 id=\"配置打包文件路径和文件名\"><a href=\"#配置打包文件路径和文件名\" class=\"headerlink\" title=\"配置打包文件路径和文件名\"></a>配置打包文件路径和文件名</h2><p>首先在项目根目录下新建一个名为<code>webpack.config.js</code>的文件, 内容:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 入口文件</span></span><br><span class=\"line\">    <span class=\"attr\">entry</span>: __dirname + <span class=\"string\">&quot;/app/main.js&quot;</span>;</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 打包后文件存放的地方</span></span><br><span class=\"line\">        <span class=\"attr\">path</span>: __dirname + <span class=\"string\">&quot;/public&quot;</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 打包后输出文件的文件名</span></span><br><span class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">&quot;bundle.js&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>__dirname</code>是node.js的一个全局变量, 它指向当前脚本所在的目录。</p>\n</blockquote>\n<p>有了这个配置之后, 就可以直接运行webpack命令来编译代码了。</p>\n<h1 id=\"使用npm-start来执行打包任务\"><a href=\"#使用npm-start来执行打包任务\" class=\"headerlink\" title=\"使用npm start来执行打包任务\"></a>使用npm start来执行打包任务</h1><p>在<code>package.json</code>中对<code>script</code>对象进行设置:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;name&quot;</span>: <span class=\"string\">&quot;webpack-sample-project&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;version&quot;</span>: <span class=\"string\">&quot;1.0.0&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;description&quot;</span>: <span class=\"string\">&quot;Sample webpack project&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;scripts&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这里设置 json不支持注释, 引用时请删除</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;start&quot;</span>: <span class=\"string\">&quot;webpack&quot;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">&quot;author&quot;</span>: <span class=\"string\">&quot;zhang&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;license&quot;</span>: <span class=\"string\">&quot;ISC&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;devDependencies&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">&quot;webpack&quot;</span>: <span class=\"string\">&quot;3.10.0&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>npm的start命令是一个特殊的命令, 在命令行中使用<code>npm start</code>就可以执行配置的命令, 如果对应的脚本名称不是<code>start</code>, 则需要这样<code>npm run &#123;script name&#125;</code>, 如<code>npm run build</code>。</p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>接着<a href=\"/js/webpack/webpack-first-step.html\">上一篇</a>, 这一篇要来学习一下Webpack的配置。</p>","more":"<h1 id=\"通过配置文件来使用Webpack\"><a href=\"#通过配置文件来使用Webpack\" class=\"headerlink\" title=\"通过配置文件来使用Webpack\"></a>通过配置文件来使用Webpack</h1><h2 id=\"配置打包文件路径和文件名\"><a href=\"#配置打包文件路径和文件名\" class=\"headerlink\" title=\"配置打包文件路径和文件名\"></a>配置打包文件路径和文件名</h2><p>首先在项目根目录下新建一个名为<code>webpack.config.js</code>的文件, 内容:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 入口文件</span></span><br><span class=\"line\">    <span class=\"attr\">entry</span>: __dirname + <span class=\"string\">&quot;/app/main.js&quot;</span>;</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 打包后文件存放的地方</span></span><br><span class=\"line\">        <span class=\"attr\">path</span>: __dirname + <span class=\"string\">&quot;/public&quot;</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 打包后输出文件的文件名</span></span><br><span class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">&quot;bundle.js&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>__dirname</code>是node.js的一个全局变量, 它指向当前脚本所在的目录。</p>\n</blockquote>\n<p>有了这个配置之后, 就可以直接运行webpack命令来编译代码了。</p>\n<h1 id=\"使用npm-start来执行打包任务\"><a href=\"#使用npm-start来执行打包任务\" class=\"headerlink\" title=\"使用npm start来执行打包任务\"></a>使用npm start来执行打包任务</h1><p>在<code>package.json</code>中对<code>script</code>对象进行设置:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;name&quot;</span>: <span class=\"string\">&quot;webpack-sample-project&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;version&quot;</span>: <span class=\"string\">&quot;1.0.0&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;description&quot;</span>: <span class=\"string\">&quot;Sample webpack project&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;scripts&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这里设置 json不支持注释, 引用时请删除</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;start&quot;</span>: <span class=\"string\">&quot;webpack&quot;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">&quot;author&quot;</span>: <span class=\"string\">&quot;zhang&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;license&quot;</span>: <span class=\"string\">&quot;ISC&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;devDependencies&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">&quot;webpack&quot;</span>: <span class=\"string\">&quot;3.10.0&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>npm的start命令是一个特殊的命令, 在命令行中使用<code>npm start</code>就可以执行配置的命令, 如果对应的脚本名称不是<code>start</code>, 则需要这样<code>npm run &#123;script name&#125;</code>, 如<code>npm run build</code>。</p>"},{"title":"webpack-起步","date":"2018-12-12T13:38:19.000Z","_content":"\n# 前言\n\n从今天开始, 我要学习前端, 我觉得webpack应该是必经之路, 所以做一下笔记。\n<!--more-->\n\n转自[入门Webpack, 看这篇就够了](https://www.jianshu.com/p/42e11515c10f)\n\n# webpack\n\n先来简单的介绍一下webpack, 把项目当作整体, 通过一个给定的文件找到项目的所有依赖文件, 使用loaders处理他们, 最后打包为一个(或多个)浏览器可识别的JavaScript文件。\n\n# 一个简单的demo\n\n通过这个demo来学习webpack\n\n## 安装\n\n使用npm安装webpack\n\n```shell\n# 全局安装\nnpm install -g webpack\n# 安装到特定的项目目录\nnpm install --save-dev webpack\n```\n\n## 准备\n\n使用`npm init`来创建package.json文件, 这个文件说明了当前项目的依赖模块, 还包括自定义的脚本任务等等。\n\n接下来终端会根据一系列的问题来创建相关的package.json文件, 当然如果不准备在npm中发布模块的话, 答案并不重要。\n\n接下来在当前项目的根目录下创建两个文件夹:`app`和`public`, 接下来创建三个文件:`index.html`, 放在public文件夹中,  `Greeter.js`和`main.js`, 放在app文件夹中。\n\n在`index.html`文件中写入html代码, 用来引入打包后的js文件。\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <meta charset=\"utf-8\" />\n        <title>Webpack Sample Project</title>\n    </head>\n    <body>\n        <div id='root'>\n        </div>\n        <script src=\"bundle.js\"></script>\n    </body>\n</html>\n```\n\n接下来在`Greeter.js`文件中编写代码, 定义一个返回问候信息的html元素的函数, 并依据CommonJS规范到处这个函数为一个模块:\n\n```js\n// Greeter.js\nmodule.exports = function() {\n    var greet = document.createElement('div');\n    greet.textContent = \"Hi there and greetings!\";\n    return greet;\n}\n```\n\n## 使用\n\n最后再使用`webpack`命令来对js代码进行编译:\n\n```shell\nwebpack app/main.js /public/bundle.js\n\n# 如果非全局安装则需要指定其在`node_modules`中的地址:\n\nnode_modules/.bin/webpack app/main.js /public/bundle.js\n```\n\n\n","source":"_posts/front_skill_experience/webpack/webpack-first-step.md","raw":"---\ntitle: webpack-起步\ndate: 2018-12-12 21:38:19\ncategories:\n- 前端技巧/经验\n- webpack\ntags:\n- webpack\n---\n\n# 前言\n\n从今天开始, 我要学习前端, 我觉得webpack应该是必经之路, 所以做一下笔记。\n<!--more-->\n\n转自[入门Webpack, 看这篇就够了](https://www.jianshu.com/p/42e11515c10f)\n\n# webpack\n\n先来简单的介绍一下webpack, 把项目当作整体, 通过一个给定的文件找到项目的所有依赖文件, 使用loaders处理他们, 最后打包为一个(或多个)浏览器可识别的JavaScript文件。\n\n# 一个简单的demo\n\n通过这个demo来学习webpack\n\n## 安装\n\n使用npm安装webpack\n\n```shell\n# 全局安装\nnpm install -g webpack\n# 安装到特定的项目目录\nnpm install --save-dev webpack\n```\n\n## 准备\n\n使用`npm init`来创建package.json文件, 这个文件说明了当前项目的依赖模块, 还包括自定义的脚本任务等等。\n\n接下来终端会根据一系列的问题来创建相关的package.json文件, 当然如果不准备在npm中发布模块的话, 答案并不重要。\n\n接下来在当前项目的根目录下创建两个文件夹:`app`和`public`, 接下来创建三个文件:`index.html`, 放在public文件夹中,  `Greeter.js`和`main.js`, 放在app文件夹中。\n\n在`index.html`文件中写入html代码, 用来引入打包后的js文件。\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <meta charset=\"utf-8\" />\n        <title>Webpack Sample Project</title>\n    </head>\n    <body>\n        <div id='root'>\n        </div>\n        <script src=\"bundle.js\"></script>\n    </body>\n</html>\n```\n\n接下来在`Greeter.js`文件中编写代码, 定义一个返回问候信息的html元素的函数, 并依据CommonJS规范到处这个函数为一个模块:\n\n```js\n// Greeter.js\nmodule.exports = function() {\n    var greet = document.createElement('div');\n    greet.textContent = \"Hi there and greetings!\";\n    return greet;\n}\n```\n\n## 使用\n\n最后再使用`webpack`命令来对js代码进行编译:\n\n```shell\nwebpack app/main.js /public/bundle.js\n\n# 如果非全局安装则需要指定其在`node_modules`中的地址:\n\nnode_modules/.bin/webpack app/main.js /public/bundle.js\n```\n\n\n","slug":"front_skill_experience/webpack/webpack-first-step","published":1,"updated":"2022-10-03T02:27:23.828Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejkq001f3vsbgysv8asx","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>从今天开始, 我要学习前端, 我觉得webpack应该是必经之路, 所以做一下笔记。</p>\n<span id=\"more\"></span>\n\n<p>转自<a href=\"https://www.jianshu.com/p/42e11515c10f\">入门Webpack, 看这篇就够了</a></p>\n<h1 id=\"webpack\"><a href=\"#webpack\" class=\"headerlink\" title=\"webpack\"></a>webpack</h1><p>先来简单的介绍一下webpack, 把项目当作整体, 通过一个给定的文件找到项目的所有依赖文件, 使用loaders处理他们, 最后打包为一个(或多个)浏览器可识别的JavaScript文件。</p>\n<h1 id=\"一个简单的demo\"><a href=\"#一个简单的demo\" class=\"headerlink\" title=\"一个简单的demo\"></a>一个简单的demo</h1><p>通过这个demo来学习webpack</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>使用npm安装webpack</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 全局安装</span></span><br><span class=\"line\">npm install -g webpack</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装到特定的项目目录</span></span><br><span class=\"line\">npm install --save-dev webpack</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><p>使用<code>npm init</code>来创建package.json文件, 这个文件说明了当前项目的依赖模块, 还包括自定义的脚本任务等等。</p>\n<p>接下来终端会根据一系列的问题来创建相关的package.json文件, 当然如果不准备在npm中发布模块的话, 答案并不重要。</p>\n<p>接下来在当前项目的根目录下创建两个文件夹:<code>app</code>和<code>public</code>, 接下来创建三个文件:<code>index.html</code>, 放在public文件夹中,  <code>Greeter.js</code>和<code>main.js</code>, 放在app文件夹中。</p>\n<p>在<code>index.html</code>文件中写入html代码, 用来引入打包后的js文件。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Webpack Sample Project<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&#x27;root&#x27;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;bundle.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>接下来在<code>Greeter.js</code>文件中编写代码, 定义一个返回问候信息的html元素的函数, 并依据CommonJS规范到处这个函数为一个模块:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Greeter.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> greet = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;div&#x27;</span>);</span><br><span class=\"line\">    greet.textContent = <span class=\"string\">&quot;Hi there and greetings!&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> greet;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>最后再使用<code>webpack</code>命令来对js代码进行编译:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack app/main.js /public/bundle.js</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 如果非全局安装则需要指定其在`node_modules`中的地址:</span></span><br><span class=\"line\"></span><br><span class=\"line\">node_modules/.bin/webpack app/main.js /public/bundle.js</span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>从今天开始, 我要学习前端, 我觉得webpack应该是必经之路, 所以做一下笔记。</p>","more":"<p>转自<a href=\"https://www.jianshu.com/p/42e11515c10f\">入门Webpack, 看这篇就够了</a></p>\n<h1 id=\"webpack\"><a href=\"#webpack\" class=\"headerlink\" title=\"webpack\"></a>webpack</h1><p>先来简单的介绍一下webpack, 把项目当作整体, 通过一个给定的文件找到项目的所有依赖文件, 使用loaders处理他们, 最后打包为一个(或多个)浏览器可识别的JavaScript文件。</p>\n<h1 id=\"一个简单的demo\"><a href=\"#一个简单的demo\" class=\"headerlink\" title=\"一个简单的demo\"></a>一个简单的demo</h1><p>通过这个demo来学习webpack</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>使用npm安装webpack</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 全局安装</span></span><br><span class=\"line\">npm install -g webpack</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装到特定的项目目录</span></span><br><span class=\"line\">npm install --save-dev webpack</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><p>使用<code>npm init</code>来创建package.json文件, 这个文件说明了当前项目的依赖模块, 还包括自定义的脚本任务等等。</p>\n<p>接下来终端会根据一系列的问题来创建相关的package.json文件, 当然如果不准备在npm中发布模块的话, 答案并不重要。</p>\n<p>接下来在当前项目的根目录下创建两个文件夹:<code>app</code>和<code>public</code>, 接下来创建三个文件:<code>index.html</code>, 放在public文件夹中,  <code>Greeter.js</code>和<code>main.js</code>, 放在app文件夹中。</p>\n<p>在<code>index.html</code>文件中写入html代码, 用来引入打包后的js文件。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Webpack Sample Project<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&#x27;root&#x27;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;bundle.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>接下来在<code>Greeter.js</code>文件中编写代码, 定义一个返回问候信息的html元素的函数, 并依据CommonJS规范到处这个函数为一个模块:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Greeter.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> greet = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;div&#x27;</span>);</span><br><span class=\"line\">    greet.textContent = <span class=\"string\">&quot;Hi there and greetings!&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> greet;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>最后再使用<code>webpack</code>命令来对js代码进行编译:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack app/main.js /public/bundle.js</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 如果非全局安装则需要指定其在`node_modules`中的地址:</span></span><br><span class=\"line\"></span><br><span class=\"line\">node_modules/.bin/webpack app/main.js /public/bundle.js</span><br></pre></td></tr></table></figure>"},{"title":"webpack-loaders和babel的配置","date":"2019-03-04T15:14:35.000Z","_content":"\n# 前言\n\n[上一篇](/js/webpack/webpack-dev-server.html)介绍了如何设置本地服务器, 那么本篇来介绍如何配置loaders和babel\n\nwebpack通过使用不同的loaders, 调用外部的脚本或工具, 实现对不同格式的文件的处理, 比如分析转换scss为css, 或者把ES6, ES7文件转换为现代浏览器兼容的JS文件, 合适的loader还可以将react中用到的JSX文件转换为JS文件。\n<!--more-->\n# 安装\n\n这里由于`webpack3.*/webpack2.*`已经内置可处理JSON文件, 所以无需添加处理JSON的loader, 这里直接配置就好。\n\n# 配置\n\n在app文件夹中创建带有问候信息的JSON文件(命名为`config.json`)\n```json\n{\n    \"greetText\": \"Hi there and greetings from JSON!\"\n}\n```\n\nGreeters.js:\n\n```js\nvar config = require('./config.json');\n\nmodule.exports = function() {\n    var greet = document.createElement('div');\n    greet.textContent = config.greetText;\n    return greet;\n}\n```\n\n# Babel\n\nBabel可以编译JavaScript, 将ES6, ES7的JS文件编译为ES5的JS文件。也可以将JavaScript进行了拓展的语言编译为普通的JS文件, 比如React的JSX。\n\n# Babel的安装\n\n安装命令:\n\n```shell\nnpm install --save-dev babel-core babel-loader@7 babel-preset-env babel-preset=react\n```\n\n> 注意, 这里安装babel-loader的时候需要安装7.*版本的, 现在最新的babel-loader版本为8.*, 而对应的babel/core版本为7.*, 如果babel-loader版本为7.*, 对应的babel-core版本为6.*, 我这里尝试了安装7版本的, 会报错:\n```shell\nERROR in ./app/main.js\nModule build failed (from ./node_modules/babel-loader/lib/index.js):\n        Error: Plugin/Preset files are not allowed to export objects, only functions. In /home/littleboy/myProject/myWebPackDemo/node_modules/babel-preset-react/lib/index.js\n            at createDescriptor (/home/littleboy/myProject/myWebPackDemo/node_modules/@babel/core/lib/config/config-descriptors.js:178:11)\n            at items.map (/home/littleboy/myProject/myWebPackDemo/node_modules/@babel/core/lib/config/config-descriptors.js:109:50)\n            at Array.map (<anonymous>)\n            at createDescriptors (/home/littleboy/myProject/myWebPackDemo/node_modules/@babel/core/lib/config/config-descriptors.js:109:29)\n            at createPresetDescriptors (/home/littleboy/myProject/myWebPackDemo/node_modules/@babel/core/lib/config/config-descriptors.js:101:10)\n            at passPerPreset (/home/littleboy/myProject/myWebPackDemo/node_modules/@babel/core/lib/config/config-descriptors.js:58:96)\n            at cachedFunction (/home/littleboy/myProject/myWebPackDemo/node_modules/@babel/core/lib/config/caching.js:33:19)\n            at presets.presets (/home/littleboy/myProject/myWebPackDemo/node_modules/@babel/core/lib/config/config-descriptors.js:29:84)\n            at mergeChainOpts (/home/littleboy/myProject/myWebPackDemo/node_modules/@babel/core/lib/config/config-chain.js:320:26)\n            at /home/littleboy/myProject/myWebPackDemo/node_modules/@babel/core/lib/config/config-chain.js:283:7\n         @ multi (webpack)-dev-server/client?http://0.0.0.0:8080 ./app/main.js main[1]\n```\n所以我直接安装6版本的babel-core和7版本的babel-loader。\n\n# 配置\n\nwebpack.config.js:\n\n```js\nmodule.exports = {\n    // 省略代码....\n    module: {\n        rules: [\n            {\n                test: /(\\.jsx|\\.js)$/,\n                use: {\n                    loader: \"babel-loader\", \n                    options: {\n                        presets: [\n                            \"env\", \"react\"\n                        ] \n                    }\n                },\n                exclude: /node_modules/\n            }\n        ]\n    }\n}\n```\n\n现在使用`npm run server`命令来运行server, 此时可以看到浏览器已经把config.json中的内容展示出来了。\n\n上面配置了Babel的loader, 那么现在我们的webpack项目已经可以使用ES6以及JSX的语法了, 接下来我们使用react语法来测试一下。但是我们首先要安装react和react-DOM。\n\n```shell\nnpm install --save react react-dom\n```\n\n接下来更改Greeter.js, 让它返回一个react组件:\n\n```js\n// Greeter.js\nimport React, {component} from 'react'\nimport config from './config.json'\n\nclass Greeter extends Component {\n    reader() {\n        return (\n            <div>\n                {config.greetText}\n            </div>\n        );\n    }\n}\n\nexport default Greeter\n```\n\n接着修改main.js:\n\n```js\nimport react from 'react'\nimport {render} from 'react-dom'\nimport Greeter from './Greeter'\n\nrender(<Greeter />, document.getElementById('root'));\n```\n\n修改完之后使用`npm start`重新打包, 并运行server来查看运行结果。\n\n\n# Babel 单独配置\n\nBabel的配置可以单独放到另外一个文件中, 如果都放到`webpack.config.js`文件中会显得很复杂。\n\n```js\nmodule.exports = {\n    // 入口文件\n    enrty: __dirname + \"/app/main.js\",\n    output: {\n        // 打包后文件存在的地方\n        path: __dirname + \"/public\",\n        // 打包后输出文件的文件名\n        filename: \"bundle.js\"\n    },\n    devtool: 'eval-source-map',\n    devServer: {\n        // 本地服务器所加载的页面所在的目录\n        contentBase: \"./public\",\n        host: \"0.0.0.0\",\n        inline: true\n    },\n    module: {\n        rules: [\n            {\n                test: /(\\.jsx|\\.js)$/,\n                use: {\n                    loader: \"babel-loader\"\n                },\n                exclude: /node_modules/\n            }\n        ]\n    }\n}\n```\n\nwebpack会自动调用.babelrc里的配置选项:\n\n```js\n// .babelrc\n{\n    \"presets\": [\"react\", \"env\"]\n}\n```\n","source":"_posts/front_skill_experience/webpack/webpack-loaders-babel-config.md","raw":"---\ntitle: webpack-loaders和babel的配置\ndate: 2019-03-04 23:14:35\ncategories:\n- 前端技巧/经验\n- webpack\ntags:\n- webpack\n---\n\n# 前言\n\n[上一篇](/js/webpack/webpack-dev-server.html)介绍了如何设置本地服务器, 那么本篇来介绍如何配置loaders和babel\n\nwebpack通过使用不同的loaders, 调用外部的脚本或工具, 实现对不同格式的文件的处理, 比如分析转换scss为css, 或者把ES6, ES7文件转换为现代浏览器兼容的JS文件, 合适的loader还可以将react中用到的JSX文件转换为JS文件。\n<!--more-->\n# 安装\n\n这里由于`webpack3.*/webpack2.*`已经内置可处理JSON文件, 所以无需添加处理JSON的loader, 这里直接配置就好。\n\n# 配置\n\n在app文件夹中创建带有问候信息的JSON文件(命名为`config.json`)\n```json\n{\n    \"greetText\": \"Hi there and greetings from JSON!\"\n}\n```\n\nGreeters.js:\n\n```js\nvar config = require('./config.json');\n\nmodule.exports = function() {\n    var greet = document.createElement('div');\n    greet.textContent = config.greetText;\n    return greet;\n}\n```\n\n# Babel\n\nBabel可以编译JavaScript, 将ES6, ES7的JS文件编译为ES5的JS文件。也可以将JavaScript进行了拓展的语言编译为普通的JS文件, 比如React的JSX。\n\n# Babel的安装\n\n安装命令:\n\n```shell\nnpm install --save-dev babel-core babel-loader@7 babel-preset-env babel-preset=react\n```\n\n> 注意, 这里安装babel-loader的时候需要安装7.*版本的, 现在最新的babel-loader版本为8.*, 而对应的babel/core版本为7.*, 如果babel-loader版本为7.*, 对应的babel-core版本为6.*, 我这里尝试了安装7版本的, 会报错:\n```shell\nERROR in ./app/main.js\nModule build failed (from ./node_modules/babel-loader/lib/index.js):\n        Error: Plugin/Preset files are not allowed to export objects, only functions. In /home/littleboy/myProject/myWebPackDemo/node_modules/babel-preset-react/lib/index.js\n            at createDescriptor (/home/littleboy/myProject/myWebPackDemo/node_modules/@babel/core/lib/config/config-descriptors.js:178:11)\n            at items.map (/home/littleboy/myProject/myWebPackDemo/node_modules/@babel/core/lib/config/config-descriptors.js:109:50)\n            at Array.map (<anonymous>)\n            at createDescriptors (/home/littleboy/myProject/myWebPackDemo/node_modules/@babel/core/lib/config/config-descriptors.js:109:29)\n            at createPresetDescriptors (/home/littleboy/myProject/myWebPackDemo/node_modules/@babel/core/lib/config/config-descriptors.js:101:10)\n            at passPerPreset (/home/littleboy/myProject/myWebPackDemo/node_modules/@babel/core/lib/config/config-descriptors.js:58:96)\n            at cachedFunction (/home/littleboy/myProject/myWebPackDemo/node_modules/@babel/core/lib/config/caching.js:33:19)\n            at presets.presets (/home/littleboy/myProject/myWebPackDemo/node_modules/@babel/core/lib/config/config-descriptors.js:29:84)\n            at mergeChainOpts (/home/littleboy/myProject/myWebPackDemo/node_modules/@babel/core/lib/config/config-chain.js:320:26)\n            at /home/littleboy/myProject/myWebPackDemo/node_modules/@babel/core/lib/config/config-chain.js:283:7\n         @ multi (webpack)-dev-server/client?http://0.0.0.0:8080 ./app/main.js main[1]\n```\n所以我直接安装6版本的babel-core和7版本的babel-loader。\n\n# 配置\n\nwebpack.config.js:\n\n```js\nmodule.exports = {\n    // 省略代码....\n    module: {\n        rules: [\n            {\n                test: /(\\.jsx|\\.js)$/,\n                use: {\n                    loader: \"babel-loader\", \n                    options: {\n                        presets: [\n                            \"env\", \"react\"\n                        ] \n                    }\n                },\n                exclude: /node_modules/\n            }\n        ]\n    }\n}\n```\n\n现在使用`npm run server`命令来运行server, 此时可以看到浏览器已经把config.json中的内容展示出来了。\n\n上面配置了Babel的loader, 那么现在我们的webpack项目已经可以使用ES6以及JSX的语法了, 接下来我们使用react语法来测试一下。但是我们首先要安装react和react-DOM。\n\n```shell\nnpm install --save react react-dom\n```\n\n接下来更改Greeter.js, 让它返回一个react组件:\n\n```js\n// Greeter.js\nimport React, {component} from 'react'\nimport config from './config.json'\n\nclass Greeter extends Component {\n    reader() {\n        return (\n            <div>\n                {config.greetText}\n            </div>\n        );\n    }\n}\n\nexport default Greeter\n```\n\n接着修改main.js:\n\n```js\nimport react from 'react'\nimport {render} from 'react-dom'\nimport Greeter from './Greeter'\n\nrender(<Greeter />, document.getElementById('root'));\n```\n\n修改完之后使用`npm start`重新打包, 并运行server来查看运行结果。\n\n\n# Babel 单独配置\n\nBabel的配置可以单独放到另外一个文件中, 如果都放到`webpack.config.js`文件中会显得很复杂。\n\n```js\nmodule.exports = {\n    // 入口文件\n    enrty: __dirname + \"/app/main.js\",\n    output: {\n        // 打包后文件存在的地方\n        path: __dirname + \"/public\",\n        // 打包后输出文件的文件名\n        filename: \"bundle.js\"\n    },\n    devtool: 'eval-source-map',\n    devServer: {\n        // 本地服务器所加载的页面所在的目录\n        contentBase: \"./public\",\n        host: \"0.0.0.0\",\n        inline: true\n    },\n    module: {\n        rules: [\n            {\n                test: /(\\.jsx|\\.js)$/,\n                use: {\n                    loader: \"babel-loader\"\n                },\n                exclude: /node_modules/\n            }\n        ]\n    }\n}\n```\n\nwebpack会自动调用.babelrc里的配置选项:\n\n```js\n// .babelrc\n{\n    \"presets\": [\"react\", \"env\"]\n}\n```\n","slug":"front_skill_experience/webpack/webpack-loaders-babel-config","published":1,"updated":"2022-10-03T02:27:42.893Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejku001h3vsb802ee0ll","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p><a href=\"/js/webpack/webpack-dev-server.html\">上一篇</a>介绍了如何设置本地服务器, 那么本篇来介绍如何配置loaders和babel</p>\n<p>webpack通过使用不同的loaders, 调用外部的脚本或工具, 实现对不同格式的文件的处理, 比如分析转换scss为css, 或者把ES6, ES7文件转换为现代浏览器兼容的JS文件, 合适的loader还可以将react中用到的JSX文件转换为JS文件。</p>\n<span id=\"more\"></span>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><p>这里由于<code>webpack3.*/webpack2.*</code>已经内置可处理JSON文件, 所以无需添加处理JSON的loader, 这里直接配置就好。</p>\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><p>在app文件夹中创建带有问候信息的JSON文件(命名为<code>config.json</code>)</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;greetText&quot;</span>: <span class=\"string\">&quot;Hi there and greetings from JSON!&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Greeters.js:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./config.json&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> greet = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;div&#x27;</span>);</span><br><span class=\"line\">    greet.textContent = config.greetText;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> greet;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Babel\"><a href=\"#Babel\" class=\"headerlink\" title=\"Babel\"></a>Babel</h1><p>Babel可以编译JavaScript, 将ES6, ES7的JS文件编译为ES5的JS文件。也可以将JavaScript进行了拓展的语言编译为普通的JS文件, 比如React的JSX。</p>\n<h1 id=\"Babel的安装\"><a href=\"#Babel的安装\" class=\"headerlink\" title=\"Babel的安装\"></a>Babel的安装</h1><p>安装命令:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev babel-core babel-loader@7 babel-preset-env babel-preset=react</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意, 这里安装babel-loader的时候需要安装7.<em>版本的, 现在最新的babel-loader版本为8.</em>, 而对应的babel&#x2F;core版本为7.<em>, 如果babel-loader版本为7.</em>, 对应的babel-core版本为6.*, 我这里尝试了安装7版本的, 会报错:</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ERROR in ./app/main.js</span><br><span class=\"line\">Module build failed (from ./node_modules/babel-loader/lib/index.js):</span><br><span class=\"line\">        Error: Plugin/Preset files are not allowed to export objects, only functions. In /home/littleboy/myProject/myWebPackDemo/node_modules/babel-preset-react/lib/index.js</span><br><span class=\"line\">            at createDescriptor (/home/littleboy/myProject/myWebPackDemo/node_modules/@babel/core/lib/config/config-descriptors.js:178:11)</span><br><span class=\"line\">            at items.map (/home/littleboy/myProject/myWebPackDemo/node_modules/@babel/core/lib/config/config-descriptors.js:109:50)</span><br><span class=\"line\">            at Array.map (&lt;anonymous&gt;)</span><br><span class=\"line\">            at createDescriptors (/home/littleboy/myProject/myWebPackDemo/node_modules/@babel/core/lib/config/config-descriptors.js:109:29)</span><br><span class=\"line\">            at createPresetDescriptors (/home/littleboy/myProject/myWebPackDemo/node_modules/@babel/core/lib/config/config-descriptors.js:101:10)</span><br><span class=\"line\">            at passPerPreset (/home/littleboy/myProject/myWebPackDemo/node_modules/@babel/core/lib/config/config-descriptors.js:58:96)</span><br><span class=\"line\">            at cachedFunction (/home/littleboy/myProject/myWebPackDemo/node_modules/@babel/core/lib/config/caching.js:33:19)</span><br><span class=\"line\">            at presets.presets (/home/littleboy/myProject/myWebPackDemo/node_modules/@babel/core/lib/config/config-descriptors.js:29:84)</span><br><span class=\"line\">            at mergeChainOpts (/home/littleboy/myProject/myWebPackDemo/node_modules/@babel/core/lib/config/config-chain.js:320:26)</span><br><span class=\"line\">            at /home/littleboy/myProject/myWebPackDemo/node_modules/@babel/core/lib/config/config-chain.js:283:7</span><br><span class=\"line\">         @ multi (webpack)-dev-server/client?http://0.0.0.0:8080 ./app/main.js main[1]</span><br></pre></td></tr></table></figure>\n<p>所以我直接安装6版本的babel-core和7版本的babel-loader。</p>\n<h1 id=\"配置-1\"><a href=\"#配置-1\" class=\"headerlink\" title=\"配置\"></a>配置</h1><p>webpack.config.js:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 省略代码....</span></span><br><span class=\"line\">    <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">test</span>: <span class=\"regexp\">/(\\.jsx|\\.js)$/</span>,</span><br><span class=\"line\">                use: &#123;</span><br><span class=\"line\">                    <span class=\"attr\">loader</span>: <span class=\"string\">&quot;babel-loader&quot;</span>, </span><br><span class=\"line\">                    <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">                        <span class=\"attr\">presets</span>: [</span><br><span class=\"line\">                            <span class=\"string\">&quot;env&quot;</span>, <span class=\"string\">&quot;react&quot;</span></span><br><span class=\"line\">                        ] </span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                <span class=\"attr\">exclude</span>: <span class=\"regexp\">/node_modules/</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>现在使用<code>npm run server</code>命令来运行server, 此时可以看到浏览器已经把config.json中的内容展示出来了。</p>\n<p>上面配置了Babel的loader, 那么现在我们的webpack项目已经可以使用ES6以及JSX的语法了, 接下来我们使用react语法来测试一下。但是我们首先要安装react和react-DOM。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save react react-dom</span><br></pre></td></tr></table></figure>\n\n<p>接下来更改Greeter.js, 让它返回一个react组件:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Greeter.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> React, &#123;component&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> config <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./config.json&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Greeter</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">reader</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">            <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                &#123;config.greetText&#125;</span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Greeter</span><br></pre></td></tr></table></figure>\n\n<p>接着修改main.js:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> react <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;render&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-dom&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Greeter <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./Greeter&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">render(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Greeter</span> /&gt;</span></span>, <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;root&#x27;</span>));</span><br></pre></td></tr></table></figure>\n\n<p>修改完之后使用<code>npm start</code>重新打包, 并运行server来查看运行结果。</p>\n<h1 id=\"Babel-单独配置\"><a href=\"#Babel-单独配置\" class=\"headerlink\" title=\"Babel 单独配置\"></a>Babel 单独配置</h1><p>Babel的配置可以单独放到另外一个文件中, 如果都放到<code>webpack.config.js</code>文件中会显得很复杂。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 入口文件</span></span><br><span class=\"line\">    <span class=\"attr\">enrty</span>: __dirname + <span class=\"string\">&quot;/app/main.js&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 打包后文件存在的地方</span></span><br><span class=\"line\">        <span class=\"attr\">path</span>: __dirname + <span class=\"string\">&quot;/public&quot;</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 打包后输出文件的文件名</span></span><br><span class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">&quot;bundle.js&quot;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">devtool</span>: <span class=\"string\">&#x27;eval-source-map&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">devServer</span>: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 本地服务器所加载的页面所在的目录</span></span><br><span class=\"line\">        <span class=\"attr\">contentBase</span>: <span class=\"string\">&quot;./public&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">host</span>: <span class=\"string\">&quot;0.0.0.0&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">inline</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">test</span>: <span class=\"regexp\">/(\\.jsx|\\.js)$/</span>,</span><br><span class=\"line\">                use: &#123;</span><br><span class=\"line\">                    <span class=\"attr\">loader</span>: <span class=\"string\">&quot;babel-loader&quot;</span></span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                <span class=\"attr\">exclude</span>: <span class=\"regexp\">/node_modules/</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>webpack会自动调用.babelrc里的配置选项:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// .babelrc</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;presets&quot;</span>: [<span class=\"string\">&quot;react&quot;</span>, <span class=\"string\">&quot;env&quot;</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p><a href=\"/js/webpack/webpack-dev-server.html\">上一篇</a>介绍了如何设置本地服务器, 那么本篇来介绍如何配置loaders和babel</p>\n<p>webpack通过使用不同的loaders, 调用外部的脚本或工具, 实现对不同格式的文件的处理, 比如分析转换scss为css, 或者把ES6, ES7文件转换为现代浏览器兼容的JS文件, 合适的loader还可以将react中用到的JSX文件转换为JS文件。</p>","more":"<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><p>这里由于<code>webpack3.*/webpack2.*</code>已经内置可处理JSON文件, 所以无需添加处理JSON的loader, 这里直接配置就好。</p>\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><p>在app文件夹中创建带有问候信息的JSON文件(命名为<code>config.json</code>)</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;greetText&quot;</span>: <span class=\"string\">&quot;Hi there and greetings from JSON!&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Greeters.js:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./config.json&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> greet = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;div&#x27;</span>);</span><br><span class=\"line\">    greet.textContent = config.greetText;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> greet;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Babel\"><a href=\"#Babel\" class=\"headerlink\" title=\"Babel\"></a>Babel</h1><p>Babel可以编译JavaScript, 将ES6, ES7的JS文件编译为ES5的JS文件。也可以将JavaScript进行了拓展的语言编译为普通的JS文件, 比如React的JSX。</p>\n<h1 id=\"Babel的安装\"><a href=\"#Babel的安装\" class=\"headerlink\" title=\"Babel的安装\"></a>Babel的安装</h1><p>安装命令:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev babel-core babel-loader@7 babel-preset-env babel-preset=react</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意, 这里安装babel-loader的时候需要安装7.<em>版本的, 现在最新的babel-loader版本为8.</em>, 而对应的babel&#x2F;core版本为7.<em>, 如果babel-loader版本为7.</em>, 对应的babel-core版本为6.*, 我这里尝试了安装7版本的, 会报错:</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ERROR in ./app/main.js</span><br><span class=\"line\">Module build failed (from ./node_modules/babel-loader/lib/index.js):</span><br><span class=\"line\">        Error: Plugin/Preset files are not allowed to export objects, only functions. In /home/littleboy/myProject/myWebPackDemo/node_modules/babel-preset-react/lib/index.js</span><br><span class=\"line\">            at createDescriptor (/home/littleboy/myProject/myWebPackDemo/node_modules/@babel/core/lib/config/config-descriptors.js:178:11)</span><br><span class=\"line\">            at items.map (/home/littleboy/myProject/myWebPackDemo/node_modules/@babel/core/lib/config/config-descriptors.js:109:50)</span><br><span class=\"line\">            at Array.map (&lt;anonymous&gt;)</span><br><span class=\"line\">            at createDescriptors (/home/littleboy/myProject/myWebPackDemo/node_modules/@babel/core/lib/config/config-descriptors.js:109:29)</span><br><span class=\"line\">            at createPresetDescriptors (/home/littleboy/myProject/myWebPackDemo/node_modules/@babel/core/lib/config/config-descriptors.js:101:10)</span><br><span class=\"line\">            at passPerPreset (/home/littleboy/myProject/myWebPackDemo/node_modules/@babel/core/lib/config/config-descriptors.js:58:96)</span><br><span class=\"line\">            at cachedFunction (/home/littleboy/myProject/myWebPackDemo/node_modules/@babel/core/lib/config/caching.js:33:19)</span><br><span class=\"line\">            at presets.presets (/home/littleboy/myProject/myWebPackDemo/node_modules/@babel/core/lib/config/config-descriptors.js:29:84)</span><br><span class=\"line\">            at mergeChainOpts (/home/littleboy/myProject/myWebPackDemo/node_modules/@babel/core/lib/config/config-chain.js:320:26)</span><br><span class=\"line\">            at /home/littleboy/myProject/myWebPackDemo/node_modules/@babel/core/lib/config/config-chain.js:283:7</span><br><span class=\"line\">         @ multi (webpack)-dev-server/client?http://0.0.0.0:8080 ./app/main.js main[1]</span><br></pre></td></tr></table></figure>\n<p>所以我直接安装6版本的babel-core和7版本的babel-loader。</p>\n<h1 id=\"配置-1\"><a href=\"#配置-1\" class=\"headerlink\" title=\"配置\"></a>配置</h1><p>webpack.config.js:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 省略代码....</span></span><br><span class=\"line\">    <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">test</span>: <span class=\"regexp\">/(\\.jsx|\\.js)$/</span>,</span><br><span class=\"line\">                use: &#123;</span><br><span class=\"line\">                    <span class=\"attr\">loader</span>: <span class=\"string\">&quot;babel-loader&quot;</span>, </span><br><span class=\"line\">                    <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">                        <span class=\"attr\">presets</span>: [</span><br><span class=\"line\">                            <span class=\"string\">&quot;env&quot;</span>, <span class=\"string\">&quot;react&quot;</span></span><br><span class=\"line\">                        ] </span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                <span class=\"attr\">exclude</span>: <span class=\"regexp\">/node_modules/</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>现在使用<code>npm run server</code>命令来运行server, 此时可以看到浏览器已经把config.json中的内容展示出来了。</p>\n<p>上面配置了Babel的loader, 那么现在我们的webpack项目已经可以使用ES6以及JSX的语法了, 接下来我们使用react语法来测试一下。但是我们首先要安装react和react-DOM。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save react react-dom</span><br></pre></td></tr></table></figure>\n\n<p>接下来更改Greeter.js, 让它返回一个react组件:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Greeter.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> React, &#123;component&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> config <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./config.json&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Greeter</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">reader</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">            <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                &#123;config.greetText&#125;</span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Greeter</span><br></pre></td></tr></table></figure>\n\n<p>接着修改main.js:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> react <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;render&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-dom&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Greeter <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./Greeter&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">render(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Greeter</span> /&gt;</span></span>, <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;root&#x27;</span>));</span><br></pre></td></tr></table></figure>\n\n<p>修改完之后使用<code>npm start</code>重新打包, 并运行server来查看运行结果。</p>\n<h1 id=\"Babel-单独配置\"><a href=\"#Babel-单独配置\" class=\"headerlink\" title=\"Babel 单独配置\"></a>Babel 单独配置</h1><p>Babel的配置可以单独放到另外一个文件中, 如果都放到<code>webpack.config.js</code>文件中会显得很复杂。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 入口文件</span></span><br><span class=\"line\">    <span class=\"attr\">enrty</span>: __dirname + <span class=\"string\">&quot;/app/main.js&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 打包后文件存在的地方</span></span><br><span class=\"line\">        <span class=\"attr\">path</span>: __dirname + <span class=\"string\">&quot;/public&quot;</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 打包后输出文件的文件名</span></span><br><span class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">&quot;bundle.js&quot;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">devtool</span>: <span class=\"string\">&#x27;eval-source-map&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">devServer</span>: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 本地服务器所加载的页面所在的目录</span></span><br><span class=\"line\">        <span class=\"attr\">contentBase</span>: <span class=\"string\">&quot;./public&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">host</span>: <span class=\"string\">&quot;0.0.0.0&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">inline</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">test</span>: <span class=\"regexp\">/(\\.jsx|\\.js)$/</span>,</span><br><span class=\"line\">                use: &#123;</span><br><span class=\"line\">                    <span class=\"attr\">loader</span>: <span class=\"string\">&quot;babel-loader&quot;</span></span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                <span class=\"attr\">exclude</span>: <span class=\"regexp\">/node_modules/</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>webpack会自动调用.babelrc里的配置选项:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// .babelrc</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;presets&quot;</span>: [<span class=\"string\">&quot;react&quot;</span>, <span class=\"string\">&quot;env&quot;</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"webpack-source map","date":"2019-02-28T13:39:41.000Z","_content":"\n# 前言\n\nwebpack打包之后的文件, 如果出了错是不太好调试的, 而`Source Maps`可以很方便的调试。\n\n<!--more-->\n# 配置\n\n在`webpack`的配置文件中配置`source maps`, 需要配置`devtool`, 有以下四种不同的配置选项:\n\n| DEVTOOL 选项 | 配置结果 |\n| :----------- | :------- |\n| source-map | 在一个单独的文件中产生一个完整且功能完全的文件。这个文件具有最好的 source map, 但是它会减慢打包速度 |\n| cheap-module-source-map | 在一个单独的文件中生成一个不带列映射的 map, 不带列映射提高了打包速度, 但是也使得浏览器开发者工具只能对应到具体的行, 不能对应到具体的列 |\n| eval-source-map | 使用 eval 打包源文件模块, 在同一个文件中生成干净的完整的 source map。这个选项可以不影响构建速度的前提下生成完整的 sourcemap, 但是对打包后输出的 JS 文件的执行具有性能和安全的隐患。在开发阶段这是一个好选项, 生产阶段则一定不要启用这个选项 |\n| cheap-module-eval-source-map | 这是在打包文件时最快的生成 source map 的方法, 生成的 Source Map 会和打包后的 JavaScript 文件同行显示, 没有列映射, 和 eval-source-map 选项具有相似的缺点。 |\n\n根据上述情况, 我们可以在开发阶段使用`eval-source-map`来构建`Source Maps`, 可以这样配置:\n\n```js\nmodule.exports = {\n    devtool: 'eval-source-map',\n    entry: __dirname + \"/app/main.js\",\n    output: {\n        path: __dirname + \"/public\",\n        filename: \"bundle.js\"\n    }\n}\n```\n","source":"_posts/front_skill_experience/webpack/webpack-source-map.md","raw":"---\ntitle: webpack-source map\ndate: 2019-02-28 21:39:41\ncategories:\n- 前端技巧/经验\n- webpack\ntags:\n- webpack\n---\n\n# 前言\n\nwebpack打包之后的文件, 如果出了错是不太好调试的, 而`Source Maps`可以很方便的调试。\n\n<!--more-->\n# 配置\n\n在`webpack`的配置文件中配置`source maps`, 需要配置`devtool`, 有以下四种不同的配置选项:\n\n| DEVTOOL 选项 | 配置结果 |\n| :----------- | :------- |\n| source-map | 在一个单独的文件中产生一个完整且功能完全的文件。这个文件具有最好的 source map, 但是它会减慢打包速度 |\n| cheap-module-source-map | 在一个单独的文件中生成一个不带列映射的 map, 不带列映射提高了打包速度, 但是也使得浏览器开发者工具只能对应到具体的行, 不能对应到具体的列 |\n| eval-source-map | 使用 eval 打包源文件模块, 在同一个文件中生成干净的完整的 source map。这个选项可以不影响构建速度的前提下生成完整的 sourcemap, 但是对打包后输出的 JS 文件的执行具有性能和安全的隐患。在开发阶段这是一个好选项, 生产阶段则一定不要启用这个选项 |\n| cheap-module-eval-source-map | 这是在打包文件时最快的生成 source map 的方法, 生成的 Source Map 会和打包后的 JavaScript 文件同行显示, 没有列映射, 和 eval-source-map 选项具有相似的缺点。 |\n\n根据上述情况, 我们可以在开发阶段使用`eval-source-map`来构建`Source Maps`, 可以这样配置:\n\n```js\nmodule.exports = {\n    devtool: 'eval-source-map',\n    entry: __dirname + \"/app/main.js\",\n    output: {\n        path: __dirname + \"/public\",\n        filename: \"bundle.js\"\n    }\n}\n```\n","slug":"front_skill_experience/webpack/webpack-source-map","published":1,"updated":"2022-10-03T02:27:52.428Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejl6001l3vsbhqmlfxgw","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>webpack打包之后的文件, 如果出了错是不太好调试的, 而<code>Source Maps</code>可以很方便的调试。</p>\n<span id=\"more\"></span>\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><p>在<code>webpack</code>的配置文件中配置<code>source maps</code>, 需要配置<code>devtool</code>, 有以下四种不同的配置选项:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">DEVTOOL 选项</th>\n<th align=\"left\">配置结果</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">source-map</td>\n<td align=\"left\">在一个单独的文件中产生一个完整且功能完全的文件。这个文件具有最好的 source map, 但是它会减慢打包速度</td>\n</tr>\n<tr>\n<td align=\"left\">cheap-module-source-map</td>\n<td align=\"left\">在一个单独的文件中生成一个不带列映射的 map, 不带列映射提高了打包速度, 但是也使得浏览器开发者工具只能对应到具体的行, 不能对应到具体的列</td>\n</tr>\n<tr>\n<td align=\"left\">eval-source-map</td>\n<td align=\"left\">使用 eval 打包源文件模块, 在同一个文件中生成干净的完整的 source map。这个选项可以不影响构建速度的前提下生成完整的 sourcemap, 但是对打包后输出的 JS 文件的执行具有性能和安全的隐患。在开发阶段这是一个好选项, 生产阶段则一定不要启用这个选项</td>\n</tr>\n<tr>\n<td align=\"left\">cheap-module-eval-source-map</td>\n<td align=\"left\">这是在打包文件时最快的生成 source map 的方法, 生成的 Source Map 会和打包后的 JavaScript 文件同行显示, 没有列映射, 和 eval-source-map 选项具有相似的缺点。</td>\n</tr>\n</tbody></table>\n<p>根据上述情况, 我们可以在开发阶段使用<code>eval-source-map</code>来构建<code>Source Maps</code>, 可以这样配置:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"attr\">devtool</span>: <span class=\"string\">&#x27;eval-source-map&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">entry</span>: __dirname + <span class=\"string\">&quot;/app/main.js&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">path</span>: __dirname + <span class=\"string\">&quot;/public&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">&quot;bundle.js&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>webpack打包之后的文件, 如果出了错是不太好调试的, 而<code>Source Maps</code>可以很方便的调试。</p>","more":"<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><p>在<code>webpack</code>的配置文件中配置<code>source maps</code>, 需要配置<code>devtool</code>, 有以下四种不同的配置选项:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">DEVTOOL 选项</th>\n<th align=\"left\">配置结果</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">source-map</td>\n<td align=\"left\">在一个单独的文件中产生一个完整且功能完全的文件。这个文件具有最好的 source map, 但是它会减慢打包速度</td>\n</tr>\n<tr>\n<td align=\"left\">cheap-module-source-map</td>\n<td align=\"left\">在一个单独的文件中生成一个不带列映射的 map, 不带列映射提高了打包速度, 但是也使得浏览器开发者工具只能对应到具体的行, 不能对应到具体的列</td>\n</tr>\n<tr>\n<td align=\"left\">eval-source-map</td>\n<td align=\"left\">使用 eval 打包源文件模块, 在同一个文件中生成干净的完整的 source map。这个选项可以不影响构建速度的前提下生成完整的 sourcemap, 但是对打包后输出的 JS 文件的执行具有性能和安全的隐患。在开发阶段这是一个好选项, 生产阶段则一定不要启用这个选项</td>\n</tr>\n<tr>\n<td align=\"left\">cheap-module-eval-source-map</td>\n<td align=\"left\">这是在打包文件时最快的生成 source map 的方法, 生成的 Source Map 会和打包后的 JavaScript 文件同行显示, 没有列映射, 和 eval-source-map 选项具有相似的缺点。</td>\n</tr>\n</tbody></table>\n<p>根据上述情况, 我们可以在开发阶段使用<code>eval-source-map</code>来构建<code>Source Maps</code>, 可以这样配置:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"attr\">devtool</span>: <span class=\"string\">&#x27;eval-source-map&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">entry</span>: __dirname + <span class=\"string\">&quot;/app/main.js&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">path</span>: __dirname + <span class=\"string\">&quot;/public&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">&quot;bundle.js&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"reverse-integer-question","date":"2019-05-17T14:20:51.000Z","_content":"\n# 题目\n\n给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。\n\n<!--more-->\n\n示例1:\n\n> 输入: 123\n输出: 321\n\n示例2:\n\n>输入: -123\n输出: -321\n\n示例3:\n\n>输入: 120\n输出: 21\n\n注意:\n\n假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−231,  231 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。\n\n# 解法\n\n我最一开始的解法:\n\n```java\npublic int reverse(int x) {\n    // 存储是否是负数\n    boolean isNegative = false;\n    // 存储转为字符串\n    String xString = \"\";\n    if (x < 0) {\n        isNegative = true;\n    }\n    xString = ((Integer)x).toString();\n    // 判断如果是负数, 先将负数字符去掉\n    if (isNegative) {\n        xString = xString.substring(1);\n    }\n    char[] c = xString.toCharArray();\n\n    // 循环字符串, 只需要循环这个字符串的长度的一半\n    for (int i = 0; i < c.length / 2 ; ++i) {\n        char temp = c[i];\n        c[i] = c[c.length -1 - i];\n        c[c.length - 1 - i] = temp;\n    }\n\n    xString = new String(c);\n    int result = Integer.parseInt(xString);\n    // 如果之前是负数, 则取负数\n    if (isNegative) {\n        result -= (result * 2);\n    }\n    return result;\n}\n```\n\n当然是错的啦, 这里没有检测如果整数溢出怎么办, 所以这里需要加一个try{} catch(){}, 那么我的最后的答案是:\n\n```java\npublic int reverse(int x) {\n    boolean isNegative = false;\n    String xString = \"\";\n    if (x < 0) {\n       isNegative = true;\n    }\n    xString = ((Integer)x).toString();\n    if (isNegative) {\n        xString = xString.substring(1);\n    }\n    char[] c = xString.toCharArray();\n\n    for (int i = 0; i < c.length / 2 ; ++i) {\n        char temp = c[i];\n        c[i] = c[c.length -1 - i];\n        c[c.length - 1 - i] = temp;\n    }\n    xString = new String(c);\n    int result = 0;\n    try {\n        result = Integer.parseInt(xString);\n        if (isNegative) {\n            result -= (result * 2);\n        }\n    } catch (NumberFormatException e) {\n      return 0;\n    }\n    return result;\n}\n```\n","source":"_posts/leetcode/java/reverse-integer-question.md","raw":"---\ntitle: reverse-integer-question\ndate: 2019-05-17 22:20:51\ncategories:\n- 做题\n- java\ntags:\n- leetcode\n---\n\n# 题目\n\n给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。\n\n<!--more-->\n\n示例1:\n\n> 输入: 123\n输出: 321\n\n示例2:\n\n>输入: -123\n输出: -321\n\n示例3:\n\n>输入: 120\n输出: 21\n\n注意:\n\n假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−231,  231 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。\n\n# 解法\n\n我最一开始的解法:\n\n```java\npublic int reverse(int x) {\n    // 存储是否是负数\n    boolean isNegative = false;\n    // 存储转为字符串\n    String xString = \"\";\n    if (x < 0) {\n        isNegative = true;\n    }\n    xString = ((Integer)x).toString();\n    // 判断如果是负数, 先将负数字符去掉\n    if (isNegative) {\n        xString = xString.substring(1);\n    }\n    char[] c = xString.toCharArray();\n\n    // 循环字符串, 只需要循环这个字符串的长度的一半\n    for (int i = 0; i < c.length / 2 ; ++i) {\n        char temp = c[i];\n        c[i] = c[c.length -1 - i];\n        c[c.length - 1 - i] = temp;\n    }\n\n    xString = new String(c);\n    int result = Integer.parseInt(xString);\n    // 如果之前是负数, 则取负数\n    if (isNegative) {\n        result -= (result * 2);\n    }\n    return result;\n}\n```\n\n当然是错的啦, 这里没有检测如果整数溢出怎么办, 所以这里需要加一个try{} catch(){}, 那么我的最后的答案是:\n\n```java\npublic int reverse(int x) {\n    boolean isNegative = false;\n    String xString = \"\";\n    if (x < 0) {\n       isNegative = true;\n    }\n    xString = ((Integer)x).toString();\n    if (isNegative) {\n        xString = xString.substring(1);\n    }\n    char[] c = xString.toCharArray();\n\n    for (int i = 0; i < c.length / 2 ; ++i) {\n        char temp = c[i];\n        c[i] = c[c.length -1 - i];\n        c[c.length - 1 - i] = temp;\n    }\n    xString = new String(c);\n    int result = 0;\n    try {\n        result = Integer.parseInt(xString);\n        if (isNegative) {\n            result -= (result * 2);\n        }\n    } catch (NumberFormatException e) {\n      return 0;\n    }\n    return result;\n}\n```\n","slug":"leetcode/java/reverse-integer-question","published":1,"updated":"2022-10-03T02:30:47.681Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejl9001m3vsb3gvl146e","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。</p>\n<span id=\"more\"></span>\n\n<p>示例1:</p>\n<blockquote>\n<p>输入: 123<br>输出: 321</p>\n</blockquote>\n<p>示例2:</p>\n<blockquote>\n<p>输入: -123<br>输出: -321</p>\n</blockquote>\n<p>示例3:</p>\n<blockquote>\n<p>输入: 120<br>输出: 21</p>\n</blockquote>\n<p>注意:</p>\n<p>假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−231,  231 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。</p>\n<h1 id=\"解法\"><a href=\"#解法\" class=\"headerlink\" title=\"解法\"></a>解法</h1><p>我最一开始的解法:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">reverse</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 存储是否是负数</span></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> isNegative = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 存储转为字符串</span></span><br><span class=\"line\">    String xString = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        isNegative = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    xString = ((Integer)x).toString();</span><br><span class=\"line\">    <span class=\"comment\">// 判断如果是负数, 先将负数字符去掉</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isNegative) &#123;</span><br><span class=\"line\">        xString = xString.substring(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">char</span>[] c = xString.toCharArray();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 循环字符串, 只需要循环这个字符串的长度的一半</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; c.length / <span class=\"number\">2</span> ; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> temp = c[i];</span><br><span class=\"line\">        c[i] = c[c.length -<span class=\"number\">1</span> - i];</span><br><span class=\"line\">        c[c.length - <span class=\"number\">1</span> - i] = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    xString = <span class=\"keyword\">new</span> String(c);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> result = Integer.parseInt(xString);</span><br><span class=\"line\">    <span class=\"comment\">// 如果之前是负数, 则取负数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isNegative) &#123;</span><br><span class=\"line\">        result -= (result * <span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当然是错的啦, 这里没有检测如果整数溢出怎么办, 所以这里需要加一个try{} catch(){}, 那么我的最后的答案是:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">reverse</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> isNegative = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    String xString = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">       isNegative = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    xString = ((Integer)x).toString();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isNegative) &#123;</span><br><span class=\"line\">        xString = xString.substring(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">char</span>[] c = xString.toCharArray();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; c.length / <span class=\"number\">2</span> ; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> temp = c[i];</span><br><span class=\"line\">        c[i] = c[c.length -<span class=\"number\">1</span> - i];</span><br><span class=\"line\">        c[c.length - <span class=\"number\">1</span> - i] = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    xString = <span class=\"keyword\">new</span> String(c);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        result = Integer.parseInt(xString);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isNegative) &#123;</span><br><span class=\"line\">            result -= (result * <span class=\"number\">2</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (NumberFormatException e) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。</p>","more":"<p>示例1:</p>\n<blockquote>\n<p>输入: 123<br>输出: 321</p>\n</blockquote>\n<p>示例2:</p>\n<blockquote>\n<p>输入: -123<br>输出: -321</p>\n</blockquote>\n<p>示例3:</p>\n<blockquote>\n<p>输入: 120<br>输出: 21</p>\n</blockquote>\n<p>注意:</p>\n<p>假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−231,  231 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。</p>\n<h1 id=\"解法\"><a href=\"#解法\" class=\"headerlink\" title=\"解法\"></a>解法</h1><p>我最一开始的解法:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">reverse</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 存储是否是负数</span></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> isNegative = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 存储转为字符串</span></span><br><span class=\"line\">    String xString = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        isNegative = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    xString = ((Integer)x).toString();</span><br><span class=\"line\">    <span class=\"comment\">// 判断如果是负数, 先将负数字符去掉</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isNegative) &#123;</span><br><span class=\"line\">        xString = xString.substring(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">char</span>[] c = xString.toCharArray();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 循环字符串, 只需要循环这个字符串的长度的一半</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; c.length / <span class=\"number\">2</span> ; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> temp = c[i];</span><br><span class=\"line\">        c[i] = c[c.length -<span class=\"number\">1</span> - i];</span><br><span class=\"line\">        c[c.length - <span class=\"number\">1</span> - i] = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    xString = <span class=\"keyword\">new</span> String(c);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> result = Integer.parseInt(xString);</span><br><span class=\"line\">    <span class=\"comment\">// 如果之前是负数, 则取负数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isNegative) &#123;</span><br><span class=\"line\">        result -= (result * <span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当然是错的啦, 这里没有检测如果整数溢出怎么办, 所以这里需要加一个try{} catch(){}, 那么我的最后的答案是:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">reverse</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> isNegative = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    String xString = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">       isNegative = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    xString = ((Integer)x).toString();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isNegative) &#123;</span><br><span class=\"line\">        xString = xString.substring(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">char</span>[] c = xString.toCharArray();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; c.length / <span class=\"number\">2</span> ; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> temp = c[i];</span><br><span class=\"line\">        c[i] = c[c.length -<span class=\"number\">1</span> - i];</span><br><span class=\"line\">        c[c.length - <span class=\"number\">1</span> - i] = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    xString = <span class=\"keyword\">new</span> String(c);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        result = Integer.parseInt(xString);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isNegative) &#123;</span><br><span class=\"line\">            result -= (result * <span class=\"number\">2</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (NumberFormatException e) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"two sum","date":"2019-03-17T15:50:38.000Z","_content":"\n# 题目\n\n给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。\n你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。\n<!--more-->\n示例:\n> 给定 nums = [2, 7, 11, 15], target = 9\n因为 nums[0] + nums[1] = 2 + 7 = 9\n所以返回 [0, 1]\n\n# 解法\n我最一开始的解法:\n\n```java\npublic int twoSum(int[] sums, int target) {\n    // 由于题目中说明了每种输入只会对应一个答案, 所以我这里直接将结果限定为两个长度\n    int[] result = new int[2];\n\n    for (int i = 0; i != sums.length; ++i) {\n        for (int j = 0; j != sums.length; ++j) {\n            if (sums[i] + sums[j] == target) {\n                result[0] = i;\n                result[1] = j;\n            }\n        }\n    }\n    return result;\n}\n```\n\n当然是错的...首先j不应该从0开始, 应该从1开始, 准确的说应该是(i + 1)开始, 那么第一个for循环的条件应该改为(sum.length - 1)。\n\n那么为什么这么改呢, 因为题目中规定了不能重复利用数组中同样的元素, 也就是说, 如果传入的数组为 {5, 5}, 那么结果如果是 {0, 0}就是错的, {0, 1} 才是正确答案。\n\n其次, 题目中说可以假设每种输入只会对应一个答案, 那么等到进入if语句中之后就说明已经有正确答案了, 这个时候获取到正确答案之后直接返回就好了, 所以, 正确的写法是:\n\n```java\npublic int twoSum(int[] sums, ,int target) {\n    int[] result = new int[2];\n    \n    for (int i = 0; i != (sums.length - 1); ++i) {\n        for (int j = (i + 1); j != sums.length; ++j) {\n            if (sums[i] + sums[j] == target) {\n                result[0] = i;\n                result[1] = j;\n                return result;\n            }\n        }\n    }\n    return null;\n}\n```\n\n","source":"_posts/leetcode/java/two-sum.md","raw":"---\ntitle: two sum\ndate: 2019-03-17 23:50:38\ncategories:\n- 做题\n- java\ntags:\n- leetcode\n---\n\n# 题目\n\n给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。\n你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。\n<!--more-->\n示例:\n> 给定 nums = [2, 7, 11, 15], target = 9\n因为 nums[0] + nums[1] = 2 + 7 = 9\n所以返回 [0, 1]\n\n# 解法\n我最一开始的解法:\n\n```java\npublic int twoSum(int[] sums, int target) {\n    // 由于题目中说明了每种输入只会对应一个答案, 所以我这里直接将结果限定为两个长度\n    int[] result = new int[2];\n\n    for (int i = 0; i != sums.length; ++i) {\n        for (int j = 0; j != sums.length; ++j) {\n            if (sums[i] + sums[j] == target) {\n                result[0] = i;\n                result[1] = j;\n            }\n        }\n    }\n    return result;\n}\n```\n\n当然是错的...首先j不应该从0开始, 应该从1开始, 准确的说应该是(i + 1)开始, 那么第一个for循环的条件应该改为(sum.length - 1)。\n\n那么为什么这么改呢, 因为题目中规定了不能重复利用数组中同样的元素, 也就是说, 如果传入的数组为 {5, 5}, 那么结果如果是 {0, 0}就是错的, {0, 1} 才是正确答案。\n\n其次, 题目中说可以假设每种输入只会对应一个答案, 那么等到进入if语句中之后就说明已经有正确答案了, 这个时候获取到正确答案之后直接返回就好了, 所以, 正确的写法是:\n\n```java\npublic int twoSum(int[] sums, ,int target) {\n    int[] result = new int[2];\n    \n    for (int i = 0; i != (sums.length - 1); ++i) {\n        for (int j = (i + 1); j != sums.length; ++j) {\n            if (sums[i] + sums[j] == target) {\n                result[0] = i;\n                result[1] = j;\n                return result;\n            }\n        }\n    }\n    return null;\n}\n```\n\n","slug":"leetcode/java/two-sum","published":1,"updated":"2022-10-03T02:30:39.571Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejlg001p3vsbhjm99gui","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。<br>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</p>\n<span id=\"more\"></span>\n<p>示例:</p>\n<blockquote>\n<p>给定 nums &#x3D; [2, 7, 11, 15], target &#x3D; 9<br>因为 nums[0] + nums[1] &#x3D; 2 + 7 &#x3D; 9<br>所以返回 [0, 1]</p>\n</blockquote>\n<h1 id=\"解法\"><a href=\"#解法\" class=\"headerlink\" title=\"解法\"></a>解法</h1><p>我最一开始的解法:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">twoSum</span><span class=\"params\">(<span class=\"keyword\">int</span>[] sums, <span class=\"keyword\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 由于题目中说明了每种输入只会对应一个答案, 所以我这里直接将结果限定为两个长度</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] result = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i != sums.length; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j != sums.length; ++j) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (sums[i] + sums[j] == target) &#123;</span><br><span class=\"line\">                result[<span class=\"number\">0</span>] = i;</span><br><span class=\"line\">                result[<span class=\"number\">1</span>] = j;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当然是错的…首先j不应该从0开始, 应该从1开始, 准确的说应该是(i + 1)开始, 那么第一个for循环的条件应该改为(sum.length - 1)。</p>\n<p>那么为什么这么改呢, 因为题目中规定了不能重复利用数组中同样的元素, 也就是说, 如果传入的数组为 {5, 5}, 那么结果如果是 {0, 0}就是错的, {0, 1} 才是正确答案。</p>\n<p>其次, 题目中说可以假设每种输入只会对应一个答案, 那么等到进入if语句中之后就说明已经有正确答案了, 这个时候获取到正确答案之后直接返回就好了, 所以, 正确的写法是:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">twoSum</span><span class=\"params\">(<span class=\"keyword\">int</span>[] sums, ,<span class=\"keyword\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] result = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i != (sums.length - <span class=\"number\">1</span>); ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = (i + <span class=\"number\">1</span>); j != sums.length; ++j) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (sums[i] + sums[j] == target) &#123;</span><br><span class=\"line\">                result[<span class=\"number\">0</span>] = i;</span><br><span class=\"line\">                result[<span class=\"number\">1</span>] = j;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。<br>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</p>","more":"<p>示例:</p>\n<blockquote>\n<p>给定 nums &#x3D; [2, 7, 11, 15], target &#x3D; 9<br>因为 nums[0] + nums[1] &#x3D; 2 + 7 &#x3D; 9<br>所以返回 [0, 1]</p>\n</blockquote>\n<h1 id=\"解法\"><a href=\"#解法\" class=\"headerlink\" title=\"解法\"></a>解法</h1><p>我最一开始的解法:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">twoSum</span><span class=\"params\">(<span class=\"keyword\">int</span>[] sums, <span class=\"keyword\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 由于题目中说明了每种输入只会对应一个答案, 所以我这里直接将结果限定为两个长度</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] result = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i != sums.length; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j != sums.length; ++j) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (sums[i] + sums[j] == target) &#123;</span><br><span class=\"line\">                result[<span class=\"number\">0</span>] = i;</span><br><span class=\"line\">                result[<span class=\"number\">1</span>] = j;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当然是错的…首先j不应该从0开始, 应该从1开始, 准确的说应该是(i + 1)开始, 那么第一个for循环的条件应该改为(sum.length - 1)。</p>\n<p>那么为什么这么改呢, 因为题目中规定了不能重复利用数组中同样的元素, 也就是说, 如果传入的数组为 {5, 5}, 那么结果如果是 {0, 0}就是错的, {0, 1} 才是正确答案。</p>\n<p>其次, 题目中说可以假设每种输入只会对应一个答案, 那么等到进入if语句中之后就说明已经有正确答案了, 这个时候获取到正确答案之后直接返回就好了, 所以, 正确的写法是:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">twoSum</span><span class=\"params\">(<span class=\"keyword\">int</span>[] sums, ,<span class=\"keyword\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] result = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i != (sums.length - <span class=\"number\">1</span>); ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = (i + <span class=\"number\">1</span>); j != sums.length; ++j) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (sums[i] + sums[j] == target) &#123;</span><br><span class=\"line\">                result[<span class=\"number\">0</span>] = i;</span><br><span class=\"line\">                result[<span class=\"number\">1</span>] = j;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"gradle 和 gradle 插件版本对应关系","date":"2020-04-18T09:08:51.000Z","_content":"\n# android Gradle 插件版本\n\n可以在顶级 `build.gradle` 文件中指定 gradle 插件版本:\n\n```groovy\nbuildscript {\n\trepositories {\n\t\tgoogle()\n\t}\n\tdependencies {\n\t\tclasspath 'com.android.tools.build:gradle:3.5.2'\n\t}\n}\n```\n\n<!-- more -->\n\n下表列出各个 Android Gradle 插件版本所需的 Gradle 版本。\n\n| 插件版本 | 所需的 Gradle 版本 |\n| :-----: | :-----: |\n| 1.0.0 - 1.1.3 | 2.2.1 - 2.3 |\n| 1.2.0 - 1.3.1 | 2.2.1 - 2.9 |\n| 1.5.0\t| 2.2.1 - 2.13 |\n| 2.0.0 - 2.1.2\t| 2.10 - 2.13 |\n| 2.1.3 - 2.2.3 |2.14.1+ |\n| 2.3.0+ | 3.3+ |\n| 3.0.0+ | 4.1+ |\n| 3.1.0+ | 4.4+ |\n| 3.2.0 - 3.2.1 | 4.6+ |\n| 3.3.0 - 3.3.2 | 4.10.1+ |\n| 3.4.0 - 3.4.1 | 5.1.1+ |\n| 3.5.0+ | 5.4.1-5.6.4 |\n\n可以在 gradle-wrapper.properties 文件中指定 Gradle 的版本:\n\n```properties\ndistributionUrl = https\\://services.gradle.org/distributions/gradle-5.4.1-all.zip\n```\n\n[更多信息请查看这里](https://developer.android.google.cn/studio/releases/gradle-plugin)\n","source":"_posts/mobile_skill_experience/android/gradle-plugin-version.md","raw":"---\ntitle: gradle 和 gradle 插件版本对应关系\ndate: 2020-04-18 17:08:51\ncategories:\n- 移动开发技巧/经验\n- android\ntags:\n- android\n- gradle\n---\n\n# android Gradle 插件版本\n\n可以在顶级 `build.gradle` 文件中指定 gradle 插件版本:\n\n```groovy\nbuildscript {\n\trepositories {\n\t\tgoogle()\n\t}\n\tdependencies {\n\t\tclasspath 'com.android.tools.build:gradle:3.5.2'\n\t}\n}\n```\n\n<!-- more -->\n\n下表列出各个 Android Gradle 插件版本所需的 Gradle 版本。\n\n| 插件版本 | 所需的 Gradle 版本 |\n| :-----: | :-----: |\n| 1.0.0 - 1.1.3 | 2.2.1 - 2.3 |\n| 1.2.0 - 1.3.1 | 2.2.1 - 2.9 |\n| 1.5.0\t| 2.2.1 - 2.13 |\n| 2.0.0 - 2.1.2\t| 2.10 - 2.13 |\n| 2.1.3 - 2.2.3 |2.14.1+ |\n| 2.3.0+ | 3.3+ |\n| 3.0.0+ | 4.1+ |\n| 3.1.0+ | 4.4+ |\n| 3.2.0 - 3.2.1 | 4.6+ |\n| 3.3.0 - 3.3.2 | 4.10.1+ |\n| 3.4.0 - 3.4.1 | 5.1.1+ |\n| 3.5.0+ | 5.4.1-5.6.4 |\n\n可以在 gradle-wrapper.properties 文件中指定 Gradle 的版本:\n\n```properties\ndistributionUrl = https\\://services.gradle.org/distributions/gradle-5.4.1-all.zip\n```\n\n[更多信息请查看这里](https://developer.android.google.cn/studio/releases/gradle-plugin)\n","slug":"mobile_skill_experience/android/gradle-plugin-version","published":1,"updated":"2022-10-07T12:27:46.201Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejlk001r3vsb8qc0boxg","content":"<h1 id=\"android-Gradle-插件版本\"><a href=\"#android-Gradle-插件版本\" class=\"headerlink\" title=\"android Gradle 插件版本\"></a>android Gradle 插件版本</h1><p>可以在顶级 <code>build.gradle</code> 文件中指定 gradle 插件版本:</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">buildscript &#123;</span><br><span class=\"line\">\trepositories &#123;</span><br><span class=\"line\">\t\tgoogle()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tdependencies &#123;</span><br><span class=\"line\">\t\tclasspath <span class=\"string\">&#x27;com.android.tools.build:gradle:3.5.2&#x27;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<p>下表列出各个 Android Gradle 插件版本所需的 Gradle 版本。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">插件版本</th>\n<th align=\"center\">所需的 Gradle 版本</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">1.0.0 - 1.1.3</td>\n<td align=\"center\">2.2.1 - 2.3</td>\n</tr>\n<tr>\n<td align=\"center\">1.2.0 - 1.3.1</td>\n<td align=\"center\">2.2.1 - 2.9</td>\n</tr>\n<tr>\n<td align=\"center\">1.5.0</td>\n<td align=\"center\">2.2.1 - 2.13</td>\n</tr>\n<tr>\n<td align=\"center\">2.0.0 - 2.1.2</td>\n<td align=\"center\">2.10 - 2.13</td>\n</tr>\n<tr>\n<td align=\"center\">2.1.3 - 2.2.3</td>\n<td align=\"center\">2.14.1+</td>\n</tr>\n<tr>\n<td align=\"center\">2.3.0+</td>\n<td align=\"center\">3.3+</td>\n</tr>\n<tr>\n<td align=\"center\">3.0.0+</td>\n<td align=\"center\">4.1+</td>\n</tr>\n<tr>\n<td align=\"center\">3.1.0+</td>\n<td align=\"center\">4.4+</td>\n</tr>\n<tr>\n<td align=\"center\">3.2.0 - 3.2.1</td>\n<td align=\"center\">4.6+</td>\n</tr>\n<tr>\n<td align=\"center\">3.3.0 - 3.3.2</td>\n<td align=\"center\">4.10.1+</td>\n</tr>\n<tr>\n<td align=\"center\">3.4.0 - 3.4.1</td>\n<td align=\"center\">5.1.1+</td>\n</tr>\n<tr>\n<td align=\"center\">3.5.0+</td>\n<td align=\"center\">5.4.1-5.6.4</td>\n</tr>\n</tbody></table>\n<p>可以在 gradle-wrapper.properties 文件中指定 Gradle 的版本:</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">distributionUrl</span> = <span class=\"string\">https\\://services.gradle.org/distributions/gradle-5.4.1-all.zip</span></span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://developer.android.google.cn/studio/releases/gradle-plugin\">更多信息请查看这里</a></p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"android-Gradle-插件版本\"><a href=\"#android-Gradle-插件版本\" class=\"headerlink\" title=\"android Gradle 插件版本\"></a>android Gradle 插件版本</h1><p>可以在顶级 <code>build.gradle</code> 文件中指定 gradle 插件版本:</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">buildscript &#123;</span><br><span class=\"line\">\trepositories &#123;</span><br><span class=\"line\">\t\tgoogle()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tdependencies &#123;</span><br><span class=\"line\">\t\tclasspath <span class=\"string\">&#x27;com.android.tools.build:gradle:3.5.2&#x27;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","more":"<p>下表列出各个 Android Gradle 插件版本所需的 Gradle 版本。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">插件版本</th>\n<th align=\"center\">所需的 Gradle 版本</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">1.0.0 - 1.1.3</td>\n<td align=\"center\">2.2.1 - 2.3</td>\n</tr>\n<tr>\n<td align=\"center\">1.2.0 - 1.3.1</td>\n<td align=\"center\">2.2.1 - 2.9</td>\n</tr>\n<tr>\n<td align=\"center\">1.5.0</td>\n<td align=\"center\">2.2.1 - 2.13</td>\n</tr>\n<tr>\n<td align=\"center\">2.0.0 - 2.1.2</td>\n<td align=\"center\">2.10 - 2.13</td>\n</tr>\n<tr>\n<td align=\"center\">2.1.3 - 2.2.3</td>\n<td align=\"center\">2.14.1+</td>\n</tr>\n<tr>\n<td align=\"center\">2.3.0+</td>\n<td align=\"center\">3.3+</td>\n</tr>\n<tr>\n<td align=\"center\">3.0.0+</td>\n<td align=\"center\">4.1+</td>\n</tr>\n<tr>\n<td align=\"center\">3.1.0+</td>\n<td align=\"center\">4.4+</td>\n</tr>\n<tr>\n<td align=\"center\">3.2.0 - 3.2.1</td>\n<td align=\"center\">4.6+</td>\n</tr>\n<tr>\n<td align=\"center\">3.3.0 - 3.3.2</td>\n<td align=\"center\">4.10.1+</td>\n</tr>\n<tr>\n<td align=\"center\">3.4.0 - 3.4.1</td>\n<td align=\"center\">5.1.1+</td>\n</tr>\n<tr>\n<td align=\"center\">3.5.0+</td>\n<td align=\"center\">5.4.1-5.6.4</td>\n</tr>\n</tbody></table>\n<p>可以在 gradle-wrapper.properties 文件中指定 Gradle 的版本:</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">distributionUrl</span> = <span class=\"string\">https\\://services.gradle.org/distributions/gradle-5.4.1-all.zip</span></span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://developer.android.google.cn/studio/releases/gradle-plugin\">更多信息请查看这里</a></p>"},{"title":"http-connect-failed-EHOSTUNREACH","date":"2020-06-23T00:37:14.000Z","_content":"\n提示访问不到服务器\n\n解决方式: 切换到其他wifi网络, 在切回来, 就好了。。\n","source":"_posts/mobile_skill_experience/android/http-connect-failed-EHOSTUNREACH.md","raw":"---\ntitle: http-connect-failed-EHOSTUNREACH\ndate: 2020-06-23 08:37:14\ncategories:\n- 移动开发技巧/经验\n- android\ntags:\n- 踩坑\n- android\n---\n\n提示访问不到服务器\n\n解决方式: 切换到其他wifi网络, 在切回来, 就好了。。\n","slug":"mobile_skill_experience/android/http-connect-failed-EHOSTUNREACH","published":1,"updated":"2022-10-07T12:28:29.049Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejlr001u3vsbevk8g3dv","content":"<p>提示访问不到服务器</p>\n<p>解决方式: 切换到其他wifi网络, 在切回来, 就好了。。</p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"","more":"<p>提示访问不到服务器</p>\n<p>解决方式: 切换到其他wifi网络, 在切回来, 就好了。。</p>\n"},{"title":"关于flutter的listview控件需要注意的地方","date":"2020-01-16T20:42:14.000Z","_content":"\n# 构造一个listview\n\n官方文档给出了四中可以构造listview的方法, 下面是原文:\n\n1. The default constructor takes an explicit List<Widget> of children. This constructor is appropriate for list views with a small number of children because constructing the list requires doing work for every child that could possibly be displayed in the list view instead of just those children that are actually visible.\n\n\n<!--more-->\n2. The listView.builder constructor takes an IndexedWidgetBuilder, which builds the children on demand. This constructor is appropriate for list views with a large (or infinite) number of children because the builder is called only for those children that are actually visible.\n\n3. The ListView.separated constructor takes two IndexedWidgetBuilders: `itemBuilder` builds child items on demand, and `separatorBuilder` similarly builds separator children which appear in between the child items. This constructor is appropriate for list views with a fixed number of children.\n\n4. The ListView.custom constructor takes a SliverChildDelegate, which provides the ability to customize additional aspects of the child model. For example, a SliverChildDelegate can control the algorithm used to estimate the size of children that are not actually visible.\n\n简单的翻译一下, 第一段的意思是说:\n\n直接使用默认的构造器, 但是这种方式只适用于承载较少的子部件。\n\n第二种方式是使用ListView的builder方法, 这种方式的好处是, 只有呈现在屏幕上的子部件才会调用这个方法, 所以比较适用于非常多的部件。\n\n第三种方式是使用separated, 这种方式适用于带有固定的子部件的列表。\n\n最后一种方式可以自己定义显示子部件的算法。\n\n那么我们先使用第一种方式试试看:\n\n```dart\nimport 'package:flutter/material.dart';\n\nclass DefaultConstructor extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: ListView(\n        children: <Widget>[\n          Text('内容一'),\n          Text('内容二'),\n          Text('内容三'),\n          Text('内容四'),\n          Text('内容五'),\n          Text('内容六'),\n        ],\n      ),\n    );\n  }\n}\n```\n\n大概是这种效果:\n\n![listview效果](/images/mobile/flutter/flutter_listview_default_constructor.png)\n","source":"_posts/mobile_skill_experience/flutter/about-listview.md","raw":"---\ntitle: 关于flutter的listview控件需要注意的地方\ndate: 2020-01-17 04:42:14\ncategories:\n- 移动开发技巧/经验\n- flutter\ntags:\n- flutter\n---\n\n# 构造一个listview\n\n官方文档给出了四中可以构造listview的方法, 下面是原文:\n\n1. The default constructor takes an explicit List<Widget> of children. This constructor is appropriate for list views with a small number of children because constructing the list requires doing work for every child that could possibly be displayed in the list view instead of just those children that are actually visible.\n\n\n<!--more-->\n2. The listView.builder constructor takes an IndexedWidgetBuilder, which builds the children on demand. This constructor is appropriate for list views with a large (or infinite) number of children because the builder is called only for those children that are actually visible.\n\n3. The ListView.separated constructor takes two IndexedWidgetBuilders: `itemBuilder` builds child items on demand, and `separatorBuilder` similarly builds separator children which appear in between the child items. This constructor is appropriate for list views with a fixed number of children.\n\n4. The ListView.custom constructor takes a SliverChildDelegate, which provides the ability to customize additional aspects of the child model. For example, a SliverChildDelegate can control the algorithm used to estimate the size of children that are not actually visible.\n\n简单的翻译一下, 第一段的意思是说:\n\n直接使用默认的构造器, 但是这种方式只适用于承载较少的子部件。\n\n第二种方式是使用ListView的builder方法, 这种方式的好处是, 只有呈现在屏幕上的子部件才会调用这个方法, 所以比较适用于非常多的部件。\n\n第三种方式是使用separated, 这种方式适用于带有固定的子部件的列表。\n\n最后一种方式可以自己定义显示子部件的算法。\n\n那么我们先使用第一种方式试试看:\n\n```dart\nimport 'package:flutter/material.dart';\n\nclass DefaultConstructor extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: ListView(\n        children: <Widget>[\n          Text('内容一'),\n          Text('内容二'),\n          Text('内容三'),\n          Text('内容四'),\n          Text('内容五'),\n          Text('内容六'),\n        ],\n      ),\n    );\n  }\n}\n```\n\n大概是这种效果:\n\n![listview效果](/images/mobile/flutter/flutter_listview_default_constructor.png)\n","slug":"mobile_skill_experience/flutter/about-listview","published":1,"updated":"2022-10-07T13:20:56.515Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejlu001v3vsbcgxi7nms","content":"<h1 id=\"构造一个listview\"><a href=\"#构造一个listview\" class=\"headerlink\" title=\"构造一个listview\"></a>构造一个listview</h1><p>官方文档给出了四中可以构造listview的方法, 下面是原文:</p>\n<ol>\n<li>The default constructor takes an explicit List<Widget> of children. This constructor is appropriate for list views with a small number of children because constructing the list requires doing work for every child that could possibly be displayed in the list view instead of just those children that are actually visible.</li>\n</ol>\n<span id=\"more\"></span>\n<ol start=\"2\">\n<li><p>The listView.builder constructor takes an IndexedWidgetBuilder, which builds the children on demand. This constructor is appropriate for list views with a large (or infinite) number of children because the builder is called only for those children that are actually visible.</p>\n</li>\n<li><p>The ListView.separated constructor takes two IndexedWidgetBuilders: <code>itemBuilder</code> builds child items on demand, and <code>separatorBuilder</code> similarly builds separator children which appear in between the child items. This constructor is appropriate for list views with a fixed number of children.</p>\n</li>\n<li><p>The ListView.custom constructor takes a SliverChildDelegate, which provides the ability to customize additional aspects of the child model. For example, a SliverChildDelegate can control the algorithm used to estimate the size of children that are not actually visible.</p>\n</li>\n</ol>\n<p>简单的翻译一下, 第一段的意思是说:</p>\n<p>直接使用默认的构造器, 但是这种方式只适用于承载较少的子部件。</p>\n<p>第二种方式是使用ListView的builder方法, 这种方式的好处是, 只有呈现在屏幕上的子部件才会调用这个方法, 所以比较适用于非常多的部件。</p>\n<p>第三种方式是使用separated, 这种方式适用于带有固定的子部件的列表。</p>\n<p>最后一种方式可以自己定义显示子部件的算法。</p>\n<p>那么我们先使用第一种方式试试看:</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DefaultConstructor</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatelessWidget</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold(</span><br><span class=\"line\">      body: ListView(</span><br><span class=\"line\">        children: &lt;Widget&gt;[</span><br><span class=\"line\">          Text(<span class=\"string\">&#x27;内容一&#x27;</span>),</span><br><span class=\"line\">          Text(<span class=\"string\">&#x27;内容二&#x27;</span>),</span><br><span class=\"line\">          Text(<span class=\"string\">&#x27;内容三&#x27;</span>),</span><br><span class=\"line\">          Text(<span class=\"string\">&#x27;内容四&#x27;</span>),</span><br><span class=\"line\">          Text(<span class=\"string\">&#x27;内容五&#x27;</span>),</span><br><span class=\"line\">          Text(<span class=\"string\">&#x27;内容六&#x27;</span>),</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>大概是这种效果:</p>\n<p><img src=\"/images/mobile/flutter/flutter_listview_default_constructor.png\" alt=\"listview效果\"></p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"构造一个listview\"><a href=\"#构造一个listview\" class=\"headerlink\" title=\"构造一个listview\"></a>构造一个listview</h1><p>官方文档给出了四中可以构造listview的方法, 下面是原文:</p>\n<ol>\n<li>The default constructor takes an explicit List<Widget> of children. This constructor is appropriate for list views with a small number of children because constructing the list requires doing work for every child that could possibly be displayed in the list view instead of just those children that are actually visible.</li>\n</ol>","more":"<ol start=\"2\">\n<li><p>The listView.builder constructor takes an IndexedWidgetBuilder, which builds the children on demand. This constructor is appropriate for list views with a large (or infinite) number of children because the builder is called only for those children that are actually visible.</p>\n</li>\n<li><p>The ListView.separated constructor takes two IndexedWidgetBuilders: <code>itemBuilder</code> builds child items on demand, and <code>separatorBuilder</code> similarly builds separator children which appear in between the child items. This constructor is appropriate for list views with a fixed number of children.</p>\n</li>\n<li><p>The ListView.custom constructor takes a SliverChildDelegate, which provides the ability to customize additional aspects of the child model. For example, a SliverChildDelegate can control the algorithm used to estimate the size of children that are not actually visible.</p>\n</li>\n</ol>\n<p>简单的翻译一下, 第一段的意思是说:</p>\n<p>直接使用默认的构造器, 但是这种方式只适用于承载较少的子部件。</p>\n<p>第二种方式是使用ListView的builder方法, 这种方式的好处是, 只有呈现在屏幕上的子部件才会调用这个方法, 所以比较适用于非常多的部件。</p>\n<p>第三种方式是使用separated, 这种方式适用于带有固定的子部件的列表。</p>\n<p>最后一种方式可以自己定义显示子部件的算法。</p>\n<p>那么我们先使用第一种方式试试看:</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DefaultConstructor</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatelessWidget</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold(</span><br><span class=\"line\">      body: ListView(</span><br><span class=\"line\">        children: &lt;Widget&gt;[</span><br><span class=\"line\">          Text(<span class=\"string\">&#x27;内容一&#x27;</span>),</span><br><span class=\"line\">          Text(<span class=\"string\">&#x27;内容二&#x27;</span>),</span><br><span class=\"line\">          Text(<span class=\"string\">&#x27;内容三&#x27;</span>),</span><br><span class=\"line\">          Text(<span class=\"string\">&#x27;内容四&#x27;</span>),</span><br><span class=\"line\">          Text(<span class=\"string\">&#x27;内容五&#x27;</span>),</span><br><span class=\"line\">          Text(<span class=\"string\">&#x27;内容六&#x27;</span>),</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>大概是这种效果:</p>\n<p><img src=\"/images/mobile/flutter/flutter_listview_default_constructor.png\" alt=\"listview效果\"></p>"},{"title":"flutter 带未读消息的导航","date":"2020-02-28T07:59:11.000Z","_content":"\n# 使用方法\n\n在 pubspec.yaml 文件中的 `dependencies` \n","source":"_posts/mobile_skill_experience/flutter/bottom-bar-unread.md","raw":"---\ntitle: flutter 带未读消息的导航\ndate: 2020-02-28 15:59:11\ncategories:\n- 移动开发技巧/经验\n- flutter\ntags:\n- flutter\n---\n\n# 使用方法\n\n在 pubspec.yaml 文件中的 `dependencies` \n","slug":"mobile_skill_experience/flutter/bottom-bar-unread","published":1,"updated":"2022-10-07T12:30:14.693Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejm3001y3vsb7b0e1ip8","content":"<h1 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h1><p>在 pubspec.yaml 文件中的 <code>dependencies</code> </p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"","more":"<h1 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h1><p>在 pubspec.yaml 文件中的 <code>dependencies</code> </p>\n"},{"title":"flutter 打包之后安装到手机上无法访问网络","date":"2020-02-10T08:52:48.000Z","_content":"\n# 解决方案\n\n在 `项目根目录/android/app/src/AndroidManifest.xml` 文件的第一层下添加一下内容:\n\n```xml\n<uses-permission android:name=\"android.permission.READ_PHONE_STATE\" />\n<uses-permission android:name=\"android.permission.INTERNET\" />\n<uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\n<uses-permission android:name=\"android.permission.ACCESS_WIFI_STATE\" />\n```\n\n来申请网络权限。\n","source":"_posts/mobile_skill_experience/flutter/flutter-android-internet.md","raw":"---\ntitle: flutter 打包之后安装到手机上无法访问网络\ndate: 2020-02-10 16:52:48\ncategories:\n- 移动开发技巧/经验\n- flutter\ntags:\n- flutter\n---\n\n# 解决方案\n\n在 `项目根目录/android/app/src/AndroidManifest.xml` 文件的第一层下添加一下内容:\n\n```xml\n<uses-permission android:name=\"android.permission.READ_PHONE_STATE\" />\n<uses-permission android:name=\"android.permission.INTERNET\" />\n<uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\n<uses-permission android:name=\"android.permission.ACCESS_WIFI_STATE\" />\n```\n\n来申请网络权限。\n","slug":"mobile_skill_experience/flutter/flutter-android-internet","published":1,"updated":"2022-10-07T12:30:26.673Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejm600203vsb626scbdf","content":"<h1 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h1><p>在 <code>项目根目录/android/app/src/AndroidManifest.xml</code> 文件的第一层下添加一下内容:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">&quot;android.permission.READ_PHONE_STATE&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">&quot;android.permission.INTERNET&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">&quot;android.permission.ACCESS_NETWORK_STATE&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">&quot;android.permission.ACCESS_WIFI_STATE&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>来申请网络权限。</p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"","more":"<h1 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h1><p>在 <code>项目根目录/android/app/src/AndroidManifest.xml</code> 文件的第一层下添加一下内容:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">&quot;android.permission.READ_PHONE_STATE&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">&quot;android.permission.INTERNET&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">&quot;android.permission.ACCESS_NETWORK_STATE&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">&quot;android.permission.ACCESS_WIFI_STATE&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>来申请网络权限。</p>\n"},{"title":"flutter apk 打包","date":"2020-02-10T08:36:49.000Z","_content":"\n# 步骤\n\n1. 创建签名文件\n2. 在 gradle 中配置签名\n3. 执行构建命令\n\n<!--more-->\n\n# 创建签名文件\n\n```shell\nkeytool -genkey -v -keystore key.jks -keyalg RSA -keysize 2048 -validity 10000 -alias key\n```\n\n# 在 gradle 中配置签名\n\n在项目根目录的 android 目录下新建一个 `key.properties`, 内容如下:\n\n```properties\nstorePassword=\nkeyPassword=\nkeyAlias=key\nstoreFile=key.jks\n```\n\n将上面的内容根据创建签名文件时添加的内容填充好。\n\n接着在本目录的app目录下找到 `build.gradle` 文件, 添加一下内容:\n\n```gradle\n// 在最外层添加下面的内容:\n// 用于自动签名\ndef keystorePropertiesFile = rootProject.file(\"key.properties\")\ndef keystoreProperties = new Properties()\nkeystoreProperties.load(new FileInputStream(keystorePropertiesFile))\n\n// 在 android 层下添加以下内容:\n// 用于自动签名\nsigningConfigs {\n    release {\n        keyAlias keystoreProperties['keyAlias']\n        keyPassword keystoreProperties['keyPassword']\n        storeFile file(keystoreProperties['storeFile'])\n        storePassword keystoreProperties['storePassword']\n    }\n}\n\n找到 android 层下的 buildTypes, 改为一下内容:\n// 用于自动签名\nbuildTypes {\n    release {\n      minifyEnabled true\n      useProguard false\n        // TODO: Add your own signing config for the release build.\n        // Signing with the debug keys for now, so `flutter run --release` works.\n        signingConfig signingConfigs.release\n    }\n}\n```\n\n# 执行构建命令\n\n```shell\n# 可选项有: android-arm, android-arm64, android-x64\nflutter build apk --target-platform android-arm64\n```\n\nOK, 构建成功之后会直接将 apk 所在路径显示出来。\n","source":"_posts/mobile_skill_experience/flutter/flutter-android-package.md","raw":"---\ntitle: flutter apk 打包\ndate: 2020-02-10 16:36:49\ncategories:\n- 移动开发技巧/经验\n- flutter\ntags:\n- flutter\n---\n\n# 步骤\n\n1. 创建签名文件\n2. 在 gradle 中配置签名\n3. 执行构建命令\n\n<!--more-->\n\n# 创建签名文件\n\n```shell\nkeytool -genkey -v -keystore key.jks -keyalg RSA -keysize 2048 -validity 10000 -alias key\n```\n\n# 在 gradle 中配置签名\n\n在项目根目录的 android 目录下新建一个 `key.properties`, 内容如下:\n\n```properties\nstorePassword=\nkeyPassword=\nkeyAlias=key\nstoreFile=key.jks\n```\n\n将上面的内容根据创建签名文件时添加的内容填充好。\n\n接着在本目录的app目录下找到 `build.gradle` 文件, 添加一下内容:\n\n```gradle\n// 在最外层添加下面的内容:\n// 用于自动签名\ndef keystorePropertiesFile = rootProject.file(\"key.properties\")\ndef keystoreProperties = new Properties()\nkeystoreProperties.load(new FileInputStream(keystorePropertiesFile))\n\n// 在 android 层下添加以下内容:\n// 用于自动签名\nsigningConfigs {\n    release {\n        keyAlias keystoreProperties['keyAlias']\n        keyPassword keystoreProperties['keyPassword']\n        storeFile file(keystoreProperties['storeFile'])\n        storePassword keystoreProperties['storePassword']\n    }\n}\n\n找到 android 层下的 buildTypes, 改为一下内容:\n// 用于自动签名\nbuildTypes {\n    release {\n      minifyEnabled true\n      useProguard false\n        // TODO: Add your own signing config for the release build.\n        // Signing with the debug keys for now, so `flutter run --release` works.\n        signingConfig signingConfigs.release\n    }\n}\n```\n\n# 执行构建命令\n\n```shell\n# 可选项有: android-arm, android-arm64, android-x64\nflutter build apk --target-platform android-arm64\n```\n\nOK, 构建成功之后会直接将 apk 所在路径显示出来。\n","slug":"mobile_skill_experience/flutter/flutter-android-package","published":1,"updated":"2022-10-07T12:30:35.997Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejma00233vsb6wlu7on4","content":"<h1 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h1><ol>\n<li>创建签名文件</li>\n<li>在 gradle 中配置签名</li>\n<li>执行构建命令</li>\n</ol>\n<span id=\"more\"></span>\n\n<h1 id=\"创建签名文件\"><a href=\"#创建签名文件\" class=\"headerlink\" title=\"创建签名文件\"></a>创建签名文件</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keytool -genkey -v -keystore key.jks -keyalg RSA -keysize 2048 -validity 10000 -alias key</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"在-gradle-中配置签名\"><a href=\"#在-gradle-中配置签名\" class=\"headerlink\" title=\"在 gradle 中配置签名\"></a>在 gradle 中配置签名</h1><p>在项目根目录的 android 目录下新建一个 <code>key.properties</code>, 内容如下:</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">storePassword</span>=<span class=\"string\"></span></span><br><span class=\"line\"><span class=\"attr\">keyPassword</span>=<span class=\"string\"></span></span><br><span class=\"line\"><span class=\"attr\">keyAlias</span>=<span class=\"string\">key</span></span><br><span class=\"line\"><span class=\"attr\">storeFile</span>=<span class=\"string\">key.jks</span></span><br></pre></td></tr></table></figure>\n\n<p>将上面的内容根据创建签名文件时添加的内容填充好。</p>\n<p>接着在本目录的app目录下找到 <code>build.gradle</code> 文件, 添加一下内容:</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在最外层添加下面的内容:</span></span><br><span class=\"line\"><span class=\"comment\">// 用于自动签名</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> keystorePropertiesFile = rootProject.<span class=\"keyword\">file</span>(<span class=\"string\">&quot;key.properties&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">def</span> keystoreProperties = <span class=\"keyword\">new</span> Properties()</span><br><span class=\"line\">keystoreProperties.load(<span class=\"keyword\">new</span> FileInputStream(keystorePropertiesFile))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在 android 层下添加以下内容:</span></span><br><span class=\"line\"><span class=\"comment\">// 用于自动签名</span></span><br><span class=\"line\">signingConfigs &#123;</span><br><span class=\"line\">    release &#123;</span><br><span class=\"line\">        keyAlias keystoreProperties[<span class=\"string\">&#x27;keyAlias&#x27;</span>]</span><br><span class=\"line\">        keyPassword keystoreProperties[<span class=\"string\">&#x27;keyPassword&#x27;</span>]</span><br><span class=\"line\">        storeFile <span class=\"keyword\">file</span>(keystoreProperties[<span class=\"string\">&#x27;storeFile&#x27;</span>])</span><br><span class=\"line\">        storePassword keystoreProperties[<span class=\"string\">&#x27;storePassword&#x27;</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">找到 android 层下的 buildTypes, 改为一下内容:</span><br><span class=\"line\"><span class=\"comment\">// 用于自动签名</span></span><br><span class=\"line\">buildTypes &#123;</span><br><span class=\"line\">    release &#123;</span><br><span class=\"line\">      minifyEnabled <span class=\"keyword\">true</span></span><br><span class=\"line\">      useProguard <span class=\"keyword\">false</span></span><br><span class=\"line\">        <span class=\"comment\">// <span class=\"doctag\">TODO:</span> Add your own signing config for the release build.</span></span><br><span class=\"line\">        <span class=\"comment\">// Signing with the debug keys for now, so `flutter run --release` works.</span></span><br><span class=\"line\">        signingConfig signingConfigs.release</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"执行构建命令\"><a href=\"#执行构建命令\" class=\"headerlink\" title=\"执行构建命令\"></a>执行构建命令</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 可选项有: android-arm, android-arm64, android-x64</span></span><br><span class=\"line\">flutter build apk --target-platform android-arm64</span><br></pre></td></tr></table></figure>\n\n<p>OK, 构建成功之后会直接将 apk 所在路径显示出来。</p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h1><ol>\n<li>创建签名文件</li>\n<li>在 gradle 中配置签名</li>\n<li>执行构建命令</li>\n</ol>","more":"<h1 id=\"创建签名文件\"><a href=\"#创建签名文件\" class=\"headerlink\" title=\"创建签名文件\"></a>创建签名文件</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keytool -genkey -v -keystore key.jks -keyalg RSA -keysize 2048 -validity 10000 -alias key</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"在-gradle-中配置签名\"><a href=\"#在-gradle-中配置签名\" class=\"headerlink\" title=\"在 gradle 中配置签名\"></a>在 gradle 中配置签名</h1><p>在项目根目录的 android 目录下新建一个 <code>key.properties</code>, 内容如下:</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">storePassword</span>=<span class=\"string\"></span></span><br><span class=\"line\"><span class=\"attr\">keyPassword</span>=<span class=\"string\"></span></span><br><span class=\"line\"><span class=\"attr\">keyAlias</span>=<span class=\"string\">key</span></span><br><span class=\"line\"><span class=\"attr\">storeFile</span>=<span class=\"string\">key.jks</span></span><br></pre></td></tr></table></figure>\n\n<p>将上面的内容根据创建签名文件时添加的内容填充好。</p>\n<p>接着在本目录的app目录下找到 <code>build.gradle</code> 文件, 添加一下内容:</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在最外层添加下面的内容:</span></span><br><span class=\"line\"><span class=\"comment\">// 用于自动签名</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> keystorePropertiesFile = rootProject.<span class=\"keyword\">file</span>(<span class=\"string\">&quot;key.properties&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">def</span> keystoreProperties = <span class=\"keyword\">new</span> Properties()</span><br><span class=\"line\">keystoreProperties.load(<span class=\"keyword\">new</span> FileInputStream(keystorePropertiesFile))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在 android 层下添加以下内容:</span></span><br><span class=\"line\"><span class=\"comment\">// 用于自动签名</span></span><br><span class=\"line\">signingConfigs &#123;</span><br><span class=\"line\">    release &#123;</span><br><span class=\"line\">        keyAlias keystoreProperties[<span class=\"string\">&#x27;keyAlias&#x27;</span>]</span><br><span class=\"line\">        keyPassword keystoreProperties[<span class=\"string\">&#x27;keyPassword&#x27;</span>]</span><br><span class=\"line\">        storeFile <span class=\"keyword\">file</span>(keystoreProperties[<span class=\"string\">&#x27;storeFile&#x27;</span>])</span><br><span class=\"line\">        storePassword keystoreProperties[<span class=\"string\">&#x27;storePassword&#x27;</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">找到 android 层下的 buildTypes, 改为一下内容:</span><br><span class=\"line\"><span class=\"comment\">// 用于自动签名</span></span><br><span class=\"line\">buildTypes &#123;</span><br><span class=\"line\">    release &#123;</span><br><span class=\"line\">      minifyEnabled <span class=\"keyword\">true</span></span><br><span class=\"line\">      useProguard <span class=\"keyword\">false</span></span><br><span class=\"line\">        <span class=\"comment\">// <span class=\"doctag\">TODO:</span> Add your own signing config for the release build.</span></span><br><span class=\"line\">        <span class=\"comment\">// Signing with the debug keys for now, so `flutter run --release` works.</span></span><br><span class=\"line\">        signingConfig signingConfigs.release</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"执行构建命令\"><a href=\"#执行构建命令\" class=\"headerlink\" title=\"执行构建命令\"></a>执行构建命令</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 可选项有: android-arm, android-arm64, android-x64</span></span><br><span class=\"line\">flutter build apk --target-platform android-arm64</span><br></pre></td></tr></table></figure>\n\n<p>OK, 构建成功之后会直接将 apk 所在路径显示出来。</p>"},{"title":"Flutter 按钮二三事","date":"2020-12-23T06:37:07.000Z","_content":"\n# 前言\n\n在flutter中, 内置了很多不同的按钮, 其中有一些已经要被放弃掉了, 今天来梳理一下。\n\n# 被废弃和被替换的按钮\n\n| 废弃的按钮 | 废弃的按钮样式 | 替换的按钮 | 替换的按钮样式 |\n| :------- | :-------------- | :---------- | :------------- |\n| FlatButton | ButtonTheme | TextButton | TextButtonTheme |\n| RaisedButton | ButtonTheme | ElevatedButton | ElevatedButtonTheme |\n| OutlineButton | ButtonTheme | OutlinedButton | OutlinedButtonTheme |\n\n<!--more-->\n\n## 变化\n\n### 样式变化\n\n按照[官方文档](https://flutter.dev/go/material-button-migration-guide)所说, 新的按钮符合当前Material Design规范, 所以看起来和以前有所不同, 具体体现在内边距, 边角弧度和按住/悬停/按下的反馈。\n\n### 属性的变化\n\n由原先的:\n\n```dart\nFlatButton(\n  focusColor: Colors.red,\n  hoverColor: Colors.green,\n  splashColor: Colors.blue,\n  onPressed: () { },\n  child: Text('FlatButton with custom overlay colors'),\n)\n```\n\n变为现在的:\n\n```dart\nTextButton(\n  style: ButtonStyle(\n    overlayColor: MaterialStateProperty.resolveWith<Color>(\n      (Set<MaterialState> states) {\n        if (states.contains(MaterialState.focused))\n          return Colors.red;\n        if (states.contains(MaterialState.hovered))\n            return Colors.green;\n        if (states.contains(MaterialState.pressed))\n            return Colors.blue;\n        return null; // Defer to the widget's default.\n    }),\n  ),\n  onPressed: () { },\n  child: Text('TextButton with custom overlay colors'),\n)\n```\n\n也就是说全部由ButtonStyle接管, 就像TextField中的style一样。\n","source":"_posts/mobile_skill_experience/flutter/flutter-button.md","raw":"---\ntitle: Flutter 按钮二三事\ndate: 2020-12-23 14:37:07\ncategories:\n- 移动开发技巧/经验\n- flutter\ntags:\n- flutter\n---\n\n# 前言\n\n在flutter中, 内置了很多不同的按钮, 其中有一些已经要被放弃掉了, 今天来梳理一下。\n\n# 被废弃和被替换的按钮\n\n| 废弃的按钮 | 废弃的按钮样式 | 替换的按钮 | 替换的按钮样式 |\n| :------- | :-------------- | :---------- | :------------- |\n| FlatButton | ButtonTheme | TextButton | TextButtonTheme |\n| RaisedButton | ButtonTheme | ElevatedButton | ElevatedButtonTheme |\n| OutlineButton | ButtonTheme | OutlinedButton | OutlinedButtonTheme |\n\n<!--more-->\n\n## 变化\n\n### 样式变化\n\n按照[官方文档](https://flutter.dev/go/material-button-migration-guide)所说, 新的按钮符合当前Material Design规范, 所以看起来和以前有所不同, 具体体现在内边距, 边角弧度和按住/悬停/按下的反馈。\n\n### 属性的变化\n\n由原先的:\n\n```dart\nFlatButton(\n  focusColor: Colors.red,\n  hoverColor: Colors.green,\n  splashColor: Colors.blue,\n  onPressed: () { },\n  child: Text('FlatButton with custom overlay colors'),\n)\n```\n\n变为现在的:\n\n```dart\nTextButton(\n  style: ButtonStyle(\n    overlayColor: MaterialStateProperty.resolveWith<Color>(\n      (Set<MaterialState> states) {\n        if (states.contains(MaterialState.focused))\n          return Colors.red;\n        if (states.contains(MaterialState.hovered))\n            return Colors.green;\n        if (states.contains(MaterialState.pressed))\n            return Colors.blue;\n        return null; // Defer to the widget's default.\n    }),\n  ),\n  onPressed: () { },\n  child: Text('TextButton with custom overlay colors'),\n)\n```\n\n也就是说全部由ButtonStyle接管, 就像TextField中的style一样。\n","slug":"mobile_skill_experience/flutter/flutter-button","published":1,"updated":"2022-10-07T12:30:42.829Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejmf00263vsbdgbub892","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>在flutter中, 内置了很多不同的按钮, 其中有一些已经要被放弃掉了, 今天来梳理一下。</p>\n<h1 id=\"被废弃和被替换的按钮\"><a href=\"#被废弃和被替换的按钮\" class=\"headerlink\" title=\"被废弃和被替换的按钮\"></a>被废弃和被替换的按钮</h1><table>\n<thead>\n<tr>\n<th align=\"left\">废弃的按钮</th>\n<th align=\"left\">废弃的按钮样式</th>\n<th align=\"left\">替换的按钮</th>\n<th align=\"left\">替换的按钮样式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">FlatButton</td>\n<td align=\"left\">ButtonTheme</td>\n<td align=\"left\">TextButton</td>\n<td align=\"left\">TextButtonTheme</td>\n</tr>\n<tr>\n<td align=\"left\">RaisedButton</td>\n<td align=\"left\">ButtonTheme</td>\n<td align=\"left\">ElevatedButton</td>\n<td align=\"left\">ElevatedButtonTheme</td>\n</tr>\n<tr>\n<td align=\"left\">OutlineButton</td>\n<td align=\"left\">ButtonTheme</td>\n<td align=\"left\">OutlinedButton</td>\n<td align=\"left\">OutlinedButtonTheme</td>\n</tr>\n</tbody></table>\n<span id=\"more\"></span>\n\n<h2 id=\"变化\"><a href=\"#变化\" class=\"headerlink\" title=\"变化\"></a>变化</h2><h3 id=\"样式变化\"><a href=\"#样式变化\" class=\"headerlink\" title=\"样式变化\"></a>样式变化</h3><p>按照<a href=\"https://flutter.dev/go/material-button-migration-guide\">官方文档</a>所说, 新的按钮符合当前Material Design规范, 所以看起来和以前有所不同, 具体体现在内边距, 边角弧度和按住&#x2F;悬停&#x2F;按下的反馈。</p>\n<h3 id=\"属性的变化\"><a href=\"#属性的变化\" class=\"headerlink\" title=\"属性的变化\"></a>属性的变化</h3><p>由原先的:</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FlatButton(</span><br><span class=\"line\">  focusColor: Colors.red,</span><br><span class=\"line\">  hoverColor: Colors.green,</span><br><span class=\"line\">  splashColor: Colors.blue,</span><br><span class=\"line\">  onPressed: () &#123; &#125;,</span><br><span class=\"line\">  child: Text(<span class=\"string\">&#x27;FlatButton with custom overlay colors&#x27;</span>),</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>变为现在的:</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TextButton(</span><br><span class=\"line\">  style: ButtonStyle(</span><br><span class=\"line\">    overlayColor: MaterialStateProperty.resolveWith&lt;Color&gt;(</span><br><span class=\"line\">      (<span class=\"built_in\">Set</span>&lt;MaterialState&gt; states) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (states.contains(MaterialState.focused))</span><br><span class=\"line\">          <span class=\"keyword\">return</span> Colors.red;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (states.contains(MaterialState.hovered))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Colors.green;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (states.contains(MaterialState.pressed))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Colors.blue;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>; <span class=\"comment\">// Defer to the widget&#x27;s default.</span></span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ),</span><br><span class=\"line\">  onPressed: () &#123; &#125;,</span><br><span class=\"line\">  child: Text(<span class=\"string\">&#x27;TextButton with custom overlay colors&#x27;</span>),</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>也就是说全部由ButtonStyle接管, 就像TextField中的style一样。</p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>在flutter中, 内置了很多不同的按钮, 其中有一些已经要被放弃掉了, 今天来梳理一下。</p>\n<h1 id=\"被废弃和被替换的按钮\"><a href=\"#被废弃和被替换的按钮\" class=\"headerlink\" title=\"被废弃和被替换的按钮\"></a>被废弃和被替换的按钮</h1><table>\n<thead>\n<tr>\n<th align=\"left\">废弃的按钮</th>\n<th align=\"left\">废弃的按钮样式</th>\n<th align=\"left\">替换的按钮</th>\n<th align=\"left\">替换的按钮样式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">FlatButton</td>\n<td align=\"left\">ButtonTheme</td>\n<td align=\"left\">TextButton</td>\n<td align=\"left\">TextButtonTheme</td>\n</tr>\n<tr>\n<td align=\"left\">RaisedButton</td>\n<td align=\"left\">ButtonTheme</td>\n<td align=\"left\">ElevatedButton</td>\n<td align=\"left\">ElevatedButtonTheme</td>\n</tr>\n<tr>\n<td align=\"left\">OutlineButton</td>\n<td align=\"left\">ButtonTheme</td>\n<td align=\"left\">OutlinedButton</td>\n<td align=\"left\">OutlinedButtonTheme</td>\n</tr>\n</tbody></table>","more":"<h2 id=\"变化\"><a href=\"#变化\" class=\"headerlink\" title=\"变化\"></a>变化</h2><h3 id=\"样式变化\"><a href=\"#样式变化\" class=\"headerlink\" title=\"样式变化\"></a>样式变化</h3><p>按照<a href=\"https://flutter.dev/go/material-button-migration-guide\">官方文档</a>所说, 新的按钮符合当前Material Design规范, 所以看起来和以前有所不同, 具体体现在内边距, 边角弧度和按住&#x2F;悬停&#x2F;按下的反馈。</p>\n<h3 id=\"属性的变化\"><a href=\"#属性的变化\" class=\"headerlink\" title=\"属性的变化\"></a>属性的变化</h3><p>由原先的:</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FlatButton(</span><br><span class=\"line\">  focusColor: Colors.red,</span><br><span class=\"line\">  hoverColor: Colors.green,</span><br><span class=\"line\">  splashColor: Colors.blue,</span><br><span class=\"line\">  onPressed: () &#123; &#125;,</span><br><span class=\"line\">  child: Text(<span class=\"string\">&#x27;FlatButton with custom overlay colors&#x27;</span>),</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>变为现在的:</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TextButton(</span><br><span class=\"line\">  style: ButtonStyle(</span><br><span class=\"line\">    overlayColor: MaterialStateProperty.resolveWith&lt;Color&gt;(</span><br><span class=\"line\">      (<span class=\"built_in\">Set</span>&lt;MaterialState&gt; states) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (states.contains(MaterialState.focused))</span><br><span class=\"line\">          <span class=\"keyword\">return</span> Colors.red;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (states.contains(MaterialState.hovered))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Colors.green;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (states.contains(MaterialState.pressed))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Colors.blue;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>; <span class=\"comment\">// Defer to the widget&#x27;s default.</span></span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ),</span><br><span class=\"line\">  onPressed: () &#123; &#125;,</span><br><span class=\"line\">  child: Text(<span class=\"string\">&#x27;TextButton with custom overlay colors&#x27;</span>),</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>也就是说全部由ButtonStyle接管, 就像TextField中的style一样。</p>"},{"title":"flutter ios打包","date":"2020-02-10T07:43:19.000Z","_content":"\n# 总结\n\n使用 flutter 打包 ios 遇到了很多问题, 先归纳一下:\n\n1. xcode 版本的问题\n2. 系统版本的问题\n3. cocoapods 的问题\n4. 执行脚本提示: `operation not permitted` 的问题\n\n我们来一个一个问题的复盘。\n\n<!--more-->\n\n# xcode版本\n\nflutter 支持的最低 xcode 的版本是 10.2, 所以我们需要保证 xcode 的版本为 10.2 以上。\n\n# 系统版本\n\n上面提到了 xcode 的最低版本, 那么也连着对系统的版本有要求, xcode 10.2 需要 macOS 最低版本是 10.14.4, 所以还需要升级一下 macOS 版本。\n\n# cocoapods 的问题\n\n这个问题是最恶心的, 耽误我时间最长的问题。\n\n一开始使用 `flutter build ios --release` 命令时, 它会提醒你 `Cocoapods not installed. Skipping pod install`, 如果你忽略这个警告, 那么最终将会编译失败, 那么跟着我下面的命令来一步一步安装 cocoapods:\n\n```shell\n# 查看是否有rvm环境并查看版本\nrvm -v\n# 如果没有的话, 则使用这个命令:\ncurl -L https://get.rvm.io | bash -s stable\nsource ~/.rvm/scripts/rvm\n# 再次使用第一个命令查看是否安装成功\n\n# 接下来使用 rvm 安装 ruby\nrvm install 2.0.0\n# 设置默认环境\nrvm 2.0.0 default\n\n# 接着使用ruby来安装pods\ngem install cocoapods\npod setup\n\n# 如果是下载的xcode版本, 需要指定一下:\nsudo xcode-select --switch /xcode的路径/Xcode.app/Contents/Developer\n```\n\nok, pods 就安装好了。\n\n# 无权限执行脚本的问题\n\n我们先 cd 到脚本所在的路径下, 使用 `ls -lart`, 可以看到无法执行的脚本的权限那里最后有一个 `@`, 接着使用 `ls-lae0@` 查看, 可以看到带有 @ 符号的脚本下面有相关信息, 比如:`com.macromates.selectionRange` 等, 我们可以使用 `sudo xattr -d -r com.macromates.selectionRange ./*`, 但是有一个去不掉: `com.apple.quarantine`, 只有一个办法, 就是关掉苹果的sip, 方法自行百度。\n\n不容易, 最后终于所有的问题都解决了, 终于可以成功的编译 ios 版本了!\n","source":"_posts/mobile_skill_experience/flutter/flutter-ios-package.md","raw":"---\ntitle: flutter ios打包\ndate: 2020-02-10 15:43:19\ncategories:\n- 移动开发技巧/经验\n- flutter\ntags:\n- flutter\n---\n\n# 总结\n\n使用 flutter 打包 ios 遇到了很多问题, 先归纳一下:\n\n1. xcode 版本的问题\n2. 系统版本的问题\n3. cocoapods 的问题\n4. 执行脚本提示: `operation not permitted` 的问题\n\n我们来一个一个问题的复盘。\n\n<!--more-->\n\n# xcode版本\n\nflutter 支持的最低 xcode 的版本是 10.2, 所以我们需要保证 xcode 的版本为 10.2 以上。\n\n# 系统版本\n\n上面提到了 xcode 的最低版本, 那么也连着对系统的版本有要求, xcode 10.2 需要 macOS 最低版本是 10.14.4, 所以还需要升级一下 macOS 版本。\n\n# cocoapods 的问题\n\n这个问题是最恶心的, 耽误我时间最长的问题。\n\n一开始使用 `flutter build ios --release` 命令时, 它会提醒你 `Cocoapods not installed. Skipping pod install`, 如果你忽略这个警告, 那么最终将会编译失败, 那么跟着我下面的命令来一步一步安装 cocoapods:\n\n```shell\n# 查看是否有rvm环境并查看版本\nrvm -v\n# 如果没有的话, 则使用这个命令:\ncurl -L https://get.rvm.io | bash -s stable\nsource ~/.rvm/scripts/rvm\n# 再次使用第一个命令查看是否安装成功\n\n# 接下来使用 rvm 安装 ruby\nrvm install 2.0.0\n# 设置默认环境\nrvm 2.0.0 default\n\n# 接着使用ruby来安装pods\ngem install cocoapods\npod setup\n\n# 如果是下载的xcode版本, 需要指定一下:\nsudo xcode-select --switch /xcode的路径/Xcode.app/Contents/Developer\n```\n\nok, pods 就安装好了。\n\n# 无权限执行脚本的问题\n\n我们先 cd 到脚本所在的路径下, 使用 `ls -lart`, 可以看到无法执行的脚本的权限那里最后有一个 `@`, 接着使用 `ls-lae0@` 查看, 可以看到带有 @ 符号的脚本下面有相关信息, 比如:`com.macromates.selectionRange` 等, 我们可以使用 `sudo xattr -d -r com.macromates.selectionRange ./*`, 但是有一个去不掉: `com.apple.quarantine`, 只有一个办法, 就是关掉苹果的sip, 方法自行百度。\n\n不容易, 最后终于所有的问题都解决了, 终于可以成功的编译 ios 版本了!\n","slug":"mobile_skill_experience/flutter/flutter-ios-package","published":1,"updated":"2022-10-07T12:30:52.097Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejmj00283vsbgpwi7gwn","content":"<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>使用 flutter 打包 ios 遇到了很多问题, 先归纳一下:</p>\n<ol>\n<li>xcode 版本的问题</li>\n<li>系统版本的问题</li>\n<li>cocoapods 的问题</li>\n<li>执行脚本提示: <code>operation not permitted</code> 的问题</li>\n</ol>\n<p>我们来一个一个问题的复盘。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"xcode版本\"><a href=\"#xcode版本\" class=\"headerlink\" title=\"xcode版本\"></a>xcode版本</h1><p>flutter 支持的最低 xcode 的版本是 10.2, 所以我们需要保证 xcode 的版本为 10.2 以上。</p>\n<h1 id=\"系统版本\"><a href=\"#系统版本\" class=\"headerlink\" title=\"系统版本\"></a>系统版本</h1><p>上面提到了 xcode 的最低版本, 那么也连着对系统的版本有要求, xcode 10.2 需要 macOS 最低版本是 10.14.4, 所以还需要升级一下 macOS 版本。</p>\n<h1 id=\"cocoapods-的问题\"><a href=\"#cocoapods-的问题\" class=\"headerlink\" title=\"cocoapods 的问题\"></a>cocoapods 的问题</h1><p>这个问题是最恶心的, 耽误我时间最长的问题。</p>\n<p>一开始使用 <code>flutter build ios --release</code> 命令时, 它会提醒你 <code>Cocoapods not installed. Skipping pod install</code>, 如果你忽略这个警告, 那么最终将会编译失败, 那么跟着我下面的命令来一步一步安装 cocoapods:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看是否有rvm环境并查看版本</span></span><br><span class=\"line\">rvm -v</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 如果没有的话, 则使用这个命令:</span></span><br><span class=\"line\">curl -L https://get.rvm.io | bash -s stable</span><br><span class=\"line\">source ~/.rvm/scripts/rvm</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 再次使用第一个命令查看是否安装成功</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 接下来使用 rvm 安装 ruby</span></span><br><span class=\"line\">rvm install 2.0.0</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 设置默认环境</span></span><br><span class=\"line\">rvm 2.0.0 default</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 接着使用ruby来安装pods</span></span><br><span class=\"line\">gem install cocoapods</span><br><span class=\"line\">pod setup</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 如果是下载的xcode版本, 需要指定一下:</span></span><br><span class=\"line\">sudo xcode-select --switch /xcode的路径/Xcode.app/Contents/Developer</span><br></pre></td></tr></table></figure>\n\n<p>ok, pods 就安装好了。</p>\n<h1 id=\"无权限执行脚本的问题\"><a href=\"#无权限执行脚本的问题\" class=\"headerlink\" title=\"无权限执行脚本的问题\"></a>无权限执行脚本的问题</h1><p>我们先 cd 到脚本所在的路径下, 使用 <code>ls -lart</code>, 可以看到无法执行的脚本的权限那里最后有一个 <code>@</code>, 接着使用 <code>ls-lae0@</code> 查看, 可以看到带有 @ 符号的脚本下面有相关信息, 比如:<code>com.macromates.selectionRange</code> 等, 我们可以使用 <code>sudo xattr -d -r com.macromates.selectionRange ./*</code>, 但是有一个去不掉: <code>com.apple.quarantine</code>, 只有一个办法, 就是关掉苹果的sip, 方法自行百度。</p>\n<p>不容易, 最后终于所有的问题都解决了, 终于可以成功的编译 ios 版本了!</p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>使用 flutter 打包 ios 遇到了很多问题, 先归纳一下:</p>\n<ol>\n<li>xcode 版本的问题</li>\n<li>系统版本的问题</li>\n<li>cocoapods 的问题</li>\n<li>执行脚本提示: <code>operation not permitted</code> 的问题</li>\n</ol>\n<p>我们来一个一个问题的复盘。</p>","more":"<h1 id=\"xcode版本\"><a href=\"#xcode版本\" class=\"headerlink\" title=\"xcode版本\"></a>xcode版本</h1><p>flutter 支持的最低 xcode 的版本是 10.2, 所以我们需要保证 xcode 的版本为 10.2 以上。</p>\n<h1 id=\"系统版本\"><a href=\"#系统版本\" class=\"headerlink\" title=\"系统版本\"></a>系统版本</h1><p>上面提到了 xcode 的最低版本, 那么也连着对系统的版本有要求, xcode 10.2 需要 macOS 最低版本是 10.14.4, 所以还需要升级一下 macOS 版本。</p>\n<h1 id=\"cocoapods-的问题\"><a href=\"#cocoapods-的问题\" class=\"headerlink\" title=\"cocoapods 的问题\"></a>cocoapods 的问题</h1><p>这个问题是最恶心的, 耽误我时间最长的问题。</p>\n<p>一开始使用 <code>flutter build ios --release</code> 命令时, 它会提醒你 <code>Cocoapods not installed. Skipping pod install</code>, 如果你忽略这个警告, 那么最终将会编译失败, 那么跟着我下面的命令来一步一步安装 cocoapods:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看是否有rvm环境并查看版本</span></span><br><span class=\"line\">rvm -v</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 如果没有的话, 则使用这个命令:</span></span><br><span class=\"line\">curl -L https://get.rvm.io | bash -s stable</span><br><span class=\"line\">source ~/.rvm/scripts/rvm</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 再次使用第一个命令查看是否安装成功</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 接下来使用 rvm 安装 ruby</span></span><br><span class=\"line\">rvm install 2.0.0</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 设置默认环境</span></span><br><span class=\"line\">rvm 2.0.0 default</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 接着使用ruby来安装pods</span></span><br><span class=\"line\">gem install cocoapods</span><br><span class=\"line\">pod setup</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 如果是下载的xcode版本, 需要指定一下:</span></span><br><span class=\"line\">sudo xcode-select --switch /xcode的路径/Xcode.app/Contents/Developer</span><br></pre></td></tr></table></figure>\n\n<p>ok, pods 就安装好了。</p>\n<h1 id=\"无权限执行脚本的问题\"><a href=\"#无权限执行脚本的问题\" class=\"headerlink\" title=\"无权限执行脚本的问题\"></a>无权限执行脚本的问题</h1><p>我们先 cd 到脚本所在的路径下, 使用 <code>ls -lart</code>, 可以看到无法执行的脚本的权限那里最后有一个 <code>@</code>, 接着使用 <code>ls-lae0@</code> 查看, 可以看到带有 @ 符号的脚本下面有相关信息, 比如:<code>com.macromates.selectionRange</code> 等, 我们可以使用 <code>sudo xattr -d -r com.macromates.selectionRange ./*</code>, 但是有一个去不掉: <code>com.apple.quarantine</code>, 只有一个办法, 就是关掉苹果的sip, 方法自行百度。</p>\n<p>不容易, 最后终于所有的问题都解决了, 终于可以成功的编译 ios 版本了!</p>"},{"title":"flutter 和 json","date":"2020-01-02T02:10:42.000Z","_content":"\n# 前言\n\n前面讲了如何配置flutter的开发环境, 这次来说说如何使用flutter解析json, 等弄明白了如何解析json, 那么就可以进行网络开发了, 因为现在绝大部分传输数据使用的都是json格式, 那么接下来就说说如何解析json吧。\n\nflutter 有两种方式, 一种是如果是比较简单的 json 的话, 可以直接手动解析, 另外一种是针对比较复杂的格式, 使用实体类来映射, 那么接下来分别介绍这两种方式。\n\n<!--more-->\n\n# 手动解析\n\n具体实现方式:\n\n```dart\nimport 'dart:convert';\n\nString resultJson = '{\"result\":\"1\",\"datas\":[{\"url\":\"images/logo.jpg\"},{\"url\":\"images/logo1.jpg\"}],\"message\":\"success\"}';\n\nMap map = json.decode(resultJson);\nString result = map[\"result\"];\nList datas = map[\"datas\"].toList();\nString message = map[\"message\"];\n```\n\n# 实体类\n\n如果格式比较复杂的情况, 需要使用[这个地址](https://javiercbk.github.io/json_to_dart)来生成实体类, 可以先使用[这个网站](http://www.bejson.com)来校验json的格式是否正确。\n\n![flutter和json](/images/mobile/flutter/flutter-json-class.png)\n\n接下来将生成的class复制到 xxx.dart 中, 并在文件头部加上以下内容:\n\n```dart\nimport 'package:json_annotation/json_annotation.dart';\npart 'xxx.g.dart';\n\n#JsonSerializable(nullable: false)\n```\n\n接着在 terminal 中执行 `flutter packages pub run build_runner build` 命令来生成所需文件。\n\n也可以使用 `flutter package pub run build_runner watch` 命令来监控是否有需要生成的文件。\n\n使用方式:\n\n```dart\nXxx xxx = new Xxx.fromJson(json);\n```\n\n嗯, 第二种方式是目前官方最推荐的方式了。\n","source":"_posts/mobile_skill_experience/flutter/flutter-json.md","raw":"---\ntitle: flutter 和 json\ndate: 2020-01-02 10:10:42\ncategories:\n- 移动开发技巧/经验\n- flutter\ntags:\n- json\n- flutter\n---\n\n# 前言\n\n前面讲了如何配置flutter的开发环境, 这次来说说如何使用flutter解析json, 等弄明白了如何解析json, 那么就可以进行网络开发了, 因为现在绝大部分传输数据使用的都是json格式, 那么接下来就说说如何解析json吧。\n\nflutter 有两种方式, 一种是如果是比较简单的 json 的话, 可以直接手动解析, 另外一种是针对比较复杂的格式, 使用实体类来映射, 那么接下来分别介绍这两种方式。\n\n<!--more-->\n\n# 手动解析\n\n具体实现方式:\n\n```dart\nimport 'dart:convert';\n\nString resultJson = '{\"result\":\"1\",\"datas\":[{\"url\":\"images/logo.jpg\"},{\"url\":\"images/logo1.jpg\"}],\"message\":\"success\"}';\n\nMap map = json.decode(resultJson);\nString result = map[\"result\"];\nList datas = map[\"datas\"].toList();\nString message = map[\"message\"];\n```\n\n# 实体类\n\n如果格式比较复杂的情况, 需要使用[这个地址](https://javiercbk.github.io/json_to_dart)来生成实体类, 可以先使用[这个网站](http://www.bejson.com)来校验json的格式是否正确。\n\n![flutter和json](/images/mobile/flutter/flutter-json-class.png)\n\n接下来将生成的class复制到 xxx.dart 中, 并在文件头部加上以下内容:\n\n```dart\nimport 'package:json_annotation/json_annotation.dart';\npart 'xxx.g.dart';\n\n#JsonSerializable(nullable: false)\n```\n\n接着在 terminal 中执行 `flutter packages pub run build_runner build` 命令来生成所需文件。\n\n也可以使用 `flutter package pub run build_runner watch` 命令来监控是否有需要生成的文件。\n\n使用方式:\n\n```dart\nXxx xxx = new Xxx.fromJson(json);\n```\n\n嗯, 第二种方式是目前官方最推荐的方式了。\n","slug":"mobile_skill_experience/flutter/flutter-json","published":1,"updated":"2022-10-07T12:30:58.077Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejmn002b3vsbd72d10k9","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>前面讲了如何配置flutter的开发环境, 这次来说说如何使用flutter解析json, 等弄明白了如何解析json, 那么就可以进行网络开发了, 因为现在绝大部分传输数据使用的都是json格式, 那么接下来就说说如何解析json吧。</p>\n<p>flutter 有两种方式, 一种是如果是比较简单的 json 的话, 可以直接手动解析, 另外一种是针对比较复杂的格式, 使用实体类来映射, 那么接下来分别介绍这两种方式。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"手动解析\"><a href=\"#手动解析\" class=\"headerlink\" title=\"手动解析\"></a>手动解析</h1><p>具体实现方式:</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;dart:convert&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">String</span> resultJson = <span class=\"string\">&#x27;&#123;&quot;result&quot;:&quot;1&quot;,&quot;datas&quot;:[&#123;&quot;url&quot;:&quot;images/logo.jpg&quot;&#125;,&#123;&quot;url&quot;:&quot;images/logo1.jpg&quot;&#125;],&quot;message&quot;:&quot;success&quot;&#125;&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Map</span> map = json.decode(resultJson);</span><br><span class=\"line\"><span class=\"built_in\">String</span> result = map[<span class=\"string\">&quot;result&quot;</span>];</span><br><span class=\"line\"><span class=\"built_in\">List</span> datas = map[<span class=\"string\">&quot;datas&quot;</span>].toList();</span><br><span class=\"line\"><span class=\"built_in\">String</span> message = map[<span class=\"string\">&quot;message&quot;</span>];</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"实体类\"><a href=\"#实体类\" class=\"headerlink\" title=\"实体类\"></a>实体类</h1><p>如果格式比较复杂的情况, 需要使用<a href=\"https://javiercbk.github.io/json_to_dart\">这个地址</a>来生成实体类, 可以先使用<a href=\"http://www.bejson.com/\">这个网站</a>来校验json的格式是否正确。</p>\n<p><img src=\"/images/mobile/flutter/flutter-json-class.png\" alt=\"flutter和json\"></p>\n<p>接下来将生成的class复制到 xxx.dart 中, 并在文件头部加上以下内容:</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;package:json_annotation/json_annotation.dart&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">part</span> <span class=\"string\">&#x27;xxx.g.dart&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">#JsonSerializable(nullable: <span class=\"keyword\">false</span>)</span><br></pre></td></tr></table></figure>\n\n<p>接着在 terminal 中执行 <code>flutter packages pub run build_runner build</code> 命令来生成所需文件。</p>\n<p>也可以使用 <code>flutter package pub run build_runner watch</code> 命令来监控是否有需要生成的文件。</p>\n<p>使用方式:</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Xxx xxx = <span class=\"keyword\">new</span> Xxx.fromJson(json);</span><br></pre></td></tr></table></figure>\n\n<p>嗯, 第二种方式是目前官方最推荐的方式了。</p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>前面讲了如何配置flutter的开发环境, 这次来说说如何使用flutter解析json, 等弄明白了如何解析json, 那么就可以进行网络开发了, 因为现在绝大部分传输数据使用的都是json格式, 那么接下来就说说如何解析json吧。</p>\n<p>flutter 有两种方式, 一种是如果是比较简单的 json 的话, 可以直接手动解析, 另外一种是针对比较复杂的格式, 使用实体类来映射, 那么接下来分别介绍这两种方式。</p>","more":"<h1 id=\"手动解析\"><a href=\"#手动解析\" class=\"headerlink\" title=\"手动解析\"></a>手动解析</h1><p>具体实现方式:</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;dart:convert&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">String</span> resultJson = <span class=\"string\">&#x27;&#123;&quot;result&quot;:&quot;1&quot;,&quot;datas&quot;:[&#123;&quot;url&quot;:&quot;images/logo.jpg&quot;&#125;,&#123;&quot;url&quot;:&quot;images/logo1.jpg&quot;&#125;],&quot;message&quot;:&quot;success&quot;&#125;&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Map</span> map = json.decode(resultJson);</span><br><span class=\"line\"><span class=\"built_in\">String</span> result = map[<span class=\"string\">&quot;result&quot;</span>];</span><br><span class=\"line\"><span class=\"built_in\">List</span> datas = map[<span class=\"string\">&quot;datas&quot;</span>].toList();</span><br><span class=\"line\"><span class=\"built_in\">String</span> message = map[<span class=\"string\">&quot;message&quot;</span>];</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"实体类\"><a href=\"#实体类\" class=\"headerlink\" title=\"实体类\"></a>实体类</h1><p>如果格式比较复杂的情况, 需要使用<a href=\"https://javiercbk.github.io/json_to_dart\">这个地址</a>来生成实体类, 可以先使用<a href=\"http://www.bejson.com/\">这个网站</a>来校验json的格式是否正确。</p>\n<p><img src=\"/images/mobile/flutter/flutter-json-class.png\" alt=\"flutter和json\"></p>\n<p>接下来将生成的class复制到 xxx.dart 中, 并在文件头部加上以下内容:</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;package:json_annotation/json_annotation.dart&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">part</span> <span class=\"string\">&#x27;xxx.g.dart&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">#JsonSerializable(nullable: <span class=\"keyword\">false</span>)</span><br></pre></td></tr></table></figure>\n\n<p>接着在 terminal 中执行 <code>flutter packages pub run build_runner build</code> 命令来生成所需文件。</p>\n<p>也可以使用 <code>flutter package pub run build_runner watch</code> 命令来监控是否有需要生成的文件。</p>\n<p>使用方式:</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Xxx xxx = <span class=\"keyword\">new</span> Xxx.fromJson(json);</span><br></pre></td></tr></table></figure>\n\n<p>嗯, 第二种方式是目前官方最推荐的方式了。</p>"},{"title":"flutter 的页面钩子","date":"2020-03-12T08:09:54.000Z","_content":"\n# deactivate 方法\n\n官方注释:\n\n> Called when this object is removed from the tree.\nThe framework calls this method whenever it removes this [State] object\nfrom the tree. In some cases, the framework will reinsert the [State]\nobject into another part of the tree (e.g., if the subtree containing this\n[State] object is grafted from one location in the tree to another). If\nthat happens, the framework will ensure that it calls [build] to give the\n[State] object a chance to adapt to its new location in the tree. If\nthe framework does reinsert this subtree, it will do so before the end of\nthe animation frame in which the subtree was removed from the tree. For\nthis reason, [State] objects can defer releasing most resources until the\nframework calls their [dispose] method.\nSubclasses should override this method to clean up any links between\nthis object and other elements in the tree (e.g. if you have provided an\nancestor with a pointer to a descendant's [RenderObject]).\nIf you override this, make sure to end your method with a call to\nsuper.deactivate().\n\n简单翻译一下:\n\n当本页面被移出整个视图树后被自动调用。\nframework 将本页面移出视图树后调用这个方法。在某些情况下, framework会将当前页面\n重新插入到另一个树的某个部分(e.g. 如果子树包含的这个页面是从其他树中嫁接过来的)。\n如果出现这种情况, framework会确保调用build()方法让该页面去适应在树中的新位置。如果\nframework 重新插入了这个子树, 它将在从树中移出这个子树之前执行本方法。因为这个原\n因, 当framework调用他们的dispose()方法的时候可以延迟释放更多资源。\n\n也就是说只要是当页面不在当前视图中, 该方法就会被调用, 而且会调用该页面的build()方法。\n注释中还提到了如果需要重载该方法, 请确保在方法最后调用 super.deactivate() 。\n\n所以, 该方法其实是用来执行清理工作的, \n","source":"_posts/mobile_skill_experience/flutter/flutter_page_hook_dart.md","raw":"---\ntitle: flutter 的页面钩子\ndate: 2020-03-12 16:09:54\ncategories:\n- 移动开发技巧/经验\n- flutter\ntags:\n- flutter\n---\n\n# deactivate 方法\n\n官方注释:\n\n> Called when this object is removed from the tree.\nThe framework calls this method whenever it removes this [State] object\nfrom the tree. In some cases, the framework will reinsert the [State]\nobject into another part of the tree (e.g., if the subtree containing this\n[State] object is grafted from one location in the tree to another). If\nthat happens, the framework will ensure that it calls [build] to give the\n[State] object a chance to adapt to its new location in the tree. If\nthe framework does reinsert this subtree, it will do so before the end of\nthe animation frame in which the subtree was removed from the tree. For\nthis reason, [State] objects can defer releasing most resources until the\nframework calls their [dispose] method.\nSubclasses should override this method to clean up any links between\nthis object and other elements in the tree (e.g. if you have provided an\nancestor with a pointer to a descendant's [RenderObject]).\nIf you override this, make sure to end your method with a call to\nsuper.deactivate().\n\n简单翻译一下:\n\n当本页面被移出整个视图树后被自动调用。\nframework 将本页面移出视图树后调用这个方法。在某些情况下, framework会将当前页面\n重新插入到另一个树的某个部分(e.g. 如果子树包含的这个页面是从其他树中嫁接过来的)。\n如果出现这种情况, framework会确保调用build()方法让该页面去适应在树中的新位置。如果\nframework 重新插入了这个子树, 它将在从树中移出这个子树之前执行本方法。因为这个原\n因, 当framework调用他们的dispose()方法的时候可以延迟释放更多资源。\n\n也就是说只要是当页面不在当前视图中, 该方法就会被调用, 而且会调用该页面的build()方法。\n注释中还提到了如果需要重载该方法, 请确保在方法最后调用 super.deactivate() 。\n\n所以, 该方法其实是用来执行清理工作的, \n","slug":"mobile_skill_experience/flutter/flutter_page_hook_dart","published":1,"updated":"2022-10-07T12:31:07.445Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejmr002d3vsb00tf0uxo","content":"<h1 id=\"deactivate-方法\"><a href=\"#deactivate-方法\" class=\"headerlink\" title=\"deactivate 方法\"></a>deactivate 方法</h1><p>官方注释:</p>\n<blockquote>\n<p>Called when this object is removed from the tree.<br>The framework calls this method whenever it removes this [State] object<br>from the tree. In some cases, the framework will reinsert the [State]<br>object into another part of the tree (e.g., if the subtree containing this<br>[State] object is grafted from one location in the tree to another). If<br>that happens, the framework will ensure that it calls [build] to give the<br>[State] object a chance to adapt to its new location in the tree. If<br>the framework does reinsert this subtree, it will do so before the end of<br>the animation frame in which the subtree was removed from the tree. For<br>this reason, [State] objects can defer releasing most resources until the<br>framework calls their [dispose] method.<br>Subclasses should override this method to clean up any links between<br>this object and other elements in the tree (e.g. if you have provided an<br>ancestor with a pointer to a descendant’s [RenderObject]).<br>If you override this, make sure to end your method with a call to<br>super.deactivate().</p>\n</blockquote>\n<p>简单翻译一下:</p>\n<p>当本页面被移出整个视图树后被自动调用。<br>framework 将本页面移出视图树后调用这个方法。在某些情况下, framework会将当前页面<br>重新插入到另一个树的某个部分(e.g. 如果子树包含的这个页面是从其他树中嫁接过来的)。<br>如果出现这种情况, framework会确保调用build()方法让该页面去适应在树中的新位置。如果<br>framework 重新插入了这个子树, 它将在从树中移出这个子树之前执行本方法。因为这个原<br>因, 当framework调用他们的dispose()方法的时候可以延迟释放更多资源。</p>\n<p>也就是说只要是当页面不在当前视图中, 该方法就会被调用, 而且会调用该页面的build()方法。<br>注释中还提到了如果需要重载该方法, 请确保在方法最后调用 super.deactivate() 。</p>\n<p>所以, 该方法其实是用来执行清理工作的, </p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"","more":"<h1 id=\"deactivate-方法\"><a href=\"#deactivate-方法\" class=\"headerlink\" title=\"deactivate 方法\"></a>deactivate 方法</h1><p>官方注释:</p>\n<blockquote>\n<p>Called when this object is removed from the tree.<br>The framework calls this method whenever it removes this [State] object<br>from the tree. In some cases, the framework will reinsert the [State]<br>object into another part of the tree (e.g., if the subtree containing this<br>[State] object is grafted from one location in the tree to another). If<br>that happens, the framework will ensure that it calls [build] to give the<br>[State] object a chance to adapt to its new location in the tree. If<br>the framework does reinsert this subtree, it will do so before the end of<br>the animation frame in which the subtree was removed from the tree. For<br>this reason, [State] objects can defer releasing most resources until the<br>framework calls their [dispose] method.<br>Subclasses should override this method to clean up any links between<br>this object and other elements in the tree (e.g. if you have provided an<br>ancestor with a pointer to a descendant’s [RenderObject]).<br>If you override this, make sure to end your method with a call to<br>super.deactivate().</p>\n</blockquote>\n<p>简单翻译一下:</p>\n<p>当本页面被移出整个视图树后被自动调用。<br>framework 将本页面移出视图树后调用这个方法。在某些情况下, framework会将当前页面<br>重新插入到另一个树的某个部分(e.g. 如果子树包含的这个页面是从其他树中嫁接过来的)。<br>如果出现这种情况, framework会确保调用build()方法让该页面去适应在树中的新位置。如果<br>framework 重新插入了这个子树, 它将在从树中移出这个子树之前执行本方法。因为这个原<br>因, 当framework调用他们的dispose()方法的时候可以延迟释放更多资源。</p>\n<p>也就是说只要是当页面不在当前视图中, 该方法就会被调用, 而且会调用该页面的build()方法。<br>注释中还提到了如果需要重载该方法, 请确保在方法最后调用 super.deactivate() 。</p>\n<p>所以, 该方法其实是用来执行清理工作的, </p>\n"},{"title":"搭建flutter开发环境","date":"2020-01-01T22:27:11.000Z","_content":"\n# 介绍\n\nflutter 是谷歌的移动UI框架, 可以快速在 IOS 和 Android 上构建高质量的原生用户界面。这里是它的[中文网站](https://flutterchina.club)和[api](https://api.flutter.dev)。\n\n# 搭建环境\n\n这里[官网](https://flutterchina.club/setup-windows)介绍的非常详细, 我就不多赘述了, 这里就说一下几个注意的地方:\n\n<!--more-->\n\n* 使用flutter doctor\n\n在命令行使用 `flutter doctor` 来检查是否需要安装其他依赖项来完成安装。\n\n* 将 flutter 的安装目录放到环境变量中\n\n新建一个 `FLUTTER_HOME` 环境变量, 赋值为安装目录, 接着将 `%FLUTTER_HOME%` 添加到 path 环境变量中。\n\n* 编译器的配置\n\n我体验了三种编译器, 分别是 intellij idea, android studio 和 vs code, 体验最好的是 vs code, 果然是宇宙最强编辑器。\n\n","source":"_posts/mobile_skill_experience/flutter/set-up-environment.md","raw":"---\ntitle: 搭建flutter开发环境\ndate: 2020-01-02 06:27:11\ncategories:\n- 移动开发技巧/经验\n- flutter\ntags:\n- flutter\n---\n\n# 介绍\n\nflutter 是谷歌的移动UI框架, 可以快速在 IOS 和 Android 上构建高质量的原生用户界面。这里是它的[中文网站](https://flutterchina.club)和[api](https://api.flutter.dev)。\n\n# 搭建环境\n\n这里[官网](https://flutterchina.club/setup-windows)介绍的非常详细, 我就不多赘述了, 这里就说一下几个注意的地方:\n\n<!--more-->\n\n* 使用flutter doctor\n\n在命令行使用 `flutter doctor` 来检查是否需要安装其他依赖项来完成安装。\n\n* 将 flutter 的安装目录放到环境变量中\n\n新建一个 `FLUTTER_HOME` 环境变量, 赋值为安装目录, 接着将 `%FLUTTER_HOME%` 添加到 path 环境变量中。\n\n* 编译器的配置\n\n我体验了三种编译器, 分别是 intellij idea, android studio 和 vs code, 体验最好的是 vs code, 果然是宇宙最强编辑器。\n\n","slug":"mobile_skill_experience/flutter/set-up-environment","published":1,"updated":"2022-10-07T12:31:14.605Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejmw002g3vsb4k12ce0s","content":"<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>flutter 是谷歌的移动UI框架, 可以快速在 IOS 和 Android 上构建高质量的原生用户界面。这里是它的<a href=\"https://flutterchina.club/\">中文网站</a>和<a href=\"https://api.flutter.dev/\">api</a>。</p>\n<h1 id=\"搭建环境\"><a href=\"#搭建环境\" class=\"headerlink\" title=\"搭建环境\"></a>搭建环境</h1><p>这里<a href=\"https://flutterchina.club/setup-windows\">官网</a>介绍的非常详细, 我就不多赘述了, 这里就说一下几个注意的地方:</p>\n<span id=\"more\"></span>\n\n<ul>\n<li>使用flutter doctor</li>\n</ul>\n<p>在命令行使用 <code>flutter doctor</code> 来检查是否需要安装其他依赖项来完成安装。</p>\n<ul>\n<li>将 flutter 的安装目录放到环境变量中</li>\n</ul>\n<p>新建一个 <code>FLUTTER_HOME</code> 环境变量, 赋值为安装目录, 接着将 <code>%FLUTTER_HOME%</code> 添加到 path 环境变量中。</p>\n<ul>\n<li>编译器的配置</li>\n</ul>\n<p>我体验了三种编译器, 分别是 intellij idea, android studio 和 vs code, 体验最好的是 vs code, 果然是宇宙最强编辑器。</p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>flutter 是谷歌的移动UI框架, 可以快速在 IOS 和 Android 上构建高质量的原生用户界面。这里是它的<a href=\"https://flutterchina.club/\">中文网站</a>和<a href=\"https://api.flutter.dev/\">api</a>。</p>\n<h1 id=\"搭建环境\"><a href=\"#搭建环境\" class=\"headerlink\" title=\"搭建环境\"></a>搭建环境</h1><p>这里<a href=\"https://flutterchina.club/setup-windows\">官网</a>介绍的非常详细, 我就不多赘述了, 这里就说一下几个注意的地方:</p>","more":"<ul>\n<li>使用flutter doctor</li>\n</ul>\n<p>在命令行使用 <code>flutter doctor</code> 来检查是否需要安装其他依赖项来完成安装。</p>\n<ul>\n<li>将 flutter 的安装目录放到环境变量中</li>\n</ul>\n<p>新建一个 <code>FLUTTER_HOME</code> 环境变量, 赋值为安装目录, 接着将 <code>%FLUTTER_HOME%</code> 添加到 path 环境变量中。</p>\n<ul>\n<li>编译器的配置</li>\n</ul>\n<p>我体验了三种编译器, 分别是 intellij idea, android studio 和 vs code, 体验最好的是 vs code, 果然是宇宙最强编辑器。</p>"},{"title":"UltraCompare 文件对比软件暴力破解","date":"2019-07-17T05:26:50.000Z","_content":"\n# Ultra 系列软件暴力破解\n\n转载自[UltraEdit 注册机使用激活方法 更新：暴力破解](https://blog.csdn.net/CoderAldrich/article/details/79725475)\n\n<!--more-->\n\n* 下载[x64dbg](https://x64dbg.com/)\n\n* 使用x64dbg打开ue.exe\n![打开ue](/images/heck/1.png)\n\n* 注意, 这里会有断点, 所以需要继续运行\n![ProtectionPlusDLL.dll](/images/heck/2.png)\n![ProtectionPlusDLL.dll](/images/heck/3.png)\n\n* 切换到符号视图\n\n![ProtectionPlusDLL.dll](/images/heck/4.png)\n\n* 找到ProtectionPlusDLL.dll\n\n![ProtectionPlusDLL.dll](/images/heck/5.png)\n\n* 找到图中的几个函数\n\n![ProtectionPlusDLL.dll](/images/heck/6.png)\n\n* 点击进去之后, 修改第一行代码为ret\n\n![ProtectionPlusDLL.dll](/images/heck/7.png)\n\n* 保存并打补丁\n\n![ProtectionPlusDLL.dll](/images/heck/8.png)\n![ProtectionPlusDLL.dll](/images/heck/9.png)\n\n最后将该文件替换原文件即可。\n","source":"_posts/other_skill_experience/heck/UltraCompare-Brute-force.md","raw":"---\ntitle: UltraCompare 文件对比软件暴力破解\ndate: 2019-07-17 13:26:50\ncategories:\n- 其他无法归类的技巧/经验\n- 破解\ntags:\n- 破解\n---\n\n# Ultra 系列软件暴力破解\n\n转载自[UltraEdit 注册机使用激活方法 更新：暴力破解](https://blog.csdn.net/CoderAldrich/article/details/79725475)\n\n<!--more-->\n\n* 下载[x64dbg](https://x64dbg.com/)\n\n* 使用x64dbg打开ue.exe\n![打开ue](/images/heck/1.png)\n\n* 注意, 这里会有断点, 所以需要继续运行\n![ProtectionPlusDLL.dll](/images/heck/2.png)\n![ProtectionPlusDLL.dll](/images/heck/3.png)\n\n* 切换到符号视图\n\n![ProtectionPlusDLL.dll](/images/heck/4.png)\n\n* 找到ProtectionPlusDLL.dll\n\n![ProtectionPlusDLL.dll](/images/heck/5.png)\n\n* 找到图中的几个函数\n\n![ProtectionPlusDLL.dll](/images/heck/6.png)\n\n* 点击进去之后, 修改第一行代码为ret\n\n![ProtectionPlusDLL.dll](/images/heck/7.png)\n\n* 保存并打补丁\n\n![ProtectionPlusDLL.dll](/images/heck/8.png)\n![ProtectionPlusDLL.dll](/images/heck/9.png)\n\n最后将该文件替换原文件即可。\n","slug":"other_skill_experience/heck/UltraCompare-Brute-force","published":1,"updated":"2022-10-02T16:37:58.491Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejn0002i3vsbawa2ag6w","content":"<h1 id=\"Ultra-系列软件暴力破解\"><a href=\"#Ultra-系列软件暴力破解\" class=\"headerlink\" title=\"Ultra 系列软件暴力破解\"></a>Ultra 系列软件暴力破解</h1><p>转载自<a href=\"https://blog.csdn.net/CoderAldrich/article/details/79725475\">UltraEdit 注册机使用激活方法 更新：暴力破解</a></p>\n<span id=\"more\"></span>\n\n<ul>\n<li><p>下载<a href=\"https://x64dbg.com/\">x64dbg</a></p>\n</li>\n<li><p>使用x64dbg打开ue.exe<br><img src=\"/images/heck/1.png\" alt=\"打开ue\"></p>\n</li>\n<li><p>注意, 这里会有断点, 所以需要继续运行<br><img src=\"/images/heck/2.png\" alt=\"ProtectionPlusDLL.dll\"><br><img src=\"/images/heck/3.png\" alt=\"ProtectionPlusDLL.dll\"></p>\n</li>\n<li><p>切换到符号视图</p>\n</li>\n</ul>\n<p><img src=\"/images/heck/4.png\" alt=\"ProtectionPlusDLL.dll\"></p>\n<ul>\n<li>找到ProtectionPlusDLL.dll</li>\n</ul>\n<p><img src=\"/images/heck/5.png\" alt=\"ProtectionPlusDLL.dll\"></p>\n<ul>\n<li>找到图中的几个函数</li>\n</ul>\n<p><img src=\"/images/heck/6.png\" alt=\"ProtectionPlusDLL.dll\"></p>\n<ul>\n<li>点击进去之后, 修改第一行代码为ret</li>\n</ul>\n<p><img src=\"/images/heck/7.png\" alt=\"ProtectionPlusDLL.dll\"></p>\n<ul>\n<li>保存并打补丁</li>\n</ul>\n<p><img src=\"/images/heck/8.png\" alt=\"ProtectionPlusDLL.dll\"><br><img src=\"/images/heck/9.png\" alt=\"ProtectionPlusDLL.dll\"></p>\n<p>最后将该文件替换原文件即可。</p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"Ultra-系列软件暴力破解\"><a href=\"#Ultra-系列软件暴力破解\" class=\"headerlink\" title=\"Ultra 系列软件暴力破解\"></a>Ultra 系列软件暴力破解</h1><p>转载自<a href=\"https://blog.csdn.net/CoderAldrich/article/details/79725475\">UltraEdit 注册机使用激活方法 更新：暴力破解</a></p>","more":"<ul>\n<li><p>下载<a href=\"https://x64dbg.com/\">x64dbg</a></p>\n</li>\n<li><p>使用x64dbg打开ue.exe<br><img src=\"/images/heck/1.png\" alt=\"打开ue\"></p>\n</li>\n<li><p>注意, 这里会有断点, 所以需要继续运行<br><img src=\"/images/heck/2.png\" alt=\"ProtectionPlusDLL.dll\"><br><img src=\"/images/heck/3.png\" alt=\"ProtectionPlusDLL.dll\"></p>\n</li>\n<li><p>切换到符号视图</p>\n</li>\n</ul>\n<p><img src=\"/images/heck/4.png\" alt=\"ProtectionPlusDLL.dll\"></p>\n<ul>\n<li>找到ProtectionPlusDLL.dll</li>\n</ul>\n<p><img src=\"/images/heck/5.png\" alt=\"ProtectionPlusDLL.dll\"></p>\n<ul>\n<li>找到图中的几个函数</li>\n</ul>\n<p><img src=\"/images/heck/6.png\" alt=\"ProtectionPlusDLL.dll\"></p>\n<ul>\n<li>点击进去之后, 修改第一行代码为ret</li>\n</ul>\n<p><img src=\"/images/heck/7.png\" alt=\"ProtectionPlusDLL.dll\"></p>\n<ul>\n<li>保存并打补丁</li>\n</ul>\n<p><img src=\"/images/heck/8.png\" alt=\"ProtectionPlusDLL.dll\"><br><img src=\"/images/heck/9.png\" alt=\"ProtectionPlusDLL.dll\"></p>\n<p>最后将该文件替换原文件即可。</p>"},{"title":"使用python获取网页内容并转换pdf","date":"2020-05-30T23:55:53.000Z","_content":"\n# 目的\n\n最近看到有一本书以网页的形式放到了一个网站上, 想把它扒下来并转换成pdf, 想了想python好像特别适合做这种事情, 试了一下还真的可以。用到了两个第三方模块: beautiful soup 和 reportlab。\n\n# 过程\n\n首先我看了一下结构, 章节目录是一个网页, 每个章节都是一个链接, 点进去是对应的章节内容, 那么首要任务就是将目录扒下来。\n\n## 目录\n\n首先打开f12, 看到了这个网页的结构, 每一个章节都是一个 `<span>` 标签, 并且有对应的 class 名称:\n\n<!--more-->\n\n![f12](/images/python/use-python-to-get-webpage-to-pdf/pythonHtmlToPdf1.png)\n\n可以看到章名称的class是chapterToc, 小节名称的class是likesectionToc, 搞明白页面结构之后就可以开始动笔了。\n\n先写一个方法, 用来获取链接中的内容的soup对象:\n\n```py\nimport re\nfrom bs4 import BeautifulSoup, NavigableString, Tag, Comment\nimport urllib.request\n\n# 获取全部的html\ndef getAllHtml(url):\n  response1 = urllib.request.urlopen(url)\n  html_doc = response1.read()\n  #创建一个BeautifulSoup解析对象\n  soup = BeautifulSoup(html_doc, \"html5lib\", from_encoding=\"iso-8859-1\")\n  for element in soup(text=lambda text: isinstance(text, Comment)):\n    element.extract()\n  for s in soup(['hr']):\n    s.extract()\n\n  return soup\n```\n\n接下来是获取我们需要的内容了:\n\n```py\nsoup = getAllHtml('http://bob.cs.sonoma.edu/IntroCompOrg-x64/book.html')\nallChapter = soup.find_all('span', class_='chapterToc')\nallAppendixToc = soup.find_all('span', class_='appendixToc')\nallSectionToc = soup.find_all('span', class_='sectionToc')\n```\n\n这里我们将章节和小节标题都获取到了, 接着是将这些内容保存至pdf文件中, 使用的是 reportlab, 在文件开头处加入需要引入的工具:\n\n```py\nfrom reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, PageBreak, Image, Table, TableStyle\nfrom reportlab.lib.colors import white, black, blue\nfrom reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle\nfrom reportlab.rl_config import defaultPageSize\nfrom reportlab.lib.units import inch\nfrom reportlab.lib.enums import TA_RIGHT, TA_CENTER, TA_LEFT\nfrom reportlab.pdfbase import pdfmetrics\nfrom reportlab.pdfbase.ttfonts import TTFont\n```\n\n接着上一段代码创建pdf:\n\n```py\n# 注册需要使用的字体\npdfmetrics.registerFont(TTFont('new-roman', 'C:\\\\Windows\\\\Fonts\\\\times.ttf'))\npdfmetrics.registerFont(TTFont('cambria', 'C:\\\\Windows\\\\Fonts\\\\cambria.ttc'))\n\n# 自定义样式\nchapterStyle = ParagraphStyle(name='Normal',\n                              fontName='new-roman',\n                              textColor=blue,\n                              fontSize=13,\n                              alignment=TA_LEFT,\n                              leading=13,\n                              spaceAfter=8)\n\nsectionStyle = ParagraphStyle(name='Normal',\n                              fontName='new-roman',\n                              textColor=blue,\n                              firstLineIndent=32,\n                              fontSize=10,\n                              spaceAfter=3)\n\nfileName = \"IntroCompOrg.pdf\"\n\n# 创建pdf文档对象\ndoc = SimpleDocTemplate(fileName)\nStory = [Spacer(3, 2 * inch)]\n\n# 将刚刚获取到的内容放入pdf对象中\nfor chapter in allChapter:\n  p = Paragraph(chapter.get_text() + \" \" + chapter.a.get_text(), chapterStyle)\n  Story.append(p)\n  for section in allSectionToc:\n    if (section.get_text().split(\".\")[0] == chapter.get_text().split()[0]):\n      p = Paragraph(section.get_text(), sectionStyle)\n      Story.append(p)\n\nfor chapter in allAppendixToc:\n  p = Paragraph(chapter.get_text() + \" \" + chapter.a.get_text(), chapterStyle)\n  Story.append(p)\n  for section in allSectionToc:\n    if (section.get_text().split(\".\")[0] == chapter.get_text().split()[0]):\n      p = Paragraph(section.get_text(), sectionStyle)\n      Story.append(p)\n```\n\n由于reportlab的创建pdf的构造器将创建第一页和第其他页区别开, 所以我们需要编写构造第一页和其他页的方法:\n\n```py\n# 在文件开头处加入pdf的页面大小\nPAGE_HEIGHT=defaultPageSize[1]\nPAGE_WIDTH=defaultPageSize[0]\n\n# 其他代码...\n\n# 第一页, 包含标题\ndef myFirstPage(canvas, doc):\n  canvas.saveState()\n  # 标题的样式\n  canvas.setFont(\"Helvetica-Bold\", 20)\n  Title = 'Introduction to Computer Organization - Robert G. Plantz'\n  canvas.drawCentredString(PAGE_WIDTH/2.0, PAGE_HEIGHT-108, Title)\n  canvas.setFont('Times-Roman',9)\n  canvas.drawString(inch, 0.75 * inch, \"First Page\")\n  canvas.restoreState()\n\n# 剩下的其他页\ndef myLaterPages(canvas, doc):\n  canvas.saveState()\n  canvas.setFont('Times-Roman',9)\n  canvas.drawString(inch, 0.75 * inch, \"Page %d\" % (doc.page))\n  canvas.restoreState()\n```\n\n这两个方法相差的仅仅是第一页需要绘制标题, 而其它页不需要。最后构造pdf文件:\n\n```py\ndoc.build(Story, onFirstPage=myFirstPage, onLaterPages=myLaterPages)\n```\n","source":"_posts/script_skill_experience/python/use-python-to-get-webpage-to-pdf.md","raw":"---\ntitle: 使用python获取网页内容并转换pdf\ndate: 2020-05-31 07:55:53\ncategories:\n- 脚本语言技巧/经验\n- python\ntags:\n- beautiful soup\n- reportlab\n- python\n---\n\n# 目的\n\n最近看到有一本书以网页的形式放到了一个网站上, 想把它扒下来并转换成pdf, 想了想python好像特别适合做这种事情, 试了一下还真的可以。用到了两个第三方模块: beautiful soup 和 reportlab。\n\n# 过程\n\n首先我看了一下结构, 章节目录是一个网页, 每个章节都是一个链接, 点进去是对应的章节内容, 那么首要任务就是将目录扒下来。\n\n## 目录\n\n首先打开f12, 看到了这个网页的结构, 每一个章节都是一个 `<span>` 标签, 并且有对应的 class 名称:\n\n<!--more-->\n\n![f12](/images/python/use-python-to-get-webpage-to-pdf/pythonHtmlToPdf1.png)\n\n可以看到章名称的class是chapterToc, 小节名称的class是likesectionToc, 搞明白页面结构之后就可以开始动笔了。\n\n先写一个方法, 用来获取链接中的内容的soup对象:\n\n```py\nimport re\nfrom bs4 import BeautifulSoup, NavigableString, Tag, Comment\nimport urllib.request\n\n# 获取全部的html\ndef getAllHtml(url):\n  response1 = urllib.request.urlopen(url)\n  html_doc = response1.read()\n  #创建一个BeautifulSoup解析对象\n  soup = BeautifulSoup(html_doc, \"html5lib\", from_encoding=\"iso-8859-1\")\n  for element in soup(text=lambda text: isinstance(text, Comment)):\n    element.extract()\n  for s in soup(['hr']):\n    s.extract()\n\n  return soup\n```\n\n接下来是获取我们需要的内容了:\n\n```py\nsoup = getAllHtml('http://bob.cs.sonoma.edu/IntroCompOrg-x64/book.html')\nallChapter = soup.find_all('span', class_='chapterToc')\nallAppendixToc = soup.find_all('span', class_='appendixToc')\nallSectionToc = soup.find_all('span', class_='sectionToc')\n```\n\n这里我们将章节和小节标题都获取到了, 接着是将这些内容保存至pdf文件中, 使用的是 reportlab, 在文件开头处加入需要引入的工具:\n\n```py\nfrom reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, PageBreak, Image, Table, TableStyle\nfrom reportlab.lib.colors import white, black, blue\nfrom reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle\nfrom reportlab.rl_config import defaultPageSize\nfrom reportlab.lib.units import inch\nfrom reportlab.lib.enums import TA_RIGHT, TA_CENTER, TA_LEFT\nfrom reportlab.pdfbase import pdfmetrics\nfrom reportlab.pdfbase.ttfonts import TTFont\n```\n\n接着上一段代码创建pdf:\n\n```py\n# 注册需要使用的字体\npdfmetrics.registerFont(TTFont('new-roman', 'C:\\\\Windows\\\\Fonts\\\\times.ttf'))\npdfmetrics.registerFont(TTFont('cambria', 'C:\\\\Windows\\\\Fonts\\\\cambria.ttc'))\n\n# 自定义样式\nchapterStyle = ParagraphStyle(name='Normal',\n                              fontName='new-roman',\n                              textColor=blue,\n                              fontSize=13,\n                              alignment=TA_LEFT,\n                              leading=13,\n                              spaceAfter=8)\n\nsectionStyle = ParagraphStyle(name='Normal',\n                              fontName='new-roman',\n                              textColor=blue,\n                              firstLineIndent=32,\n                              fontSize=10,\n                              spaceAfter=3)\n\nfileName = \"IntroCompOrg.pdf\"\n\n# 创建pdf文档对象\ndoc = SimpleDocTemplate(fileName)\nStory = [Spacer(3, 2 * inch)]\n\n# 将刚刚获取到的内容放入pdf对象中\nfor chapter in allChapter:\n  p = Paragraph(chapter.get_text() + \" \" + chapter.a.get_text(), chapterStyle)\n  Story.append(p)\n  for section in allSectionToc:\n    if (section.get_text().split(\".\")[0] == chapter.get_text().split()[0]):\n      p = Paragraph(section.get_text(), sectionStyle)\n      Story.append(p)\n\nfor chapter in allAppendixToc:\n  p = Paragraph(chapter.get_text() + \" \" + chapter.a.get_text(), chapterStyle)\n  Story.append(p)\n  for section in allSectionToc:\n    if (section.get_text().split(\".\")[0] == chapter.get_text().split()[0]):\n      p = Paragraph(section.get_text(), sectionStyle)\n      Story.append(p)\n```\n\n由于reportlab的创建pdf的构造器将创建第一页和第其他页区别开, 所以我们需要编写构造第一页和其他页的方法:\n\n```py\n# 在文件开头处加入pdf的页面大小\nPAGE_HEIGHT=defaultPageSize[1]\nPAGE_WIDTH=defaultPageSize[0]\n\n# 其他代码...\n\n# 第一页, 包含标题\ndef myFirstPage(canvas, doc):\n  canvas.saveState()\n  # 标题的样式\n  canvas.setFont(\"Helvetica-Bold\", 20)\n  Title = 'Introduction to Computer Organization - Robert G. Plantz'\n  canvas.drawCentredString(PAGE_WIDTH/2.0, PAGE_HEIGHT-108, Title)\n  canvas.setFont('Times-Roman',9)\n  canvas.drawString(inch, 0.75 * inch, \"First Page\")\n  canvas.restoreState()\n\n# 剩下的其他页\ndef myLaterPages(canvas, doc):\n  canvas.saveState()\n  canvas.setFont('Times-Roman',9)\n  canvas.drawString(inch, 0.75 * inch, \"Page %d\" % (doc.page))\n  canvas.restoreState()\n```\n\n这两个方法相差的仅仅是第一页需要绘制标题, 而其它页不需要。最后构造pdf文件:\n\n```py\ndoc.build(Story, onFirstPage=myFirstPage, onLaterPages=myLaterPages)\n```\n","slug":"script_skill_experience/python/use-python-to-get-webpage-to-pdf","published":1,"updated":"2022-10-07T12:50:48.617Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejn4002l3vsb5ddt572r","content":"<h1 id=\"目的\"><a href=\"#目的\" class=\"headerlink\" title=\"目的\"></a>目的</h1><p>最近看到有一本书以网页的形式放到了一个网站上, 想把它扒下来并转换成pdf, 想了想python好像特别适合做这种事情, 试了一下还真的可以。用到了两个第三方模块: beautiful soup 和 reportlab。</p>\n<h1 id=\"过程\"><a href=\"#过程\" class=\"headerlink\" title=\"过程\"></a>过程</h1><p>首先我看了一下结构, 章节目录是一个网页, 每个章节都是一个链接, 点进去是对应的章节内容, 那么首要任务就是将目录扒下来。</p>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><p>首先打开f12, 看到了这个网页的结构, 每一个章节都是一个 <code>&lt;span&gt;</code> 标签, 并且有对应的 class 名称:</p>\n<span id=\"more\"></span>\n\n<p><img src=\"/images/python/use-python-to-get-webpage-to-pdf/pythonHtmlToPdf1.png\" alt=\"f12\"></p>\n<p>可以看到章名称的class是chapterToc, 小节名称的class是likesectionToc, 搞明白页面结构之后就可以开始动笔了。</p>\n<p>先写一个方法, 用来获取链接中的内容的soup对象:</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup, NavigableString, Tag, Comment</span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取全部的html</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getAllHtml</span>(<span class=\"params\">url</span>):</span></span><br><span class=\"line\">  response1 = urllib.request.urlopen(url)</span><br><span class=\"line\">  html_doc = response1.read()</span><br><span class=\"line\">  <span class=\"comment\">#创建一个BeautifulSoup解析对象</span></span><br><span class=\"line\">  soup = BeautifulSoup(html_doc, <span class=\"string\">&quot;html5lib&quot;</span>, from_encoding=<span class=\"string\">&quot;iso-8859-1&quot;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> element <span class=\"keyword\">in</span> soup(text=<span class=\"keyword\">lambda</span> text: <span class=\"built_in\">isinstance</span>(text, Comment)):</span><br><span class=\"line\">    element.extract()</span><br><span class=\"line\">  <span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> soup([<span class=\"string\">&#x27;hr&#x27;</span>]):</span><br><span class=\"line\">    s.extract()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> soup</span><br></pre></td></tr></table></figure>\n\n<p>接下来是获取我们需要的内容了:</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">soup = getAllHtml(<span class=\"string\">&#x27;http://bob.cs.sonoma.edu/IntroCompOrg-x64/book.html&#x27;</span>)</span><br><span class=\"line\">allChapter = soup.find_all(<span class=\"string\">&#x27;span&#x27;</span>, class_=<span class=\"string\">&#x27;chapterToc&#x27;</span>)</span><br><span class=\"line\">allAppendixToc = soup.find_all(<span class=\"string\">&#x27;span&#x27;</span>, class_=<span class=\"string\">&#x27;appendixToc&#x27;</span>)</span><br><span class=\"line\">allSectionToc = soup.find_all(<span class=\"string\">&#x27;span&#x27;</span>, class_=<span class=\"string\">&#x27;sectionToc&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>这里我们将章节和小节标题都获取到了, 接着是将这些内容保存至pdf文件中, 使用的是 reportlab, 在文件开头处加入需要引入的工具:</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> reportlab.platypus <span class=\"keyword\">import</span> SimpleDocTemplate, Paragraph, Spacer, PageBreak, Image, Table, TableStyle</span><br><span class=\"line\"><span class=\"keyword\">from</span> reportlab.lib.colors <span class=\"keyword\">import</span> white, black, blue</span><br><span class=\"line\"><span class=\"keyword\">from</span> reportlab.lib.styles <span class=\"keyword\">import</span> getSampleStyleSheet, ParagraphStyle</span><br><span class=\"line\"><span class=\"keyword\">from</span> reportlab.rl_config <span class=\"keyword\">import</span> defaultPageSize</span><br><span class=\"line\"><span class=\"keyword\">from</span> reportlab.lib.units <span class=\"keyword\">import</span> inch</span><br><span class=\"line\"><span class=\"keyword\">from</span> reportlab.lib.enums <span class=\"keyword\">import</span> TA_RIGHT, TA_CENTER, TA_LEFT</span><br><span class=\"line\"><span class=\"keyword\">from</span> reportlab.pdfbase <span class=\"keyword\">import</span> pdfmetrics</span><br><span class=\"line\"><span class=\"keyword\">from</span> reportlab.pdfbase.ttfonts <span class=\"keyword\">import</span> TTFont</span><br></pre></td></tr></table></figure>\n\n<p>接着上一段代码创建pdf:</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 注册需要使用的字体</span></span><br><span class=\"line\">pdfmetrics.registerFont(TTFont(<span class=\"string\">&#x27;new-roman&#x27;</span>, <span class=\"string\">&#x27;C:\\\\Windows\\\\Fonts\\\\times.ttf&#x27;</span>))</span><br><span class=\"line\">pdfmetrics.registerFont(TTFont(<span class=\"string\">&#x27;cambria&#x27;</span>, <span class=\"string\">&#x27;C:\\\\Windows\\\\Fonts\\\\cambria.ttc&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 自定义样式</span></span><br><span class=\"line\">chapterStyle = ParagraphStyle(name=<span class=\"string\">&#x27;Normal&#x27;</span>,</span><br><span class=\"line\">                              fontName=<span class=\"string\">&#x27;new-roman&#x27;</span>,</span><br><span class=\"line\">                              textColor=blue,</span><br><span class=\"line\">                              fontSize=<span class=\"number\">13</span>,</span><br><span class=\"line\">                              alignment=TA_LEFT,</span><br><span class=\"line\">                              leading=<span class=\"number\">13</span>,</span><br><span class=\"line\">                              spaceAfter=<span class=\"number\">8</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">sectionStyle = ParagraphStyle(name=<span class=\"string\">&#x27;Normal&#x27;</span>,</span><br><span class=\"line\">                              fontName=<span class=\"string\">&#x27;new-roman&#x27;</span>,</span><br><span class=\"line\">                              textColor=blue,</span><br><span class=\"line\">                              firstLineIndent=<span class=\"number\">32</span>,</span><br><span class=\"line\">                              fontSize=<span class=\"number\">10</span>,</span><br><span class=\"line\">                              spaceAfter=<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fileName = <span class=\"string\">&quot;IntroCompOrg.pdf&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建pdf文档对象</span></span><br><span class=\"line\">doc = SimpleDocTemplate(fileName)</span><br><span class=\"line\">Story = [Spacer(<span class=\"number\">3</span>, <span class=\"number\">2</span> * inch)]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将刚刚获取到的内容放入pdf对象中</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> chapter <span class=\"keyword\">in</span> allChapter:</span><br><span class=\"line\">  p = Paragraph(chapter.get_text() + <span class=\"string\">&quot; &quot;</span> + chapter.a.get_text(), chapterStyle)</span><br><span class=\"line\">  Story.append(p)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> section <span class=\"keyword\">in</span> allSectionToc:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (section.get_text().split(<span class=\"string\">&quot;.&quot;</span>)[<span class=\"number\">0</span>] == chapter.get_text().split()[<span class=\"number\">0</span>]):</span><br><span class=\"line\">      p = Paragraph(section.get_text(), sectionStyle)</span><br><span class=\"line\">      Story.append(p)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> chapter <span class=\"keyword\">in</span> allAppendixToc:</span><br><span class=\"line\">  p = Paragraph(chapter.get_text() + <span class=\"string\">&quot; &quot;</span> + chapter.a.get_text(), chapterStyle)</span><br><span class=\"line\">  Story.append(p)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> section <span class=\"keyword\">in</span> allSectionToc:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (section.get_text().split(<span class=\"string\">&quot;.&quot;</span>)[<span class=\"number\">0</span>] == chapter.get_text().split()[<span class=\"number\">0</span>]):</span><br><span class=\"line\">      p = Paragraph(section.get_text(), sectionStyle)</span><br><span class=\"line\">      Story.append(p)</span><br></pre></td></tr></table></figure>\n\n<p>由于reportlab的创建pdf的构造器将创建第一页和第其他页区别开, 所以我们需要编写构造第一页和其他页的方法:</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在文件开头处加入pdf的页面大小</span></span><br><span class=\"line\">PAGE_HEIGHT=defaultPageSize[<span class=\"number\">1</span>]</span><br><span class=\"line\">PAGE_WIDTH=defaultPageSize[<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 其他代码...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 第一页, 包含标题</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">myFirstPage</span>(<span class=\"params\">canvas, doc</span>):</span></span><br><span class=\"line\">  canvas.saveState()</span><br><span class=\"line\">  <span class=\"comment\"># 标题的样式</span></span><br><span class=\"line\">  canvas.setFont(<span class=\"string\">&quot;Helvetica-Bold&quot;</span>, <span class=\"number\">20</span>)</span><br><span class=\"line\">  Title = <span class=\"string\">&#x27;Introduction to Computer Organization - Robert G. Plantz&#x27;</span></span><br><span class=\"line\">  canvas.drawCentredString(PAGE_WIDTH/<span class=\"number\">2.0</span>, PAGE_HEIGHT-<span class=\"number\">108</span>, Title)</span><br><span class=\"line\">  canvas.setFont(<span class=\"string\">&#x27;Times-Roman&#x27;</span>,<span class=\"number\">9</span>)</span><br><span class=\"line\">  canvas.drawString(inch, <span class=\"number\">0.75</span> * inch, <span class=\"string\">&quot;First Page&quot;</span>)</span><br><span class=\"line\">  canvas.restoreState()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 剩下的其他页</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">myLaterPages</span>(<span class=\"params\">canvas, doc</span>):</span></span><br><span class=\"line\">  canvas.saveState()</span><br><span class=\"line\">  canvas.setFont(<span class=\"string\">&#x27;Times-Roman&#x27;</span>,<span class=\"number\">9</span>)</span><br><span class=\"line\">  canvas.drawString(inch, <span class=\"number\">0.75</span> * inch, <span class=\"string\">&quot;Page %d&quot;</span> % (doc.page))</span><br><span class=\"line\">  canvas.restoreState()</span><br></pre></td></tr></table></figure>\n\n<p>这两个方法相差的仅仅是第一页需要绘制标题, 而其它页不需要。最后构造pdf文件:</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">doc.build(Story, onFirstPage=myFirstPage, onLaterPages=myLaterPages)</span><br></pre></td></tr></table></figure>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"目的\"><a href=\"#目的\" class=\"headerlink\" title=\"目的\"></a>目的</h1><p>最近看到有一本书以网页的形式放到了一个网站上, 想把它扒下来并转换成pdf, 想了想python好像特别适合做这种事情, 试了一下还真的可以。用到了两个第三方模块: beautiful soup 和 reportlab。</p>\n<h1 id=\"过程\"><a href=\"#过程\" class=\"headerlink\" title=\"过程\"></a>过程</h1><p>首先我看了一下结构, 章节目录是一个网页, 每个章节都是一个链接, 点进去是对应的章节内容, 那么首要任务就是将目录扒下来。</p>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><p>首先打开f12, 看到了这个网页的结构, 每一个章节都是一个 <code>&lt;span&gt;</code> 标签, 并且有对应的 class 名称:</p>","more":"<p><img src=\"/images/python/use-python-to-get-webpage-to-pdf/pythonHtmlToPdf1.png\" alt=\"f12\"></p>\n<p>可以看到章名称的class是chapterToc, 小节名称的class是likesectionToc, 搞明白页面结构之后就可以开始动笔了。</p>\n<p>先写一个方法, 用来获取链接中的内容的soup对象:</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup, NavigableString, Tag, Comment</span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取全部的html</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getAllHtml</span>(<span class=\"params\">url</span>):</span></span><br><span class=\"line\">  response1 = urllib.request.urlopen(url)</span><br><span class=\"line\">  html_doc = response1.read()</span><br><span class=\"line\">  <span class=\"comment\">#创建一个BeautifulSoup解析对象</span></span><br><span class=\"line\">  soup = BeautifulSoup(html_doc, <span class=\"string\">&quot;html5lib&quot;</span>, from_encoding=<span class=\"string\">&quot;iso-8859-1&quot;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> element <span class=\"keyword\">in</span> soup(text=<span class=\"keyword\">lambda</span> text: <span class=\"built_in\">isinstance</span>(text, Comment)):</span><br><span class=\"line\">    element.extract()</span><br><span class=\"line\">  <span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> soup([<span class=\"string\">&#x27;hr&#x27;</span>]):</span><br><span class=\"line\">    s.extract()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> soup</span><br></pre></td></tr></table></figure>\n\n<p>接下来是获取我们需要的内容了:</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">soup = getAllHtml(<span class=\"string\">&#x27;http://bob.cs.sonoma.edu/IntroCompOrg-x64/book.html&#x27;</span>)</span><br><span class=\"line\">allChapter = soup.find_all(<span class=\"string\">&#x27;span&#x27;</span>, class_=<span class=\"string\">&#x27;chapterToc&#x27;</span>)</span><br><span class=\"line\">allAppendixToc = soup.find_all(<span class=\"string\">&#x27;span&#x27;</span>, class_=<span class=\"string\">&#x27;appendixToc&#x27;</span>)</span><br><span class=\"line\">allSectionToc = soup.find_all(<span class=\"string\">&#x27;span&#x27;</span>, class_=<span class=\"string\">&#x27;sectionToc&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>这里我们将章节和小节标题都获取到了, 接着是将这些内容保存至pdf文件中, 使用的是 reportlab, 在文件开头处加入需要引入的工具:</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> reportlab.platypus <span class=\"keyword\">import</span> SimpleDocTemplate, Paragraph, Spacer, PageBreak, Image, Table, TableStyle</span><br><span class=\"line\"><span class=\"keyword\">from</span> reportlab.lib.colors <span class=\"keyword\">import</span> white, black, blue</span><br><span class=\"line\"><span class=\"keyword\">from</span> reportlab.lib.styles <span class=\"keyword\">import</span> getSampleStyleSheet, ParagraphStyle</span><br><span class=\"line\"><span class=\"keyword\">from</span> reportlab.rl_config <span class=\"keyword\">import</span> defaultPageSize</span><br><span class=\"line\"><span class=\"keyword\">from</span> reportlab.lib.units <span class=\"keyword\">import</span> inch</span><br><span class=\"line\"><span class=\"keyword\">from</span> reportlab.lib.enums <span class=\"keyword\">import</span> TA_RIGHT, TA_CENTER, TA_LEFT</span><br><span class=\"line\"><span class=\"keyword\">from</span> reportlab.pdfbase <span class=\"keyword\">import</span> pdfmetrics</span><br><span class=\"line\"><span class=\"keyword\">from</span> reportlab.pdfbase.ttfonts <span class=\"keyword\">import</span> TTFont</span><br></pre></td></tr></table></figure>\n\n<p>接着上一段代码创建pdf:</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 注册需要使用的字体</span></span><br><span class=\"line\">pdfmetrics.registerFont(TTFont(<span class=\"string\">&#x27;new-roman&#x27;</span>, <span class=\"string\">&#x27;C:\\\\Windows\\\\Fonts\\\\times.ttf&#x27;</span>))</span><br><span class=\"line\">pdfmetrics.registerFont(TTFont(<span class=\"string\">&#x27;cambria&#x27;</span>, <span class=\"string\">&#x27;C:\\\\Windows\\\\Fonts\\\\cambria.ttc&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 自定义样式</span></span><br><span class=\"line\">chapterStyle = ParagraphStyle(name=<span class=\"string\">&#x27;Normal&#x27;</span>,</span><br><span class=\"line\">                              fontName=<span class=\"string\">&#x27;new-roman&#x27;</span>,</span><br><span class=\"line\">                              textColor=blue,</span><br><span class=\"line\">                              fontSize=<span class=\"number\">13</span>,</span><br><span class=\"line\">                              alignment=TA_LEFT,</span><br><span class=\"line\">                              leading=<span class=\"number\">13</span>,</span><br><span class=\"line\">                              spaceAfter=<span class=\"number\">8</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">sectionStyle = ParagraphStyle(name=<span class=\"string\">&#x27;Normal&#x27;</span>,</span><br><span class=\"line\">                              fontName=<span class=\"string\">&#x27;new-roman&#x27;</span>,</span><br><span class=\"line\">                              textColor=blue,</span><br><span class=\"line\">                              firstLineIndent=<span class=\"number\">32</span>,</span><br><span class=\"line\">                              fontSize=<span class=\"number\">10</span>,</span><br><span class=\"line\">                              spaceAfter=<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fileName = <span class=\"string\">&quot;IntroCompOrg.pdf&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建pdf文档对象</span></span><br><span class=\"line\">doc = SimpleDocTemplate(fileName)</span><br><span class=\"line\">Story = [Spacer(<span class=\"number\">3</span>, <span class=\"number\">2</span> * inch)]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将刚刚获取到的内容放入pdf对象中</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> chapter <span class=\"keyword\">in</span> allChapter:</span><br><span class=\"line\">  p = Paragraph(chapter.get_text() + <span class=\"string\">&quot; &quot;</span> + chapter.a.get_text(), chapterStyle)</span><br><span class=\"line\">  Story.append(p)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> section <span class=\"keyword\">in</span> allSectionToc:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (section.get_text().split(<span class=\"string\">&quot;.&quot;</span>)[<span class=\"number\">0</span>] == chapter.get_text().split()[<span class=\"number\">0</span>]):</span><br><span class=\"line\">      p = Paragraph(section.get_text(), sectionStyle)</span><br><span class=\"line\">      Story.append(p)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> chapter <span class=\"keyword\">in</span> allAppendixToc:</span><br><span class=\"line\">  p = Paragraph(chapter.get_text() + <span class=\"string\">&quot; &quot;</span> + chapter.a.get_text(), chapterStyle)</span><br><span class=\"line\">  Story.append(p)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> section <span class=\"keyword\">in</span> allSectionToc:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (section.get_text().split(<span class=\"string\">&quot;.&quot;</span>)[<span class=\"number\">0</span>] == chapter.get_text().split()[<span class=\"number\">0</span>]):</span><br><span class=\"line\">      p = Paragraph(section.get_text(), sectionStyle)</span><br><span class=\"line\">      Story.append(p)</span><br></pre></td></tr></table></figure>\n\n<p>由于reportlab的创建pdf的构造器将创建第一页和第其他页区别开, 所以我们需要编写构造第一页和其他页的方法:</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在文件开头处加入pdf的页面大小</span></span><br><span class=\"line\">PAGE_HEIGHT=defaultPageSize[<span class=\"number\">1</span>]</span><br><span class=\"line\">PAGE_WIDTH=defaultPageSize[<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 其他代码...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 第一页, 包含标题</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">myFirstPage</span>(<span class=\"params\">canvas, doc</span>):</span></span><br><span class=\"line\">  canvas.saveState()</span><br><span class=\"line\">  <span class=\"comment\"># 标题的样式</span></span><br><span class=\"line\">  canvas.setFont(<span class=\"string\">&quot;Helvetica-Bold&quot;</span>, <span class=\"number\">20</span>)</span><br><span class=\"line\">  Title = <span class=\"string\">&#x27;Introduction to Computer Organization - Robert G. Plantz&#x27;</span></span><br><span class=\"line\">  canvas.drawCentredString(PAGE_WIDTH/<span class=\"number\">2.0</span>, PAGE_HEIGHT-<span class=\"number\">108</span>, Title)</span><br><span class=\"line\">  canvas.setFont(<span class=\"string\">&#x27;Times-Roman&#x27;</span>,<span class=\"number\">9</span>)</span><br><span class=\"line\">  canvas.drawString(inch, <span class=\"number\">0.75</span> * inch, <span class=\"string\">&quot;First Page&quot;</span>)</span><br><span class=\"line\">  canvas.restoreState()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 剩下的其他页</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">myLaterPages</span>(<span class=\"params\">canvas, doc</span>):</span></span><br><span class=\"line\">  canvas.saveState()</span><br><span class=\"line\">  canvas.setFont(<span class=\"string\">&#x27;Times-Roman&#x27;</span>,<span class=\"number\">9</span>)</span><br><span class=\"line\">  canvas.drawString(inch, <span class=\"number\">0.75</span> * inch, <span class=\"string\">&quot;Page %d&quot;</span> % (doc.page))</span><br><span class=\"line\">  canvas.restoreState()</span><br></pre></td></tr></table></figure>\n\n<p>这两个方法相差的仅仅是第一页需要绘制标题, 而其它页不需要。最后构造pdf文件:</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">doc.build(Story, onFirstPage=myFirstPage, onLaterPages=myLaterPages)</span><br></pre></td></tr></table></figure>"},{"title":"在 python 中使用 bash","date":"2019-10-30T19:24:15.000Z","_content":"\n# 查看系统信息 \n\n```py\nimport subprocess\nuname = \"uname\"\nuname_args = \"-a\"\nsubprocess.call([uname, uname_args])\n```\n\noutput:\n\n> Linux raspberrypi 4.19.57-v7l+ #1244 SMP Thu Jul 4 18:48:07 BST 2019 armv7l GNU/Linux\n\n","source":"_posts/script_skill_experience/python/use-shell-in-python.md","raw":"---\ntitle: 在 python 中使用 bash\ndate: 2019-10-31 03:24:15\ncategories:\n- 脚本语言技巧/经验\n- python\ntags:\n- python\n---\n\n# 查看系统信息 \n\n```py\nimport subprocess\nuname = \"uname\"\nuname_args = \"-a\"\nsubprocess.call([uname, uname_args])\n```\n\noutput:\n\n> Linux raspberrypi 4.19.57-v7l+ #1244 SMP Thu Jul 4 18:48:07 BST 2019 armv7l GNU/Linux\n\n","slug":"script_skill_experience/python/use-shell-in-python","published":1,"updated":"2022-10-07T12:35:42.785Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejn7002n3vsb93yb6oy3","content":"<h1 id=\"查看系统信息\"><a href=\"#查看系统信息\" class=\"headerlink\" title=\"查看系统信息\"></a>查看系统信息</h1><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> subprocess</span><br><span class=\"line\">uname = <span class=\"string\">&quot;uname&quot;</span></span><br><span class=\"line\">uname_args = <span class=\"string\">&quot;-a&quot;</span></span><br><span class=\"line\">subprocess.call([uname, uname_args])</span><br></pre></td></tr></table></figure>\n\n<p>output:</p>\n<blockquote>\n<p>Linux raspberrypi 4.19.57-v7l+ #1244 SMP Thu Jul 4 18:48:07 BST 2019 armv7l GNU&#x2F;Linux</p>\n</blockquote>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"","more":"<h1 id=\"查看系统信息\"><a href=\"#查看系统信息\" class=\"headerlink\" title=\"查看系统信息\"></a>查看系统信息</h1><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> subprocess</span><br><span class=\"line\">uname = <span class=\"string\">&quot;uname&quot;</span></span><br><span class=\"line\">uname_args = <span class=\"string\">&quot;-a&quot;</span></span><br><span class=\"line\">subprocess.call([uname, uname_args])</span><br></pre></td></tr></table></figure>\n\n<p>output:</p>\n<blockquote>\n<p>Linux raspberrypi 4.19.57-v7l+ #1244 SMP Thu Jul 4 18:48:07 BST 2019 armv7l GNU&#x2F;Linux</p>\n</blockquote>\n"},{"title":"fastDFS和java","date":"2019-07-25T09:37:35.000Z","_content":"\n# 前言\n\n最近一直再用fastDFS, [上一篇](/java/fastdfs/nginx-fastdfs-config.html)讲了fastDFS如何配置, 那么这一篇我们来讲一讲如何使用Java来上传和下载文件。\n\n<!--more-->\n\n# 依赖配置\n\n首先将依赖配置好:\n\n```xml\n<dependency>\n    <groupId>net.oschina.zcx7878</groupId>\n    <artifactId>fastdfs-client-java</artifactId>\n    <version>1.27.0.0</version>\n</dependency>\n```\n\n还有配置文件:\n\n```xml\nconnect_timeout_in_seconds = 5\nnetwork_timeout_in_seconds = 30\n\ncharset = UTF-8\n\nhttp_anti_steal_token = true\nhttp_secret_key = FastDFS1234567890\nhttp_tracker_http_port = 19192\n\ntracker_server = 127.0.0.1:22192\n```\n\n# 工具类\n\n这里怎么写其实都好, 我就先列出我写的:\n\n```java\npublic class FastDfsUtil {\n    private TrackerClient trackerClient = null;\n    private TrackerServer trackerServer = null;\n    private StorageServer storageServer = null;\n    private StorageClient1 storageClient = null;\n\n    public FastDfsUtil(String conf) throws Exception {\n        if (conf.contains(\"classpath:\")) {\n            String path = URLDecoder.decode(getClass().getProtectionDomain().getCodeSource().getLocation().toString(), \"UTF-8\");\n            path=path.substring(6);\n            conf = conf.replace(\"classpath:\",URLDecoder.decode(path,\"UTF-8\"));\n        }\n        ClientGlobal.init(conf);\n        trackerClient = new TrackerClient();\n        trackerServer = trackerClient.getConnection();\n        storageServer = null;\n        storageClient = new StorageClient1(trackerServer, storageServer);\n    }\n\n    /**\n     * 上传文件\n     * @param fileContent 文件的字节数组\n     * @return null为失败\n     * @throws Exception\n     */\n    public String uploadFile(byte[] fileContent) throws Exception {\n        return uploadFile(fileContent, null, null);\n    }\n\n    /**\n     * 上传文件方法\n     * <p>Title: uploadFile</p>\n     * <p>Description: </p>\n     * @param fileContent 文件的内容，字节数组\n     * @param extName 文件扩展名\n     * @param metas 文件扩展信息\n     * @return\n     * @throws Exception\n     */\n    public String uploadFile(byte[] fileContent, String extName, NameValuePair[] metas) {\n        String result=null;\n        try {\n            result = storageClient.upload_file1(fileContent, extName, metas);\n        } catch (IOException e) {\n            e.printStackTrace();\n        } catch (MyException e) {\n            e.printStackTrace();\n        }\n        return result;\n    }\n```\n\n测试:\n\n```java\nString confUrl = this.getClass().getClassLoader().getResource(\"./fastdfs-client.properties\").getPath();\nFastDfsUtil fastDFSClient = new FastDfsUtil(confUrl);\nString filePath= fastDFSClient.uploadFile(\"C:\\\\Users\\\\littleboy\\\\Pictures\\\\Snipaste_2019-03-09_11-32-27.jpg\");\nSystem.out.println(\"返回路径：\"+filePath);\n```\n\n# 总结\n\n大概就酱。\n","source":"_posts/back_skill_experience/java/fastdfs/fastdfs-java.md","raw":"---\ntitle: fastDFS和java\ndate: 2019-07-25 17:37:35\ncategories:\n- 后端技巧/经验\n- java\ntags:\n- fastdfs\n---\n\n# 前言\n\n最近一直再用fastDFS, [上一篇](/java/fastdfs/nginx-fastdfs-config.html)讲了fastDFS如何配置, 那么这一篇我们来讲一讲如何使用Java来上传和下载文件。\n\n<!--more-->\n\n# 依赖配置\n\n首先将依赖配置好:\n\n```xml\n<dependency>\n    <groupId>net.oschina.zcx7878</groupId>\n    <artifactId>fastdfs-client-java</artifactId>\n    <version>1.27.0.0</version>\n</dependency>\n```\n\n还有配置文件:\n\n```xml\nconnect_timeout_in_seconds = 5\nnetwork_timeout_in_seconds = 30\n\ncharset = UTF-8\n\nhttp_anti_steal_token = true\nhttp_secret_key = FastDFS1234567890\nhttp_tracker_http_port = 19192\n\ntracker_server = 127.0.0.1:22192\n```\n\n# 工具类\n\n这里怎么写其实都好, 我就先列出我写的:\n\n```java\npublic class FastDfsUtil {\n    private TrackerClient trackerClient = null;\n    private TrackerServer trackerServer = null;\n    private StorageServer storageServer = null;\n    private StorageClient1 storageClient = null;\n\n    public FastDfsUtil(String conf) throws Exception {\n        if (conf.contains(\"classpath:\")) {\n            String path = URLDecoder.decode(getClass().getProtectionDomain().getCodeSource().getLocation().toString(), \"UTF-8\");\n            path=path.substring(6);\n            conf = conf.replace(\"classpath:\",URLDecoder.decode(path,\"UTF-8\"));\n        }\n        ClientGlobal.init(conf);\n        trackerClient = new TrackerClient();\n        trackerServer = trackerClient.getConnection();\n        storageServer = null;\n        storageClient = new StorageClient1(trackerServer, storageServer);\n    }\n\n    /**\n     * 上传文件\n     * @param fileContent 文件的字节数组\n     * @return null为失败\n     * @throws Exception\n     */\n    public String uploadFile(byte[] fileContent) throws Exception {\n        return uploadFile(fileContent, null, null);\n    }\n\n    /**\n     * 上传文件方法\n     * <p>Title: uploadFile</p>\n     * <p>Description: </p>\n     * @param fileContent 文件的内容，字节数组\n     * @param extName 文件扩展名\n     * @param metas 文件扩展信息\n     * @return\n     * @throws Exception\n     */\n    public String uploadFile(byte[] fileContent, String extName, NameValuePair[] metas) {\n        String result=null;\n        try {\n            result = storageClient.upload_file1(fileContent, extName, metas);\n        } catch (IOException e) {\n            e.printStackTrace();\n        } catch (MyException e) {\n            e.printStackTrace();\n        }\n        return result;\n    }\n```\n\n测试:\n\n```java\nString confUrl = this.getClass().getClassLoader().getResource(\"./fastdfs-client.properties\").getPath();\nFastDfsUtil fastDFSClient = new FastDfsUtil(confUrl);\nString filePath= fastDFSClient.uploadFile(\"C:\\\\Users\\\\littleboy\\\\Pictures\\\\Snipaste_2019-03-09_11-32-27.jpg\");\nSystem.out.println(\"返回路径：\"+filePath);\n```\n\n# 总结\n\n大概就酱。\n","slug":"back_skill_experience/java/fastdfs/fastdfs-java","published":1,"updated":"2022-10-02T16:40:20.618Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejne002q3vsb3d5natiq","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最近一直再用fastDFS, <a href=\"/java/fastdfs/nginx-fastdfs-config.html\">上一篇</a>讲了fastDFS如何配置, 那么这一篇我们来讲一讲如何使用Java来上传和下载文件。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"依赖配置\"><a href=\"#依赖配置\" class=\"headerlink\" title=\"依赖配置\"></a>依赖配置</h1><p>首先将依赖配置好:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>net.oschina.zcx7878<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>fastdfs-client-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.27.0.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>还有配置文件:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">connect_timeout_in_seconds = 5</span><br><span class=\"line\">network_timeout_in_seconds = 30</span><br><span class=\"line\"></span><br><span class=\"line\">charset = UTF-8</span><br><span class=\"line\"></span><br><span class=\"line\">http_anti_steal_token = true</span><br><span class=\"line\">http_secret_key = FastDFS1234567890</span><br><span class=\"line\">http_tracker_http_port = 19192</span><br><span class=\"line\"></span><br><span class=\"line\">tracker_server = 127.0.0.1:22192</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"工具类\"><a href=\"#工具类\" class=\"headerlink\" title=\"工具类\"></a>工具类</h1><p>这里怎么写其实都好, 我就先列出我写的:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FastDfsUtil</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> TrackerClient trackerClient = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> TrackerServer trackerServer = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> StorageServer storageServer = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> StorageClient1 storageClient = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FastDfsUtil</span><span class=\"params\">(String conf)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (conf.contains(<span class=\"string\">&quot;classpath:&quot;</span>)) &#123;</span><br><span class=\"line\">            String path = URLDecoder.decode(getClass().getProtectionDomain().getCodeSource().getLocation().toString(), <span class=\"string\">&quot;UTF-8&quot;</span>);</span><br><span class=\"line\">            path=path.substring(<span class=\"number\">6</span>);</span><br><span class=\"line\">            conf = conf.replace(<span class=\"string\">&quot;classpath:&quot;</span>,URLDecoder.decode(path,<span class=\"string\">&quot;UTF-8&quot;</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ClientGlobal.init(conf);</span><br><span class=\"line\">        trackerClient = <span class=\"keyword\">new</span> TrackerClient();</span><br><span class=\"line\">        trackerServer = trackerClient.getConnection();</span><br><span class=\"line\">        storageServer = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        storageClient = <span class=\"keyword\">new</span> StorageClient1(trackerServer, storageServer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 上传文件</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> fileContent 文件的字节数组</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> null为失败</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">uploadFile</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] fileContent)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> uploadFile(fileContent, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 上传文件方法</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;Title: uploadFile&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;Description: &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> fileContent 文件的内容，字节数组</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> extName 文件扩展名</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> metas 文件扩展信息</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">uploadFile</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] fileContent, String extName, NameValuePair[] metas)</span> </span>&#123;</span><br><span class=\"line\">        String result=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            result = storageClient.upload_file1(fileContent, extName, metas);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (MyException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String confUrl = <span class=\"keyword\">this</span>.getClass().getClassLoader().getResource(<span class=\"string\">&quot;./fastdfs-client.properties&quot;</span>).getPath();</span><br><span class=\"line\">FastDfsUtil fastDFSClient = <span class=\"keyword\">new</span> FastDfsUtil(confUrl);</span><br><span class=\"line\">String filePath= fastDFSClient.uploadFile(<span class=\"string\">&quot;C:\\\\Users\\\\littleboy\\\\Pictures\\\\Snipaste_2019-03-09_11-32-27.jpg&quot;</span>);</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;返回路径：&quot;</span>+filePath);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>大概就酱。</p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最近一直再用fastDFS, <a href=\"/java/fastdfs/nginx-fastdfs-config.html\">上一篇</a>讲了fastDFS如何配置, 那么这一篇我们来讲一讲如何使用Java来上传和下载文件。</p>","more":"<h1 id=\"依赖配置\"><a href=\"#依赖配置\" class=\"headerlink\" title=\"依赖配置\"></a>依赖配置</h1><p>首先将依赖配置好:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>net.oschina.zcx7878<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>fastdfs-client-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.27.0.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>还有配置文件:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">connect_timeout_in_seconds = 5</span><br><span class=\"line\">network_timeout_in_seconds = 30</span><br><span class=\"line\"></span><br><span class=\"line\">charset = UTF-8</span><br><span class=\"line\"></span><br><span class=\"line\">http_anti_steal_token = true</span><br><span class=\"line\">http_secret_key = FastDFS1234567890</span><br><span class=\"line\">http_tracker_http_port = 19192</span><br><span class=\"line\"></span><br><span class=\"line\">tracker_server = 127.0.0.1:22192</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"工具类\"><a href=\"#工具类\" class=\"headerlink\" title=\"工具类\"></a>工具类</h1><p>这里怎么写其实都好, 我就先列出我写的:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FastDfsUtil</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> TrackerClient trackerClient = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> TrackerServer trackerServer = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> StorageServer storageServer = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> StorageClient1 storageClient = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FastDfsUtil</span><span class=\"params\">(String conf)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (conf.contains(<span class=\"string\">&quot;classpath:&quot;</span>)) &#123;</span><br><span class=\"line\">            String path = URLDecoder.decode(getClass().getProtectionDomain().getCodeSource().getLocation().toString(), <span class=\"string\">&quot;UTF-8&quot;</span>);</span><br><span class=\"line\">            path=path.substring(<span class=\"number\">6</span>);</span><br><span class=\"line\">            conf = conf.replace(<span class=\"string\">&quot;classpath:&quot;</span>,URLDecoder.decode(path,<span class=\"string\">&quot;UTF-8&quot;</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ClientGlobal.init(conf);</span><br><span class=\"line\">        trackerClient = <span class=\"keyword\">new</span> TrackerClient();</span><br><span class=\"line\">        trackerServer = trackerClient.getConnection();</span><br><span class=\"line\">        storageServer = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        storageClient = <span class=\"keyword\">new</span> StorageClient1(trackerServer, storageServer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 上传文件</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> fileContent 文件的字节数组</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> null为失败</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">uploadFile</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] fileContent)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> uploadFile(fileContent, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 上传文件方法</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;Title: uploadFile&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;Description: &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> fileContent 文件的内容，字节数组</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> extName 文件扩展名</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> metas 文件扩展信息</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">uploadFile</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] fileContent, String extName, NameValuePair[] metas)</span> </span>&#123;</span><br><span class=\"line\">        String result=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            result = storageClient.upload_file1(fileContent, extName, metas);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (MyException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String confUrl = <span class=\"keyword\">this</span>.getClass().getClassLoader().getResource(<span class=\"string\">&quot;./fastdfs-client.properties&quot;</span>).getPath();</span><br><span class=\"line\">FastDfsUtil fastDFSClient = <span class=\"keyword\">new</span> FastDfsUtil(confUrl);</span><br><span class=\"line\">String filePath= fastDFSClient.uploadFile(<span class=\"string\">&quot;C:\\\\Users\\\\littleboy\\\\Pictures\\\\Snipaste_2019-03-09_11-32-27.jpg&quot;</span>);</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;返回路径：&quot;</span>+filePath);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>大概就酱。</p>"},{"title":"fastDFS和ngnix的配置","date":"2019-07-07T01:13:55.000Z","_content":"\n# 前言\n\n根据[这篇博客](https://blog.csdn.net/qq_34301871/article/details/80060235), 我也是花了半天时间才配置好fastDFS和nginx, 那么话不多说, 开始吧。\n\n<!--more-->\n\n# 下载物料\n\n首先下载[fastDFS的 5.11](https://github.com/happyfish100/fastdfs/releases)版本。\n\n接着下载[fastdfs-nginx-module](https://github.com/happyfish100/fastdfs-nginx-module/releases)\n\n接着下载[libfastcommon](https://github.com/happyfish100/libfastcommon/releases)\n\n接着下载[nginx](http://nginx.org/download/)\n\n**注意, fastdfs 5.11版本对应fastdfs-nginx-module的1.20版本 **\n\n**fastdfs 5.10版本对应fastdfs-nginx-module的1.19版本**\n\n# 系统环境准备\n\n下载所需工具的运行命令:\n\n```shell\nyum -y install zlib zlib-devel pcre pcre-devel gcc gcc-c++ openssl openssl-devel libevent libevent-devel perl unzip net-tools wget\n```\n\n# 安装libfastcommon\n\n> 约定: 之前的物料的下载路径是 `/home/littleboy/programmingTools/fastdfs`\nnginx的下载的路径是 `/home/littleboy/programmingTools/nginx`\n\n首先跳转到物料所在路径:\n\n```shell\ncd /home/littleboy/programmingTools/fastdfs\n```\n\n解压 libfastcommon:\n\n```\nunzip libfastcommon-1.0.39.zip\ncd  libfastcommon-1.0.39\nll\n```\n\n可以看到一个make.sh。\n\n开始安装:\n\n```shell\n./make.sh\n./make.sh install\n```\n\n不出意外是不会报错的, 然后可以建立软连接:\n\n```shell\nln -s /usr/lib64/libfastcommon.so /usr/local/lib/libfastcommon.so\nln -s /usr/lib64/libfastcommon.so /usr/lib/libfastcommon.so\nln -s /usr/lib64/libfdfsclient.so /usr/local/lib/libfdfsclient.so\nln -s /usr/lib64/libfdfsclient.so /usr/lib/libfdfsclient.so\n```\n\nlibfastcommon 安装完毕。\n\n# 安装fastdfs\n\n现在的工作目录是: `/home/littleboy/programmingTools/fastdfs/libcommon-1.0.39`\n\n回到上一级目录, 然后解压fastdfs:\n\n```shell\ncd ..\nunzip fastdfs-5.11.zip\ncd fastdfs-5.11\nll\n```\n\n同样的, 执行 make.sh:\n\n```shell\n./make.sh\n./make.sh install\n```\n\n不出意外应该也不会报错, 成功之后可以查看安装目录:\n\n```shell\nll /etc/fastdfs\n```\n\n可以看到:\n\n```\n-rw-r--r--. 1 root root  1461 7月   6 11:10 client.conf.sample\n-rw-r--r--. 1 root root  7927 7月   6 11:10 storage.conf.sample\n-rw-r--r--. 1 root root  7389 7月   6 11:10 tracker.conf.sample\n```\n\n我们需要所有的文件都复制一份, 去掉sample:\n\n```shell\ncp client.conf.sample client.conf\ncp storage.conf.sample storage.conf\ncp tracker.conf.sample tracker.conf\n```\n\nfastDFS安装完毕。\n\n# 安装tracker\n\n首先创建tracker工作目录。\n\n这个目录可以自定义, 用来保存tracker的data和log, 我将它保存在了: `/home/littleboy/programmingTools/fastdfs/fastdfs_tracker`\n\n```\ncd ..\nmkdir fastdfs_tracker\n```\n\n配置tracker:\n\n```\nvi /etc/fdfs/tracker.conf\n```\n\n找到下面几处修改:\n\n```\nline4: disabled=false # 默认开启tracker\nline11: port=22122 # 默认端口号\nline22: base_path=/home/littleboy/programmingTools/fastdfs/fastdfs_tracker/ # tracker工作目录\nline260:  http.server_port=6666 # tracker 服务器端口号, 默认8080\n```\n\n保存修改。\n\n启动tracker:\n\n```\nservice fdfs_trackerd start\n```\n\n如果不能启动则试试:\n\n```\nsystemctl start fdfs_trackerd\n```\n\n成功后可以看见:\n\n```\nStarting fdfs_trackerd (via systemctl):                    [  OK  ]\n```\n\n跳转到 tracker 工作目录下可以看到多了data和log文件夹, 然后我们需要将这个加入开机启动, 首先需要给执行权限:\n\n```\nchmod +x /etc/rc.d/rc.total\nvi /etc/rc.d/rc.total\n```\n\n在这个文件最后加上一句话即可:\n\n```\nservice fdfs_trackerd start\n```\n\n然后我们查看一下tracker端口监听的情况:\n\n```\nnetstat -unltp|grep fdfs\n```\n\n可以看到22122端口监听成功。\n\n# 安装storage\n\n为storage配置工作目录, 由于storage还需要一个目录来存储数据, 所以需要另外多建立一个目录: `fastdfs_storage_data`。\n\n修改 storage 的配置文件——storage.conf:\n\n```\nvi /etc/fdfs/storage.conf\n```\n\n找到下面几处修改即可:\n\n```\nline4: disabled=false # 默认开启\nline11: group_name=group1 # 组名\nline24: port=23000 # storage端口, 同一个组的stroage的端口号必须一致\nline41: base_path=/home/littleboy/programmingTools/fasdfs/fastdfs_storage # 配置storage的工作目录 \nline105: store_path_count=1 # 存储路径个数, 这里要和store_path的个数相匹配\nline109: store_path0=/home/littleboy/programmingTools/fasdfs/fastdfs_storage_data # 配置storage的存储路径\nline118: tracker_server=192.168.1.3:22122 # 配置tracker服务器的ip\nline284: http.server_port=8888 # 配置http的端口号, 可以通过这个段口访问stroage\n```\n\n保存之后, 创建软连接:\n\n```\nln -s /usr/bin/fdfs_storaged /usr/local/bin\n```\n\n启动storage:\n\n```\nservice fdfs_storaged start\n# 如果不能启动可以试试:\nsystemctl start fdfs_storaged\n```\n\n可以看到:\n\n```\nStarting fdfs_storaged (via systemctl):                    [  OK  ]\n```\n\n同样, 在`/etc/rc.d/rc.local`加上启动语句就可以开机自启。\n\n查看storage是否启动:\n\n```\nnetstat -unltp | grep fdfs\n```\n\n至此, fastdfs配置完成, 最后我们可以查看storage是否被注册到了tracker里去:\n\n```\n/usr/bin/fdfs_monitor /etc/fdfs/storage.conf\n```\n\n如果成功可以看到 `ip_addr = 192.168.1.3 (localhost.localdomain)  ACTIVE` 字样。\n\ntorage安装配置完毕。\n\n# 测试\n\n先修改一下客户端配置文件:\n\n```\nvi /etc/fdfs/client.conf\n\nline10: base_path=/home/littleboy/programmingTools/fasdfs/fastdfs_tracker # tracker服务器文件路径\n\nline13: tracker_server=192.168.1.3:22122 # tracker服务器ip和端口号\n\nline57: http.tracker_server_port=6666 # tracker http端口号\n```\n\n接下来上传一张图片到centos7测试。\n\n```\n/usr/bin/fdfs_upload_file /etc/fdfs/client.conf /root/测试1.png\n```\n\n成功之后会返回图片的路径。\n\n> wheel/M00/00/00/wKgBA10ipjGAT1AHAABd0Kc3bLM592.jpg\n\n我们可以去刚才的路径查看是否上传成功:\n\n```\ncd /home/littleboy/programmingTools/fasdfs/fastdfs_storage_data/data/00/00\nll\n```\n\ndata下有256个1级目录, 每级目录下又有256个2级子目录, 总共65536个文件, 新文件会以hash的方式被路由到其中某个子目录下, 然后将文件数据直接作为一个本地文件存储到该目录中。\n\n# FastDFS的nginx模块安装\n\n如果我们直接使用 `http://127.0.0.1:9999/wheel/M00/00/00wKgBA10ipjGAT1AHAABd0Kc3bLM592.jpg`去访问图片, 会发现访问不到, 因为在fastDFS 4.05的时候, 就已经 remove embed HTTP support:\n\n```\nVersion 4.05  2012-12-30\n * client/fdfs_upload_file.c can specify storage ip port and store path index\n * add connection pool\n * client load storage ids config\n * common/ini_file_reader.c does NOT call chdir\n * keep the mtime of file same\n * use g_current_time instead of call time function\n * remove embed HTTP support\n```\n\n我们在使用fastDFS部署一个分布式文件系统的时候, 通过fastDFS的客户端API来进行文件的上传, 下载和删除等操作。同时通过fastDFS的HTTP服务器来提供HTTP访问服务。但是fastDFS的HTTP服务较为简单, 无法提供负载均衡等高性能的服务, 所以fastDFS的开发者——淘宝的架构师余庆同学, 为我们提供了nginx上使用的fastDFS模块。\n\nfastDFS通过tracker服务器, 将文件放在storage服务器存储, 但是同组之间的服务器需要复制文件, 有延迟的问题。假设tracker服务器将文件上传到了192.168.1.3, 文件ID已经返回给客户端, 这时, 后台会将这个文件复制到192.168.1.3, 如果复制没有完成, 客户端就用这个ID在这台服务器上获取文件, 肯定会出现错误。这个fastdfs-nginx-module可以重定向连接到源服务器获取文件, 避免客户端由于复制延迟的问题, 出现错误。\n\n## nginx安装\n\n在安装nginx之前要安装nginx所需要的依赖:\n\n```\nyum -y install pcre pcre-devel\nyum -y install zlib zlib-devel\nyum -y install openssl openssl-devel\n```\n\n解压nginx和fastdfs-nginx-module:\n\n```\ntar -zxf nginx-1.12.0.tar.gz\nunzip fastdfs-nginx-module-1.20.zip\n```\n\n然后进入nginx安装目录, 添加fastdfs-nginx-module:\n\n```\n./configure --prefix=/usr/local/nginx --add-module=/home/littleboy/programmingTools/fastdfs/fastdfs-nginx-module-1.20/src\n```\n\nOK, 大家注意, 这里如果继续make的话, 大概率会报`fdfs_define.h:15:27: 致命错误：common_define.h：没有那个文件或目录` 这个错, 那么就要感谢[这篇博客](https://blog.csdn.net/zzzgd_666/article/details/81911892)的作者了, 那么总是解决办法就是:\n修改`fastdfs-nginx-module-1.20/src/config`文件:\n\n```\nvi fastdfs-nginx-module-1.20/src/config\n\nline6: ngx_module_incs=\"/usr/include/fastdfs /usr/include/fastcommon/\"\nline15: CORE_INCS=\"$CORE_INCS /usr/include/fastdfs /usr/include/fastcommon/\"\n```\n\n改了这两行之后, 重新 configure 一下, 然后执行:\n\n```\nmake\nmake install\n```\n\nnginx的默认目录是/usr/local/nginx, 配置storage nginx:\n\n```\ncd /usr/local/nginx/conf\nvi nginx.conf\n```\n\n注意:\n\n这里是我遇到的第二个坑:\n\n首先第一行:\n\n```\nline 2: user nobody;\n# 改成:\nuser root;\nline 36: listen 9999;\nline 48:\nlocation /wheel/M00 {\n    root /home/littleboy/programmingTools/fastdfs/fastdfs_storage_data/data;\n    ngx_fastdfs_module;\n    proxy_connect_timeout 300;\n    proxy_read_timeout 300;\n    proxy_send_timeout 300;\n}\n```\n\n修改一下http.conf:\n\n```\n# 修改为已经存在的一个html或者图片之类的。\nhttp.anti_steal.token_check_fail=/home/fastdfs/anti-steal.jpg\n```\n\n然后进入fastDFS安装时解压过的目录, 将http.conf和mime.types拷贝到/etc/fdfs目录下:\n\n```\ncd /home/littleboy/prorammingTools/fastdfs/fastdfs-5.11/conf\ncp http.conf /etc/fdfs\ncp http.conf /etc/fdfs\ncp mime.types /etc/fdfs\n```\n\n另外还需要把fastsdfs-nginx-module安装目录的src下的mod-fastdfs.conf也拷贝过来:\n\n```\ncp /home/littleboy/programmingTools/fastdfs/fastdfs-nginx-module-1.20/src/mod_fastdfs.conf /etc/fdfs\n```\n\n修改mod_fastdfs.conf:\n\n```\nvi /etc/fdfs/mod_fastdfs.conf\n```\n\n对一下几行进行修改:\n\n```\nline10: base_path=/home/littleboy/programmingTools/fastdfs/fastdfs_storage\nline40: tracker_server=192.168.1.3:22122\nline44: storage_server_port=23000\nline53: url_have_group_name = true\nline62: store_path0=/home/littleboy/programmingTools/fasdfs/fastdfs_storage_data\nline113: group_count = 1\n\n# 在文件的最后设置group\n[group1]\ngroup_name=wheel\nstorage_server_port=23000\nstore_path_count=2\nstore_path0=/home/littleboy/programmingTools/fasdfs/fastdfs_storage_data\nstore_path1=/home/littleboy/programmingTools/fasdfs/fastdfs_storage_data\n```\n\n创建M00至storage存储目录的符号连接:\n\n```\nln -s /home/littleboy/programmingTools/fastdfs/fastdfs_storage_data/data/ /home/littleboy/programmingTools/fastdfs/fastdfs_storage_data/M00\n```\n\n启动nginx:\n\n```\n/usr/local/nginx/sbin/nginx\n```\n\n访问127.0.0.1:9999, 可以看到`welcome to nginx`,接下来我们还要配置tracker的nginx。\n\n## 配置tracker nginx\n\n在解压一个nginx:\n\n```\nmkdir nginx-1.12.0-2\ncd nginx-1.12.0-2\ntar -zxf nginx-1.12.0.tar.gz nginx-1.12.0\n```\n\n然后再configur一下:\n\n```\n./configure --prefix=/usr/local/nginx2 --add-module=/home/littleboy/programmingTools/fastdfs/fastdfs-nginx-module-1.20/src\nmake\nmake install\n```\n\n接下来还是修改nginx.conf:\n\n```\nvi /usr/local/nginx2/conf/nginx.conf\n\nline2: user root;\nline35: # 这里加入一个upstream, 指向tracker的nginx地址:\nupstream fdfs_wheel {\n    server 192.168.1.3:9999;\n}\n\n server {\n        listen       9989;\n        server_name  localhost;\n\n        #charset koi8-r;\n\n        #access_log  logs/host.access.log  main;\n\n        location / {\n            root   html;\n            index  index.html index.htm;\n        }\n\n        location /wheel/M00 {\n            proxy_pass http://fdfs_wheel;\n        }\n        # 省略下面的代码\n}\n```\n\n启动nginx:\n\n```\n/usr/local/nginx2/sbin/nginx\n```\n\n现在访问`192.168.1.3:9999/wheel/M00/00/00/wKgBA10ipjGAT1AHAABd0Kc3bLM592.jpg`, 应该就可以访问到图片了。\n\n# 总结\n\n不容易啊不容易。\n","source":"_posts/back_skill_experience/java/fastdfs/nginx-fastdfs-config.md","raw":"---\ntitle: fastDFS和ngnix的配置 \ndate: 2019-07-07 09:13:55\ncategories:\n- 后端技巧/经验\n- java\ntags:\n- fastdfs\n- nginx\n---\n\n# 前言\n\n根据[这篇博客](https://blog.csdn.net/qq_34301871/article/details/80060235), 我也是花了半天时间才配置好fastDFS和nginx, 那么话不多说, 开始吧。\n\n<!--more-->\n\n# 下载物料\n\n首先下载[fastDFS的 5.11](https://github.com/happyfish100/fastdfs/releases)版本。\n\n接着下载[fastdfs-nginx-module](https://github.com/happyfish100/fastdfs-nginx-module/releases)\n\n接着下载[libfastcommon](https://github.com/happyfish100/libfastcommon/releases)\n\n接着下载[nginx](http://nginx.org/download/)\n\n**注意, fastdfs 5.11版本对应fastdfs-nginx-module的1.20版本 **\n\n**fastdfs 5.10版本对应fastdfs-nginx-module的1.19版本**\n\n# 系统环境准备\n\n下载所需工具的运行命令:\n\n```shell\nyum -y install zlib zlib-devel pcre pcre-devel gcc gcc-c++ openssl openssl-devel libevent libevent-devel perl unzip net-tools wget\n```\n\n# 安装libfastcommon\n\n> 约定: 之前的物料的下载路径是 `/home/littleboy/programmingTools/fastdfs`\nnginx的下载的路径是 `/home/littleboy/programmingTools/nginx`\n\n首先跳转到物料所在路径:\n\n```shell\ncd /home/littleboy/programmingTools/fastdfs\n```\n\n解压 libfastcommon:\n\n```\nunzip libfastcommon-1.0.39.zip\ncd  libfastcommon-1.0.39\nll\n```\n\n可以看到一个make.sh。\n\n开始安装:\n\n```shell\n./make.sh\n./make.sh install\n```\n\n不出意外是不会报错的, 然后可以建立软连接:\n\n```shell\nln -s /usr/lib64/libfastcommon.so /usr/local/lib/libfastcommon.so\nln -s /usr/lib64/libfastcommon.so /usr/lib/libfastcommon.so\nln -s /usr/lib64/libfdfsclient.so /usr/local/lib/libfdfsclient.so\nln -s /usr/lib64/libfdfsclient.so /usr/lib/libfdfsclient.so\n```\n\nlibfastcommon 安装完毕。\n\n# 安装fastdfs\n\n现在的工作目录是: `/home/littleboy/programmingTools/fastdfs/libcommon-1.0.39`\n\n回到上一级目录, 然后解压fastdfs:\n\n```shell\ncd ..\nunzip fastdfs-5.11.zip\ncd fastdfs-5.11\nll\n```\n\n同样的, 执行 make.sh:\n\n```shell\n./make.sh\n./make.sh install\n```\n\n不出意外应该也不会报错, 成功之后可以查看安装目录:\n\n```shell\nll /etc/fastdfs\n```\n\n可以看到:\n\n```\n-rw-r--r--. 1 root root  1461 7月   6 11:10 client.conf.sample\n-rw-r--r--. 1 root root  7927 7月   6 11:10 storage.conf.sample\n-rw-r--r--. 1 root root  7389 7月   6 11:10 tracker.conf.sample\n```\n\n我们需要所有的文件都复制一份, 去掉sample:\n\n```shell\ncp client.conf.sample client.conf\ncp storage.conf.sample storage.conf\ncp tracker.conf.sample tracker.conf\n```\n\nfastDFS安装完毕。\n\n# 安装tracker\n\n首先创建tracker工作目录。\n\n这个目录可以自定义, 用来保存tracker的data和log, 我将它保存在了: `/home/littleboy/programmingTools/fastdfs/fastdfs_tracker`\n\n```\ncd ..\nmkdir fastdfs_tracker\n```\n\n配置tracker:\n\n```\nvi /etc/fdfs/tracker.conf\n```\n\n找到下面几处修改:\n\n```\nline4: disabled=false # 默认开启tracker\nline11: port=22122 # 默认端口号\nline22: base_path=/home/littleboy/programmingTools/fastdfs/fastdfs_tracker/ # tracker工作目录\nline260:  http.server_port=6666 # tracker 服务器端口号, 默认8080\n```\n\n保存修改。\n\n启动tracker:\n\n```\nservice fdfs_trackerd start\n```\n\n如果不能启动则试试:\n\n```\nsystemctl start fdfs_trackerd\n```\n\n成功后可以看见:\n\n```\nStarting fdfs_trackerd (via systemctl):                    [  OK  ]\n```\n\n跳转到 tracker 工作目录下可以看到多了data和log文件夹, 然后我们需要将这个加入开机启动, 首先需要给执行权限:\n\n```\nchmod +x /etc/rc.d/rc.total\nvi /etc/rc.d/rc.total\n```\n\n在这个文件最后加上一句话即可:\n\n```\nservice fdfs_trackerd start\n```\n\n然后我们查看一下tracker端口监听的情况:\n\n```\nnetstat -unltp|grep fdfs\n```\n\n可以看到22122端口监听成功。\n\n# 安装storage\n\n为storage配置工作目录, 由于storage还需要一个目录来存储数据, 所以需要另外多建立一个目录: `fastdfs_storage_data`。\n\n修改 storage 的配置文件——storage.conf:\n\n```\nvi /etc/fdfs/storage.conf\n```\n\n找到下面几处修改即可:\n\n```\nline4: disabled=false # 默认开启\nline11: group_name=group1 # 组名\nline24: port=23000 # storage端口, 同一个组的stroage的端口号必须一致\nline41: base_path=/home/littleboy/programmingTools/fasdfs/fastdfs_storage # 配置storage的工作目录 \nline105: store_path_count=1 # 存储路径个数, 这里要和store_path的个数相匹配\nline109: store_path0=/home/littleboy/programmingTools/fasdfs/fastdfs_storage_data # 配置storage的存储路径\nline118: tracker_server=192.168.1.3:22122 # 配置tracker服务器的ip\nline284: http.server_port=8888 # 配置http的端口号, 可以通过这个段口访问stroage\n```\n\n保存之后, 创建软连接:\n\n```\nln -s /usr/bin/fdfs_storaged /usr/local/bin\n```\n\n启动storage:\n\n```\nservice fdfs_storaged start\n# 如果不能启动可以试试:\nsystemctl start fdfs_storaged\n```\n\n可以看到:\n\n```\nStarting fdfs_storaged (via systemctl):                    [  OK  ]\n```\n\n同样, 在`/etc/rc.d/rc.local`加上启动语句就可以开机自启。\n\n查看storage是否启动:\n\n```\nnetstat -unltp | grep fdfs\n```\n\n至此, fastdfs配置完成, 最后我们可以查看storage是否被注册到了tracker里去:\n\n```\n/usr/bin/fdfs_monitor /etc/fdfs/storage.conf\n```\n\n如果成功可以看到 `ip_addr = 192.168.1.3 (localhost.localdomain)  ACTIVE` 字样。\n\ntorage安装配置完毕。\n\n# 测试\n\n先修改一下客户端配置文件:\n\n```\nvi /etc/fdfs/client.conf\n\nline10: base_path=/home/littleboy/programmingTools/fasdfs/fastdfs_tracker # tracker服务器文件路径\n\nline13: tracker_server=192.168.1.3:22122 # tracker服务器ip和端口号\n\nline57: http.tracker_server_port=6666 # tracker http端口号\n```\n\n接下来上传一张图片到centos7测试。\n\n```\n/usr/bin/fdfs_upload_file /etc/fdfs/client.conf /root/测试1.png\n```\n\n成功之后会返回图片的路径。\n\n> wheel/M00/00/00/wKgBA10ipjGAT1AHAABd0Kc3bLM592.jpg\n\n我们可以去刚才的路径查看是否上传成功:\n\n```\ncd /home/littleboy/programmingTools/fasdfs/fastdfs_storage_data/data/00/00\nll\n```\n\ndata下有256个1级目录, 每级目录下又有256个2级子目录, 总共65536个文件, 新文件会以hash的方式被路由到其中某个子目录下, 然后将文件数据直接作为一个本地文件存储到该目录中。\n\n# FastDFS的nginx模块安装\n\n如果我们直接使用 `http://127.0.0.1:9999/wheel/M00/00/00wKgBA10ipjGAT1AHAABd0Kc3bLM592.jpg`去访问图片, 会发现访问不到, 因为在fastDFS 4.05的时候, 就已经 remove embed HTTP support:\n\n```\nVersion 4.05  2012-12-30\n * client/fdfs_upload_file.c can specify storage ip port and store path index\n * add connection pool\n * client load storage ids config\n * common/ini_file_reader.c does NOT call chdir\n * keep the mtime of file same\n * use g_current_time instead of call time function\n * remove embed HTTP support\n```\n\n我们在使用fastDFS部署一个分布式文件系统的时候, 通过fastDFS的客户端API来进行文件的上传, 下载和删除等操作。同时通过fastDFS的HTTP服务器来提供HTTP访问服务。但是fastDFS的HTTP服务较为简单, 无法提供负载均衡等高性能的服务, 所以fastDFS的开发者——淘宝的架构师余庆同学, 为我们提供了nginx上使用的fastDFS模块。\n\nfastDFS通过tracker服务器, 将文件放在storage服务器存储, 但是同组之间的服务器需要复制文件, 有延迟的问题。假设tracker服务器将文件上传到了192.168.1.3, 文件ID已经返回给客户端, 这时, 后台会将这个文件复制到192.168.1.3, 如果复制没有完成, 客户端就用这个ID在这台服务器上获取文件, 肯定会出现错误。这个fastdfs-nginx-module可以重定向连接到源服务器获取文件, 避免客户端由于复制延迟的问题, 出现错误。\n\n## nginx安装\n\n在安装nginx之前要安装nginx所需要的依赖:\n\n```\nyum -y install pcre pcre-devel\nyum -y install zlib zlib-devel\nyum -y install openssl openssl-devel\n```\n\n解压nginx和fastdfs-nginx-module:\n\n```\ntar -zxf nginx-1.12.0.tar.gz\nunzip fastdfs-nginx-module-1.20.zip\n```\n\n然后进入nginx安装目录, 添加fastdfs-nginx-module:\n\n```\n./configure --prefix=/usr/local/nginx --add-module=/home/littleboy/programmingTools/fastdfs/fastdfs-nginx-module-1.20/src\n```\n\nOK, 大家注意, 这里如果继续make的话, 大概率会报`fdfs_define.h:15:27: 致命错误：common_define.h：没有那个文件或目录` 这个错, 那么就要感谢[这篇博客](https://blog.csdn.net/zzzgd_666/article/details/81911892)的作者了, 那么总是解决办法就是:\n修改`fastdfs-nginx-module-1.20/src/config`文件:\n\n```\nvi fastdfs-nginx-module-1.20/src/config\n\nline6: ngx_module_incs=\"/usr/include/fastdfs /usr/include/fastcommon/\"\nline15: CORE_INCS=\"$CORE_INCS /usr/include/fastdfs /usr/include/fastcommon/\"\n```\n\n改了这两行之后, 重新 configure 一下, 然后执行:\n\n```\nmake\nmake install\n```\n\nnginx的默认目录是/usr/local/nginx, 配置storage nginx:\n\n```\ncd /usr/local/nginx/conf\nvi nginx.conf\n```\n\n注意:\n\n这里是我遇到的第二个坑:\n\n首先第一行:\n\n```\nline 2: user nobody;\n# 改成:\nuser root;\nline 36: listen 9999;\nline 48:\nlocation /wheel/M00 {\n    root /home/littleboy/programmingTools/fastdfs/fastdfs_storage_data/data;\n    ngx_fastdfs_module;\n    proxy_connect_timeout 300;\n    proxy_read_timeout 300;\n    proxy_send_timeout 300;\n}\n```\n\n修改一下http.conf:\n\n```\n# 修改为已经存在的一个html或者图片之类的。\nhttp.anti_steal.token_check_fail=/home/fastdfs/anti-steal.jpg\n```\n\n然后进入fastDFS安装时解压过的目录, 将http.conf和mime.types拷贝到/etc/fdfs目录下:\n\n```\ncd /home/littleboy/prorammingTools/fastdfs/fastdfs-5.11/conf\ncp http.conf /etc/fdfs\ncp http.conf /etc/fdfs\ncp mime.types /etc/fdfs\n```\n\n另外还需要把fastsdfs-nginx-module安装目录的src下的mod-fastdfs.conf也拷贝过来:\n\n```\ncp /home/littleboy/programmingTools/fastdfs/fastdfs-nginx-module-1.20/src/mod_fastdfs.conf /etc/fdfs\n```\n\n修改mod_fastdfs.conf:\n\n```\nvi /etc/fdfs/mod_fastdfs.conf\n```\n\n对一下几行进行修改:\n\n```\nline10: base_path=/home/littleboy/programmingTools/fastdfs/fastdfs_storage\nline40: tracker_server=192.168.1.3:22122\nline44: storage_server_port=23000\nline53: url_have_group_name = true\nline62: store_path0=/home/littleboy/programmingTools/fasdfs/fastdfs_storage_data\nline113: group_count = 1\n\n# 在文件的最后设置group\n[group1]\ngroup_name=wheel\nstorage_server_port=23000\nstore_path_count=2\nstore_path0=/home/littleboy/programmingTools/fasdfs/fastdfs_storage_data\nstore_path1=/home/littleboy/programmingTools/fasdfs/fastdfs_storage_data\n```\n\n创建M00至storage存储目录的符号连接:\n\n```\nln -s /home/littleboy/programmingTools/fastdfs/fastdfs_storage_data/data/ /home/littleboy/programmingTools/fastdfs/fastdfs_storage_data/M00\n```\n\n启动nginx:\n\n```\n/usr/local/nginx/sbin/nginx\n```\n\n访问127.0.0.1:9999, 可以看到`welcome to nginx`,接下来我们还要配置tracker的nginx。\n\n## 配置tracker nginx\n\n在解压一个nginx:\n\n```\nmkdir nginx-1.12.0-2\ncd nginx-1.12.0-2\ntar -zxf nginx-1.12.0.tar.gz nginx-1.12.0\n```\n\n然后再configur一下:\n\n```\n./configure --prefix=/usr/local/nginx2 --add-module=/home/littleboy/programmingTools/fastdfs/fastdfs-nginx-module-1.20/src\nmake\nmake install\n```\n\n接下来还是修改nginx.conf:\n\n```\nvi /usr/local/nginx2/conf/nginx.conf\n\nline2: user root;\nline35: # 这里加入一个upstream, 指向tracker的nginx地址:\nupstream fdfs_wheel {\n    server 192.168.1.3:9999;\n}\n\n server {\n        listen       9989;\n        server_name  localhost;\n\n        #charset koi8-r;\n\n        #access_log  logs/host.access.log  main;\n\n        location / {\n            root   html;\n            index  index.html index.htm;\n        }\n\n        location /wheel/M00 {\n            proxy_pass http://fdfs_wheel;\n        }\n        # 省略下面的代码\n}\n```\n\n启动nginx:\n\n```\n/usr/local/nginx2/sbin/nginx\n```\n\n现在访问`192.168.1.3:9999/wheel/M00/00/00/wKgBA10ipjGAT1AHAABd0Kc3bLM592.jpg`, 应该就可以访问到图片了。\n\n# 总结\n\n不容易啊不容易。\n","slug":"back_skill_experience/java/fastdfs/nginx-fastdfs-config","published":1,"updated":"2022-10-02T16:40:35.822Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejnh002t3vsb4g7zfogv","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>根据<a href=\"https://blog.csdn.net/qq_34301871/article/details/80060235\">这篇博客</a>, 我也是花了半天时间才配置好fastDFS和nginx, 那么话不多说, 开始吧。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"下载物料\"><a href=\"#下载物料\" class=\"headerlink\" title=\"下载物料\"></a>下载物料</h1><p>首先下载<a href=\"https://github.com/happyfish100/fastdfs/releases\">fastDFS的 5.11</a>版本。</p>\n<p>接着下载<a href=\"https://github.com/happyfish100/fastdfs-nginx-module/releases\">fastdfs-nginx-module</a></p>\n<p>接着下载<a href=\"https://github.com/happyfish100/libfastcommon/releases\">libfastcommon</a></p>\n<p>接着下载<a href=\"http://nginx.org/download/\">nginx</a></p>\n<p>**注意, fastdfs 5.11版本对应fastdfs-nginx-module的1.20版本 **</p>\n<p><strong>fastdfs 5.10版本对应fastdfs-nginx-module的1.19版本</strong></p>\n<h1 id=\"系统环境准备\"><a href=\"#系统环境准备\" class=\"headerlink\" title=\"系统环境准备\"></a>系统环境准备</h1><p>下载所需工具的运行命令:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install zlib zlib-devel pcre pcre-devel gcc gcc-c++ openssl openssl-devel libevent libevent-devel perl unzip net-tools wget</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"安装libfastcommon\"><a href=\"#安装libfastcommon\" class=\"headerlink\" title=\"安装libfastcommon\"></a>安装libfastcommon</h1><blockquote>\n<p>约定: 之前的物料的下载路径是 <code>/home/littleboy/programmingTools/fastdfs</code><br>nginx的下载的路径是 <code>/home/littleboy/programmingTools/nginx</code></p>\n</blockquote>\n<p>首先跳转到物料所在路径:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /home/littleboy/programmingTools/fastdfs</span><br></pre></td></tr></table></figure>\n\n<p>解压 libfastcommon:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unzip libfastcommon-1.0.39.zip</span><br><span class=\"line\">cd  libfastcommon-1.0.39</span><br><span class=\"line\">ll</span><br></pre></td></tr></table></figure>\n\n<p>可以看到一个make.sh。</p>\n<p>开始安装:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./make.sh</span><br><span class=\"line\">./make.sh install</span><br></pre></td></tr></table></figure>\n\n<p>不出意外是不会报错的, 然后可以建立软连接:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /usr/lib64/libfastcommon.so /usr/local/lib/libfastcommon.so</span><br><span class=\"line\">ln -s /usr/lib64/libfastcommon.so /usr/lib/libfastcommon.so</span><br><span class=\"line\">ln -s /usr/lib64/libfdfsclient.so /usr/local/lib/libfdfsclient.so</span><br><span class=\"line\">ln -s /usr/lib64/libfdfsclient.so /usr/lib/libfdfsclient.so</span><br></pre></td></tr></table></figure>\n\n<p>libfastcommon 安装完毕。</p>\n<h1 id=\"安装fastdfs\"><a href=\"#安装fastdfs\" class=\"headerlink\" title=\"安装fastdfs\"></a>安装fastdfs</h1><p>现在的工作目录是: <code>/home/littleboy/programmingTools/fastdfs/libcommon-1.0.39</code></p>\n<p>回到上一级目录, 然后解压fastdfs:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ..</span><br><span class=\"line\">unzip fastdfs-5.11.zip</span><br><span class=\"line\">cd fastdfs-5.11</span><br><span class=\"line\">ll</span><br></pre></td></tr></table></figure>\n\n<p>同样的, 执行 make.sh:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./make.sh</span><br><span class=\"line\">./make.sh install</span><br></pre></td></tr></table></figure>\n\n<p>不出意外应该也不会报错, 成功之后可以查看安装目录:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ll /etc/fastdfs</span><br></pre></td></tr></table></figure>\n\n<p>可以看到:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-rw-r--r--. 1 root root  1461 7月   6 11:10 client.conf.sample</span><br><span class=\"line\">-rw-r--r--. 1 root root  7927 7月   6 11:10 storage.conf.sample</span><br><span class=\"line\">-rw-r--r--. 1 root root  7389 7月   6 11:10 tracker.conf.sample</span><br></pre></td></tr></table></figure>\n\n<p>我们需要所有的文件都复制一份, 去掉sample:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp client.conf.sample client.conf</span><br><span class=\"line\">cp storage.conf.sample storage.conf</span><br><span class=\"line\">cp tracker.conf.sample tracker.conf</span><br></pre></td></tr></table></figure>\n\n<p>fastDFS安装完毕。</p>\n<h1 id=\"安装tracker\"><a href=\"#安装tracker\" class=\"headerlink\" title=\"安装tracker\"></a>安装tracker</h1><p>首先创建tracker工作目录。</p>\n<p>这个目录可以自定义, 用来保存tracker的data和log, 我将它保存在了: <code>/home/littleboy/programmingTools/fastdfs/fastdfs_tracker</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ..</span><br><span class=\"line\">mkdir fastdfs_tracker</span><br></pre></td></tr></table></figure>\n\n<p>配置tracker:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/fdfs/tracker.conf</span><br></pre></td></tr></table></figure>\n\n<p>找到下面几处修改:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">line4: disabled=false # 默认开启tracker</span><br><span class=\"line\">line11: port=22122 # 默认端口号</span><br><span class=\"line\">line22: base_path=/home/littleboy/programmingTools/fastdfs/fastdfs_tracker/ # tracker工作目录</span><br><span class=\"line\">line260:  http.server_port=6666 # tracker 服务器端口号, 默认8080</span><br></pre></td></tr></table></figure>\n\n<p>保存修改。</p>\n<p>启动tracker:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service fdfs_trackerd start</span><br></pre></td></tr></table></figure>\n\n<p>如果不能启动则试试:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start fdfs_trackerd</span><br></pre></td></tr></table></figure>\n\n<p>成功后可以看见:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Starting fdfs_trackerd (via systemctl):                    [  OK  ]</span><br></pre></td></tr></table></figure>\n\n<p>跳转到 tracker 工作目录下可以看到多了data和log文件夹, 然后我们需要将这个加入开机启动, 首先需要给执行权限:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x /etc/rc.d/rc.total</span><br><span class=\"line\">vi /etc/rc.d/rc.total</span><br></pre></td></tr></table></figure>\n\n<p>在这个文件最后加上一句话即可:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service fdfs_trackerd start</span><br></pre></td></tr></table></figure>\n\n<p>然后我们查看一下tracker端口监听的情况:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -unltp|grep fdfs</span><br></pre></td></tr></table></figure>\n\n<p>可以看到22122端口监听成功。</p>\n<h1 id=\"安装storage\"><a href=\"#安装storage\" class=\"headerlink\" title=\"安装storage\"></a>安装storage</h1><p>为storage配置工作目录, 由于storage还需要一个目录来存储数据, 所以需要另外多建立一个目录: <code>fastdfs_storage_data</code>。</p>\n<p>修改 storage 的配置文件——storage.conf:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/fdfs/storage.conf</span><br></pre></td></tr></table></figure>\n\n<p>找到下面几处修改即可:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">line4: disabled=false # 默认开启</span><br><span class=\"line\">line11: group_name=group1 # 组名</span><br><span class=\"line\">line24: port=23000 # storage端口, 同一个组的stroage的端口号必须一致</span><br><span class=\"line\">line41: base_path=/home/littleboy/programmingTools/fasdfs/fastdfs_storage # 配置storage的工作目录 </span><br><span class=\"line\">line105: store_path_count=1 # 存储路径个数, 这里要和store_path的个数相匹配</span><br><span class=\"line\">line109: store_path0=/home/littleboy/programmingTools/fasdfs/fastdfs_storage_data # 配置storage的存储路径</span><br><span class=\"line\">line118: tracker_server=192.168.1.3:22122 # 配置tracker服务器的ip</span><br><span class=\"line\">line284: http.server_port=8888 # 配置http的端口号, 可以通过这个段口访问stroage</span><br></pre></td></tr></table></figure>\n\n<p>保存之后, 创建软连接:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /usr/bin/fdfs_storaged /usr/local/bin</span><br></pre></td></tr></table></figure>\n\n<p>启动storage:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service fdfs_storaged start</span><br><span class=\"line\"># 如果不能启动可以试试:</span><br><span class=\"line\">systemctl start fdfs_storaged</span><br></pre></td></tr></table></figure>\n\n<p>可以看到:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Starting fdfs_storaged (via systemctl):                    [  OK  ]</span><br></pre></td></tr></table></figure>\n\n<p>同样, 在<code>/etc/rc.d/rc.local</code>加上启动语句就可以开机自启。</p>\n<p>查看storage是否启动:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -unltp | grep fdfs</span><br></pre></td></tr></table></figure>\n\n<p>至此, fastdfs配置完成, 最后我们可以查看storage是否被注册到了tracker里去:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/bin/fdfs_monitor /etc/fdfs/storage.conf</span><br></pre></td></tr></table></figure>\n\n<p>如果成功可以看到 <code>ip_addr = 192.168.1.3 (localhost.localdomain)  ACTIVE</code> 字样。</p>\n<p>torage安装配置完毕。</p>\n<h1 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h1><p>先修改一下客户端配置文件:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/fdfs/client.conf</span><br><span class=\"line\"></span><br><span class=\"line\">line10: base_path=/home/littleboy/programmingTools/fasdfs/fastdfs_tracker # tracker服务器文件路径</span><br><span class=\"line\"></span><br><span class=\"line\">line13: tracker_server=192.168.1.3:22122 # tracker服务器ip和端口号</span><br><span class=\"line\"></span><br><span class=\"line\">line57: http.tracker_server_port=6666 # tracker http端口号</span><br></pre></td></tr></table></figure>\n\n<p>接下来上传一张图片到centos7测试。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/bin/fdfs_upload_file /etc/fdfs/client.conf /root/测试1.png</span><br></pre></td></tr></table></figure>\n\n<p>成功之后会返回图片的路径。</p>\n<blockquote>\n<p>wheel&#x2F;M00&#x2F;00&#x2F;00&#x2F;wKgBA10ipjGAT1AHAABd0Kc3bLM592.jpg</p>\n</blockquote>\n<p>我们可以去刚才的路径查看是否上传成功:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /home/littleboy/programmingTools/fasdfs/fastdfs_storage_data/data/00/00</span><br><span class=\"line\">ll</span><br></pre></td></tr></table></figure>\n\n<p>data下有256个1级目录, 每级目录下又有256个2级子目录, 总共65536个文件, 新文件会以hash的方式被路由到其中某个子目录下, 然后将文件数据直接作为一个本地文件存储到该目录中。</p>\n<h1 id=\"FastDFS的nginx模块安装\"><a href=\"#FastDFS的nginx模块安装\" class=\"headerlink\" title=\"FastDFS的nginx模块安装\"></a>FastDFS的nginx模块安装</h1><p>如果我们直接使用 <code>http://127.0.0.1:9999/wheel/M00/00/00wKgBA10ipjGAT1AHAABd0Kc3bLM592.jpg</code>去访问图片, 会发现访问不到, 因为在fastDFS 4.05的时候, 就已经 remove embed HTTP support:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Version 4.05  2012-12-30</span><br><span class=\"line\"> * client/fdfs_upload_file.c can specify storage ip port and store path index</span><br><span class=\"line\"> * add connection pool</span><br><span class=\"line\"> * client load storage ids config</span><br><span class=\"line\"> * common/ini_file_reader.c does NOT call chdir</span><br><span class=\"line\"> * keep the mtime of file same</span><br><span class=\"line\"> * use g_current_time instead of call time function</span><br><span class=\"line\"> * remove embed HTTP support</span><br></pre></td></tr></table></figure>\n\n<p>我们在使用fastDFS部署一个分布式文件系统的时候, 通过fastDFS的客户端API来进行文件的上传, 下载和删除等操作。同时通过fastDFS的HTTP服务器来提供HTTP访问服务。但是fastDFS的HTTP服务较为简单, 无法提供负载均衡等高性能的服务, 所以fastDFS的开发者——淘宝的架构师余庆同学, 为我们提供了nginx上使用的fastDFS模块。</p>\n<p>fastDFS通过tracker服务器, 将文件放在storage服务器存储, 但是同组之间的服务器需要复制文件, 有延迟的问题。假设tracker服务器将文件上传到了192.168.1.3, 文件ID已经返回给客户端, 这时, 后台会将这个文件复制到192.168.1.3, 如果复制没有完成, 客户端就用这个ID在这台服务器上获取文件, 肯定会出现错误。这个fastdfs-nginx-module可以重定向连接到源服务器获取文件, 避免客户端由于复制延迟的问题, 出现错误。</p>\n<h2 id=\"nginx安装\"><a href=\"#nginx安装\" class=\"headerlink\" title=\"nginx安装\"></a>nginx安装</h2><p>在安装nginx之前要安装nginx所需要的依赖:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install pcre pcre-devel</span><br><span class=\"line\">yum -y install zlib zlib-devel</span><br><span class=\"line\">yum -y install openssl openssl-devel</span><br></pre></td></tr></table></figure>\n\n<p>解压nginx和fastdfs-nginx-module:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxf nginx-1.12.0.tar.gz</span><br><span class=\"line\">unzip fastdfs-nginx-module-1.20.zip</span><br></pre></td></tr></table></figure>\n\n<p>然后进入nginx安装目录, 添加fastdfs-nginx-module:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --prefix=/usr/local/nginx --add-module=/home/littleboy/programmingTools/fastdfs/fastdfs-nginx-module-1.20/src</span><br></pre></td></tr></table></figure>\n\n<p>OK, 大家注意, 这里如果继续make的话, 大概率会报<code>fdfs_define.h:15:27: 致命错误：common_define.h：没有那个文件或目录</code> 这个错, 那么就要感谢<a href=\"https://blog.csdn.net/zzzgd_666/article/details/81911892\">这篇博客</a>的作者了, 那么总是解决办法就是:<br>修改<code>fastdfs-nginx-module-1.20/src/config</code>文件:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi fastdfs-nginx-module-1.20/src/config</span><br><span class=\"line\"></span><br><span class=\"line\">line6: ngx_module_incs=&quot;/usr/include/fastdfs /usr/include/fastcommon/&quot;</span><br><span class=\"line\">line15: CORE_INCS=&quot;$CORE_INCS /usr/include/fastdfs /usr/include/fastcommon/&quot;</span><br></pre></td></tr></table></figure>\n\n<p>改了这两行之后, 重新 configure 一下, 然后执行:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n\n<p>nginx的默认目录是&#x2F;usr&#x2F;local&#x2F;nginx, 配置storage nginx:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/local/nginx/conf</span><br><span class=\"line\">vi nginx.conf</span><br></pre></td></tr></table></figure>\n\n<p>注意:</p>\n<p>这里是我遇到的第二个坑:</p>\n<p>首先第一行:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">line 2: user nobody;</span><br><span class=\"line\"># 改成:</span><br><span class=\"line\">user root;</span><br><span class=\"line\">line 36: listen 9999;</span><br><span class=\"line\">line 48:</span><br><span class=\"line\">location /wheel/M00 &#123;</span><br><span class=\"line\">    root /home/littleboy/programmingTools/fastdfs/fastdfs_storage_data/data;</span><br><span class=\"line\">    ngx_fastdfs_module;</span><br><span class=\"line\">    proxy_connect_timeout 300;</span><br><span class=\"line\">    proxy_read_timeout 300;</span><br><span class=\"line\">    proxy_send_timeout 300;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>修改一下http.conf:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 修改为已经存在的一个html或者图片之类的。</span><br><span class=\"line\">http.anti_steal.token_check_fail=/home/fastdfs/anti-steal.jpg</span><br></pre></td></tr></table></figure>\n\n<p>然后进入fastDFS安装时解压过的目录, 将http.conf和mime.types拷贝到&#x2F;etc&#x2F;fdfs目录下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /home/littleboy/prorammingTools/fastdfs/fastdfs-5.11/conf</span><br><span class=\"line\">cp http.conf /etc/fdfs</span><br><span class=\"line\">cp http.conf /etc/fdfs</span><br><span class=\"line\">cp mime.types /etc/fdfs</span><br></pre></td></tr></table></figure>\n\n<p>另外还需要把fastsdfs-nginx-module安装目录的src下的mod-fastdfs.conf也拷贝过来:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp /home/littleboy/programmingTools/fastdfs/fastdfs-nginx-module-1.20/src/mod_fastdfs.conf /etc/fdfs</span><br></pre></td></tr></table></figure>\n\n<p>修改mod_fastdfs.conf:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/fdfs/mod_fastdfs.conf</span><br></pre></td></tr></table></figure>\n\n<p>对一下几行进行修改:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">line10: base_path=/home/littleboy/programmingTools/fastdfs/fastdfs_storage</span><br><span class=\"line\">line40: tracker_server=192.168.1.3:22122</span><br><span class=\"line\">line44: storage_server_port=23000</span><br><span class=\"line\">line53: url_have_group_name = true</span><br><span class=\"line\">line62: store_path0=/home/littleboy/programmingTools/fasdfs/fastdfs_storage_data</span><br><span class=\"line\">line113: group_count = 1</span><br><span class=\"line\"></span><br><span class=\"line\"># 在文件的最后设置group</span><br><span class=\"line\">[group1]</span><br><span class=\"line\">group_name=wheel</span><br><span class=\"line\">storage_server_port=23000</span><br><span class=\"line\">store_path_count=2</span><br><span class=\"line\">store_path0=/home/littleboy/programmingTools/fasdfs/fastdfs_storage_data</span><br><span class=\"line\">store_path1=/home/littleboy/programmingTools/fasdfs/fastdfs_storage_data</span><br></pre></td></tr></table></figure>\n\n<p>创建M00至storage存储目录的符号连接:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /home/littleboy/programmingTools/fastdfs/fastdfs_storage_data/data/ /home/littleboy/programmingTools/fastdfs/fastdfs_storage_data/M00</span><br></pre></td></tr></table></figure>\n\n<p>启动nginx:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/nginx/sbin/nginx</span><br></pre></td></tr></table></figure>\n\n<p>访问127.0.0.1:9999, 可以看到<code>welcome to nginx</code>,接下来我们还要配置tracker的nginx。</p>\n<h2 id=\"配置tracker-nginx\"><a href=\"#配置tracker-nginx\" class=\"headerlink\" title=\"配置tracker nginx\"></a>配置tracker nginx</h2><p>在解压一个nginx:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir nginx-1.12.0-2</span><br><span class=\"line\">cd nginx-1.12.0-2</span><br><span class=\"line\">tar -zxf nginx-1.12.0.tar.gz nginx-1.12.0</span><br></pre></td></tr></table></figure>\n\n<p>然后再configur一下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --prefix=/usr/local/nginx2 --add-module=/home/littleboy/programmingTools/fastdfs/fastdfs-nginx-module-1.20/src</span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n\n<p>接下来还是修改nginx.conf:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /usr/local/nginx2/conf/nginx.conf</span><br><span class=\"line\"></span><br><span class=\"line\">line2: user root;</span><br><span class=\"line\">line35: # 这里加入一个upstream, 指向tracker的nginx地址:</span><br><span class=\"line\">upstream fdfs_wheel &#123;</span><br><span class=\"line\">    server 192.168.1.3:9999;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> server &#123;</span><br><span class=\"line\">        listen       9989;</span><br><span class=\"line\">        server_name  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">        #charset koi8-r;</span><br><span class=\"line\"></span><br><span class=\"line\">        #access_log  logs/host.access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">            index  index.html index.htm;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        location /wheel/M00 &#123;</span><br><span class=\"line\">            proxy_pass http://fdfs_wheel;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        # 省略下面的代码</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>启动nginx:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/nginx2/sbin/nginx</span><br></pre></td></tr></table></figure>\n\n<p>现在访问<code>192.168.1.3:9999/wheel/M00/00/00/wKgBA10ipjGAT1AHAABd0Kc3bLM592.jpg</code>, 应该就可以访问到图片了。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>不容易啊不容易。</p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>根据<a href=\"https://blog.csdn.net/qq_34301871/article/details/80060235\">这篇博客</a>, 我也是花了半天时间才配置好fastDFS和nginx, 那么话不多说, 开始吧。</p>","more":"<h1 id=\"下载物料\"><a href=\"#下载物料\" class=\"headerlink\" title=\"下载物料\"></a>下载物料</h1><p>首先下载<a href=\"https://github.com/happyfish100/fastdfs/releases\">fastDFS的 5.11</a>版本。</p>\n<p>接着下载<a href=\"https://github.com/happyfish100/fastdfs-nginx-module/releases\">fastdfs-nginx-module</a></p>\n<p>接着下载<a href=\"https://github.com/happyfish100/libfastcommon/releases\">libfastcommon</a></p>\n<p>接着下载<a href=\"http://nginx.org/download/\">nginx</a></p>\n<p>**注意, fastdfs 5.11版本对应fastdfs-nginx-module的1.20版本 **</p>\n<p><strong>fastdfs 5.10版本对应fastdfs-nginx-module的1.19版本</strong></p>\n<h1 id=\"系统环境准备\"><a href=\"#系统环境准备\" class=\"headerlink\" title=\"系统环境准备\"></a>系统环境准备</h1><p>下载所需工具的运行命令:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install zlib zlib-devel pcre pcre-devel gcc gcc-c++ openssl openssl-devel libevent libevent-devel perl unzip net-tools wget</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"安装libfastcommon\"><a href=\"#安装libfastcommon\" class=\"headerlink\" title=\"安装libfastcommon\"></a>安装libfastcommon</h1><blockquote>\n<p>约定: 之前的物料的下载路径是 <code>/home/littleboy/programmingTools/fastdfs</code><br>nginx的下载的路径是 <code>/home/littleboy/programmingTools/nginx</code></p>\n</blockquote>\n<p>首先跳转到物料所在路径:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /home/littleboy/programmingTools/fastdfs</span><br></pre></td></tr></table></figure>\n\n<p>解压 libfastcommon:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unzip libfastcommon-1.0.39.zip</span><br><span class=\"line\">cd  libfastcommon-1.0.39</span><br><span class=\"line\">ll</span><br></pre></td></tr></table></figure>\n\n<p>可以看到一个make.sh。</p>\n<p>开始安装:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./make.sh</span><br><span class=\"line\">./make.sh install</span><br></pre></td></tr></table></figure>\n\n<p>不出意外是不会报错的, 然后可以建立软连接:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /usr/lib64/libfastcommon.so /usr/local/lib/libfastcommon.so</span><br><span class=\"line\">ln -s /usr/lib64/libfastcommon.so /usr/lib/libfastcommon.so</span><br><span class=\"line\">ln -s /usr/lib64/libfdfsclient.so /usr/local/lib/libfdfsclient.so</span><br><span class=\"line\">ln -s /usr/lib64/libfdfsclient.so /usr/lib/libfdfsclient.so</span><br></pre></td></tr></table></figure>\n\n<p>libfastcommon 安装完毕。</p>\n<h1 id=\"安装fastdfs\"><a href=\"#安装fastdfs\" class=\"headerlink\" title=\"安装fastdfs\"></a>安装fastdfs</h1><p>现在的工作目录是: <code>/home/littleboy/programmingTools/fastdfs/libcommon-1.0.39</code></p>\n<p>回到上一级目录, 然后解压fastdfs:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ..</span><br><span class=\"line\">unzip fastdfs-5.11.zip</span><br><span class=\"line\">cd fastdfs-5.11</span><br><span class=\"line\">ll</span><br></pre></td></tr></table></figure>\n\n<p>同样的, 执行 make.sh:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./make.sh</span><br><span class=\"line\">./make.sh install</span><br></pre></td></tr></table></figure>\n\n<p>不出意外应该也不会报错, 成功之后可以查看安装目录:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ll /etc/fastdfs</span><br></pre></td></tr></table></figure>\n\n<p>可以看到:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-rw-r--r--. 1 root root  1461 7月   6 11:10 client.conf.sample</span><br><span class=\"line\">-rw-r--r--. 1 root root  7927 7月   6 11:10 storage.conf.sample</span><br><span class=\"line\">-rw-r--r--. 1 root root  7389 7月   6 11:10 tracker.conf.sample</span><br></pre></td></tr></table></figure>\n\n<p>我们需要所有的文件都复制一份, 去掉sample:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp client.conf.sample client.conf</span><br><span class=\"line\">cp storage.conf.sample storage.conf</span><br><span class=\"line\">cp tracker.conf.sample tracker.conf</span><br></pre></td></tr></table></figure>\n\n<p>fastDFS安装完毕。</p>\n<h1 id=\"安装tracker\"><a href=\"#安装tracker\" class=\"headerlink\" title=\"安装tracker\"></a>安装tracker</h1><p>首先创建tracker工作目录。</p>\n<p>这个目录可以自定义, 用来保存tracker的data和log, 我将它保存在了: <code>/home/littleboy/programmingTools/fastdfs/fastdfs_tracker</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ..</span><br><span class=\"line\">mkdir fastdfs_tracker</span><br></pre></td></tr></table></figure>\n\n<p>配置tracker:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/fdfs/tracker.conf</span><br></pre></td></tr></table></figure>\n\n<p>找到下面几处修改:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">line4: disabled=false # 默认开启tracker</span><br><span class=\"line\">line11: port=22122 # 默认端口号</span><br><span class=\"line\">line22: base_path=/home/littleboy/programmingTools/fastdfs/fastdfs_tracker/ # tracker工作目录</span><br><span class=\"line\">line260:  http.server_port=6666 # tracker 服务器端口号, 默认8080</span><br></pre></td></tr></table></figure>\n\n<p>保存修改。</p>\n<p>启动tracker:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service fdfs_trackerd start</span><br></pre></td></tr></table></figure>\n\n<p>如果不能启动则试试:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start fdfs_trackerd</span><br></pre></td></tr></table></figure>\n\n<p>成功后可以看见:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Starting fdfs_trackerd (via systemctl):                    [  OK  ]</span><br></pre></td></tr></table></figure>\n\n<p>跳转到 tracker 工作目录下可以看到多了data和log文件夹, 然后我们需要将这个加入开机启动, 首先需要给执行权限:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x /etc/rc.d/rc.total</span><br><span class=\"line\">vi /etc/rc.d/rc.total</span><br></pre></td></tr></table></figure>\n\n<p>在这个文件最后加上一句话即可:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service fdfs_trackerd start</span><br></pre></td></tr></table></figure>\n\n<p>然后我们查看一下tracker端口监听的情况:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -unltp|grep fdfs</span><br></pre></td></tr></table></figure>\n\n<p>可以看到22122端口监听成功。</p>\n<h1 id=\"安装storage\"><a href=\"#安装storage\" class=\"headerlink\" title=\"安装storage\"></a>安装storage</h1><p>为storage配置工作目录, 由于storage还需要一个目录来存储数据, 所以需要另外多建立一个目录: <code>fastdfs_storage_data</code>。</p>\n<p>修改 storage 的配置文件——storage.conf:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/fdfs/storage.conf</span><br></pre></td></tr></table></figure>\n\n<p>找到下面几处修改即可:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">line4: disabled=false # 默认开启</span><br><span class=\"line\">line11: group_name=group1 # 组名</span><br><span class=\"line\">line24: port=23000 # storage端口, 同一个组的stroage的端口号必须一致</span><br><span class=\"line\">line41: base_path=/home/littleboy/programmingTools/fasdfs/fastdfs_storage # 配置storage的工作目录 </span><br><span class=\"line\">line105: store_path_count=1 # 存储路径个数, 这里要和store_path的个数相匹配</span><br><span class=\"line\">line109: store_path0=/home/littleboy/programmingTools/fasdfs/fastdfs_storage_data # 配置storage的存储路径</span><br><span class=\"line\">line118: tracker_server=192.168.1.3:22122 # 配置tracker服务器的ip</span><br><span class=\"line\">line284: http.server_port=8888 # 配置http的端口号, 可以通过这个段口访问stroage</span><br></pre></td></tr></table></figure>\n\n<p>保存之后, 创建软连接:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /usr/bin/fdfs_storaged /usr/local/bin</span><br></pre></td></tr></table></figure>\n\n<p>启动storage:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service fdfs_storaged start</span><br><span class=\"line\"># 如果不能启动可以试试:</span><br><span class=\"line\">systemctl start fdfs_storaged</span><br></pre></td></tr></table></figure>\n\n<p>可以看到:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Starting fdfs_storaged (via systemctl):                    [  OK  ]</span><br></pre></td></tr></table></figure>\n\n<p>同样, 在<code>/etc/rc.d/rc.local</code>加上启动语句就可以开机自启。</p>\n<p>查看storage是否启动:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -unltp | grep fdfs</span><br></pre></td></tr></table></figure>\n\n<p>至此, fastdfs配置完成, 最后我们可以查看storage是否被注册到了tracker里去:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/bin/fdfs_monitor /etc/fdfs/storage.conf</span><br></pre></td></tr></table></figure>\n\n<p>如果成功可以看到 <code>ip_addr = 192.168.1.3 (localhost.localdomain)  ACTIVE</code> 字样。</p>\n<p>torage安装配置完毕。</p>\n<h1 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h1><p>先修改一下客户端配置文件:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/fdfs/client.conf</span><br><span class=\"line\"></span><br><span class=\"line\">line10: base_path=/home/littleboy/programmingTools/fasdfs/fastdfs_tracker # tracker服务器文件路径</span><br><span class=\"line\"></span><br><span class=\"line\">line13: tracker_server=192.168.1.3:22122 # tracker服务器ip和端口号</span><br><span class=\"line\"></span><br><span class=\"line\">line57: http.tracker_server_port=6666 # tracker http端口号</span><br></pre></td></tr></table></figure>\n\n<p>接下来上传一张图片到centos7测试。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/bin/fdfs_upload_file /etc/fdfs/client.conf /root/测试1.png</span><br></pre></td></tr></table></figure>\n\n<p>成功之后会返回图片的路径。</p>\n<blockquote>\n<p>wheel&#x2F;M00&#x2F;00&#x2F;00&#x2F;wKgBA10ipjGAT1AHAABd0Kc3bLM592.jpg</p>\n</blockquote>\n<p>我们可以去刚才的路径查看是否上传成功:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /home/littleboy/programmingTools/fasdfs/fastdfs_storage_data/data/00/00</span><br><span class=\"line\">ll</span><br></pre></td></tr></table></figure>\n\n<p>data下有256个1级目录, 每级目录下又有256个2级子目录, 总共65536个文件, 新文件会以hash的方式被路由到其中某个子目录下, 然后将文件数据直接作为一个本地文件存储到该目录中。</p>\n<h1 id=\"FastDFS的nginx模块安装\"><a href=\"#FastDFS的nginx模块安装\" class=\"headerlink\" title=\"FastDFS的nginx模块安装\"></a>FastDFS的nginx模块安装</h1><p>如果我们直接使用 <code>http://127.0.0.1:9999/wheel/M00/00/00wKgBA10ipjGAT1AHAABd0Kc3bLM592.jpg</code>去访问图片, 会发现访问不到, 因为在fastDFS 4.05的时候, 就已经 remove embed HTTP support:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Version 4.05  2012-12-30</span><br><span class=\"line\"> * client/fdfs_upload_file.c can specify storage ip port and store path index</span><br><span class=\"line\"> * add connection pool</span><br><span class=\"line\"> * client load storage ids config</span><br><span class=\"line\"> * common/ini_file_reader.c does NOT call chdir</span><br><span class=\"line\"> * keep the mtime of file same</span><br><span class=\"line\"> * use g_current_time instead of call time function</span><br><span class=\"line\"> * remove embed HTTP support</span><br></pre></td></tr></table></figure>\n\n<p>我们在使用fastDFS部署一个分布式文件系统的时候, 通过fastDFS的客户端API来进行文件的上传, 下载和删除等操作。同时通过fastDFS的HTTP服务器来提供HTTP访问服务。但是fastDFS的HTTP服务较为简单, 无法提供负载均衡等高性能的服务, 所以fastDFS的开发者——淘宝的架构师余庆同学, 为我们提供了nginx上使用的fastDFS模块。</p>\n<p>fastDFS通过tracker服务器, 将文件放在storage服务器存储, 但是同组之间的服务器需要复制文件, 有延迟的问题。假设tracker服务器将文件上传到了192.168.1.3, 文件ID已经返回给客户端, 这时, 后台会将这个文件复制到192.168.1.3, 如果复制没有完成, 客户端就用这个ID在这台服务器上获取文件, 肯定会出现错误。这个fastdfs-nginx-module可以重定向连接到源服务器获取文件, 避免客户端由于复制延迟的问题, 出现错误。</p>\n<h2 id=\"nginx安装\"><a href=\"#nginx安装\" class=\"headerlink\" title=\"nginx安装\"></a>nginx安装</h2><p>在安装nginx之前要安装nginx所需要的依赖:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install pcre pcre-devel</span><br><span class=\"line\">yum -y install zlib zlib-devel</span><br><span class=\"line\">yum -y install openssl openssl-devel</span><br></pre></td></tr></table></figure>\n\n<p>解压nginx和fastdfs-nginx-module:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxf nginx-1.12.0.tar.gz</span><br><span class=\"line\">unzip fastdfs-nginx-module-1.20.zip</span><br></pre></td></tr></table></figure>\n\n<p>然后进入nginx安装目录, 添加fastdfs-nginx-module:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --prefix=/usr/local/nginx --add-module=/home/littleboy/programmingTools/fastdfs/fastdfs-nginx-module-1.20/src</span><br></pre></td></tr></table></figure>\n\n<p>OK, 大家注意, 这里如果继续make的话, 大概率会报<code>fdfs_define.h:15:27: 致命错误：common_define.h：没有那个文件或目录</code> 这个错, 那么就要感谢<a href=\"https://blog.csdn.net/zzzgd_666/article/details/81911892\">这篇博客</a>的作者了, 那么总是解决办法就是:<br>修改<code>fastdfs-nginx-module-1.20/src/config</code>文件:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi fastdfs-nginx-module-1.20/src/config</span><br><span class=\"line\"></span><br><span class=\"line\">line6: ngx_module_incs=&quot;/usr/include/fastdfs /usr/include/fastcommon/&quot;</span><br><span class=\"line\">line15: CORE_INCS=&quot;$CORE_INCS /usr/include/fastdfs /usr/include/fastcommon/&quot;</span><br></pre></td></tr></table></figure>\n\n<p>改了这两行之后, 重新 configure 一下, 然后执行:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n\n<p>nginx的默认目录是&#x2F;usr&#x2F;local&#x2F;nginx, 配置storage nginx:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/local/nginx/conf</span><br><span class=\"line\">vi nginx.conf</span><br></pre></td></tr></table></figure>\n\n<p>注意:</p>\n<p>这里是我遇到的第二个坑:</p>\n<p>首先第一行:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">line 2: user nobody;</span><br><span class=\"line\"># 改成:</span><br><span class=\"line\">user root;</span><br><span class=\"line\">line 36: listen 9999;</span><br><span class=\"line\">line 48:</span><br><span class=\"line\">location /wheel/M00 &#123;</span><br><span class=\"line\">    root /home/littleboy/programmingTools/fastdfs/fastdfs_storage_data/data;</span><br><span class=\"line\">    ngx_fastdfs_module;</span><br><span class=\"line\">    proxy_connect_timeout 300;</span><br><span class=\"line\">    proxy_read_timeout 300;</span><br><span class=\"line\">    proxy_send_timeout 300;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>修改一下http.conf:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 修改为已经存在的一个html或者图片之类的。</span><br><span class=\"line\">http.anti_steal.token_check_fail=/home/fastdfs/anti-steal.jpg</span><br></pre></td></tr></table></figure>\n\n<p>然后进入fastDFS安装时解压过的目录, 将http.conf和mime.types拷贝到&#x2F;etc&#x2F;fdfs目录下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /home/littleboy/prorammingTools/fastdfs/fastdfs-5.11/conf</span><br><span class=\"line\">cp http.conf /etc/fdfs</span><br><span class=\"line\">cp http.conf /etc/fdfs</span><br><span class=\"line\">cp mime.types /etc/fdfs</span><br></pre></td></tr></table></figure>\n\n<p>另外还需要把fastsdfs-nginx-module安装目录的src下的mod-fastdfs.conf也拷贝过来:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp /home/littleboy/programmingTools/fastdfs/fastdfs-nginx-module-1.20/src/mod_fastdfs.conf /etc/fdfs</span><br></pre></td></tr></table></figure>\n\n<p>修改mod_fastdfs.conf:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/fdfs/mod_fastdfs.conf</span><br></pre></td></tr></table></figure>\n\n<p>对一下几行进行修改:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">line10: base_path=/home/littleboy/programmingTools/fastdfs/fastdfs_storage</span><br><span class=\"line\">line40: tracker_server=192.168.1.3:22122</span><br><span class=\"line\">line44: storage_server_port=23000</span><br><span class=\"line\">line53: url_have_group_name = true</span><br><span class=\"line\">line62: store_path0=/home/littleboy/programmingTools/fasdfs/fastdfs_storage_data</span><br><span class=\"line\">line113: group_count = 1</span><br><span class=\"line\"></span><br><span class=\"line\"># 在文件的最后设置group</span><br><span class=\"line\">[group1]</span><br><span class=\"line\">group_name=wheel</span><br><span class=\"line\">storage_server_port=23000</span><br><span class=\"line\">store_path_count=2</span><br><span class=\"line\">store_path0=/home/littleboy/programmingTools/fasdfs/fastdfs_storage_data</span><br><span class=\"line\">store_path1=/home/littleboy/programmingTools/fasdfs/fastdfs_storage_data</span><br></pre></td></tr></table></figure>\n\n<p>创建M00至storage存储目录的符号连接:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /home/littleboy/programmingTools/fastdfs/fastdfs_storage_data/data/ /home/littleboy/programmingTools/fastdfs/fastdfs_storage_data/M00</span><br></pre></td></tr></table></figure>\n\n<p>启动nginx:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/nginx/sbin/nginx</span><br></pre></td></tr></table></figure>\n\n<p>访问127.0.0.1:9999, 可以看到<code>welcome to nginx</code>,接下来我们还要配置tracker的nginx。</p>\n<h2 id=\"配置tracker-nginx\"><a href=\"#配置tracker-nginx\" class=\"headerlink\" title=\"配置tracker nginx\"></a>配置tracker nginx</h2><p>在解压一个nginx:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir nginx-1.12.0-2</span><br><span class=\"line\">cd nginx-1.12.0-2</span><br><span class=\"line\">tar -zxf nginx-1.12.0.tar.gz nginx-1.12.0</span><br></pre></td></tr></table></figure>\n\n<p>然后再configur一下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --prefix=/usr/local/nginx2 --add-module=/home/littleboy/programmingTools/fastdfs/fastdfs-nginx-module-1.20/src</span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n\n<p>接下来还是修改nginx.conf:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /usr/local/nginx2/conf/nginx.conf</span><br><span class=\"line\"></span><br><span class=\"line\">line2: user root;</span><br><span class=\"line\">line35: # 这里加入一个upstream, 指向tracker的nginx地址:</span><br><span class=\"line\">upstream fdfs_wheel &#123;</span><br><span class=\"line\">    server 192.168.1.3:9999;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> server &#123;</span><br><span class=\"line\">        listen       9989;</span><br><span class=\"line\">        server_name  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">        #charset koi8-r;</span><br><span class=\"line\"></span><br><span class=\"line\">        #access_log  logs/host.access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">            index  index.html index.htm;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        location /wheel/M00 &#123;</span><br><span class=\"line\">            proxy_pass http://fdfs_wheel;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        # 省略下面的代码</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>启动nginx:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/nginx2/sbin/nginx</span><br></pre></td></tr></table></figure>\n\n<p>现在访问<code>192.168.1.3:9999/wheel/M00/00/00/wKgBA10ipjGAT1AHAABd0Kc3bLM592.jpg</code>, 应该就可以访问到图片了。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>不容易啊不容易。</p>"},{"title":"Java的File类的文件列表过滤","date":"2019-04-10T06:43:00.000Z","_content":"\n# 使用FilenameFilter来对文件列表进行过滤\n\n可以通过File类的list()方法查看目录中的所有文件和文件夹, 并通过FilenameFiler来过滤文件列表。\n<!--more-->\n## 思路\n\n实现FilenameFilter接口, 使用正则(Pattern)来对文件或文件夹名进行匹配。\n\n代码:\n\n```java\n/**\n * 使用自定义的文件过滤器过滤指定文件夹内的文件列表并显示\n */\npublic class DirList {\n    public static void main(String[] args) {\n        String list[];\n        File path = new File(\".\");\n        if (args.length == 0) {\n            list = path.list(); \n        } else {\n            list = path.list(new DirFiler(args[0]));\n        }\n        // 通过Arrays的sorts方法对list列表进行排序\n        Arrays.sort(list, String.CASE_INSENSITIVE_ORDER);\n        for (String file : list) {\n            System.out.println(file);\n        }\n    }\n}\n\n/**\n * 实现FilenameFiler接口实现自定义文件过滤器\n */\nclass DirFiler implements FilenameFilter {\n    private Pattern mPattern;\n\n    public DirFiler(String regex) {\n        mPattern = Pattern.compile(regex);\n    }\n\n    @Override\n    public boolean accept(File dir, String name) {\n        return mPattern.matcher(name).matches();\n    }\n}\n```\n\n这里使用了内部类的形式来实现FilenameFiler接口, 那么我们其实可以试一下使用匿名内部类加lambda来替换内部类:\n\n```java\npublic class DirListLambdaVersion {\n    private FilenameFilter getMyFileFilter(String regex) {\n        Pattern pattern = Pattern.complie(regex);\n        return (dir, name) -> pattern.matcher(name).matches();\n    }\n\n    public static void main(String[] args) {\n        String list[];\n        File path = new File(\".\");\n        if (args.length == 0) {\n            list = path.list(); \n        } else {\n            list = path.list(getMyFileFilter(args[0]));\n        }\n        // 通过Arrays的sorts方法对list列表进行排序\n        Arrays.sort(list, String.CASE_INSENSITIVE_ORDER);\n        for (String file : list) {\n            System.out.println(file);\n        }\n    }\n}\n```\n\nmain方法中唯一的变化是将之前的内部类改成我们自己的方法, 我们这里使用lambda实现FilenameFiler接口, 一句话就可以替代之前好几行的内部类实现, 很方便有木有!\n\n下面是直接将lambda表达式写到了main里:\n\n```java\npublic class DirListLambdaVersion {\n    public static void main(String[] args) {\n        String list[];\n        File path = new File(\".\");\n        if (args.length == 0) {\n            list = path.list();\n        } else {\n            Pattern pattern = Pattern.complie(args[0]);\n            list = path.list((path, name) -> pattern.matcher(name).matches());\n        }\n        \n        Arrays.sort(list, String.CASE_INSENSITIVE_ORDER);\n        for (String file : list) {\n            System.out.println(file);\n        }\n    }\n}\n```\n","source":"_posts/back_skill_experience/java/javaBased/java-file-learn.md","raw":"---\ntitle: Java的File类的文件列表过滤\ndate: 2019-04-10 14:43:00\ncategories:\n- 后端技巧/经验\n- java\ntags:\n- java\n- io\n---\n\n# 使用FilenameFilter来对文件列表进行过滤\n\n可以通过File类的list()方法查看目录中的所有文件和文件夹, 并通过FilenameFiler来过滤文件列表。\n<!--more-->\n## 思路\n\n实现FilenameFilter接口, 使用正则(Pattern)来对文件或文件夹名进行匹配。\n\n代码:\n\n```java\n/**\n * 使用自定义的文件过滤器过滤指定文件夹内的文件列表并显示\n */\npublic class DirList {\n    public static void main(String[] args) {\n        String list[];\n        File path = new File(\".\");\n        if (args.length == 0) {\n            list = path.list(); \n        } else {\n            list = path.list(new DirFiler(args[0]));\n        }\n        // 通过Arrays的sorts方法对list列表进行排序\n        Arrays.sort(list, String.CASE_INSENSITIVE_ORDER);\n        for (String file : list) {\n            System.out.println(file);\n        }\n    }\n}\n\n/**\n * 实现FilenameFiler接口实现自定义文件过滤器\n */\nclass DirFiler implements FilenameFilter {\n    private Pattern mPattern;\n\n    public DirFiler(String regex) {\n        mPattern = Pattern.compile(regex);\n    }\n\n    @Override\n    public boolean accept(File dir, String name) {\n        return mPattern.matcher(name).matches();\n    }\n}\n```\n\n这里使用了内部类的形式来实现FilenameFiler接口, 那么我们其实可以试一下使用匿名内部类加lambda来替换内部类:\n\n```java\npublic class DirListLambdaVersion {\n    private FilenameFilter getMyFileFilter(String regex) {\n        Pattern pattern = Pattern.complie(regex);\n        return (dir, name) -> pattern.matcher(name).matches();\n    }\n\n    public static void main(String[] args) {\n        String list[];\n        File path = new File(\".\");\n        if (args.length == 0) {\n            list = path.list(); \n        } else {\n            list = path.list(getMyFileFilter(args[0]));\n        }\n        // 通过Arrays的sorts方法对list列表进行排序\n        Arrays.sort(list, String.CASE_INSENSITIVE_ORDER);\n        for (String file : list) {\n            System.out.println(file);\n        }\n    }\n}\n```\n\nmain方法中唯一的变化是将之前的内部类改成我们自己的方法, 我们这里使用lambda实现FilenameFiler接口, 一句话就可以替代之前好几行的内部类实现, 很方便有木有!\n\n下面是直接将lambda表达式写到了main里:\n\n```java\npublic class DirListLambdaVersion {\n    public static void main(String[] args) {\n        String list[];\n        File path = new File(\".\");\n        if (args.length == 0) {\n            list = path.list();\n        } else {\n            Pattern pattern = Pattern.complie(args[0]);\n            list = path.list((path, name) -> pattern.matcher(name).matches());\n        }\n        \n        Arrays.sort(list, String.CASE_INSENSITIVE_ORDER);\n        for (String file : list) {\n            System.out.println(file);\n        }\n    }\n}\n```\n","slug":"back_skill_experience/java/javaBased/java-file-learn","published":1,"updated":"2022-10-02T16:40:43.486Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejnm002w3vsb6e332q46","content":"<h1 id=\"使用FilenameFilter来对文件列表进行过滤\"><a href=\"#使用FilenameFilter来对文件列表进行过滤\" class=\"headerlink\" title=\"使用FilenameFilter来对文件列表进行过滤\"></a>使用FilenameFilter来对文件列表进行过滤</h1><p>可以通过File类的list()方法查看目录中的所有文件和文件夹, 并通过FilenameFiler来过滤文件列表。</p>\n<span id=\"more\"></span>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>实现FilenameFilter接口, 使用正则(Pattern)来对文件或文件夹名进行匹配。</p>\n<p>代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 使用自定义的文件过滤器过滤指定文件夹内的文件列表并显示</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DirList</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        String list[];</span><br><span class=\"line\">        File path = <span class=\"keyword\">new</span> File(<span class=\"string\">&quot;.&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (args.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            list = path.list(); </span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            list = path.list(<span class=\"keyword\">new</span> DirFiler(args[<span class=\"number\">0</span>]));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 通过Arrays的sorts方法对list列表进行排序</span></span><br><span class=\"line\">        Arrays.sort(list, String.CASE_INSENSITIVE_ORDER);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String file : list) &#123;</span><br><span class=\"line\">            System.out.println(file);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 实现FilenameFiler接口实现自定义文件过滤器</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DirFiler</span> <span class=\"keyword\">implements</span> <span class=\"title\">FilenameFilter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Pattern mPattern;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DirFiler</span><span class=\"params\">(String regex)</span> </span>&#123;</span><br><span class=\"line\">        mPattern = Pattern.compile(regex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">accept</span><span class=\"params\">(File dir, String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mPattern.matcher(name).matches();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里使用了内部类的形式来实现FilenameFiler接口, 那么我们其实可以试一下使用匿名内部类加lambda来替换内部类:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DirListLambdaVersion</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> FilenameFilter <span class=\"title\">getMyFileFilter</span><span class=\"params\">(String regex)</span> </span>&#123;</span><br><span class=\"line\">        Pattern pattern = Pattern.complie(regex);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (dir, name) -&gt; pattern.matcher(name).matches();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        String list[];</span><br><span class=\"line\">        File path = <span class=\"keyword\">new</span> File(<span class=\"string\">&quot;.&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (args.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            list = path.list(); </span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            list = path.list(getMyFileFilter(args[<span class=\"number\">0</span>]));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 通过Arrays的sorts方法对list列表进行排序</span></span><br><span class=\"line\">        Arrays.sort(list, String.CASE_INSENSITIVE_ORDER);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String file : list) &#123;</span><br><span class=\"line\">            System.out.println(file);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>main方法中唯一的变化是将之前的内部类改成我们自己的方法, 我们这里使用lambda实现FilenameFiler接口, 一句话就可以替代之前好几行的内部类实现, 很方便有木有!</p>\n<p>下面是直接将lambda表达式写到了main里:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DirListLambdaVersion</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        String list[];</span><br><span class=\"line\">        File path = <span class=\"keyword\">new</span> File(<span class=\"string\">&quot;.&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (args.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            list = path.list();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            Pattern pattern = Pattern.complie(args[<span class=\"number\">0</span>]);</span><br><span class=\"line\">            list = path.list((path, name) -&gt; pattern.matcher(name).matches());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        Arrays.sort(list, String.CASE_INSENSITIVE_ORDER);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String file : list) &#123;</span><br><span class=\"line\">            System.out.println(file);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"使用FilenameFilter来对文件列表进行过滤\"><a href=\"#使用FilenameFilter来对文件列表进行过滤\" class=\"headerlink\" title=\"使用FilenameFilter来对文件列表进行过滤\"></a>使用FilenameFilter来对文件列表进行过滤</h1><p>可以通过File类的list()方法查看目录中的所有文件和文件夹, 并通过FilenameFiler来过滤文件列表。</p>","more":"<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>实现FilenameFilter接口, 使用正则(Pattern)来对文件或文件夹名进行匹配。</p>\n<p>代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 使用自定义的文件过滤器过滤指定文件夹内的文件列表并显示</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DirList</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        String list[];</span><br><span class=\"line\">        File path = <span class=\"keyword\">new</span> File(<span class=\"string\">&quot;.&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (args.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            list = path.list(); </span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            list = path.list(<span class=\"keyword\">new</span> DirFiler(args[<span class=\"number\">0</span>]));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 通过Arrays的sorts方法对list列表进行排序</span></span><br><span class=\"line\">        Arrays.sort(list, String.CASE_INSENSITIVE_ORDER);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String file : list) &#123;</span><br><span class=\"line\">            System.out.println(file);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 实现FilenameFiler接口实现自定义文件过滤器</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DirFiler</span> <span class=\"keyword\">implements</span> <span class=\"title\">FilenameFilter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Pattern mPattern;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DirFiler</span><span class=\"params\">(String regex)</span> </span>&#123;</span><br><span class=\"line\">        mPattern = Pattern.compile(regex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">accept</span><span class=\"params\">(File dir, String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mPattern.matcher(name).matches();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里使用了内部类的形式来实现FilenameFiler接口, 那么我们其实可以试一下使用匿名内部类加lambda来替换内部类:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DirListLambdaVersion</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> FilenameFilter <span class=\"title\">getMyFileFilter</span><span class=\"params\">(String regex)</span> </span>&#123;</span><br><span class=\"line\">        Pattern pattern = Pattern.complie(regex);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (dir, name) -&gt; pattern.matcher(name).matches();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        String list[];</span><br><span class=\"line\">        File path = <span class=\"keyword\">new</span> File(<span class=\"string\">&quot;.&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (args.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            list = path.list(); </span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            list = path.list(getMyFileFilter(args[<span class=\"number\">0</span>]));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 通过Arrays的sorts方法对list列表进行排序</span></span><br><span class=\"line\">        Arrays.sort(list, String.CASE_INSENSITIVE_ORDER);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String file : list) &#123;</span><br><span class=\"line\">            System.out.println(file);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>main方法中唯一的变化是将之前的内部类改成我们自己的方法, 我们这里使用lambda实现FilenameFiler接口, 一句话就可以替代之前好几行的内部类实现, 很方便有木有!</p>\n<p>下面是直接将lambda表达式写到了main里:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DirListLambdaVersion</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        String list[];</span><br><span class=\"line\">        File path = <span class=\"keyword\">new</span> File(<span class=\"string\">&quot;.&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (args.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            list = path.list();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            Pattern pattern = Pattern.complie(args[<span class=\"number\">0</span>]);</span><br><span class=\"line\">            list = path.list((path, name) -&gt; pattern.matcher(name).matches());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        Arrays.sort(list, String.CASE_INSENSITIVE_ORDER);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String file : list) &#123;</span><br><span class=\"line\">            System.out.println(file);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"java在linux系统上创建目录遇到的问题","date":"2019-05-16T15:36:00.000Z","_content":"\n# 问题\n\n如何在linux系统中创建多级目录, 比如`/home/usr/programTools/test.sh`?\n\n<!--more-->\n\n# 解决办法\n\n使用`mkdirs()`方法。\n\n例:\n\n```java\nFile dir = new File(\"/home/usr/programTools/test.sh\");\n\nif (!dir.exists()) {\n    dir.mkdirs();\n}\n```\n","source":"_posts/back_skill_experience/java/javaBased/java-linux-mkdir.md","raw":"---\ntitle: java在linux系统上创建目录遇到的问题\ndate: 2019-05-16 23:36:00\ncategories:\n- 后端技巧/经验\n- java\ntags:\n- java\n---\n\n# 问题\n\n如何在linux系统中创建多级目录, 比如`/home/usr/programTools/test.sh`?\n\n<!--more-->\n\n# 解决办法\n\n使用`mkdirs()`方法。\n\n例:\n\n```java\nFile dir = new File(\"/home/usr/programTools/test.sh\");\n\nif (!dir.exists()) {\n    dir.mkdirs();\n}\n```\n","slug":"back_skill_experience/java/javaBased/java-linux-mkdir","published":1,"updated":"2022-10-02T16:40:56.247Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejnq002y3vsbh4wf3it5","content":"<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>如何在linux系统中创建多级目录, 比如<code>/home/usr/programTools/test.sh</code>?</p>\n<span id=\"more\"></span>\n\n<h1 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h1><p>使用<code>mkdirs()</code>方法。</p>\n<p>例:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">File dir = <span class=\"keyword\">new</span> File(<span class=\"string\">&quot;/home/usr/programTools/test.sh&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!dir.exists()) &#123;</span><br><span class=\"line\">    dir.mkdirs();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>如何在linux系统中创建多级目录, 比如<code>/home/usr/programTools/test.sh</code>?</p>","more":"<h1 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h1><p>使用<code>mkdirs()</code>方法。</p>\n<p>例:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">File dir = <span class=\"keyword\">new</span> File(<span class=\"string\">&quot;/home/usr/programTools/test.sh&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!dir.exists()) &#123;</span><br><span class=\"line\">    dir.mkdirs();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"javafx springboot+maven打包","date":"2019-05-16T14:46:34.000Z","_content":"\n# 前言\n\n最近在用javafx写窗体应用, 突发奇想既然都是java, 是不是可以使用springboot来开发? 上网一搜还真有, 本片摘自[JavaFx系列教程之一：JavaFx+Springboot+Maven 开发打包教程](https://segmentfault.com/a/1190000014037443#articleHeader2)\n\n<!--more-->\n# 依赖\n\njavafx的springboot支持库, 官方的没有, 开源的有不少, 我使用的是[springboot-javafx-support](https://github.com/roskenet/springboot-javafx-support), 这个库文档比较全, [文档地址](https://www.felixroske.de/page/programmierung/index.html)。\n\nmaven的javafx[打包工具](https://github.com/javafx-maven-plugin/javafx-maven-plugin)。\n\n# Maven配置\n\n新建一个maven工程, 并将依赖和插件配置好, 主要如下:\n\n```xml\n<properties>\n    <spring.boot.version>1.5.1.RELEASE</spring.boot.version>\n    <springboot-javafx-support.version>1.3.15</springboot-javafx-support.version>\n</properties>\n<dependencies>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-actuator</artifactId>\n        <version>${spring.boot.version}</version>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter</artifactId>\n        <version>${spring.boot.version}</version>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-log4j2</artifactId>\n        <version>${spring.boot.version}</version>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-test</artifactId>\n        <version>${spring.boot.version}</version>\n        <scope>test</scope>\n    </dependency>\n    <dependency>\n        <groupId>de.roskenet</groupId>\n        <artifactId>springboot-javafx-support</artifactId>\n        <version>${springboot-javafx-support.version}</version>\n    </dependency>\n</dependencies>\n<build>\n    <plugins>\n        <plugin>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-maven-plugin</artifactId>\n        </plugin>\n        <plugin>\n            <groupId>com.zenjava</groupId>\n            <artifactId>javafx-maven-plugin</artifactId>\n            <configuration>\n                <mainClass>com.littleboy.main.Main</mainClass>\n                <vendor>littleboy</vendor>\n            </configuration>\n        </plugin>\n    </plugins>\n</build>\n```\n\n> 其中，比较重要的是：`<mainClass>com.littleboy.main.Main</mainClass>` 这个是打包的时候的 main 类。`<vendor>littleboy</vendor>`是组织名称。\n\n# MainController\n\n配置好之后就可以编写启动类了:\n\n```java\n@SpringBootApplication\npublic class Main extends AbstractJavaFxApplicationSupport {\n\n    @Override\n    public void start(Stage primaryStage) {\n        //TODO\n    }\n\n    public static void main(String[] args) {\n        launch(args);\n    }\n```\n\n# 打包\n\n可以直接使用idea的artifacts来进行打包, 打包之后有可能会报找不到主类, 需要在`manifest file`中指定主类。\n","source":"_posts/back_skill_experience/java/javafx/javafx-springboot-maven.md","raw":"---\ntitle: javafx springboot+maven打包\ndate: 2019-05-16 22:46:34\ncategories:\n- 后端技巧/经验\n- javafx\ntags:\n- java\n- javafx\n---\n\n# 前言\n\n最近在用javafx写窗体应用, 突发奇想既然都是java, 是不是可以使用springboot来开发? 上网一搜还真有, 本片摘自[JavaFx系列教程之一：JavaFx+Springboot+Maven 开发打包教程](https://segmentfault.com/a/1190000014037443#articleHeader2)\n\n<!--more-->\n# 依赖\n\njavafx的springboot支持库, 官方的没有, 开源的有不少, 我使用的是[springboot-javafx-support](https://github.com/roskenet/springboot-javafx-support), 这个库文档比较全, [文档地址](https://www.felixroske.de/page/programmierung/index.html)。\n\nmaven的javafx[打包工具](https://github.com/javafx-maven-plugin/javafx-maven-plugin)。\n\n# Maven配置\n\n新建一个maven工程, 并将依赖和插件配置好, 主要如下:\n\n```xml\n<properties>\n    <spring.boot.version>1.5.1.RELEASE</spring.boot.version>\n    <springboot-javafx-support.version>1.3.15</springboot-javafx-support.version>\n</properties>\n<dependencies>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-actuator</artifactId>\n        <version>${spring.boot.version}</version>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter</artifactId>\n        <version>${spring.boot.version}</version>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-log4j2</artifactId>\n        <version>${spring.boot.version}</version>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-test</artifactId>\n        <version>${spring.boot.version}</version>\n        <scope>test</scope>\n    </dependency>\n    <dependency>\n        <groupId>de.roskenet</groupId>\n        <artifactId>springboot-javafx-support</artifactId>\n        <version>${springboot-javafx-support.version}</version>\n    </dependency>\n</dependencies>\n<build>\n    <plugins>\n        <plugin>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-maven-plugin</artifactId>\n        </plugin>\n        <plugin>\n            <groupId>com.zenjava</groupId>\n            <artifactId>javafx-maven-plugin</artifactId>\n            <configuration>\n                <mainClass>com.littleboy.main.Main</mainClass>\n                <vendor>littleboy</vendor>\n            </configuration>\n        </plugin>\n    </plugins>\n</build>\n```\n\n> 其中，比较重要的是：`<mainClass>com.littleboy.main.Main</mainClass>` 这个是打包的时候的 main 类。`<vendor>littleboy</vendor>`是组织名称。\n\n# MainController\n\n配置好之后就可以编写启动类了:\n\n```java\n@SpringBootApplication\npublic class Main extends AbstractJavaFxApplicationSupport {\n\n    @Override\n    public void start(Stage primaryStage) {\n        //TODO\n    }\n\n    public static void main(String[] args) {\n        launch(args);\n    }\n```\n\n# 打包\n\n可以直接使用idea的artifacts来进行打包, 打包之后有可能会报找不到主类, 需要在`manifest file`中指定主类。\n","slug":"back_skill_experience/java/javafx/javafx-springboot-maven","published":1,"updated":"2022-10-02T16:41:06.785Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejnu00313vsbbqow6wpe","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最近在用javafx写窗体应用, 突发奇想既然都是java, 是不是可以使用springboot来开发? 上网一搜还真有, 本片摘自<a href=\"https://segmentfault.com/a/1190000014037443#articleHeader2\">JavaFx系列教程之一：JavaFx+Springboot+Maven 开发打包教程</a></p>\n<span id=\"more\"></span>\n<h1 id=\"依赖\"><a href=\"#依赖\" class=\"headerlink\" title=\"依赖\"></a>依赖</h1><p>javafx的springboot支持库, 官方的没有, 开源的有不少, 我使用的是<a href=\"https://github.com/roskenet/springboot-javafx-support\">springboot-javafx-support</a>, 这个库文档比较全, <a href=\"https://www.felixroske.de/page/programmierung/index.html\">文档地址</a>。</p>\n<p>maven的javafx<a href=\"https://github.com/javafx-maven-plugin/javafx-maven-plugin\">打包工具</a>。</p>\n<h1 id=\"Maven配置\"><a href=\"#Maven配置\" class=\"headerlink\" title=\"Maven配置\"></a>Maven配置</h1><p>新建一个maven工程, 并将依赖和插件配置好, 主要如下:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">spring.boot.version</span>&gt;</span>1.5.1.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">spring.boot.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">springboot-javafx-support.version</span>&gt;</span>1.3.15<span class=\"tag\">&lt;/<span class=\"name\">springboot-javafx-support.version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.boot.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.boot.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-log4j2<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.boot.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.boot.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>de.roskenet<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>springboot-javafx-support<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;springboot-javafx-support.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.zenjava<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>javafx-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">mainClass</span>&gt;</span>com.littleboy.main.Main<span class=\"tag\">&lt;/<span class=\"name\">mainClass</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">vendor</span>&gt;</span>littleboy<span class=\"tag\">&lt;/<span class=\"name\">vendor</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>其中，比较重要的是：<code>&lt;mainClass&gt;com.littleboy.main.Main&lt;/mainClass&gt;</code> 这个是打包的时候的 main 类。<code>&lt;vendor&gt;littleboy&lt;/vendor&gt;</code>是组织名称。</p>\n</blockquote>\n<h1 id=\"MainController\"><a href=\"#MainController\" class=\"headerlink\" title=\"MainController\"></a>MainController</h1><p>配置好之后就可以编写启动类了:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractJavaFxApplicationSupport</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">start</span><span class=\"params\">(Stage primaryStage)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//TODO</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        launch(args);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"打包\"><a href=\"#打包\" class=\"headerlink\" title=\"打包\"></a>打包</h1><p>可以直接使用idea的artifacts来进行打包, 打包之后有可能会报找不到主类, 需要在<code>manifest file</code>中指定主类。</p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最近在用javafx写窗体应用, 突发奇想既然都是java, 是不是可以使用springboot来开发? 上网一搜还真有, 本片摘自<a href=\"https://segmentfault.com/a/1190000014037443#articleHeader2\">JavaFx系列教程之一：JavaFx+Springboot+Maven 开发打包教程</a></p>","more":"<h1 id=\"依赖\"><a href=\"#依赖\" class=\"headerlink\" title=\"依赖\"></a>依赖</h1><p>javafx的springboot支持库, 官方的没有, 开源的有不少, 我使用的是<a href=\"https://github.com/roskenet/springboot-javafx-support\">springboot-javafx-support</a>, 这个库文档比较全, <a href=\"https://www.felixroske.de/page/programmierung/index.html\">文档地址</a>。</p>\n<p>maven的javafx<a href=\"https://github.com/javafx-maven-plugin/javafx-maven-plugin\">打包工具</a>。</p>\n<h1 id=\"Maven配置\"><a href=\"#Maven配置\" class=\"headerlink\" title=\"Maven配置\"></a>Maven配置</h1><p>新建一个maven工程, 并将依赖和插件配置好, 主要如下:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">spring.boot.version</span>&gt;</span>1.5.1.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">spring.boot.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">springboot-javafx-support.version</span>&gt;</span>1.3.15<span class=\"tag\">&lt;/<span class=\"name\">springboot-javafx-support.version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.boot.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.boot.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-log4j2<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.boot.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.boot.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>de.roskenet<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>springboot-javafx-support<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;springboot-javafx-support.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.zenjava<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>javafx-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">mainClass</span>&gt;</span>com.littleboy.main.Main<span class=\"tag\">&lt;/<span class=\"name\">mainClass</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">vendor</span>&gt;</span>littleboy<span class=\"tag\">&lt;/<span class=\"name\">vendor</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>其中，比较重要的是：<code>&lt;mainClass&gt;com.littleboy.main.Main&lt;/mainClass&gt;</code> 这个是打包的时候的 main 类。<code>&lt;vendor&gt;littleboy&lt;/vendor&gt;</code>是组织名称。</p>\n</blockquote>\n<h1 id=\"MainController\"><a href=\"#MainController\" class=\"headerlink\" title=\"MainController\"></a>MainController</h1><p>配置好之后就可以编写启动类了:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractJavaFxApplicationSupport</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">start</span><span class=\"params\">(Stage primaryStage)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//TODO</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        launch(args);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"打包\"><a href=\"#打包\" class=\"headerlink\" title=\"打包\"></a>打包</h1><p>可以直接使用idea的artifacts来进行打包, 打包之后有可能会报找不到主类, 需要在<code>manifest file</code>中指定主类。</p>"},{"title":"Log4j 日志配置","date":"2019-12-17T19:42:20.000Z","_content":"\n# 前言\n\n这里是对于 Log4j 2 的[官方文档](http://logging.apache.org/log4j/2.x/manual/index.html)的不完全翻译。\n\n# 介绍\n\nEU SEMERER 项目中使用的 tracing API 经过无数次的增强, 多次改进和大量的工作演变成了 log4j。\n\n日志语句对于调试应用程序来说可能并不高级, 但是对于大型的多线程应用程序和分布式应用程序来说, 调试器可能并不像想象中那么好用, 在使用调试器的过程中, 很容易在复杂的数据结构和控制流程的细节上迷失方向, 而且日志可以永久保存以供日后研究。\n\n## Log4j 2\n\nLog4j 2 相较于 Log4j 和 Logback 相比有以下优势:\n\n1. Log4j 2 设计为课用\n\n* Appenders\n\n禁用和使用日志请求只是Log4j的基本功能, Log4j日志系统还提供许多强大的功能, 比如允许把日志输出到不同的地方, 如控制台, 文件等, 可以根据天数或者文件大小产生新的文件, 可以以流的形式发送到其他地方等。\n\n<!--more-->\n\n常使用的类如下:\n\n> org.apache.log4j.ConsoleAppender (控制台)\n> org.apache.log4j.FileAppender (文件)\n> org.apache.log4j.DailyRollingFileAppender (每天产生一个日志文件)\n> org.apache.log4j.RollingFileAppender (文件大小到达指定尺寸的时候产生一个新的文件)\n> org.apache.log4j.WriterAppender (将日志信息以流格式发送到任何指定的地方)\n\n配置模式:\n\nlog4j.appender.appenderName.layout = className\nlog4j.appender.appenderName.Option1 = value1\n...\nlog4j.appender.appenderName.OptionN = valueN\n\n## 配置详解\n\n要使Log4j再系统中运行须事先设定配置文件。配置文件事实上也就是对Logger、Appender及Layout进行相应设定。Log4j支持两种配置文件格式, 一种是xml格式的文件, 一种是properties属性文件。下面以properties属性文件为例介绍log4j.properties的配置。\n\n* 配置根logger:\n\n```properties\nlog4j.rootLogger = [level], appenderName1, appenderName2, ...\nlog4j.additivity.org.apache=false; # 表示Logger不会在父Logger的appender里输出, 默认为true。\n```\n\nlevel: 设定日志记录的最低级别, 可设的值有 OFF, FATAL, ERROR, WARN, INFO, DEBUG, ALL或者自定义的级别, Log4j建议只使用中间四个级别。通过在这里设置级别, 您可以控制应用程序中相应级别的日志信息开关, 比如在这里设定了INFO级别, 则应用程序中所有DEBUG级别的日志将不会被打印出来。\nappenderName: 就是指定日志信息要输出到哪里。可以同时指定多个输出目的地, 用逗号隔开。\n例如: log4j.rootLogger = INFO, A1, B2, C3\n\n* 配置日志信息输出目的地(Appender):\n\n```properties\nlog4j.appender.appenderName = className\n```\n\nappenderName: 自定义appenderName, 在log4j.rootLogger设置中使用;\nclassName: 可设值如下:\n* org.apache.log4j.ConsoleAppender(控制台)\n\t* ConsoleAppender 选项:\n\t\t* Threshold = WARN 指定日志信息的最低输出级别, 默认为DEBUG\n\t\t* ImmediateFlush = true 表示所有消息都会被立即输出, 设为false则不输出, 默认是true\n\t\t* Target = System.err 默认值是 System.out\n* org.apache.log4j.FileAppender(文件)\n\t* FileAppender 选项\n\t\t* Threshold = WARN 指定日志信息的最低输出级别, 默认为DEBUG\n\t\t* ImmediateFlush = true 表示所有消息都会被立即输出, 设为false则不输出, 默认是true\n\t\t* Append = false true 表示消息增加到指定文件中, false 则将消息覆盖指定的文本内容, 默认值是true\n\t\t* File = D:/logs/logging.log4j 指定消息输出到 logging.log4j 文件中\n* org.apache.log4j.DailyRollingFileAppender(每天产生一个日志文件)\n\t* DailyRollingFileAppender 选项\n\t\t* Threshold = WARN 指定日志信息的最低输出级别, 默认为DEBUG\n\t\t* ImmediateFlush = true 表示所有消息都会被立即输出, 设为false则不输出, 默认是true\n\t\t* Append = false true 表示消息增加到指定文件中, false 则将消息覆盖指定的文本内容, 默认值是true\n\t\t* File = D:/logs/logging.log4j 指定消息输出到 logging.log4j 文件中\n\t\t* DatePattern = '.'yyyy-MM 每月滚动一次日志文件, 即每月产生一个新的日志文件。当前月的日志文件名为logging.log4j, 前一个月的日志文件名为logging.log4j.yyyy-MM。\n\t\t另外, 也可以指定按周、天、时、分等来滚动文件, 对应的格式如下：\n\t\t1>'.'yyyy-MM 每月\n\t\t2>'.'yyyy-WW 每周\n\t\t3>'.'yyyy-MM-dd 每天\n\t\t4>'.'yyyy-MM-dd-a 每天两次\n\t\t5>'.'yyyy-MM-dd-HH 每小时\n\t\t6>'.'yyyy-MM-dd-HH-mm 每分钟\n* org.apache.log4j.RollingFileAppender(文件大小到达指定尺寸的时候产生一个新的文件)\n\t* RollingFileAppender 选项\n\t\t* Threshold = WARN 指定日志信息的最低输出级别, 默认为DEBUG\n\t\t* ImmediateFlush = true 表示所有消息都会被立即输出, 设为false则不输出, 默认是true\n\t\t* Append = false true 表示消息增加到指定文件中, false 则将消息覆盖指定的文本内容, 默认值是true\n\t\t* File = D:/logs/logging.log4j 指定消息输出到 logging.log4j 文件中\n\t\t* MaxFileSize = 100KB 后缀可以是KB, MB或者GB。在日志文件达到该大小时, 将会自动滚动, 即将原来的内容移到logging.log4j.1文件中。\n\t\t* MaxBackupIndex = 2 指定可以产生的滚动文件的最大数, 例如, 设为2则可以产生 logging.log4j.1, logging.log4j.2两个滚动文件和一个logging.log4j文件。\n\n* 配置日志信息的输出格式(Layout):\n\n```xml\nlog4j.appender.appenderName.layout = className\n```\n\nclassName 可设值如下:\n\n* org.apache.log4j.HTMLLayout ()\n","source":"_posts/back_skill_experience/java/log4j/log4j-config.md","raw":"---\ntitle: Log4j 日志配置\ndate: 2019-12-18 03:42:20\ncategories:\n- 后端技巧/经验\n- java\ntags:\n- jog4j2\n- java\n---\n\n# 前言\n\n这里是对于 Log4j 2 的[官方文档](http://logging.apache.org/log4j/2.x/manual/index.html)的不完全翻译。\n\n# 介绍\n\nEU SEMERER 项目中使用的 tracing API 经过无数次的增强, 多次改进和大量的工作演变成了 log4j。\n\n日志语句对于调试应用程序来说可能并不高级, 但是对于大型的多线程应用程序和分布式应用程序来说, 调试器可能并不像想象中那么好用, 在使用调试器的过程中, 很容易在复杂的数据结构和控制流程的细节上迷失方向, 而且日志可以永久保存以供日后研究。\n\n## Log4j 2\n\nLog4j 2 相较于 Log4j 和 Logback 相比有以下优势:\n\n1. Log4j 2 设计为课用\n\n* Appenders\n\n禁用和使用日志请求只是Log4j的基本功能, Log4j日志系统还提供许多强大的功能, 比如允许把日志输出到不同的地方, 如控制台, 文件等, 可以根据天数或者文件大小产生新的文件, 可以以流的形式发送到其他地方等。\n\n<!--more-->\n\n常使用的类如下:\n\n> org.apache.log4j.ConsoleAppender (控制台)\n> org.apache.log4j.FileAppender (文件)\n> org.apache.log4j.DailyRollingFileAppender (每天产生一个日志文件)\n> org.apache.log4j.RollingFileAppender (文件大小到达指定尺寸的时候产生一个新的文件)\n> org.apache.log4j.WriterAppender (将日志信息以流格式发送到任何指定的地方)\n\n配置模式:\n\nlog4j.appender.appenderName.layout = className\nlog4j.appender.appenderName.Option1 = value1\n...\nlog4j.appender.appenderName.OptionN = valueN\n\n## 配置详解\n\n要使Log4j再系统中运行须事先设定配置文件。配置文件事实上也就是对Logger、Appender及Layout进行相应设定。Log4j支持两种配置文件格式, 一种是xml格式的文件, 一种是properties属性文件。下面以properties属性文件为例介绍log4j.properties的配置。\n\n* 配置根logger:\n\n```properties\nlog4j.rootLogger = [level], appenderName1, appenderName2, ...\nlog4j.additivity.org.apache=false; # 表示Logger不会在父Logger的appender里输出, 默认为true。\n```\n\nlevel: 设定日志记录的最低级别, 可设的值有 OFF, FATAL, ERROR, WARN, INFO, DEBUG, ALL或者自定义的级别, Log4j建议只使用中间四个级别。通过在这里设置级别, 您可以控制应用程序中相应级别的日志信息开关, 比如在这里设定了INFO级别, 则应用程序中所有DEBUG级别的日志将不会被打印出来。\nappenderName: 就是指定日志信息要输出到哪里。可以同时指定多个输出目的地, 用逗号隔开。\n例如: log4j.rootLogger = INFO, A1, B2, C3\n\n* 配置日志信息输出目的地(Appender):\n\n```properties\nlog4j.appender.appenderName = className\n```\n\nappenderName: 自定义appenderName, 在log4j.rootLogger设置中使用;\nclassName: 可设值如下:\n* org.apache.log4j.ConsoleAppender(控制台)\n\t* ConsoleAppender 选项:\n\t\t* Threshold = WARN 指定日志信息的最低输出级别, 默认为DEBUG\n\t\t* ImmediateFlush = true 表示所有消息都会被立即输出, 设为false则不输出, 默认是true\n\t\t* Target = System.err 默认值是 System.out\n* org.apache.log4j.FileAppender(文件)\n\t* FileAppender 选项\n\t\t* Threshold = WARN 指定日志信息的最低输出级别, 默认为DEBUG\n\t\t* ImmediateFlush = true 表示所有消息都会被立即输出, 设为false则不输出, 默认是true\n\t\t* Append = false true 表示消息增加到指定文件中, false 则将消息覆盖指定的文本内容, 默认值是true\n\t\t* File = D:/logs/logging.log4j 指定消息输出到 logging.log4j 文件中\n* org.apache.log4j.DailyRollingFileAppender(每天产生一个日志文件)\n\t* DailyRollingFileAppender 选项\n\t\t* Threshold = WARN 指定日志信息的最低输出级别, 默认为DEBUG\n\t\t* ImmediateFlush = true 表示所有消息都会被立即输出, 设为false则不输出, 默认是true\n\t\t* Append = false true 表示消息增加到指定文件中, false 则将消息覆盖指定的文本内容, 默认值是true\n\t\t* File = D:/logs/logging.log4j 指定消息输出到 logging.log4j 文件中\n\t\t* DatePattern = '.'yyyy-MM 每月滚动一次日志文件, 即每月产生一个新的日志文件。当前月的日志文件名为logging.log4j, 前一个月的日志文件名为logging.log4j.yyyy-MM。\n\t\t另外, 也可以指定按周、天、时、分等来滚动文件, 对应的格式如下：\n\t\t1>'.'yyyy-MM 每月\n\t\t2>'.'yyyy-WW 每周\n\t\t3>'.'yyyy-MM-dd 每天\n\t\t4>'.'yyyy-MM-dd-a 每天两次\n\t\t5>'.'yyyy-MM-dd-HH 每小时\n\t\t6>'.'yyyy-MM-dd-HH-mm 每分钟\n* org.apache.log4j.RollingFileAppender(文件大小到达指定尺寸的时候产生一个新的文件)\n\t* RollingFileAppender 选项\n\t\t* Threshold = WARN 指定日志信息的最低输出级别, 默认为DEBUG\n\t\t* ImmediateFlush = true 表示所有消息都会被立即输出, 设为false则不输出, 默认是true\n\t\t* Append = false true 表示消息增加到指定文件中, false 则将消息覆盖指定的文本内容, 默认值是true\n\t\t* File = D:/logs/logging.log4j 指定消息输出到 logging.log4j 文件中\n\t\t* MaxFileSize = 100KB 后缀可以是KB, MB或者GB。在日志文件达到该大小时, 将会自动滚动, 即将原来的内容移到logging.log4j.1文件中。\n\t\t* MaxBackupIndex = 2 指定可以产生的滚动文件的最大数, 例如, 设为2则可以产生 logging.log4j.1, logging.log4j.2两个滚动文件和一个logging.log4j文件。\n\n* 配置日志信息的输出格式(Layout):\n\n```xml\nlog4j.appender.appenderName.layout = className\n```\n\nclassName 可设值如下:\n\n* org.apache.log4j.HTMLLayout ()\n","slug":"back_skill_experience/java/log4j/log4j-config","published":1,"updated":"2022-10-02T16:41:39.816Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejny00333vsb0gzsfas8","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>这里是对于 Log4j 2 的<a href=\"http://logging.apache.org/log4j/2.x/manual/index.html\">官方文档</a>的不完全翻译。</p>\n<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>EU SEMERER 项目中使用的 tracing API 经过无数次的增强, 多次改进和大量的工作演变成了 log4j。</p>\n<p>日志语句对于调试应用程序来说可能并不高级, 但是对于大型的多线程应用程序和分布式应用程序来说, 调试器可能并不像想象中那么好用, 在使用调试器的过程中, 很容易在复杂的数据结构和控制流程的细节上迷失方向, 而且日志可以永久保存以供日后研究。</p>\n<h2 id=\"Log4j-2\"><a href=\"#Log4j-2\" class=\"headerlink\" title=\"Log4j 2\"></a>Log4j 2</h2><p>Log4j 2 相较于 Log4j 和 Logback 相比有以下优势:</p>\n<ol>\n<li>Log4j 2 设计为课用</li>\n</ol>\n<ul>\n<li>Appenders</li>\n</ul>\n<p>禁用和使用日志请求只是Log4j的基本功能, Log4j日志系统还提供许多强大的功能, 比如允许把日志输出到不同的地方, 如控制台, 文件等, 可以根据天数或者文件大小产生新的文件, 可以以流的形式发送到其他地方等。</p>\n<span id=\"more\"></span>\n\n<p>常使用的类如下:</p>\n<blockquote>\n<p>org.apache.log4j.ConsoleAppender (控制台)<br>org.apache.log4j.FileAppender (文件)<br>org.apache.log4j.DailyRollingFileAppender (每天产生一个日志文件)<br>org.apache.log4j.RollingFileAppender (文件大小到达指定尺寸的时候产生一个新的文件)<br>org.apache.log4j.WriterAppender (将日志信息以流格式发送到任何指定的地方)</p>\n</blockquote>\n<p>配置模式:</p>\n<p>log4j.appender.appenderName.layout &#x3D; className<br>log4j.appender.appenderName.Option1 &#x3D; value1<br>…<br>log4j.appender.appenderName.OptionN &#x3D; valueN</p>\n<h2 id=\"配置详解\"><a href=\"#配置详解\" class=\"headerlink\" title=\"配置详解\"></a>配置详解</h2><p>要使Log4j再系统中运行须事先设定配置文件。配置文件事实上也就是对Logger、Appender及Layout进行相应设定。Log4j支持两种配置文件格式, 一种是xml格式的文件, 一种是properties属性文件。下面以properties属性文件为例介绍log4j.properties的配置。</p>\n<ul>\n<li>配置根logger:</li>\n</ul>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">log4j.rootLogger</span> = <span class=\"string\">[level], appenderName1, appenderName2, ...</span></span><br><span class=\"line\"><span class=\"meta\">log4j.additivity.org.apache</span>=<span class=\"string\">false; # 表示Logger不会在父Logger的appender里输出, 默认为true。</span></span><br></pre></td></tr></table></figure>\n\n<p>level: 设定日志记录的最低级别, 可设的值有 OFF, FATAL, ERROR, WARN, INFO, DEBUG, ALL或者自定义的级别, Log4j建议只使用中间四个级别。通过在这里设置级别, 您可以控制应用程序中相应级别的日志信息开关, 比如在这里设定了INFO级别, 则应用程序中所有DEBUG级别的日志将不会被打印出来。<br>appenderName: 就是指定日志信息要输出到哪里。可以同时指定多个输出目的地, 用逗号隔开。<br>例如: log4j.rootLogger &#x3D; INFO, A1, B2, C3</p>\n<ul>\n<li>配置日志信息输出目的地(Appender):</li>\n</ul>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">log4j.appender.appenderName</span> = <span class=\"string\">className</span></span><br></pre></td></tr></table></figure>\n\n<p>appenderName: 自定义appenderName, 在log4j.rootLogger设置中使用;<br>className: 可设值如下:</p>\n<ul>\n<li><p>org.apache.log4j.ConsoleAppender(控制台)</p>\n<ul>\n<li>ConsoleAppender 选项:<ul>\n<li>Threshold &#x3D; WARN 指定日志信息的最低输出级别, 默认为DEBUG</li>\n<li>ImmediateFlush &#x3D; true 表示所有消息都会被立即输出, 设为false则不输出, 默认是true</li>\n<li>Target &#x3D; System.err 默认值是 System.out</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>org.apache.log4j.FileAppender(文件)</p>\n<ul>\n<li>FileAppender 选项<ul>\n<li>Threshold &#x3D; WARN 指定日志信息的最低输出级别, 默认为DEBUG</li>\n<li>ImmediateFlush &#x3D; true 表示所有消息都会被立即输出, 设为false则不输出, 默认是true</li>\n<li>Append &#x3D; false true 表示消息增加到指定文件中, false 则将消息覆盖指定的文本内容, 默认值是true</li>\n<li>File &#x3D; D:&#x2F;logs&#x2F;logging.log4j 指定消息输出到 logging.log4j 文件中</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>org.apache.log4j.DailyRollingFileAppender(每天产生一个日志文件)</p>\n<ul>\n<li>DailyRollingFileAppender 选项<ul>\n<li>Threshold &#x3D; WARN 指定日志信息的最低输出级别, 默认为DEBUG</li>\n<li>ImmediateFlush &#x3D; true 表示所有消息都会被立即输出, 设为false则不输出, 默认是true</li>\n<li>Append &#x3D; false true 表示消息增加到指定文件中, false 则将消息覆盖指定的文本内容, 默认值是true</li>\n<li>File &#x3D; D:&#x2F;logs&#x2F;logging.log4j 指定消息输出到 logging.log4j 文件中</li>\n<li>DatePattern &#x3D; ‘.’yyyy-MM 每月滚动一次日志文件, 即每月产生一个新的日志文件。当前月的日志文件名为logging.log4j, 前一个月的日志文件名为logging.log4j.yyyy-MM。<br>  另外, 也可以指定按周、天、时、分等来滚动文件, 对应的格式如下：<br>  1&gt;’.’yyyy-MM 每月<br>  2&gt;’.’yyyy-WW 每周<br>  3&gt;’.’yyyy-MM-dd 每天<br>  4&gt;’.’yyyy-MM-dd-a 每天两次<br>  5&gt;’.’yyyy-MM-dd-HH 每小时<br>  6&gt;’.’yyyy-MM-dd-HH-mm 每分钟</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>org.apache.log4j.RollingFileAppender(文件大小到达指定尺寸的时候产生一个新的文件)</p>\n<ul>\n<li>RollingFileAppender 选项<ul>\n<li>Threshold &#x3D; WARN 指定日志信息的最低输出级别, 默认为DEBUG</li>\n<li>ImmediateFlush &#x3D; true 表示所有消息都会被立即输出, 设为false则不输出, 默认是true</li>\n<li>Append &#x3D; false true 表示消息增加到指定文件中, false 则将消息覆盖指定的文本内容, 默认值是true</li>\n<li>File &#x3D; D:&#x2F;logs&#x2F;logging.log4j 指定消息输出到 logging.log4j 文件中</li>\n<li>MaxFileSize &#x3D; 100KB 后缀可以是KB, MB或者GB。在日志文件达到该大小时, 将会自动滚动, 即将原来的内容移到logging.log4j.1文件中。</li>\n<li>MaxBackupIndex &#x3D; 2 指定可以产生的滚动文件的最大数, 例如, 设为2则可以产生 logging.log4j.1, logging.log4j.2两个滚动文件和一个logging.log4j文件。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>配置日志信息的输出格式(Layout):</p>\n</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log4j.appender.appenderName.layout = className</span><br></pre></td></tr></table></figure>\n\n<p>className 可设值如下:</p>\n<ul>\n<li>org.apache.log4j.HTMLLayout ()</li>\n</ul>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>这里是对于 Log4j 2 的<a href=\"http://logging.apache.org/log4j/2.x/manual/index.html\">官方文档</a>的不完全翻译。</p>\n<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>EU SEMERER 项目中使用的 tracing API 经过无数次的增强, 多次改进和大量的工作演变成了 log4j。</p>\n<p>日志语句对于调试应用程序来说可能并不高级, 但是对于大型的多线程应用程序和分布式应用程序来说, 调试器可能并不像想象中那么好用, 在使用调试器的过程中, 很容易在复杂的数据结构和控制流程的细节上迷失方向, 而且日志可以永久保存以供日后研究。</p>\n<h2 id=\"Log4j-2\"><a href=\"#Log4j-2\" class=\"headerlink\" title=\"Log4j 2\"></a>Log4j 2</h2><p>Log4j 2 相较于 Log4j 和 Logback 相比有以下优势:</p>\n<ol>\n<li>Log4j 2 设计为课用</li>\n</ol>\n<ul>\n<li>Appenders</li>\n</ul>\n<p>禁用和使用日志请求只是Log4j的基本功能, Log4j日志系统还提供许多强大的功能, 比如允许把日志输出到不同的地方, 如控制台, 文件等, 可以根据天数或者文件大小产生新的文件, 可以以流的形式发送到其他地方等。</p>","more":"<p>常使用的类如下:</p>\n<blockquote>\n<p>org.apache.log4j.ConsoleAppender (控制台)<br>org.apache.log4j.FileAppender (文件)<br>org.apache.log4j.DailyRollingFileAppender (每天产生一个日志文件)<br>org.apache.log4j.RollingFileAppender (文件大小到达指定尺寸的时候产生一个新的文件)<br>org.apache.log4j.WriterAppender (将日志信息以流格式发送到任何指定的地方)</p>\n</blockquote>\n<p>配置模式:</p>\n<p>log4j.appender.appenderName.layout &#x3D; className<br>log4j.appender.appenderName.Option1 &#x3D; value1<br>…<br>log4j.appender.appenderName.OptionN &#x3D; valueN</p>\n<h2 id=\"配置详解\"><a href=\"#配置详解\" class=\"headerlink\" title=\"配置详解\"></a>配置详解</h2><p>要使Log4j再系统中运行须事先设定配置文件。配置文件事实上也就是对Logger、Appender及Layout进行相应设定。Log4j支持两种配置文件格式, 一种是xml格式的文件, 一种是properties属性文件。下面以properties属性文件为例介绍log4j.properties的配置。</p>\n<ul>\n<li>配置根logger:</li>\n</ul>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">log4j.rootLogger</span> = <span class=\"string\">[level], appenderName1, appenderName2, ...</span></span><br><span class=\"line\"><span class=\"meta\">log4j.additivity.org.apache</span>=<span class=\"string\">false; # 表示Logger不会在父Logger的appender里输出, 默认为true。</span></span><br></pre></td></tr></table></figure>\n\n<p>level: 设定日志记录的最低级别, 可设的值有 OFF, FATAL, ERROR, WARN, INFO, DEBUG, ALL或者自定义的级别, Log4j建议只使用中间四个级别。通过在这里设置级别, 您可以控制应用程序中相应级别的日志信息开关, 比如在这里设定了INFO级别, 则应用程序中所有DEBUG级别的日志将不会被打印出来。<br>appenderName: 就是指定日志信息要输出到哪里。可以同时指定多个输出目的地, 用逗号隔开。<br>例如: log4j.rootLogger &#x3D; INFO, A1, B2, C3</p>\n<ul>\n<li>配置日志信息输出目的地(Appender):</li>\n</ul>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">log4j.appender.appenderName</span> = <span class=\"string\">className</span></span><br></pre></td></tr></table></figure>\n\n<p>appenderName: 自定义appenderName, 在log4j.rootLogger设置中使用;<br>className: 可设值如下:</p>\n<ul>\n<li><p>org.apache.log4j.ConsoleAppender(控制台)</p>\n<ul>\n<li>ConsoleAppender 选项:<ul>\n<li>Threshold &#x3D; WARN 指定日志信息的最低输出级别, 默认为DEBUG</li>\n<li>ImmediateFlush &#x3D; true 表示所有消息都会被立即输出, 设为false则不输出, 默认是true</li>\n<li>Target &#x3D; System.err 默认值是 System.out</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>org.apache.log4j.FileAppender(文件)</p>\n<ul>\n<li>FileAppender 选项<ul>\n<li>Threshold &#x3D; WARN 指定日志信息的最低输出级别, 默认为DEBUG</li>\n<li>ImmediateFlush &#x3D; true 表示所有消息都会被立即输出, 设为false则不输出, 默认是true</li>\n<li>Append &#x3D; false true 表示消息增加到指定文件中, false 则将消息覆盖指定的文本内容, 默认值是true</li>\n<li>File &#x3D; D:&#x2F;logs&#x2F;logging.log4j 指定消息输出到 logging.log4j 文件中</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>org.apache.log4j.DailyRollingFileAppender(每天产生一个日志文件)</p>\n<ul>\n<li>DailyRollingFileAppender 选项<ul>\n<li>Threshold &#x3D; WARN 指定日志信息的最低输出级别, 默认为DEBUG</li>\n<li>ImmediateFlush &#x3D; true 表示所有消息都会被立即输出, 设为false则不输出, 默认是true</li>\n<li>Append &#x3D; false true 表示消息增加到指定文件中, false 则将消息覆盖指定的文本内容, 默认值是true</li>\n<li>File &#x3D; D:&#x2F;logs&#x2F;logging.log4j 指定消息输出到 logging.log4j 文件中</li>\n<li>DatePattern &#x3D; ‘.’yyyy-MM 每月滚动一次日志文件, 即每月产生一个新的日志文件。当前月的日志文件名为logging.log4j, 前一个月的日志文件名为logging.log4j.yyyy-MM。<br>  另外, 也可以指定按周、天、时、分等来滚动文件, 对应的格式如下：<br>  1&gt;’.’yyyy-MM 每月<br>  2&gt;’.’yyyy-WW 每周<br>  3&gt;’.’yyyy-MM-dd 每天<br>  4&gt;’.’yyyy-MM-dd-a 每天两次<br>  5&gt;’.’yyyy-MM-dd-HH 每小时<br>  6&gt;’.’yyyy-MM-dd-HH-mm 每分钟</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>org.apache.log4j.RollingFileAppender(文件大小到达指定尺寸的时候产生一个新的文件)</p>\n<ul>\n<li>RollingFileAppender 选项<ul>\n<li>Threshold &#x3D; WARN 指定日志信息的最低输出级别, 默认为DEBUG</li>\n<li>ImmediateFlush &#x3D; true 表示所有消息都会被立即输出, 设为false则不输出, 默认是true</li>\n<li>Append &#x3D; false true 表示消息增加到指定文件中, false 则将消息覆盖指定的文本内容, 默认值是true</li>\n<li>File &#x3D; D:&#x2F;logs&#x2F;logging.log4j 指定消息输出到 logging.log4j 文件中</li>\n<li>MaxFileSize &#x3D; 100KB 后缀可以是KB, MB或者GB。在日志文件达到该大小时, 将会自动滚动, 即将原来的内容移到logging.log4j.1文件中。</li>\n<li>MaxBackupIndex &#x3D; 2 指定可以产生的滚动文件的最大数, 例如, 设为2则可以产生 logging.log4j.1, logging.log4j.2两个滚动文件和一个logging.log4j文件。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>配置日志信息的输出格式(Layout):</p>\n</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log4j.appender.appenderName.layout = className</span><br></pre></td></tr></table></figure>\n\n<p>className 可设值如下:</p>\n<ul>\n<li>org.apache.log4j.HTMLLayout ()</li>\n</ul>"},{"title":"使用maven来对测试用例进行测试","date":"2019-09-06T02:02:08.000Z","_content":"\n# 前言\n\n真的不容易呀! 搞了树莓派之后, 一直想在树莓派上搞java开发, 也在vim上装了不少的插件, 但是java的编译一直搞得我头痛。忽然想起maven可以对测试用例进行测试, 而且可以自定义编译之后的路径, 非常方便, 所以这就搞起!\n\n<!--more-->\n\n# 需要的依赖\n\n这个东西真的搞了我很久, 先介绍一下都需要哪些依赖:\n\n```xml\n<!-- 测试用例 -->\n<dependency>\n    <groupId>junit</groupId>\n    <artifactId>junit</artifactId>\n    <version>4.11</version>\n    <scope>test</scope>\n</dependency>\n\n<build>\n    <plugins>\n        <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-compiler-plugin</artifactId>\n            <version>3.8.1</version>\n            <configuration>\n            <source>1.10</source>\n            <target>1.10</target>\n            <encoding>UTF-8</encoding>\n            <showWarnings>true</showWarnings>\n            <configuration>\n        </plugin>\n    </plugins>\n</build>\n```\n\n**注意, 这里必须是junit的依赖, 我在上maven的中央库中找的时候告诉我移到了新的地址, 然后我就是用的是**\n\n```xml\n<dependency>\n    <groupId>org.junit.jupiter</groupId>\n    <artifactId>junit-jupiter-api</artifactId>\n    <version>5.5.1</version>\n    <scope>test</scope>\n</dependency>\n```\n\n**这个, 然后就一直报找不到org.junit这个包, 搞了好久也不好使。**\n\n# 编写与使用测试用例\n\n* 编写测试用例\n\nmaven的测试用例默认放到`src/test/java`路径下的, 在运行的时候会查找所有带有@Test注解的方法并运行测试用例, 那么测试用例应该这么写:\n\n```java\nimport org.junit.Test;\n\npublic class Test {\n\t@Test\n\tpublic void test() {\n\t\t// 这里放入需要测试的代码\n\t}\n}\n```\n\n这样, 一个简单的测试用例就完成了。\n\n* 运行测试用例\n\n直接执行`mvn test`, 会直接运行该项目下的所有测试用例。\n如果想要运行`TestPracticeOne.java`下的`testOne()`方法, 可以这样: `mvn -Dtest=TestPracticeOne#testOne test`, 就可以了, 这种方式也支持正则, 比如`mvn -Dtest=TestPracticeOne#test* test`, 这样运行的是所有开头是`test`的方法。\n\n# 参考\n\n更详细的介绍可以参考[maven的官方介绍](https://maven.apache.org/surefire/maven-surefire-plugin/examples/junit.html)。\n","source":"_posts/back_skill_experience/java/maven/maven-test-java-project.md","raw":"---\ntitle: 使用maven来对测试用例进行测试\ndate: 2019-09-06 10:02:08\ncategories:\n- 后端技巧/经验\n- java\ntags:\n- maven\n---\n\n# 前言\n\n真的不容易呀! 搞了树莓派之后, 一直想在树莓派上搞java开发, 也在vim上装了不少的插件, 但是java的编译一直搞得我头痛。忽然想起maven可以对测试用例进行测试, 而且可以自定义编译之后的路径, 非常方便, 所以这就搞起!\n\n<!--more-->\n\n# 需要的依赖\n\n这个东西真的搞了我很久, 先介绍一下都需要哪些依赖:\n\n```xml\n<!-- 测试用例 -->\n<dependency>\n    <groupId>junit</groupId>\n    <artifactId>junit</artifactId>\n    <version>4.11</version>\n    <scope>test</scope>\n</dependency>\n\n<build>\n    <plugins>\n        <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-compiler-plugin</artifactId>\n            <version>3.8.1</version>\n            <configuration>\n            <source>1.10</source>\n            <target>1.10</target>\n            <encoding>UTF-8</encoding>\n            <showWarnings>true</showWarnings>\n            <configuration>\n        </plugin>\n    </plugins>\n</build>\n```\n\n**注意, 这里必须是junit的依赖, 我在上maven的中央库中找的时候告诉我移到了新的地址, 然后我就是用的是**\n\n```xml\n<dependency>\n    <groupId>org.junit.jupiter</groupId>\n    <artifactId>junit-jupiter-api</artifactId>\n    <version>5.5.1</version>\n    <scope>test</scope>\n</dependency>\n```\n\n**这个, 然后就一直报找不到org.junit这个包, 搞了好久也不好使。**\n\n# 编写与使用测试用例\n\n* 编写测试用例\n\nmaven的测试用例默认放到`src/test/java`路径下的, 在运行的时候会查找所有带有@Test注解的方法并运行测试用例, 那么测试用例应该这么写:\n\n```java\nimport org.junit.Test;\n\npublic class Test {\n\t@Test\n\tpublic void test() {\n\t\t// 这里放入需要测试的代码\n\t}\n}\n```\n\n这样, 一个简单的测试用例就完成了。\n\n* 运行测试用例\n\n直接执行`mvn test`, 会直接运行该项目下的所有测试用例。\n如果想要运行`TestPracticeOne.java`下的`testOne()`方法, 可以这样: `mvn -Dtest=TestPracticeOne#testOne test`, 就可以了, 这种方式也支持正则, 比如`mvn -Dtest=TestPracticeOne#test* test`, 这样运行的是所有开头是`test`的方法。\n\n# 参考\n\n更详细的介绍可以参考[maven的官方介绍](https://maven.apache.org/surefire/maven-surefire-plugin/examples/junit.html)。\n","slug":"back_skill_experience/java/maven/maven-test-java-project","published":1,"updated":"2022-10-02T16:42:00.678Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejo300373vsbbd5vdg4m","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>真的不容易呀! 搞了树莓派之后, 一直想在树莓派上搞java开发, 也在vim上装了不少的插件, 但是java的编译一直搞得我头痛。忽然想起maven可以对测试用例进行测试, 而且可以自定义编译之后的路径, 非常方便, 所以这就搞起!</p>\n<span id=\"more\"></span>\n\n<h1 id=\"需要的依赖\"><a href=\"#需要的依赖\" class=\"headerlink\" title=\"需要的依赖\"></a>需要的依赖</h1><p>这个东西真的搞了我很久, 先介绍一下都需要哪些依赖:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 测试用例 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.11<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.8.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">source</span>&gt;</span>1.10<span class=\"tag\">&lt;/<span class=\"name\">source</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">target</span>&gt;</span>1.10<span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">encoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">encoding</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">showWarnings</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">showWarnings</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>注意, 这里必须是junit的依赖, 我在上maven的中央库中找的时候告诉我移到了新的地址, 然后我就是用的是</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.junit.jupiter<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit-jupiter-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.5.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>这个, 然后就一直报找不到org.junit这个包, 搞了好久也不好使。</strong></p>\n<h1 id=\"编写与使用测试用例\"><a href=\"#编写与使用测试用例\" class=\"headerlink\" title=\"编写与使用测试用例\"></a>编写与使用测试用例</h1><ul>\n<li>编写测试用例</li>\n</ul>\n<p>maven的测试用例默认放到<code>src/test/java</code>路径下的, 在运行的时候会查找所有带有@Test注解的方法并运行测试用例, 那么测试用例应该这么写:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Test</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 这里放入需要测试的代码</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样, 一个简单的测试用例就完成了。</p>\n<ul>\n<li>运行测试用例</li>\n</ul>\n<p>直接执行<code>mvn test</code>, 会直接运行该项目下的所有测试用例。<br>如果想要运行<code>TestPracticeOne.java</code>下的<code>testOne()</code>方法, 可以这样: <code>mvn -Dtest=TestPracticeOne#testOne test</code>, 就可以了, 这种方式也支持正则, 比如<code>mvn -Dtest=TestPracticeOne#test* test</code>, 这样运行的是所有开头是<code>test</code>的方法。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p>更详细的介绍可以参考<a href=\"https://maven.apache.org/surefire/maven-surefire-plugin/examples/junit.html\">maven的官方介绍</a>。</p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>真的不容易呀! 搞了树莓派之后, 一直想在树莓派上搞java开发, 也在vim上装了不少的插件, 但是java的编译一直搞得我头痛。忽然想起maven可以对测试用例进行测试, 而且可以自定义编译之后的路径, 非常方便, 所以这就搞起!</p>","more":"<h1 id=\"需要的依赖\"><a href=\"#需要的依赖\" class=\"headerlink\" title=\"需要的依赖\"></a>需要的依赖</h1><p>这个东西真的搞了我很久, 先介绍一下都需要哪些依赖:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 测试用例 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.11<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.8.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">source</span>&gt;</span>1.10<span class=\"tag\">&lt;/<span class=\"name\">source</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">target</span>&gt;</span>1.10<span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">encoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">encoding</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">showWarnings</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">showWarnings</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>注意, 这里必须是junit的依赖, 我在上maven的中央库中找的时候告诉我移到了新的地址, 然后我就是用的是</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.junit.jupiter<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit-jupiter-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.5.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>这个, 然后就一直报找不到org.junit这个包, 搞了好久也不好使。</strong></p>\n<h1 id=\"编写与使用测试用例\"><a href=\"#编写与使用测试用例\" class=\"headerlink\" title=\"编写与使用测试用例\"></a>编写与使用测试用例</h1><ul>\n<li>编写测试用例</li>\n</ul>\n<p>maven的测试用例默认放到<code>src/test/java</code>路径下的, 在运行的时候会查找所有带有@Test注解的方法并运行测试用例, 那么测试用例应该这么写:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Test</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 这里放入需要测试的代码</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样, 一个简单的测试用例就完成了。</p>\n<ul>\n<li>运行测试用例</li>\n</ul>\n<p>直接执行<code>mvn test</code>, 会直接运行该项目下的所有测试用例。<br>如果想要运行<code>TestPracticeOne.java</code>下的<code>testOne()</code>方法, 可以这样: <code>mvn -Dtest=TestPracticeOne#testOne test</code>, 就可以了, 这种方式也支持正则, 比如<code>mvn -Dtest=TestPracticeOne#test* test</code>, 这样运行的是所有开头是<code>test</code>的方法。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p>更详细的介绍可以参考<a href=\"https://maven.apache.org/surefire/maven-surefire-plugin/examples/junit.html\">maven的官方介绍</a>。</p>"},{"title":"jdbc连接MySql8.0 报Client does not support authentication protocol requested by server","date":"2019-07-02T03:59:00.000Z","_content":"\n# 前言\n\n使用jdbc连接mysql的时候报`Client does not support authentication protocol requested by server`。\n\n# 解决\n\n使用MySQL命令行, 键入如下命令:\n\n```\nuse mysql;\n\nalter user 'root'@'localhost' identified with mysql_native_password by '********';\n\nflush privileges;\n```\n\n就可以了。\n","source":"_posts/back_skill_experience/java/pit/jdbc-mysql-conn.md","raw":"---\ntitle: jdbc连接MySql8.0 报Client does not support authentication protocol requested by server\ndate: 2019-07-02 11:59:00\ncategories:\n- 后端技巧/经验\n- java\ntags:\n- jdbc\n- mysql\n---\n\n# 前言\n\n使用jdbc连接mysql的时候报`Client does not support authentication protocol requested by server`。\n\n# 解决\n\n使用MySQL命令行, 键入如下命令:\n\n```\nuse mysql;\n\nalter user 'root'@'localhost' identified with mysql_native_password by '********';\n\nflush privileges;\n```\n\n就可以了。\n","slug":"back_skill_experience/java/pit/jdbc-mysql-conn","published":1,"updated":"2022-10-02T16:46:06.673Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejo6003a3vsb1bf72w5t","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>使用jdbc连接mysql的时候报<code>Client does not support authentication protocol requested by server</code>。</p>\n<h1 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h1><p>使用MySQL命令行, 键入如下命令:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use mysql;</span><br><span class=\"line\"></span><br><span class=\"line\">alter user &#x27;root&#x27;@&#x27;localhost&#x27; identified with mysql_native_password by &#x27;********&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">flush privileges;</span><br></pre></td></tr></table></figure>\n\n<p>就可以了。</p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>使用jdbc连接mysql的时候报<code>Client does not support authentication protocol requested by server</code>。</p>\n<h1 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h1><p>使用MySQL命令行, 键入如下命令:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use mysql;</span><br><span class=\"line\"></span><br><span class=\"line\">alter user &#x27;root&#x27;@&#x27;localhost&#x27; identified with mysql_native_password by &#x27;********&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">flush privileges;</span><br></pre></td></tr></table></figure>\n\n<p>就可以了。</p>\n"},{"title":"Invalid character found in the request target.The valid characters are defined in RFC 7230 and RFC3986","date":"2019-05-16T15:45:23.000Z","_content":"\n# 问题\n\n当在通过tomcat传递url时, 后台会报Invalid character found in the request target.The valid characters are defined in RFC 7230 and RFC3986。\n\n<!--more-->\n\n# 解决办法\n\n通过查询发现这个问题是高版本tomcat中的新特性：就是严格按照 RFC 3986规范进行访问解析，而 RFC 3986规范定义了Url中只允许包含英文字母（a-zA-Z）、数字（0-9）、-_.~4个特殊字符以及所有保留字符(RFC3986中指定了以下字符为保留字符：! * ’ ( ) ; : @ & = + $ , / ? # [ ])。而我们的系统在通过地址传参时，在url中传了一段json，传入的参数中有\"{\"不在RFC3986中的保留字段中，所以会报这个错。\n\n根据（https://bz.apache.org/bugzilla/show_bug.cgi?id=60594） ，从以下版本开始，有配置项能够关闭/配置这个行为：\n8.5.x系列的：8.5.12 onwards\n8.0.x系列的：8.0.42 onwards\n7.0.x系列的：7.0.76 onwards\n\n.../conf/catalina.properties中，找到最后注释掉的一行 `tomcat.util.http.parser.HttpParser.requestTargetAllow=|`，改成`tomcat.util.http.parser.HttpParser.requestTargetAllow=|{}`，表示把｛｝放行\n\n按照上面的方法处理好后，在非IE浏览器上访问，是没有问题了。但若是在IE浏览器上进行访问，这个错误还是会出现，在IE上访问出现这个错误的原因：因为url的参数json中有双引号，火狐和谷歌浏览器会自动对url进行转码，但IE不会\n\n这种情况的处理方法：\n给系统配置方向代理服务器，通过反向代理服务器进行urlrewrite，手动取出各个json的数据，手动将双引号进行转码为%22：\n\n具体方式如下：\n编辑 Apache安装目录/conf/httpd.conf， 在配置项目反向代理的前面添加如下信息：\n\n```conf\nRewriteCond %{QUERY_STRING} json\nRewriteCond %{QUERY_STRING} !msKey\nRewriteCond %{QUERY_STRING} msInfo\nRewriteCond %{QUERY_STRING} player\nRewriteCond %{QUERY_STRING} {[^a-zA-Z0-9]([a-zA-Z]+)[^a-zA-Z0-9]:[^a-zA-Z0-9]([a-zA-Z0-9*]+)[^a-zA-Z0-9],[^a-zA-Z0-9]([a-zA-Z]+)[^a-zA-Z0-9]:[^a-zA-Z0-9]([a-zA-Z0-9*]+)[^a-zA-Z0-9]}\nRewriteRule ^(.*)? $1?method=sendJson&json={%22%1%22:%22%2%22,%22%3%22:%22%4%22} [R,L,NE]\n```\n\n[官网各项配置说明](https://tomcat.apache.org/tomcat-7.0-doc/config/systemprops.html)\n","source":"_posts/back_skill_experience/java/tomcat/java-tomcat-http-400.md","raw":"---\ntitle: Invalid character found in the request target.The valid characters are defined in RFC 7230 and RFC3986\ndate: 2019-05-16 23:45:23\ncategories:\n- 后端技巧/经验\n- java\ntags:\n- tomcat\n---\n\n# 问题\n\n当在通过tomcat传递url时, 后台会报Invalid character found in the request target.The valid characters are defined in RFC 7230 and RFC3986。\n\n<!--more-->\n\n# 解决办法\n\n通过查询发现这个问题是高版本tomcat中的新特性：就是严格按照 RFC 3986规范进行访问解析，而 RFC 3986规范定义了Url中只允许包含英文字母（a-zA-Z）、数字（0-9）、-_.~4个特殊字符以及所有保留字符(RFC3986中指定了以下字符为保留字符：! * ’ ( ) ; : @ & = + $ , / ? # [ ])。而我们的系统在通过地址传参时，在url中传了一段json，传入的参数中有\"{\"不在RFC3986中的保留字段中，所以会报这个错。\n\n根据（https://bz.apache.org/bugzilla/show_bug.cgi?id=60594） ，从以下版本开始，有配置项能够关闭/配置这个行为：\n8.5.x系列的：8.5.12 onwards\n8.0.x系列的：8.0.42 onwards\n7.0.x系列的：7.0.76 onwards\n\n.../conf/catalina.properties中，找到最后注释掉的一行 `tomcat.util.http.parser.HttpParser.requestTargetAllow=|`，改成`tomcat.util.http.parser.HttpParser.requestTargetAllow=|{}`，表示把｛｝放行\n\n按照上面的方法处理好后，在非IE浏览器上访问，是没有问题了。但若是在IE浏览器上进行访问，这个错误还是会出现，在IE上访问出现这个错误的原因：因为url的参数json中有双引号，火狐和谷歌浏览器会自动对url进行转码，但IE不会\n\n这种情况的处理方法：\n给系统配置方向代理服务器，通过反向代理服务器进行urlrewrite，手动取出各个json的数据，手动将双引号进行转码为%22：\n\n具体方式如下：\n编辑 Apache安装目录/conf/httpd.conf， 在配置项目反向代理的前面添加如下信息：\n\n```conf\nRewriteCond %{QUERY_STRING} json\nRewriteCond %{QUERY_STRING} !msKey\nRewriteCond %{QUERY_STRING} msInfo\nRewriteCond %{QUERY_STRING} player\nRewriteCond %{QUERY_STRING} {[^a-zA-Z0-9]([a-zA-Z]+)[^a-zA-Z0-9]:[^a-zA-Z0-9]([a-zA-Z0-9*]+)[^a-zA-Z0-9],[^a-zA-Z0-9]([a-zA-Z]+)[^a-zA-Z0-9]:[^a-zA-Z0-9]([a-zA-Z0-9*]+)[^a-zA-Z0-9]}\nRewriteRule ^(.*)? $1?method=sendJson&json={%22%1%22:%22%2%22,%22%3%22:%22%4%22} [R,L,NE]\n```\n\n[官网各项配置说明](https://tomcat.apache.org/tomcat-7.0-doc/config/systemprops.html)\n","slug":"back_skill_experience/java/tomcat/java-tomcat-http-400","published":1,"updated":"2022-10-03T02:24:55.443Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejob003e3vsbdaae3sm0","content":"<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>当在通过tomcat传递url时, 后台会报Invalid character found in the request target.The valid characters are defined in RFC 7230 and RFC3986。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h1><p>通过查询发现这个问题是高版本tomcat中的新特性：就是严格按照 RFC 3986规范进行访问解析，而 RFC 3986规范定义了Url中只允许包含英文字母（a-zA-Z）、数字（0-9）、-_.~4个特殊字符以及所有保留字符(RFC3986中指定了以下字符为保留字符：! * ’ ( ) ; : @ &amp; &#x3D; + $ , &#x2F; ? # [ ])。而我们的系统在通过地址传参时，在url中传了一段json，传入的参数中有”{“不在RFC3986中的保留字段中，所以会报这个错。</p>\n<p>根据（<a href=\"https://bz.apache.org/bugzilla/show_bug.cgi?id=60594%EF%BC%89\">https://bz.apache.org/bugzilla/show_bug.cgi?id=60594）</a> ，从以下版本开始，有配置项能够关闭&#x2F;配置这个行为：<br>8.5.x系列的：8.5.12 onwards<br>8.0.x系列的：8.0.42 onwards<br>7.0.x系列的：7.0.76 onwards</p>\n<p>…&#x2F;conf&#x2F;catalina.properties中，找到最后注释掉的一行 <code>tomcat.util.http.parser.HttpParser.requestTargetAllow=|</code>，改成<code>tomcat.util.http.parser.HttpParser.requestTargetAllow=|&#123;&#125;</code>，表示把｛｝放行</p>\n<p>按照上面的方法处理好后，在非IE浏览器上访问，是没有问题了。但若是在IE浏览器上进行访问，这个错误还是会出现，在IE上访问出现这个错误的原因：因为url的参数json中有双引号，火狐和谷歌浏览器会自动对url进行转码，但IE不会</p>\n<p>这种情况的处理方法：<br>给系统配置方向代理服务器，通过反向代理服务器进行urlrewrite，手动取出各个json的数据，手动将双引号进行转码为%22：</p>\n<p>具体方式如下：<br>编辑 Apache安装目录&#x2F;conf&#x2F;httpd.conf， 在配置项目反向代理的前面添加如下信息：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RewriteCond %&#123;QUERY_STRING&#125; json</span><br><span class=\"line\">RewriteCond %&#123;QUERY_STRING&#125; !msKey</span><br><span class=\"line\">RewriteCond %&#123;QUERY_STRING&#125; msInfo</span><br><span class=\"line\">RewriteCond %&#123;QUERY_STRING&#125; player</span><br><span class=\"line\">RewriteCond %&#123;QUERY_STRING&#125; &#123;[^a-zA-Z0-9]([a-zA-Z]+)[^a-zA-Z0-9]:[^a-zA-Z0-9]([a-zA-Z0-9*]+)[^a-zA-Z0-9],[^a-zA-Z0-9]([a-zA-Z]+)[^a-zA-Z0-9]:[^a-zA-Z0-9]([a-zA-Z0-9*]+)[^a-zA-Z0-9]&#125;</span><br><span class=\"line\">RewriteRule ^(.*)? $1?method=sendJson&amp;json=&#123;%22%1%22:%22%2%22,%22%3%22:%22%4%22&#125; [R,L,NE]</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://tomcat.apache.org/tomcat-7.0-doc/config/systemprops.html\">官网各项配置说明</a></p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>当在通过tomcat传递url时, 后台会报Invalid character found in the request target.The valid characters are defined in RFC 7230 and RFC3986。</p>","more":"<h1 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h1><p>通过查询发现这个问题是高版本tomcat中的新特性：就是严格按照 RFC 3986规范进行访问解析，而 RFC 3986规范定义了Url中只允许包含英文字母（a-zA-Z）、数字（0-9）、-_.~4个特殊字符以及所有保留字符(RFC3986中指定了以下字符为保留字符：! * ’ ( ) ; : @ &amp; &#x3D; + $ , &#x2F; ? # [ ])。而我们的系统在通过地址传参时，在url中传了一段json，传入的参数中有”{“不在RFC3986中的保留字段中，所以会报这个错。</p>\n<p>根据（<a href=\"https://bz.apache.org/bugzilla/show_bug.cgi?id=60594%EF%BC%89\">https://bz.apache.org/bugzilla/show_bug.cgi?id=60594）</a> ，从以下版本开始，有配置项能够关闭&#x2F;配置这个行为：<br>8.5.x系列的：8.5.12 onwards<br>8.0.x系列的：8.0.42 onwards<br>7.0.x系列的：7.0.76 onwards</p>\n<p>…&#x2F;conf&#x2F;catalina.properties中，找到最后注释掉的一行 <code>tomcat.util.http.parser.HttpParser.requestTargetAllow=|</code>，改成<code>tomcat.util.http.parser.HttpParser.requestTargetAllow=|&#123;&#125;</code>，表示把｛｝放行</p>\n<p>按照上面的方法处理好后，在非IE浏览器上访问，是没有问题了。但若是在IE浏览器上进行访问，这个错误还是会出现，在IE上访问出现这个错误的原因：因为url的参数json中有双引号，火狐和谷歌浏览器会自动对url进行转码，但IE不会</p>\n<p>这种情况的处理方法：<br>给系统配置方向代理服务器，通过反向代理服务器进行urlrewrite，手动取出各个json的数据，手动将双引号进行转码为%22：</p>\n<p>具体方式如下：<br>编辑 Apache安装目录&#x2F;conf&#x2F;httpd.conf， 在配置项目反向代理的前面添加如下信息：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RewriteCond %&#123;QUERY_STRING&#125; json</span><br><span class=\"line\">RewriteCond %&#123;QUERY_STRING&#125; !msKey</span><br><span class=\"line\">RewriteCond %&#123;QUERY_STRING&#125; msInfo</span><br><span class=\"line\">RewriteCond %&#123;QUERY_STRING&#125; player</span><br><span class=\"line\">RewriteCond %&#123;QUERY_STRING&#125; &#123;[^a-zA-Z0-9]([a-zA-Z]+)[^a-zA-Z0-9]:[^a-zA-Z0-9]([a-zA-Z0-9*]+)[^a-zA-Z0-9],[^a-zA-Z0-9]([a-zA-Z]+)[^a-zA-Z0-9]:[^a-zA-Z0-9]([a-zA-Z0-9*]+)[^a-zA-Z0-9]&#125;</span><br><span class=\"line\">RewriteRule ^(.*)? $1?method=sendJson&amp;json=&#123;%22%1%22:%22%2%22,%22%3%22:%22%4%22&#125; [R,L,NE]</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://tomcat.apache.org/tomcat-7.0-doc/config/systemprops.html\">官网各项配置说明</a></p>"},{"title":"使用git搭建服务器","date":"2019-09-01T08:39:23.000Z","_content":"\n# 前言\n\n当我们想使用git来管理源码, 但是又不想将代码上传至github或者其他的托管平台时, 可以尝试着自己搭建一个git服务器作为私有仓库。\n\n<!--more-->\n\n# 安装git\n\n安装git的话, 有两种方式, 一种是直接使用包管理系统安装, 另外一种是使用编译的方式安装。\n\n## 包管理系统安装git\n\n* debian\n\napt-get install git\n\n* centos\n\nyum install git\n\n## 编译的方式安装git\n\n去[这里](https://github.com/git/git/releases)查看git的最新版本并下载, 在写篇博客时, 最新版本是2.23:\n\n```shell\nwget https://github.com/git/git/archive/v2.23.0.tar.gz -O git-2.23.0.tar.gz\n# 解压\ntar -zxf git-2.23.0.tar.gz\ncd git-2.23.0\n# 编译并指定安装位置\nmake prefix=/home/littleboy/tools/git/build all\nmake prefix=/home/littleboy/tools/git/build install\n# vi ~/.bashrc\n# 添加:\nexport PATH=/home/littleboy/tools/git/build:$PATH\n```\n\n# 创建一个git用户\n\n```shell\nuseradd git -m\n```\n\n# 创建证书登录\n\n获取到需要登陆到服务器的机器的公钥, 将公钥放到`/home/git/.ssh/authorized_keys`文件中。\n\n# 初始化Git仓库\n\n选定一个目录, 并使用命令来初始化:\n\n```shell\nsudo mkdir /gitStorage & cd /gitStorage\ngit init --bare sample.git\n# 将owner改为git\nsudo chown -R git:git sample.git\n```\n\n# 禁用shell登录\n\n```shell\nsudo vi /etc/passwd\n# 找到类似于, 并不一定完全相同的一行:\n# git:x:1001:1001:,,,:/home/git:/bin/bash\n# 将bash改为 git安装目录/bin/git-shell\n```\n\n# 克隆git仓库\n\n```shell\ngit clone git@ipAddress:/gitStorage/sample.git\n```\n\nok, 基本上git服务器就搭建完成了。那么接下来介绍使用场景。\n\n* 已经有了一个本地的git项目, 希望添加一个远程仓库。\n\n```shell\n# 添加一个远程仓库并指定一个简单的名字\ngit remote add test git@ipAddress:/gitStorage/sample.git\ngit add .\ngit commit -m \"first commit\"\n# 拉取远程仓库\ngit fetch test\n# 查看远程仓库的详情\ngit remote show test\n# 如果远程仓库没有master分支, 那么就创建一个:\ngit push test master\n# 现在查看一下本地的分支, 应该只有一个master分支\ngit branch -a\n# 将远程仓库的某一个分支绑定到本地分支\n# git branch --set-upstream-to=远程仓库的别名/远程仓库的分支 本地分支\ngit branch --set-upstream-to=test/master master\n# 拉取远程仓库\ngit pull\n```\n","source":"_posts/config_skill_experience/develop__tool_config/git/git-server.md","raw":"---\ntitle: 使用git搭建服务器\ndate: 2019-09-01 16:39:23\ncategories:\n- 配置技巧/经验\n- 开发工具配置\n- git\ntags:\n- git\n---\n\n# 前言\n\n当我们想使用git来管理源码, 但是又不想将代码上传至github或者其他的托管平台时, 可以尝试着自己搭建一个git服务器作为私有仓库。\n\n<!--more-->\n\n# 安装git\n\n安装git的话, 有两种方式, 一种是直接使用包管理系统安装, 另外一种是使用编译的方式安装。\n\n## 包管理系统安装git\n\n* debian\n\napt-get install git\n\n* centos\n\nyum install git\n\n## 编译的方式安装git\n\n去[这里](https://github.com/git/git/releases)查看git的最新版本并下载, 在写篇博客时, 最新版本是2.23:\n\n```shell\nwget https://github.com/git/git/archive/v2.23.0.tar.gz -O git-2.23.0.tar.gz\n# 解压\ntar -zxf git-2.23.0.tar.gz\ncd git-2.23.0\n# 编译并指定安装位置\nmake prefix=/home/littleboy/tools/git/build all\nmake prefix=/home/littleboy/tools/git/build install\n# vi ~/.bashrc\n# 添加:\nexport PATH=/home/littleboy/tools/git/build:$PATH\n```\n\n# 创建一个git用户\n\n```shell\nuseradd git -m\n```\n\n# 创建证书登录\n\n获取到需要登陆到服务器的机器的公钥, 将公钥放到`/home/git/.ssh/authorized_keys`文件中。\n\n# 初始化Git仓库\n\n选定一个目录, 并使用命令来初始化:\n\n```shell\nsudo mkdir /gitStorage & cd /gitStorage\ngit init --bare sample.git\n# 将owner改为git\nsudo chown -R git:git sample.git\n```\n\n# 禁用shell登录\n\n```shell\nsudo vi /etc/passwd\n# 找到类似于, 并不一定完全相同的一行:\n# git:x:1001:1001:,,,:/home/git:/bin/bash\n# 将bash改为 git安装目录/bin/git-shell\n```\n\n# 克隆git仓库\n\n```shell\ngit clone git@ipAddress:/gitStorage/sample.git\n```\n\nok, 基本上git服务器就搭建完成了。那么接下来介绍使用场景。\n\n* 已经有了一个本地的git项目, 希望添加一个远程仓库。\n\n```shell\n# 添加一个远程仓库并指定一个简单的名字\ngit remote add test git@ipAddress:/gitStorage/sample.git\ngit add .\ngit commit -m \"first commit\"\n# 拉取远程仓库\ngit fetch test\n# 查看远程仓库的详情\ngit remote show test\n# 如果远程仓库没有master分支, 那么就创建一个:\ngit push test master\n# 现在查看一下本地的分支, 应该只有一个master分支\ngit branch -a\n# 将远程仓库的某一个分支绑定到本地分支\n# git branch --set-upstream-to=远程仓库的别名/远程仓库的分支 本地分支\ngit branch --set-upstream-to=test/master master\n# 拉取远程仓库\ngit pull\n```\n","slug":"config_skill_experience/develop__tool_config/git/git-server","published":1,"updated":"2022-10-02T16:34:47.424Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejog003i3vsbbcxq0avj","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>当我们想使用git来管理源码, 但是又不想将代码上传至github或者其他的托管平台时, 可以尝试着自己搭建一个git服务器作为私有仓库。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"安装git\"><a href=\"#安装git\" class=\"headerlink\" title=\"安装git\"></a>安装git</h1><p>安装git的话, 有两种方式, 一种是直接使用包管理系统安装, 另外一种是使用编译的方式安装。</p>\n<h2 id=\"包管理系统安装git\"><a href=\"#包管理系统安装git\" class=\"headerlink\" title=\"包管理系统安装git\"></a>包管理系统安装git</h2><ul>\n<li>debian</li>\n</ul>\n<p>apt-get install git</p>\n<ul>\n<li>centos</li>\n</ul>\n<p>yum install git</p>\n<h2 id=\"编译的方式安装git\"><a href=\"#编译的方式安装git\" class=\"headerlink\" title=\"编译的方式安装git\"></a>编译的方式安装git</h2><p>去<a href=\"https://github.com/git/git/releases\">这里</a>查看git的最新版本并下载, 在写篇博客时, 最新版本是2.23:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/git/git/archive/v2.23.0.tar.gz -O git-2.23.0.tar.gz</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 解压</span></span><br><span class=\"line\">tar -zxf git-2.23.0.tar.gz</span><br><span class=\"line\">cd git-2.23.0</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 编译并指定安装位置</span></span><br><span class=\"line\">make prefix=/home/littleboy/tools/git/build all</span><br><span class=\"line\">make prefix=/home/littleboy/tools/git/build install</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> vi ~/.bashrc</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 添加:</span></span><br><span class=\"line\">export PATH=/home/littleboy/tools/git/build:$PATH</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"创建一个git用户\"><a href=\"#创建一个git用户\" class=\"headerlink\" title=\"创建一个git用户\"></a>创建一个git用户</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useradd git -m</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"创建证书登录\"><a href=\"#创建证书登录\" class=\"headerlink\" title=\"创建证书登录\"></a>创建证书登录</h1><p>获取到需要登陆到服务器的机器的公钥, 将公钥放到<code>/home/git/.ssh/authorized_keys</code>文件中。</p>\n<h1 id=\"初始化Git仓库\"><a href=\"#初始化Git仓库\" class=\"headerlink\" title=\"初始化Git仓库\"></a>初始化Git仓库</h1><p>选定一个目录, 并使用命令来初始化:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir /gitStorage &amp; cd /gitStorage</span><br><span class=\"line\">git init --bare sample.git</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 将owner改为git</span></span><br><span class=\"line\">sudo chown -R git:git sample.git</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"禁用shell登录\"><a href=\"#禁用shell登录\" class=\"headerlink\" title=\"禁用shell登录\"></a>禁用shell登录</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vi /etc/passwd</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 找到类似于, 并不一定完全相同的一行:</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> git:x:1001:1001:,,,:/home/git:/bin/bash</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 将bash改为 git安装目录/bin/git-shell</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"克隆git仓库\"><a href=\"#克隆git仓库\" class=\"headerlink\" title=\"克隆git仓库\"></a>克隆git仓库</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone git@ipAddress:/gitStorage/sample.git</span><br></pre></td></tr></table></figure>\n\n<p>ok, 基本上git服务器就搭建完成了。那么接下来介绍使用场景。</p>\n<ul>\n<li>已经有了一个本地的git项目, 希望添加一个远程仓库。</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 添加一个远程仓库并指定一个简单的名字</span></span><br><span class=\"line\">git remote add test git@ipAddress:/gitStorage/sample.git</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;first commit&quot;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 拉取远程仓库</span></span><br><span class=\"line\">git fetch test</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看远程仓库的详情</span></span><br><span class=\"line\">git remote show test</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 如果远程仓库没有master分支, 那么就创建一个:</span></span><br><span class=\"line\">git push test master</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 现在查看一下本地的分支, 应该只有一个master分支</span></span><br><span class=\"line\">git branch -a</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 将远程仓库的某一个分支绑定到本地分支</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> git branch --set-upstream-to=远程仓库的别名/远程仓库的分支 本地分支</span></span><br><span class=\"line\">git branch --set-upstream-to=test/master master</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 拉取远程仓库</span></span><br><span class=\"line\">git pull</span><br></pre></td></tr></table></figure>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>当我们想使用git来管理源码, 但是又不想将代码上传至github或者其他的托管平台时, 可以尝试着自己搭建一个git服务器作为私有仓库。</p>","more":"<h1 id=\"安装git\"><a href=\"#安装git\" class=\"headerlink\" title=\"安装git\"></a>安装git</h1><p>安装git的话, 有两种方式, 一种是直接使用包管理系统安装, 另外一种是使用编译的方式安装。</p>\n<h2 id=\"包管理系统安装git\"><a href=\"#包管理系统安装git\" class=\"headerlink\" title=\"包管理系统安装git\"></a>包管理系统安装git</h2><ul>\n<li>debian</li>\n</ul>\n<p>apt-get install git</p>\n<ul>\n<li>centos</li>\n</ul>\n<p>yum install git</p>\n<h2 id=\"编译的方式安装git\"><a href=\"#编译的方式安装git\" class=\"headerlink\" title=\"编译的方式安装git\"></a>编译的方式安装git</h2><p>去<a href=\"https://github.com/git/git/releases\">这里</a>查看git的最新版本并下载, 在写篇博客时, 最新版本是2.23:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/git/git/archive/v2.23.0.tar.gz -O git-2.23.0.tar.gz</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 解压</span></span><br><span class=\"line\">tar -zxf git-2.23.0.tar.gz</span><br><span class=\"line\">cd git-2.23.0</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 编译并指定安装位置</span></span><br><span class=\"line\">make prefix=/home/littleboy/tools/git/build all</span><br><span class=\"line\">make prefix=/home/littleboy/tools/git/build install</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> vi ~/.bashrc</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 添加:</span></span><br><span class=\"line\">export PATH=/home/littleboy/tools/git/build:$PATH</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"创建一个git用户\"><a href=\"#创建一个git用户\" class=\"headerlink\" title=\"创建一个git用户\"></a>创建一个git用户</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useradd git -m</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"创建证书登录\"><a href=\"#创建证书登录\" class=\"headerlink\" title=\"创建证书登录\"></a>创建证书登录</h1><p>获取到需要登陆到服务器的机器的公钥, 将公钥放到<code>/home/git/.ssh/authorized_keys</code>文件中。</p>\n<h1 id=\"初始化Git仓库\"><a href=\"#初始化Git仓库\" class=\"headerlink\" title=\"初始化Git仓库\"></a>初始化Git仓库</h1><p>选定一个目录, 并使用命令来初始化:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir /gitStorage &amp; cd /gitStorage</span><br><span class=\"line\">git init --bare sample.git</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 将owner改为git</span></span><br><span class=\"line\">sudo chown -R git:git sample.git</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"禁用shell登录\"><a href=\"#禁用shell登录\" class=\"headerlink\" title=\"禁用shell登录\"></a>禁用shell登录</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vi /etc/passwd</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 找到类似于, 并不一定完全相同的一行:</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> git:x:1001:1001:,,,:/home/git:/bin/bash</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 将bash改为 git安装目录/bin/git-shell</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"克隆git仓库\"><a href=\"#克隆git仓库\" class=\"headerlink\" title=\"克隆git仓库\"></a>克隆git仓库</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone git@ipAddress:/gitStorage/sample.git</span><br></pre></td></tr></table></figure>\n\n<p>ok, 基本上git服务器就搭建完成了。那么接下来介绍使用场景。</p>\n<ul>\n<li>已经有了一个本地的git项目, 希望添加一个远程仓库。</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 添加一个远程仓库并指定一个简单的名字</span></span><br><span class=\"line\">git remote add test git@ipAddress:/gitStorage/sample.git</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;first commit&quot;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 拉取远程仓库</span></span><br><span class=\"line\">git fetch test</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看远程仓库的详情</span></span><br><span class=\"line\">git remote show test</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 如果远程仓库没有master分支, 那么就创建一个:</span></span><br><span class=\"line\">git push test master</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 现在查看一下本地的分支, 应该只有一个master分支</span></span><br><span class=\"line\">git branch -a</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 将远程仓库的某一个分支绑定到本地分支</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> git branch --set-upstream-to=远程仓库的别名/远程仓库的分支 本地分支</span></span><br><span class=\"line\">git branch --set-upstream-to=test/master master</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 拉取远程仓库</span></span><br><span class=\"line\">git pull</span><br></pre></td></tr></table></figure>"},{"title":"linux mariadb 的一些问题","date":"2020-08-26T04:32:31.000Z","_content":"\n# 安装\n\n```\nsudo apt install mariadb-server\nsudo mysql_secure_installation\n```\n\n# 远程登录\n\n```\nGRANT ALL ON *.* TO 'admin'@'localhost' IDENTIFIED BY 'password' WITH GRANT OPTION;\nFLUSH PRIVILEGES;\nexit\n```\n\n# 中文乱码\n\n```\nvim /etc/my.cnf.d/mariadb-server.cnf\n\n# 在server.cnf中[mysqld]标签下添加代码\ninit-connect='SET NAMES utf8'\ncharacter-set-server = utf8\n\nsystemctl restart mariadb\n```\n","source":"_posts/config_skill_experience/develop__tool_config/mariadb/mariadb-linux-qa.md","raw":"---\ntitle: linux mariadb 的一些问题\ndate: 2020-08-26 12:32:31\ncategories:\n- 配置技巧/经验\n- 开发工具配置\n- mariadb\ntags:\n- mysql\n- mariadb\n---\n\n# 安装\n\n```\nsudo apt install mariadb-server\nsudo mysql_secure_installation\n```\n\n# 远程登录\n\n```\nGRANT ALL ON *.* TO 'admin'@'localhost' IDENTIFIED BY 'password' WITH GRANT OPTION;\nFLUSH PRIVILEGES;\nexit\n```\n\n# 中文乱码\n\n```\nvim /etc/my.cnf.d/mariadb-server.cnf\n\n# 在server.cnf中[mysqld]标签下添加代码\ninit-connect='SET NAMES utf8'\ncharacter-set-server = utf8\n\nsystemctl restart mariadb\n```\n","slug":"config_skill_experience/develop__tool_config/mariadb/mariadb-linux-qa","published":1,"updated":"2022-10-02T15:55:00.190Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejom003m3vsbgke45yht","content":"<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install mariadb-server</span><br><span class=\"line\">sudo mysql_secure_installation</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"远程登录\"><a href=\"#远程登录\" class=\"headerlink\" title=\"远程登录\"></a>远程登录</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GRANT ALL ON *.* TO &#x27;admin&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;password&#x27; WITH GRANT OPTION;</span><br><span class=\"line\">FLUSH PRIVILEGES;</span><br><span class=\"line\">exit</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"中文乱码\"><a href=\"#中文乱码\" class=\"headerlink\" title=\"中文乱码\"></a>中文乱码</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/my.cnf.d/mariadb-server.cnf</span><br><span class=\"line\"></span><br><span class=\"line\"># 在server.cnf中[mysqld]标签下添加代码</span><br><span class=\"line\">init-connect=&#x27;SET NAMES utf8&#x27;</span><br><span class=\"line\">character-set-server = utf8</span><br><span class=\"line\"></span><br><span class=\"line\">systemctl restart mariadb</span><br></pre></td></tr></table></figure>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"","more":"<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install mariadb-server</span><br><span class=\"line\">sudo mysql_secure_installation</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"远程登录\"><a href=\"#远程登录\" class=\"headerlink\" title=\"远程登录\"></a>远程登录</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GRANT ALL ON *.* TO &#x27;admin&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;password&#x27; WITH GRANT OPTION;</span><br><span class=\"line\">FLUSH PRIVILEGES;</span><br><span class=\"line\">exit</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"中文乱码\"><a href=\"#中文乱码\" class=\"headerlink\" title=\"中文乱码\"></a>中文乱码</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/my.cnf.d/mariadb-server.cnf</span><br><span class=\"line\"></span><br><span class=\"line\"># 在server.cnf中[mysqld]标签下添加代码</span><br><span class=\"line\">init-connect=&#x27;SET NAMES utf8&#x27;</span><br><span class=\"line\">character-set-server = utf8</span><br><span class=\"line\"></span><br><span class=\"line\">systemctl restart mariadb</span><br></pre></td></tr></table></figure>\n"},{"title":"mysql创建数据库时遇到的字符集的问题","date":"2019-07-14T11:14:36.000Z","_content":"\n# mysql 查看字符集\n\n```\nshow variables like '%char%'\n```\n\n这里要全都是`utf-8`。\n\n如果不是的话, 则修改`my.ini`。\n\n修改方式:\n\n```\n[mysqld]\ncharacter-set-server=utf8\n\n[client]\ndefault-character-set=utf8\n\n[mysql]\nno-auto-rehash\n```\n<!--more-->\n\n# mysql 创建数据库时指定字符集\n\n```\nCREATE DATABASE db_name DEFAULT CHARACTER SET UTF8 COLLATE UTF8_GENERAL_CI\n```\n\n# 更改数据库的字符编码\n\n```\nALTER DATABASE db_name DEFAULT CHARACTER SET utf8 COLLATE UTF8_GENERAL_CI\n```\n","source":"_posts/config_skill_experience/develop__tool_config/mysql/mysql-charset.md","raw":"---\ntitle: mysql创建数据库时遇到的字符集的问题\ndate: 2019-07-14 19:14:36\ncategories:\n- 配置技巧/经验\n- 开发工具配置\n- mysql\ntags:\n- mysql\n- 踩坑\n---\n\n# mysql 查看字符集\n\n```\nshow variables like '%char%'\n```\n\n这里要全都是`utf-8`。\n\n如果不是的话, 则修改`my.ini`。\n\n修改方式:\n\n```\n[mysqld]\ncharacter-set-server=utf8\n\n[client]\ndefault-character-set=utf8\n\n[mysql]\nno-auto-rehash\n```\n<!--more-->\n\n# mysql 创建数据库时指定字符集\n\n```\nCREATE DATABASE db_name DEFAULT CHARACTER SET UTF8 COLLATE UTF8_GENERAL_CI\n```\n\n# 更改数据库的字符编码\n\n```\nALTER DATABASE db_name DEFAULT CHARACTER SET utf8 COLLATE UTF8_GENERAL_CI\n```\n","slug":"config_skill_experience/develop__tool_config/mysql/mysql-charset","published":1,"updated":"2022-10-02T15:55:26.512Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejoq003p3vsb18qu9u7f","content":"<h1 id=\"mysql-查看字符集\"><a href=\"#mysql-查看字符集\" class=\"headerlink\" title=\"mysql 查看字符集\"></a>mysql 查看字符集</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show variables like &#x27;%char%&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>这里要全都是<code>utf-8</code>。</p>\n<p>如果不是的话, 则修改<code>my.ini</code>。</p>\n<p>修改方式:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">character-set-server=utf8</span><br><span class=\"line\"></span><br><span class=\"line\">[client]</span><br><span class=\"line\">default-character-set=utf8</span><br><span class=\"line\"></span><br><span class=\"line\">[mysql]</span><br><span class=\"line\">no-auto-rehash</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n\n<h1 id=\"mysql-创建数据库时指定字符集\"><a href=\"#mysql-创建数据库时指定字符集\" class=\"headerlink\" title=\"mysql 创建数据库时指定字符集\"></a>mysql 创建数据库时指定字符集</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE DATABASE db_name DEFAULT CHARACTER SET UTF8 COLLATE UTF8_GENERAL_CI</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"更改数据库的字符编码\"><a href=\"#更改数据库的字符编码\" class=\"headerlink\" title=\"更改数据库的字符编码\"></a>更改数据库的字符编码</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER DATABASE db_name DEFAULT CHARACTER SET utf8 COLLATE UTF8_GENERAL_CI</span><br></pre></td></tr></table></figure>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"mysql-查看字符集\"><a href=\"#mysql-查看字符集\" class=\"headerlink\" title=\"mysql 查看字符集\"></a>mysql 查看字符集</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show variables like &#x27;%char%&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>这里要全都是<code>utf-8</code>。</p>\n<p>如果不是的话, 则修改<code>my.ini</code>。</p>\n<p>修改方式:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">character-set-server=utf8</span><br><span class=\"line\"></span><br><span class=\"line\">[client]</span><br><span class=\"line\">default-character-set=utf8</span><br><span class=\"line\"></span><br><span class=\"line\">[mysql]</span><br><span class=\"line\">no-auto-rehash</span><br></pre></td></tr></table></figure>","more":"<h1 id=\"mysql-创建数据库时指定字符集\"><a href=\"#mysql-创建数据库时指定字符集\" class=\"headerlink\" title=\"mysql 创建数据库时指定字符集\"></a>mysql 创建数据库时指定字符集</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE DATABASE db_name DEFAULT CHARACTER SET UTF8 COLLATE UTF8_GENERAL_CI</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"更改数据库的字符编码\"><a href=\"#更改数据库的字符编码\" class=\"headerlink\" title=\"更改数据库的字符编码\"></a>更改数据库的字符编码</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER DATABASE db_name DEFAULT CHARACTER SET utf8 COLLATE UTF8_GENERAL_CI</span><br></pre></td></tr></table></figure>"},{"title":"MySql8.0以上only_full_group_by的问题","date":"2019-12-01T01:51:45.000Z","_content":"\n# 问题\n\n当在使用mysql8.0以上的版本时, 在使用`group by`时, 会出现类似下面的报错:\n\n```\nERROR 1055(42000): Expression #7 of SELECT list is not in GROUP BY clause and contains nonaggregated column ....\nthis is incompatible with sql_mode=only_full_group_by\n```\n\n在 mysql 8.0 以上的版本中, 对于 group by 这种聚合操作, 如果在 select 中的列, 没有在 group by 中出现, 那么这个 sql 是不合法的。因为列不在 group by 的从句中, 所以对于设置了这个 mode 的数据库, 在使用 group by 的时候, 就要用 MAX(), SUM() 的这种聚合函数, 才能完成 group by 的聚合操作。\n\n# 解决方案\n\n可以通过以下方式关闭:\n\n在 my.cnf 添加如下配置:\n```\n[mysqld]\n\nsql_mode=\"NO_AUTO_VALUE_ON_ZERO,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVSION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION,PIPES_AS_CONCAT,ANSI_QUOTES\"\n```\n\n注意, 这里NO_AUTO_CREATOR_USER选项在 mysql8 中已经取消, 不能加入这个。\n","source":"_posts/config_skill_experience/develop__tool_config/mysql/mysql-high-version-group-by-error.md","raw":"---\ntitle: MySql8.0以上only_full_group_by的问题\ndate: 2019-12-01 09:51:45\ncategories:\n- 配置技巧/经验\n- 开发工具配置\n- mysql\ntags:\n- mysql\n- 踩坑\n---\n\n# 问题\n\n当在使用mysql8.0以上的版本时, 在使用`group by`时, 会出现类似下面的报错:\n\n```\nERROR 1055(42000): Expression #7 of SELECT list is not in GROUP BY clause and contains nonaggregated column ....\nthis is incompatible with sql_mode=only_full_group_by\n```\n\n在 mysql 8.0 以上的版本中, 对于 group by 这种聚合操作, 如果在 select 中的列, 没有在 group by 中出现, 那么这个 sql 是不合法的。因为列不在 group by 的从句中, 所以对于设置了这个 mode 的数据库, 在使用 group by 的时候, 就要用 MAX(), SUM() 的这种聚合函数, 才能完成 group by 的聚合操作。\n\n# 解决方案\n\n可以通过以下方式关闭:\n\n在 my.cnf 添加如下配置:\n```\n[mysqld]\n\nsql_mode=\"NO_AUTO_VALUE_ON_ZERO,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVSION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION,PIPES_AS_CONCAT,ANSI_QUOTES\"\n```\n\n注意, 这里NO_AUTO_CREATOR_USER选项在 mysql8 中已经取消, 不能加入这个。\n","slug":"config_skill_experience/develop__tool_config/mysql/mysql-high-version-group-by-error","published":1,"updated":"2022-10-02T15:55:32.283Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejov003s3vsbh52x7aae","content":"<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>当在使用mysql8.0以上的版本时, 在使用<code>group by</code>时, 会出现类似下面的报错:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ERROR 1055(42000): Expression #7 of SELECT list is not in GROUP BY clause and contains nonaggregated column ....</span><br><span class=\"line\">this is incompatible with sql_mode=only_full_group_by</span><br></pre></td></tr></table></figure>\n\n<p>在 mysql 8.0 以上的版本中, 对于 group by 这种聚合操作, 如果在 select 中的列, 没有在 group by 中出现, 那么这个 sql 是不合法的。因为列不在 group by 的从句中, 所以对于设置了这个 mode 的数据库, 在使用 group by 的时候, 就要用 MAX(), SUM() 的这种聚合函数, 才能完成 group by 的聚合操作。</p>\n<h1 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h1><p>可以通过以下方式关闭:</p>\n<p>在 my.cnf 添加如下配置:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\"></span><br><span class=\"line\">sql_mode=&quot;NO_AUTO_VALUE_ON_ZERO,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVSION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION,PIPES_AS_CONCAT,ANSI_QUOTES&quot;</span><br></pre></td></tr></table></figure>\n\n<p>注意, 这里NO_AUTO_CREATOR_USER选项在 mysql8 中已经取消, 不能加入这个。</p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"","more":"<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>当在使用mysql8.0以上的版本时, 在使用<code>group by</code>时, 会出现类似下面的报错:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ERROR 1055(42000): Expression #7 of SELECT list is not in GROUP BY clause and contains nonaggregated column ....</span><br><span class=\"line\">this is incompatible with sql_mode=only_full_group_by</span><br></pre></td></tr></table></figure>\n\n<p>在 mysql 8.0 以上的版本中, 对于 group by 这种聚合操作, 如果在 select 中的列, 没有在 group by 中出现, 那么这个 sql 是不合法的。因为列不在 group by 的从句中, 所以对于设置了这个 mode 的数据库, 在使用 group by 的时候, 就要用 MAX(), SUM() 的这种聚合函数, 才能完成 group by 的聚合操作。</p>\n<h1 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h1><p>可以通过以下方式关闭:</p>\n<p>在 my.cnf 添加如下配置:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\"></span><br><span class=\"line\">sql_mode=&quot;NO_AUTO_VALUE_ON_ZERO,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVSION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION,PIPES_AS_CONCAT,ANSI_QUOTES&quot;</span><br></pre></td></tr></table></figure>\n\n<p>注意, 这里NO_AUTO_CREATOR_USER选项在 mysql8 中已经取消, 不能加入这个。</p>\n"},{"title":"mysql 主从数据库遇到的问题和解决方案","date":"2019-10-16T18:44:50.000Z","_content":"\n# 前言\n\n配置主从数据库请查看[mysql 配置主从数据库](/database/mysql-master-slave.html)。\n\n配置了之后遇到了一些问题, 具体表现为 `Slave_IO_Running` 和 `Slave_SQL_Running` 不是 yes。\n\n# 排查思路\n\n首先使用 `show slave status\\G` 命令查看 Last_Error, Last_IO_Error 和 Last_SQL_Error 三个项对应的值, 根据错误信息来具体解决。\n\n如果不能通过以上三个项来确定原因, 那么可以通过查看 Master_Log_File 项对应的值确定日志文件, 然后进入 bin 目录下, 使用 mysqlbinlog.exe 你的日志目录 -v > test.txt 来解析 mysql 的日志。\n\n## 遇到的一些具体的问题\n\n* error connecting to master 'user@localhost:3306'\n\n这里首先到主库中, 使用\n\n```sql\nuse mysql;\nselect Host, User from user;\n```\n\n来查看你的用户对应的Host是否是locahost, 然后使用用户名和密码登录一下主库检查密码是否错误。\n\n如果还不行, 那就等 1 分钟之后, 他就会报别的错误。~~我的就是这样。~~\n\n* COULD NOT FIND FIRST LOG FILE NAME IN BINARY LOG INDEX FILE\n\n这里应该是从库在读主库的日志的时候出了问题, 解决办法是:\n\n1. 先停止主从服务: `stop slave;`\n2. 在主库中使用 `flush logs` 来刷新日志;\n3. 在主库中使用 `show master status;` 命令来查看日志文件名和日志号;\n4. 到从库中执行 `CHANGE MASTER TO MASTER_LOG_FILE='刚才查看的日志文件名',MASTER_LOG_POS=刚才查看的日志文件号;`\n5. 执行 `start slave; show slave status\\G`\n\n","source":"_posts/config_skill_experience/develop__tool_config/mysql/mysql-master-slave-error.md","raw":"---\ntitle: mysql 主从数据库遇到的问题和解决方案\ndate: 2019-10-17 02:44:50\ncategories:\n- 配置技巧/经验\n- 开发工具配置\n- mysql\ntags:\n- mysql\n---\n\n# 前言\n\n配置主从数据库请查看[mysql 配置主从数据库](/database/mysql-master-slave.html)。\n\n配置了之后遇到了一些问题, 具体表现为 `Slave_IO_Running` 和 `Slave_SQL_Running` 不是 yes。\n\n# 排查思路\n\n首先使用 `show slave status\\G` 命令查看 Last_Error, Last_IO_Error 和 Last_SQL_Error 三个项对应的值, 根据错误信息来具体解决。\n\n如果不能通过以上三个项来确定原因, 那么可以通过查看 Master_Log_File 项对应的值确定日志文件, 然后进入 bin 目录下, 使用 mysqlbinlog.exe 你的日志目录 -v > test.txt 来解析 mysql 的日志。\n\n## 遇到的一些具体的问题\n\n* error connecting to master 'user@localhost:3306'\n\n这里首先到主库中, 使用\n\n```sql\nuse mysql;\nselect Host, User from user;\n```\n\n来查看你的用户对应的Host是否是locahost, 然后使用用户名和密码登录一下主库检查密码是否错误。\n\n如果还不行, 那就等 1 分钟之后, 他就会报别的错误。~~我的就是这样。~~\n\n* COULD NOT FIND FIRST LOG FILE NAME IN BINARY LOG INDEX FILE\n\n这里应该是从库在读主库的日志的时候出了问题, 解决办法是:\n\n1. 先停止主从服务: `stop slave;`\n2. 在主库中使用 `flush logs` 来刷新日志;\n3. 在主库中使用 `show master status;` 命令来查看日志文件名和日志号;\n4. 到从库中执行 `CHANGE MASTER TO MASTER_LOG_FILE='刚才查看的日志文件名',MASTER_LOG_POS=刚才查看的日志文件号;`\n5. 执行 `start slave; show slave status\\G`\n\n","slug":"config_skill_experience/develop__tool_config/mysql/mysql-master-slave-error","published":1,"updated":"2022-10-02T15:56:17.254Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejoz003v3vsbbh6q8xaa","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>配置主从数据库请查看<a href=\"/database/mysql-master-slave.html\">mysql 配置主从数据库</a>。</p>\n<p>配置了之后遇到了一些问题, 具体表现为 <code>Slave_IO_Running</code> 和 <code>Slave_SQL_Running</code> 不是 yes。</p>\n<h1 id=\"排查思路\"><a href=\"#排查思路\" class=\"headerlink\" title=\"排查思路\"></a>排查思路</h1><p>首先使用 <code>show slave status\\G</code> 命令查看 Last_Error, Last_IO_Error 和 Last_SQL_Error 三个项对应的值, 根据错误信息来具体解决。</p>\n<p>如果不能通过以上三个项来确定原因, 那么可以通过查看 Master_Log_File 项对应的值确定日志文件, 然后进入 bin 目录下, 使用 mysqlbinlog.exe 你的日志目录 -v &gt; test.txt 来解析 mysql 的日志。</p>\n<h2 id=\"遇到的一些具体的问题\"><a href=\"#遇到的一些具体的问题\" class=\"headerlink\" title=\"遇到的一些具体的问题\"></a>遇到的一些具体的问题</h2><ul>\n<li>error connecting to master ‘user@localhost:3306’</li>\n</ul>\n<p>这里首先到主库中, 使用</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use mysql;</span><br><span class=\"line\"><span class=\"keyword\">select</span> Host, <span class=\"keyword\">User</span> <span class=\"keyword\">from</span> <span class=\"keyword\">user</span>;</span><br></pre></td></tr></table></figure>\n\n<p>来查看你的用户对应的Host是否是locahost, 然后使用用户名和密码登录一下主库检查密码是否错误。</p>\n<p>如果还不行, 那就等 1 分钟之后, 他就会报别的错误。<del>我的就是这样。</del></p>\n<ul>\n<li>COULD NOT FIND FIRST LOG FILE NAME IN BINARY LOG INDEX FILE</li>\n</ul>\n<p>这里应该是从库在读主库的日志的时候出了问题, 解决办法是:</p>\n<ol>\n<li>先停止主从服务: <code>stop slave;</code></li>\n<li>在主库中使用 <code>flush logs</code> 来刷新日志;</li>\n<li>在主库中使用 <code>show master status;</code> 命令来查看日志文件名和日志号;</li>\n<li>到从库中执行 <code>CHANGE MASTER TO MASTER_LOG_FILE=&#39;刚才查看的日志文件名&#39;,MASTER_LOG_POS=刚才查看的日志文件号;</code></li>\n<li>执行 <code>start slave; show slave status\\G</code></li>\n</ol>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>配置主从数据库请查看<a href=\"/database/mysql-master-slave.html\">mysql 配置主从数据库</a>。</p>\n<p>配置了之后遇到了一些问题, 具体表现为 <code>Slave_IO_Running</code> 和 <code>Slave_SQL_Running</code> 不是 yes。</p>\n<h1 id=\"排查思路\"><a href=\"#排查思路\" class=\"headerlink\" title=\"排查思路\"></a>排查思路</h1><p>首先使用 <code>show slave status\\G</code> 命令查看 Last_Error, Last_IO_Error 和 Last_SQL_Error 三个项对应的值, 根据错误信息来具体解决。</p>\n<p>如果不能通过以上三个项来确定原因, 那么可以通过查看 Master_Log_File 项对应的值确定日志文件, 然后进入 bin 目录下, 使用 mysqlbinlog.exe 你的日志目录 -v &gt; test.txt 来解析 mysql 的日志。</p>\n<h2 id=\"遇到的一些具体的问题\"><a href=\"#遇到的一些具体的问题\" class=\"headerlink\" title=\"遇到的一些具体的问题\"></a>遇到的一些具体的问题</h2><ul>\n<li>error connecting to master ‘user@localhost:3306’</li>\n</ul>\n<p>这里首先到主库中, 使用</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use mysql;</span><br><span class=\"line\"><span class=\"keyword\">select</span> Host, <span class=\"keyword\">User</span> <span class=\"keyword\">from</span> <span class=\"keyword\">user</span>;</span><br></pre></td></tr></table></figure>\n\n<p>来查看你的用户对应的Host是否是locahost, 然后使用用户名和密码登录一下主库检查密码是否错误。</p>\n<p>如果还不行, 那就等 1 分钟之后, 他就会报别的错误。<del>我的就是这样。</del></p>\n<ul>\n<li>COULD NOT FIND FIRST LOG FILE NAME IN BINARY LOG INDEX FILE</li>\n</ul>\n<p>这里应该是从库在读主库的日志的时候出了问题, 解决办法是:</p>\n<ol>\n<li>先停止主从服务: <code>stop slave;</code></li>\n<li>在主库中使用 <code>flush logs</code> 来刷新日志;</li>\n<li>在主库中使用 <code>show master status;</code> 命令来查看日志文件名和日志号;</li>\n<li>到从库中执行 <code>CHANGE MASTER TO MASTER_LOG_FILE=&#39;刚才查看的日志文件名&#39;,MASTER_LOG_POS=刚才查看的日志文件号;</code></li>\n<li>执行 <code>start slave; show slave status\\G</code></li>\n</ol>\n"},{"title":"mysql 配置主从数据库","date":"2019-07-17T02:57:02.000Z","_content":"\n# 目标\n\n* 将两台可以ping通的电脑上的mysql数据库设置为主从状态\n\n<!--more-->\n\n# 物料\n\n两台已经装好mysql, 并且可以互相ping通的主机\n安装windows解压版mysql可以查看[这篇文章](/software/set_up/mysql-setup.html)。\n\n# 步骤\n\n* 首先, 打开 防火墙的高级设置, 添加入站规则, 将 mysql默认的3306端口添加好, 保存。\n\n* 编辑将要设置的主数据库的my.ini:\n\n```\n# Remove leading # and set to the amount of RAM for the most important data\n# cache in MySQL. Start at 70% of total RAM for dedicated server, else 10%.\n# innodb_buffer_pool_size = 128M\n \n# Remove leading # to turn on a very important data integrity option: logging\n# changes to the binary log between backups.\n# log_bin\n\n[mysqld]\n\n##server_id和log_bin两项即可，其它配置都是可配可不配\n\n# 这里填写mysql安装地址\nbasedir=C:/Users/Administrator/mysql-8.0.16-winx64\ndatadir=C:/Users/administrator/mysql-8.0.16-winx64/data\n\n# 唯一标识id\nserver-id=1\n\n# 开启二进制日志\nlog-bin=mysql-bin\n \n# port=5506\n \n# binlog-do-db=wordpress是表示只备份wordpress。\n# binlog_ignore_db=mysql表示忽略备份mysql。\n# 不加binlog-do-db和binlog_ignore_db，那就表示备份全部数据库\n# binlog-do-db=wordpress\n# binlog_ignore_db=mysql\n \n \n# Remove leading # to set options mainly useful for reporting servers.\n# The server defaults are faster for transactions and fast SELECTs.\n# Adjust sizes as needed, experiment to find the optimal values.\n# join_buffer_size = 128M\n# sort_buffer_size = 2M\n# read_rnd_buffer_size = 2M \n \nsql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES\n```\n\n* 编辑从数据库的my.ini\n\n```\n[mysql]\n# 设置mysql客户端默认字符集\ndefault-character-set=utf8 \n[mysqld]\n\n# 这里填写mysql安装地址\nbasedir=C:/Users/Administrator/mysql-8.0.16-winx64\ndatadir=C:/Users/administrator/mysql-8.0.16-winx64/data\n\nserver-id=2\n# 开启二进制日志\nlog-bin=mysql-bin\nrelay-log=relay-bin\n# 设置只读权限\nread-only=1\n# 复制时忽略相关表或者数据库\n# replicate-do-db = name 只对这个数据库进行镜像处理。\n# replicate-ignore-table = dbname.tablename 不对这个数据表进行镜像处理。\n# replicate-wild-ignore-table = dbn.tablen 不对这些数据表进行镜像处理。\n# replicate-ignore-db = dbname 不对这个数据库进行镜像处理。\n \nreplicate-ignore-db = mysql\nreplicate-ignore-db = information_schema\n# replicate-wild-do-table = tt.admin\n# 所要同步的数据库的单个表\n# replicate-wild-do-table = test.user\n```\n\n* 创建一个用户给从数据库\n\n在主数据库上执行:\n\n```\nCREATE USER 'user'@'这里填写从数据库的地址' IDENTIFIED BY 'password';\nGRANT REPLICATION SLAVE ON *.* TO 'user'@'从数据库地址';\n# 注意, 第二句话适用于高版本, 低版本可以在后面加上: IDENTIFIED BY 'password';\n```\n\n这样就创建了一个给从数据库登录主数据库的用户user。\n\n* 在从数据库上配置主数据库给从数据库登录的用户\n\n首先查看主数据库的日志号:\n\n```\nshow master status;\n```\n\n然后在从数据库上执行:\n```\nchange master to master_host='主数据库的地址',master_user='刚才在主数据库中创建的用户user',master_password='password',master_port=3306,master_log_file='刚才看的主数据库的日志号';\n```\n\n* 执行从数据库的SLAVE服务:\n\n```\nSTART SLAVE;\n\n# 停止服务\nSTOP SLAVE;\n```\n\n* 完成\n\n# 其他\n\n查看slave日志:\n\n```\nshow slave status;\n```\n\n如果遇到了一些错误导致主从复制停止, 那么可以使用\n\n```\nslave stop;\nSET GLOBAL SQL_SLAVE_SKIP_COUNTER = n（保险起见设置n=1）        #跳过这n个event\nslave start\n```\n\n或者\n\n```\nvi /etc/my.cnf\n[mysqld]\n#slave-skip-errors=1062,1053,1146 #跳过指定error no类型的错误\n#slave-skip-errors=all #跳过所有错误\n```\n\n怎么判断mysql的主从是否同步？(同步日志)\n\n```\nshow slave status\\G\n```\n\n查看`Slave_IO_Running`和`Slave_SQL_Running`是否都是yes。\n\n# 参考博客\n\n[sharding-jdbc的读写分离，数据库主从同步实践](https://blog.csdn.net/qq_18416057/article/details/82898234)\n","source":"_posts/config_skill_experience/develop__tool_config/mysql/mysql-master-slave.md","raw":"---\ntitle: mysql 配置主从数据库\ndate: 2019-07-17 10:57:02\ncategories:\n- 配置技巧/经验\n- 开发工具配置\n- mysql\ntags:\n- mysql\n---\n\n# 目标\n\n* 将两台可以ping通的电脑上的mysql数据库设置为主从状态\n\n<!--more-->\n\n# 物料\n\n两台已经装好mysql, 并且可以互相ping通的主机\n安装windows解压版mysql可以查看[这篇文章](/software/set_up/mysql-setup.html)。\n\n# 步骤\n\n* 首先, 打开 防火墙的高级设置, 添加入站规则, 将 mysql默认的3306端口添加好, 保存。\n\n* 编辑将要设置的主数据库的my.ini:\n\n```\n# Remove leading # and set to the amount of RAM for the most important data\n# cache in MySQL. Start at 70% of total RAM for dedicated server, else 10%.\n# innodb_buffer_pool_size = 128M\n \n# Remove leading # to turn on a very important data integrity option: logging\n# changes to the binary log between backups.\n# log_bin\n\n[mysqld]\n\n##server_id和log_bin两项即可，其它配置都是可配可不配\n\n# 这里填写mysql安装地址\nbasedir=C:/Users/Administrator/mysql-8.0.16-winx64\ndatadir=C:/Users/administrator/mysql-8.0.16-winx64/data\n\n# 唯一标识id\nserver-id=1\n\n# 开启二进制日志\nlog-bin=mysql-bin\n \n# port=5506\n \n# binlog-do-db=wordpress是表示只备份wordpress。\n# binlog_ignore_db=mysql表示忽略备份mysql。\n# 不加binlog-do-db和binlog_ignore_db，那就表示备份全部数据库\n# binlog-do-db=wordpress\n# binlog_ignore_db=mysql\n \n \n# Remove leading # to set options mainly useful for reporting servers.\n# The server defaults are faster for transactions and fast SELECTs.\n# Adjust sizes as needed, experiment to find the optimal values.\n# join_buffer_size = 128M\n# sort_buffer_size = 2M\n# read_rnd_buffer_size = 2M \n \nsql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES\n```\n\n* 编辑从数据库的my.ini\n\n```\n[mysql]\n# 设置mysql客户端默认字符集\ndefault-character-set=utf8 \n[mysqld]\n\n# 这里填写mysql安装地址\nbasedir=C:/Users/Administrator/mysql-8.0.16-winx64\ndatadir=C:/Users/administrator/mysql-8.0.16-winx64/data\n\nserver-id=2\n# 开启二进制日志\nlog-bin=mysql-bin\nrelay-log=relay-bin\n# 设置只读权限\nread-only=1\n# 复制时忽略相关表或者数据库\n# replicate-do-db = name 只对这个数据库进行镜像处理。\n# replicate-ignore-table = dbname.tablename 不对这个数据表进行镜像处理。\n# replicate-wild-ignore-table = dbn.tablen 不对这些数据表进行镜像处理。\n# replicate-ignore-db = dbname 不对这个数据库进行镜像处理。\n \nreplicate-ignore-db = mysql\nreplicate-ignore-db = information_schema\n# replicate-wild-do-table = tt.admin\n# 所要同步的数据库的单个表\n# replicate-wild-do-table = test.user\n```\n\n* 创建一个用户给从数据库\n\n在主数据库上执行:\n\n```\nCREATE USER 'user'@'这里填写从数据库的地址' IDENTIFIED BY 'password';\nGRANT REPLICATION SLAVE ON *.* TO 'user'@'从数据库地址';\n# 注意, 第二句话适用于高版本, 低版本可以在后面加上: IDENTIFIED BY 'password';\n```\n\n这样就创建了一个给从数据库登录主数据库的用户user。\n\n* 在从数据库上配置主数据库给从数据库登录的用户\n\n首先查看主数据库的日志号:\n\n```\nshow master status;\n```\n\n然后在从数据库上执行:\n```\nchange master to master_host='主数据库的地址',master_user='刚才在主数据库中创建的用户user',master_password='password',master_port=3306,master_log_file='刚才看的主数据库的日志号';\n```\n\n* 执行从数据库的SLAVE服务:\n\n```\nSTART SLAVE;\n\n# 停止服务\nSTOP SLAVE;\n```\n\n* 完成\n\n# 其他\n\n查看slave日志:\n\n```\nshow slave status;\n```\n\n如果遇到了一些错误导致主从复制停止, 那么可以使用\n\n```\nslave stop;\nSET GLOBAL SQL_SLAVE_SKIP_COUNTER = n（保险起见设置n=1）        #跳过这n个event\nslave start\n```\n\n或者\n\n```\nvi /etc/my.cnf\n[mysqld]\n#slave-skip-errors=1062,1053,1146 #跳过指定error no类型的错误\n#slave-skip-errors=all #跳过所有错误\n```\n\n怎么判断mysql的主从是否同步？(同步日志)\n\n```\nshow slave status\\G\n```\n\n查看`Slave_IO_Running`和`Slave_SQL_Running`是否都是yes。\n\n# 参考博客\n\n[sharding-jdbc的读写分离，数据库主从同步实践](https://blog.csdn.net/qq_18416057/article/details/82898234)\n","slug":"config_skill_experience/develop__tool_config/mysql/mysql-master-slave","published":1,"updated":"2022-10-02T15:56:06.913Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejp4003z3vsbff644u6z","content":"<h1 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h1><ul>\n<li>将两台可以ping通的电脑上的mysql数据库设置为主从状态</li>\n</ul>\n<span id=\"more\"></span>\n\n<h1 id=\"物料\"><a href=\"#物料\" class=\"headerlink\" title=\"物料\"></a>物料</h1><p>两台已经装好mysql, 并且可以互相ping通的主机<br>安装windows解压版mysql可以查看<a href=\"/software/set_up/mysql-setup.html\">这篇文章</a>。</p>\n<h1 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h1><ul>\n<li><p>首先, 打开 防火墙的高级设置, 添加入站规则, 将 mysql默认的3306端口添加好, 保存。</p>\n</li>\n<li><p>编辑将要设置的主数据库的my.ini:</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Remove leading # and set to the amount of RAM for the most important data</span><br><span class=\"line\"># cache in MySQL. Start at 70% of total RAM for dedicated server, else 10%.</span><br><span class=\"line\"># innodb_buffer_pool_size = 128M</span><br><span class=\"line\"> </span><br><span class=\"line\"># Remove leading # to turn on a very important data integrity option: logging</span><br><span class=\"line\"># changes to the binary log between backups.</span><br><span class=\"line\"># log_bin</span><br><span class=\"line\"></span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\"></span><br><span class=\"line\">##server_id和log_bin两项即可，其它配置都是可配可不配</span><br><span class=\"line\"></span><br><span class=\"line\"># 这里填写mysql安装地址</span><br><span class=\"line\">basedir=C:/Users/Administrator/mysql-8.0.16-winx64</span><br><span class=\"line\">datadir=C:/Users/administrator/mysql-8.0.16-winx64/data</span><br><span class=\"line\"></span><br><span class=\"line\"># 唯一标识id</span><br><span class=\"line\">server-id=1</span><br><span class=\"line\"></span><br><span class=\"line\"># 开启二进制日志</span><br><span class=\"line\">log-bin=mysql-bin</span><br><span class=\"line\"> </span><br><span class=\"line\"># port=5506</span><br><span class=\"line\"> </span><br><span class=\"line\"># binlog-do-db=wordpress是表示只备份wordpress。</span><br><span class=\"line\"># binlog_ignore_db=mysql表示忽略备份mysql。</span><br><span class=\"line\"># 不加binlog-do-db和binlog_ignore_db，那就表示备份全部数据库</span><br><span class=\"line\"># binlog-do-db=wordpress</span><br><span class=\"line\"># binlog_ignore_db=mysql</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"># Remove leading # to set options mainly useful for reporting servers.</span><br><span class=\"line\"># The server defaults are faster for transactions and fast SELECTs.</span><br><span class=\"line\"># Adjust sizes as needed, experiment to find the optimal values.</span><br><span class=\"line\"># join_buffer_size = 128M</span><br><span class=\"line\"># sort_buffer_size = 2M</span><br><span class=\"line\"># read_rnd_buffer_size = 2M </span><br><span class=\"line\"> </span><br><span class=\"line\">sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>编辑从数据库的my.ini</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysql]</span><br><span class=\"line\"># 设置mysql客户端默认字符集</span><br><span class=\"line\">default-character-set=utf8 </span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\"></span><br><span class=\"line\"># 这里填写mysql安装地址</span><br><span class=\"line\">basedir=C:/Users/Administrator/mysql-8.0.16-winx64</span><br><span class=\"line\">datadir=C:/Users/administrator/mysql-8.0.16-winx64/data</span><br><span class=\"line\"></span><br><span class=\"line\">server-id=2</span><br><span class=\"line\"># 开启二进制日志</span><br><span class=\"line\">log-bin=mysql-bin</span><br><span class=\"line\">relay-log=relay-bin</span><br><span class=\"line\"># 设置只读权限</span><br><span class=\"line\">read-only=1</span><br><span class=\"line\"># 复制时忽略相关表或者数据库</span><br><span class=\"line\"># replicate-do-db = name 只对这个数据库进行镜像处理。</span><br><span class=\"line\"># replicate-ignore-table = dbname.tablename 不对这个数据表进行镜像处理。</span><br><span class=\"line\"># replicate-wild-ignore-table = dbn.tablen 不对这些数据表进行镜像处理。</span><br><span class=\"line\"># replicate-ignore-db = dbname 不对这个数据库进行镜像处理。</span><br><span class=\"line\"> </span><br><span class=\"line\">replicate-ignore-db = mysql</span><br><span class=\"line\">replicate-ignore-db = information_schema</span><br><span class=\"line\"># replicate-wild-do-table = tt.admin</span><br><span class=\"line\"># 所要同步的数据库的单个表</span><br><span class=\"line\"># replicate-wild-do-table = test.user</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建一个用户给从数据库</li>\n</ul>\n<p>在主数据库上执行:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE USER &#x27;user&#x27;@&#x27;这里填写从数据库的地址&#x27; IDENTIFIED BY &#x27;password&#x27;;</span><br><span class=\"line\">GRANT REPLICATION SLAVE ON *.* TO &#x27;user&#x27;@&#x27;从数据库地址&#x27;;</span><br><span class=\"line\"># 注意, 第二句话适用于高版本, 低版本可以在后面加上: IDENTIFIED BY &#x27;password&#x27;;</span><br></pre></td></tr></table></figure>\n\n<p>这样就创建了一个给从数据库登录主数据库的用户user。</p>\n<ul>\n<li>在从数据库上配置主数据库给从数据库登录的用户</li>\n</ul>\n<p>首先查看主数据库的日志号:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show master status;</span><br></pre></td></tr></table></figure>\n\n<p>然后在从数据库上执行:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">change master to master_host=&#x27;主数据库的地址&#x27;,master_user=&#x27;刚才在主数据库中创建的用户user&#x27;,master_password=&#x27;password&#x27;,master_port=3306,master_log_file=&#x27;刚才看的主数据库的日志号&#x27;;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>执行从数据库的SLAVE服务:</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">START SLAVE;</span><br><span class=\"line\"></span><br><span class=\"line\"># 停止服务</span><br><span class=\"line\">STOP SLAVE;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>完成</li>\n</ul>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><p>查看slave日志:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show slave status;</span><br></pre></td></tr></table></figure>\n\n<p>如果遇到了一些错误导致主从复制停止, 那么可以使用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">slave stop;</span><br><span class=\"line\">SET GLOBAL SQL_SLAVE_SKIP_COUNTER = n（保险起见设置n=1）        #跳过这n个event</span><br><span class=\"line\">slave start</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/my.cnf</span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">#slave-skip-errors=1062,1053,1146 #跳过指定error no类型的错误</span><br><span class=\"line\">#slave-skip-errors=all #跳过所有错误</span><br></pre></td></tr></table></figure>\n\n<p>怎么判断mysql的主从是否同步？(同步日志)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show slave status\\G</span><br></pre></td></tr></table></figure>\n\n<p>查看<code>Slave_IO_Running</code>和<code>Slave_SQL_Running</code>是否都是yes。</p>\n<h1 id=\"参考博客\"><a href=\"#参考博客\" class=\"headerlink\" title=\"参考博客\"></a>参考博客</h1><p><a href=\"https://blog.csdn.net/qq_18416057/article/details/82898234\">sharding-jdbc的读写分离，数据库主从同步实践</a></p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h1><ul>\n<li>将两台可以ping通的电脑上的mysql数据库设置为主从状态</li>\n</ul>","more":"<h1 id=\"物料\"><a href=\"#物料\" class=\"headerlink\" title=\"物料\"></a>物料</h1><p>两台已经装好mysql, 并且可以互相ping通的主机<br>安装windows解压版mysql可以查看<a href=\"/software/set_up/mysql-setup.html\">这篇文章</a>。</p>\n<h1 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h1><ul>\n<li><p>首先, 打开 防火墙的高级设置, 添加入站规则, 将 mysql默认的3306端口添加好, 保存。</p>\n</li>\n<li><p>编辑将要设置的主数据库的my.ini:</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Remove leading # and set to the amount of RAM for the most important data</span><br><span class=\"line\"># cache in MySQL. Start at 70% of total RAM for dedicated server, else 10%.</span><br><span class=\"line\"># innodb_buffer_pool_size = 128M</span><br><span class=\"line\"> </span><br><span class=\"line\"># Remove leading # to turn on a very important data integrity option: logging</span><br><span class=\"line\"># changes to the binary log between backups.</span><br><span class=\"line\"># log_bin</span><br><span class=\"line\"></span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\"></span><br><span class=\"line\">##server_id和log_bin两项即可，其它配置都是可配可不配</span><br><span class=\"line\"></span><br><span class=\"line\"># 这里填写mysql安装地址</span><br><span class=\"line\">basedir=C:/Users/Administrator/mysql-8.0.16-winx64</span><br><span class=\"line\">datadir=C:/Users/administrator/mysql-8.0.16-winx64/data</span><br><span class=\"line\"></span><br><span class=\"line\"># 唯一标识id</span><br><span class=\"line\">server-id=1</span><br><span class=\"line\"></span><br><span class=\"line\"># 开启二进制日志</span><br><span class=\"line\">log-bin=mysql-bin</span><br><span class=\"line\"> </span><br><span class=\"line\"># port=5506</span><br><span class=\"line\"> </span><br><span class=\"line\"># binlog-do-db=wordpress是表示只备份wordpress。</span><br><span class=\"line\"># binlog_ignore_db=mysql表示忽略备份mysql。</span><br><span class=\"line\"># 不加binlog-do-db和binlog_ignore_db，那就表示备份全部数据库</span><br><span class=\"line\"># binlog-do-db=wordpress</span><br><span class=\"line\"># binlog_ignore_db=mysql</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"># Remove leading # to set options mainly useful for reporting servers.</span><br><span class=\"line\"># The server defaults are faster for transactions and fast SELECTs.</span><br><span class=\"line\"># Adjust sizes as needed, experiment to find the optimal values.</span><br><span class=\"line\"># join_buffer_size = 128M</span><br><span class=\"line\"># sort_buffer_size = 2M</span><br><span class=\"line\"># read_rnd_buffer_size = 2M </span><br><span class=\"line\"> </span><br><span class=\"line\">sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>编辑从数据库的my.ini</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysql]</span><br><span class=\"line\"># 设置mysql客户端默认字符集</span><br><span class=\"line\">default-character-set=utf8 </span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\"></span><br><span class=\"line\"># 这里填写mysql安装地址</span><br><span class=\"line\">basedir=C:/Users/Administrator/mysql-8.0.16-winx64</span><br><span class=\"line\">datadir=C:/Users/administrator/mysql-8.0.16-winx64/data</span><br><span class=\"line\"></span><br><span class=\"line\">server-id=2</span><br><span class=\"line\"># 开启二进制日志</span><br><span class=\"line\">log-bin=mysql-bin</span><br><span class=\"line\">relay-log=relay-bin</span><br><span class=\"line\"># 设置只读权限</span><br><span class=\"line\">read-only=1</span><br><span class=\"line\"># 复制时忽略相关表或者数据库</span><br><span class=\"line\"># replicate-do-db = name 只对这个数据库进行镜像处理。</span><br><span class=\"line\"># replicate-ignore-table = dbname.tablename 不对这个数据表进行镜像处理。</span><br><span class=\"line\"># replicate-wild-ignore-table = dbn.tablen 不对这些数据表进行镜像处理。</span><br><span class=\"line\"># replicate-ignore-db = dbname 不对这个数据库进行镜像处理。</span><br><span class=\"line\"> </span><br><span class=\"line\">replicate-ignore-db = mysql</span><br><span class=\"line\">replicate-ignore-db = information_schema</span><br><span class=\"line\"># replicate-wild-do-table = tt.admin</span><br><span class=\"line\"># 所要同步的数据库的单个表</span><br><span class=\"line\"># replicate-wild-do-table = test.user</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建一个用户给从数据库</li>\n</ul>\n<p>在主数据库上执行:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE USER &#x27;user&#x27;@&#x27;这里填写从数据库的地址&#x27; IDENTIFIED BY &#x27;password&#x27;;</span><br><span class=\"line\">GRANT REPLICATION SLAVE ON *.* TO &#x27;user&#x27;@&#x27;从数据库地址&#x27;;</span><br><span class=\"line\"># 注意, 第二句话适用于高版本, 低版本可以在后面加上: IDENTIFIED BY &#x27;password&#x27;;</span><br></pre></td></tr></table></figure>\n\n<p>这样就创建了一个给从数据库登录主数据库的用户user。</p>\n<ul>\n<li>在从数据库上配置主数据库给从数据库登录的用户</li>\n</ul>\n<p>首先查看主数据库的日志号:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show master status;</span><br></pre></td></tr></table></figure>\n\n<p>然后在从数据库上执行:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">change master to master_host=&#x27;主数据库的地址&#x27;,master_user=&#x27;刚才在主数据库中创建的用户user&#x27;,master_password=&#x27;password&#x27;,master_port=3306,master_log_file=&#x27;刚才看的主数据库的日志号&#x27;;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>执行从数据库的SLAVE服务:</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">START SLAVE;</span><br><span class=\"line\"></span><br><span class=\"line\"># 停止服务</span><br><span class=\"line\">STOP SLAVE;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>完成</li>\n</ul>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><p>查看slave日志:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show slave status;</span><br></pre></td></tr></table></figure>\n\n<p>如果遇到了一些错误导致主从复制停止, 那么可以使用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">slave stop;</span><br><span class=\"line\">SET GLOBAL SQL_SLAVE_SKIP_COUNTER = n（保险起见设置n=1）        #跳过这n个event</span><br><span class=\"line\">slave start</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/my.cnf</span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">#slave-skip-errors=1062,1053,1146 #跳过指定error no类型的错误</span><br><span class=\"line\">#slave-skip-errors=all #跳过所有错误</span><br></pre></td></tr></table></figure>\n\n<p>怎么判断mysql的主从是否同步？(同步日志)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show slave status\\G</span><br></pre></td></tr></table></figure>\n\n<p>查看<code>Slave_IO_Running</code>和<code>Slave_SQL_Running</code>是否都是yes。</p>\n<h1 id=\"参考博客\"><a href=\"#参考博客\" class=\"headerlink\" title=\"参考博客\"></a>参考博客</h1><p><a href=\"https://blog.csdn.net/qq_18416057/article/details/82898234\">sharding-jdbc的读写分离，数据库主从同步实践</a></p>"},{"title":"安装解压版mysql","date":"2019-01-10T13:29:32.000Z","_content":"\n# 前言\n\n安装这些工具所需要的知识对于开发人员来说应该是必会的, 但是谁也不是没事总是去装这些工具, 时间长了可能就会忘记, 所以借此写篇博客来记录这些。\n\n<!--more-->\n\n# 下载\n\n* 首先去[mysql的官网](\"https://dev.mysql.com\"), 点击downloads\n\n![mysql的下载页面](/images/software-setup/mysql/mysql-setup1.jpg)\n\n* 接下来翻到最下面, 点击这个\n\n![mysql的下载页面](/images/software-setup/mysql/mysql-setup2.jpg)\n\n* 接着\n\n![mysql的下载页面](/images/software-setup/mysql/mysql-setup3.jpg)\n\n* 然后我们就来到了下载页面\n\n![mysql的下载页面](/images/software-setup/mysql/mysql-setup4.jpg)\n\n我们可以看到有解压版和安装版, 安装版就不用多说了, 你只需要按部就班的选择你需要的配置就可以了, 安装程序会替你把一切都做好, 今天我们的重点是解压版的mysql。\n\n# 配置\n\n1. 下载好之后选择一个位置解压\n2. 配置环境变量<br>这里我们新建一个环境变量<br>![mysql的环境变量](/images/software-setup/mysql/mysql-setup5.jpg)<br>之后像这样把它放到环境变量中去<br>![mysql的环境变量](/images/software-setup/mysql/mysql-setup6.jpg)\n3. 编写mysql配置文件`my.ini`<br>注意这里一定是斜杠, 不能是反斜杠\n\n```ini\n[mysqld] \n\nbasedir=C:/Program Files/MySQL/MySQL Server 5.6（mysql所在目录） \n\ndatadir=C:/Program Files/MySQL/MySQL Server 5.6/data （mysql所在目录\\data）\n```\n\n4. 安装mysql服务<br>![mysql服务](/images/software-setup/mysql/mysql-setup7.jpg)\n> 这里我遇到了两个问题:\n* 在安装mysql时提示: 找不到 msvcp140.dll\n\n这里并不是下载一个这个dll, 用cmd注册一下就可以, 接着会提示注册失败。真正的原因是电脑没有安装vc++ 2015版, 到[这里](https://www.microsoft.com/en-us/download/details.aspx?id=53587)下载一个安装之后就可以了。\n\n* 在启动服务时, 看到了data文件夹下的日志提示: Failed to find valid data directory。解决办法是先删掉data文件夹, 然后:\n\n```\ncd bin\nmysqld --initialize-insecure --console\nmysqld --install\n```\n\n就可以了。\n这里会显示mysql的初始化密码。\n使用:\n\n```\nalter USER 'root'@'localhost' IDENTIFIED BY '新密码';\n```\n就可以修改默认密码了。\n\n5. 初始化并启动服务<br>![初始化并启动服务](/images/software-setup/mysql/mysql-setup8.jpg)\n","source":"_posts/config_skill_experience/develop__tool_config/mysql/mysql-setup.md","raw":"---\ntitle: 安装解压版mysql\ndate: 2019-01-10 21:29:32\ncategories:\n- 配置技巧/经验\n- 开发工具配置\ntags:\n- 软件\n---\n\n# 前言\n\n安装这些工具所需要的知识对于开发人员来说应该是必会的, 但是谁也不是没事总是去装这些工具, 时间长了可能就会忘记, 所以借此写篇博客来记录这些。\n\n<!--more-->\n\n# 下载\n\n* 首先去[mysql的官网](\"https://dev.mysql.com\"), 点击downloads\n\n![mysql的下载页面](/images/software-setup/mysql/mysql-setup1.jpg)\n\n* 接下来翻到最下面, 点击这个\n\n![mysql的下载页面](/images/software-setup/mysql/mysql-setup2.jpg)\n\n* 接着\n\n![mysql的下载页面](/images/software-setup/mysql/mysql-setup3.jpg)\n\n* 然后我们就来到了下载页面\n\n![mysql的下载页面](/images/software-setup/mysql/mysql-setup4.jpg)\n\n我们可以看到有解压版和安装版, 安装版就不用多说了, 你只需要按部就班的选择你需要的配置就可以了, 安装程序会替你把一切都做好, 今天我们的重点是解压版的mysql。\n\n# 配置\n\n1. 下载好之后选择一个位置解压\n2. 配置环境变量<br>这里我们新建一个环境变量<br>![mysql的环境变量](/images/software-setup/mysql/mysql-setup5.jpg)<br>之后像这样把它放到环境变量中去<br>![mysql的环境变量](/images/software-setup/mysql/mysql-setup6.jpg)\n3. 编写mysql配置文件`my.ini`<br>注意这里一定是斜杠, 不能是反斜杠\n\n```ini\n[mysqld] \n\nbasedir=C:/Program Files/MySQL/MySQL Server 5.6（mysql所在目录） \n\ndatadir=C:/Program Files/MySQL/MySQL Server 5.6/data （mysql所在目录\\data）\n```\n\n4. 安装mysql服务<br>![mysql服务](/images/software-setup/mysql/mysql-setup7.jpg)\n> 这里我遇到了两个问题:\n* 在安装mysql时提示: 找不到 msvcp140.dll\n\n这里并不是下载一个这个dll, 用cmd注册一下就可以, 接着会提示注册失败。真正的原因是电脑没有安装vc++ 2015版, 到[这里](https://www.microsoft.com/en-us/download/details.aspx?id=53587)下载一个安装之后就可以了。\n\n* 在启动服务时, 看到了data文件夹下的日志提示: Failed to find valid data directory。解决办法是先删掉data文件夹, 然后:\n\n```\ncd bin\nmysqld --initialize-insecure --console\nmysqld --install\n```\n\n就可以了。\n这里会显示mysql的初始化密码。\n使用:\n\n```\nalter USER 'root'@'localhost' IDENTIFIED BY '新密码';\n```\n就可以修改默认密码了。\n\n5. 初始化并启动服务<br>![初始化并启动服务](/images/software-setup/mysql/mysql-setup8.jpg)\n","slug":"config_skill_experience/develop__tool_config/mysql/mysql-setup","published":1,"updated":"2022-10-07T12:58:46.373Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejp800433vsb66i926ji","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>安装这些工具所需要的知识对于开发人员来说应该是必会的, 但是谁也不是没事总是去装这些工具, 时间长了可能就会忘记, 所以借此写篇博客来记录这些。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h1><ul>\n<li>首先去<a href=\"%22https://dev.mysql.com%22\">mysql的官网</a>, 点击downloads</li>\n</ul>\n<p><img src=\"/images/software-setup/mysql/mysql-setup1.jpg\" alt=\"mysql的下载页面\"></p>\n<ul>\n<li>接下来翻到最下面, 点击这个</li>\n</ul>\n<p><img src=\"/images/software-setup/mysql/mysql-setup2.jpg\" alt=\"mysql的下载页面\"></p>\n<ul>\n<li>接着</li>\n</ul>\n<p><img src=\"/images/software-setup/mysql/mysql-setup3.jpg\" alt=\"mysql的下载页面\"></p>\n<ul>\n<li>然后我们就来到了下载页面</li>\n</ul>\n<p><img src=\"/images/software-setup/mysql/mysql-setup4.jpg\" alt=\"mysql的下载页面\"></p>\n<p>我们可以看到有解压版和安装版, 安装版就不用多说了, 你只需要按部就班的选择你需要的配置就可以了, 安装程序会替你把一切都做好, 今天我们的重点是解压版的mysql。</p>\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><ol>\n<li>下载好之后选择一个位置解压</li>\n<li>配置环境变量<br>这里我们新建一个环境变量<br><img src=\"/images/software-setup/mysql/mysql-setup5.jpg\" alt=\"mysql的环境变量\"><br>之后像这样把它放到环境变量中去<br><img src=\"/images/software-setup/mysql/mysql-setup6.jpg\" alt=\"mysql的环境变量\"></li>\n<li>编写mysql配置文件<code>my.ini</code><br>注意这里一定是斜杠, 不能是反斜杠</li>\n</ol>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[mysqld]</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">basedir</span>=C:/Program Files/MySQL/MySQL Server <span class=\"number\">5.6</span>（mysql所在目录） </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">datadir</span>=C:/Program Files/MySQL/MySQL Server <span class=\"number\">5.6</span>/data （mysql所在目录\\data）</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>安装mysql服务<br><img src=\"/images/software-setup/mysql/mysql-setup7.jpg\" alt=\"mysql服务\"><blockquote>\n<p>这里我遇到了两个问题:</p>\n</blockquote>\n</li>\n</ol>\n<ul>\n<li>在安装mysql时提示: 找不到 msvcp140.dll</li>\n</ul>\n<p>这里并不是下载一个这个dll, 用cmd注册一下就可以, 接着会提示注册失败。真正的原因是电脑没有安装vc++ 2015版, 到<a href=\"https://www.microsoft.com/en-us/download/details.aspx?id=53587\">这里</a>下载一个安装之后就可以了。</p>\n<ul>\n<li>在启动服务时, 看到了data文件夹下的日志提示: Failed to find valid data directory。解决办法是先删掉data文件夹, 然后:</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd bin</span><br><span class=\"line\">mysqld --initialize-insecure --console</span><br><span class=\"line\">mysqld --install</span><br></pre></td></tr></table></figure>\n\n<p>就可以了。<br>这里会显示mysql的初始化密码。<br>使用:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;新密码&#x27;;</span><br></pre></td></tr></table></figure>\n<p>就可以修改默认密码了。</p>\n<ol start=\"5\">\n<li>初始化并启动服务<br><img src=\"/images/software-setup/mysql/mysql-setup8.jpg\" alt=\"初始化并启动服务\"></li>\n</ol>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>安装这些工具所需要的知识对于开发人员来说应该是必会的, 但是谁也不是没事总是去装这些工具, 时间长了可能就会忘记, 所以借此写篇博客来记录这些。</p>","more":"<h1 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h1><ul>\n<li>首先去<a href=\"%22https://dev.mysql.com%22\">mysql的官网</a>, 点击downloads</li>\n</ul>\n<p><img src=\"/images/software-setup/mysql/mysql-setup1.jpg\" alt=\"mysql的下载页面\"></p>\n<ul>\n<li>接下来翻到最下面, 点击这个</li>\n</ul>\n<p><img src=\"/images/software-setup/mysql/mysql-setup2.jpg\" alt=\"mysql的下载页面\"></p>\n<ul>\n<li>接着</li>\n</ul>\n<p><img src=\"/images/software-setup/mysql/mysql-setup3.jpg\" alt=\"mysql的下载页面\"></p>\n<ul>\n<li>然后我们就来到了下载页面</li>\n</ul>\n<p><img src=\"/images/software-setup/mysql/mysql-setup4.jpg\" alt=\"mysql的下载页面\"></p>\n<p>我们可以看到有解压版和安装版, 安装版就不用多说了, 你只需要按部就班的选择你需要的配置就可以了, 安装程序会替你把一切都做好, 今天我们的重点是解压版的mysql。</p>\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><ol>\n<li>下载好之后选择一个位置解压</li>\n<li>配置环境变量<br>这里我们新建一个环境变量<br><img src=\"/images/software-setup/mysql/mysql-setup5.jpg\" alt=\"mysql的环境变量\"><br>之后像这样把它放到环境变量中去<br><img src=\"/images/software-setup/mysql/mysql-setup6.jpg\" alt=\"mysql的环境变量\"></li>\n<li>编写mysql配置文件<code>my.ini</code><br>注意这里一定是斜杠, 不能是反斜杠</li>\n</ol>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[mysqld]</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">basedir</span>=C:/Program Files/MySQL/MySQL Server <span class=\"number\">5.6</span>（mysql所在目录） </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">datadir</span>=C:/Program Files/MySQL/MySQL Server <span class=\"number\">5.6</span>/data （mysql所在目录\\data）</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>安装mysql服务<br><img src=\"/images/software-setup/mysql/mysql-setup7.jpg\" alt=\"mysql服务\"><blockquote>\n<p>这里我遇到了两个问题:</p>\n</blockquote>\n</li>\n</ol>\n<ul>\n<li>在安装mysql时提示: 找不到 msvcp140.dll</li>\n</ul>\n<p>这里并不是下载一个这个dll, 用cmd注册一下就可以, 接着会提示注册失败。真正的原因是电脑没有安装vc++ 2015版, 到<a href=\"https://www.microsoft.com/en-us/download/details.aspx?id=53587\">这里</a>下载一个安装之后就可以了。</p>\n<ul>\n<li>在启动服务时, 看到了data文件夹下的日志提示: Failed to find valid data directory。解决办法是先删掉data文件夹, 然后:</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd bin</span><br><span class=\"line\">mysqld --initialize-insecure --console</span><br><span class=\"line\">mysqld --install</span><br></pre></td></tr></table></figure>\n\n<p>就可以了。<br>这里会显示mysql的初始化密码。<br>使用:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;新密码&#x27;;</span><br></pre></td></tr></table></figure>\n<p>就可以修改默认密码了。</p>\n<ol start=\"5\">\n<li>初始化并启动服务<br><img src=\"/images/software-setup/mysql/mysql-setup8.jpg\" alt=\"初始化并启动服务\"></li>\n</ol>"},{"title":"vue, 打包, 跨域和 nginx","date":"2020-04-26T22:36:03.000Z","_content":"\n# 要解决的问题\n\n* 当一个 vue 项目本地运行时, 如何解决跨域的问题\n* 当一个 vue 项目打包, 并部署到 nginx 服务器之后, 如何解决跨域的问题\n\n# 问题说明\n\n## 当一个 vue 项目本地运行时, 如何解决跨域的问题\n\nvue 项目本地开发时, 这个时候使用的是 vue 静态服务器做代理, 这个功能是 http-proxy-middleware 这个模块提供的。\n在 vue 2.x 版本中, 我们使用 config/index.js 来配置跨域。\n在 vue 3.x 版本中, 使用 vue.config.js 来配置跨域。\n\n<!--more-->\n\n```js\n// vue 2.x\nmodule.exports = {\n    dev: {\n        assetsSubDirectory: 'static',\n        assetsPublicPath: '/',\n        // 代理列表, 是否开启代理通过[./dev.env.js]配置\n        proxyTable: devEnv.OPEN_PROXY === false ? {} : {\n            '/proxyApi': {\n                target: 'http://192.168.50.37:8085/',\n                changeOrigin: true,\n                pathRewrite: {\n                    '^/proxyApi': '/'\n                }\n            }\n        },\n        host: '192.168.50.39', // can be overwritten by process.env.HOST\n        port: 8001\n    }\n}\n\n// vue 3.x\ndevServer: {\n    proxy: {\n\t    '/proxyApi': {\n\t\t    target: 'http://192.168.50.37:8085',\n\t\t\tws: true,\n\t\t\t// 如果是 https, 则配置 true\n\t\t\tsecure: false,\n\t\t\t// 是否允许跨域\n\t\t\tchangeOrigin: true,\n\t\t\tpathRewrite: {\n\t\t\t    '^/proxyApi': '/'\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n## 当一个项目打包之后, 如何解决跨域的问题\n\n当使用 `npm run build`, 并使用 nginx 作为代理服务器之后, 上面配置的就不好使了, 那么如何解决跨域的问题呢?\n因为 vue 本身就支持对应不同的环境使用不同的配置文件, 比如生产环境, 开发环境等。那么可以在生产环境的配置文件中, 将全局的api接口请求地址加上类似于 `http://www.simple.com/apis` 这样的域名, 然后在 nginx 中这样配置:\n\n```\nserver {\n\tlisten 80;\n\t//...\n\n\tlocation / {\n\t\t// ...\n\t}\n\tlocation /apis/ {\n\t\tproxy_pass http://192.168.50.37:8085/;\n\t}\n}\n```\n\n这样设置一下, 就可以将 `http://www.simple.com/apis/login` 这样的路径替换成 `http://192.168.50.37:8085/login` 了, 如果没配置的情况之下, 由于域名不同, 所以会有跨域的问题, 而 nginx 在有跨域的问题时, 会先发送一个 options 请求来试探一下是否支持跨域, 这个时候如果服务器不支持 options 请求则会报错, 但是这样设置一下就可以直接替换, 不存在跨域的问题了。\n","source":"_posts/config_skill_experience/develop_envior_config/nginx/nginx-cross-pass.md","raw":"---\ntitle: vue, 打包, 跨域和 nginx\ndate: 2020-04-27 06:36:03\ncategories:\n- 配置技巧/经验\n- 开发环境配置（运维）\ntags:\n- 跨域\n- nginx\n---\n\n# 要解决的问题\n\n* 当一个 vue 项目本地运行时, 如何解决跨域的问题\n* 当一个 vue 项目打包, 并部署到 nginx 服务器之后, 如何解决跨域的问题\n\n# 问题说明\n\n## 当一个 vue 项目本地运行时, 如何解决跨域的问题\n\nvue 项目本地开发时, 这个时候使用的是 vue 静态服务器做代理, 这个功能是 http-proxy-middleware 这个模块提供的。\n在 vue 2.x 版本中, 我们使用 config/index.js 来配置跨域。\n在 vue 3.x 版本中, 使用 vue.config.js 来配置跨域。\n\n<!--more-->\n\n```js\n// vue 2.x\nmodule.exports = {\n    dev: {\n        assetsSubDirectory: 'static',\n        assetsPublicPath: '/',\n        // 代理列表, 是否开启代理通过[./dev.env.js]配置\n        proxyTable: devEnv.OPEN_PROXY === false ? {} : {\n            '/proxyApi': {\n                target: 'http://192.168.50.37:8085/',\n                changeOrigin: true,\n                pathRewrite: {\n                    '^/proxyApi': '/'\n                }\n            }\n        },\n        host: '192.168.50.39', // can be overwritten by process.env.HOST\n        port: 8001\n    }\n}\n\n// vue 3.x\ndevServer: {\n    proxy: {\n\t    '/proxyApi': {\n\t\t    target: 'http://192.168.50.37:8085',\n\t\t\tws: true,\n\t\t\t// 如果是 https, 则配置 true\n\t\t\tsecure: false,\n\t\t\t// 是否允许跨域\n\t\t\tchangeOrigin: true,\n\t\t\tpathRewrite: {\n\t\t\t    '^/proxyApi': '/'\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n## 当一个项目打包之后, 如何解决跨域的问题\n\n当使用 `npm run build`, 并使用 nginx 作为代理服务器之后, 上面配置的就不好使了, 那么如何解决跨域的问题呢?\n因为 vue 本身就支持对应不同的环境使用不同的配置文件, 比如生产环境, 开发环境等。那么可以在生产环境的配置文件中, 将全局的api接口请求地址加上类似于 `http://www.simple.com/apis` 这样的域名, 然后在 nginx 中这样配置:\n\n```\nserver {\n\tlisten 80;\n\t//...\n\n\tlocation / {\n\t\t// ...\n\t}\n\tlocation /apis/ {\n\t\tproxy_pass http://192.168.50.37:8085/;\n\t}\n}\n```\n\n这样设置一下, 就可以将 `http://www.simple.com/apis/login` 这样的路径替换成 `http://192.168.50.37:8085/login` 了, 如果没配置的情况之下, 由于域名不同, 所以会有跨域的问题, 而 nginx 在有跨域的问题时, 会先发送一个 options 请求来试探一下是否支持跨域, 这个时候如果服务器不支持 options 请求则会报错, 但是这样设置一下就可以直接替换, 不存在跨域的问题了。\n","slug":"config_skill_experience/develop_envior_config/nginx/nginx-cross-pass","published":1,"updated":"2022-10-07T12:33:33.617Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejpd00473vsb4pxu8hga","content":"<h1 id=\"要解决的问题\"><a href=\"#要解决的问题\" class=\"headerlink\" title=\"要解决的问题\"></a>要解决的问题</h1><ul>\n<li>当一个 vue 项目本地运行时, 如何解决跨域的问题</li>\n<li>当一个 vue 项目打包, 并部署到 nginx 服务器之后, 如何解决跨域的问题</li>\n</ul>\n<h1 id=\"问题说明\"><a href=\"#问题说明\" class=\"headerlink\" title=\"问题说明\"></a>问题说明</h1><h2 id=\"当一个-vue-项目本地运行时-如何解决跨域的问题\"><a href=\"#当一个-vue-项目本地运行时-如何解决跨域的问题\" class=\"headerlink\" title=\"当一个 vue 项目本地运行时, 如何解决跨域的问题\"></a>当一个 vue 项目本地运行时, 如何解决跨域的问题</h2><p>vue 项目本地开发时, 这个时候使用的是 vue 静态服务器做代理, 这个功能是 http-proxy-middleware 这个模块提供的。<br>在 vue 2.x 版本中, 我们使用 config&#x2F;index.js 来配置跨域。<br>在 vue 3.x 版本中, 使用 vue.config.js 来配置跨域。</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// vue 2.x</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"attr\">dev</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">assetsSubDirectory</span>: <span class=\"string\">&#x27;static&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">assetsPublicPath</span>: <span class=\"string\">&#x27;/&#x27;</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 代理列表, 是否开启代理通过[./dev.env.js]配置</span></span><br><span class=\"line\">        <span class=\"attr\">proxyTable</span>: devEnv.OPEN_PROXY === <span class=\"literal\">false</span> ? &#123;&#125; : &#123;</span><br><span class=\"line\">            <span class=\"string\">&#x27;/proxyApi&#x27;</span>: &#123;</span><br><span class=\"line\">                <span class=\"attr\">target</span>: <span class=\"string\">&#x27;http://192.168.50.37:8085/&#x27;</span>,</span><br><span class=\"line\">                <span class=\"attr\">changeOrigin</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                <span class=\"attr\">pathRewrite</span>: &#123;</span><br><span class=\"line\">                    <span class=\"string\">&#x27;^/proxyApi&#x27;</span>: <span class=\"string\">&#x27;/&#x27;</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">host</span>: <span class=\"string\">&#x27;192.168.50.39&#x27;</span>, <span class=\"comment\">// can be overwritten by process.env.HOST</span></span><br><span class=\"line\">        <span class=\"attr\">port</span>: <span class=\"number\">8001</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// vue 3.x</span></span><br><span class=\"line\"><span class=\"attr\">devServer</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">proxy</span>: &#123;</span><br><span class=\"line\">\t    <span class=\"string\">&#x27;/proxyApi&#x27;</span>: &#123;</span><br><span class=\"line\">\t\t    <span class=\"attr\">target</span>: <span class=\"string\">&#x27;http://192.168.50.37:8085&#x27;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">ws</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 如果是 https, 则配置 true</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">secure</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 是否允许跨域</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">changeOrigin</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">pathRewrite</span>: &#123;</span><br><span class=\"line\">\t\t\t    <span class=\"string\">&#x27;^/proxyApi&#x27;</span>: <span class=\"string\">&#x27;/&#x27;</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"当一个项目打包之后-如何解决跨域的问题\"><a href=\"#当一个项目打包之后-如何解决跨域的问题\" class=\"headerlink\" title=\"当一个项目打包之后, 如何解决跨域的问题\"></a>当一个项目打包之后, 如何解决跨域的问题</h2><p>当使用 <code>npm run build</code>, 并使用 nginx 作为代理服务器之后, 上面配置的就不好使了, 那么如何解决跨域的问题呢?<br>因为 vue 本身就支持对应不同的环境使用不同的配置文件, 比如生产环境, 开发环境等。那么可以在生产环境的配置文件中, 将全局的api接口请求地址加上类似于 <code>http://www.simple.com/apis</code> 这样的域名, 然后在 nginx 中这样配置:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">\tlisten 80;</span><br><span class=\"line\">\t//...</span><br><span class=\"line\"></span><br><span class=\"line\">\tlocation / &#123;</span><br><span class=\"line\">\t\t// ...</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tlocation /apis/ &#123;</span><br><span class=\"line\">\t\tproxy_pass http://192.168.50.37:8085/;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样设置一下, 就可以将 <code>http://www.simple.com/apis/login</code> 这样的路径替换成 <code>http://192.168.50.37:8085/login</code> 了, 如果没配置的情况之下, 由于域名不同, 所以会有跨域的问题, 而 nginx 在有跨域的问题时, 会先发送一个 options 请求来试探一下是否支持跨域, 这个时候如果服务器不支持 options 请求则会报错, 但是这样设置一下就可以直接替换, 不存在跨域的问题了。</p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"要解决的问题\"><a href=\"#要解决的问题\" class=\"headerlink\" title=\"要解决的问题\"></a>要解决的问题</h1><ul>\n<li>当一个 vue 项目本地运行时, 如何解决跨域的问题</li>\n<li>当一个 vue 项目打包, 并部署到 nginx 服务器之后, 如何解决跨域的问题</li>\n</ul>\n<h1 id=\"问题说明\"><a href=\"#问题说明\" class=\"headerlink\" title=\"问题说明\"></a>问题说明</h1><h2 id=\"当一个-vue-项目本地运行时-如何解决跨域的问题\"><a href=\"#当一个-vue-项目本地运行时-如何解决跨域的问题\" class=\"headerlink\" title=\"当一个 vue 项目本地运行时, 如何解决跨域的问题\"></a>当一个 vue 项目本地运行时, 如何解决跨域的问题</h2><p>vue 项目本地开发时, 这个时候使用的是 vue 静态服务器做代理, 这个功能是 http-proxy-middleware 这个模块提供的。<br>在 vue 2.x 版本中, 我们使用 config&#x2F;index.js 来配置跨域。<br>在 vue 3.x 版本中, 使用 vue.config.js 来配置跨域。</p>","more":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// vue 2.x</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"attr\">dev</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">assetsSubDirectory</span>: <span class=\"string\">&#x27;static&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">assetsPublicPath</span>: <span class=\"string\">&#x27;/&#x27;</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 代理列表, 是否开启代理通过[./dev.env.js]配置</span></span><br><span class=\"line\">        <span class=\"attr\">proxyTable</span>: devEnv.OPEN_PROXY === <span class=\"literal\">false</span> ? &#123;&#125; : &#123;</span><br><span class=\"line\">            <span class=\"string\">&#x27;/proxyApi&#x27;</span>: &#123;</span><br><span class=\"line\">                <span class=\"attr\">target</span>: <span class=\"string\">&#x27;http://192.168.50.37:8085/&#x27;</span>,</span><br><span class=\"line\">                <span class=\"attr\">changeOrigin</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                <span class=\"attr\">pathRewrite</span>: &#123;</span><br><span class=\"line\">                    <span class=\"string\">&#x27;^/proxyApi&#x27;</span>: <span class=\"string\">&#x27;/&#x27;</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">host</span>: <span class=\"string\">&#x27;192.168.50.39&#x27;</span>, <span class=\"comment\">// can be overwritten by process.env.HOST</span></span><br><span class=\"line\">        <span class=\"attr\">port</span>: <span class=\"number\">8001</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// vue 3.x</span></span><br><span class=\"line\"><span class=\"attr\">devServer</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">proxy</span>: &#123;</span><br><span class=\"line\">\t    <span class=\"string\">&#x27;/proxyApi&#x27;</span>: &#123;</span><br><span class=\"line\">\t\t    <span class=\"attr\">target</span>: <span class=\"string\">&#x27;http://192.168.50.37:8085&#x27;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">ws</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 如果是 https, 则配置 true</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">secure</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 是否允许跨域</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">changeOrigin</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">pathRewrite</span>: &#123;</span><br><span class=\"line\">\t\t\t    <span class=\"string\">&#x27;^/proxyApi&#x27;</span>: <span class=\"string\">&#x27;/&#x27;</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"当一个项目打包之后-如何解决跨域的问题\"><a href=\"#当一个项目打包之后-如何解决跨域的问题\" class=\"headerlink\" title=\"当一个项目打包之后, 如何解决跨域的问题\"></a>当一个项目打包之后, 如何解决跨域的问题</h2><p>当使用 <code>npm run build</code>, 并使用 nginx 作为代理服务器之后, 上面配置的就不好使了, 那么如何解决跨域的问题呢?<br>因为 vue 本身就支持对应不同的环境使用不同的配置文件, 比如生产环境, 开发环境等。那么可以在生产环境的配置文件中, 将全局的api接口请求地址加上类似于 <code>http://www.simple.com/apis</code> 这样的域名, 然后在 nginx 中这样配置:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">\tlisten 80;</span><br><span class=\"line\">\t//...</span><br><span class=\"line\"></span><br><span class=\"line\">\tlocation / &#123;</span><br><span class=\"line\">\t\t// ...</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tlocation /apis/ &#123;</span><br><span class=\"line\">\t\tproxy_pass http://192.168.50.37:8085/;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样设置一下, 就可以将 <code>http://www.simple.com/apis/login</code> 这样的路径替换成 <code>http://192.168.50.37:8085/login</code> 了, 如果没配置的情况之下, 由于域名不同, 所以会有跨域的问题, 而 nginx 在有跨域的问题时, 会先发送一个 options 请求来试探一下是否支持跨域, 这个时候如果服务器不支持 options 请求则会报错, 但是这样设置一下就可以直接替换, 不存在跨域的问题了。</p>"},{"title":"开启属于自己的服务器","date":"2019-09-22T09:02:53.000Z","categires":["配置技巧/经验","开发环境配置（运维）"],"_content":"\n# 目标\n\n将 22 端口开放到外网, 可以远程连接自己的虚拟机或者服务器。\n\n# 物料\n\n* 一台服务器(或者虚拟机, 或者树莓派等)\n* ngrok 账号\n\n# 准备\n\nngrok 的账号可以去[这里](https://www.ngrok.cc/login/register)注册。注册好之后, 找到隧道管理下的开通隧道, 选择最下面的香港 ngrok 免费服务器。\n\n如果开通服务器端口使用 ssh 连接的话, 那么请选择 tcp 协议; 如果想开通网站请选择 http 协议。\n\n> 注意, 如果选择 http 协议会有填写前置域名的选项。比如你想让你的域名看起来像这样: `blog.ngrok.cc`, 那么只需要填写 `blog` 就可以了。\n\n<!--more-->\n\n# 步骤\n\nOK, 准备好账号, 并开通隧道了之后就可以在自己的服务器上运行客户端以便映射到隧道中了。\n\n开通好之后, 可以在隧道管理里查看自己的隧道 id, 并点击客户端下载, 选择你的服务器的系统版本(我的是树莓派, 所以选择 linux arm 版本), 下载好之后放到你的服务器上。\n\n编写一个脚本:\n\n```shell\n$ vi ngrokStart.sh\n\n#! /bin/bash\nsudo setsid ./sunny clientid deb6e36c40f9df4d,6c74653260c38b4f,2a42f4a692de6299\n```\n\n这样就可以通过这个脚本启动 sunny 这个服务了, 然后再写一个自启动服务, 让服务器开机之后自动执行这个脚本:\n\n```shell\n$ sudo vi /usr/lib/systemd/system/sunny.service\n\n[Unit]\nDescription=enable sunny Service\nAfter=network.target\n# 声明可执行脚本\nConditionFileIsExecutable=/home/littleboy/tools/ngrok/startNgrok.sh\n\n[Service]\nType=simple\n# 如果执行失败则重新执行\nRestart=always\nRestartSec=5\n# 自动执行脚本\nExecStart=/home/littleboy/tools/ngrok/startNgrok.sh --background\n\n[Install]\nWantedBy=multi-user.target\n```\n\n然后执行:\n\n```shell\nsudo systemctl daemon-reaload\nsudo systemctl enable sunny.service\nsudo systemctl start sunny.service\nreboot\n```\n\n就可以实现开机自启了。\n","source":"_posts/config_skill_experience/develop_envior_config/ngrok/enable-own-server.md","raw":"---\ntitle: 开启属于自己的服务器\ndate: 2019-09-22 17:02:53\ncategires:\n- 配置技巧/经验\n- 开发环境配置（运维）\ntags:\n- ngrok\n---\n\n# 目标\n\n将 22 端口开放到外网, 可以远程连接自己的虚拟机或者服务器。\n\n# 物料\n\n* 一台服务器(或者虚拟机, 或者树莓派等)\n* ngrok 账号\n\n# 准备\n\nngrok 的账号可以去[这里](https://www.ngrok.cc/login/register)注册。注册好之后, 找到隧道管理下的开通隧道, 选择最下面的香港 ngrok 免费服务器。\n\n如果开通服务器端口使用 ssh 连接的话, 那么请选择 tcp 协议; 如果想开通网站请选择 http 协议。\n\n> 注意, 如果选择 http 协议会有填写前置域名的选项。比如你想让你的域名看起来像这样: `blog.ngrok.cc`, 那么只需要填写 `blog` 就可以了。\n\n<!--more-->\n\n# 步骤\n\nOK, 准备好账号, 并开通隧道了之后就可以在自己的服务器上运行客户端以便映射到隧道中了。\n\n开通好之后, 可以在隧道管理里查看自己的隧道 id, 并点击客户端下载, 选择你的服务器的系统版本(我的是树莓派, 所以选择 linux arm 版本), 下载好之后放到你的服务器上。\n\n编写一个脚本:\n\n```shell\n$ vi ngrokStart.sh\n\n#! /bin/bash\nsudo setsid ./sunny clientid deb6e36c40f9df4d,6c74653260c38b4f,2a42f4a692de6299\n```\n\n这样就可以通过这个脚本启动 sunny 这个服务了, 然后再写一个自启动服务, 让服务器开机之后自动执行这个脚本:\n\n```shell\n$ sudo vi /usr/lib/systemd/system/sunny.service\n\n[Unit]\nDescription=enable sunny Service\nAfter=network.target\n# 声明可执行脚本\nConditionFileIsExecutable=/home/littleboy/tools/ngrok/startNgrok.sh\n\n[Service]\nType=simple\n# 如果执行失败则重新执行\nRestart=always\nRestartSec=5\n# 自动执行脚本\nExecStart=/home/littleboy/tools/ngrok/startNgrok.sh --background\n\n[Install]\nWantedBy=multi-user.target\n```\n\n然后执行:\n\n```shell\nsudo systemctl daemon-reaload\nsudo systemctl enable sunny.service\nsudo systemctl start sunny.service\nreboot\n```\n\n就可以实现开机自启了。\n","slug":"config_skill_experience/develop_envior_config/ngrok/enable-own-server","published":1,"updated":"2022-10-07T12:34:28.297Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejph004b3vsb30x994p4","content":"<h1 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h1><p>将 22 端口开放到外网, 可以远程连接自己的虚拟机或者服务器。</p>\n<h1 id=\"物料\"><a href=\"#物料\" class=\"headerlink\" title=\"物料\"></a>物料</h1><ul>\n<li>一台服务器(或者虚拟机, 或者树莓派等)</li>\n<li>ngrok 账号</li>\n</ul>\n<h1 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h1><p>ngrok 的账号可以去<a href=\"https://www.ngrok.cc/login/register\">这里</a>注册。注册好之后, 找到隧道管理下的开通隧道, 选择最下面的香港 ngrok 免费服务器。</p>\n<p>如果开通服务器端口使用 ssh 连接的话, 那么请选择 tcp 协议; 如果想开通网站请选择 http 协议。</p>\n<blockquote>\n<p>注意, 如果选择 http 协议会有填写前置域名的选项。比如你想让你的域名看起来像这样: <code>blog.ngrok.cc</code>, 那么只需要填写 <code>blog</code> 就可以了。</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h1 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h1><p>OK, 准备好账号, 并开通隧道了之后就可以在自己的服务器上运行客户端以便映射到隧道中了。</p>\n<p>开通好之后, 可以在隧道管理里查看自己的隧道 id, 并点击客户端下载, 选择你的服务器的系统版本(我的是树莓派, 所以选择 linux arm 版本), 下载好之后放到你的服务器上。</p>\n<p>编写一个脚本:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> vi ngrokStart.sh</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">! /bin/bash</span></span><br><span class=\"line\">sudo setsid ./sunny clientid deb6e36c40f9df4d,6c74653260c38b4f,2a42f4a692de6299</span><br></pre></td></tr></table></figure>\n\n<p>这样就可以通过这个脚本启动 sunny 这个服务了, 然后再写一个自启动服务, 让服务器开机之后自动执行这个脚本:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo vi /usr/lib/systemd/system/sunny.service</span></span><br><span class=\"line\"></span><br><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=enable sunny Service</span><br><span class=\"line\">After=network.target</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 声明可执行脚本</span></span><br><span class=\"line\">ConditionFileIsExecutable=/home/littleboy/tools/ngrok/startNgrok.sh</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=simple</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 如果执行失败则重新执行</span></span><br><span class=\"line\">Restart=always</span><br><span class=\"line\">RestartSec=5</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 自动执行脚本</span></span><br><span class=\"line\">ExecStart=/home/littleboy/tools/ngrok/startNgrok.sh --background</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n\n<p>然后执行:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl daemon-reaload</span><br><span class=\"line\">sudo systemctl enable sunny.service</span><br><span class=\"line\">sudo systemctl start sunny.service</span><br><span class=\"line\">reboot</span><br></pre></td></tr></table></figure>\n\n<p>就可以实现开机自启了。</p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h1><p>将 22 端口开放到外网, 可以远程连接自己的虚拟机或者服务器。</p>\n<h1 id=\"物料\"><a href=\"#物料\" class=\"headerlink\" title=\"物料\"></a>物料</h1><ul>\n<li>一台服务器(或者虚拟机, 或者树莓派等)</li>\n<li>ngrok 账号</li>\n</ul>\n<h1 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h1><p>ngrok 的账号可以去<a href=\"https://www.ngrok.cc/login/register\">这里</a>注册。注册好之后, 找到隧道管理下的开通隧道, 选择最下面的香港 ngrok 免费服务器。</p>\n<p>如果开通服务器端口使用 ssh 连接的话, 那么请选择 tcp 协议; 如果想开通网站请选择 http 协议。</p>\n<blockquote>\n<p>注意, 如果选择 http 协议会有填写前置域名的选项。比如你想让你的域名看起来像这样: <code>blog.ngrok.cc</code>, 那么只需要填写 <code>blog</code> 就可以了。</p>\n</blockquote>","more":"<h1 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h1><p>OK, 准备好账号, 并开通隧道了之后就可以在自己的服务器上运行客户端以便映射到隧道中了。</p>\n<p>开通好之后, 可以在隧道管理里查看自己的隧道 id, 并点击客户端下载, 选择你的服务器的系统版本(我的是树莓派, 所以选择 linux arm 版本), 下载好之后放到你的服务器上。</p>\n<p>编写一个脚本:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> vi ngrokStart.sh</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">! /bin/bash</span></span><br><span class=\"line\">sudo setsid ./sunny clientid deb6e36c40f9df4d,6c74653260c38b4f,2a42f4a692de6299</span><br></pre></td></tr></table></figure>\n\n<p>这样就可以通过这个脚本启动 sunny 这个服务了, 然后再写一个自启动服务, 让服务器开机之后自动执行这个脚本:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo vi /usr/lib/systemd/system/sunny.service</span></span><br><span class=\"line\"></span><br><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=enable sunny Service</span><br><span class=\"line\">After=network.target</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 声明可执行脚本</span></span><br><span class=\"line\">ConditionFileIsExecutable=/home/littleboy/tools/ngrok/startNgrok.sh</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=simple</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 如果执行失败则重新执行</span></span><br><span class=\"line\">Restart=always</span><br><span class=\"line\">RestartSec=5</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 自动执行脚本</span></span><br><span class=\"line\">ExecStart=/home/littleboy/tools/ngrok/startNgrok.sh --background</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n\n<p>然后执行:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl daemon-reaload</span><br><span class=\"line\">sudo systemctl enable sunny.service</span><br><span class=\"line\">sudo systemctl start sunny.service</span><br><span class=\"line\">reboot</span><br></pre></td></tr></table></figure>\n\n<p>就可以实现开机自启了。</p>"},{"title":"搭建自己的ngrok服务器","date":"2019-04-13T11:48:36.000Z","_content":"\n转自[centos下自己假设ngrok服务器(内网测试神器)](https://segmentfault.com/a/1190000010338848)\n\n# 场景使用\n\n> 因为做开发很多程度需要不断同步git服务器或者其他操作来做一些外部对接的测试\n每次更新都要push到远端, 而且有时候代码还未必正式写完, 不仅影响git提交不美观, 而且麻烦\n所以ngrok的内网穿透就显神威了\n网上有ngrok的国内服务了, 不过有时候不稳定\n下面来和我一起架设自己的ngrok服务吧\n\n<!--more-->\n# 你需要的物料\n\n* 云服务器或vps\n\n> 如: 阿里云等云服务器最好, 不过阿里云记得用备案域名哦\n\n* 一个域名\n\n> 解析到云服务器或vps的ip\n因为以下测试启动了子域名自动部署, 需要域名做泛解析, CNAME填写\"*\"解析到云服务器的ip\n\n# 环境准备\n\ncentos的基础环境\n\n```shell\nyum -y install zlib-devel openssl-devel perl hg cpio expat-devel gettext-devel curl curl-devel perl-ExtUtils-MakeMaker hg wget gcc gcc-c++ git\n```\n\n# go语言环境\n\n```shell\n//请下载合适自己的go语言包  我是centos 6.8 64位 所以选择以下包\nwget https://storage.googleapis.com/golang/go1.8.3.linux-amd64.tar.gz\ntar -C /usr/local -xzf go1.8.3.linux-amd64.tar.gz\nvim /etc/profile\n//添加以下内容：\nexport PATH=$PATH:/usr/local/go/bin\nsource /etc/profile\n//检测是否安装成功go\ngo version\n```\n\n# 安装服务器\n\n下载\n\n```shell\nmkdir /ngrok\ncd /ngrok\ngit clone https://github.com/inconshreveable/ngrok.git\n```\n\n# 生成证书\n\n```shell\ncd /ngrok\nmkdir cert\ncd cert\nopenssl genrsa -out rootCA.key 2048\nopenssl req -x509 -new -nodes -key rootCA.key -subj \"/CN=myngork.com\" -days 5000 -out rootCA.pem\nopenssl genrsa -out device.key 2048\nopenssl req -new -key device.key -subj \"/CN=myngork.com\" -out device.csr\nopenssl x509 -req -in device.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out device.crt -days 5000\n```\n\n# 覆盖原本证书\n\n```shell\nyes|cp rootCA.pem /ngrok/ngrok/assets/client/tls/ngrokroot.crt\nyes|cp device.crt /ngrok/ngrok/assets/server/tls/snakeoil.crt\nyes|cp device.key /ngrok/ngrok/assets/server/tls/snakeoil.key\n```\n\n# 编译生成ngrok\n\n```shell\ngo env //查看环境\nGOOS=linux GOARCH=amd64 make release-server\n```\n\n# 运行测试\n\n```shell\n./bin/ngrokd -tlsKey=\"assets/server/tls/snakeoil.key\" -tlsCrt=\"assets/server/tls/snakeoil.crt\" -domain=\"myngrok.com\"  -httpAddr=\":8081\" -httpsAddr=\":8082\" -tunnelAddr=\":8083\"\n\n#参数说明：\n#-domain 访问ngrok是所设置的服务地址生成证书时那个\n#-httpAddr http协议端口 默认为80\n#-httpsAddr https协议端口 默认为443 （可配置https证书）\n#-tunnelAddr 通道端口 默认4443\n```\n\n# 后台运行\n\n```shell\ncd /ngrok/ngrok\nsetsid ./bin/ngrokd -tlsKey=\"assets/server/tls/snakeoil.key\" -tlsCrt=\"assets/server/tls/snakeoil.crt\" -domain=\"myngrok\"  -httpAddr=\":8081\" -httpsAddr=\":8082\" -tunnelAddr=\":8083\"\n```\n\n# 客户端编译和使用\n\n## 编译生成win64位客户端 (其他自行编译测试)\n\n```shell\nGOOS=windows GOARCH=amd64 make release-client\n#编译成功后会在ngrok/bin/下面生成一个windows_amd64目录下面有ngrok.exe\n\n#Linux 平台 32 位系统：GOOS=linux GOARCH=386\n#Linux 平台 64 位系统：GOOS=linux GOARCH=amd64\n#Windows 平台 32 位系统：GOOS=windows GOARCH=386\n#Windows 平台 64 位系统：GOOS=windows GOARCH=amd64\n#MAC 平台 32 位系统：GOOS=darwin GOARCH=386\n#MAC 平台 64 位系统：GOOS=darwin GOARCH=amd64\n#ARM 平台：GOOS=linux GOARCH=arm\n```\n\n## 简单配置ngrok.cfg\n\n\n```shell\nserver_addr: \"myngrok.com:8083\"\ntrust_host_root_certs: false\n```\n\n## 使用链接测试\n\n```shell\nngrok -config=ngrok.cfg -subdomain=test 80\n\n//出现以下内容表示成功链接：\nngrok\n\nTunnel Status                 online\nVersion                       1.7/1.7\nForwarding                    http://test.myngrok.com:8081 -> 127.0.0.1:80\nForwarding                    https://test.myngrok.com:8081 -> 127.0.0.1:80\nWeb Interface                 127.0.0.1:4040\n# Conn                        0\nAvg Conn Time                 0.00ms\n```\n\n## 复杂配置ngrok.cfg\n\n```shell\nerver_addr: \"myngrok.com:8083\"\ntrust_host_root_certs: false\n\ntunnels:\n    http:\n        subdomain: \"www\"\n        proto:\n            http: \"8081\"\n\n    https:\n        subdomain: \"www\"\n        proto:\n            https: \"8082\"\n\n    web:\n        proto:\n            http: \"8050\"\n\n    tcp:\n        proto:\n            tcp: \"8001\"\n        remote_port: 5555\n\n    ssh:\n        remote_port: 2222\n        proto:\n            tcp: \"22\"\n```\n\n## 启动服务\n\n```shell\nngrok -config=ngrok.cfg start web  #启动web服务\nngrok -config=ngrok.cfg start tcp  #启动tcp服务\n\nngrok -config=ngrok.cfg start web tcp  #同时启动两个服务\nngrok -config=ngrok.cfg start-all  #启动所有服务\n\n//出现以下内容表示成功链接：\nngrok\n\nTunnel Status                 online\nVersion                       1.7/1.7\nForwarding                    http://web.myngrok.com:8081 -> 127.0.0.1:8050\nForwarding                    tcp://myngrok.com:5555 -> 127.0.0.1:8001\nWeb Interface                 127.0.0.1:4040\n# Conn                        0\nAvg Conn Time                 0.00ms\n```\n\n## 附上一个bat, 可以部署不同自动启动子域名\n\n```bat\n@echo OFF\ncolor 0a\nTitle ngrok启动\nMode con cols=109 lines=30\n:START\nECHO.\nEcho                  ==========================================================================\nECHO.\nEcho                                         ngrok启动\nECHO.\nEcho                                         作者: https://segmentfault.com/u/object\nECHO.\nEcho                  ==========================================================================\nEcho.\necho.\necho.\n:TUNNEL\nEcho               输入需要启动的域名前缀，如“test” ，即分配给你的穿透域名为：“test.myngrok.com”\nECHO.\nECHO.\nECHO.\nset /p clientid=   请输入：\necho.\nngrok -config=ngrok.cfg -subdomain=%clientid% 80\nPAUSE\ngoto TUNNEL\n```\n\n# 附录\n\n> 在编译过程中有可能出现如下情况:\n\n问题1: \n\n```shell\nGOOS=\"\" GOARCH=\"\" go get github.com/jteeuwen/go-bindata/go-bindata\nbin/go-bindata -nomemcopy -pkg=assets -tags=release \\\n-debug=false \\\n-o=src/ngrok/client/assets/assets_release.go \\\nassets/client/...\nmake: bin/go-bindata: Command not found\nmake: * [client-assets] Error 127\n```\n\n解决办法: 前往go安装目录的bin目录下找到go-bindata，将他移动到ngrok/bin下 （没有bin，可新建一个)\n\n问题2:\n\n```shell\npackage code.google.com/p/log4go: Get https://code.google.com/p/log4go/source/checkout?repo=: dial tcp 216.58.197.110:443: i/o timeout\n```\n\n因为google被墙，如果服务器不在墙外或者没有FQ则无法访问到code.google.com.\n\n解决办法: 在 ngrok/src/ngrok/log 目录下找到 logger.go 文件，修改其中第4或5行的：\n\n```\nlog \"code.google.com/p/log4go”为\nlog \"github.com/keepeye/log4go\"\n```\n\n问题3:\n\n```shell\nGOOS=\"\" GOARCH=\"\" go get github.com/jteeuwen/go-bindata/go-bindata\n     # github.com/jteeuwen/go-bindata\n             src/github.com/jteeuwen/go-bindata/toc.go:47: function ends without a return statement\n                     make: *** [bin/go-bindata] Error 2\n```\n\n解决办法： https://github.com/inconshreveable/ngrok/issues/237 \n\n问题4:\n\n客户端启动之后, 总是reconnecting\n\n解决办法: 配置一级域名@的解析, 配置上就好了。\n","source":"_posts/config_skill_experience/develop_envior_config/ngrok/own-ngrok-server.md","raw":"---\ntitle: 搭建自己的ngrok服务器\ndate: 2019-04-13 19:48:36\ncategories:\n- 配置技巧/经验\n- 开发环境配置（运维）\ntags:\n- ngrok\n---\n\n转自[centos下自己假设ngrok服务器(内网测试神器)](https://segmentfault.com/a/1190000010338848)\n\n# 场景使用\n\n> 因为做开发很多程度需要不断同步git服务器或者其他操作来做一些外部对接的测试\n每次更新都要push到远端, 而且有时候代码还未必正式写完, 不仅影响git提交不美观, 而且麻烦\n所以ngrok的内网穿透就显神威了\n网上有ngrok的国内服务了, 不过有时候不稳定\n下面来和我一起架设自己的ngrok服务吧\n\n<!--more-->\n# 你需要的物料\n\n* 云服务器或vps\n\n> 如: 阿里云等云服务器最好, 不过阿里云记得用备案域名哦\n\n* 一个域名\n\n> 解析到云服务器或vps的ip\n因为以下测试启动了子域名自动部署, 需要域名做泛解析, CNAME填写\"*\"解析到云服务器的ip\n\n# 环境准备\n\ncentos的基础环境\n\n```shell\nyum -y install zlib-devel openssl-devel perl hg cpio expat-devel gettext-devel curl curl-devel perl-ExtUtils-MakeMaker hg wget gcc gcc-c++ git\n```\n\n# go语言环境\n\n```shell\n//请下载合适自己的go语言包  我是centos 6.8 64位 所以选择以下包\nwget https://storage.googleapis.com/golang/go1.8.3.linux-amd64.tar.gz\ntar -C /usr/local -xzf go1.8.3.linux-amd64.tar.gz\nvim /etc/profile\n//添加以下内容：\nexport PATH=$PATH:/usr/local/go/bin\nsource /etc/profile\n//检测是否安装成功go\ngo version\n```\n\n# 安装服务器\n\n下载\n\n```shell\nmkdir /ngrok\ncd /ngrok\ngit clone https://github.com/inconshreveable/ngrok.git\n```\n\n# 生成证书\n\n```shell\ncd /ngrok\nmkdir cert\ncd cert\nopenssl genrsa -out rootCA.key 2048\nopenssl req -x509 -new -nodes -key rootCA.key -subj \"/CN=myngork.com\" -days 5000 -out rootCA.pem\nopenssl genrsa -out device.key 2048\nopenssl req -new -key device.key -subj \"/CN=myngork.com\" -out device.csr\nopenssl x509 -req -in device.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out device.crt -days 5000\n```\n\n# 覆盖原本证书\n\n```shell\nyes|cp rootCA.pem /ngrok/ngrok/assets/client/tls/ngrokroot.crt\nyes|cp device.crt /ngrok/ngrok/assets/server/tls/snakeoil.crt\nyes|cp device.key /ngrok/ngrok/assets/server/tls/snakeoil.key\n```\n\n# 编译生成ngrok\n\n```shell\ngo env //查看环境\nGOOS=linux GOARCH=amd64 make release-server\n```\n\n# 运行测试\n\n```shell\n./bin/ngrokd -tlsKey=\"assets/server/tls/snakeoil.key\" -tlsCrt=\"assets/server/tls/snakeoil.crt\" -domain=\"myngrok.com\"  -httpAddr=\":8081\" -httpsAddr=\":8082\" -tunnelAddr=\":8083\"\n\n#参数说明：\n#-domain 访问ngrok是所设置的服务地址生成证书时那个\n#-httpAddr http协议端口 默认为80\n#-httpsAddr https协议端口 默认为443 （可配置https证书）\n#-tunnelAddr 通道端口 默认4443\n```\n\n# 后台运行\n\n```shell\ncd /ngrok/ngrok\nsetsid ./bin/ngrokd -tlsKey=\"assets/server/tls/snakeoil.key\" -tlsCrt=\"assets/server/tls/snakeoil.crt\" -domain=\"myngrok\"  -httpAddr=\":8081\" -httpsAddr=\":8082\" -tunnelAddr=\":8083\"\n```\n\n# 客户端编译和使用\n\n## 编译生成win64位客户端 (其他自行编译测试)\n\n```shell\nGOOS=windows GOARCH=amd64 make release-client\n#编译成功后会在ngrok/bin/下面生成一个windows_amd64目录下面有ngrok.exe\n\n#Linux 平台 32 位系统：GOOS=linux GOARCH=386\n#Linux 平台 64 位系统：GOOS=linux GOARCH=amd64\n#Windows 平台 32 位系统：GOOS=windows GOARCH=386\n#Windows 平台 64 位系统：GOOS=windows GOARCH=amd64\n#MAC 平台 32 位系统：GOOS=darwin GOARCH=386\n#MAC 平台 64 位系统：GOOS=darwin GOARCH=amd64\n#ARM 平台：GOOS=linux GOARCH=arm\n```\n\n## 简单配置ngrok.cfg\n\n\n```shell\nserver_addr: \"myngrok.com:8083\"\ntrust_host_root_certs: false\n```\n\n## 使用链接测试\n\n```shell\nngrok -config=ngrok.cfg -subdomain=test 80\n\n//出现以下内容表示成功链接：\nngrok\n\nTunnel Status                 online\nVersion                       1.7/1.7\nForwarding                    http://test.myngrok.com:8081 -> 127.0.0.1:80\nForwarding                    https://test.myngrok.com:8081 -> 127.0.0.1:80\nWeb Interface                 127.0.0.1:4040\n# Conn                        0\nAvg Conn Time                 0.00ms\n```\n\n## 复杂配置ngrok.cfg\n\n```shell\nerver_addr: \"myngrok.com:8083\"\ntrust_host_root_certs: false\n\ntunnels:\n    http:\n        subdomain: \"www\"\n        proto:\n            http: \"8081\"\n\n    https:\n        subdomain: \"www\"\n        proto:\n            https: \"8082\"\n\n    web:\n        proto:\n            http: \"8050\"\n\n    tcp:\n        proto:\n            tcp: \"8001\"\n        remote_port: 5555\n\n    ssh:\n        remote_port: 2222\n        proto:\n            tcp: \"22\"\n```\n\n## 启动服务\n\n```shell\nngrok -config=ngrok.cfg start web  #启动web服务\nngrok -config=ngrok.cfg start tcp  #启动tcp服务\n\nngrok -config=ngrok.cfg start web tcp  #同时启动两个服务\nngrok -config=ngrok.cfg start-all  #启动所有服务\n\n//出现以下内容表示成功链接：\nngrok\n\nTunnel Status                 online\nVersion                       1.7/1.7\nForwarding                    http://web.myngrok.com:8081 -> 127.0.0.1:8050\nForwarding                    tcp://myngrok.com:5555 -> 127.0.0.1:8001\nWeb Interface                 127.0.0.1:4040\n# Conn                        0\nAvg Conn Time                 0.00ms\n```\n\n## 附上一个bat, 可以部署不同自动启动子域名\n\n```bat\n@echo OFF\ncolor 0a\nTitle ngrok启动\nMode con cols=109 lines=30\n:START\nECHO.\nEcho                  ==========================================================================\nECHO.\nEcho                                         ngrok启动\nECHO.\nEcho                                         作者: https://segmentfault.com/u/object\nECHO.\nEcho                  ==========================================================================\nEcho.\necho.\necho.\n:TUNNEL\nEcho               输入需要启动的域名前缀，如“test” ，即分配给你的穿透域名为：“test.myngrok.com”\nECHO.\nECHO.\nECHO.\nset /p clientid=   请输入：\necho.\nngrok -config=ngrok.cfg -subdomain=%clientid% 80\nPAUSE\ngoto TUNNEL\n```\n\n# 附录\n\n> 在编译过程中有可能出现如下情况:\n\n问题1: \n\n```shell\nGOOS=\"\" GOARCH=\"\" go get github.com/jteeuwen/go-bindata/go-bindata\nbin/go-bindata -nomemcopy -pkg=assets -tags=release \\\n-debug=false \\\n-o=src/ngrok/client/assets/assets_release.go \\\nassets/client/...\nmake: bin/go-bindata: Command not found\nmake: * [client-assets] Error 127\n```\n\n解决办法: 前往go安装目录的bin目录下找到go-bindata，将他移动到ngrok/bin下 （没有bin，可新建一个)\n\n问题2:\n\n```shell\npackage code.google.com/p/log4go: Get https://code.google.com/p/log4go/source/checkout?repo=: dial tcp 216.58.197.110:443: i/o timeout\n```\n\n因为google被墙，如果服务器不在墙外或者没有FQ则无法访问到code.google.com.\n\n解决办法: 在 ngrok/src/ngrok/log 目录下找到 logger.go 文件，修改其中第4或5行的：\n\n```\nlog \"code.google.com/p/log4go”为\nlog \"github.com/keepeye/log4go\"\n```\n\n问题3:\n\n```shell\nGOOS=\"\" GOARCH=\"\" go get github.com/jteeuwen/go-bindata/go-bindata\n     # github.com/jteeuwen/go-bindata\n             src/github.com/jteeuwen/go-bindata/toc.go:47: function ends without a return statement\n                     make: *** [bin/go-bindata] Error 2\n```\n\n解决办法： https://github.com/inconshreveable/ngrok/issues/237 \n\n问题4:\n\n客户端启动之后, 总是reconnecting\n\n解决办法: 配置一级域名@的解析, 配置上就好了。\n","slug":"config_skill_experience/develop_envior_config/ngrok/own-ngrok-server","published":1,"updated":"2022-10-07T12:35:05.313Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejpn004f3vsb7v7d63q8","content":"<p>转自<a href=\"https://segmentfault.com/a/1190000010338848\">centos下自己假设ngrok服务器(内网测试神器)</a></p>\n<h1 id=\"场景使用\"><a href=\"#场景使用\" class=\"headerlink\" title=\"场景使用\"></a>场景使用</h1><blockquote>\n<p>因为做开发很多程度需要不断同步git服务器或者其他操作来做一些外部对接的测试<br>每次更新都要push到远端, 而且有时候代码还未必正式写完, 不仅影响git提交不美观, 而且麻烦<br>所以ngrok的内网穿透就显神威了<br>网上有ngrok的国内服务了, 不过有时候不稳定<br>下面来和我一起架设自己的ngrok服务吧</p>\n</blockquote>\n<span id=\"more\"></span>\n<h1 id=\"你需要的物料\"><a href=\"#你需要的物料\" class=\"headerlink\" title=\"你需要的物料\"></a>你需要的物料</h1><ul>\n<li>云服务器或vps</li>\n</ul>\n<blockquote>\n<p>如: 阿里云等云服务器最好, 不过阿里云记得用备案域名哦</p>\n</blockquote>\n<ul>\n<li>一个域名</li>\n</ul>\n<blockquote>\n<p>解析到云服务器或vps的ip<br>因为以下测试启动了子域名自动部署, 需要域名做泛解析, CNAME填写”*”解析到云服务器的ip</p>\n</blockquote>\n<h1 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h1><p>centos的基础环境</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install zlib-devel openssl-devel perl hg cpio expat-devel gettext-devel curl curl-devel perl-ExtUtils-MakeMaker hg wget gcc gcc-c++ git</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"go语言环境\"><a href=\"#go语言环境\" class=\"headerlink\" title=\"go语言环境\"></a>go语言环境</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//请下载合适自己的go语言包  我是centos 6.8 64位 所以选择以下包</span><br><span class=\"line\">wget https://storage.googleapis.com/golang/go1.8.3.linux-amd64.tar.gz</span><br><span class=\"line\">tar -C /usr/local -xzf go1.8.3.linux-amd64.tar.gz</span><br><span class=\"line\">vim /etc/profile</span><br><span class=\"line\">//添加以下内容：</span><br><span class=\"line\">export PATH=$PATH:/usr/local/go/bin</span><br><span class=\"line\">source /etc/profile</span><br><span class=\"line\">//检测是否安装成功go</span><br><span class=\"line\">go version</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"安装服务器\"><a href=\"#安装服务器\" class=\"headerlink\" title=\"安装服务器\"></a>安装服务器</h1><p>下载</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /ngrok</span><br><span class=\"line\">cd /ngrok</span><br><span class=\"line\">git clone https://github.com/inconshreveable/ngrok.git</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"生成证书\"><a href=\"#生成证书\" class=\"headerlink\" title=\"生成证书\"></a>生成证书</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /ngrok</span><br><span class=\"line\">mkdir cert</span><br><span class=\"line\">cd cert</span><br><span class=\"line\">openssl genrsa -out rootCA.key 2048</span><br><span class=\"line\">openssl req -x509 -new -nodes -key rootCA.key -subj &quot;/CN=myngork.com&quot; -days 5000 -out rootCA.pem</span><br><span class=\"line\">openssl genrsa -out device.key 2048</span><br><span class=\"line\">openssl req -new -key device.key -subj &quot;/CN=myngork.com&quot; -out device.csr</span><br><span class=\"line\">openssl x509 -req -in device.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out device.crt -days 5000</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"覆盖原本证书\"><a href=\"#覆盖原本证书\" class=\"headerlink\" title=\"覆盖原本证书\"></a>覆盖原本证书</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yes|cp rootCA.pem /ngrok/ngrok/assets/client/tls/ngrokroot.crt</span><br><span class=\"line\">yes|cp device.crt /ngrok/ngrok/assets/server/tls/snakeoil.crt</span><br><span class=\"line\">yes|cp device.key /ngrok/ngrok/assets/server/tls/snakeoil.key</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"编译生成ngrok\"><a href=\"#编译生成ngrok\" class=\"headerlink\" title=\"编译生成ngrok\"></a>编译生成ngrok</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go env //查看环境</span><br><span class=\"line\">GOOS=linux GOARCH=amd64 make release-server</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"运行测试\"><a href=\"#运行测试\" class=\"headerlink\" title=\"运行测试\"></a>运行测试</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./bin/ngrokd -tlsKey=&quot;assets/server/tls/snakeoil.key&quot; -tlsCrt=&quot;assets/server/tls/snakeoil.crt&quot; -domain=&quot;myngrok.com&quot;  -httpAddr=&quot;:8081&quot; -httpsAddr=&quot;:8082&quot; -tunnelAddr=&quot;:8083&quot;</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">参数说明：</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">-domain 访问ngrok是所设置的服务地址生成证书时那个</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">-httpAddr http协议端口 默认为80</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">-httpsAddr https协议端口 默认为443 （可配置https证书）</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">-tunnelAddr 通道端口 默认4443</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"后台运行\"><a href=\"#后台运行\" class=\"headerlink\" title=\"后台运行\"></a>后台运行</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /ngrok/ngrok</span><br><span class=\"line\">setsid ./bin/ngrokd -tlsKey=&quot;assets/server/tls/snakeoil.key&quot; -tlsCrt=&quot;assets/server/tls/snakeoil.crt&quot; -domain=&quot;myngrok&quot;  -httpAddr=&quot;:8081&quot; -httpsAddr=&quot;:8082&quot; -tunnelAddr=&quot;:8083&quot;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"客户端编译和使用\"><a href=\"#客户端编译和使用\" class=\"headerlink\" title=\"客户端编译和使用\"></a>客户端编译和使用</h1><h2 id=\"编译生成win64位客户端-其他自行编译测试\"><a href=\"#编译生成win64位客户端-其他自行编译测试\" class=\"headerlink\" title=\"编译生成win64位客户端 (其他自行编译测试)\"></a>编译生成win64位客户端 (其他自行编译测试)</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GOOS=windows GOARCH=amd64 make release-client</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">编译成功后会在ngrok/bin/下面生成一个windows_amd64目录下面有ngrok.exe</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">Linux 平台 32 位系统：GOOS=linux GOARCH=386</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">Linux 平台 64 位系统：GOOS=linux GOARCH=amd64</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">Windows 平台 32 位系统：GOOS=windows GOARCH=386</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">Windows 平台 64 位系统：GOOS=windows GOARCH=amd64</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">MAC 平台 32 位系统：GOOS=darwin GOARCH=386</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">MAC 平台 64 位系统：GOOS=darwin GOARCH=amd64</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">ARM 平台：GOOS=linux GOARCH=arm</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"简单配置ngrok-cfg\"><a href=\"#简单配置ngrok-cfg\" class=\"headerlink\" title=\"简单配置ngrok.cfg\"></a>简单配置ngrok.cfg</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server_addr: &quot;myngrok.com:8083&quot;</span><br><span class=\"line\">trust_host_root_certs: false</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用链接测试\"><a href=\"#使用链接测试\" class=\"headerlink\" title=\"使用链接测试\"></a>使用链接测试</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ngrok -config=ngrok.cfg -subdomain=test 80</span><br><span class=\"line\"></span><br><span class=\"line\">//出现以下内容表示成功链接：</span><br><span class=\"line\">ngrok</span><br><span class=\"line\"></span><br><span class=\"line\">Tunnel Status                 online</span><br><span class=\"line\">Version                       1.7/1.7</span><br><span class=\"line\">Forwarding                    http://test.myngrok.com:8081 -&gt; 127.0.0.1:80</span><br><span class=\"line\">Forwarding                    https://test.myngrok.com:8081 -&gt; 127.0.0.1:80</span><br><span class=\"line\">Web Interface                 127.0.0.1:4040</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Conn                        0</span></span><br><span class=\"line\">Avg Conn Time                 0.00ms</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"复杂配置ngrok-cfg\"><a href=\"#复杂配置ngrok-cfg\" class=\"headerlink\" title=\"复杂配置ngrok.cfg\"></a>复杂配置ngrok.cfg</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">erver_addr: &quot;myngrok.com:8083&quot;</span><br><span class=\"line\">trust_host_root_certs: false</span><br><span class=\"line\"></span><br><span class=\"line\">tunnels:</span><br><span class=\"line\">    http:</span><br><span class=\"line\">        subdomain: &quot;www&quot;</span><br><span class=\"line\">        proto:</span><br><span class=\"line\">            http: &quot;8081&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    https:</span><br><span class=\"line\">        subdomain: &quot;www&quot;</span><br><span class=\"line\">        proto:</span><br><span class=\"line\">            https: &quot;8082&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    web:</span><br><span class=\"line\">        proto:</span><br><span class=\"line\">            http: &quot;8050&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    tcp:</span><br><span class=\"line\">        proto:</span><br><span class=\"line\">            tcp: &quot;8001&quot;</span><br><span class=\"line\">        remote_port: 5555</span><br><span class=\"line\"></span><br><span class=\"line\">    ssh:</span><br><span class=\"line\">        remote_port: 2222</span><br><span class=\"line\">        proto:</span><br><span class=\"line\">            tcp: &quot;22&quot;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"启动服务\"><a href=\"#启动服务\" class=\"headerlink\" title=\"启动服务\"></a>启动服务</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ngrok -config=ngrok.cfg start web  #启动web服务</span><br><span class=\"line\">ngrok -config=ngrok.cfg start tcp  #启动tcp服务</span><br><span class=\"line\"></span><br><span class=\"line\">ngrok -config=ngrok.cfg start web tcp  #同时启动两个服务</span><br><span class=\"line\">ngrok -config=ngrok.cfg start-all  #启动所有服务</span><br><span class=\"line\"></span><br><span class=\"line\">//出现以下内容表示成功链接：</span><br><span class=\"line\">ngrok</span><br><span class=\"line\"></span><br><span class=\"line\">Tunnel Status                 online</span><br><span class=\"line\">Version                       1.7/1.7</span><br><span class=\"line\">Forwarding                    http://web.myngrok.com:8081 -&gt; 127.0.0.1:8050</span><br><span class=\"line\">Forwarding                    tcp://myngrok.com:5555 -&gt; 127.0.0.1:8001</span><br><span class=\"line\">Web Interface                 127.0.0.1:4040</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Conn                        0</span></span><br><span class=\"line\">Avg Conn Time                 0.00ms</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"附上一个bat-可以部署不同自动启动子域名\"><a href=\"#附上一个bat-可以部署不同自动启动子域名\" class=\"headerlink\" title=\"附上一个bat, 可以部署不同自动启动子域名\"></a>附上一个bat, 可以部署不同自动启动子域名</h2><figure class=\"highlight bat\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"built_in\">echo</span> OFF</span><br><span class=\"line\"><span class=\"built_in\">color</span> <span class=\"number\">0</span>a</span><br><span class=\"line\"><span class=\"built_in\">Title</span> ngrok启动</span><br><span class=\"line\"><span class=\"built_in\">Mode</span> <span class=\"built_in\">con</span> cols=<span class=\"number\">109</span> lines=<span class=\"number\">30</span></span><br><span class=\"line\">:<span class=\"built_in\">START</span></span><br><span class=\"line\"><span class=\"built_in\">ECHO</span>.</span><br><span class=\"line\"><span class=\"built_in\">Echo</span>                  ==========================================================================</span><br><span class=\"line\"><span class=\"built_in\">ECHO</span>.</span><br><span class=\"line\"><span class=\"built_in\">Echo</span>                                         ngrok启动</span><br><span class=\"line\"><span class=\"built_in\">ECHO</span>.</span><br><span class=\"line\"><span class=\"built_in\">Echo</span>                                         作者: https://segmentfault.com/u/object</span><br><span class=\"line\"><span class=\"built_in\">ECHO</span>.</span><br><span class=\"line\"><span class=\"built_in\">Echo</span>                  ==========================================================================</span><br><span class=\"line\"><span class=\"built_in\">Echo</span>.</span><br><span class=\"line\"><span class=\"built_in\">echo</span>.</span><br><span class=\"line\"><span class=\"built_in\">echo</span>.</span><br><span class=\"line\">:TUNNEL</span><br><span class=\"line\"><span class=\"built_in\">Echo</span>               输入需要启动的域名前缀，如“test” ，即分配给你的穿透域名为：“test.myngrok.com”</span><br><span class=\"line\"><span class=\"built_in\">ECHO</span>.</span><br><span class=\"line\"><span class=\"built_in\">ECHO</span>.</span><br><span class=\"line\"><span class=\"built_in\">ECHO</span>.</span><br><span class=\"line\"><span class=\"built_in\">set</span> /p clientid=   请输入：</span><br><span class=\"line\"><span class=\"built_in\">echo</span>.</span><br><span class=\"line\">ngrok -config=ngrok.cfg -subdomain=<span class=\"variable\">%clientid%</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"built_in\">PAUSE</span></span><br><span class=\"line\"><span class=\"keyword\">goto</span> TUNNEL</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h1><blockquote>\n<p>在编译过程中有可能出现如下情况:</p>\n</blockquote>\n<p>问题1: </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GOOS=&quot;&quot; GOARCH=&quot;&quot; go get github.com/jteeuwen/go-bindata/go-bindata</span><br><span class=\"line\">bin/go-bindata -nomemcopy -pkg=assets -tags=release \\</span><br><span class=\"line\">-debug=false \\</span><br><span class=\"line\">-o=src/ngrok/client/assets/assets_release.go \\</span><br><span class=\"line\">assets/client/...</span><br><span class=\"line\">make: bin/go-bindata: Command not found</span><br><span class=\"line\">make: * [client-assets] Error 127</span><br></pre></td></tr></table></figure>\n\n<p>解决办法: 前往go安装目录的bin目录下找到go-bindata，将他移动到ngrok&#x2F;bin下 （没有bin，可新建一个)</p>\n<p>问题2:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package code.google.com/p/log4go: Get https://code.google.com/p/log4go/source/checkout?repo=: dial tcp 216.58.197.110:443: i/o timeout</span><br></pre></td></tr></table></figure>\n\n<p>因为google被墙，如果服务器不在墙外或者没有FQ则无法访问到code.google.com.</p>\n<p>解决办法: 在 ngrok&#x2F;src&#x2F;ngrok&#x2F;log 目录下找到 logger.go 文件，修改其中第4或5行的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log &quot;code.google.com/p/log4go”为</span><br><span class=\"line\">log &quot;github.com/keepeye/log4go&quot;</span><br></pre></td></tr></table></figure>\n\n<p>问题3:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GOOS=&quot;&quot; GOARCH=&quot;&quot; go get github.com/jteeuwen/go-bindata/go-bindata</span><br><span class=\"line\">     # github.com/jteeuwen/go-bindata</span><br><span class=\"line\">             src/github.com/jteeuwen/go-bindata/toc.go:47: function ends without a return statement</span><br><span class=\"line\">                     make: *** [bin/go-bindata] Error 2</span><br></pre></td></tr></table></figure>\n\n<p>解决办法： <a href=\"https://github.com/inconshreveable/ngrok/issues/237\">https://github.com/inconshreveable/ngrok/issues/237</a> </p>\n<p>问题4:</p>\n<p>客户端启动之后, 总是reconnecting</p>\n<p>解决办法: 配置一级域名@的解析, 配置上就好了。</p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<p>转自<a href=\"https://segmentfault.com/a/1190000010338848\">centos下自己假设ngrok服务器(内网测试神器)</a></p>\n<h1 id=\"场景使用\"><a href=\"#场景使用\" class=\"headerlink\" title=\"场景使用\"></a>场景使用</h1><blockquote>\n<p>因为做开发很多程度需要不断同步git服务器或者其他操作来做一些外部对接的测试<br>每次更新都要push到远端, 而且有时候代码还未必正式写完, 不仅影响git提交不美观, 而且麻烦<br>所以ngrok的内网穿透就显神威了<br>网上有ngrok的国内服务了, 不过有时候不稳定<br>下面来和我一起架设自己的ngrok服务吧</p>\n</blockquote>","more":"<h1 id=\"你需要的物料\"><a href=\"#你需要的物料\" class=\"headerlink\" title=\"你需要的物料\"></a>你需要的物料</h1><ul>\n<li>云服务器或vps</li>\n</ul>\n<blockquote>\n<p>如: 阿里云等云服务器最好, 不过阿里云记得用备案域名哦</p>\n</blockquote>\n<ul>\n<li>一个域名</li>\n</ul>\n<blockquote>\n<p>解析到云服务器或vps的ip<br>因为以下测试启动了子域名自动部署, 需要域名做泛解析, CNAME填写”*”解析到云服务器的ip</p>\n</blockquote>\n<h1 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h1><p>centos的基础环境</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install zlib-devel openssl-devel perl hg cpio expat-devel gettext-devel curl curl-devel perl-ExtUtils-MakeMaker hg wget gcc gcc-c++ git</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"go语言环境\"><a href=\"#go语言环境\" class=\"headerlink\" title=\"go语言环境\"></a>go语言环境</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//请下载合适自己的go语言包  我是centos 6.8 64位 所以选择以下包</span><br><span class=\"line\">wget https://storage.googleapis.com/golang/go1.8.3.linux-amd64.tar.gz</span><br><span class=\"line\">tar -C /usr/local -xzf go1.8.3.linux-amd64.tar.gz</span><br><span class=\"line\">vim /etc/profile</span><br><span class=\"line\">//添加以下内容：</span><br><span class=\"line\">export PATH=$PATH:/usr/local/go/bin</span><br><span class=\"line\">source /etc/profile</span><br><span class=\"line\">//检测是否安装成功go</span><br><span class=\"line\">go version</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"安装服务器\"><a href=\"#安装服务器\" class=\"headerlink\" title=\"安装服务器\"></a>安装服务器</h1><p>下载</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /ngrok</span><br><span class=\"line\">cd /ngrok</span><br><span class=\"line\">git clone https://github.com/inconshreveable/ngrok.git</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"生成证书\"><a href=\"#生成证书\" class=\"headerlink\" title=\"生成证书\"></a>生成证书</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /ngrok</span><br><span class=\"line\">mkdir cert</span><br><span class=\"line\">cd cert</span><br><span class=\"line\">openssl genrsa -out rootCA.key 2048</span><br><span class=\"line\">openssl req -x509 -new -nodes -key rootCA.key -subj &quot;/CN=myngork.com&quot; -days 5000 -out rootCA.pem</span><br><span class=\"line\">openssl genrsa -out device.key 2048</span><br><span class=\"line\">openssl req -new -key device.key -subj &quot;/CN=myngork.com&quot; -out device.csr</span><br><span class=\"line\">openssl x509 -req -in device.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out device.crt -days 5000</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"覆盖原本证书\"><a href=\"#覆盖原本证书\" class=\"headerlink\" title=\"覆盖原本证书\"></a>覆盖原本证书</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yes|cp rootCA.pem /ngrok/ngrok/assets/client/tls/ngrokroot.crt</span><br><span class=\"line\">yes|cp device.crt /ngrok/ngrok/assets/server/tls/snakeoil.crt</span><br><span class=\"line\">yes|cp device.key /ngrok/ngrok/assets/server/tls/snakeoil.key</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"编译生成ngrok\"><a href=\"#编译生成ngrok\" class=\"headerlink\" title=\"编译生成ngrok\"></a>编译生成ngrok</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go env //查看环境</span><br><span class=\"line\">GOOS=linux GOARCH=amd64 make release-server</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"运行测试\"><a href=\"#运行测试\" class=\"headerlink\" title=\"运行测试\"></a>运行测试</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./bin/ngrokd -tlsKey=&quot;assets/server/tls/snakeoil.key&quot; -tlsCrt=&quot;assets/server/tls/snakeoil.crt&quot; -domain=&quot;myngrok.com&quot;  -httpAddr=&quot;:8081&quot; -httpsAddr=&quot;:8082&quot; -tunnelAddr=&quot;:8083&quot;</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">参数说明：</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">-domain 访问ngrok是所设置的服务地址生成证书时那个</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">-httpAddr http协议端口 默认为80</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">-httpsAddr https协议端口 默认为443 （可配置https证书）</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">-tunnelAddr 通道端口 默认4443</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"后台运行\"><a href=\"#后台运行\" class=\"headerlink\" title=\"后台运行\"></a>后台运行</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /ngrok/ngrok</span><br><span class=\"line\">setsid ./bin/ngrokd -tlsKey=&quot;assets/server/tls/snakeoil.key&quot; -tlsCrt=&quot;assets/server/tls/snakeoil.crt&quot; -domain=&quot;myngrok&quot;  -httpAddr=&quot;:8081&quot; -httpsAddr=&quot;:8082&quot; -tunnelAddr=&quot;:8083&quot;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"客户端编译和使用\"><a href=\"#客户端编译和使用\" class=\"headerlink\" title=\"客户端编译和使用\"></a>客户端编译和使用</h1><h2 id=\"编译生成win64位客户端-其他自行编译测试\"><a href=\"#编译生成win64位客户端-其他自行编译测试\" class=\"headerlink\" title=\"编译生成win64位客户端 (其他自行编译测试)\"></a>编译生成win64位客户端 (其他自行编译测试)</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GOOS=windows GOARCH=amd64 make release-client</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">编译成功后会在ngrok/bin/下面生成一个windows_amd64目录下面有ngrok.exe</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">Linux 平台 32 位系统：GOOS=linux GOARCH=386</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">Linux 平台 64 位系统：GOOS=linux GOARCH=amd64</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">Windows 平台 32 位系统：GOOS=windows GOARCH=386</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">Windows 平台 64 位系统：GOOS=windows GOARCH=amd64</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">MAC 平台 32 位系统：GOOS=darwin GOARCH=386</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">MAC 平台 64 位系统：GOOS=darwin GOARCH=amd64</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">ARM 平台：GOOS=linux GOARCH=arm</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"简单配置ngrok-cfg\"><a href=\"#简单配置ngrok-cfg\" class=\"headerlink\" title=\"简单配置ngrok.cfg\"></a>简单配置ngrok.cfg</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server_addr: &quot;myngrok.com:8083&quot;</span><br><span class=\"line\">trust_host_root_certs: false</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用链接测试\"><a href=\"#使用链接测试\" class=\"headerlink\" title=\"使用链接测试\"></a>使用链接测试</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ngrok -config=ngrok.cfg -subdomain=test 80</span><br><span class=\"line\"></span><br><span class=\"line\">//出现以下内容表示成功链接：</span><br><span class=\"line\">ngrok</span><br><span class=\"line\"></span><br><span class=\"line\">Tunnel Status                 online</span><br><span class=\"line\">Version                       1.7/1.7</span><br><span class=\"line\">Forwarding                    http://test.myngrok.com:8081 -&gt; 127.0.0.1:80</span><br><span class=\"line\">Forwarding                    https://test.myngrok.com:8081 -&gt; 127.0.0.1:80</span><br><span class=\"line\">Web Interface                 127.0.0.1:4040</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Conn                        0</span></span><br><span class=\"line\">Avg Conn Time                 0.00ms</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"复杂配置ngrok-cfg\"><a href=\"#复杂配置ngrok-cfg\" class=\"headerlink\" title=\"复杂配置ngrok.cfg\"></a>复杂配置ngrok.cfg</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">erver_addr: &quot;myngrok.com:8083&quot;</span><br><span class=\"line\">trust_host_root_certs: false</span><br><span class=\"line\"></span><br><span class=\"line\">tunnels:</span><br><span class=\"line\">    http:</span><br><span class=\"line\">        subdomain: &quot;www&quot;</span><br><span class=\"line\">        proto:</span><br><span class=\"line\">            http: &quot;8081&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    https:</span><br><span class=\"line\">        subdomain: &quot;www&quot;</span><br><span class=\"line\">        proto:</span><br><span class=\"line\">            https: &quot;8082&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    web:</span><br><span class=\"line\">        proto:</span><br><span class=\"line\">            http: &quot;8050&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    tcp:</span><br><span class=\"line\">        proto:</span><br><span class=\"line\">            tcp: &quot;8001&quot;</span><br><span class=\"line\">        remote_port: 5555</span><br><span class=\"line\"></span><br><span class=\"line\">    ssh:</span><br><span class=\"line\">        remote_port: 2222</span><br><span class=\"line\">        proto:</span><br><span class=\"line\">            tcp: &quot;22&quot;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"启动服务\"><a href=\"#启动服务\" class=\"headerlink\" title=\"启动服务\"></a>启动服务</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ngrok -config=ngrok.cfg start web  #启动web服务</span><br><span class=\"line\">ngrok -config=ngrok.cfg start tcp  #启动tcp服务</span><br><span class=\"line\"></span><br><span class=\"line\">ngrok -config=ngrok.cfg start web tcp  #同时启动两个服务</span><br><span class=\"line\">ngrok -config=ngrok.cfg start-all  #启动所有服务</span><br><span class=\"line\"></span><br><span class=\"line\">//出现以下内容表示成功链接：</span><br><span class=\"line\">ngrok</span><br><span class=\"line\"></span><br><span class=\"line\">Tunnel Status                 online</span><br><span class=\"line\">Version                       1.7/1.7</span><br><span class=\"line\">Forwarding                    http://web.myngrok.com:8081 -&gt; 127.0.0.1:8050</span><br><span class=\"line\">Forwarding                    tcp://myngrok.com:5555 -&gt; 127.0.0.1:8001</span><br><span class=\"line\">Web Interface                 127.0.0.1:4040</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Conn                        0</span></span><br><span class=\"line\">Avg Conn Time                 0.00ms</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"附上一个bat-可以部署不同自动启动子域名\"><a href=\"#附上一个bat-可以部署不同自动启动子域名\" class=\"headerlink\" title=\"附上一个bat, 可以部署不同自动启动子域名\"></a>附上一个bat, 可以部署不同自动启动子域名</h2><figure class=\"highlight bat\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"built_in\">echo</span> OFF</span><br><span class=\"line\"><span class=\"built_in\">color</span> <span class=\"number\">0</span>a</span><br><span class=\"line\"><span class=\"built_in\">Title</span> ngrok启动</span><br><span class=\"line\"><span class=\"built_in\">Mode</span> <span class=\"built_in\">con</span> cols=<span class=\"number\">109</span> lines=<span class=\"number\">30</span></span><br><span class=\"line\">:<span class=\"built_in\">START</span></span><br><span class=\"line\"><span class=\"built_in\">ECHO</span>.</span><br><span class=\"line\"><span class=\"built_in\">Echo</span>                  ==========================================================================</span><br><span class=\"line\"><span class=\"built_in\">ECHO</span>.</span><br><span class=\"line\"><span class=\"built_in\">Echo</span>                                         ngrok启动</span><br><span class=\"line\"><span class=\"built_in\">ECHO</span>.</span><br><span class=\"line\"><span class=\"built_in\">Echo</span>                                         作者: https://segmentfault.com/u/object</span><br><span class=\"line\"><span class=\"built_in\">ECHO</span>.</span><br><span class=\"line\"><span class=\"built_in\">Echo</span>                  ==========================================================================</span><br><span class=\"line\"><span class=\"built_in\">Echo</span>.</span><br><span class=\"line\"><span class=\"built_in\">echo</span>.</span><br><span class=\"line\"><span class=\"built_in\">echo</span>.</span><br><span class=\"line\">:TUNNEL</span><br><span class=\"line\"><span class=\"built_in\">Echo</span>               输入需要启动的域名前缀，如“test” ，即分配给你的穿透域名为：“test.myngrok.com”</span><br><span class=\"line\"><span class=\"built_in\">ECHO</span>.</span><br><span class=\"line\"><span class=\"built_in\">ECHO</span>.</span><br><span class=\"line\"><span class=\"built_in\">ECHO</span>.</span><br><span class=\"line\"><span class=\"built_in\">set</span> /p clientid=   请输入：</span><br><span class=\"line\"><span class=\"built_in\">echo</span>.</span><br><span class=\"line\">ngrok -config=ngrok.cfg -subdomain=<span class=\"variable\">%clientid%</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"built_in\">PAUSE</span></span><br><span class=\"line\"><span class=\"keyword\">goto</span> TUNNEL</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h1><blockquote>\n<p>在编译过程中有可能出现如下情况:</p>\n</blockquote>\n<p>问题1: </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GOOS=&quot;&quot; GOARCH=&quot;&quot; go get github.com/jteeuwen/go-bindata/go-bindata</span><br><span class=\"line\">bin/go-bindata -nomemcopy -pkg=assets -tags=release \\</span><br><span class=\"line\">-debug=false \\</span><br><span class=\"line\">-o=src/ngrok/client/assets/assets_release.go \\</span><br><span class=\"line\">assets/client/...</span><br><span class=\"line\">make: bin/go-bindata: Command not found</span><br><span class=\"line\">make: * [client-assets] Error 127</span><br></pre></td></tr></table></figure>\n\n<p>解决办法: 前往go安装目录的bin目录下找到go-bindata，将他移动到ngrok&#x2F;bin下 （没有bin，可新建一个)</p>\n<p>问题2:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package code.google.com/p/log4go: Get https://code.google.com/p/log4go/source/checkout?repo=: dial tcp 216.58.197.110:443: i/o timeout</span><br></pre></td></tr></table></figure>\n\n<p>因为google被墙，如果服务器不在墙外或者没有FQ则无法访问到code.google.com.</p>\n<p>解决办法: 在 ngrok&#x2F;src&#x2F;ngrok&#x2F;log 目录下找到 logger.go 文件，修改其中第4或5行的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log &quot;code.google.com/p/log4go”为</span><br><span class=\"line\">log &quot;github.com/keepeye/log4go&quot;</span><br></pre></td></tr></table></figure>\n\n<p>问题3:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GOOS=&quot;&quot; GOARCH=&quot;&quot; go get github.com/jteeuwen/go-bindata/go-bindata</span><br><span class=\"line\">     # github.com/jteeuwen/go-bindata</span><br><span class=\"line\">             src/github.com/jteeuwen/go-bindata/toc.go:47: function ends without a return statement</span><br><span class=\"line\">                     make: *** [bin/go-bindata] Error 2</span><br></pre></td></tr></table></figure>\n\n<p>解决办法： <a href=\"https://github.com/inconshreveable/ngrok/issues/237\">https://github.com/inconshreveable/ngrok/issues/237</a> </p>\n<p>问题4:</p>\n<p>客户端启动之后, 总是reconnecting</p>\n<p>解决办法: 配置一级域名@的解析, 配置上就好了。</p>"},{"title":"记一次 apache 2.4 启动的坑","date":"2019-09-23T01:23:52.000Z","_content":"\n# 前言\n\n事情是这样的, 接了一个小活, 用的是 thinkphp, 服务器用的 apache。再把他的网站源码 down 下来放到 apache 的 htdocs 上之后启动, 非常给面子的数据库连接出错, 说是找不到驱动(can not find driver)。\n\n# 思路\n\n看到这个问题我马上用 `phpinfo()` 测试了一下, 看到了 `pdo supports` 那里赫然是 `no value`。不过冰雪聪明的我一下子就想到了是 `php.ini` 的问题。所以还在本页面搜索了一下 `extension_dir`, 这个是 php 用来指定扩展的路径。一看还是默认值: `C:/php/ext`, 虽然很久没碰过我电脑里的 php了, 但是我还清楚的记得我配置的扩展路径绝对不是它! 然后我又看了一下 `Loaded Configuration File` 的值, 居然是空! 我有点懵, 然后跑去 apache24/conf/httpd.conf 那里看了一眼配置, 居然是一个不存在的路径! 然后我改回了之后, 信心慢慢的重启 apache 的服务, 居然失败了! 天! 我彻底懵了, 颤抖着手将路径随便改成了一个不存在的路径, 启动, 成功了...\n\n行吧, 看来问题在 php.ini身上, 幸好我还有以前没有修改过的配置备份。换成新的配置文件之后果然就可以启动了。那么我想, 问题肯定就出在我加载的那几个扩展上了, 索性一个一个的试, 果然有几个扩展加了之后就启动不了, 暂时还没找到解决办法, 还是先干活吧! \n","source":"_posts/config_skill_experience/develop_envior_config/php/apache2-4-php7-3-open-pit.md","raw":"---\ntitle: 记一次 apache 2.4 启动的坑\ndate: 2019-09-23 09:23:52\ncategories:\n- 配置技巧/经验\n- 开发环境配置（运维）\ntags:\n- php\n---\n\n# 前言\n\n事情是这样的, 接了一个小活, 用的是 thinkphp, 服务器用的 apache。再把他的网站源码 down 下来放到 apache 的 htdocs 上之后启动, 非常给面子的数据库连接出错, 说是找不到驱动(can not find driver)。\n\n# 思路\n\n看到这个问题我马上用 `phpinfo()` 测试了一下, 看到了 `pdo supports` 那里赫然是 `no value`。不过冰雪聪明的我一下子就想到了是 `php.ini` 的问题。所以还在本页面搜索了一下 `extension_dir`, 这个是 php 用来指定扩展的路径。一看还是默认值: `C:/php/ext`, 虽然很久没碰过我电脑里的 php了, 但是我还清楚的记得我配置的扩展路径绝对不是它! 然后我又看了一下 `Loaded Configuration File` 的值, 居然是空! 我有点懵, 然后跑去 apache24/conf/httpd.conf 那里看了一眼配置, 居然是一个不存在的路径! 然后我改回了之后, 信心慢慢的重启 apache 的服务, 居然失败了! 天! 我彻底懵了, 颤抖着手将路径随便改成了一个不存在的路径, 启动, 成功了...\n\n行吧, 看来问题在 php.ini身上, 幸好我还有以前没有修改过的配置备份。换成新的配置文件之后果然就可以启动了。那么我想, 问题肯定就出在我加载的那几个扩展上了, 索性一个一个的试, 果然有几个扩展加了之后就启动不了, 暂时还没找到解决办法, 还是先干活吧! \n","slug":"config_skill_experience/develop_envior_config/php/apache2-4-php7-3-open-pit","published":1,"updated":"2022-10-07T12:49:24.825Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejpr004i3vsb39kt32hi","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>事情是这样的, 接了一个小活, 用的是 thinkphp, 服务器用的 apache。再把他的网站源码 down 下来放到 apache 的 htdocs 上之后启动, 非常给面子的数据库连接出错, 说是找不到驱动(can not find driver)。</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>看到这个问题我马上用 <code>phpinfo()</code> 测试了一下, 看到了 <code>pdo supports</code> 那里赫然是 <code>no value</code>。不过冰雪聪明的我一下子就想到了是 <code>php.ini</code> 的问题。所以还在本页面搜索了一下 <code>extension_dir</code>, 这个是 php 用来指定扩展的路径。一看还是默认值: <code>C:/php/ext</code>, 虽然很久没碰过我电脑里的 php了, 但是我还清楚的记得我配置的扩展路径绝对不是它! 然后我又看了一下 <code>Loaded Configuration File</code> 的值, 居然是空! 我有点懵, 然后跑去 apache24&#x2F;conf&#x2F;httpd.conf 那里看了一眼配置, 居然是一个不存在的路径! 然后我改回了之后, 信心慢慢的重启 apache 的服务, 居然失败了! 天! 我彻底懵了, 颤抖着手将路径随便改成了一个不存在的路径, 启动, 成功了…</p>\n<p>行吧, 看来问题在 php.ini身上, 幸好我还有以前没有修改过的配置备份。换成新的配置文件之后果然就可以启动了。那么我想, 问题肯定就出在我加载的那几个扩展上了, 索性一个一个的试, 果然有几个扩展加了之后就启动不了, 暂时还没找到解决办法, 还是先干活吧! </p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>事情是这样的, 接了一个小活, 用的是 thinkphp, 服务器用的 apache。再把他的网站源码 down 下来放到 apache 的 htdocs 上之后启动, 非常给面子的数据库连接出错, 说是找不到驱动(can not find driver)。</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>看到这个问题我马上用 <code>phpinfo()</code> 测试了一下, 看到了 <code>pdo supports</code> 那里赫然是 <code>no value</code>。不过冰雪聪明的我一下子就想到了是 <code>php.ini</code> 的问题。所以还在本页面搜索了一下 <code>extension_dir</code>, 这个是 php 用来指定扩展的路径。一看还是默认值: <code>C:/php/ext</code>, 虽然很久没碰过我电脑里的 php了, 但是我还清楚的记得我配置的扩展路径绝对不是它! 然后我又看了一下 <code>Loaded Configuration File</code> 的值, 居然是空! 我有点懵, 然后跑去 apache24&#x2F;conf&#x2F;httpd.conf 那里看了一眼配置, 居然是一个不存在的路径! 然后我改回了之后, 信心慢慢的重启 apache 的服务, 居然失败了! 天! 我彻底懵了, 颤抖着手将路径随便改成了一个不存在的路径, 启动, 成功了…</p>\n<p>行吧, 看来问题在 php.ini身上, 幸好我还有以前没有修改过的配置备份。换成新的配置文件之后果然就可以启动了。那么我想, 问题肯定就出在我加载的那几个扩展上了, 索性一个一个的试, 果然有几个扩展加了之后就启动不了, 暂时还没找到解决办法, 还是先干活吧! </p>\n"},{"title":"php, thinkPHP使用apache服务器的配置方案","date":"2018-12-30T15:52:04.000Z","_content":"\n# 准备\n\n## 下载php\n\n### windows version\n\n[windows下的php下载地址](https://windows.php.net/download)\n\n下载好之后应该是一个压缩包的形式, 直接解压就好。\n\n<!--more-->\n\n### Linux version\n[linux下的php下载地址](https://www.php.net/releases/)\n同样, 使用tar解压就好\n\n## 下载apache服务器\n\n### windows version\n\n[windows下的apache下载地址](https://www.apachehaus.com/cgi-bin/download.plx)\n\n下载好之后应该是一个压缩包的形式, 直接解压就好。\n\n### Linux version\n\ncentos下可以直接使用`yum`命令来安装。\n\n```cmd\nyum install httpd -y\n```\n也可以下源码[地址](http://archive.apache.org/dist/httpd/)进行安装。\n\n[安装步骤](https://blog.csdn.net/nsh_chinaboy/article/details/79918065)\n\n安装完之后可以在`/etc/httpd`目录下找到。\n\n#### Linux 源码安装php\n\n将源码下载解压好之后, 就可以\n\n```\n./configure --prefix=/usr/local/php --with-curl=/usr/local/curl --with-freetype-dir --with-gd --with-gettext --with-iconv-dir --with-kerberos --with-libdir=lib64 --with-libxml-dir=/usr/include/libxml2/libxml --with-openssl --with-pcre-regex --with-pdo-mysql --with-pdo-sqlite --with-pear --with-png-dir --with-xmlrpc --with-xsl --with-zlib --enable-fpm --enable-bcmath --enable-libxml --enable-inline-optimization --enable-mbregex --enable-mbstring --enable-opcache --enable-pcntl --enable-shmop --enable-soap --enable-sockets --enable-sysvsem --enable-xml --enable-zip --with-apxs2=/data/soft/httpd/bin/apxs\n```\n\n注意, 这里`--prefix`说明了安装位置, 剩下的都是开启php的一些功能, 这里注意, 有一些功能需要安装其他的软件, 如果没有安装会报错, 大部分都是某某-devel没有安装, 可以直接使用`yum list`来查找安装。\n\nconfigure之后就可以直接make了, 这里我遇到的报错有:\n\n* 错误一:\n```\nnode.c: In function ‘dom_canonicalization’:\n```\n\n是libxml导致的问题，可以下载补丁patch一下。\n\n```\ncurl -o php-5.x.x.patch https://mail.gnome.org/archives/xml/2012-August/txtbgxGXAvz4N.txt\npatch -p0 -b < ./php-5.x.x.patch\n```\n或者：\n配置时去掉--with-libxml-dir 这个选项。但没有但没有DOM和XML。\n如果需要DOM和XML。则配置--with-libxml-dir=libxml2安装目录/include/libxml2/libxml\n\n[原博客地址](https://www.cnblogs.com/yangxunwu1992/p/5803392.html)\n\n* 错误二:\n```\next/mysqli/mysqli.c:1495: undefined reference to `client_errors'\n```\n\n去掉 `--with-mysqli` 这个选项，然后在安装完 PHP 之后再新增这个扩展。\n安装 mysqli 扩展，PHP 5.3 的源码就已经包含了这个扩展的源码，进入 php-5.3.29/ext/mysqli ，用 phpize 安装，又或者直接用 pecl 安装。\n\n使用 `/php/bin/phpize`运行php安装目录下的phpize文件，这时候会在extension目录下生成相应的configure文件。\n`.configure --with-php-config=/php/bin/php-config` 运行配置，如果你的服务器上只是装了一个版本的php则不需要添加`--with-php-config` 。后面的参数只是为了告诉phpize要建立基于哪个版本的扩展。\n\n`make && make install`编译安装模块。\n\n编译好模块之后，需要让php启用它。在php.ini文件中加入把extension.so开启即可。重启php服务。\n\n* 错误三:\n\n重新编译PHP后重启Apache出现undefined symbol: sapi_globals, PHP编译了中间文件，如果再用./configure --with-apxs2来编译php会导致apache重启的时候出现undefined symbol: sapi_globals的错误。解决办法是在configure之前运行一下make clean即可。\n\n# 配置\n\n## 配置php\n\n下载好之后, 打开php的根目录, 找到`php.ini-development`这个文件, 将这个文件复制一份, 并重命名为`php.ini`, 编辑这个文件, 找到`extension`部分, 将需要的扩展前面的`;`去掉, 附上我的配置:\n\n```ini\nextension=curl\nextension=gd2\nextension=imap\nextension=mbstring\nextension=mysql\nextension=mysqli\nextension=openssl\nextension=pdo_firebird\nextension=pdo_mysql\n```\n\n注意, 这里使用的是php新版本的配置方式, 老版本的配置需要在扩展名前加上`php_`, 而且还需要文件后缀名`.dll`\n\n例如:\n\n```ini\nextension=php_curl.dll\n```\n接着是很重要的一部分, 配置扩展的路径。\n先全局搜索一下`extension_dir`这个字段, 如果没有则加上, 值设为你的扩展文件夹的绝对路径:\n```ini\nextension_dir = \"c:\\php\\ext\"\n```\n\n> 注意, 如果遇到了 `call to undifined function: ***` 之类的报错, 则找到这个方法需要的扩展, 并将该扩展前的分号移除。\n\n<br>\n\n## 配置apache\n找到apache根目录下的conf/httpd.conf文件并编辑, 在结尾处加上:\n```conf\nloadModule php5_module C:/php/php5apache2_4.dll\nPHPIniDir \"C:/php/\"\nAddType application/x-httpd-php .php\n\n# 下面的配置主要为了防止 curl_init 函数不能被加载\nLoadFile C:\\php\\php5ts.dll\nLoadFile C:\\php\\libeay32.dll\nLoadFile C:\\php\\ssleay32.dll\nLoadFile C:\\php\\libssh2.dll\n# 这里需要将这几个文件拷贝到 C:/windows/system32 (64位放在 C:/windows/SysWQOW64 目录下)和apache 根目录的bin下\n```\n还有一个可选设置是apache的网页文件目录:\n```conf\nDocumentRoot \"${SRVROOT}/htdocs\"\n```\n和这一行:\n```conf\n# 这里填写你自己的根目录的绝对路径\nDefine SRVROOT \"C:/server/apache/Apache24\"\n```\n接着来安装服务:\n```shell\nhttpd -k install\n```\n最后来测试运行:\n```shell\nhttpd -k start\n```\n> 注意, 如果在这期间出现了类似于\"通常每个套接字地址(协议/网络地址/端口)只允许使用一次\"类似的问题, 那么查看他需要使用的端口号, 然后输入`netstat -a -o`来查看端口占用情况, 找到其pid, 并在任务管理器中找到该进程并结束掉就好。\n\n> 注意, 路径中不能出现中文和空格\n\n这样, 我们的php环境和apache服务器就配置好了。\n","source":"_posts/config_skill_experience/develop_envior_config/php/php-apache-config.md","raw":"---\ntitle: php, thinkPHP使用apache服务器的配置方案\ndate: 2018-12-30 23:52:04\ncategories:\n- 配置技巧/经验\n- 开发环境配置（运维）\n- php\ntags:\n- php\n- apache\n- thinkPHP\n---\n\n# 准备\n\n## 下载php\n\n### windows version\n\n[windows下的php下载地址](https://windows.php.net/download)\n\n下载好之后应该是一个压缩包的形式, 直接解压就好。\n\n<!--more-->\n\n### Linux version\n[linux下的php下载地址](https://www.php.net/releases/)\n同样, 使用tar解压就好\n\n## 下载apache服务器\n\n### windows version\n\n[windows下的apache下载地址](https://www.apachehaus.com/cgi-bin/download.plx)\n\n下载好之后应该是一个压缩包的形式, 直接解压就好。\n\n### Linux version\n\ncentos下可以直接使用`yum`命令来安装。\n\n```cmd\nyum install httpd -y\n```\n也可以下源码[地址](http://archive.apache.org/dist/httpd/)进行安装。\n\n[安装步骤](https://blog.csdn.net/nsh_chinaboy/article/details/79918065)\n\n安装完之后可以在`/etc/httpd`目录下找到。\n\n#### Linux 源码安装php\n\n将源码下载解压好之后, 就可以\n\n```\n./configure --prefix=/usr/local/php --with-curl=/usr/local/curl --with-freetype-dir --with-gd --with-gettext --with-iconv-dir --with-kerberos --with-libdir=lib64 --with-libxml-dir=/usr/include/libxml2/libxml --with-openssl --with-pcre-regex --with-pdo-mysql --with-pdo-sqlite --with-pear --with-png-dir --with-xmlrpc --with-xsl --with-zlib --enable-fpm --enable-bcmath --enable-libxml --enable-inline-optimization --enable-mbregex --enable-mbstring --enable-opcache --enable-pcntl --enable-shmop --enable-soap --enable-sockets --enable-sysvsem --enable-xml --enable-zip --with-apxs2=/data/soft/httpd/bin/apxs\n```\n\n注意, 这里`--prefix`说明了安装位置, 剩下的都是开启php的一些功能, 这里注意, 有一些功能需要安装其他的软件, 如果没有安装会报错, 大部分都是某某-devel没有安装, 可以直接使用`yum list`来查找安装。\n\nconfigure之后就可以直接make了, 这里我遇到的报错有:\n\n* 错误一:\n```\nnode.c: In function ‘dom_canonicalization’:\n```\n\n是libxml导致的问题，可以下载补丁patch一下。\n\n```\ncurl -o php-5.x.x.patch https://mail.gnome.org/archives/xml/2012-August/txtbgxGXAvz4N.txt\npatch -p0 -b < ./php-5.x.x.patch\n```\n或者：\n配置时去掉--with-libxml-dir 这个选项。但没有但没有DOM和XML。\n如果需要DOM和XML。则配置--with-libxml-dir=libxml2安装目录/include/libxml2/libxml\n\n[原博客地址](https://www.cnblogs.com/yangxunwu1992/p/5803392.html)\n\n* 错误二:\n```\next/mysqli/mysqli.c:1495: undefined reference to `client_errors'\n```\n\n去掉 `--with-mysqli` 这个选项，然后在安装完 PHP 之后再新增这个扩展。\n安装 mysqli 扩展，PHP 5.3 的源码就已经包含了这个扩展的源码，进入 php-5.3.29/ext/mysqli ，用 phpize 安装，又或者直接用 pecl 安装。\n\n使用 `/php/bin/phpize`运行php安装目录下的phpize文件，这时候会在extension目录下生成相应的configure文件。\n`.configure --with-php-config=/php/bin/php-config` 运行配置，如果你的服务器上只是装了一个版本的php则不需要添加`--with-php-config` 。后面的参数只是为了告诉phpize要建立基于哪个版本的扩展。\n\n`make && make install`编译安装模块。\n\n编译好模块之后，需要让php启用它。在php.ini文件中加入把extension.so开启即可。重启php服务。\n\n* 错误三:\n\n重新编译PHP后重启Apache出现undefined symbol: sapi_globals, PHP编译了中间文件，如果再用./configure --with-apxs2来编译php会导致apache重启的时候出现undefined symbol: sapi_globals的错误。解决办法是在configure之前运行一下make clean即可。\n\n# 配置\n\n## 配置php\n\n下载好之后, 打开php的根目录, 找到`php.ini-development`这个文件, 将这个文件复制一份, 并重命名为`php.ini`, 编辑这个文件, 找到`extension`部分, 将需要的扩展前面的`;`去掉, 附上我的配置:\n\n```ini\nextension=curl\nextension=gd2\nextension=imap\nextension=mbstring\nextension=mysql\nextension=mysqli\nextension=openssl\nextension=pdo_firebird\nextension=pdo_mysql\n```\n\n注意, 这里使用的是php新版本的配置方式, 老版本的配置需要在扩展名前加上`php_`, 而且还需要文件后缀名`.dll`\n\n例如:\n\n```ini\nextension=php_curl.dll\n```\n接着是很重要的一部分, 配置扩展的路径。\n先全局搜索一下`extension_dir`这个字段, 如果没有则加上, 值设为你的扩展文件夹的绝对路径:\n```ini\nextension_dir = \"c:\\php\\ext\"\n```\n\n> 注意, 如果遇到了 `call to undifined function: ***` 之类的报错, 则找到这个方法需要的扩展, 并将该扩展前的分号移除。\n\n<br>\n\n## 配置apache\n找到apache根目录下的conf/httpd.conf文件并编辑, 在结尾处加上:\n```conf\nloadModule php5_module C:/php/php5apache2_4.dll\nPHPIniDir \"C:/php/\"\nAddType application/x-httpd-php .php\n\n# 下面的配置主要为了防止 curl_init 函数不能被加载\nLoadFile C:\\php\\php5ts.dll\nLoadFile C:\\php\\libeay32.dll\nLoadFile C:\\php\\ssleay32.dll\nLoadFile C:\\php\\libssh2.dll\n# 这里需要将这几个文件拷贝到 C:/windows/system32 (64位放在 C:/windows/SysWQOW64 目录下)和apache 根目录的bin下\n```\n还有一个可选设置是apache的网页文件目录:\n```conf\nDocumentRoot \"${SRVROOT}/htdocs\"\n```\n和这一行:\n```conf\n# 这里填写你自己的根目录的绝对路径\nDefine SRVROOT \"C:/server/apache/Apache24\"\n```\n接着来安装服务:\n```shell\nhttpd -k install\n```\n最后来测试运行:\n```shell\nhttpd -k start\n```\n> 注意, 如果在这期间出现了类似于\"通常每个套接字地址(协议/网络地址/端口)只允许使用一次\"类似的问题, 那么查看他需要使用的端口号, 然后输入`netstat -a -o`来查看端口占用情况, 找到其pid, 并在任务管理器中找到该进程并结束掉就好。\n\n> 注意, 路径中不能出现中文和空格\n\n这样, 我们的php环境和apache服务器就配置好了。\n","slug":"config_skill_experience/develop_envior_config/php/php-apache-config","published":1,"updated":"2022-10-07T12:49:51.261Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejpw004m3vsb8ktbdouk","content":"<h1 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h1><h2 id=\"下载php\"><a href=\"#下载php\" class=\"headerlink\" title=\"下载php\"></a>下载php</h2><h3 id=\"windows-version\"><a href=\"#windows-version\" class=\"headerlink\" title=\"windows version\"></a>windows version</h3><p><a href=\"https://windows.php.net/download\">windows下的php下载地址</a></p>\n<p>下载好之后应该是一个压缩包的形式, 直接解压就好。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"Linux-version\"><a href=\"#Linux-version\" class=\"headerlink\" title=\"Linux version\"></a>Linux version</h3><p><a href=\"https://www.php.net/releases/\">linux下的php下载地址</a><br>同样, 使用tar解压就好</p>\n<h2 id=\"下载apache服务器\"><a href=\"#下载apache服务器\" class=\"headerlink\" title=\"下载apache服务器\"></a>下载apache服务器</h2><h3 id=\"windows-version-1\"><a href=\"#windows-version-1\" class=\"headerlink\" title=\"windows version\"></a>windows version</h3><p><a href=\"https://www.apachehaus.com/cgi-bin/download.plx\">windows下的apache下载地址</a></p>\n<p>下载好之后应该是一个压缩包的形式, 直接解压就好。</p>\n<h3 id=\"Linux-version-1\"><a href=\"#Linux-version-1\" class=\"headerlink\" title=\"Linux version\"></a>Linux version</h3><p>centos下可以直接使用<code>yum</code>命令来安装。</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install httpd -y</span><br></pre></td></tr></table></figure>\n<p>也可以下源码<a href=\"http://archive.apache.org/dist/httpd/\">地址</a>进行安装。</p>\n<p><a href=\"https://blog.csdn.net/nsh_chinaboy/article/details/79918065\">安装步骤</a></p>\n<p>安装完之后可以在<code>/etc/httpd</code>目录下找到。</p>\n<h4 id=\"Linux-源码安装php\"><a href=\"#Linux-源码安装php\" class=\"headerlink\" title=\"Linux 源码安装php\"></a>Linux 源码安装php</h4><p>将源码下载解压好之后, 就可以</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --prefix=/usr/local/php --with-curl=/usr/local/curl --with-freetype-dir --with-gd --with-gettext --with-iconv-dir --with-kerberos --with-libdir=lib64 --with-libxml-dir=/usr/include/libxml2/libxml --with-openssl --with-pcre-regex --with-pdo-mysql --with-pdo-sqlite --with-pear --with-png-dir --with-xmlrpc --with-xsl --with-zlib --enable-fpm --enable-bcmath --enable-libxml --enable-inline-optimization --enable-mbregex --enable-mbstring --enable-opcache --enable-pcntl --enable-shmop --enable-soap --enable-sockets --enable-sysvsem --enable-xml --enable-zip --with-apxs2=/data/soft/httpd/bin/apxs</span><br></pre></td></tr></table></figure>\n\n<p>注意, 这里<code>--prefix</code>说明了安装位置, 剩下的都是开启php的一些功能, 这里注意, 有一些功能需要安装其他的软件, 如果没有安装会报错, 大部分都是某某-devel没有安装, 可以直接使用<code>yum list</code>来查找安装。</p>\n<p>configure之后就可以直接make了, 这里我遇到的报错有:</p>\n<ul>\n<li>错误一:<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node.c: In function ‘dom_canonicalization’:</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>是libxml导致的问题，可以下载补丁patch一下。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -o php-5.x.x.patch https://mail.gnome.org/archives/xml/2012-August/txtbgxGXAvz4N.txt</span><br><span class=\"line\">patch -p0 -b &lt; ./php-5.x.x.patch</span><br></pre></td></tr></table></figure>\n<p>或者：<br>配置时去掉–with-libxml-dir 这个选项。但没有但没有DOM和XML。<br>如果需要DOM和XML。则配置–with-libxml-dir&#x3D;libxml2安装目录&#x2F;include&#x2F;libxml2&#x2F;libxml</p>\n<p><a href=\"https://www.cnblogs.com/yangxunwu1992/p/5803392.html\">原博客地址</a></p>\n<ul>\n<li>错误二:<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ext/mysqli/mysqli.c:1495: undefined reference to `client_errors&#x27;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>去掉 <code>--with-mysqli</code> 这个选项，然后在安装完 PHP 之后再新增这个扩展。<br>安装 mysqli 扩展，PHP 5.3 的源码就已经包含了这个扩展的源码，进入 php-5.3.29&#x2F;ext&#x2F;mysqli ，用 phpize 安装，又或者直接用 pecl 安装。</p>\n<p>使用 <code>/php/bin/phpize</code>运行php安装目录下的phpize文件，这时候会在extension目录下生成相应的configure文件。<br><code>.configure --with-php-config=/php/bin/php-config</code> 运行配置，如果你的服务器上只是装了一个版本的php则不需要添加<code>--with-php-config</code> 。后面的参数只是为了告诉phpize要建立基于哪个版本的扩展。</p>\n<p><code>make &amp;&amp; make install</code>编译安装模块。</p>\n<p>编译好模块之后，需要让php启用它。在php.ini文件中加入把extension.so开启即可。重启php服务。</p>\n<ul>\n<li>错误三:</li>\n</ul>\n<p>重新编译PHP后重启Apache出现undefined symbol: sapi_globals, PHP编译了中间文件，如果再用.&#x2F;configure –with-apxs2来编译php会导致apache重启的时候出现undefined symbol: sapi_globals的错误。解决办法是在configure之前运行一下make clean即可。</p>\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><h2 id=\"配置php\"><a href=\"#配置php\" class=\"headerlink\" title=\"配置php\"></a>配置php</h2><p>下载好之后, 打开php的根目录, 找到<code>php.ini-development</code>这个文件, 将这个文件复制一份, 并重命名为<code>php.ini</code>, 编辑这个文件, 找到<code>extension</code>部分, 将需要的扩展前面的<code>;</code>去掉, 附上我的配置:</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">extension</span>=curl</span><br><span class=\"line\"><span class=\"attr\">extension</span>=gd2</span><br><span class=\"line\"><span class=\"attr\">extension</span>=imap</span><br><span class=\"line\"><span class=\"attr\">extension</span>=mbstring</span><br><span class=\"line\"><span class=\"attr\">extension</span>=mysql</span><br><span class=\"line\"><span class=\"attr\">extension</span>=mysqli</span><br><span class=\"line\"><span class=\"attr\">extension</span>=openssl</span><br><span class=\"line\"><span class=\"attr\">extension</span>=pdo_firebird</span><br><span class=\"line\"><span class=\"attr\">extension</span>=pdo_mysql</span><br></pre></td></tr></table></figure>\n\n<p>注意, 这里使用的是php新版本的配置方式, 老版本的配置需要在扩展名前加上<code>php_</code>, 而且还需要文件后缀名<code>.dll</code></p>\n<p>例如:</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">extension</span>=php_curl.dll</span><br></pre></td></tr></table></figure>\n<p>接着是很重要的一部分, 配置扩展的路径。<br>先全局搜索一下<code>extension_dir</code>这个字段, 如果没有则加上, 值设为你的扩展文件夹的绝对路径:</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">extension_dir</span> = <span class=\"string\">&quot;c:\\php\\ext&quot;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意, 如果遇到了 <code>call to undifined function: ***</code> 之类的报错, 则找到这个方法需要的扩展, 并将该扩展前的分号移除。</p>\n</blockquote>\n<br>\n\n<h2 id=\"配置apache\"><a href=\"#配置apache\" class=\"headerlink\" title=\"配置apache\"></a>配置apache</h2><p>找到apache根目录下的conf&#x2F;httpd.conf文件并编辑, 在结尾处加上:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">loadModule php5_module C:/php/php5apache2_4.dll</span><br><span class=\"line\">PHPIniDir &quot;C:/php/&quot;</span><br><span class=\"line\">AddType application/x-httpd-php .php</span><br><span class=\"line\"></span><br><span class=\"line\"># 下面的配置主要为了防止 curl_init 函数不能被加载</span><br><span class=\"line\">LoadFile C:\\php\\php5ts.dll</span><br><span class=\"line\">LoadFile C:\\php\\libeay32.dll</span><br><span class=\"line\">LoadFile C:\\php\\ssleay32.dll</span><br><span class=\"line\">LoadFile C:\\php\\libssh2.dll</span><br><span class=\"line\"># 这里需要将这几个文件拷贝到 C:/windows/system32 (64位放在 C:/windows/SysWQOW64 目录下)和apache 根目录的bin下</span><br></pre></td></tr></table></figure>\n<p>还有一个可选设置是apache的网页文件目录:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DocumentRoot &quot;$&#123;SRVROOT&#125;/htdocs&quot;</span><br></pre></td></tr></table></figure>\n<p>和这一行:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 这里填写你自己的根目录的绝对路径</span><br><span class=\"line\">Define SRVROOT &quot;C:/server/apache/Apache24&quot;</span><br></pre></td></tr></table></figure>\n<p>接着来安装服务:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">httpd -k install</span><br></pre></td></tr></table></figure>\n<p>最后来测试运行:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">httpd -k start</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意, 如果在这期间出现了类似于”通常每个套接字地址(协议&#x2F;网络地址&#x2F;端口)只允许使用一次”类似的问题, 那么查看他需要使用的端口号, 然后输入<code>netstat -a -o</code>来查看端口占用情况, 找到其pid, 并在任务管理器中找到该进程并结束掉就好。</p>\n</blockquote>\n<blockquote>\n<p>注意, 路径中不能出现中文和空格</p>\n</blockquote>\n<p>这样, 我们的php环境和apache服务器就配置好了。</p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h1><h2 id=\"下载php\"><a href=\"#下载php\" class=\"headerlink\" title=\"下载php\"></a>下载php</h2><h3 id=\"windows-version\"><a href=\"#windows-version\" class=\"headerlink\" title=\"windows version\"></a>windows version</h3><p><a href=\"https://windows.php.net/download\">windows下的php下载地址</a></p>\n<p>下载好之后应该是一个压缩包的形式, 直接解压就好。</p>","more":"<h3 id=\"Linux-version\"><a href=\"#Linux-version\" class=\"headerlink\" title=\"Linux version\"></a>Linux version</h3><p><a href=\"https://www.php.net/releases/\">linux下的php下载地址</a><br>同样, 使用tar解压就好</p>\n<h2 id=\"下载apache服务器\"><a href=\"#下载apache服务器\" class=\"headerlink\" title=\"下载apache服务器\"></a>下载apache服务器</h2><h3 id=\"windows-version-1\"><a href=\"#windows-version-1\" class=\"headerlink\" title=\"windows version\"></a>windows version</h3><p><a href=\"https://www.apachehaus.com/cgi-bin/download.plx\">windows下的apache下载地址</a></p>\n<p>下载好之后应该是一个压缩包的形式, 直接解压就好。</p>\n<h3 id=\"Linux-version-1\"><a href=\"#Linux-version-1\" class=\"headerlink\" title=\"Linux version\"></a>Linux version</h3><p>centos下可以直接使用<code>yum</code>命令来安装。</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install httpd -y</span><br></pre></td></tr></table></figure>\n<p>也可以下源码<a href=\"http://archive.apache.org/dist/httpd/\">地址</a>进行安装。</p>\n<p><a href=\"https://blog.csdn.net/nsh_chinaboy/article/details/79918065\">安装步骤</a></p>\n<p>安装完之后可以在<code>/etc/httpd</code>目录下找到。</p>\n<h4 id=\"Linux-源码安装php\"><a href=\"#Linux-源码安装php\" class=\"headerlink\" title=\"Linux 源码安装php\"></a>Linux 源码安装php</h4><p>将源码下载解压好之后, 就可以</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --prefix=/usr/local/php --with-curl=/usr/local/curl --with-freetype-dir --with-gd --with-gettext --with-iconv-dir --with-kerberos --with-libdir=lib64 --with-libxml-dir=/usr/include/libxml2/libxml --with-openssl --with-pcre-regex --with-pdo-mysql --with-pdo-sqlite --with-pear --with-png-dir --with-xmlrpc --with-xsl --with-zlib --enable-fpm --enable-bcmath --enable-libxml --enable-inline-optimization --enable-mbregex --enable-mbstring --enable-opcache --enable-pcntl --enable-shmop --enable-soap --enable-sockets --enable-sysvsem --enable-xml --enable-zip --with-apxs2=/data/soft/httpd/bin/apxs</span><br></pre></td></tr></table></figure>\n\n<p>注意, 这里<code>--prefix</code>说明了安装位置, 剩下的都是开启php的一些功能, 这里注意, 有一些功能需要安装其他的软件, 如果没有安装会报错, 大部分都是某某-devel没有安装, 可以直接使用<code>yum list</code>来查找安装。</p>\n<p>configure之后就可以直接make了, 这里我遇到的报错有:</p>\n<ul>\n<li>错误一:<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node.c: In function ‘dom_canonicalization’:</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>是libxml导致的问题，可以下载补丁patch一下。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -o php-5.x.x.patch https://mail.gnome.org/archives/xml/2012-August/txtbgxGXAvz4N.txt</span><br><span class=\"line\">patch -p0 -b &lt; ./php-5.x.x.patch</span><br></pre></td></tr></table></figure>\n<p>或者：<br>配置时去掉–with-libxml-dir 这个选项。但没有但没有DOM和XML。<br>如果需要DOM和XML。则配置–with-libxml-dir&#x3D;libxml2安装目录&#x2F;include&#x2F;libxml2&#x2F;libxml</p>\n<p><a href=\"https://www.cnblogs.com/yangxunwu1992/p/5803392.html\">原博客地址</a></p>\n<ul>\n<li>错误二:<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ext/mysqli/mysqli.c:1495: undefined reference to `client_errors&#x27;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>去掉 <code>--with-mysqli</code> 这个选项，然后在安装完 PHP 之后再新增这个扩展。<br>安装 mysqli 扩展，PHP 5.3 的源码就已经包含了这个扩展的源码，进入 php-5.3.29&#x2F;ext&#x2F;mysqli ，用 phpize 安装，又或者直接用 pecl 安装。</p>\n<p>使用 <code>/php/bin/phpize</code>运行php安装目录下的phpize文件，这时候会在extension目录下生成相应的configure文件。<br><code>.configure --with-php-config=/php/bin/php-config</code> 运行配置，如果你的服务器上只是装了一个版本的php则不需要添加<code>--with-php-config</code> 。后面的参数只是为了告诉phpize要建立基于哪个版本的扩展。</p>\n<p><code>make &amp;&amp; make install</code>编译安装模块。</p>\n<p>编译好模块之后，需要让php启用它。在php.ini文件中加入把extension.so开启即可。重启php服务。</p>\n<ul>\n<li>错误三:</li>\n</ul>\n<p>重新编译PHP后重启Apache出现undefined symbol: sapi_globals, PHP编译了中间文件，如果再用.&#x2F;configure –with-apxs2来编译php会导致apache重启的时候出现undefined symbol: sapi_globals的错误。解决办法是在configure之前运行一下make clean即可。</p>\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><h2 id=\"配置php\"><a href=\"#配置php\" class=\"headerlink\" title=\"配置php\"></a>配置php</h2><p>下载好之后, 打开php的根目录, 找到<code>php.ini-development</code>这个文件, 将这个文件复制一份, 并重命名为<code>php.ini</code>, 编辑这个文件, 找到<code>extension</code>部分, 将需要的扩展前面的<code>;</code>去掉, 附上我的配置:</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">extension</span>=curl</span><br><span class=\"line\"><span class=\"attr\">extension</span>=gd2</span><br><span class=\"line\"><span class=\"attr\">extension</span>=imap</span><br><span class=\"line\"><span class=\"attr\">extension</span>=mbstring</span><br><span class=\"line\"><span class=\"attr\">extension</span>=mysql</span><br><span class=\"line\"><span class=\"attr\">extension</span>=mysqli</span><br><span class=\"line\"><span class=\"attr\">extension</span>=openssl</span><br><span class=\"line\"><span class=\"attr\">extension</span>=pdo_firebird</span><br><span class=\"line\"><span class=\"attr\">extension</span>=pdo_mysql</span><br></pre></td></tr></table></figure>\n\n<p>注意, 这里使用的是php新版本的配置方式, 老版本的配置需要在扩展名前加上<code>php_</code>, 而且还需要文件后缀名<code>.dll</code></p>\n<p>例如:</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">extension</span>=php_curl.dll</span><br></pre></td></tr></table></figure>\n<p>接着是很重要的一部分, 配置扩展的路径。<br>先全局搜索一下<code>extension_dir</code>这个字段, 如果没有则加上, 值设为你的扩展文件夹的绝对路径:</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">extension_dir</span> = <span class=\"string\">&quot;c:\\php\\ext&quot;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意, 如果遇到了 <code>call to undifined function: ***</code> 之类的报错, 则找到这个方法需要的扩展, 并将该扩展前的分号移除。</p>\n</blockquote>\n<br>\n\n<h2 id=\"配置apache\"><a href=\"#配置apache\" class=\"headerlink\" title=\"配置apache\"></a>配置apache</h2><p>找到apache根目录下的conf&#x2F;httpd.conf文件并编辑, 在结尾处加上:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">loadModule php5_module C:/php/php5apache2_4.dll</span><br><span class=\"line\">PHPIniDir &quot;C:/php/&quot;</span><br><span class=\"line\">AddType application/x-httpd-php .php</span><br><span class=\"line\"></span><br><span class=\"line\"># 下面的配置主要为了防止 curl_init 函数不能被加载</span><br><span class=\"line\">LoadFile C:\\php\\php5ts.dll</span><br><span class=\"line\">LoadFile C:\\php\\libeay32.dll</span><br><span class=\"line\">LoadFile C:\\php\\ssleay32.dll</span><br><span class=\"line\">LoadFile C:\\php\\libssh2.dll</span><br><span class=\"line\"># 这里需要将这几个文件拷贝到 C:/windows/system32 (64位放在 C:/windows/SysWQOW64 目录下)和apache 根目录的bin下</span><br></pre></td></tr></table></figure>\n<p>还有一个可选设置是apache的网页文件目录:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DocumentRoot &quot;$&#123;SRVROOT&#125;/htdocs&quot;</span><br></pre></td></tr></table></figure>\n<p>和这一行:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 这里填写你自己的根目录的绝对路径</span><br><span class=\"line\">Define SRVROOT &quot;C:/server/apache/Apache24&quot;</span><br></pre></td></tr></table></figure>\n<p>接着来安装服务:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">httpd -k install</span><br></pre></td></tr></table></figure>\n<p>最后来测试运行:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">httpd -k start</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意, 如果在这期间出现了类似于”通常每个套接字地址(协议&#x2F;网络地址&#x2F;端口)只允许使用一次”类似的问题, 那么查看他需要使用的端口号, 然后输入<code>netstat -a -o</code>来查看端口占用情况, 找到其pid, 并在任务管理器中找到该进程并结束掉就好。</p>\n</blockquote>\n<blockquote>\n<p>注意, 路径中不能出现中文和空格</p>\n</blockquote>\n<p>这样, 我们的php环境和apache服务器就配置好了。</p>"},{"title":"rocketMQ的安装与配置","date":"2019-03-21T03:32:26.000Z","_content":"\n# 前言\n\n因工作需要实现待办事项功能, 所以接触到了mq, 并将安装和配置的过程记录下来。\n\n# 下载\n\n[官网](http://rocketmq.apache.org/)\n这里是它的[下载地址](http://rocketmq.apache.org/release_notes/release-notes-4.4.0/)\n\n# 配置\n\n不得不说一句, 它的配置是真的坑, 搞了好长时间才弄明白怎么回事, 相关文档也比较少。\n\n## 修改jvm内存大小\n\n如果你下载好之后, 直接使用 `sh mqnamesrv &` 命令启动的话, 那么八成会遇到jvm内存不足的错误提示。\n\n这里需要先修改 `bin/runserver.sh`, `bin/runbroker.sh`和`bin/tools.sh` 文件:\n\n```shell\n# JVM configuration 的第一句话\nJAVA_OPT=\"${JAVA_OPT} -server -Xms4g -Xmx4g -Xmn2g -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m\"\n```\n\n这里修改为适合自己电脑的内存大小。\n\n## 修改broker默认启动内网的地址\n\n其实到上面那一步就可以正常的启动了, 但是我在将rocketMQ配置到腾讯云并启动之后, 他就会报:\n\n```java\nException in thread \"main\" org.apache.rocketmq.remoting.exception.RemotingTooMuchRequestException: sendDefaultImpl call timeout\nat org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl.sendDefaultImpl(DefaultMQProducerImpl.java:634)\n\tat org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl.send(DefaultMQProducerImpl.java:1279)\n\tat org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl.send(DefaultMQProducerImpl.java:1225)\n\tat org.apache.rocketmq.client.producer.DefaultMQProducer.send(DefaultMQProducer.java:283)\n```\n\n在启动broker时会有broker的启动的地址, 启动时会有这样的提示:\n\n```shell\nThe broker[broker-a, 127.0.0.1:10911] boot success. serializeType=JSON and name server is 127.0.0.1:9876\n```\n\n但是我们如果远程连接broker的话, 是不能直接使用内网地址来访问的, 所以这里就需要修改一下 `conf/broker.conf`:\n\n```shell\n# 在文件最后添加:\nbrokerIP1 = 你的外网地址\n```\n\n然后在启动broker的时候可以这么写:\n\n```shell\nsh mqbroker -n 127.0.0.1:9876 autoCreateTopicEnable=true -c ../conf/broker.conf\n```\n\n这样就可以正常的使用了。\n\n[这里](https://blog.csdn.net/gwd1154978352/article/details/80829534)是它的一些常用命令。\n","source":"_posts/config_skill_experience/middleware/rocketMQ/first-step.md","raw":"---\ntitle: rocketMQ的安装与配置 \ndate: 2019-03-21 11:32:26\ncategories:\n- 配置技巧/经验\n- 中间件\n- rocketMQ\ntags:\n- rocketMQ\n---\n\n# 前言\n\n因工作需要实现待办事项功能, 所以接触到了mq, 并将安装和配置的过程记录下来。\n\n# 下载\n\n[官网](http://rocketmq.apache.org/)\n这里是它的[下载地址](http://rocketmq.apache.org/release_notes/release-notes-4.4.0/)\n\n# 配置\n\n不得不说一句, 它的配置是真的坑, 搞了好长时间才弄明白怎么回事, 相关文档也比较少。\n\n## 修改jvm内存大小\n\n如果你下载好之后, 直接使用 `sh mqnamesrv &` 命令启动的话, 那么八成会遇到jvm内存不足的错误提示。\n\n这里需要先修改 `bin/runserver.sh`, `bin/runbroker.sh`和`bin/tools.sh` 文件:\n\n```shell\n# JVM configuration 的第一句话\nJAVA_OPT=\"${JAVA_OPT} -server -Xms4g -Xmx4g -Xmn2g -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m\"\n```\n\n这里修改为适合自己电脑的内存大小。\n\n## 修改broker默认启动内网的地址\n\n其实到上面那一步就可以正常的启动了, 但是我在将rocketMQ配置到腾讯云并启动之后, 他就会报:\n\n```java\nException in thread \"main\" org.apache.rocketmq.remoting.exception.RemotingTooMuchRequestException: sendDefaultImpl call timeout\nat org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl.sendDefaultImpl(DefaultMQProducerImpl.java:634)\n\tat org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl.send(DefaultMQProducerImpl.java:1279)\n\tat org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl.send(DefaultMQProducerImpl.java:1225)\n\tat org.apache.rocketmq.client.producer.DefaultMQProducer.send(DefaultMQProducer.java:283)\n```\n\n在启动broker时会有broker的启动的地址, 启动时会有这样的提示:\n\n```shell\nThe broker[broker-a, 127.0.0.1:10911] boot success. serializeType=JSON and name server is 127.0.0.1:9876\n```\n\n但是我们如果远程连接broker的话, 是不能直接使用内网地址来访问的, 所以这里就需要修改一下 `conf/broker.conf`:\n\n```shell\n# 在文件最后添加:\nbrokerIP1 = 你的外网地址\n```\n\n然后在启动broker的时候可以这么写:\n\n```shell\nsh mqbroker -n 127.0.0.1:9876 autoCreateTopicEnable=true -c ../conf/broker.conf\n```\n\n这样就可以正常的使用了。\n\n[这里](https://blog.csdn.net/gwd1154978352/article/details/80829534)是它的一些常用命令。\n","slug":"config_skill_experience/middleware/rocketMQ/first-step","published":1,"updated":"2022-10-02T16:44:18.943Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejpz004p3vsb4sx2ckp7","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>因工作需要实现待办事项功能, 所以接触到了mq, 并将安装和配置的过程记录下来。</p>\n<h1 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h1><p><a href=\"http://rocketmq.apache.org/\">官网</a><br>这里是它的<a href=\"http://rocketmq.apache.org/release_notes/release-notes-4.4.0/\">下载地址</a></p>\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><p>不得不说一句, 它的配置是真的坑, 搞了好长时间才弄明白怎么回事, 相关文档也比较少。</p>\n<h2 id=\"修改jvm内存大小\"><a href=\"#修改jvm内存大小\" class=\"headerlink\" title=\"修改jvm内存大小\"></a>修改jvm内存大小</h2><p>如果你下载好之后, 直接使用 <code>sh mqnamesrv &amp;</code> 命令启动的话, 那么八成会遇到jvm内存不足的错误提示。</p>\n<p>这里需要先修改 <code>bin/runserver.sh</code>, <code>bin/runbroker.sh</code>和<code>bin/tools.sh</code> 文件:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> JVM configuration 的第一句话</span></span><br><span class=\"line\">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -server -Xms4g -Xmx4g -Xmn2g -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m&quot;</span><br></pre></td></tr></table></figure>\n\n<p>这里修改为适合自己电脑的内存大小。</p>\n<h2 id=\"修改broker默认启动内网的地址\"><a href=\"#修改broker默认启动内网的地址\" class=\"headerlink\" title=\"修改broker默认启动内网的地址\"></a>修改broker默认启动内网的地址</h2><p>其实到上面那一步就可以正常的启动了, 但是我在将rocketMQ配置到腾讯云并启动之后, 他就会报:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Exception in thread <span class=\"string\">&quot;main&quot;</span> org.apache.rocketmq.remoting.exception.RemotingTooMuchRequestException: sendDefaultImpl call timeout</span><br><span class=\"line\">at org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl.sendDefaultImpl(DefaultMQProducerImpl.java:<span class=\"number\">634</span>)</span><br><span class=\"line\">\tat org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl.send(DefaultMQProducerImpl.java:<span class=\"number\">1279</span>)</span><br><span class=\"line\">\tat org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl.send(DefaultMQProducerImpl.java:<span class=\"number\">1225</span>)</span><br><span class=\"line\">\tat org.apache.rocketmq.client.producer.DefaultMQProducer.send(DefaultMQProducer.java:<span class=\"number\">283</span>)</span><br></pre></td></tr></table></figure>\n\n<p>在启动broker时会有broker的启动的地址, 启动时会有这样的提示:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The broker[broker-a, 127.0.0.1:10911] boot success. serializeType=JSON and name server is 127.0.0.1:9876</span><br></pre></td></tr></table></figure>\n\n<p>但是我们如果远程连接broker的话, 是不能直接使用内网地址来访问的, 所以这里就需要修改一下 <code>conf/broker.conf</code>:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 在文件最后添加:</span></span><br><span class=\"line\">brokerIP1 = 你的外网地址</span><br></pre></td></tr></table></figure>\n\n<p>然后在启动broker的时候可以这么写:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sh mqbroker -n 127.0.0.1:9876 autoCreateTopicEnable=true -c ../conf/broker.conf</span><br></pre></td></tr></table></figure>\n\n<p>这样就可以正常的使用了。</p>\n<p><a href=\"https://blog.csdn.net/gwd1154978352/article/details/80829534\">这里</a>是它的一些常用命令。</p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>因工作需要实现待办事项功能, 所以接触到了mq, 并将安装和配置的过程记录下来。</p>\n<h1 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h1><p><a href=\"http://rocketmq.apache.org/\">官网</a><br>这里是它的<a href=\"http://rocketmq.apache.org/release_notes/release-notes-4.4.0/\">下载地址</a></p>\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><p>不得不说一句, 它的配置是真的坑, 搞了好长时间才弄明白怎么回事, 相关文档也比较少。</p>\n<h2 id=\"修改jvm内存大小\"><a href=\"#修改jvm内存大小\" class=\"headerlink\" title=\"修改jvm内存大小\"></a>修改jvm内存大小</h2><p>如果你下载好之后, 直接使用 <code>sh mqnamesrv &amp;</code> 命令启动的话, 那么八成会遇到jvm内存不足的错误提示。</p>\n<p>这里需要先修改 <code>bin/runserver.sh</code>, <code>bin/runbroker.sh</code>和<code>bin/tools.sh</code> 文件:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> JVM configuration 的第一句话</span></span><br><span class=\"line\">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -server -Xms4g -Xmx4g -Xmn2g -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m&quot;</span><br></pre></td></tr></table></figure>\n\n<p>这里修改为适合自己电脑的内存大小。</p>\n<h2 id=\"修改broker默认启动内网的地址\"><a href=\"#修改broker默认启动内网的地址\" class=\"headerlink\" title=\"修改broker默认启动内网的地址\"></a>修改broker默认启动内网的地址</h2><p>其实到上面那一步就可以正常的启动了, 但是我在将rocketMQ配置到腾讯云并启动之后, 他就会报:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Exception in thread <span class=\"string\">&quot;main&quot;</span> org.apache.rocketmq.remoting.exception.RemotingTooMuchRequestException: sendDefaultImpl call timeout</span><br><span class=\"line\">at org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl.sendDefaultImpl(DefaultMQProducerImpl.java:<span class=\"number\">634</span>)</span><br><span class=\"line\">\tat org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl.send(DefaultMQProducerImpl.java:<span class=\"number\">1279</span>)</span><br><span class=\"line\">\tat org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl.send(DefaultMQProducerImpl.java:<span class=\"number\">1225</span>)</span><br><span class=\"line\">\tat org.apache.rocketmq.client.producer.DefaultMQProducer.send(DefaultMQProducer.java:<span class=\"number\">283</span>)</span><br></pre></td></tr></table></figure>\n\n<p>在启动broker时会有broker的启动的地址, 启动时会有这样的提示:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The broker[broker-a, 127.0.0.1:10911] boot success. serializeType=JSON and name server is 127.0.0.1:9876</span><br></pre></td></tr></table></figure>\n\n<p>但是我们如果远程连接broker的话, 是不能直接使用内网地址来访问的, 所以这里就需要修改一下 <code>conf/broker.conf</code>:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 在文件最后添加:</span></span><br><span class=\"line\">brokerIP1 = 你的外网地址</span><br></pre></td></tr></table></figure>\n\n<p>然后在启动broker的时候可以这么写:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sh mqbroker -n 127.0.0.1:9876 autoCreateTopicEnable=true -c ../conf/broker.conf</span><br></pre></td></tr></table></figure>\n\n<p>这样就可以正常的使用了。</p>\n<p><a href=\"https://blog.csdn.net/gwd1154978352/article/details/80829534\">这里</a>是它的一些常用命令。</p>\n"},{"title":"CentOS下使用ftp协议连接ftp服务器","date":"2019-08-14T08:07:46.000Z","_content":"\n# 前言\n\n[这篇博客](/linux/tools/open-ftp.html)介绍了如何搭建ftp服务器, 现在我们来使用shell的方式连接它吧。\n\n<!--more-->\n\n# ftp 客户端的一些命令\n\n* 安装ftp client\n\n`sudo yum install ftp -y`\n\n* 登录ftp\n\n`ftp ipaddress`\n\n* 显示当前ftp状态\n\n`status` \n\n* 显示远端服务器系统类型\n\n`system`\n\n* 列出当前远端主机目录中的文件.如果有本地文件,就将结果写至本地文件,同ls\n\n`dir [remote-directory] [local-file]`\n\n* 列出远端主机当前目录\n\n`pwd`\n\n* 在远端主机中建立目录\n\n`mkdir directory-name`\n\n* 删除远端主机中的目录\n\n`rmdir directory-name`\n\n* 返回上一级目录\n\n`cdup`\n\n* 改变当前本地主机的工作目录,如果缺省,就转到当前用户的HOME目录\n\n`lcd`\n\n* 改变远端主机的文件权限\n\n`chmod`\n\n* 将本地一个文件传送至远端主机中（等价命令为send）\n\n`put local-file [remote-file]`\n\n* 将本地主机中一批文件传送至远端主机\n\n`mput local-files`\n\n* 删除远端主机中的文件\n\n`delete`\n\n* 删除一批文件\n\n`mdelete [remote-files]`\n\n* 退出FTP模式\n\n`bye`\n","source":"_posts/config_skill_experience/system_config/linux/connect-ftp.md","raw":"---\ntitle: CentOS下使用ftp协议连接ftp服务器\ndate: 2019-08-14 16:07:46\ncategories:\n- 配置技巧/经验\n- 系统配置\n- linux\ntags:\n- linux的使用\n---\n\n# 前言\n\n[这篇博客](/linux/tools/open-ftp.html)介绍了如何搭建ftp服务器, 现在我们来使用shell的方式连接它吧。\n\n<!--more-->\n\n# ftp 客户端的一些命令\n\n* 安装ftp client\n\n`sudo yum install ftp -y`\n\n* 登录ftp\n\n`ftp ipaddress`\n\n* 显示当前ftp状态\n\n`status` \n\n* 显示远端服务器系统类型\n\n`system`\n\n* 列出当前远端主机目录中的文件.如果有本地文件,就将结果写至本地文件,同ls\n\n`dir [remote-directory] [local-file]`\n\n* 列出远端主机当前目录\n\n`pwd`\n\n* 在远端主机中建立目录\n\n`mkdir directory-name`\n\n* 删除远端主机中的目录\n\n`rmdir directory-name`\n\n* 返回上一级目录\n\n`cdup`\n\n* 改变当前本地主机的工作目录,如果缺省,就转到当前用户的HOME目录\n\n`lcd`\n\n* 改变远端主机的文件权限\n\n`chmod`\n\n* 将本地一个文件传送至远端主机中（等价命令为send）\n\n`put local-file [remote-file]`\n\n* 将本地主机中一批文件传送至远端主机\n\n`mput local-files`\n\n* 删除远端主机中的文件\n\n`delete`\n\n* 删除一批文件\n\n`mdelete [remote-files]`\n\n* 退出FTP模式\n\n`bye`\n","slug":"config_skill_experience/system_config/linux/connect-ftp","published":1,"updated":"2022-10-03T02:35:48.590Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejq5004t3vsb7g8q0ocb","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p><a href=\"/linux/tools/open-ftp.html\">这篇博客</a>介绍了如何搭建ftp服务器, 现在我们来使用shell的方式连接它吧。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"ftp-客户端的一些命令\"><a href=\"#ftp-客户端的一些命令\" class=\"headerlink\" title=\"ftp 客户端的一些命令\"></a>ftp 客户端的一些命令</h1><ul>\n<li>安装ftp client</li>\n</ul>\n<p><code>sudo yum install ftp -y</code></p>\n<ul>\n<li>登录ftp</li>\n</ul>\n<p><code>ftp ipaddress</code></p>\n<ul>\n<li>显示当前ftp状态</li>\n</ul>\n<p><code>status</code> </p>\n<ul>\n<li>显示远端服务器系统类型</li>\n</ul>\n<p><code>system</code></p>\n<ul>\n<li>列出当前远端主机目录中的文件.如果有本地文件,就将结果写至本地文件,同ls</li>\n</ul>\n<p><code>dir [remote-directory] [local-file]</code></p>\n<ul>\n<li>列出远端主机当前目录</li>\n</ul>\n<p><code>pwd</code></p>\n<ul>\n<li>在远端主机中建立目录</li>\n</ul>\n<p><code>mkdir directory-name</code></p>\n<ul>\n<li>删除远端主机中的目录</li>\n</ul>\n<p><code>rmdir directory-name</code></p>\n<ul>\n<li>返回上一级目录</li>\n</ul>\n<p><code>cdup</code></p>\n<ul>\n<li>改变当前本地主机的工作目录,如果缺省,就转到当前用户的HOME目录</li>\n</ul>\n<p><code>lcd</code></p>\n<ul>\n<li>改变远端主机的文件权限</li>\n</ul>\n<p><code>chmod</code></p>\n<ul>\n<li>将本地一个文件传送至远端主机中（等价命令为send）</li>\n</ul>\n<p><code>put local-file [remote-file]</code></p>\n<ul>\n<li>将本地主机中一批文件传送至远端主机</li>\n</ul>\n<p><code>mput local-files</code></p>\n<ul>\n<li>删除远端主机中的文件</li>\n</ul>\n<p><code>delete</code></p>\n<ul>\n<li>删除一批文件</li>\n</ul>\n<p><code>mdelete [remote-files]</code></p>\n<ul>\n<li>退出FTP模式</li>\n</ul>\n<p><code>bye</code></p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p><a href=\"/linux/tools/open-ftp.html\">这篇博客</a>介绍了如何搭建ftp服务器, 现在我们来使用shell的方式连接它吧。</p>","more":"<h1 id=\"ftp-客户端的一些命令\"><a href=\"#ftp-客户端的一些命令\" class=\"headerlink\" title=\"ftp 客户端的一些命令\"></a>ftp 客户端的一些命令</h1><ul>\n<li>安装ftp client</li>\n</ul>\n<p><code>sudo yum install ftp -y</code></p>\n<ul>\n<li>登录ftp</li>\n</ul>\n<p><code>ftp ipaddress</code></p>\n<ul>\n<li>显示当前ftp状态</li>\n</ul>\n<p><code>status</code> </p>\n<ul>\n<li>显示远端服务器系统类型</li>\n</ul>\n<p><code>system</code></p>\n<ul>\n<li>列出当前远端主机目录中的文件.如果有本地文件,就将结果写至本地文件,同ls</li>\n</ul>\n<p><code>dir [remote-directory] [local-file]</code></p>\n<ul>\n<li>列出远端主机当前目录</li>\n</ul>\n<p><code>pwd</code></p>\n<ul>\n<li>在远端主机中建立目录</li>\n</ul>\n<p><code>mkdir directory-name</code></p>\n<ul>\n<li>删除远端主机中的目录</li>\n</ul>\n<p><code>rmdir directory-name</code></p>\n<ul>\n<li>返回上一级目录</li>\n</ul>\n<p><code>cdup</code></p>\n<ul>\n<li>改变当前本地主机的工作目录,如果缺省,就转到当前用户的HOME目录</li>\n</ul>\n<p><code>lcd</code></p>\n<ul>\n<li>改变远端主机的文件权限</li>\n</ul>\n<p><code>chmod</code></p>\n<ul>\n<li>将本地一个文件传送至远端主机中（等价命令为send）</li>\n</ul>\n<p><code>put local-file [remote-file]</code></p>\n<ul>\n<li>将本地主机中一批文件传送至远端主机</li>\n</ul>\n<p><code>mput local-files</code></p>\n<ul>\n<li>删除远端主机中的文件</li>\n</ul>\n<p><code>delete</code></p>\n<ul>\n<li>删除一批文件</li>\n</ul>\n<p><code>mdelete [remote-files]</code></p>\n<ul>\n<li>退出FTP模式</li>\n</ul>\n<p><code>bye</code></p>"},{"title":"linux 连接wifi","date":"2019-12-31T20:25:16.000Z","_content":"\n# 步骤\n\n* 查看自己的网卡名称\n\n```shell\nifconfig\n```\n\n![ifconfig命令](/images/linux/ethcard/ifconfig.png)\n\n<!--more-->\n\n* 将wifi名和密码写入配置\n\n```shell\nwpa_passphrase wifi名 wifi密码 >> /etc/wpa_supplicant/网卡名.conf\n```\n\n* 加载配置文件\n\n```shell\nwpa_supplicant -i 网卡名 -c /etc/wpa_supplicant/网卡名.conf -B\n```\n\n* 查看能否获取到ip\n\n```shell\ndhclient 网卡名\nip addr\n```\n","source":"_posts/config_skill_experience/system_config/linux/connect-wifi.md","raw":"---\ntitle: linux 连接wifi\ndate: 2020-01-01 04:25:16\ncategories:\n- 配置技巧/经验\n- 系统配置\n- linux\ntags:\n- linux的使用\n---\n\n# 步骤\n\n* 查看自己的网卡名称\n\n```shell\nifconfig\n```\n\n![ifconfig命令](/images/linux/ethcard/ifconfig.png)\n\n<!--more-->\n\n* 将wifi名和密码写入配置\n\n```shell\nwpa_passphrase wifi名 wifi密码 >> /etc/wpa_supplicant/网卡名.conf\n```\n\n* 加载配置文件\n\n```shell\nwpa_supplicant -i 网卡名 -c /etc/wpa_supplicant/网卡名.conf -B\n```\n\n* 查看能否获取到ip\n\n```shell\ndhclient 网卡名\nip addr\n```\n","slug":"config_skill_experience/system_config/linux/connect-wifi","published":1,"updated":"2022-10-03T02:36:12.739Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejq9004w3vsbalx96toq","content":"<h1 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h1><ul>\n<li>查看自己的网卡名称</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ifconfig</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/linux/ethcard/ifconfig.png\" alt=\"ifconfig命令\"></p>\n<span id=\"more\"></span>\n\n<ul>\n<li>将wifi名和密码写入配置</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wpa_passphrase wifi名 wifi密码 &gt;&gt; /etc/wpa_supplicant/网卡名.conf</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>加载配置文件</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wpa_supplicant -i 网卡名 -c /etc/wpa_supplicant/网卡名.conf -B</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看能否获取到ip</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dhclient 网卡名</span><br><span class=\"line\">ip addr</span><br></pre></td></tr></table></figure>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h1><ul>\n<li>查看自己的网卡名称</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ifconfig</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/linux/ethcard/ifconfig.png\" alt=\"ifconfig命令\"></p>","more":"<ul>\n<li>将wifi名和密码写入配置</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wpa_passphrase wifi名 wifi密码 &gt;&gt; /etc/wpa_supplicant/网卡名.conf</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>加载配置文件</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wpa_supplicant -i 网卡名 -c /etc/wpa_supplicant/网卡名.conf -B</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看能否获取到ip</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dhclient 网卡名</span><br><span class=\"line\">ip addr</span><br></pre></td></tr></table></figure>"},{"title":"使用树莓派开启热点","date":"2019-08-18T03:16:36.000Z","_content":"\n# 前言\n\n我也是不知道怎么折腾才好了, 之前尝试着将centos装到树莓派上无果, 这不才下载了[树莓派的官网](https://www.raspberrypi.org/downloads/raspbian/)上的系统, 烧录到内存卡上, 这才算是能用上它。但是因为我更倾向于面向命令行, 图形界面无感(尤其是linux -_-!), 所以装了官网上的最小的版本, 在下载的时候我就已经做好了觉悟, 由于是最小的版本, 所以基本上要啥啥没有, 嗯, 以后有够折腾的了。\n\n那么既然要打算命令行, 那么肯定是要ssh登录的了, 所以这才想着让树莓派自己发射wifi信号, 然后自己开放ssh端口, 这样就省去路由器这一步了, 那么就开始吧。\n<!--more-->\n\n# 下载create_ap\n\n[create_ap](https://github.com/oblique/create_ap)是github上的一个开源的shell项目, 它使用了hostapd, dnsmasq等开源项目来达到软路由的效果, 首先先下载下来:\n\n```shell\ngit clone git@github.com:oblique/create_ap.git\n```\n\n然而第一步我就遇到了困难, 没有git...\n\n那就装一个呗。\n\n## 安装git\n\n这里有两个方式来安装git, 一种就是使用包管理系统来安装, 非常的方便快捷, 另外一种就是源码安装, 可以自定义安装的各种配置。\n\n### 包管理系统安装\n\ndebian/ubuntu:\n\n```shell\nsudo apt-get update\nsudo apt-get install git\n```\n\ncentos:\n\n```shell\nyum install git\n```\n\n验证一下是否安装成功:\n\n```shell\ngit --version\n```\n\n如果有输出的话, 那么就代表安装成功了。\n\n### 源码安装\n\n相对来说较复杂, 首先需要安装构建git所需要的软件包:\n\n```shell\nsudo apt update\nsudo apt-get install make libssl-dev libghc-zlib-dev libcurl4-gnutls-dev libexpat1-dev gettext unzip\n```\n\n然后到[这里](https://github.com/git/git/archive)来查看最新版的链接地址, 使用wget下载下来。\n\n```shell\ncd /home/users/git\nwget https//github.com/git/git/archive/v2.18.0.tar.gz\n```\n\n下载好之后开始解压文件:\n\n```shell\nsudo tar v2.18.0.tar.gz\ncd v2.18.0\n```\n\n之后就可以编译安装了:\n\n```shell\nsudo make prefix=/usr/local all\nsudo make prefix=/usr/local install\n```\n\n如果你没有安装到默认目录, 那么还需要在`~/.bashrc`文件中将git的安装路径放入PATH中:\n\n```shell\nexport PATH=/你的安装路径:$PATH\nexport PATH=/你的安装路径/libexec/git-core:$PATH\n```\n\n参考博客:\n[deiban安装git](https://linux265.com/news/3371.html)\n\n> ok, git 安装好了, 现在可以安安心心的下载咱们的create_ap了。\n\n## 编译create_ap\n\n下载好之后就可以使用make来编译这个项目了:\n\n```shell\ncd create_ap\nsudo make install\n```\n\n喔不, 又出现了一个问题: command dnsmasq not found!\n\n仔细一看, 原来是他用到了dnsmasq, 而我的系统里没有这个东西, 怎么办, 继续装呗...\n\n### 安装dnsmasq\n\n到[官网](www.thekelleys.org.uk/dnsmasq)查看最新的版本, 将之下载下来, 解压, 安装:\n\n```shell\nwget http://www.thekelleys.org/uk/dnsmasq/dnsmasq-2.75.tar.gz\ntar -xf dnsmasq-2.75.tar.gz\ncd dnsmasq-2.75\nmake install\n```\n安装完毕即可查看dnsmasq的版本:\n\n```\ndnsmasq -v\n```\n\n参考博客:\n[dns安装与配置](https://www.olinux.org.cn/linux/990.html)\n\n> 嗯, 让我们在继续运行 make install 看看\n\n现在没啥问题了, 那么让我们来尝试着使用看看:\n\n```\nsudo create_ap wlan0 热点名 密码\n```\n\n嗯, 果然一步一个坑, 还是报错了:\n\n```shell\nhostapd command not found\n```\n\n继续按呗:\n\n### 安装 hostapd\n\n下载, 安装:\n\n```\ngit clone git://w1.fi/srv/git/hostap.git\ncd hostap/hostapd\n```\n\n注意, 这里需要改一下配置:\n\n```shell\ncp defconfig .config\nvi .config\n# 找到 CONFIG_DRIVER_NL80211=y, 将#号去掉\n```\n\n执行: make, 如果这里报错了, 那么先使用包管理系统安装:\n\n```shell\nsudo apt-get install libnl-genl-3-200 libnl-genl-3-dev libnl-idiag-3-dev\n```\n参考博客:\n[hostapd linux documentation page](https://blog.csdn.net/magod/article/details/6736102)\n\n# 配置create_ap\n\n修改/etc/create_ap.conf, 将名称和密码修改为自己想要的, 保存。\n修改 /usr/lib/systemd/system/create_ap.service, 在最下方加上一句:\n\n```shell\nExecStart=/usr/bin/create_ap -n wlan0 热点名 密码\n```\n\n保存退出, 执行:\n\n```shell\nsudo systemctl daemon-reload\nsudo systemctl enable create_ap.service\nsudo systemctl start create_ap.service\nreboot\n```\n\n开启启动就可以看到新创建的热点了!\n\n参考博客:\n[树莓派开热点并自动启动](https://blog.csdn.net/zanran8/article/details/80698347)\n","source":"_posts/config_skill_experience/system_config/linux/create-ap.md","raw":"---\ntitle: 使用树莓派开启热点\ndate: 2019-08-18 11:16:36\ncategories:\n- 配置技巧/经验\n- 系统配置\n- linux\ntags:\n- linux的使用\n---\n\n# 前言\n\n我也是不知道怎么折腾才好了, 之前尝试着将centos装到树莓派上无果, 这不才下载了[树莓派的官网](https://www.raspberrypi.org/downloads/raspbian/)上的系统, 烧录到内存卡上, 这才算是能用上它。但是因为我更倾向于面向命令行, 图形界面无感(尤其是linux -_-!), 所以装了官网上的最小的版本, 在下载的时候我就已经做好了觉悟, 由于是最小的版本, 所以基本上要啥啥没有, 嗯, 以后有够折腾的了。\n\n那么既然要打算命令行, 那么肯定是要ssh登录的了, 所以这才想着让树莓派自己发射wifi信号, 然后自己开放ssh端口, 这样就省去路由器这一步了, 那么就开始吧。\n<!--more-->\n\n# 下载create_ap\n\n[create_ap](https://github.com/oblique/create_ap)是github上的一个开源的shell项目, 它使用了hostapd, dnsmasq等开源项目来达到软路由的效果, 首先先下载下来:\n\n```shell\ngit clone git@github.com:oblique/create_ap.git\n```\n\n然而第一步我就遇到了困难, 没有git...\n\n那就装一个呗。\n\n## 安装git\n\n这里有两个方式来安装git, 一种就是使用包管理系统来安装, 非常的方便快捷, 另外一种就是源码安装, 可以自定义安装的各种配置。\n\n### 包管理系统安装\n\ndebian/ubuntu:\n\n```shell\nsudo apt-get update\nsudo apt-get install git\n```\n\ncentos:\n\n```shell\nyum install git\n```\n\n验证一下是否安装成功:\n\n```shell\ngit --version\n```\n\n如果有输出的话, 那么就代表安装成功了。\n\n### 源码安装\n\n相对来说较复杂, 首先需要安装构建git所需要的软件包:\n\n```shell\nsudo apt update\nsudo apt-get install make libssl-dev libghc-zlib-dev libcurl4-gnutls-dev libexpat1-dev gettext unzip\n```\n\n然后到[这里](https://github.com/git/git/archive)来查看最新版的链接地址, 使用wget下载下来。\n\n```shell\ncd /home/users/git\nwget https//github.com/git/git/archive/v2.18.0.tar.gz\n```\n\n下载好之后开始解压文件:\n\n```shell\nsudo tar v2.18.0.tar.gz\ncd v2.18.0\n```\n\n之后就可以编译安装了:\n\n```shell\nsudo make prefix=/usr/local all\nsudo make prefix=/usr/local install\n```\n\n如果你没有安装到默认目录, 那么还需要在`~/.bashrc`文件中将git的安装路径放入PATH中:\n\n```shell\nexport PATH=/你的安装路径:$PATH\nexport PATH=/你的安装路径/libexec/git-core:$PATH\n```\n\n参考博客:\n[deiban安装git](https://linux265.com/news/3371.html)\n\n> ok, git 安装好了, 现在可以安安心心的下载咱们的create_ap了。\n\n## 编译create_ap\n\n下载好之后就可以使用make来编译这个项目了:\n\n```shell\ncd create_ap\nsudo make install\n```\n\n喔不, 又出现了一个问题: command dnsmasq not found!\n\n仔细一看, 原来是他用到了dnsmasq, 而我的系统里没有这个东西, 怎么办, 继续装呗...\n\n### 安装dnsmasq\n\n到[官网](www.thekelleys.org.uk/dnsmasq)查看最新的版本, 将之下载下来, 解压, 安装:\n\n```shell\nwget http://www.thekelleys.org/uk/dnsmasq/dnsmasq-2.75.tar.gz\ntar -xf dnsmasq-2.75.tar.gz\ncd dnsmasq-2.75\nmake install\n```\n安装完毕即可查看dnsmasq的版本:\n\n```\ndnsmasq -v\n```\n\n参考博客:\n[dns安装与配置](https://www.olinux.org.cn/linux/990.html)\n\n> 嗯, 让我们在继续运行 make install 看看\n\n现在没啥问题了, 那么让我们来尝试着使用看看:\n\n```\nsudo create_ap wlan0 热点名 密码\n```\n\n嗯, 果然一步一个坑, 还是报错了:\n\n```shell\nhostapd command not found\n```\n\n继续按呗:\n\n### 安装 hostapd\n\n下载, 安装:\n\n```\ngit clone git://w1.fi/srv/git/hostap.git\ncd hostap/hostapd\n```\n\n注意, 这里需要改一下配置:\n\n```shell\ncp defconfig .config\nvi .config\n# 找到 CONFIG_DRIVER_NL80211=y, 将#号去掉\n```\n\n执行: make, 如果这里报错了, 那么先使用包管理系统安装:\n\n```shell\nsudo apt-get install libnl-genl-3-200 libnl-genl-3-dev libnl-idiag-3-dev\n```\n参考博客:\n[hostapd linux documentation page](https://blog.csdn.net/magod/article/details/6736102)\n\n# 配置create_ap\n\n修改/etc/create_ap.conf, 将名称和密码修改为自己想要的, 保存。\n修改 /usr/lib/systemd/system/create_ap.service, 在最下方加上一句:\n\n```shell\nExecStart=/usr/bin/create_ap -n wlan0 热点名 密码\n```\n\n保存退出, 执行:\n\n```shell\nsudo systemctl daemon-reload\nsudo systemctl enable create_ap.service\nsudo systemctl start create_ap.service\nreboot\n```\n\n开启启动就可以看到新创建的热点了!\n\n参考博客:\n[树莓派开热点并自动启动](https://blog.csdn.net/zanran8/article/details/80698347)\n","slug":"config_skill_experience/system_config/linux/create-ap","published":1,"updated":"2022-10-03T02:36:24.769Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejqe004z3vsba842drl4","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>我也是不知道怎么折腾才好了, 之前尝试着将centos装到树莓派上无果, 这不才下载了<a href=\"https://www.raspberrypi.org/downloads/raspbian/\">树莓派的官网</a>上的系统, 烧录到内存卡上, 这才算是能用上它。但是因为我更倾向于面向命令行, 图形界面无感(尤其是linux -_-!), 所以装了官网上的最小的版本, 在下载的时候我就已经做好了觉悟, 由于是最小的版本, 所以基本上要啥啥没有, 嗯, 以后有够折腾的了。</p>\n<p>那么既然要打算命令行, 那么肯定是要ssh登录的了, 所以这才想着让树莓派自己发射wifi信号, 然后自己开放ssh端口, 这样就省去路由器这一步了, 那么就开始吧。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"下载create-ap\"><a href=\"#下载create-ap\" class=\"headerlink\" title=\"下载create_ap\"></a>下载create_ap</h1><p><a href=\"https://github.com/oblique/create_ap\">create_ap</a>是github上的一个开源的shell项目, 它使用了hostapd, dnsmasq等开源项目来达到软路由的效果, 首先先下载下来:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone git@github.com:oblique/create_ap.git</span><br></pre></td></tr></table></figure>\n\n<p>然而第一步我就遇到了困难, 没有git…</p>\n<p>那就装一个呗。</p>\n<h2 id=\"安装git\"><a href=\"#安装git\" class=\"headerlink\" title=\"安装git\"></a>安装git</h2><p>这里有两个方式来安装git, 一种就是使用包管理系统来安装, 非常的方便快捷, 另外一种就是源码安装, 可以自定义安装的各种配置。</p>\n<h3 id=\"包管理系统安装\"><a href=\"#包管理系统安装\" class=\"headerlink\" title=\"包管理系统安装\"></a>包管理系统安装</h3><p>debian&#x2F;ubuntu:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install git</span><br></pre></td></tr></table></figure>\n\n<p>centos:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install git</span><br></pre></td></tr></table></figure>\n\n<p>验证一下是否安装成功:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git --version</span><br></pre></td></tr></table></figure>\n\n<p>如果有输出的话, 那么就代表安装成功了。</p>\n<h3 id=\"源码安装\"><a href=\"#源码安装\" class=\"headerlink\" title=\"源码安装\"></a>源码安装</h3><p>相对来说较复杂, 首先需要安装构建git所需要的软件包:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br><span class=\"line\">sudo apt-get install make libssl-dev libghc-zlib-dev libcurl4-gnutls-dev libexpat1-dev gettext unzip</span><br></pre></td></tr></table></figure>\n\n<p>然后到<a href=\"https://github.com/git/git/archive\">这里</a>来查看最新版的链接地址, 使用wget下载下来。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /home/users/git</span><br><span class=\"line\">wget https//github.com/git/git/archive/v2.18.0.tar.gz</span><br></pre></td></tr></table></figure>\n\n<p>下载好之后开始解压文件:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo tar v2.18.0.tar.gz</span><br><span class=\"line\">cd v2.18.0</span><br></pre></td></tr></table></figure>\n\n<p>之后就可以编译安装了:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo make prefix=/usr/local all</span><br><span class=\"line\">sudo make prefix=/usr/local install</span><br></pre></td></tr></table></figure>\n\n<p>如果你没有安装到默认目录, 那么还需要在<code>~/.bashrc</code>文件中将git的安装路径放入PATH中:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export PATH=/你的安装路径:$PATH</span><br><span class=\"line\">export PATH=/你的安装路径/libexec/git-core:$PATH</span><br></pre></td></tr></table></figure>\n\n<p>参考博客:<br><a href=\"https://linux265.com/news/3371.html\">deiban安装git</a></p>\n<blockquote>\n<p>ok, git 安装好了, 现在可以安安心心的下载咱们的create_ap了。</p>\n</blockquote>\n<h2 id=\"编译create-ap\"><a href=\"#编译create-ap\" class=\"headerlink\" title=\"编译create_ap\"></a>编译create_ap</h2><p>下载好之后就可以使用make来编译这个项目了:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd create_ap</span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\n\n<p>喔不, 又出现了一个问题: command dnsmasq not found!</p>\n<p>仔细一看, 原来是他用到了dnsmasq, 而我的系统里没有这个东西, 怎么办, 继续装呗…</p>\n<h3 id=\"安装dnsmasq\"><a href=\"#安装dnsmasq\" class=\"headerlink\" title=\"安装dnsmasq\"></a>安装dnsmasq</h3><p>到<a href=\"www.thekelleys.org.uk/dnsmasq\">官网</a>查看最新的版本, 将之下载下来, 解压, 安装:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://www.thekelleys.org/uk/dnsmasq/dnsmasq-2.75.tar.gz</span><br><span class=\"line\">tar -xf dnsmasq-2.75.tar.gz</span><br><span class=\"line\">cd dnsmasq-2.75</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n<p>安装完毕即可查看dnsmasq的版本:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnsmasq -v</span><br></pre></td></tr></table></figure>\n\n<p>参考博客:<br><a href=\"https://www.olinux.org.cn/linux/990.html\">dns安装与配置</a></p>\n<blockquote>\n<p>嗯, 让我们在继续运行 make install 看看</p>\n</blockquote>\n<p>现在没啥问题了, 那么让我们来尝试着使用看看:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo create_ap wlan0 热点名 密码</span><br></pre></td></tr></table></figure>\n\n<p>嗯, 果然一步一个坑, 还是报错了:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hostapd command not found</span><br></pre></td></tr></table></figure>\n\n<p>继续按呗:</p>\n<h3 id=\"安装-hostapd\"><a href=\"#安装-hostapd\" class=\"headerlink\" title=\"安装 hostapd\"></a>安装 hostapd</h3><p>下载, 安装:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone git://w1.fi/srv/git/hostap.git</span><br><span class=\"line\">cd hostap/hostapd</span><br></pre></td></tr></table></figure>\n\n<p>注意, 这里需要改一下配置:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp defconfig .config</span><br><span class=\"line\">vi .config</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 找到 CONFIG_DRIVER_NL80211=y, 将<span class=\"comment\">#号去掉</span></span></span><br></pre></td></tr></table></figure>\n\n<p>执行: make, 如果这里报错了, 那么先使用包管理系统安装:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install libnl-genl-3-200 libnl-genl-3-dev libnl-idiag-3-dev</span><br></pre></td></tr></table></figure>\n<p>参考博客:<br><a href=\"https://blog.csdn.net/magod/article/details/6736102\">hostapd linux documentation page</a></p>\n<h1 id=\"配置create-ap\"><a href=\"#配置create-ap\" class=\"headerlink\" title=\"配置create_ap\"></a>配置create_ap</h1><p>修改&#x2F;etc&#x2F;create_ap.conf, 将名称和密码修改为自己想要的, 保存。<br>修改 &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;create_ap.service, 在最下方加上一句:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ExecStart=/usr/bin/create_ap -n wlan0 热点名 密码</span><br></pre></td></tr></table></figure>\n\n<p>保存退出, 执行:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl daemon-reload</span><br><span class=\"line\">sudo systemctl enable create_ap.service</span><br><span class=\"line\">sudo systemctl start create_ap.service</span><br><span class=\"line\">reboot</span><br></pre></td></tr></table></figure>\n\n<p>开启启动就可以看到新创建的热点了!</p>\n<p>参考博客:<br><a href=\"https://blog.csdn.net/zanran8/article/details/80698347\">树莓派开热点并自动启动</a></p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>我也是不知道怎么折腾才好了, 之前尝试着将centos装到树莓派上无果, 这不才下载了<a href=\"https://www.raspberrypi.org/downloads/raspbian/\">树莓派的官网</a>上的系统, 烧录到内存卡上, 这才算是能用上它。但是因为我更倾向于面向命令行, 图形界面无感(尤其是linux -_-!), 所以装了官网上的最小的版本, 在下载的时候我就已经做好了觉悟, 由于是最小的版本, 所以基本上要啥啥没有, 嗯, 以后有够折腾的了。</p>\n<p>那么既然要打算命令行, 那么肯定是要ssh登录的了, 所以这才想着让树莓派自己发射wifi信号, 然后自己开放ssh端口, 这样就省去路由器这一步了, 那么就开始吧。</p>","more":"<h1 id=\"下载create-ap\"><a href=\"#下载create-ap\" class=\"headerlink\" title=\"下载create_ap\"></a>下载create_ap</h1><p><a href=\"https://github.com/oblique/create_ap\">create_ap</a>是github上的一个开源的shell项目, 它使用了hostapd, dnsmasq等开源项目来达到软路由的效果, 首先先下载下来:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone git@github.com:oblique/create_ap.git</span><br></pre></td></tr></table></figure>\n\n<p>然而第一步我就遇到了困难, 没有git…</p>\n<p>那就装一个呗。</p>\n<h2 id=\"安装git\"><a href=\"#安装git\" class=\"headerlink\" title=\"安装git\"></a>安装git</h2><p>这里有两个方式来安装git, 一种就是使用包管理系统来安装, 非常的方便快捷, 另外一种就是源码安装, 可以自定义安装的各种配置。</p>\n<h3 id=\"包管理系统安装\"><a href=\"#包管理系统安装\" class=\"headerlink\" title=\"包管理系统安装\"></a>包管理系统安装</h3><p>debian&#x2F;ubuntu:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install git</span><br></pre></td></tr></table></figure>\n\n<p>centos:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install git</span><br></pre></td></tr></table></figure>\n\n<p>验证一下是否安装成功:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git --version</span><br></pre></td></tr></table></figure>\n\n<p>如果有输出的话, 那么就代表安装成功了。</p>\n<h3 id=\"源码安装\"><a href=\"#源码安装\" class=\"headerlink\" title=\"源码安装\"></a>源码安装</h3><p>相对来说较复杂, 首先需要安装构建git所需要的软件包:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br><span class=\"line\">sudo apt-get install make libssl-dev libghc-zlib-dev libcurl4-gnutls-dev libexpat1-dev gettext unzip</span><br></pre></td></tr></table></figure>\n\n<p>然后到<a href=\"https://github.com/git/git/archive\">这里</a>来查看最新版的链接地址, 使用wget下载下来。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /home/users/git</span><br><span class=\"line\">wget https//github.com/git/git/archive/v2.18.0.tar.gz</span><br></pre></td></tr></table></figure>\n\n<p>下载好之后开始解压文件:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo tar v2.18.0.tar.gz</span><br><span class=\"line\">cd v2.18.0</span><br></pre></td></tr></table></figure>\n\n<p>之后就可以编译安装了:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo make prefix=/usr/local all</span><br><span class=\"line\">sudo make prefix=/usr/local install</span><br></pre></td></tr></table></figure>\n\n<p>如果你没有安装到默认目录, 那么还需要在<code>~/.bashrc</code>文件中将git的安装路径放入PATH中:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export PATH=/你的安装路径:$PATH</span><br><span class=\"line\">export PATH=/你的安装路径/libexec/git-core:$PATH</span><br></pre></td></tr></table></figure>\n\n<p>参考博客:<br><a href=\"https://linux265.com/news/3371.html\">deiban安装git</a></p>\n<blockquote>\n<p>ok, git 安装好了, 现在可以安安心心的下载咱们的create_ap了。</p>\n</blockquote>\n<h2 id=\"编译create-ap\"><a href=\"#编译create-ap\" class=\"headerlink\" title=\"编译create_ap\"></a>编译create_ap</h2><p>下载好之后就可以使用make来编译这个项目了:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd create_ap</span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\n\n<p>喔不, 又出现了一个问题: command dnsmasq not found!</p>\n<p>仔细一看, 原来是他用到了dnsmasq, 而我的系统里没有这个东西, 怎么办, 继续装呗…</p>\n<h3 id=\"安装dnsmasq\"><a href=\"#安装dnsmasq\" class=\"headerlink\" title=\"安装dnsmasq\"></a>安装dnsmasq</h3><p>到<a href=\"www.thekelleys.org.uk/dnsmasq\">官网</a>查看最新的版本, 将之下载下来, 解压, 安装:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://www.thekelleys.org/uk/dnsmasq/dnsmasq-2.75.tar.gz</span><br><span class=\"line\">tar -xf dnsmasq-2.75.tar.gz</span><br><span class=\"line\">cd dnsmasq-2.75</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n<p>安装完毕即可查看dnsmasq的版本:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnsmasq -v</span><br></pre></td></tr></table></figure>\n\n<p>参考博客:<br><a href=\"https://www.olinux.org.cn/linux/990.html\">dns安装与配置</a></p>\n<blockquote>\n<p>嗯, 让我们在继续运行 make install 看看</p>\n</blockquote>\n<p>现在没啥问题了, 那么让我们来尝试着使用看看:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo create_ap wlan0 热点名 密码</span><br></pre></td></tr></table></figure>\n\n<p>嗯, 果然一步一个坑, 还是报错了:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hostapd command not found</span><br></pre></td></tr></table></figure>\n\n<p>继续按呗:</p>\n<h3 id=\"安装-hostapd\"><a href=\"#安装-hostapd\" class=\"headerlink\" title=\"安装 hostapd\"></a>安装 hostapd</h3><p>下载, 安装:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone git://w1.fi/srv/git/hostap.git</span><br><span class=\"line\">cd hostap/hostapd</span><br></pre></td></tr></table></figure>\n\n<p>注意, 这里需要改一下配置:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp defconfig .config</span><br><span class=\"line\">vi .config</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 找到 CONFIG_DRIVER_NL80211=y, 将<span class=\"comment\">#号去掉</span></span></span><br></pre></td></tr></table></figure>\n\n<p>执行: make, 如果这里报错了, 那么先使用包管理系统安装:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install libnl-genl-3-200 libnl-genl-3-dev libnl-idiag-3-dev</span><br></pre></td></tr></table></figure>\n<p>参考博客:<br><a href=\"https://blog.csdn.net/magod/article/details/6736102\">hostapd linux documentation page</a></p>\n<h1 id=\"配置create-ap\"><a href=\"#配置create-ap\" class=\"headerlink\" title=\"配置create_ap\"></a>配置create_ap</h1><p>修改&#x2F;etc&#x2F;create_ap.conf, 将名称和密码修改为自己想要的, 保存。<br>修改 &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;create_ap.service, 在最下方加上一句:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ExecStart=/usr/bin/create_ap -n wlan0 热点名 密码</span><br></pre></td></tr></table></figure>\n\n<p>保存退出, 执行:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl daemon-reload</span><br><span class=\"line\">sudo systemctl enable create_ap.service</span><br><span class=\"line\">sudo systemctl start create_ap.service</span><br><span class=\"line\">reboot</span><br></pre></td></tr></table></figure>\n\n<p>开启启动就可以看到新创建的热点了!</p>\n<p>参考博客:<br><a href=\"https://blog.csdn.net/zanran8/article/details/80698347\">树莓派开热点并自动启动</a></p>"},{"title":"创建你自己的linux服务","date":"2019-09-26T07:11:07.000Z","_content":"\n# 目标\n\n使用 systemd 来创建类似于 windows 中的服务。\n\n# 步骤\n\n* 编写需要执行的脚本\n* 编写服务的脚本\n* 开启服务\n\n## 编写服务脚本\n\n```shell\nsudo vi /usr/lib/systemd/system/你的服务名字.service\n\n# 下面是脚本内容\n\n[Unit]\n# 服务介绍\nDescription=enable some service\nAfter=network.target\n# 声明可执行脚本\nConditionFileIsExecutable=/home/littleboy/tools/ngrok/startNgrok.sh\n\n[Service]\nType=simple\n# 如果执行失败则重新执行\nRestart=always\nRestartSec=5\n# 自动执行脚本\nExecStart=/home/littleboy/tools/ngrok/startNgrok.sh --background\n\n[Install]\nWantedBy=multi-user.target\n```\n\n## 开启服务\n\n```shell\nsudo systemctl daemon-reload\nsudo systemctl enable sunny.service\nsudo systemctl start sunny.service\n```\n\n# 拓展阅读\n\n[systemd 的github地址](https://github.com/systemd/systemd)\n","source":"_posts/config_skill_experience/system_config/linux/create-linux-service.md","raw":"---\ntitle: 创建你自己的linux服务\ndate: 2019-09-26 15:11:07\ncategories:\n- 配置技巧/经验\n- 系统配置\n- linux\ntags:\n- linux的使用\n---\n\n# 目标\n\n使用 systemd 来创建类似于 windows 中的服务。\n\n# 步骤\n\n* 编写需要执行的脚本\n* 编写服务的脚本\n* 开启服务\n\n## 编写服务脚本\n\n```shell\nsudo vi /usr/lib/systemd/system/你的服务名字.service\n\n# 下面是脚本内容\n\n[Unit]\n# 服务介绍\nDescription=enable some service\nAfter=network.target\n# 声明可执行脚本\nConditionFileIsExecutable=/home/littleboy/tools/ngrok/startNgrok.sh\n\n[Service]\nType=simple\n# 如果执行失败则重新执行\nRestart=always\nRestartSec=5\n# 自动执行脚本\nExecStart=/home/littleboy/tools/ngrok/startNgrok.sh --background\n\n[Install]\nWantedBy=multi-user.target\n```\n\n## 开启服务\n\n```shell\nsudo systemctl daemon-reload\nsudo systemctl enable sunny.service\nsudo systemctl start sunny.service\n```\n\n# 拓展阅读\n\n[systemd 的github地址](https://github.com/systemd/systemd)\n","slug":"config_skill_experience/system_config/linux/create-linux-service","published":1,"updated":"2022-10-03T02:36:34.139Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejqi00513vsb7mi51h9m","content":"<h1 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h1><p>使用 systemd 来创建类似于 windows 中的服务。</p>\n<h1 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h1><ul>\n<li>编写需要执行的脚本</li>\n<li>编写服务的脚本</li>\n<li>开启服务</li>\n</ul>\n<h2 id=\"编写服务脚本\"><a href=\"#编写服务脚本\" class=\"headerlink\" title=\"编写服务脚本\"></a>编写服务脚本</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vi /usr/lib/systemd/system/你的服务名字.service</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 下面是脚本内容</span></span><br><span class=\"line\"></span><br><span class=\"line\">[Unit]</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 服务介绍</span></span><br><span class=\"line\">Description=enable some service</span><br><span class=\"line\">After=network.target</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 声明可执行脚本</span></span><br><span class=\"line\">ConditionFileIsExecutable=/home/littleboy/tools/ngrok/startNgrok.sh</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=simple</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 如果执行失败则重新执行</span></span><br><span class=\"line\">Restart=always</span><br><span class=\"line\">RestartSec=5</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 自动执行脚本</span></span><br><span class=\"line\">ExecStart=/home/littleboy/tools/ngrok/startNgrok.sh --background</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"开启服务\"><a href=\"#开启服务\" class=\"headerlink\" title=\"开启服务\"></a>开启服务</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl daemon-reload</span><br><span class=\"line\">sudo systemctl enable sunny.service</span><br><span class=\"line\">sudo systemctl start sunny.service</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"拓展阅读\"><a href=\"#拓展阅读\" class=\"headerlink\" title=\"拓展阅读\"></a>拓展阅读</h1><p><a href=\"https://github.com/systemd/systemd\">systemd 的github地址</a></p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"","more":"<h1 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h1><p>使用 systemd 来创建类似于 windows 中的服务。</p>\n<h1 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h1><ul>\n<li>编写需要执行的脚本</li>\n<li>编写服务的脚本</li>\n<li>开启服务</li>\n</ul>\n<h2 id=\"编写服务脚本\"><a href=\"#编写服务脚本\" class=\"headerlink\" title=\"编写服务脚本\"></a>编写服务脚本</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vi /usr/lib/systemd/system/你的服务名字.service</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 下面是脚本内容</span></span><br><span class=\"line\"></span><br><span class=\"line\">[Unit]</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 服务介绍</span></span><br><span class=\"line\">Description=enable some service</span><br><span class=\"line\">After=network.target</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 声明可执行脚本</span></span><br><span class=\"line\">ConditionFileIsExecutable=/home/littleboy/tools/ngrok/startNgrok.sh</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=simple</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 如果执行失败则重新执行</span></span><br><span class=\"line\">Restart=always</span><br><span class=\"line\">RestartSec=5</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 自动执行脚本</span></span><br><span class=\"line\">ExecStart=/home/littleboy/tools/ngrok/startNgrok.sh --background</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"开启服务\"><a href=\"#开启服务\" class=\"headerlink\" title=\"开启服务\"></a>开启服务</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl daemon-reload</span><br><span class=\"line\">sudo systemctl enable sunny.service</span><br><span class=\"line\">sudo systemctl start sunny.service</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"拓展阅读\"><a href=\"#拓展阅读\" class=\"headerlink\" title=\"拓展阅读\"></a>拓展阅读</h1><p><a href=\"https://github.com/systemd/systemd\">systemd 的github地址</a></p>\n"},{"title":"在服务器上部署seafile","date":"2019-09-24T05:56:56.000Z","_content":"\n# 目标\n\n部署 seafile 服务器\n\n# 步骤\n\n## 下载服务器端\n\n地址[https://www.seafile.com/download/](https://www.seafile.com/download/), 注意, 这里需要看清楚自己的系统版本。\n\n## 解压\n\n```shell\ntar -zxf seafile-server_*\n```\n\n## 安装之前的准备工作\n\n```shell\napt-get update\napt-get install python2.7 python-setuptools python-imaging python-mysqldb\n```\n\n<!--more-->\n\n## 安装\n\n```shell\ncd seafile-server-*\n./setup-seafile-mysql.sh  #运行安装脚本并回答预设问题\n```\n\n## 启动\n\n* 启动 seafile 服务器\n\n```shell\n./seafile.sh start # 启动 Seafile 服务\n```\n\n* 启动 seahub\n\n```shell\n./seahub.sh start <port>  # 启动 Seahub 网站 （默认运行在8000端口上）\n```\n\n\n* 停止服务\n\n```shell\n./seahub.sh stop # 停止 Seafile 进程\n./seafile.sh stop # 停止 Seahub\n```\n\n* 重启服务\n\n```shell\n./seafile.sh restart # 停止当前的 Seafile 进程，然后重启 Seafile\n./seahub.sh restart  # 停止当前的 Seahub 进程，并在 8000 端口重新启动 Seahub\n```\n\n## 遇到的问题\n\n* mysql不能通过 127.0.0.1 进行连接\n\n通过 `netstat -anpt | grep 3306` 命令查看端口占用情况, 可以通过修改 `/etc/mysql/mariadb.conf.d/50-server.cnf` 配置文件来增加绑定地址。\n\n参考博客: [mariadb无法远程访问的解决思路](https://blog.csdn.net/wxmvp009/article/details/80190753)\n\n* seafile 启动失败\n\n通过 `./seahub.sh start-fastcgi` 命令来达到类似debug的启动效果, 有什么错误可以通过控制台查看\n\n参考博客: [Seafile 之 Seahub 启动失败案例](https://www.jianshu.com/p/2e222a33a916)\n","source":"_posts/config_skill_experience/system_config/linux/deploy-seafile.md","raw":"---\ntitle: 在服务器上部署seafile\ndate: 2019-09-24 13:56:56\ncategories:\n- 配置技巧/经验\n- 系统配置\n- linux\ntags:\n- linux的使用\n---\n\n# 目标\n\n部署 seafile 服务器\n\n# 步骤\n\n## 下载服务器端\n\n地址[https://www.seafile.com/download/](https://www.seafile.com/download/), 注意, 这里需要看清楚自己的系统版本。\n\n## 解压\n\n```shell\ntar -zxf seafile-server_*\n```\n\n## 安装之前的准备工作\n\n```shell\napt-get update\napt-get install python2.7 python-setuptools python-imaging python-mysqldb\n```\n\n<!--more-->\n\n## 安装\n\n```shell\ncd seafile-server-*\n./setup-seafile-mysql.sh  #运行安装脚本并回答预设问题\n```\n\n## 启动\n\n* 启动 seafile 服务器\n\n```shell\n./seafile.sh start # 启动 Seafile 服务\n```\n\n* 启动 seahub\n\n```shell\n./seahub.sh start <port>  # 启动 Seahub 网站 （默认运行在8000端口上）\n```\n\n\n* 停止服务\n\n```shell\n./seahub.sh stop # 停止 Seafile 进程\n./seafile.sh stop # 停止 Seahub\n```\n\n* 重启服务\n\n```shell\n./seafile.sh restart # 停止当前的 Seafile 进程，然后重启 Seafile\n./seahub.sh restart  # 停止当前的 Seahub 进程，并在 8000 端口重新启动 Seahub\n```\n\n## 遇到的问题\n\n* mysql不能通过 127.0.0.1 进行连接\n\n通过 `netstat -anpt | grep 3306` 命令查看端口占用情况, 可以通过修改 `/etc/mysql/mariadb.conf.d/50-server.cnf` 配置文件来增加绑定地址。\n\n参考博客: [mariadb无法远程访问的解决思路](https://blog.csdn.net/wxmvp009/article/details/80190753)\n\n* seafile 启动失败\n\n通过 `./seahub.sh start-fastcgi` 命令来达到类似debug的启动效果, 有什么错误可以通过控制台查看\n\n参考博客: [Seafile 之 Seahub 启动失败案例](https://www.jianshu.com/p/2e222a33a916)\n","slug":"config_skill_experience/system_config/linux/deploy-seafile","published":1,"updated":"2022-10-03T02:36:43.244Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejqn00553vsb7hcr5zeg","content":"<h1 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h1><p>部署 seafile 服务器</p>\n<h1 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h1><h2 id=\"下载服务器端\"><a href=\"#下载服务器端\" class=\"headerlink\" title=\"下载服务器端\"></a>下载服务器端</h2><p>地址<a href=\"https://www.seafile.com/download/\">https://www.seafile.com/download/</a>, 注意, 这里需要看清楚自己的系统版本。</p>\n<h2 id=\"解压\"><a href=\"#解压\" class=\"headerlink\" title=\"解压\"></a>解压</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxf seafile-server_*</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装之前的准备工作\"><a href=\"#安装之前的准备工作\" class=\"headerlink\" title=\"安装之前的准备工作\"></a>安装之前的准备工作</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get update</span><br><span class=\"line\">apt-get install python2.7 python-setuptools python-imaging python-mysqldb</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd seafile-server-*</span><br><span class=\"line\">./setup-seafile-mysql.sh  #运行安装脚本并回答预设问题</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h2><ul>\n<li>启动 seafile 服务器</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./seafile.sh start # 启动 Seafile 服务</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>启动 seahub</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./seahub.sh start &lt;port&gt;  # 启动 Seahub 网站 （默认运行在8000端口上）</span><br></pre></td></tr></table></figure>\n\n\n<ul>\n<li>停止服务</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./seahub.sh stop # 停止 Seafile 进程</span><br><span class=\"line\">./seafile.sh stop # 停止 Seahub</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>重启服务</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./seafile.sh restart # 停止当前的 Seafile 进程，然后重启 Seafile</span><br><span class=\"line\">./seahub.sh restart  # 停止当前的 Seahub 进程，并在 8000 端口重新启动 Seahub</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h2><ul>\n<li>mysql不能通过 127.0.0.1 进行连接</li>\n</ul>\n<p>通过 <code>netstat -anpt | grep 3306</code> 命令查看端口占用情况, 可以通过修改 <code>/etc/mysql/mariadb.conf.d/50-server.cnf</code> 配置文件来增加绑定地址。</p>\n<p>参考博客: <a href=\"https://blog.csdn.net/wxmvp009/article/details/80190753\">mariadb无法远程访问的解决思路</a></p>\n<ul>\n<li>seafile 启动失败</li>\n</ul>\n<p>通过 <code>./seahub.sh start-fastcgi</code> 命令来达到类似debug的启动效果, 有什么错误可以通过控制台查看</p>\n<p>参考博客: <a href=\"https://www.jianshu.com/p/2e222a33a916\">Seafile 之 Seahub 启动失败案例</a></p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h1><p>部署 seafile 服务器</p>\n<h1 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h1><h2 id=\"下载服务器端\"><a href=\"#下载服务器端\" class=\"headerlink\" title=\"下载服务器端\"></a>下载服务器端</h2><p>地址<a href=\"https://www.seafile.com/download/\">https://www.seafile.com/download/</a>, 注意, 这里需要看清楚自己的系统版本。</p>\n<h2 id=\"解压\"><a href=\"#解压\" class=\"headerlink\" title=\"解压\"></a>解压</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxf seafile-server_*</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装之前的准备工作\"><a href=\"#安装之前的准备工作\" class=\"headerlink\" title=\"安装之前的准备工作\"></a>安装之前的准备工作</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get update</span><br><span class=\"line\">apt-get install python2.7 python-setuptools python-imaging python-mysqldb</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd seafile-server-*</span><br><span class=\"line\">./setup-seafile-mysql.sh  #运行安装脚本并回答预设问题</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h2><ul>\n<li>启动 seafile 服务器</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./seafile.sh start # 启动 Seafile 服务</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>启动 seahub</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./seahub.sh start &lt;port&gt;  # 启动 Seahub 网站 （默认运行在8000端口上）</span><br></pre></td></tr></table></figure>\n\n\n<ul>\n<li>停止服务</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./seahub.sh stop # 停止 Seafile 进程</span><br><span class=\"line\">./seafile.sh stop # 停止 Seahub</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>重启服务</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./seafile.sh restart # 停止当前的 Seafile 进程，然后重启 Seafile</span><br><span class=\"line\">./seahub.sh restart  # 停止当前的 Seahub 进程，并在 8000 端口重新启动 Seahub</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h2><ul>\n<li>mysql不能通过 127.0.0.1 进行连接</li>\n</ul>\n<p>通过 <code>netstat -anpt | grep 3306</code> 命令查看端口占用情况, 可以通过修改 <code>/etc/mysql/mariadb.conf.d/50-server.cnf</code> 配置文件来增加绑定地址。</p>\n<p>参考博客: <a href=\"https://blog.csdn.net/wxmvp009/article/details/80190753\">mariadb无法远程访问的解决思路</a></p>\n<ul>\n<li>seafile 启动失败</li>\n</ul>\n<p>通过 <code>./seahub.sh start-fastcgi</code> 命令来达到类似debug的启动效果, 有什么错误可以通过控制台查看</p>\n<p>参考博客: <a href=\"https://www.jianshu.com/p/2e222a33a916\">Seafile 之 Seahub 启动失败案例</a></p>"},{"title":"记一次添加shell命令的经历","date":"2019-06-01T09:56:58.000Z","_content":"\n# 前言\n\n日常的启动了我的博客, 打算开始边记笔记边看书, 然后在经历了启动博客的一系列操作之后, 觉得倍感麻烦, 所以就有了现在这篇博客, 其中涉及到了一些shell相关的知识。\n<!--more-->\n\n# 原因\n\n我的启动博客的方式是这样的:\n\n```shell\n# bashrc:\nHEXO=/home/user/我的博客路径/node_modules/hexo/node_modules/.bin\nexport PATH=$HEXO:$PATH\n\nalias hexo='sh $HEXO/hexo'\nalias startMyBlog='cd $MYBLOG; hexo clean; hexo g; hexo s &'\nalias deployMyBlog='cd $MYBLOG; hexo clean; hexo g; hexo d'\nalias pushMyBlog='cd $MYBLOG; git add --all; git commit -m\"更新\"; git push'\n```\n\n这里面有我的博客路径地址, 还创建了一些命令, 比如开启博客, 上传博客等, 然后我每次打开博客之后当前的工作目录总会变成我的博客的目录, 非常难受, 所以想解决这个问题。\n\n# 解决\n\n想到了linux肯定有可以返回上一个工作目录的命令, 果然, 还真有, 然后我的命令就都变成了这样:\n\n```shell\n# bashrc:\nHEXO=/home/user/我的博客路径/node_modules/hexo/node_modules/.bin\nexport PATH=$HEXO:$PATH\n\nalias hexo='sh $HEXO/hexo'\nalias startMyBlog='cd $MYBLOG; hexo clean; hexo g; hexo s &; cd -'\nalias deployMyBlog='cd $MYBLOG; hexo clean; hexo g; hexo d; cd -'\nalias pushMyBlog='cd $MYBLOG; git add --all; git commit -m\"更新\"; git push; cd -'\n```\n\n`cd -`(或者`cd $OLDPWD`) 就可以返回上一个工作目录, 然后我发现了一个问题, 我不能启动我的博客了! 原来`&`后面是不可以再加命令了, 这可怎么办, 随即我尝试了各种办法, 比如`kill -2`(模拟ctrl-c); 把&去掉, 加上`kill -SIGSTOP $pid`(模拟ctrl-z), 然后在bg一下; 不使用`;`, 改为`&&` , 统统不好用, 可以说非常难受了, 后面我灵机一动, linux不是有service这个东东嘛, 直接将启动博客注册为一个服务算了, 然后又学习了一下该怎么去注册linux的服务, [这篇博客](https://www.cnblogs.com/kevin443/p/6765608.html)通俗易懂, 注意这篇博客的[service]写错了, 给写成了[serive]...还有阮一峰老师的[这篇](http://www.ruanyifeng.com/blog/2016/03/systemd-tutorial-part-two.html)也很不错。\n\n但是思路还是错了, 我的博客需要在博客的路径下启动才可以, 而我尝试了半天也不行, 故放弃, 最后我一拍脑瓜, 直接写一个可执行文件啊笨! 最后的解决办法是, 在博客的根目录下创建一个shell可执行文件, 它长这样:\n\nstartBlog.sh:\n```shell\n#!/bin/bash\nMYBLOG=\"/home/user/博客目录\"\n\nHEXO=\"$MYBLOG/node_modules/hexo/node_modules/.bin\"\n\nhexo=\"sh $HEXO/hexo\"\n\ncd $MYBLOG\n$hexo clean\nwait\n$hexo g\nwait\n$hexo s &\ncd -\n```\n\ncreateBlog.sh:\n```shell\n#!/bin/bash\n\nMYBLOG=\"/home/user/博客目录\"\nHEXO=\"$MYBLOG/node_modules/hexo/node_modules/.bin\"\nhexo=\"sh $HEXO/hexo\"\n\n$hexo new \"$1\"\nwait\n# 这里是将创建好的博客文件放到当前文件夹中\nmv \"$MYBLOG/source/_posts/$1.md\" .\n```\n\n然后我的`bashrc`变成了这样:\n\n```shell\nHEXO=/home/user/博客目录/node_modules/hexo/node_modules/.bin\nexport PATH=$HEXO:$PATH\nalias hexo='sh $HEXO/hexo'\nalias startMyBlog='cd $MYBLOG; hexo clean; hexo g; hexo s &'\nalias startMyBlogB='sh $MYBLOG/startMyBlog.sh'\nalias createBlog='sh $MYBLOG/createBlog.sh'\nalias deployMyBlog='cd $MYBLOG; hexo clean; hexo g; hexo d; cd -'\nalias pushMyBlog='cd $MYBLOG; git add --all; git commit -m\"更新\"; git push; cd -'\n```\n\n# 总结\n\n果然还是太菜了。\n","source":"_posts/config_skill_experience/system_config/linux/hexo-create-blog.md","raw":"---\ntitle: 记一次添加shell命令的经历\ndate: 2019-06-01 17:56:58\ncategories:\n- 配置技巧/经验\n- 系统配置\n- linux\ntags:\n- hexo\n- linux\n---\n\n# 前言\n\n日常的启动了我的博客, 打算开始边记笔记边看书, 然后在经历了启动博客的一系列操作之后, 觉得倍感麻烦, 所以就有了现在这篇博客, 其中涉及到了一些shell相关的知识。\n<!--more-->\n\n# 原因\n\n我的启动博客的方式是这样的:\n\n```shell\n# bashrc:\nHEXO=/home/user/我的博客路径/node_modules/hexo/node_modules/.bin\nexport PATH=$HEXO:$PATH\n\nalias hexo='sh $HEXO/hexo'\nalias startMyBlog='cd $MYBLOG; hexo clean; hexo g; hexo s &'\nalias deployMyBlog='cd $MYBLOG; hexo clean; hexo g; hexo d'\nalias pushMyBlog='cd $MYBLOG; git add --all; git commit -m\"更新\"; git push'\n```\n\n这里面有我的博客路径地址, 还创建了一些命令, 比如开启博客, 上传博客等, 然后我每次打开博客之后当前的工作目录总会变成我的博客的目录, 非常难受, 所以想解决这个问题。\n\n# 解决\n\n想到了linux肯定有可以返回上一个工作目录的命令, 果然, 还真有, 然后我的命令就都变成了这样:\n\n```shell\n# bashrc:\nHEXO=/home/user/我的博客路径/node_modules/hexo/node_modules/.bin\nexport PATH=$HEXO:$PATH\n\nalias hexo='sh $HEXO/hexo'\nalias startMyBlog='cd $MYBLOG; hexo clean; hexo g; hexo s &; cd -'\nalias deployMyBlog='cd $MYBLOG; hexo clean; hexo g; hexo d; cd -'\nalias pushMyBlog='cd $MYBLOG; git add --all; git commit -m\"更新\"; git push; cd -'\n```\n\n`cd -`(或者`cd $OLDPWD`) 就可以返回上一个工作目录, 然后我发现了一个问题, 我不能启动我的博客了! 原来`&`后面是不可以再加命令了, 这可怎么办, 随即我尝试了各种办法, 比如`kill -2`(模拟ctrl-c); 把&去掉, 加上`kill -SIGSTOP $pid`(模拟ctrl-z), 然后在bg一下; 不使用`;`, 改为`&&` , 统统不好用, 可以说非常难受了, 后面我灵机一动, linux不是有service这个东东嘛, 直接将启动博客注册为一个服务算了, 然后又学习了一下该怎么去注册linux的服务, [这篇博客](https://www.cnblogs.com/kevin443/p/6765608.html)通俗易懂, 注意这篇博客的[service]写错了, 给写成了[serive]...还有阮一峰老师的[这篇](http://www.ruanyifeng.com/blog/2016/03/systemd-tutorial-part-two.html)也很不错。\n\n但是思路还是错了, 我的博客需要在博客的路径下启动才可以, 而我尝试了半天也不行, 故放弃, 最后我一拍脑瓜, 直接写一个可执行文件啊笨! 最后的解决办法是, 在博客的根目录下创建一个shell可执行文件, 它长这样:\n\nstartBlog.sh:\n```shell\n#!/bin/bash\nMYBLOG=\"/home/user/博客目录\"\n\nHEXO=\"$MYBLOG/node_modules/hexo/node_modules/.bin\"\n\nhexo=\"sh $HEXO/hexo\"\n\ncd $MYBLOG\n$hexo clean\nwait\n$hexo g\nwait\n$hexo s &\ncd -\n```\n\ncreateBlog.sh:\n```shell\n#!/bin/bash\n\nMYBLOG=\"/home/user/博客目录\"\nHEXO=\"$MYBLOG/node_modules/hexo/node_modules/.bin\"\nhexo=\"sh $HEXO/hexo\"\n\n$hexo new \"$1\"\nwait\n# 这里是将创建好的博客文件放到当前文件夹中\nmv \"$MYBLOG/source/_posts/$1.md\" .\n```\n\n然后我的`bashrc`变成了这样:\n\n```shell\nHEXO=/home/user/博客目录/node_modules/hexo/node_modules/.bin\nexport PATH=$HEXO:$PATH\nalias hexo='sh $HEXO/hexo'\nalias startMyBlog='cd $MYBLOG; hexo clean; hexo g; hexo s &'\nalias startMyBlogB='sh $MYBLOG/startMyBlog.sh'\nalias createBlog='sh $MYBLOG/createBlog.sh'\nalias deployMyBlog='cd $MYBLOG; hexo clean; hexo g; hexo d; cd -'\nalias pushMyBlog='cd $MYBLOG; git add --all; git commit -m\"更新\"; git push; cd -'\n```\n\n# 总结\n\n果然还是太菜了。\n","slug":"config_skill_experience/system_config/linux/hexo-create-blog","published":1,"updated":"2022-10-07T12:43:23.145Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejqv00583vsb04ea6rw8","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>日常的启动了我的博客, 打算开始边记笔记边看书, 然后在经历了启动博客的一系列操作之后, 觉得倍感麻烦, 所以就有了现在这篇博客, 其中涉及到了一些shell相关的知识。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h1><p>我的启动博客的方式是这样的:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> bashrc:</span></span><br><span class=\"line\">HEXO=/home/user/我的博客路径/node_modules/hexo/node_modules/.bin</span><br><span class=\"line\">export PATH=$HEXO:$PATH</span><br><span class=\"line\"></span><br><span class=\"line\">alias hexo=&#x27;sh $HEXO/hexo&#x27;</span><br><span class=\"line\">alias startMyBlog=&#x27;cd $MYBLOG; hexo clean; hexo g; hexo s &amp;&#x27;</span><br><span class=\"line\">alias deployMyBlog=&#x27;cd $MYBLOG; hexo clean; hexo g; hexo d&#x27;</span><br><span class=\"line\">alias pushMyBlog=&#x27;cd $MYBLOG; git add --all; git commit -m&quot;更新&quot;; git push&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>这里面有我的博客路径地址, 还创建了一些命令, 比如开启博客, 上传博客等, 然后我每次打开博客之后当前的工作目录总会变成我的博客的目录, 非常难受, 所以想解决这个问题。</p>\n<h1 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h1><p>想到了linux肯定有可以返回上一个工作目录的命令, 果然, 还真有, 然后我的命令就都变成了这样:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> bashrc:</span></span><br><span class=\"line\">HEXO=/home/user/我的博客路径/node_modules/hexo/node_modules/.bin</span><br><span class=\"line\">export PATH=$HEXO:$PATH</span><br><span class=\"line\"></span><br><span class=\"line\">alias hexo=&#x27;sh $HEXO/hexo&#x27;</span><br><span class=\"line\">alias startMyBlog=&#x27;cd $MYBLOG; hexo clean; hexo g; hexo s &amp;; cd -&#x27;</span><br><span class=\"line\">alias deployMyBlog=&#x27;cd $MYBLOG; hexo clean; hexo g; hexo d; cd -&#x27;</span><br><span class=\"line\">alias pushMyBlog=&#x27;cd $MYBLOG; git add --all; git commit -m&quot;更新&quot;; git push; cd -&#x27;</span><br></pre></td></tr></table></figure>\n\n<p><code>cd -</code>(或者<code>cd $OLDPWD</code>) 就可以返回上一个工作目录, 然后我发现了一个问题, 我不能启动我的博客了! 原来<code>&amp;</code>后面是不可以再加命令了, 这可怎么办, 随即我尝试了各种办法, 比如<code>kill -2</code>(模拟ctrl-c); 把&amp;去掉, 加上<code>kill -SIGSTOP $pid</code>(模拟ctrl-z), 然后在bg一下; 不使用<code>;</code>, 改为<code>&amp;&amp;</code> , 统统不好用, 可以说非常难受了, 后面我灵机一动, linux不是有service这个东东嘛, 直接将启动博客注册为一个服务算了, 然后又学习了一下该怎么去注册linux的服务, <a href=\"https://www.cnblogs.com/kevin443/p/6765608.html\">这篇博客</a>通俗易懂, 注意这篇博客的[service]写错了, 给写成了[serive]…还有阮一峰老师的<a href=\"http://www.ruanyifeng.com/blog/2016/03/systemd-tutorial-part-two.html\">这篇</a>也很不错。</p>\n<p>但是思路还是错了, 我的博客需要在博客的路径下启动才可以, 而我尝试了半天也不行, 故放弃, 最后我一拍脑瓜, 直接写一个可执行文件啊笨! 最后的解决办法是, 在博客的根目录下创建一个shell可执行文件, 它长这样:</p>\n<p>startBlog.sh:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\">MYBLOG=&quot;/home/user/博客目录&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">HEXO=&quot;$MYBLOG/node_modules/hexo/node_modules/.bin&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">hexo=&quot;sh $HEXO/hexo&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">cd $MYBLOG</span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">hexo clean</span></span><br><span class=\"line\">wait</span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">hexo g</span></span><br><span class=\"line\">wait</span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">hexo s &amp;</span></span><br><span class=\"line\">cd -</span><br></pre></td></tr></table></figure>\n\n<p>createBlog.sh:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">MYBLOG=&quot;/home/user/博客目录&quot;</span><br><span class=\"line\">HEXO=&quot;$MYBLOG/node_modules/hexo/node_modules/.bin&quot;</span><br><span class=\"line\">hexo=&quot;sh $HEXO/hexo&quot;</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">hexo new <span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span></span></span><br><span class=\"line\">wait</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 这里是将创建好的博客文件放到当前文件夹中</span></span><br><span class=\"line\">mv &quot;$MYBLOG/source/_posts/$1.md&quot; .</span><br></pre></td></tr></table></figure>\n\n<p>然后我的<code>bashrc</code>变成了这样:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HEXO=/home/user/博客目录/node_modules/hexo/node_modules/.bin</span><br><span class=\"line\">export PATH=$HEXO:$PATH</span><br><span class=\"line\">alias hexo=&#x27;sh $HEXO/hexo&#x27;</span><br><span class=\"line\">alias startMyBlog=&#x27;cd $MYBLOG; hexo clean; hexo g; hexo s &amp;&#x27;</span><br><span class=\"line\">alias startMyBlogB=&#x27;sh $MYBLOG/startMyBlog.sh&#x27;</span><br><span class=\"line\">alias createBlog=&#x27;sh $MYBLOG/createBlog.sh&#x27;</span><br><span class=\"line\">alias deployMyBlog=&#x27;cd $MYBLOG; hexo clean; hexo g; hexo d; cd -&#x27;</span><br><span class=\"line\">alias pushMyBlog=&#x27;cd $MYBLOG; git add --all; git commit -m&quot;更新&quot;; git push; cd -&#x27;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>果然还是太菜了。</p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>日常的启动了我的博客, 打算开始边记笔记边看书, 然后在经历了启动博客的一系列操作之后, 觉得倍感麻烦, 所以就有了现在这篇博客, 其中涉及到了一些shell相关的知识。</p>","more":"<h1 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h1><p>我的启动博客的方式是这样的:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> bashrc:</span></span><br><span class=\"line\">HEXO=/home/user/我的博客路径/node_modules/hexo/node_modules/.bin</span><br><span class=\"line\">export PATH=$HEXO:$PATH</span><br><span class=\"line\"></span><br><span class=\"line\">alias hexo=&#x27;sh $HEXO/hexo&#x27;</span><br><span class=\"line\">alias startMyBlog=&#x27;cd $MYBLOG; hexo clean; hexo g; hexo s &amp;&#x27;</span><br><span class=\"line\">alias deployMyBlog=&#x27;cd $MYBLOG; hexo clean; hexo g; hexo d&#x27;</span><br><span class=\"line\">alias pushMyBlog=&#x27;cd $MYBLOG; git add --all; git commit -m&quot;更新&quot;; git push&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>这里面有我的博客路径地址, 还创建了一些命令, 比如开启博客, 上传博客等, 然后我每次打开博客之后当前的工作目录总会变成我的博客的目录, 非常难受, 所以想解决这个问题。</p>\n<h1 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h1><p>想到了linux肯定有可以返回上一个工作目录的命令, 果然, 还真有, 然后我的命令就都变成了这样:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> bashrc:</span></span><br><span class=\"line\">HEXO=/home/user/我的博客路径/node_modules/hexo/node_modules/.bin</span><br><span class=\"line\">export PATH=$HEXO:$PATH</span><br><span class=\"line\"></span><br><span class=\"line\">alias hexo=&#x27;sh $HEXO/hexo&#x27;</span><br><span class=\"line\">alias startMyBlog=&#x27;cd $MYBLOG; hexo clean; hexo g; hexo s &amp;; cd -&#x27;</span><br><span class=\"line\">alias deployMyBlog=&#x27;cd $MYBLOG; hexo clean; hexo g; hexo d; cd -&#x27;</span><br><span class=\"line\">alias pushMyBlog=&#x27;cd $MYBLOG; git add --all; git commit -m&quot;更新&quot;; git push; cd -&#x27;</span><br></pre></td></tr></table></figure>\n\n<p><code>cd -</code>(或者<code>cd $OLDPWD</code>) 就可以返回上一个工作目录, 然后我发现了一个问题, 我不能启动我的博客了! 原来<code>&amp;</code>后面是不可以再加命令了, 这可怎么办, 随即我尝试了各种办法, 比如<code>kill -2</code>(模拟ctrl-c); 把&amp;去掉, 加上<code>kill -SIGSTOP $pid</code>(模拟ctrl-z), 然后在bg一下; 不使用<code>;</code>, 改为<code>&amp;&amp;</code> , 统统不好用, 可以说非常难受了, 后面我灵机一动, linux不是有service这个东东嘛, 直接将启动博客注册为一个服务算了, 然后又学习了一下该怎么去注册linux的服务, <a href=\"https://www.cnblogs.com/kevin443/p/6765608.html\">这篇博客</a>通俗易懂, 注意这篇博客的[service]写错了, 给写成了[serive]…还有阮一峰老师的<a href=\"http://www.ruanyifeng.com/blog/2016/03/systemd-tutorial-part-two.html\">这篇</a>也很不错。</p>\n<p>但是思路还是错了, 我的博客需要在博客的路径下启动才可以, 而我尝试了半天也不行, 故放弃, 最后我一拍脑瓜, 直接写一个可执行文件啊笨! 最后的解决办法是, 在博客的根目录下创建一个shell可执行文件, 它长这样:</p>\n<p>startBlog.sh:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\">MYBLOG=&quot;/home/user/博客目录&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">HEXO=&quot;$MYBLOG/node_modules/hexo/node_modules/.bin&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">hexo=&quot;sh $HEXO/hexo&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">cd $MYBLOG</span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">hexo clean</span></span><br><span class=\"line\">wait</span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">hexo g</span></span><br><span class=\"line\">wait</span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">hexo s &amp;</span></span><br><span class=\"line\">cd -</span><br></pre></td></tr></table></figure>\n\n<p>createBlog.sh:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">MYBLOG=&quot;/home/user/博客目录&quot;</span><br><span class=\"line\">HEXO=&quot;$MYBLOG/node_modules/hexo/node_modules/.bin&quot;</span><br><span class=\"line\">hexo=&quot;sh $HEXO/hexo&quot;</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">hexo new <span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span></span></span><br><span class=\"line\">wait</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 这里是将创建好的博客文件放到当前文件夹中</span></span><br><span class=\"line\">mv &quot;$MYBLOG/source/_posts/$1.md&quot; .</span><br></pre></td></tr></table></figure>\n\n<p>然后我的<code>bashrc</code>变成了这样:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HEXO=/home/user/博客目录/node_modules/hexo/node_modules/.bin</span><br><span class=\"line\">export PATH=$HEXO:$PATH</span><br><span class=\"line\">alias hexo=&#x27;sh $HEXO/hexo&#x27;</span><br><span class=\"line\">alias startMyBlog=&#x27;cd $MYBLOG; hexo clean; hexo g; hexo s &amp;&#x27;</span><br><span class=\"line\">alias startMyBlogB=&#x27;sh $MYBLOG/startMyBlog.sh&#x27;</span><br><span class=\"line\">alias createBlog=&#x27;sh $MYBLOG/createBlog.sh&#x27;</span><br><span class=\"line\">alias deployMyBlog=&#x27;cd $MYBLOG; hexo clean; hexo g; hexo d; cd -&#x27;</span><br><span class=\"line\">alias pushMyBlog=&#x27;cd $MYBLOG; git add --all; git commit -m&quot;更新&quot;; git push; cd -&#x27;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>果然还是太菜了。</p>"},{"title":"在树莓派上安装 archlinux","date":"2020-03-16T17:51:35.000Z","-categories":["配置技巧/经验","系统配置","linux"],"_content":"\n# 步骤\n\n首先使用 `fdisk -l`, 在系统中查看你的内存卡的路径, 我的是 `/dev/sda`。\n\n知道了路径之后使用 `fdisk /dev/sda` 进行分区。\n\n步骤如下:\n\n```\n输入 o 并回车，这将会删除所有分区\n输入 p 并回车，这将会列出所有分区，此时应该没有任何分区\n输入 n 并回车，创建新分区，引导分区\n输入 p 并回车，新分区为主分区\n输入 1 并回车，分区序号是1 按键盘回车，默认初始扇区\n输入 +100M 并回车，设置终止扇区\n输入 t 并回车，再输入 c 并回车，设置该分区文件系统格式为Fat32\n输入 n 并回车，创建新分区，根分区\n输入 p 并回车，新分区为主分区\n输入 2 并回车，分区序号是2 按键盘回车，默认初始扇区 按键盘回车，默认终止扇区\n输入 w 并回车，写入设置\n```\n\n接着格式化分区:\n\n```\nmkfs.vfat /dev/sdX1\nmkfs.ext4 /dev/sdX2\n```\n\n\n","source":"_posts/config_skill_experience/system_config/linux/how-to-install.md","raw":"---\ntitle: 在树莓派上安装 archlinux\ndate: 2020-03-17 01:51:35\n-categories:\n- 配置技巧/经验\n- 系统配置\n- linux\ntags:\n- archlinux\n---\n\n# 步骤\n\n首先使用 `fdisk -l`, 在系统中查看你的内存卡的路径, 我的是 `/dev/sda`。\n\n知道了路径之后使用 `fdisk /dev/sda` 进行分区。\n\n步骤如下:\n\n```\n输入 o 并回车，这将会删除所有分区\n输入 p 并回车，这将会列出所有分区，此时应该没有任何分区\n输入 n 并回车，创建新分区，引导分区\n输入 p 并回车，新分区为主分区\n输入 1 并回车，分区序号是1 按键盘回车，默认初始扇区\n输入 +100M 并回车，设置终止扇区\n输入 t 并回车，再输入 c 并回车，设置该分区文件系统格式为Fat32\n输入 n 并回车，创建新分区，根分区\n输入 p 并回车，新分区为主分区\n输入 2 并回车，分区序号是2 按键盘回车，默认初始扇区 按键盘回车，默认终止扇区\n输入 w 并回车，写入设置\n```\n\n接着格式化分区:\n\n```\nmkfs.vfat /dev/sdX1\nmkfs.ext4 /dev/sdX2\n```\n\n\n","slug":"config_skill_experience/system_config/linux/how-to-install","published":1,"updated":"2022-10-03T02:32:21.027Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejr3005b3vsbggg5e4r4","content":"<h1 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h1><p>首先使用 <code>fdisk -l</code>, 在系统中查看你的内存卡的路径, 我的是 <code>/dev/sda</code>。</p>\n<p>知道了路径之后使用 <code>fdisk /dev/sda</code> 进行分区。</p>\n<p>步骤如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入 o 并回车，这将会删除所有分区</span><br><span class=\"line\">输入 p 并回车，这将会列出所有分区，此时应该没有任何分区</span><br><span class=\"line\">输入 n 并回车，创建新分区，引导分区</span><br><span class=\"line\">输入 p 并回车，新分区为主分区</span><br><span class=\"line\">输入 1 并回车，分区序号是1 按键盘回车，默认初始扇区</span><br><span class=\"line\">输入 +100M 并回车，设置终止扇区</span><br><span class=\"line\">输入 t 并回车，再输入 c 并回车，设置该分区文件系统格式为Fat32</span><br><span class=\"line\">输入 n 并回车，创建新分区，根分区</span><br><span class=\"line\">输入 p 并回车，新分区为主分区</span><br><span class=\"line\">输入 2 并回车，分区序号是2 按键盘回车，默认初始扇区 按键盘回车，默认终止扇区</span><br><span class=\"line\">输入 w 并回车，写入设置</span><br></pre></td></tr></table></figure>\n\n<p>接着格式化分区:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkfs.vfat /dev/sdX1</span><br><span class=\"line\">mkfs.ext4 /dev/sdX2</span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"","more":"<h1 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h1><p>首先使用 <code>fdisk -l</code>, 在系统中查看你的内存卡的路径, 我的是 <code>/dev/sda</code>。</p>\n<p>知道了路径之后使用 <code>fdisk /dev/sda</code> 进行分区。</p>\n<p>步骤如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入 o 并回车，这将会删除所有分区</span><br><span class=\"line\">输入 p 并回车，这将会列出所有分区，此时应该没有任何分区</span><br><span class=\"line\">输入 n 并回车，创建新分区，引导分区</span><br><span class=\"line\">输入 p 并回车，新分区为主分区</span><br><span class=\"line\">输入 1 并回车，分区序号是1 按键盘回车，默认初始扇区</span><br><span class=\"line\">输入 +100M 并回车，设置终止扇区</span><br><span class=\"line\">输入 t 并回车，再输入 c 并回车，设置该分区文件系统格式为Fat32</span><br><span class=\"line\">输入 n 并回车，创建新分区，根分区</span><br><span class=\"line\">输入 p 并回车，新分区为主分区</span><br><span class=\"line\">输入 2 并回车，分区序号是2 按键盘回车，默认初始扇区 按键盘回车，默认终止扇区</span><br><span class=\"line\">输入 w 并回车，写入设置</span><br></pre></td></tr></table></figure>\n\n<p>接着格式化分区:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkfs.vfat /dev/sdX1</span><br><span class=\"line\">mkfs.ext4 /dev/sdX2</span><br></pre></td></tr></table></figure>\n\n\n"},{"title":"如何才能在Linux系统下后台运行程序","date":"2020-06-18T02:36:07.000Z","_content":"\n# 使用 nohup & 来保持后台运行\n\n在执行命令的时候, 在命令末尾加一个 `&` 符号来让这个命令保持后台运行。\n\n比如:\n\n```shell\nnohup make -j2 &\n```\n\n在这样做了之后, 按 `ctrl-c` 回到命令行界面, 使用 exit 命令来关闭当前session, 这样你的后台命令还是会保持运行。\n\n# 使用 ctrl-z 和 bg 后台运行\n\n当你的程序已经启动的时候, 可以先使用 `ctrl-z` 将当前程序放到后台并暂停运行, 之后使用 `jobs` 来查看序号, 之后使用 `bg 序号` 来使程序后台运行。\n","source":"_posts/config_skill_experience/system_config/linux/how-to-run-process-in-background.md","raw":"---\ntitle: 如何才能在Linux系统下后台运行程序\ndate: 2020-06-18 10:36:07\ncategories:\n- 配置技巧/经验\n- 系统配置\n- linux\ntags:\n- linux的使用\n---\n\n# 使用 nohup & 来保持后台运行\n\n在执行命令的时候, 在命令末尾加一个 `&` 符号来让这个命令保持后台运行。\n\n比如:\n\n```shell\nnohup make -j2 &\n```\n\n在这样做了之后, 按 `ctrl-c` 回到命令行界面, 使用 exit 命令来关闭当前session, 这样你的后台命令还是会保持运行。\n\n# 使用 ctrl-z 和 bg 后台运行\n\n当你的程序已经启动的时候, 可以先使用 `ctrl-z` 将当前程序放到后台并暂停运行, 之后使用 `jobs` 来查看序号, 之后使用 `bg 序号` 来使程序后台运行。\n","slug":"config_skill_experience/system_config/linux/how-to-run-process-in-background","published":1,"updated":"2022-10-03T02:36:54.564Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejr8005d3vsb0ddn4xrq","content":"<h1 id=\"使用-nohup-amp-来保持后台运行\"><a href=\"#使用-nohup-amp-来保持后台运行\" class=\"headerlink\" title=\"使用 nohup &amp; 来保持后台运行\"></a>使用 nohup &amp; 来保持后台运行</h1><p>在执行命令的时候, 在命令末尾加一个 <code>&amp;</code> 符号来让这个命令保持后台运行。</p>\n<p>比如:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nohup make -j2 &amp;</span><br></pre></td></tr></table></figure>\n\n<p>在这样做了之后, 按 <code>ctrl-c</code> 回到命令行界面, 使用 exit 命令来关闭当前session, 这样你的后台命令还是会保持运行。</p>\n<h1 id=\"使用-ctrl-z-和-bg-后台运行\"><a href=\"#使用-ctrl-z-和-bg-后台运行\" class=\"headerlink\" title=\"使用 ctrl-z 和 bg 后台运行\"></a>使用 ctrl-z 和 bg 后台运行</h1><p>当你的程序已经启动的时候, 可以先使用 <code>ctrl-z</code> 将当前程序放到后台并暂停运行, 之后使用 <code>jobs</code> 来查看序号, 之后使用 <code>bg 序号</code> 来使程序后台运行。</p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"","more":"<h1 id=\"使用-nohup-amp-来保持后台运行\"><a href=\"#使用-nohup-amp-来保持后台运行\" class=\"headerlink\" title=\"使用 nohup &amp; 来保持后台运行\"></a>使用 nohup &amp; 来保持后台运行</h1><p>在执行命令的时候, 在命令末尾加一个 <code>&amp;</code> 符号来让这个命令保持后台运行。</p>\n<p>比如:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nohup make -j2 &amp;</span><br></pre></td></tr></table></figure>\n\n<p>在这样做了之后, 按 <code>ctrl-c</code> 回到命令行界面, 使用 exit 命令来关闭当前session, 这样你的后台命令还是会保持运行。</p>\n<h1 id=\"使用-ctrl-z-和-bg-后台运行\"><a href=\"#使用-ctrl-z-和-bg-后台运行\" class=\"headerlink\" title=\"使用 ctrl-z 和 bg 后台运行\"></a>使用 ctrl-z 和 bg 后台运行</h1><p>当你的程序已经启动的时候, 可以先使用 <code>ctrl-z</code> 将当前程序放到后台并暂停运行, 之后使用 <code>jobs</code> 来查看序号, 之后使用 <code>bg 序号</code> 来使程序后台运行。</p>\n"},{"title":"Linux关于backspace不好用的问题","date":"2019-06-02T07:36:16.000Z","_content":"\n# 问题\n\n当我在centos中使用vim编辑器时, 按下退格键(backspace)时, 并不能删掉字符。\n<!--more-->\n\n# 解决办法\n\n将下面的设置写到`.vimrc`中:\n\n```\nset backspace=indent,eol,start\n```\n\n详情请看[这里](https://vi.stackexchange.com/questions/2162/why-doesnt-the-backspace-key-work-in-insert-mode)\n","source":"_posts/config_skill_experience/system_config/linux/linux-backspace.md","raw":"---\ntitle: Linux关于backspace不好用的问题\ndate: 2019-06-02 15:36:16\ncategories:\n- 配置技巧/经验\n- 系统配置\n- linux\ntags:\n- centos\n---\n\n# 问题\n\n当我在centos中使用vim编辑器时, 按下退格键(backspace)时, 并不能删掉字符。\n<!--more-->\n\n# 解决办法\n\n将下面的设置写到`.vimrc`中:\n\n```\nset backspace=indent,eol,start\n```\n\n详情请看[这里](https://vi.stackexchange.com/questions/2162/why-doesnt-the-backspace-key-work-in-insert-mode)\n","slug":"config_skill_experience/system_config/linux/linux-backspace","published":1,"updated":"2022-10-03T02:34:44.747Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejrd005g3vsbe49090y2","content":"<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>当我在centos中使用vim编辑器时, 按下退格键(backspace)时, 并不能删掉字符。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h1><p>将下面的设置写到<code>.vimrc</code>中:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set backspace=indent,eol,start</span><br></pre></td></tr></table></figure>\n\n<p>详情请看<a href=\"https://vi.stackexchange.com/questions/2162/why-doesnt-the-backspace-key-work-in-insert-mode\">这里</a></p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>当我在centos中使用vim编辑器时, 按下退格键(backspace)时, 并不能删掉字符。</p>","more":"<h1 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h1><p>将下面的设置写到<code>.vimrc</code>中:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set backspace=indent,eol,start</span><br></pre></td></tr></table></figure>\n\n<p>详情请看<a href=\"https://vi.stackexchange.com/questions/2162/why-doesnt-the-backspace-key-work-in-insert-mode\">这里</a></p>"},{"title":"linux配置Java,Git,Maven,Zookeeper环境","date":"2018-12-05T13:47:02.000Z","_content":"\n# 前言\n\n在windows上写好了一个项目, 想部署到linux环境运行试试看, 嗯, 这个就是这篇博客的前提。\n<!--more-->\n# 配置Java\n\n嗯, Java是第一个就应该配置的东西, 那么我们采用比较传统的做法来配置。\n\n这里需要注意一点, 就是不要使用`wget`命令来下载oracle官网地址的jdk压缩包, 因为如果你访问过oracle官网你就会发现, 在[下载jdk](https://www.oracle.com/technetwork/java/archive-139210.html)之前, 需要先同意条款才能下载, 通过命令下载当然也可以下载下来, 但是下载下来的文件是有问题的, 解压不了, 所以需要访问官网, 同意条款, 下载压缩包, 上传至linux服务器才可以。\n\n然后将其解压:\n\n```shell\n$ tar -zxvf jdk-8u102-linux-x64.tar.gz\n```\n\n新建一个文件夹, 将解压好的文件放到里面:\n\n```shell\n$ mkdir java\n$ mv .jdk-8u191 /home/usr/java\n```\n\n接下来设置环境变量, 这一篇详细讲解了[如何设置环境变量](/operation_system/linux/linux-path-variable.html):\n\n```shell\n$ export JAVA_HOME=/home/usr/java/jdk1.8.0_102\nexport JRE_HOME=/home/usr/java/jdk1.8.0_102/jre\nexport CLASSPATH=.:$JAVA_HOME/lib:$JRE_HOME/lib:$CLASSPATH\nexport PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$PATH\n```\n\n别忘了需要重启或者设置立即生效。接着测试环境:\n\n```shell\njava -version\njavac -version\n```\n\n<br>\n\n# 配置Maven\n\n其实流程都是一样的, 先下载Maven压缩包:\n\n```shell\n$ wget http://mirrors.hust.edu.cn/apache/maven/maven-3/3.6.0/binaries/apache-maven-3.6.0-bin.tar.gz\n```\n\n解压步骤参考上文。\n\n设置环境变量:\n\n```shell\nexport MAVEN_HOME=/home/usr/maven/apache-maven-3.6.0\nexport PATH=$PATH:$MAVEN_HOME/bin\n```\n\n<br>\n\n# 配置Git\n\n其实Git官网上有教怎样下载: [Linux配置Git](https://git-scm.com/download/linux)\n\n总体来说就是一句话:\n\n```shell\n$ apt-get install git\n```\n\n<br>\n\n# 配置zookeeper\n\n下载...\n\n```shell\n$ wget http://mirror.bit.edu.cn/apache/zookeeper/zookeeper-3.4.13/zookeeper-3.4.13.tar.gz\n```\n\n解压...\n\n这里稍微有点不一样, 首先需要修改一下zookeeper的配置文件, 在conf文件夹下:\n\n```shell\n$ cd /home/usr/zookeeper/zookeeper-3.4.13/conf\n$ cp zoo_sample.cfg zoo.cfg\n$ vi zoo.cfg\n```\n\n主要修改数据存放地址和日志地址:\n\n```shell\ndataDir=/HD/logs/zookeeper\ndataLogDir=/HD/logs/zookeeper\n```\n\n这里我使用的是ubuntu 18.0.4, 然而还是出现了问题:\n\n```shell\n/home/usr/zookeeper/zookeeper-3.4.13# sh bin/zkServer.sh start\nJMX enabled by default\nbin/zkServer.sh: 95: /home/usr/zookeeper/zookeeper-3.4.13/bin/zkEnv.sh: Syntax error: \"(\" unexpected (expecting \"fi\")\n```\n\n稍微百度了一下, 就找到了解决办法:\n\n```shell\n$ cd /bin/\n$ ln -sf bash /bin/sh\n```\n\n就是修改了一下sh的硬链接\n\n**CentOS是没有这个问题的**\n\n然后就可以开心愉快的使用zookeeper啦:\n\n```shell\n$ sh zkServer.sh start //启动\n$ sh zkServer.sh status //检查状态\n$ sh zkServer.sh stop //停止\n```\n\n<br>\n\n# 总结\n\n非常的简单, 就是环境变量那里稍微有点复杂, 但是稍微研究一下就应该没什么问题了, 嗯, 大概就是这样了。\n","source":"_posts/config_skill_experience/system_config/linux/linux-java-git-maven-zookeeper.md","raw":"---\ntitle: 'linux配置Java,Git,Maven,Zookeeper环境'\ndate: 2018-12-05 21:47:02\ncategories:\n- 配置技巧/经验\n- 系统配置\n- linux\ntags:\n- linux\n---\n\n# 前言\n\n在windows上写好了一个项目, 想部署到linux环境运行试试看, 嗯, 这个就是这篇博客的前提。\n<!--more-->\n# 配置Java\n\n嗯, Java是第一个就应该配置的东西, 那么我们采用比较传统的做法来配置。\n\n这里需要注意一点, 就是不要使用`wget`命令来下载oracle官网地址的jdk压缩包, 因为如果你访问过oracle官网你就会发现, 在[下载jdk](https://www.oracle.com/technetwork/java/archive-139210.html)之前, 需要先同意条款才能下载, 通过命令下载当然也可以下载下来, 但是下载下来的文件是有问题的, 解压不了, 所以需要访问官网, 同意条款, 下载压缩包, 上传至linux服务器才可以。\n\n然后将其解压:\n\n```shell\n$ tar -zxvf jdk-8u102-linux-x64.tar.gz\n```\n\n新建一个文件夹, 将解压好的文件放到里面:\n\n```shell\n$ mkdir java\n$ mv .jdk-8u191 /home/usr/java\n```\n\n接下来设置环境变量, 这一篇详细讲解了[如何设置环境变量](/operation_system/linux/linux-path-variable.html):\n\n```shell\n$ export JAVA_HOME=/home/usr/java/jdk1.8.0_102\nexport JRE_HOME=/home/usr/java/jdk1.8.0_102/jre\nexport CLASSPATH=.:$JAVA_HOME/lib:$JRE_HOME/lib:$CLASSPATH\nexport PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$PATH\n```\n\n别忘了需要重启或者设置立即生效。接着测试环境:\n\n```shell\njava -version\njavac -version\n```\n\n<br>\n\n# 配置Maven\n\n其实流程都是一样的, 先下载Maven压缩包:\n\n```shell\n$ wget http://mirrors.hust.edu.cn/apache/maven/maven-3/3.6.0/binaries/apache-maven-3.6.0-bin.tar.gz\n```\n\n解压步骤参考上文。\n\n设置环境变量:\n\n```shell\nexport MAVEN_HOME=/home/usr/maven/apache-maven-3.6.0\nexport PATH=$PATH:$MAVEN_HOME/bin\n```\n\n<br>\n\n# 配置Git\n\n其实Git官网上有教怎样下载: [Linux配置Git](https://git-scm.com/download/linux)\n\n总体来说就是一句话:\n\n```shell\n$ apt-get install git\n```\n\n<br>\n\n# 配置zookeeper\n\n下载...\n\n```shell\n$ wget http://mirror.bit.edu.cn/apache/zookeeper/zookeeper-3.4.13/zookeeper-3.4.13.tar.gz\n```\n\n解压...\n\n这里稍微有点不一样, 首先需要修改一下zookeeper的配置文件, 在conf文件夹下:\n\n```shell\n$ cd /home/usr/zookeeper/zookeeper-3.4.13/conf\n$ cp zoo_sample.cfg zoo.cfg\n$ vi zoo.cfg\n```\n\n主要修改数据存放地址和日志地址:\n\n```shell\ndataDir=/HD/logs/zookeeper\ndataLogDir=/HD/logs/zookeeper\n```\n\n这里我使用的是ubuntu 18.0.4, 然而还是出现了问题:\n\n```shell\n/home/usr/zookeeper/zookeeper-3.4.13# sh bin/zkServer.sh start\nJMX enabled by default\nbin/zkServer.sh: 95: /home/usr/zookeeper/zookeeper-3.4.13/bin/zkEnv.sh: Syntax error: \"(\" unexpected (expecting \"fi\")\n```\n\n稍微百度了一下, 就找到了解决办法:\n\n```shell\n$ cd /bin/\n$ ln -sf bash /bin/sh\n```\n\n就是修改了一下sh的硬链接\n\n**CentOS是没有这个问题的**\n\n然后就可以开心愉快的使用zookeeper啦:\n\n```shell\n$ sh zkServer.sh start //启动\n$ sh zkServer.sh status //检查状态\n$ sh zkServer.sh stop //停止\n```\n\n<br>\n\n# 总结\n\n非常的简单, 就是环境变量那里稍微有点复杂, 但是稍微研究一下就应该没什么问题了, 嗯, 大概就是这样了。\n","slug":"config_skill_experience/system_config/linux/linux-java-git-maven-zookeeper","published":1,"updated":"2022-10-07T12:44:47.485Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejrh005h3vsb1edd6s42","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>在windows上写好了一个项目, 想部署到linux环境运行试试看, 嗯, 这个就是这篇博客的前提。</p>\n<span id=\"more\"></span>\n<h1 id=\"配置Java\"><a href=\"#配置Java\" class=\"headerlink\" title=\"配置Java\"></a>配置Java</h1><p>嗯, Java是第一个就应该配置的东西, 那么我们采用比较传统的做法来配置。</p>\n<p>这里需要注意一点, 就是不要使用<code>wget</code>命令来下载oracle官网地址的jdk压缩包, 因为如果你访问过oracle官网你就会发现, 在<a href=\"https://www.oracle.com/technetwork/java/archive-139210.html\">下载jdk</a>之前, 需要先同意条款才能下载, 通过命令下载当然也可以下载下来, 但是下载下来的文件是有问题的, 解压不了, 所以需要访问官网, 同意条款, 下载压缩包, 上传至linux服务器才可以。</p>\n<p>然后将其解压:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> tar -zxvf jdk-8u102-linux-x64.tar.gz</span></span><br></pre></td></tr></table></figure>\n\n<p>新建一个文件夹, 将解压好的文件放到里面:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> mkdir java</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> mv .jdk-8u191 /home/usr/java</span></span><br></pre></td></tr></table></figure>\n\n<p>接下来设置环境变量, 这一篇详细讲解了<a href=\"/operation_system/linux/linux-path-variable.html\">如何设置环境变量</a>:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">export</span> JAVA_HOME=/home/usr/java/jdk1.8.0_102</span></span><br><span class=\"line\">export JRE_HOME=/home/usr/java/jdk1.8.0_102/jre</span><br><span class=\"line\">export CLASSPATH=.:$JAVA_HOME/lib:$JRE_HOME/lib:$CLASSPATH</span><br><span class=\"line\">export PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$PATH</span><br></pre></td></tr></table></figure>\n\n<p>别忘了需要重启或者设置立即生效。接着测试环境:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -version</span><br><span class=\"line\">javac -version</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h1 id=\"配置Maven\"><a href=\"#配置Maven\" class=\"headerlink\" title=\"配置Maven\"></a>配置Maven</h1><p>其实流程都是一样的, 先下载Maven压缩包:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> wget http://mirrors.hust.edu.cn/apache/maven/maven-3/3.6.0/binaries/apache-maven-3.6.0-bin.tar.gz</span></span><br></pre></td></tr></table></figure>\n\n<p>解压步骤参考上文。</p>\n<p>设置环境变量:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export MAVEN_HOME=/home/usr/maven/apache-maven-3.6.0</span><br><span class=\"line\">export PATH=$PATH:$MAVEN_HOME/bin</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h1 id=\"配置Git\"><a href=\"#配置Git\" class=\"headerlink\" title=\"配置Git\"></a>配置Git</h1><p>其实Git官网上有教怎样下载: <a href=\"https://git-scm.com/download/linux\">Linux配置Git</a></p>\n<p>总体来说就是一句话:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> apt-get install git</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h1 id=\"配置zookeeper\"><a href=\"#配置zookeeper\" class=\"headerlink\" title=\"配置zookeeper\"></a>配置zookeeper</h1><p>下载…</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> wget http://mirror.bit.edu.cn/apache/zookeeper/zookeeper-3.4.13/zookeeper-3.4.13.tar.gz</span></span><br></pre></td></tr></table></figure>\n\n<p>解压…</p>\n<p>这里稍微有点不一样, 首先需要修改一下zookeeper的配置文件, 在conf文件夹下:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> /home/usr/zookeeper/zookeeper-3.4.13/conf</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> cp zoo_sample.cfg zoo.cfg</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> vi zoo.cfg</span></span><br></pre></td></tr></table></figure>\n\n<p>主要修改数据存放地址和日志地址:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dataDir=/HD/logs/zookeeper</span><br><span class=\"line\">dataLogDir=/HD/logs/zookeeper</span><br></pre></td></tr></table></figure>\n\n<p>这里我使用的是ubuntu 18.0.4, 然而还是出现了问题:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/home/usr/zookeeper/zookeeper-3.4.13# sh bin/zkServer.sh start</span><br><span class=\"line\">JMX enabled by default</span><br><span class=\"line\">bin/zkServer.sh: 95: /home/usr/zookeeper/zookeeper-3.4.13/bin/zkEnv.sh: Syntax error: &quot;(&quot; unexpected (expecting &quot;fi&quot;)</span><br></pre></td></tr></table></figure>\n\n<p>稍微百度了一下, 就找到了解决办法:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> /bin/</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ln -sf bash /bin/sh</span></span><br></pre></td></tr></table></figure>\n\n<p>就是修改了一下sh的硬链接</p>\n<p><strong>CentOS是没有这个问题的</strong></p>\n<p>然后就可以开心愉快的使用zookeeper啦:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sh zkServer.sh start //启动</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sh zkServer.sh status //检查状态</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sh zkServer.sh stop //停止</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>非常的简单, 就是环境变量那里稍微有点复杂, 但是稍微研究一下就应该没什么问题了, 嗯, 大概就是这样了。</p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>在windows上写好了一个项目, 想部署到linux环境运行试试看, 嗯, 这个就是这篇博客的前提。</p>","more":"<h1 id=\"配置Java\"><a href=\"#配置Java\" class=\"headerlink\" title=\"配置Java\"></a>配置Java</h1><p>嗯, Java是第一个就应该配置的东西, 那么我们采用比较传统的做法来配置。</p>\n<p>这里需要注意一点, 就是不要使用<code>wget</code>命令来下载oracle官网地址的jdk压缩包, 因为如果你访问过oracle官网你就会发现, 在<a href=\"https://www.oracle.com/technetwork/java/archive-139210.html\">下载jdk</a>之前, 需要先同意条款才能下载, 通过命令下载当然也可以下载下来, 但是下载下来的文件是有问题的, 解压不了, 所以需要访问官网, 同意条款, 下载压缩包, 上传至linux服务器才可以。</p>\n<p>然后将其解压:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> tar -zxvf jdk-8u102-linux-x64.tar.gz</span></span><br></pre></td></tr></table></figure>\n\n<p>新建一个文件夹, 将解压好的文件放到里面:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> mkdir java</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> mv .jdk-8u191 /home/usr/java</span></span><br></pre></td></tr></table></figure>\n\n<p>接下来设置环境变量, 这一篇详细讲解了<a href=\"/operation_system/linux/linux-path-variable.html\">如何设置环境变量</a>:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">export</span> JAVA_HOME=/home/usr/java/jdk1.8.0_102</span></span><br><span class=\"line\">export JRE_HOME=/home/usr/java/jdk1.8.0_102/jre</span><br><span class=\"line\">export CLASSPATH=.:$JAVA_HOME/lib:$JRE_HOME/lib:$CLASSPATH</span><br><span class=\"line\">export PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$PATH</span><br></pre></td></tr></table></figure>\n\n<p>别忘了需要重启或者设置立即生效。接着测试环境:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -version</span><br><span class=\"line\">javac -version</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h1 id=\"配置Maven\"><a href=\"#配置Maven\" class=\"headerlink\" title=\"配置Maven\"></a>配置Maven</h1><p>其实流程都是一样的, 先下载Maven压缩包:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> wget http://mirrors.hust.edu.cn/apache/maven/maven-3/3.6.0/binaries/apache-maven-3.6.0-bin.tar.gz</span></span><br></pre></td></tr></table></figure>\n\n<p>解压步骤参考上文。</p>\n<p>设置环境变量:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export MAVEN_HOME=/home/usr/maven/apache-maven-3.6.0</span><br><span class=\"line\">export PATH=$PATH:$MAVEN_HOME/bin</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h1 id=\"配置Git\"><a href=\"#配置Git\" class=\"headerlink\" title=\"配置Git\"></a>配置Git</h1><p>其实Git官网上有教怎样下载: <a href=\"https://git-scm.com/download/linux\">Linux配置Git</a></p>\n<p>总体来说就是一句话:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> apt-get install git</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h1 id=\"配置zookeeper\"><a href=\"#配置zookeeper\" class=\"headerlink\" title=\"配置zookeeper\"></a>配置zookeeper</h1><p>下载…</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> wget http://mirror.bit.edu.cn/apache/zookeeper/zookeeper-3.4.13/zookeeper-3.4.13.tar.gz</span></span><br></pre></td></tr></table></figure>\n\n<p>解压…</p>\n<p>这里稍微有点不一样, 首先需要修改一下zookeeper的配置文件, 在conf文件夹下:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> /home/usr/zookeeper/zookeeper-3.4.13/conf</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> cp zoo_sample.cfg zoo.cfg</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> vi zoo.cfg</span></span><br></pre></td></tr></table></figure>\n\n<p>主要修改数据存放地址和日志地址:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dataDir=/HD/logs/zookeeper</span><br><span class=\"line\">dataLogDir=/HD/logs/zookeeper</span><br></pre></td></tr></table></figure>\n\n<p>这里我使用的是ubuntu 18.0.4, 然而还是出现了问题:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/home/usr/zookeeper/zookeeper-3.4.13# sh bin/zkServer.sh start</span><br><span class=\"line\">JMX enabled by default</span><br><span class=\"line\">bin/zkServer.sh: 95: /home/usr/zookeeper/zookeeper-3.4.13/bin/zkEnv.sh: Syntax error: &quot;(&quot; unexpected (expecting &quot;fi&quot;)</span><br></pre></td></tr></table></figure>\n\n<p>稍微百度了一下, 就找到了解决办法:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> /bin/</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ln -sf bash /bin/sh</span></span><br></pre></td></tr></table></figure>\n\n<p>就是修改了一下sh的硬链接</p>\n<p><strong>CentOS是没有这个问题的</strong></p>\n<p>然后就可以开心愉快的使用zookeeper啦:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sh zkServer.sh start //启动</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sh zkServer.sh status //检查状态</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sh zkServer.sh stop //停止</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>非常的简单, 就是环境变量那里稍微有点复杂, 但是稍微研究一下就应该没什么问题了, 嗯, 大概就是这样了。</p>"},{"title":"linux(ubuntu)设置环境变量","date":"2018-12-05T11:21:21.000Z","_content":"\n# ubuntu添加环境变量\n\n分三种添加方式, 作用域不同\n\n* 只作用于当前终端\n* 只作用于当前用户\n* 作用于所有用户\n\n<!--more-->\n\n<br>\n\n## 只作用于当前终端\n\n使用`export`命令添加, 如果当前终端被关闭就失效。\n\n```shell\n# 加到path末尾\nexport PATH=$PATH:/path/to/your/dir\n# 加到path开头\nexport PATH=/path/to/your/dir:$PATH\n```\n\n<br>\n\n## 作用于当前用户\n\n修改用户根目录下的`.bashrc`文件, 将`export`命令添加到这个文件中。\n\n修改完之后, 使用\n\n```shell\nsource ~/.bashrc\n```\n\n将添加的环境变量马上生效\n\n<br>\n\n## 作用于所有用户\n\n以相同的方式修改`/etc/profile`文件。\n\n","source":"_posts/config_skill_experience/system_config/linux/linux-path-variable.md","raw":"---\ntitle: linux(ubuntu)设置环境变量\ndate: 2018-12-05 19:21:21\ncategories:\n- 配置技巧/经验\n- 系统配置\n- linux\ntags:\n- linux\n---\n\n# ubuntu添加环境变量\n\n分三种添加方式, 作用域不同\n\n* 只作用于当前终端\n* 只作用于当前用户\n* 作用于所有用户\n\n<!--more-->\n\n<br>\n\n## 只作用于当前终端\n\n使用`export`命令添加, 如果当前终端被关闭就失效。\n\n```shell\n# 加到path末尾\nexport PATH=$PATH:/path/to/your/dir\n# 加到path开头\nexport PATH=/path/to/your/dir:$PATH\n```\n\n<br>\n\n## 作用于当前用户\n\n修改用户根目录下的`.bashrc`文件, 将`export`命令添加到这个文件中。\n\n修改完之后, 使用\n\n```shell\nsource ~/.bashrc\n```\n\n将添加的环境变量马上生效\n\n<br>\n\n## 作用于所有用户\n\n以相同的方式修改`/etc/profile`文件。\n\n","slug":"config_skill_experience/system_config/linux/linux-path-variable","published":1,"updated":"2022-10-07T12:44:57.897Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejro005m3vsb6qij014f","content":"<h1 id=\"ubuntu添加环境变量\"><a href=\"#ubuntu添加环境变量\" class=\"headerlink\" title=\"ubuntu添加环境变量\"></a>ubuntu添加环境变量</h1><p>分三种添加方式, 作用域不同</p>\n<ul>\n<li>只作用于当前终端</li>\n<li>只作用于当前用户</li>\n<li>作用于所有用户</li>\n</ul>\n<span id=\"more\"></span>\n\n<br>\n\n<h2 id=\"只作用于当前终端\"><a href=\"#只作用于当前终端\" class=\"headerlink\" title=\"只作用于当前终端\"></a>只作用于当前终端</h2><p>使用<code>export</code>命令添加, 如果当前终端被关闭就失效。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 加到path末尾</span></span><br><span class=\"line\">export PATH=$PATH:/path/to/your/dir</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 加到path开头</span></span><br><span class=\"line\">export PATH=/path/to/your/dir:$PATH</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h2 id=\"作用于当前用户\"><a href=\"#作用于当前用户\" class=\"headerlink\" title=\"作用于当前用户\"></a>作用于当前用户</h2><p>修改用户根目录下的<code>.bashrc</code>文件, 将<code>export</code>命令添加到这个文件中。</p>\n<p>修改完之后, 使用</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~/.bashrc</span><br></pre></td></tr></table></figure>\n\n<p>将添加的环境变量马上生效</p>\n<br>\n\n<h2 id=\"作用于所有用户\"><a href=\"#作用于所有用户\" class=\"headerlink\" title=\"作用于所有用户\"></a>作用于所有用户</h2><p>以相同的方式修改<code>/etc/profile</code>文件。</p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"ubuntu添加环境变量\"><a href=\"#ubuntu添加环境变量\" class=\"headerlink\" title=\"ubuntu添加环境变量\"></a>ubuntu添加环境变量</h1><p>分三种添加方式, 作用域不同</p>\n<ul>\n<li>只作用于当前终端</li>\n<li>只作用于当前用户</li>\n<li>作用于所有用户</li>\n</ul>","more":"<br>\n\n<h2 id=\"只作用于当前终端\"><a href=\"#只作用于当前终端\" class=\"headerlink\" title=\"只作用于当前终端\"></a>只作用于当前终端</h2><p>使用<code>export</code>命令添加, 如果当前终端被关闭就失效。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 加到path末尾</span></span><br><span class=\"line\">export PATH=$PATH:/path/to/your/dir</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 加到path开头</span></span><br><span class=\"line\">export PATH=/path/to/your/dir:$PATH</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h2 id=\"作用于当前用户\"><a href=\"#作用于当前用户\" class=\"headerlink\" title=\"作用于当前用户\"></a>作用于当前用户</h2><p>修改用户根目录下的<code>.bashrc</code>文件, 将<code>export</code>命令添加到这个文件中。</p>\n<p>修改完之后, 使用</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~/.bashrc</span><br></pre></td></tr></table></figure>\n\n<p>将添加的环境变量马上生效</p>\n<br>\n\n<h2 id=\"作用于所有用户\"><a href=\"#作用于所有用户\" class=\"headerlink\" title=\"作用于所有用户\"></a>作用于所有用户</h2><p>以相同的方式修改<code>/etc/profile</code>文件。</p>"},{"title":"Linux守护进程","date":"2019-04-14T01:04:17.000Z","_content":"\n转自[【Linux】守护进程以及实现一个守护进程](https://blog.csdn.net/wenqiang1208/article/details/71550599)\n\n其他关于守护进程的博客:\n\n[Linux系统下创建守护进程（Daemon）](https://blog.csdn.net/linkedin_35878439/article/details/81288889)\n\n<!--more-->\n\n# 什么是守护进程\n\n守护进程也称为精灵进程，是运行在后台进程的一种特殊进程。它独立于控制终端并且周期性地执行某种任务或等待处理某些发生的事件。 \n1. 脱离于控制终端并且在后台运行 \n2. 不受用户登录注销的影响，它们一直在运行着 \nLinux大多数服务器就是用守护进程实现的，例如：Internet服务器inetd，Web服务器httpd\n\n查看系统中的守护进程：使用命令`ps axj` \n凡是TPGID一栏中写着-1的都是没有控制终端的进程，也就是守护进程。 \n在COMMAND一列中用 [ ]括起来的名字表示内核线程，这些线程在内核里创建，没有用户空间代码，通常采用K开头的，表示Kernel\n\n![linux进程](/images/linux/computer-operation/linux_daemo.jpg)\n\n# 实现一个守护进程\n\n* 屏蔽一些控制终端信号\n\n> 这是为了防止守护进程在没有运行起来前, 控制终端收到干扰退出或挂起。\n\n```c\nsignal(SIGTTOU, SIG_IGN)\nsignal(SIGTTIN, SIG_IGN)\nsignal(SIGTSTP, SIG_IGN)\nsignal(SIGNUP,  SIG_IGN)\n```\n\n* 调用fork, 父进程退出\n\n> 保证子进程不是一个组长进程, 方法是在进程中调用fork()使父进程终止, 让守护进程在子进程中后台执行。\n\n```c\n// 调用fork函数, 父进程退出\npid = fork();\nif (pid < 0) {\n    printf(\"error fork\");\n} else if (pid > 0) {\n    // father\n    exit(0);\n}\n```\n\n* setsid创建一个新会话\n\n```c\nSYNOPSIS\n    \n    #include <unistd.h>\n\n    pid_t setsid(void);\n\nDESCRIPTION\n\n    setsid() creates a new session if the calling process is not a process group leader. The calling process is the leader of the new session, the process group leader of the new process group, and has no controlling tty. The process group ID and session ID of the calling process are set to the PID of the calling process. The calling process will be the only process in this new process group and in this new session.\n```\n\n该函数返回值: 调用成功返回新创建的Session的id(就是当前进程的id), 出错返回-1.\n\n注意: 当调用该函数之前, 当前进程不能是进程组的组长, 否则返回-1\n\n所以: 要保证当前进程不是进程组的组长, 先fork创建一个子进程, 这样保证了子进程不可能是该组进程 的第一个进程, 再调用setsid。\n\n成功调用setsid函数的结果\n\n    * 创建一个新的Session, 当前进程成为Session Leader, 当前进程id就是Session的id\n    * 创建一个新的进程组, 当前进程成为进程组的Leader, 当前进程id就是进程组的id\n    * 如果当前进程原本有一个控制终端, 则它失去控制终端, 成为一个没有控制终端的进程\n\n\n* 禁止进程重新打开控制终端\n\n现在, 进程已经成为无终端的会话组长, 但它可以重新申请打开一个控制终端。可以通过使进程不再成为会话组长来禁止进程重新打开控制终端, 采用的方法是再次创建一个子进程, 示例代码如下:\n\n```c\nif (pid=fork()) { //父进程\n    exit(0);      //结束第一子进程, 第二子进程继续(第二子进程不再是会话组长)\n}\n```\n\n* 关闭打开的文件描述符\n\n\n","source":"_posts/config_skill_experience/system_config/linux/linux_daemo.md","raw":"---\ntitle: Linux守护进程\ndate: 2019-04-14 09:04:17\ncategories:\n- 配置技巧/经验\n- 系统配置\n- linux\ntags:\n- linux\n---\n\n转自[【Linux】守护进程以及实现一个守护进程](https://blog.csdn.net/wenqiang1208/article/details/71550599)\n\n其他关于守护进程的博客:\n\n[Linux系统下创建守护进程（Daemon）](https://blog.csdn.net/linkedin_35878439/article/details/81288889)\n\n<!--more-->\n\n# 什么是守护进程\n\n守护进程也称为精灵进程，是运行在后台进程的一种特殊进程。它独立于控制终端并且周期性地执行某种任务或等待处理某些发生的事件。 \n1. 脱离于控制终端并且在后台运行 \n2. 不受用户登录注销的影响，它们一直在运行着 \nLinux大多数服务器就是用守护进程实现的，例如：Internet服务器inetd，Web服务器httpd\n\n查看系统中的守护进程：使用命令`ps axj` \n凡是TPGID一栏中写着-1的都是没有控制终端的进程，也就是守护进程。 \n在COMMAND一列中用 [ ]括起来的名字表示内核线程，这些线程在内核里创建，没有用户空间代码，通常采用K开头的，表示Kernel\n\n![linux进程](/images/linux/computer-operation/linux_daemo.jpg)\n\n# 实现一个守护进程\n\n* 屏蔽一些控制终端信号\n\n> 这是为了防止守护进程在没有运行起来前, 控制终端收到干扰退出或挂起。\n\n```c\nsignal(SIGTTOU, SIG_IGN)\nsignal(SIGTTIN, SIG_IGN)\nsignal(SIGTSTP, SIG_IGN)\nsignal(SIGNUP,  SIG_IGN)\n```\n\n* 调用fork, 父进程退出\n\n> 保证子进程不是一个组长进程, 方法是在进程中调用fork()使父进程终止, 让守护进程在子进程中后台执行。\n\n```c\n// 调用fork函数, 父进程退出\npid = fork();\nif (pid < 0) {\n    printf(\"error fork\");\n} else if (pid > 0) {\n    // father\n    exit(0);\n}\n```\n\n* setsid创建一个新会话\n\n```c\nSYNOPSIS\n    \n    #include <unistd.h>\n\n    pid_t setsid(void);\n\nDESCRIPTION\n\n    setsid() creates a new session if the calling process is not a process group leader. The calling process is the leader of the new session, the process group leader of the new process group, and has no controlling tty. The process group ID and session ID of the calling process are set to the PID of the calling process. The calling process will be the only process in this new process group and in this new session.\n```\n\n该函数返回值: 调用成功返回新创建的Session的id(就是当前进程的id), 出错返回-1.\n\n注意: 当调用该函数之前, 当前进程不能是进程组的组长, 否则返回-1\n\n所以: 要保证当前进程不是进程组的组长, 先fork创建一个子进程, 这样保证了子进程不可能是该组进程 的第一个进程, 再调用setsid。\n\n成功调用setsid函数的结果\n\n    * 创建一个新的Session, 当前进程成为Session Leader, 当前进程id就是Session的id\n    * 创建一个新的进程组, 当前进程成为进程组的Leader, 当前进程id就是进程组的id\n    * 如果当前进程原本有一个控制终端, 则它失去控制终端, 成为一个没有控制终端的进程\n\n\n* 禁止进程重新打开控制终端\n\n现在, 进程已经成为无终端的会话组长, 但它可以重新申请打开一个控制终端。可以通过使进程不再成为会话组长来禁止进程重新打开控制终端, 采用的方法是再次创建一个子进程, 示例代码如下:\n\n```c\nif (pid=fork()) { //父进程\n    exit(0);      //结束第一子进程, 第二子进程继续(第二子进程不再是会话组长)\n}\n```\n\n* 关闭打开的文件描述符\n\n\n","slug":"config_skill_experience/system_config/linux/linux_daemo","published":1,"updated":"2022-10-07T12:44:39.705Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejrt005o3vsb69lx35m0","content":"<p>转自<a href=\"https://blog.csdn.net/wenqiang1208/article/details/71550599\">【Linux】守护进程以及实现一个守护进程</a></p>\n<p>其他关于守护进程的博客:</p>\n<p><a href=\"https://blog.csdn.net/linkedin_35878439/article/details/81288889\">Linux系统下创建守护进程（Daemon）</a></p>\n<span id=\"more\"></span>\n\n<h1 id=\"什么是守护进程\"><a href=\"#什么是守护进程\" class=\"headerlink\" title=\"什么是守护进程\"></a>什么是守护进程</h1><p>守护进程也称为精灵进程，是运行在后台进程的一种特殊进程。它独立于控制终端并且周期性地执行某种任务或等待处理某些发生的事件。 </p>\n<ol>\n<li>脱离于控制终端并且在后台运行 </li>\n<li>不受用户登录注销的影响，它们一直在运行着<br>Linux大多数服务器就是用守护进程实现的，例如：Internet服务器inetd，Web服务器httpd</li>\n</ol>\n<p>查看系统中的守护进程：使用命令<code>ps axj</code><br>凡是TPGID一栏中写着-1的都是没有控制终端的进程，也就是守护进程。<br>在COMMAND一列中用 [ ]括起来的名字表示内核线程，这些线程在内核里创建，没有用户空间代码，通常采用K开头的，表示Kernel</p>\n<p><img src=\"/images/linux/computer-operation/linux_daemo.jpg\" alt=\"linux进程\"></p>\n<h1 id=\"实现一个守护进程\"><a href=\"#实现一个守护进程\" class=\"headerlink\" title=\"实现一个守护进程\"></a>实现一个守护进程</h1><ul>\n<li>屏蔽一些控制终端信号</li>\n</ul>\n<blockquote>\n<p>这是为了防止守护进程在没有运行起来前, 控制终端收到干扰退出或挂起。</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">signal(SIGTTOU, SIG_IGN)</span><br><span class=\"line\">signal(SIGTTIN, SIG_IGN)</span><br><span class=\"line\">signal(SIGTSTP, SIG_IGN)</span><br><span class=\"line\">signal(SIGNUP,  SIG_IGN)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>调用fork, 父进程退出</li>\n</ul>\n<blockquote>\n<p>保证子进程不是一个组长进程, 方法是在进程中调用fork()使父进程终止, 让守护进程在子进程中后台执行。</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 调用fork函数, 父进程退出</span></span><br><span class=\"line\">pid = fork();</span><br><span class=\"line\"><span class=\"keyword\">if</span> (pid &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;error fork&quot;</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (pid &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// father</span></span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>setsid创建一个新会话</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SYNOPSIS</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">pid_t</span> <span class=\"title\">setsid</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">DESCRIPTION</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">setsid</span><span class=\"params\">()</span> creates a <span class=\"keyword\">new</span> session <span class=\"keyword\">if</span> the calling process is <span class=\"keyword\">not</span> a process group leader. The calling process is the leader of the <span class=\"keyword\">new</span> session, the process group leader of the <span class=\"keyword\">new</span> process group, <span class=\"keyword\">and</span> has no controlling tty. The process group ID <span class=\"keyword\">and</span> session ID of the calling process are <span class=\"built_in\">set</span> to the PID of the calling process. The calling process will be the only process in <span class=\"keyword\">this</span> <span class=\"keyword\">new</span> process group <span class=\"keyword\">and</span> in <span class=\"keyword\">this</span> <span class=\"keyword\">new</span> session.</span></span><br></pre></td></tr></table></figure>\n\n<p>该函数返回值: 调用成功返回新创建的Session的id(就是当前进程的id), 出错返回-1.</p>\n<p>注意: 当调用该函数之前, 当前进程不能是进程组的组长, 否则返回-1</p>\n<p>所以: 要保证当前进程不是进程组的组长, 先fork创建一个子进程, 这样保证了子进程不可能是该组进程 的第一个进程, 再调用setsid。</p>\n<p>成功调用setsid函数的结果</p>\n<pre><code>* 创建一个新的Session, 当前进程成为Session Leader, 当前进程id就是Session的id\n* 创建一个新的进程组, 当前进程成为进程组的Leader, 当前进程id就是进程组的id\n* 如果当前进程原本有一个控制终端, 则它失去控制终端, 成为一个没有控制终端的进程\n</code></pre>\n<ul>\n<li>禁止进程重新打开控制终端</li>\n</ul>\n<p>现在, 进程已经成为无终端的会话组长, 但它可以重新申请打开一个控制终端。可以通过使进程不再成为会话组长来禁止进程重新打开控制终端, 采用的方法是再次创建一个子进程, 示例代码如下:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (pid=fork()) &#123; <span class=\"comment\">//父进程</span></span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);      <span class=\"comment\">//结束第一子进程, 第二子进程继续(第二子进程不再是会话组长)</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>关闭打开的文件描述符</li>\n</ul>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<p>转自<a href=\"https://blog.csdn.net/wenqiang1208/article/details/71550599\">【Linux】守护进程以及实现一个守护进程</a></p>\n<p>其他关于守护进程的博客:</p>\n<p><a href=\"https://blog.csdn.net/linkedin_35878439/article/details/81288889\">Linux系统下创建守护进程（Daemon）</a></p>","more":"<h1 id=\"什么是守护进程\"><a href=\"#什么是守护进程\" class=\"headerlink\" title=\"什么是守护进程\"></a>什么是守护进程</h1><p>守护进程也称为精灵进程，是运行在后台进程的一种特殊进程。它独立于控制终端并且周期性地执行某种任务或等待处理某些发生的事件。 </p>\n<ol>\n<li>脱离于控制终端并且在后台运行 </li>\n<li>不受用户登录注销的影响，它们一直在运行着<br>Linux大多数服务器就是用守护进程实现的，例如：Internet服务器inetd，Web服务器httpd</li>\n</ol>\n<p>查看系统中的守护进程：使用命令<code>ps axj</code><br>凡是TPGID一栏中写着-1的都是没有控制终端的进程，也就是守护进程。<br>在COMMAND一列中用 [ ]括起来的名字表示内核线程，这些线程在内核里创建，没有用户空间代码，通常采用K开头的，表示Kernel</p>\n<p><img src=\"/images/linux/computer-operation/linux_daemo.jpg\" alt=\"linux进程\"></p>\n<h1 id=\"实现一个守护进程\"><a href=\"#实现一个守护进程\" class=\"headerlink\" title=\"实现一个守护进程\"></a>实现一个守护进程</h1><ul>\n<li>屏蔽一些控制终端信号</li>\n</ul>\n<blockquote>\n<p>这是为了防止守护进程在没有运行起来前, 控制终端收到干扰退出或挂起。</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">signal(SIGTTOU, SIG_IGN)</span><br><span class=\"line\">signal(SIGTTIN, SIG_IGN)</span><br><span class=\"line\">signal(SIGTSTP, SIG_IGN)</span><br><span class=\"line\">signal(SIGNUP,  SIG_IGN)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>调用fork, 父进程退出</li>\n</ul>\n<blockquote>\n<p>保证子进程不是一个组长进程, 方法是在进程中调用fork()使父进程终止, 让守护进程在子进程中后台执行。</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 调用fork函数, 父进程退出</span></span><br><span class=\"line\">pid = fork();</span><br><span class=\"line\"><span class=\"keyword\">if</span> (pid &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;error fork&quot;</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (pid &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// father</span></span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>setsid创建一个新会话</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SYNOPSIS</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">pid_t</span> <span class=\"title\">setsid</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">DESCRIPTION</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">setsid</span><span class=\"params\">()</span> creates a <span class=\"keyword\">new</span> session <span class=\"keyword\">if</span> the calling process is <span class=\"keyword\">not</span> a process group leader. The calling process is the leader of the <span class=\"keyword\">new</span> session, the process group leader of the <span class=\"keyword\">new</span> process group, <span class=\"keyword\">and</span> has no controlling tty. The process group ID <span class=\"keyword\">and</span> session ID of the calling process are <span class=\"built_in\">set</span> to the PID of the calling process. The calling process will be the only process in <span class=\"keyword\">this</span> <span class=\"keyword\">new</span> process group <span class=\"keyword\">and</span> in <span class=\"keyword\">this</span> <span class=\"keyword\">new</span> session.</span></span><br></pre></td></tr></table></figure>\n\n<p>该函数返回值: 调用成功返回新创建的Session的id(就是当前进程的id), 出错返回-1.</p>\n<p>注意: 当调用该函数之前, 当前进程不能是进程组的组长, 否则返回-1</p>\n<p>所以: 要保证当前进程不是进程组的组长, 先fork创建一个子进程, 这样保证了子进程不可能是该组进程 的第一个进程, 再调用setsid。</p>\n<p>成功调用setsid函数的结果</p>\n<pre><code>* 创建一个新的Session, 当前进程成为Session Leader, 当前进程id就是Session的id\n* 创建一个新的进程组, 当前进程成为进程组的Leader, 当前进程id就是进程组的id\n* 如果当前进程原本有一个控制终端, 则它失去控制终端, 成为一个没有控制终端的进程\n</code></pre>\n<ul>\n<li>禁止进程重新打开控制终端</li>\n</ul>\n<p>现在, 进程已经成为无终端的会话组长, 但它可以重新申请打开一个控制终端。可以通过使进程不再成为会话组长来禁止进程重新打开控制终端, 采用的方法是再次创建一个子进程, 示例代码如下:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (pid=fork()) &#123; <span class=\"comment\">//父进程</span></span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);      <span class=\"comment\">//结束第一子进程, 第二子进程继续(第二子进程不再是会话组长)</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>关闭打开的文件描述符</li>\n</ul>"},{"title":"CentOS的ssh远程连接遇到的问题","date":"2019-06-21T11:17:15.000Z","_content":"\n# 前言\n\n之前由于在我的surface book 2 上开虚拟机, 然后一直都是本地连接, 所以一直都没啥问题。后来因为我要在另一台电脑上搞点东西, 然后还用到了linux, 所以想着直接局域网下远程访问这台虚拟机应该也是没啥问题的吧, 但是也还是遇到了一些坑, 故此记录一下。\n<!--more-->\n\n# 问题复盘\n\n第一步我直接在另一台电脑上装了putty天真的想像本地连接那样访问这台虚拟机, 遇到的第一个问题就是ip地址问题。\n\n## ip地址\n\n我是使用VM来开的虚拟机, 由于我的虚拟机的网络适配器一开始设置的模式是仅主机模式, 所以局域网内其他的电脑是访问不到这个系统的。那么解决的方式是切换成NAT模式, 和主机共享同一个ip, 这样其他电脑如果想访问这个系统的话直接访问主机的ip就可以了。\n\n## ssh端口\n\n那么接下来可以访问到了之后, 马上就遇到了下一个问题, 就是端口问题。我尝试着使用putty来访问主机的ip, 端口是默认的22, 直接连接到了windows的cmd模式, 由于ssh的默认端口都是22, 所以会直接访问到windows开放的ssh。那么这里可以用端口转发来解决这个问题。\n\n在虚拟网络编辑器下, 点击nat设置, 就可以设置端口转发了。主机端口代表你要使用其他电脑访问这台主机的端口, 设置一个非ssh默认值就可以了, 比如23之类的。虚拟机ip地址则是这台虚拟机的ip加上ssh的默认端口22, 这样就可以直接以主机ip:23的来访问这台虚拟机了。\n\n那么也可以修改linux默认的ssh端口。可以查看[这篇文章](https://blog.csdn.net/mrqiang9001/article/details/78308830)。\n\n# 总结\n\n感觉说的比较笼统, 遇到的问题和解释的内容都不具体, 有功夫的话在重新好好的重构一篇吧。\n","source":"_posts/config_skill_experience/system_config/linux/linux_ssh.md","raw":"---\ntitle: CentOS的ssh远程连接遇到的问题\ndate: 2019-06-21 19:17:15\ncategories:\n- 配置技巧/经验\n- 系统配置\n- linux\ntags:\n- linux\n- ssh\n- centos\n---\n\n# 前言\n\n之前由于在我的surface book 2 上开虚拟机, 然后一直都是本地连接, 所以一直都没啥问题。后来因为我要在另一台电脑上搞点东西, 然后还用到了linux, 所以想着直接局域网下远程访问这台虚拟机应该也是没啥问题的吧, 但是也还是遇到了一些坑, 故此记录一下。\n<!--more-->\n\n# 问题复盘\n\n第一步我直接在另一台电脑上装了putty天真的想像本地连接那样访问这台虚拟机, 遇到的第一个问题就是ip地址问题。\n\n## ip地址\n\n我是使用VM来开的虚拟机, 由于我的虚拟机的网络适配器一开始设置的模式是仅主机模式, 所以局域网内其他的电脑是访问不到这个系统的。那么解决的方式是切换成NAT模式, 和主机共享同一个ip, 这样其他电脑如果想访问这个系统的话直接访问主机的ip就可以了。\n\n## ssh端口\n\n那么接下来可以访问到了之后, 马上就遇到了下一个问题, 就是端口问题。我尝试着使用putty来访问主机的ip, 端口是默认的22, 直接连接到了windows的cmd模式, 由于ssh的默认端口都是22, 所以会直接访问到windows开放的ssh。那么这里可以用端口转发来解决这个问题。\n\n在虚拟网络编辑器下, 点击nat设置, 就可以设置端口转发了。主机端口代表你要使用其他电脑访问这台主机的端口, 设置一个非ssh默认值就可以了, 比如23之类的。虚拟机ip地址则是这台虚拟机的ip加上ssh的默认端口22, 这样就可以直接以主机ip:23的来访问这台虚拟机了。\n\n那么也可以修改linux默认的ssh端口。可以查看[这篇文章](https://blog.csdn.net/mrqiang9001/article/details/78308830)。\n\n# 总结\n\n感觉说的比较笼统, 遇到的问题和解释的内容都不具体, 有功夫的话在重新好好的重构一篇吧。\n","slug":"config_skill_experience/system_config/linux/linux_ssh","published":1,"updated":"2022-10-07T12:45:08.273Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejry005s3vsb9m1043q6","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>之前由于在我的surface book 2 上开虚拟机, 然后一直都是本地连接, 所以一直都没啥问题。后来因为我要在另一台电脑上搞点东西, 然后还用到了linux, 所以想着直接局域网下远程访问这台虚拟机应该也是没啥问题的吧, 但是也还是遇到了一些坑, 故此记录一下。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"问题复盘\"><a href=\"#问题复盘\" class=\"headerlink\" title=\"问题复盘\"></a>问题复盘</h1><p>第一步我直接在另一台电脑上装了putty天真的想像本地连接那样访问这台虚拟机, 遇到的第一个问题就是ip地址问题。</p>\n<h2 id=\"ip地址\"><a href=\"#ip地址\" class=\"headerlink\" title=\"ip地址\"></a>ip地址</h2><p>我是使用VM来开的虚拟机, 由于我的虚拟机的网络适配器一开始设置的模式是仅主机模式, 所以局域网内其他的电脑是访问不到这个系统的。那么解决的方式是切换成NAT模式, 和主机共享同一个ip, 这样其他电脑如果想访问这个系统的话直接访问主机的ip就可以了。</p>\n<h2 id=\"ssh端口\"><a href=\"#ssh端口\" class=\"headerlink\" title=\"ssh端口\"></a>ssh端口</h2><p>那么接下来可以访问到了之后, 马上就遇到了下一个问题, 就是端口问题。我尝试着使用putty来访问主机的ip, 端口是默认的22, 直接连接到了windows的cmd模式, 由于ssh的默认端口都是22, 所以会直接访问到windows开放的ssh。那么这里可以用端口转发来解决这个问题。</p>\n<p>在虚拟网络编辑器下, 点击nat设置, 就可以设置端口转发了。主机端口代表你要使用其他电脑访问这台主机的端口, 设置一个非ssh默认值就可以了, 比如23之类的。虚拟机ip地址则是这台虚拟机的ip加上ssh的默认端口22, 这样就可以直接以主机ip:23的来访问这台虚拟机了。</p>\n<p>那么也可以修改linux默认的ssh端口。可以查看<a href=\"https://blog.csdn.net/mrqiang9001/article/details/78308830\">这篇文章</a>。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>感觉说的比较笼统, 遇到的问题和解释的内容都不具体, 有功夫的话在重新好好的重构一篇吧。</p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>之前由于在我的surface book 2 上开虚拟机, 然后一直都是本地连接, 所以一直都没啥问题。后来因为我要在另一台电脑上搞点东西, 然后还用到了linux, 所以想着直接局域网下远程访问这台虚拟机应该也是没啥问题的吧, 但是也还是遇到了一些坑, 故此记录一下。</p>","more":"<h1 id=\"问题复盘\"><a href=\"#问题复盘\" class=\"headerlink\" title=\"问题复盘\"></a>问题复盘</h1><p>第一步我直接在另一台电脑上装了putty天真的想像本地连接那样访问这台虚拟机, 遇到的第一个问题就是ip地址问题。</p>\n<h2 id=\"ip地址\"><a href=\"#ip地址\" class=\"headerlink\" title=\"ip地址\"></a>ip地址</h2><p>我是使用VM来开的虚拟机, 由于我的虚拟机的网络适配器一开始设置的模式是仅主机模式, 所以局域网内其他的电脑是访问不到这个系统的。那么解决的方式是切换成NAT模式, 和主机共享同一个ip, 这样其他电脑如果想访问这个系统的话直接访问主机的ip就可以了。</p>\n<h2 id=\"ssh端口\"><a href=\"#ssh端口\" class=\"headerlink\" title=\"ssh端口\"></a>ssh端口</h2><p>那么接下来可以访问到了之后, 马上就遇到了下一个问题, 就是端口问题。我尝试着使用putty来访问主机的ip, 端口是默认的22, 直接连接到了windows的cmd模式, 由于ssh的默认端口都是22, 所以会直接访问到windows开放的ssh。那么这里可以用端口转发来解决这个问题。</p>\n<p>在虚拟网络编辑器下, 点击nat设置, 就可以设置端口转发了。主机端口代表你要使用其他电脑访问这台主机的端口, 设置一个非ssh默认值就可以了, 比如23之类的。虚拟机ip地址则是这台虚拟机的ip加上ssh的默认端口22, 这样就可以直接以主机ip:23的来访问这台虚拟机了。</p>\n<p>那么也可以修改linux默认的ssh端口。可以查看<a href=\"https://blog.csdn.net/mrqiang9001/article/details/78308830\">这篇文章</a>。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>感觉说的比较笼统, 遇到的问题和解释的内容都不具体, 有功夫的话在重新好好的重构一篇吧。</p>"},{"title":"在debian上开启ftp","date":"2019-08-14T07:37:29.000Z","_content":"\n# 前言\n我的树莓派到货了, 到手后当然是开始折腾了, 现在打算把以前虚拟机的东西都倒腾到这个小东西上, 然后就想着开个ftp服务, 把一些文件传过去。\n本文完全参考了[这篇博客](https://www.cnblogs.com/wangkeqin/p/9309214.html)\n\n<!--more-->\n\n# 安装vsftpd服务\n\n```bash\nsudo apt install vsftpd\n```\n\n# 配置参数\n\n这里把我的配置文件列出来:\n\n```conf\n# Example config file /etc/vsftpd.conf\n#\n# The default compiled in settings are fairly paranoid. This sample file\n# loosens things up a bit, to make the ftp daemon more usable.\n# Please see vsftpd.conf.5 for all compiled in defaults.\n#\n# READ THIS: This example file is NOT an exhaustive list of vsftpd options.\n# Please read the vsftpd.conf.5 manual page to get a full idea of vsftpd's\n# capabilities.\n#\n#\n# Run standalone?  vsftpd can run either from an inetd or as a standalone\n# daemon started from an initscript.\nlisten=NO\n#\n# This directive enables listening on IPv6 sockets. By default, listening\n# on the IPv6 \"any\" address (::) will accept connections from both IPv6\n# and IPv4 clients. It is not necessary to listen on *both* IPv4 and IPv6\n# sockets. If you want that (perhaps because you want to listen on specific\n# addresses) then you must run two copies of vsftpd with two configuration\n# files.\nlisten_ipv6=YES\n#\n# Allow anonymous FTP? (Disabled by default).\n# 是否匿名登陆\nanonymous_enable=NO\n#\n# Uncomment this to allow local users to log in.\nlocal_enable=YES\n#\n# Uncomment this to enable any form of FTP write command.\n# 是否允许上传文件\nwrite_enable=YES\n#\n# Default umask for local users is 077\\. You may wish to change this to 022,\n# if your users expect that (022 is used by most other ftpd's)\nlocal_umask=022\n#\n# Uncomment this to allow the anonymous FTP user to upload files. This only\n# has an effect if the above global write enable is activated. Also, you will\n# obviously need to create a directory writable by the FTP user.\n#anon_upload_enable=YES\n#\n# Uncomment this if you want the anonymous FTP user to be able to create\n# new directories.\n#anon_mkdir_write_enable=YES\n#\n# Activate directory messages - messages given to remote users when they\n# go into a certain directory.\ndirmessage_enable=YES\n#\n# If enabled, vsftpd will display directory listings with the time\n# in  your  local  time  zone.  The default is to display GMT. The\n# times returned by the MDTM FTP command are also affected by this\n# option.\nuse_localtime=YES\n#\n# Activate logging of uploads/downloads.\n# 开启日志\nxferlog_enable=YES\n#\n# Make sure PORT transfer connections originate from port 20 (ftp-data).\nconnect_from_port_20=YES\n#\n# If you want, you can arrange for uploaded anonymous files to be owned by\n# a different user. Note! Using \"root\" for uploaded files is not\n# recommended!\n#chown_uploads=YES\n#chown_username=whoever\n#\n# You may override where the log file goes if you like. The default is shown\n# below.\n# 日志文件路径\nxferlog_file=/var/log/vsftpd.log\n#\n# If you want, you can have your log file in standard ftpd xferlog format.\n# Note that the default log file location is /var/log/xferlog in this case.\n# 设置日志为标准输出\nxferlog_std_format=YES\n#\n# You may change the default value for timing out an idle session.\n#idle_session_timeout=600\n#\n# You may change the default value for timing out a data connection.\n#data_connection_timeout=120\n#\n# It is recommended that you define on your system a unique user which the\n# ftp server can use as a totally isolated and unprivileged user.\n#nopriv_user=ftpsecure\n#\n# Enable this and the server will recognise asynchronous ABOR requests. Not\n# recommended for security (the code is non-trivial). Not enabling it,\n# however, may confuse older FTP clients.\n#async_abor_enable=YES\n#\n# By default the server will pretend to allow ASCII mode but in fact ignore\n# the request. Turn on the below options to have the server actually do ASCII\n# mangling on files when in ASCII mode.\n# Beware that on some FTP servers, ASCII support allows a denial of service\n# attack (DoS) via the command \"SIZE /big/file\" in ASCII mode. vsftpd\n# predicted this attack and has always been safe, reporting the size of the\n# raw file.\n# ASCII mangling is a horrible feature of the protocol.\n#ascii_upload_enable=YES\n#ascii_download_enable=YES\n#\n# You may fully customise the login banner string:\n# 在使用shell访问ftp时可以看到的欢迎语句\nftpd_banner=Welcome to blah FTP service.\n#\n# You may specify a file of disallowed anonymous e-mail addresses. Apparently\n# useful for combatting certain DoS attacks.\n#deny_email_enable=YES\n# (default follows)\n#banned_email_file=/etc/vsftpd.banned_emails\n#\n# You may restrict local users to their home directories.  See the FAQ for\n# the possible risks in this before using chroot_local_user or\n# chroot_list_enable below.\n#chroot_local_user=YES\n#\n# You may specify an explicit list of local users to chroot() to their home\n# directory. If chroot_local_user is YES, then this list becomes a list of\n# users to NOT chroot().\n# (Warning! chroot'ing can be very dangerous. If using chroot, make sure that\n# the user does not have write access to the top level directory within the\n# chroot)\n# 本地用户登录\nchroot_local_user=YES\n# 用户名单\nchroot_list_enable=YES\nuser_sub_token=$USER\nlocal_root=/home/$USER/ftp\n# (default follows)\n# 用户名单文件路径\nchroot_list_file=/etc/vsftpd.chroot_list\n#\n# You may activate the \"-R\" option to the builtin ls. This is disabled by\n# default to avoid remote users being able to cause excessive I/O on large\n# sites. However, some broken FTP clients such as \"ncftp\" and \"mirror\" assume\n# the presence of the \"-R\" option, so there is a strong case for enabling it.\n#ls_recurse_enable=YES\n#\n# Customization\n#\n# Some of vsftpd's settings don't fit the filesystem layout by\n# default.\n#\n# This option should be the name of a directory which is empty.  Also, the\n# directory should not be writable by the ftp user. This directory is used\n# as a secure chroot() jail at times vsftpd does not require filesystem\n# access.\nsecure_chroot_dir=/var/run/vsftpd/empty\n#\n# This string is the name of the PAM service vsftpd will use.\npam_service_name=ftp\n#\n# This option specifies the location of the RSA certificate to use for SSL\n# encrypted connections.\nrsa_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem\nrsa_private_key_file=/etc/ssl/private/ssl-cert-snakeoil.key\nssl_enable=NO\n\n#\n# Uncomment this to indicate that vsftpd use a utf8 filesystem.\nutf8_filesystem=YES\n```\n\n**注意, 这里 `pam_service_name`, 如果是ubuntu和dibian用户需要更改成ftp(原来是vsftpd), 如果不设置则不能登录。**\n\n如果登录后出现如下错误，则在/etc/vsftpd.conf文件内添加allow_writeable_chroot=YES\n\n```shell\n500 OOPS: vsftpd: refusing to run with writable root inside chroot ()\n```\n\n# 创建ftp用户\n\n```shell\n# 创建用户的根目录\nmkdir /home/ftpuser\n# 创建组\ngroupadd ftpgroup\n# 添加用户\nsudo useradd ftpuser -g ftpgroup -d /home/ftpuser -m\n# 给用户设置密码\nsudo passwd ftpuser\nmkdir /home/ftpuser/ftp\nchmod 777 -R /home/username/ftp\nusermod -s /sbin/nologin ftpuser\n```\n\n# 添加用户名单\n\n```\n> /etc/vsftpd.chroot_list\n# 将ftpuser写到文件中\n```\n\n# 启动vsftpd或者重启\n\n```shell\nsystemctl start vsftpd 或 service vsftpd start\nsystemctl restart vsftpd 或 service vsftpd restart\n```\n\n# 登录\n\n直接在文件管理器或者浏览器中输入 `ftp://ipaddress`\n","source":"_posts/config_skill_experience/system_config/linux/open-ftp.md","raw":"---\ntitle: 在debian上开启ftp\ndate: 2019-08-14 15:37:29\ncategories:\n- 配置技巧/经验\n- 系统配置\n- linux\ntags:\n- linux的使用\n---\n\n# 前言\n我的树莓派到货了, 到手后当然是开始折腾了, 现在打算把以前虚拟机的东西都倒腾到这个小东西上, 然后就想着开个ftp服务, 把一些文件传过去。\n本文完全参考了[这篇博客](https://www.cnblogs.com/wangkeqin/p/9309214.html)\n\n<!--more-->\n\n# 安装vsftpd服务\n\n```bash\nsudo apt install vsftpd\n```\n\n# 配置参数\n\n这里把我的配置文件列出来:\n\n```conf\n# Example config file /etc/vsftpd.conf\n#\n# The default compiled in settings are fairly paranoid. This sample file\n# loosens things up a bit, to make the ftp daemon more usable.\n# Please see vsftpd.conf.5 for all compiled in defaults.\n#\n# READ THIS: This example file is NOT an exhaustive list of vsftpd options.\n# Please read the vsftpd.conf.5 manual page to get a full idea of vsftpd's\n# capabilities.\n#\n#\n# Run standalone?  vsftpd can run either from an inetd or as a standalone\n# daemon started from an initscript.\nlisten=NO\n#\n# This directive enables listening on IPv6 sockets. By default, listening\n# on the IPv6 \"any\" address (::) will accept connections from both IPv6\n# and IPv4 clients. It is not necessary to listen on *both* IPv4 and IPv6\n# sockets. If you want that (perhaps because you want to listen on specific\n# addresses) then you must run two copies of vsftpd with two configuration\n# files.\nlisten_ipv6=YES\n#\n# Allow anonymous FTP? (Disabled by default).\n# 是否匿名登陆\nanonymous_enable=NO\n#\n# Uncomment this to allow local users to log in.\nlocal_enable=YES\n#\n# Uncomment this to enable any form of FTP write command.\n# 是否允许上传文件\nwrite_enable=YES\n#\n# Default umask for local users is 077\\. You may wish to change this to 022,\n# if your users expect that (022 is used by most other ftpd's)\nlocal_umask=022\n#\n# Uncomment this to allow the anonymous FTP user to upload files. This only\n# has an effect if the above global write enable is activated. Also, you will\n# obviously need to create a directory writable by the FTP user.\n#anon_upload_enable=YES\n#\n# Uncomment this if you want the anonymous FTP user to be able to create\n# new directories.\n#anon_mkdir_write_enable=YES\n#\n# Activate directory messages - messages given to remote users when they\n# go into a certain directory.\ndirmessage_enable=YES\n#\n# If enabled, vsftpd will display directory listings with the time\n# in  your  local  time  zone.  The default is to display GMT. The\n# times returned by the MDTM FTP command are also affected by this\n# option.\nuse_localtime=YES\n#\n# Activate logging of uploads/downloads.\n# 开启日志\nxferlog_enable=YES\n#\n# Make sure PORT transfer connections originate from port 20 (ftp-data).\nconnect_from_port_20=YES\n#\n# If you want, you can arrange for uploaded anonymous files to be owned by\n# a different user. Note! Using \"root\" for uploaded files is not\n# recommended!\n#chown_uploads=YES\n#chown_username=whoever\n#\n# You may override where the log file goes if you like. The default is shown\n# below.\n# 日志文件路径\nxferlog_file=/var/log/vsftpd.log\n#\n# If you want, you can have your log file in standard ftpd xferlog format.\n# Note that the default log file location is /var/log/xferlog in this case.\n# 设置日志为标准输出\nxferlog_std_format=YES\n#\n# You may change the default value for timing out an idle session.\n#idle_session_timeout=600\n#\n# You may change the default value for timing out a data connection.\n#data_connection_timeout=120\n#\n# It is recommended that you define on your system a unique user which the\n# ftp server can use as a totally isolated and unprivileged user.\n#nopriv_user=ftpsecure\n#\n# Enable this and the server will recognise asynchronous ABOR requests. Not\n# recommended for security (the code is non-trivial). Not enabling it,\n# however, may confuse older FTP clients.\n#async_abor_enable=YES\n#\n# By default the server will pretend to allow ASCII mode but in fact ignore\n# the request. Turn on the below options to have the server actually do ASCII\n# mangling on files when in ASCII mode.\n# Beware that on some FTP servers, ASCII support allows a denial of service\n# attack (DoS) via the command \"SIZE /big/file\" in ASCII mode. vsftpd\n# predicted this attack and has always been safe, reporting the size of the\n# raw file.\n# ASCII mangling is a horrible feature of the protocol.\n#ascii_upload_enable=YES\n#ascii_download_enable=YES\n#\n# You may fully customise the login banner string:\n# 在使用shell访问ftp时可以看到的欢迎语句\nftpd_banner=Welcome to blah FTP service.\n#\n# You may specify a file of disallowed anonymous e-mail addresses. Apparently\n# useful for combatting certain DoS attacks.\n#deny_email_enable=YES\n# (default follows)\n#banned_email_file=/etc/vsftpd.banned_emails\n#\n# You may restrict local users to their home directories.  See the FAQ for\n# the possible risks in this before using chroot_local_user or\n# chroot_list_enable below.\n#chroot_local_user=YES\n#\n# You may specify an explicit list of local users to chroot() to their home\n# directory. If chroot_local_user is YES, then this list becomes a list of\n# users to NOT chroot().\n# (Warning! chroot'ing can be very dangerous. If using chroot, make sure that\n# the user does not have write access to the top level directory within the\n# chroot)\n# 本地用户登录\nchroot_local_user=YES\n# 用户名单\nchroot_list_enable=YES\nuser_sub_token=$USER\nlocal_root=/home/$USER/ftp\n# (default follows)\n# 用户名单文件路径\nchroot_list_file=/etc/vsftpd.chroot_list\n#\n# You may activate the \"-R\" option to the builtin ls. This is disabled by\n# default to avoid remote users being able to cause excessive I/O on large\n# sites. However, some broken FTP clients such as \"ncftp\" and \"mirror\" assume\n# the presence of the \"-R\" option, so there is a strong case for enabling it.\n#ls_recurse_enable=YES\n#\n# Customization\n#\n# Some of vsftpd's settings don't fit the filesystem layout by\n# default.\n#\n# This option should be the name of a directory which is empty.  Also, the\n# directory should not be writable by the ftp user. This directory is used\n# as a secure chroot() jail at times vsftpd does not require filesystem\n# access.\nsecure_chroot_dir=/var/run/vsftpd/empty\n#\n# This string is the name of the PAM service vsftpd will use.\npam_service_name=ftp\n#\n# This option specifies the location of the RSA certificate to use for SSL\n# encrypted connections.\nrsa_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem\nrsa_private_key_file=/etc/ssl/private/ssl-cert-snakeoil.key\nssl_enable=NO\n\n#\n# Uncomment this to indicate that vsftpd use a utf8 filesystem.\nutf8_filesystem=YES\n```\n\n**注意, 这里 `pam_service_name`, 如果是ubuntu和dibian用户需要更改成ftp(原来是vsftpd), 如果不设置则不能登录。**\n\n如果登录后出现如下错误，则在/etc/vsftpd.conf文件内添加allow_writeable_chroot=YES\n\n```shell\n500 OOPS: vsftpd: refusing to run with writable root inside chroot ()\n```\n\n# 创建ftp用户\n\n```shell\n# 创建用户的根目录\nmkdir /home/ftpuser\n# 创建组\ngroupadd ftpgroup\n# 添加用户\nsudo useradd ftpuser -g ftpgroup -d /home/ftpuser -m\n# 给用户设置密码\nsudo passwd ftpuser\nmkdir /home/ftpuser/ftp\nchmod 777 -R /home/username/ftp\nusermod -s /sbin/nologin ftpuser\n```\n\n# 添加用户名单\n\n```\n> /etc/vsftpd.chroot_list\n# 将ftpuser写到文件中\n```\n\n# 启动vsftpd或者重启\n\n```shell\nsystemctl start vsftpd 或 service vsftpd start\nsystemctl restart vsftpd 或 service vsftpd restart\n```\n\n# 登录\n\n直接在文件管理器或者浏览器中输入 `ftp://ipaddress`\n","slug":"config_skill_experience/system_config/linux/open-ftp","published":1,"updated":"2022-10-03T02:37:06.936Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejs2005t3vsb7vt565k3","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>我的树莓派到货了, 到手后当然是开始折腾了, 现在打算把以前虚拟机的东西都倒腾到这个小东西上, 然后就想着开个ftp服务, 把一些文件传过去。<br>本文完全参考了<a href=\"https://www.cnblogs.com/wangkeqin/p/9309214.html\">这篇博客</a></p>\n<span id=\"more\"></span>\n\n<h1 id=\"安装vsftpd服务\"><a href=\"#安装vsftpd服务\" class=\"headerlink\" title=\"安装vsftpd服务\"></a>安装vsftpd服务</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install vsftpd</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"配置参数\"><a href=\"#配置参数\" class=\"headerlink\" title=\"配置参数\"></a>配置参数</h1><p>这里把我的配置文件列出来:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Example config file /etc/vsftpd.conf</span><br><span class=\"line\">#</span><br><span class=\"line\"># The default compiled in settings are fairly paranoid. This sample file</span><br><span class=\"line\"># loosens things up a bit, to make the ftp daemon more usable.</span><br><span class=\"line\"># Please see vsftpd.conf.5 for all compiled in defaults.</span><br><span class=\"line\">#</span><br><span class=\"line\"># READ THIS: This example file is NOT an exhaustive list of vsftpd options.</span><br><span class=\"line\"># Please read the vsftpd.conf.5 manual page to get a full idea of vsftpd&#x27;s</span><br><span class=\"line\"># capabilities.</span><br><span class=\"line\">#</span><br><span class=\"line\">#</span><br><span class=\"line\"># Run standalone?  vsftpd can run either from an inetd or as a standalone</span><br><span class=\"line\"># daemon started from an initscript.</span><br><span class=\"line\">listen=NO</span><br><span class=\"line\">#</span><br><span class=\"line\"># This directive enables listening on IPv6 sockets. By default, listening</span><br><span class=\"line\"># on the IPv6 &quot;any&quot; address (::) will accept connections from both IPv6</span><br><span class=\"line\"># and IPv4 clients. It is not necessary to listen on *both* IPv4 and IPv6</span><br><span class=\"line\"># sockets. If you want that (perhaps because you want to listen on specific</span><br><span class=\"line\"># addresses) then you must run two copies of vsftpd with two configuration</span><br><span class=\"line\"># files.</span><br><span class=\"line\">listen_ipv6=YES</span><br><span class=\"line\">#</span><br><span class=\"line\"># Allow anonymous FTP? (Disabled by default).</span><br><span class=\"line\"># 是否匿名登陆</span><br><span class=\"line\">anonymous_enable=NO</span><br><span class=\"line\">#</span><br><span class=\"line\"># Uncomment this to allow local users to log in.</span><br><span class=\"line\">local_enable=YES</span><br><span class=\"line\">#</span><br><span class=\"line\"># Uncomment this to enable any form of FTP write command.</span><br><span class=\"line\"># 是否允许上传文件</span><br><span class=\"line\">write_enable=YES</span><br><span class=\"line\">#</span><br><span class=\"line\"># Default umask for local users is 077\\. You may wish to change this to 022,</span><br><span class=\"line\"># if your users expect that (022 is used by most other ftpd&#x27;s)</span><br><span class=\"line\">local_umask=022</span><br><span class=\"line\">#</span><br><span class=\"line\"># Uncomment this to allow the anonymous FTP user to upload files. This only</span><br><span class=\"line\"># has an effect if the above global write enable is activated. Also, you will</span><br><span class=\"line\"># obviously need to create a directory writable by the FTP user.</span><br><span class=\"line\">#anon_upload_enable=YES</span><br><span class=\"line\">#</span><br><span class=\"line\"># Uncomment this if you want the anonymous FTP user to be able to create</span><br><span class=\"line\"># new directories.</span><br><span class=\"line\">#anon_mkdir_write_enable=YES</span><br><span class=\"line\">#</span><br><span class=\"line\"># Activate directory messages - messages given to remote users when they</span><br><span class=\"line\"># go into a certain directory.</span><br><span class=\"line\">dirmessage_enable=YES</span><br><span class=\"line\">#</span><br><span class=\"line\"># If enabled, vsftpd will display directory listings with the time</span><br><span class=\"line\"># in  your  local  time  zone.  The default is to display GMT. The</span><br><span class=\"line\"># times returned by the MDTM FTP command are also affected by this</span><br><span class=\"line\"># option.</span><br><span class=\"line\">use_localtime=YES</span><br><span class=\"line\">#</span><br><span class=\"line\"># Activate logging of uploads/downloads.</span><br><span class=\"line\"># 开启日志</span><br><span class=\"line\">xferlog_enable=YES</span><br><span class=\"line\">#</span><br><span class=\"line\"># Make sure PORT transfer connections originate from port 20 (ftp-data).</span><br><span class=\"line\">connect_from_port_20=YES</span><br><span class=\"line\">#</span><br><span class=\"line\"># If you want, you can arrange for uploaded anonymous files to be owned by</span><br><span class=\"line\"># a different user. Note! Using &quot;root&quot; for uploaded files is not</span><br><span class=\"line\"># recommended!</span><br><span class=\"line\">#chown_uploads=YES</span><br><span class=\"line\">#chown_username=whoever</span><br><span class=\"line\">#</span><br><span class=\"line\"># You may override where the log file goes if you like. The default is shown</span><br><span class=\"line\"># below.</span><br><span class=\"line\"># 日志文件路径</span><br><span class=\"line\">xferlog_file=/var/log/vsftpd.log</span><br><span class=\"line\">#</span><br><span class=\"line\"># If you want, you can have your log file in standard ftpd xferlog format.</span><br><span class=\"line\"># Note that the default log file location is /var/log/xferlog in this case.</span><br><span class=\"line\"># 设置日志为标准输出</span><br><span class=\"line\">xferlog_std_format=YES</span><br><span class=\"line\">#</span><br><span class=\"line\"># You may change the default value for timing out an idle session.</span><br><span class=\"line\">#idle_session_timeout=600</span><br><span class=\"line\">#</span><br><span class=\"line\"># You may change the default value for timing out a data connection.</span><br><span class=\"line\">#data_connection_timeout=120</span><br><span class=\"line\">#</span><br><span class=\"line\"># It is recommended that you define on your system a unique user which the</span><br><span class=\"line\"># ftp server can use as a totally isolated and unprivileged user.</span><br><span class=\"line\">#nopriv_user=ftpsecure</span><br><span class=\"line\">#</span><br><span class=\"line\"># Enable this and the server will recognise asynchronous ABOR requests. Not</span><br><span class=\"line\"># recommended for security (the code is non-trivial). Not enabling it,</span><br><span class=\"line\"># however, may confuse older FTP clients.</span><br><span class=\"line\">#async_abor_enable=YES</span><br><span class=\"line\">#</span><br><span class=\"line\"># By default the server will pretend to allow ASCII mode but in fact ignore</span><br><span class=\"line\"># the request. Turn on the below options to have the server actually do ASCII</span><br><span class=\"line\"># mangling on files when in ASCII mode.</span><br><span class=\"line\"># Beware that on some FTP servers, ASCII support allows a denial of service</span><br><span class=\"line\"># attack (DoS) via the command &quot;SIZE /big/file&quot; in ASCII mode. vsftpd</span><br><span class=\"line\"># predicted this attack and has always been safe, reporting the size of the</span><br><span class=\"line\"># raw file.</span><br><span class=\"line\"># ASCII mangling is a horrible feature of the protocol.</span><br><span class=\"line\">#ascii_upload_enable=YES</span><br><span class=\"line\">#ascii_download_enable=YES</span><br><span class=\"line\">#</span><br><span class=\"line\"># You may fully customise the login banner string:</span><br><span class=\"line\"># 在使用shell访问ftp时可以看到的欢迎语句</span><br><span class=\"line\">ftpd_banner=Welcome to blah FTP service.</span><br><span class=\"line\">#</span><br><span class=\"line\"># You may specify a file of disallowed anonymous e-mail addresses. Apparently</span><br><span class=\"line\"># useful for combatting certain DoS attacks.</span><br><span class=\"line\">#deny_email_enable=YES</span><br><span class=\"line\"># (default follows)</span><br><span class=\"line\">#banned_email_file=/etc/vsftpd.banned_emails</span><br><span class=\"line\">#</span><br><span class=\"line\"># You may restrict local users to their home directories.  See the FAQ for</span><br><span class=\"line\"># the possible risks in this before using chroot_local_user or</span><br><span class=\"line\"># chroot_list_enable below.</span><br><span class=\"line\">#chroot_local_user=YES</span><br><span class=\"line\">#</span><br><span class=\"line\"># You may specify an explicit list of local users to chroot() to their home</span><br><span class=\"line\"># directory. If chroot_local_user is YES, then this list becomes a list of</span><br><span class=\"line\"># users to NOT chroot().</span><br><span class=\"line\"># (Warning! chroot&#x27;ing can be very dangerous. If using chroot, make sure that</span><br><span class=\"line\"># the user does not have write access to the top level directory within the</span><br><span class=\"line\"># chroot)</span><br><span class=\"line\"># 本地用户登录</span><br><span class=\"line\">chroot_local_user=YES</span><br><span class=\"line\"># 用户名单</span><br><span class=\"line\">chroot_list_enable=YES</span><br><span class=\"line\">user_sub_token=$USER</span><br><span class=\"line\">local_root=/home/$USER/ftp</span><br><span class=\"line\"># (default follows)</span><br><span class=\"line\"># 用户名单文件路径</span><br><span class=\"line\">chroot_list_file=/etc/vsftpd.chroot_list</span><br><span class=\"line\">#</span><br><span class=\"line\"># You may activate the &quot;-R&quot; option to the builtin ls. This is disabled by</span><br><span class=\"line\"># default to avoid remote users being able to cause excessive I/O on large</span><br><span class=\"line\"># sites. However, some broken FTP clients such as &quot;ncftp&quot; and &quot;mirror&quot; assume</span><br><span class=\"line\"># the presence of the &quot;-R&quot; option, so there is a strong case for enabling it.</span><br><span class=\"line\">#ls_recurse_enable=YES</span><br><span class=\"line\">#</span><br><span class=\"line\"># Customization</span><br><span class=\"line\">#</span><br><span class=\"line\"># Some of vsftpd&#x27;s settings don&#x27;t fit the filesystem layout by</span><br><span class=\"line\"># default.</span><br><span class=\"line\">#</span><br><span class=\"line\"># This option should be the name of a directory which is empty.  Also, the</span><br><span class=\"line\"># directory should not be writable by the ftp user. This directory is used</span><br><span class=\"line\"># as a secure chroot() jail at times vsftpd does not require filesystem</span><br><span class=\"line\"># access.</span><br><span class=\"line\">secure_chroot_dir=/var/run/vsftpd/empty</span><br><span class=\"line\">#</span><br><span class=\"line\"># This string is the name of the PAM service vsftpd will use.</span><br><span class=\"line\">pam_service_name=ftp</span><br><span class=\"line\">#</span><br><span class=\"line\"># This option specifies the location of the RSA certificate to use for SSL</span><br><span class=\"line\"># encrypted connections.</span><br><span class=\"line\">rsa_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem</span><br><span class=\"line\">rsa_private_key_file=/etc/ssl/private/ssl-cert-snakeoil.key</span><br><span class=\"line\">ssl_enable=NO</span><br><span class=\"line\"></span><br><span class=\"line\">#</span><br><span class=\"line\"># Uncomment this to indicate that vsftpd use a utf8 filesystem.</span><br><span class=\"line\">utf8_filesystem=YES</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意, 这里 <code>pam_service_name</code>, 如果是ubuntu和dibian用户需要更改成ftp(原来是vsftpd), 如果不设置则不能登录。</strong></p>\n<p>如果登录后出现如下错误，则在&#x2F;etc&#x2F;vsftpd.conf文件内添加allow_writeable_chroot&#x3D;YES</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">500 OOPS: vsftpd: refusing to run with writable root inside chroot ()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"创建ftp用户\"><a href=\"#创建ftp用户\" class=\"headerlink\" title=\"创建ftp用户\"></a>创建ftp用户</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 创建用户的根目录</span></span><br><span class=\"line\">mkdir /home/ftpuser</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 创建组</span></span><br><span class=\"line\">groupadd ftpgroup</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 添加用户</span></span><br><span class=\"line\">sudo useradd ftpuser -g ftpgroup -d /home/ftpuser -m</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 给用户设置密码</span></span><br><span class=\"line\">sudo passwd ftpuser</span><br><span class=\"line\">mkdir /home/ftpuser/ftp</span><br><span class=\"line\">chmod 777 -R /home/username/ftp</span><br><span class=\"line\">usermod -s /sbin/nologin ftpuser</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"添加用户名单\"><a href=\"#添加用户名单\" class=\"headerlink\" title=\"添加用户名单\"></a>添加用户名单</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; /etc/vsftpd.chroot_list</span><br><span class=\"line\"># 将ftpuser写到文件中</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"启动vsftpd或者重启\"><a href=\"#启动vsftpd或者重启\" class=\"headerlink\" title=\"启动vsftpd或者重启\"></a>启动vsftpd或者重启</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start vsftpd 或 service vsftpd start</span><br><span class=\"line\">systemctl restart vsftpd 或 service vsftpd restart</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"登录\"><a href=\"#登录\" class=\"headerlink\" title=\"登录\"></a>登录</h1><p>直接在文件管理器或者浏览器中输入 <code>ftp://ipaddress</code></p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>我的树莓派到货了, 到手后当然是开始折腾了, 现在打算把以前虚拟机的东西都倒腾到这个小东西上, 然后就想着开个ftp服务, 把一些文件传过去。<br>本文完全参考了<a href=\"https://www.cnblogs.com/wangkeqin/p/9309214.html\">这篇博客</a></p>","more":"<h1 id=\"安装vsftpd服务\"><a href=\"#安装vsftpd服务\" class=\"headerlink\" title=\"安装vsftpd服务\"></a>安装vsftpd服务</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install vsftpd</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"配置参数\"><a href=\"#配置参数\" class=\"headerlink\" title=\"配置参数\"></a>配置参数</h1><p>这里把我的配置文件列出来:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Example config file /etc/vsftpd.conf</span><br><span class=\"line\">#</span><br><span class=\"line\"># The default compiled in settings are fairly paranoid. This sample file</span><br><span class=\"line\"># loosens things up a bit, to make the ftp daemon more usable.</span><br><span class=\"line\"># Please see vsftpd.conf.5 for all compiled in defaults.</span><br><span class=\"line\">#</span><br><span class=\"line\"># READ THIS: This example file is NOT an exhaustive list of vsftpd options.</span><br><span class=\"line\"># Please read the vsftpd.conf.5 manual page to get a full idea of vsftpd&#x27;s</span><br><span class=\"line\"># capabilities.</span><br><span class=\"line\">#</span><br><span class=\"line\">#</span><br><span class=\"line\"># Run standalone?  vsftpd can run either from an inetd or as a standalone</span><br><span class=\"line\"># daemon started from an initscript.</span><br><span class=\"line\">listen=NO</span><br><span class=\"line\">#</span><br><span class=\"line\"># This directive enables listening on IPv6 sockets. By default, listening</span><br><span class=\"line\"># on the IPv6 &quot;any&quot; address (::) will accept connections from both IPv6</span><br><span class=\"line\"># and IPv4 clients. It is not necessary to listen on *both* IPv4 and IPv6</span><br><span class=\"line\"># sockets. If you want that (perhaps because you want to listen on specific</span><br><span class=\"line\"># addresses) then you must run two copies of vsftpd with two configuration</span><br><span class=\"line\"># files.</span><br><span class=\"line\">listen_ipv6=YES</span><br><span class=\"line\">#</span><br><span class=\"line\"># Allow anonymous FTP? (Disabled by default).</span><br><span class=\"line\"># 是否匿名登陆</span><br><span class=\"line\">anonymous_enable=NO</span><br><span class=\"line\">#</span><br><span class=\"line\"># Uncomment this to allow local users to log in.</span><br><span class=\"line\">local_enable=YES</span><br><span class=\"line\">#</span><br><span class=\"line\"># Uncomment this to enable any form of FTP write command.</span><br><span class=\"line\"># 是否允许上传文件</span><br><span class=\"line\">write_enable=YES</span><br><span class=\"line\">#</span><br><span class=\"line\"># Default umask for local users is 077\\. You may wish to change this to 022,</span><br><span class=\"line\"># if your users expect that (022 is used by most other ftpd&#x27;s)</span><br><span class=\"line\">local_umask=022</span><br><span class=\"line\">#</span><br><span class=\"line\"># Uncomment this to allow the anonymous FTP user to upload files. This only</span><br><span class=\"line\"># has an effect if the above global write enable is activated. Also, you will</span><br><span class=\"line\"># obviously need to create a directory writable by the FTP user.</span><br><span class=\"line\">#anon_upload_enable=YES</span><br><span class=\"line\">#</span><br><span class=\"line\"># Uncomment this if you want the anonymous FTP user to be able to create</span><br><span class=\"line\"># new directories.</span><br><span class=\"line\">#anon_mkdir_write_enable=YES</span><br><span class=\"line\">#</span><br><span class=\"line\"># Activate directory messages - messages given to remote users when they</span><br><span class=\"line\"># go into a certain directory.</span><br><span class=\"line\">dirmessage_enable=YES</span><br><span class=\"line\">#</span><br><span class=\"line\"># If enabled, vsftpd will display directory listings with the time</span><br><span class=\"line\"># in  your  local  time  zone.  The default is to display GMT. The</span><br><span class=\"line\"># times returned by the MDTM FTP command are also affected by this</span><br><span class=\"line\"># option.</span><br><span class=\"line\">use_localtime=YES</span><br><span class=\"line\">#</span><br><span class=\"line\"># Activate logging of uploads/downloads.</span><br><span class=\"line\"># 开启日志</span><br><span class=\"line\">xferlog_enable=YES</span><br><span class=\"line\">#</span><br><span class=\"line\"># Make sure PORT transfer connections originate from port 20 (ftp-data).</span><br><span class=\"line\">connect_from_port_20=YES</span><br><span class=\"line\">#</span><br><span class=\"line\"># If you want, you can arrange for uploaded anonymous files to be owned by</span><br><span class=\"line\"># a different user. Note! Using &quot;root&quot; for uploaded files is not</span><br><span class=\"line\"># recommended!</span><br><span class=\"line\">#chown_uploads=YES</span><br><span class=\"line\">#chown_username=whoever</span><br><span class=\"line\">#</span><br><span class=\"line\"># You may override where the log file goes if you like. The default is shown</span><br><span class=\"line\"># below.</span><br><span class=\"line\"># 日志文件路径</span><br><span class=\"line\">xferlog_file=/var/log/vsftpd.log</span><br><span class=\"line\">#</span><br><span class=\"line\"># If you want, you can have your log file in standard ftpd xferlog format.</span><br><span class=\"line\"># Note that the default log file location is /var/log/xferlog in this case.</span><br><span class=\"line\"># 设置日志为标准输出</span><br><span class=\"line\">xferlog_std_format=YES</span><br><span class=\"line\">#</span><br><span class=\"line\"># You may change the default value for timing out an idle session.</span><br><span class=\"line\">#idle_session_timeout=600</span><br><span class=\"line\">#</span><br><span class=\"line\"># You may change the default value for timing out a data connection.</span><br><span class=\"line\">#data_connection_timeout=120</span><br><span class=\"line\">#</span><br><span class=\"line\"># It is recommended that you define on your system a unique user which the</span><br><span class=\"line\"># ftp server can use as a totally isolated and unprivileged user.</span><br><span class=\"line\">#nopriv_user=ftpsecure</span><br><span class=\"line\">#</span><br><span class=\"line\"># Enable this and the server will recognise asynchronous ABOR requests. Not</span><br><span class=\"line\"># recommended for security (the code is non-trivial). Not enabling it,</span><br><span class=\"line\"># however, may confuse older FTP clients.</span><br><span class=\"line\">#async_abor_enable=YES</span><br><span class=\"line\">#</span><br><span class=\"line\"># By default the server will pretend to allow ASCII mode but in fact ignore</span><br><span class=\"line\"># the request. Turn on the below options to have the server actually do ASCII</span><br><span class=\"line\"># mangling on files when in ASCII mode.</span><br><span class=\"line\"># Beware that on some FTP servers, ASCII support allows a denial of service</span><br><span class=\"line\"># attack (DoS) via the command &quot;SIZE /big/file&quot; in ASCII mode. vsftpd</span><br><span class=\"line\"># predicted this attack and has always been safe, reporting the size of the</span><br><span class=\"line\"># raw file.</span><br><span class=\"line\"># ASCII mangling is a horrible feature of the protocol.</span><br><span class=\"line\">#ascii_upload_enable=YES</span><br><span class=\"line\">#ascii_download_enable=YES</span><br><span class=\"line\">#</span><br><span class=\"line\"># You may fully customise the login banner string:</span><br><span class=\"line\"># 在使用shell访问ftp时可以看到的欢迎语句</span><br><span class=\"line\">ftpd_banner=Welcome to blah FTP service.</span><br><span class=\"line\">#</span><br><span class=\"line\"># You may specify a file of disallowed anonymous e-mail addresses. Apparently</span><br><span class=\"line\"># useful for combatting certain DoS attacks.</span><br><span class=\"line\">#deny_email_enable=YES</span><br><span class=\"line\"># (default follows)</span><br><span class=\"line\">#banned_email_file=/etc/vsftpd.banned_emails</span><br><span class=\"line\">#</span><br><span class=\"line\"># You may restrict local users to their home directories.  See the FAQ for</span><br><span class=\"line\"># the possible risks in this before using chroot_local_user or</span><br><span class=\"line\"># chroot_list_enable below.</span><br><span class=\"line\">#chroot_local_user=YES</span><br><span class=\"line\">#</span><br><span class=\"line\"># You may specify an explicit list of local users to chroot() to their home</span><br><span class=\"line\"># directory. If chroot_local_user is YES, then this list becomes a list of</span><br><span class=\"line\"># users to NOT chroot().</span><br><span class=\"line\"># (Warning! chroot&#x27;ing can be very dangerous. If using chroot, make sure that</span><br><span class=\"line\"># the user does not have write access to the top level directory within the</span><br><span class=\"line\"># chroot)</span><br><span class=\"line\"># 本地用户登录</span><br><span class=\"line\">chroot_local_user=YES</span><br><span class=\"line\"># 用户名单</span><br><span class=\"line\">chroot_list_enable=YES</span><br><span class=\"line\">user_sub_token=$USER</span><br><span class=\"line\">local_root=/home/$USER/ftp</span><br><span class=\"line\"># (default follows)</span><br><span class=\"line\"># 用户名单文件路径</span><br><span class=\"line\">chroot_list_file=/etc/vsftpd.chroot_list</span><br><span class=\"line\">#</span><br><span class=\"line\"># You may activate the &quot;-R&quot; option to the builtin ls. This is disabled by</span><br><span class=\"line\"># default to avoid remote users being able to cause excessive I/O on large</span><br><span class=\"line\"># sites. However, some broken FTP clients such as &quot;ncftp&quot; and &quot;mirror&quot; assume</span><br><span class=\"line\"># the presence of the &quot;-R&quot; option, so there is a strong case for enabling it.</span><br><span class=\"line\">#ls_recurse_enable=YES</span><br><span class=\"line\">#</span><br><span class=\"line\"># Customization</span><br><span class=\"line\">#</span><br><span class=\"line\"># Some of vsftpd&#x27;s settings don&#x27;t fit the filesystem layout by</span><br><span class=\"line\"># default.</span><br><span class=\"line\">#</span><br><span class=\"line\"># This option should be the name of a directory which is empty.  Also, the</span><br><span class=\"line\"># directory should not be writable by the ftp user. This directory is used</span><br><span class=\"line\"># as a secure chroot() jail at times vsftpd does not require filesystem</span><br><span class=\"line\"># access.</span><br><span class=\"line\">secure_chroot_dir=/var/run/vsftpd/empty</span><br><span class=\"line\">#</span><br><span class=\"line\"># This string is the name of the PAM service vsftpd will use.</span><br><span class=\"line\">pam_service_name=ftp</span><br><span class=\"line\">#</span><br><span class=\"line\"># This option specifies the location of the RSA certificate to use for SSL</span><br><span class=\"line\"># encrypted connections.</span><br><span class=\"line\">rsa_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem</span><br><span class=\"line\">rsa_private_key_file=/etc/ssl/private/ssl-cert-snakeoil.key</span><br><span class=\"line\">ssl_enable=NO</span><br><span class=\"line\"></span><br><span class=\"line\">#</span><br><span class=\"line\"># Uncomment this to indicate that vsftpd use a utf8 filesystem.</span><br><span class=\"line\">utf8_filesystem=YES</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意, 这里 <code>pam_service_name</code>, 如果是ubuntu和dibian用户需要更改成ftp(原来是vsftpd), 如果不设置则不能登录。</strong></p>\n<p>如果登录后出现如下错误，则在&#x2F;etc&#x2F;vsftpd.conf文件内添加allow_writeable_chroot&#x3D;YES</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">500 OOPS: vsftpd: refusing to run with writable root inside chroot ()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"创建ftp用户\"><a href=\"#创建ftp用户\" class=\"headerlink\" title=\"创建ftp用户\"></a>创建ftp用户</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 创建用户的根目录</span></span><br><span class=\"line\">mkdir /home/ftpuser</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 创建组</span></span><br><span class=\"line\">groupadd ftpgroup</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 添加用户</span></span><br><span class=\"line\">sudo useradd ftpuser -g ftpgroup -d /home/ftpuser -m</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 给用户设置密码</span></span><br><span class=\"line\">sudo passwd ftpuser</span><br><span class=\"line\">mkdir /home/ftpuser/ftp</span><br><span class=\"line\">chmod 777 -R /home/username/ftp</span><br><span class=\"line\">usermod -s /sbin/nologin ftpuser</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"添加用户名单\"><a href=\"#添加用户名单\" class=\"headerlink\" title=\"添加用户名单\"></a>添加用户名单</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; /etc/vsftpd.chroot_list</span><br><span class=\"line\"># 将ftpuser写到文件中</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"启动vsftpd或者重启\"><a href=\"#启动vsftpd或者重启\" class=\"headerlink\" title=\"启动vsftpd或者重启\"></a>启动vsftpd或者重启</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start vsftpd 或 service vsftpd start</span><br><span class=\"line\">systemctl restart vsftpd 或 service vsftpd restart</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"登录\"><a href=\"#登录\" class=\"headerlink\" title=\"登录\"></a>登录</h1><p>直接在文件管理器或者浏览器中输入 <code>ftp://ipaddress</code></p>"},{"title":"设置我的树莓派环境脚本","date":"2020-06-15T20:18:02.000Z","_content":"\n# 摘要\n\n首先总结一下本篇博客的内容: 将一个全新的树莓派通过执行脚本的方式将我所有的使用习惯和开发环境下载到本地并编译, 该脚本通过命令选项的方式将所需要的可选项设置好, 这样脚本在执行中途就不需要等待用户输入了。\n\n最后将所有的软件安装位置和安装的成功与否生成一个txt文本文档保存在用户根目录下。\n\n本脚本如果在安装某个软件失败了, 需要自行解决并安装下一个软件。\n\n<!--more-->\n\n# 包含的所有东西\n\n## 服务器部分\n\n| 名称 | 版本 |\n| :--: | :--: |\n| tomcat | |\n| nginx | |\n| apache | |\n\n## 开发环境部分\n\n| 名称 | 版本 |\n| :--: | :--: |\n| java | |\n| gcc | |\n| clang | |\n| llvm | |\n| python | |\n| gradle | |\n| redis | |\n| maven | |\n| meriadb | |\n| zookeeper | |\n| cmake | |\n| node | |\n| make | |\n\n## 工具部分\n\n| 名称 | 版本 | 说明 |\n| :--: | :--: | :--- |\n| createap | | 可以将树莓派作为一个移动热点使用 |\n| v2ray | | 代理, 包含server和client |\n| seafile | | 文件管理 自带web gui |\n| vsftpd | | ftp协议的文件共享 |\n| vim | | 自己的一些配置 |\n\n还包括 bashrc, vimrc。\n\n## vim plugins\n\n| 名称 | 版本 | 说明 |\n| :--: | :--: | :--: |\n\n# 脚本内容\n\n## 思路\n\n首先我需要一些变量来存储将要安装的软件的名字, 路径, 版本等:\n\n```sh\n#!/bin/bash\n\n# 目录\nPROGRAMPATH=~/programTools\nSERVERPATH=~/server\nTOOLPATH=~/tools\n\n# 用户密码\nPASSWD=\"\"\n\n# 开发环境程序\nprogramList=(\"java\", \"gcc\", \"clang\", \"llvm\", \"python\", \"gradle\", \"redis\", \"maven\", \"meriadb\", \"zookeeper\", \"cmake\", \"node\", \"make\")\nserverList=(\"tomcat\", \"nginx\", \"apache\")\ntoolList=(\"createap\", \"v2ray\", \"seafile\", \"vsftpd\", \"vim\")\n\n# gcc\nGCCVERSION=10.1.0\nGCCFILENAME=gcc-source.tar.gz\n\n# make\nMAKEVERSION=4.3\nMAKEFILENAME=make-source.tar.gz\n\n# git\nGITVERSION=2.27.0\nGITFILENAME=git-source.tar.gz\n```\n\n接着我需要编写一个帮助函数, 以便告诉用户这个脚本都支持那些参数:\n\n```\nshow_help() {\n\techo \"命令行参数:\"\n\techo \"--program-path: 开发环境所需程序的安装位置\"\n\techo \"--server-path: 服务器程序的安装位置\"\n\techo \"--tool-path: 工具的安装位置\"\n\techo \"--show-program-list: 展示开发环境中所有可安装程序的列表(保存到当前目录下的program-list.txt)\"\n\techo \"--show-server-list: 展示所有可安装服务器程序的列表(保存到当前目录下的server-list.txt)\"\n\techo \"--show-tool-list: 展示所有可安装工具的列表(保存到当前目录下的tool-list.txt)\"\n}\n```\n\n然后是直接写在外面执行的接收参数的逻辑:\n\n```sh\nwhile test $# -gt 0 ; do\n\tcase \"$1\" in\n\t\t-h | --help)\n\t\t\tshow_help\n\t\t\texit 0\n\t\t\t;;\n\t\t--server-path)\n\t\t\tshift\n\t\t\tcheck_line_args \"$1\" \"服务器\" \"1\" $#\n\t\t\tshift\n\t\t\t;;\n\t\t--program-path)\n\t\t\tshift\n\t\t\tcheck_line_args \"$1\" \"开发环境\" \"2\" $#\n\t\t\tshift\n\t\t\t;;\n\t\t--tool-path)\n\t\t\tshift\n\t\t\tcheck_line_args \"$1\" \"工具\" \"3\" $#\n\t\t\tshift\n\t\t\t;;\n\t\t--show-program-list)\n\t\t\tfor (( i = 0 ; i <= ${#programList[@]} ; i++)) do\n\t\t\t\techo ${programList[i]} >> program-list.txt\n\t\t\tdone;\n\t\t\texit 0\n\t\t\t;;\n\t\t--show-server-list)\n\t\t\tfor (( i = 0 ; i <= ${#serverList[@]} ; i++)) do\n\t\t\t\techo ${serverList[i]} >> server-list.txt\n\t\t\tdone;\n\t\t\texit 0\n\t\t\t;;\n\t\t--show-tool-list)\n\t\t\tfor (( i = 0 ; i <= ${#toolList[@]} ; i++)) do\n\t\t\t\techo ${toolList[i]} >> tool-list.txt\n\t\t\tdone;\n\t\t\texit 0\n\t\t\t;;\n\t\t*)\n\t\t\techo \"不支持的参数, 请使用 --help 查看帮助\"\n\t\t\texit 1\n\t\t\t;;\n\tesac\ndone\n```\n\n介绍一下这段脚本中的一些比较基础的语法:\n\n* shift\n\n将第一个参数移出。比如:\n\n```sh\nbash test.sh --a b\n```\n\ntest.sh 的内容:\n\n```sh\n#!/bin/bash\nshift\necho $1\n```\n\n输出为 b\n\n* $1\n\n代表第一个参数, 以此类推, $2 代表第二个\n\n* $#\n\n代表参数的个数\n\n下面是check_line_args函数的实现:\n\n```sh\ncheck_line_args() {\n\tif test \"$3\" == \"1\" ; then\n\t\tSERVERPATH=\"$1\"\n\telif test \"$3\" == \"2\" ; then\n\t\tPROGRAMPATH=\"$1\"\n\telif test \"$3\" == \"3\" ; then\n\t\tTOOLPATH=\"$1\"\n\tfi\n\tif test \"$1\" == \"\" ; then\n\t\techo \"请输入$2所需程序的安装路径\"\n\t\texit 1\n\tfi\n\tcheck_mkr \"$1\"\n}\n```\n\n下面是check_mkr函数的实现:\n\n```sh\ncheck_mkr() {\n\tif [[ ! -d \"$1\" ]] ; then\n\t\tmkdir \"$1\"\n\tfi\n}\n```\n","source":"_posts/config_skill_experience/system_config/linux/setup-my-environment.md","raw":"---\ntitle: 设置我的树莓派环境脚本\ndate: 2020-06-16 04:18:02\ncategories:\n- 配置技巧/经验\n- 系统配置\n- linux\ntags:\n- shell\n- raspberry\n---\n\n# 摘要\n\n首先总结一下本篇博客的内容: 将一个全新的树莓派通过执行脚本的方式将我所有的使用习惯和开发环境下载到本地并编译, 该脚本通过命令选项的方式将所需要的可选项设置好, 这样脚本在执行中途就不需要等待用户输入了。\n\n最后将所有的软件安装位置和安装的成功与否生成一个txt文本文档保存在用户根目录下。\n\n本脚本如果在安装某个软件失败了, 需要自行解决并安装下一个软件。\n\n<!--more-->\n\n# 包含的所有东西\n\n## 服务器部分\n\n| 名称 | 版本 |\n| :--: | :--: |\n| tomcat | |\n| nginx | |\n| apache | |\n\n## 开发环境部分\n\n| 名称 | 版本 |\n| :--: | :--: |\n| java | |\n| gcc | |\n| clang | |\n| llvm | |\n| python | |\n| gradle | |\n| redis | |\n| maven | |\n| meriadb | |\n| zookeeper | |\n| cmake | |\n| node | |\n| make | |\n\n## 工具部分\n\n| 名称 | 版本 | 说明 |\n| :--: | :--: | :--- |\n| createap | | 可以将树莓派作为一个移动热点使用 |\n| v2ray | | 代理, 包含server和client |\n| seafile | | 文件管理 自带web gui |\n| vsftpd | | ftp协议的文件共享 |\n| vim | | 自己的一些配置 |\n\n还包括 bashrc, vimrc。\n\n## vim plugins\n\n| 名称 | 版本 | 说明 |\n| :--: | :--: | :--: |\n\n# 脚本内容\n\n## 思路\n\n首先我需要一些变量来存储将要安装的软件的名字, 路径, 版本等:\n\n```sh\n#!/bin/bash\n\n# 目录\nPROGRAMPATH=~/programTools\nSERVERPATH=~/server\nTOOLPATH=~/tools\n\n# 用户密码\nPASSWD=\"\"\n\n# 开发环境程序\nprogramList=(\"java\", \"gcc\", \"clang\", \"llvm\", \"python\", \"gradle\", \"redis\", \"maven\", \"meriadb\", \"zookeeper\", \"cmake\", \"node\", \"make\")\nserverList=(\"tomcat\", \"nginx\", \"apache\")\ntoolList=(\"createap\", \"v2ray\", \"seafile\", \"vsftpd\", \"vim\")\n\n# gcc\nGCCVERSION=10.1.0\nGCCFILENAME=gcc-source.tar.gz\n\n# make\nMAKEVERSION=4.3\nMAKEFILENAME=make-source.tar.gz\n\n# git\nGITVERSION=2.27.0\nGITFILENAME=git-source.tar.gz\n```\n\n接着我需要编写一个帮助函数, 以便告诉用户这个脚本都支持那些参数:\n\n```\nshow_help() {\n\techo \"命令行参数:\"\n\techo \"--program-path: 开发环境所需程序的安装位置\"\n\techo \"--server-path: 服务器程序的安装位置\"\n\techo \"--tool-path: 工具的安装位置\"\n\techo \"--show-program-list: 展示开发环境中所有可安装程序的列表(保存到当前目录下的program-list.txt)\"\n\techo \"--show-server-list: 展示所有可安装服务器程序的列表(保存到当前目录下的server-list.txt)\"\n\techo \"--show-tool-list: 展示所有可安装工具的列表(保存到当前目录下的tool-list.txt)\"\n}\n```\n\n然后是直接写在外面执行的接收参数的逻辑:\n\n```sh\nwhile test $# -gt 0 ; do\n\tcase \"$1\" in\n\t\t-h | --help)\n\t\t\tshow_help\n\t\t\texit 0\n\t\t\t;;\n\t\t--server-path)\n\t\t\tshift\n\t\t\tcheck_line_args \"$1\" \"服务器\" \"1\" $#\n\t\t\tshift\n\t\t\t;;\n\t\t--program-path)\n\t\t\tshift\n\t\t\tcheck_line_args \"$1\" \"开发环境\" \"2\" $#\n\t\t\tshift\n\t\t\t;;\n\t\t--tool-path)\n\t\t\tshift\n\t\t\tcheck_line_args \"$1\" \"工具\" \"3\" $#\n\t\t\tshift\n\t\t\t;;\n\t\t--show-program-list)\n\t\t\tfor (( i = 0 ; i <= ${#programList[@]} ; i++)) do\n\t\t\t\techo ${programList[i]} >> program-list.txt\n\t\t\tdone;\n\t\t\texit 0\n\t\t\t;;\n\t\t--show-server-list)\n\t\t\tfor (( i = 0 ; i <= ${#serverList[@]} ; i++)) do\n\t\t\t\techo ${serverList[i]} >> server-list.txt\n\t\t\tdone;\n\t\t\texit 0\n\t\t\t;;\n\t\t--show-tool-list)\n\t\t\tfor (( i = 0 ; i <= ${#toolList[@]} ; i++)) do\n\t\t\t\techo ${toolList[i]} >> tool-list.txt\n\t\t\tdone;\n\t\t\texit 0\n\t\t\t;;\n\t\t*)\n\t\t\techo \"不支持的参数, 请使用 --help 查看帮助\"\n\t\t\texit 1\n\t\t\t;;\n\tesac\ndone\n```\n\n介绍一下这段脚本中的一些比较基础的语法:\n\n* shift\n\n将第一个参数移出。比如:\n\n```sh\nbash test.sh --a b\n```\n\ntest.sh 的内容:\n\n```sh\n#!/bin/bash\nshift\necho $1\n```\n\n输出为 b\n\n* $1\n\n代表第一个参数, 以此类推, $2 代表第二个\n\n* $#\n\n代表参数的个数\n\n下面是check_line_args函数的实现:\n\n```sh\ncheck_line_args() {\n\tif test \"$3\" == \"1\" ; then\n\t\tSERVERPATH=\"$1\"\n\telif test \"$3\" == \"2\" ; then\n\t\tPROGRAMPATH=\"$1\"\n\telif test \"$3\" == \"3\" ; then\n\t\tTOOLPATH=\"$1\"\n\tfi\n\tif test \"$1\" == \"\" ; then\n\t\techo \"请输入$2所需程序的安装路径\"\n\t\texit 1\n\tfi\n\tcheck_mkr \"$1\"\n}\n```\n\n下面是check_mkr函数的实现:\n\n```sh\ncheck_mkr() {\n\tif [[ ! -d \"$1\" ]] ; then\n\t\tmkdir \"$1\"\n\tfi\n}\n```\n","slug":"config_skill_experience/system_config/linux/setup-my-environment","published":1,"updated":"2022-10-07T12:52:15.885Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejs6005w3vsb9d1dened","content":"<h1 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h1><p>首先总结一下本篇博客的内容: 将一个全新的树莓派通过执行脚本的方式将我所有的使用习惯和开发环境下载到本地并编译, 该脚本通过命令选项的方式将所需要的可选项设置好, 这样脚本在执行中途就不需要等待用户输入了。</p>\n<p>最后将所有的软件安装位置和安装的成功与否生成一个txt文本文档保存在用户根目录下。</p>\n<p>本脚本如果在安装某个软件失败了, 需要自行解决并安装下一个软件。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"包含的所有东西\"><a href=\"#包含的所有东西\" class=\"headerlink\" title=\"包含的所有东西\"></a>包含的所有东西</h1><h2 id=\"服务器部分\"><a href=\"#服务器部分\" class=\"headerlink\" title=\"服务器部分\"></a>服务器部分</h2><table>\n<thead>\n<tr>\n<th align=\"center\">名称</th>\n<th align=\"center\">版本</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">tomcat</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">nginx</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">apache</td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n<h2 id=\"开发环境部分\"><a href=\"#开发环境部分\" class=\"headerlink\" title=\"开发环境部分\"></a>开发环境部分</h2><table>\n<thead>\n<tr>\n<th align=\"center\">名称</th>\n<th align=\"center\">版本</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">java</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">gcc</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">clang</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">llvm</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">python</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">gradle</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">redis</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">maven</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">meriadb</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">zookeeper</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">cmake</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">node</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">make</td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n<h2 id=\"工具部分\"><a href=\"#工具部分\" class=\"headerlink\" title=\"工具部分\"></a>工具部分</h2><table>\n<thead>\n<tr>\n<th align=\"center\">名称</th>\n<th align=\"center\">版本</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">createap</td>\n<td align=\"center\"></td>\n<td align=\"left\">可以将树莓派作为一个移动热点使用</td>\n</tr>\n<tr>\n<td align=\"center\">v2ray</td>\n<td align=\"center\"></td>\n<td align=\"left\">代理, 包含server和client</td>\n</tr>\n<tr>\n<td align=\"center\">seafile</td>\n<td align=\"center\"></td>\n<td align=\"left\">文件管理 自带web gui</td>\n</tr>\n<tr>\n<td align=\"center\">vsftpd</td>\n<td align=\"center\"></td>\n<td align=\"left\">ftp协议的文件共享</td>\n</tr>\n<tr>\n<td align=\"center\">vim</td>\n<td align=\"center\"></td>\n<td align=\"left\">自己的一些配置</td>\n</tr>\n</tbody></table>\n<p>还包括 bashrc, vimrc。</p>\n<h2 id=\"vim-plugins\"><a href=\"#vim-plugins\" class=\"headerlink\" title=\"vim plugins\"></a>vim plugins</h2><table>\n<thead>\n<tr>\n<th align=\"center\">名称</th>\n<th align=\"center\">版本</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n</table>\n<h1 id=\"脚本内容\"><a href=\"#脚本内容\" class=\"headerlink\" title=\"脚本内容\"></a>脚本内容</h1><h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>首先我需要一些变量来存储将要安装的软件的名字, 路径, 版本等:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 目录</span></span><br><span class=\"line\">PROGRAMPATH=~/programTools</span><br><span class=\"line\">SERVERPATH=~/server</span><br><span class=\"line\">TOOLPATH=~/tools</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 用户密码</span></span><br><span class=\"line\">PASSWD=<span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 开发环境程序</span></span><br><span class=\"line\">programList=(<span class=\"string\">&quot;java&quot;</span>, <span class=\"string\">&quot;gcc&quot;</span>, <span class=\"string\">&quot;clang&quot;</span>, <span class=\"string\">&quot;llvm&quot;</span>, <span class=\"string\">&quot;python&quot;</span>, <span class=\"string\">&quot;gradle&quot;</span>, <span class=\"string\">&quot;redis&quot;</span>, <span class=\"string\">&quot;maven&quot;</span>, <span class=\"string\">&quot;meriadb&quot;</span>, <span class=\"string\">&quot;zookeeper&quot;</span>, <span class=\"string\">&quot;cmake&quot;</span>, <span class=\"string\">&quot;node&quot;</span>, <span class=\"string\">&quot;make&quot;</span>)</span><br><span class=\"line\">serverList=(<span class=\"string\">&quot;tomcat&quot;</span>, <span class=\"string\">&quot;nginx&quot;</span>, <span class=\"string\">&quot;apache&quot;</span>)</span><br><span class=\"line\">toolList=(<span class=\"string\">&quot;createap&quot;</span>, <span class=\"string\">&quot;v2ray&quot;</span>, <span class=\"string\">&quot;seafile&quot;</span>, <span class=\"string\">&quot;vsftpd&quot;</span>, <span class=\"string\">&quot;vim&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># gcc</span></span><br><span class=\"line\">GCCVERSION=10.1.0</span><br><span class=\"line\">GCCFILENAME=gcc-source.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># make</span></span><br><span class=\"line\">MAKEVERSION=4.3</span><br><span class=\"line\">MAKEFILENAME=make-source.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># git</span></span><br><span class=\"line\">GITVERSION=2.27.0</span><br><span class=\"line\">GITFILENAME=git-source.tar.gz</span><br></pre></td></tr></table></figure>\n\n<p>接着我需要编写一个帮助函数, 以便告诉用户这个脚本都支持那些参数:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show_help() &#123;</span><br><span class=\"line\">\techo &quot;命令行参数:&quot;</span><br><span class=\"line\">\techo &quot;--program-path: 开发环境所需程序的安装位置&quot;</span><br><span class=\"line\">\techo &quot;--server-path: 服务器程序的安装位置&quot;</span><br><span class=\"line\">\techo &quot;--tool-path: 工具的安装位置&quot;</span><br><span class=\"line\">\techo &quot;--show-program-list: 展示开发环境中所有可安装程序的列表(保存到当前目录下的program-list.txt)&quot;</span><br><span class=\"line\">\techo &quot;--show-server-list: 展示所有可安装服务器程序的列表(保存到当前目录下的server-list.txt)&quot;</span><br><span class=\"line\">\techo &quot;--show-tool-list: 展示所有可安装工具的列表(保存到当前目录下的tool-list.txt)&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后是直接写在外面执行的接收参数的逻辑:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"built_in\">test</span> <span class=\"variable\">$#</span> -gt 0 ; <span class=\"keyword\">do</span></span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">\t\t-h | --<span class=\"built_in\">help</span>)</span><br><span class=\"line\">\t\t\tshow_help</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">exit</span> 0</span><br><span class=\"line\">\t\t\t;;</span><br><span class=\"line\">\t\t--server-path)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">shift</span></span><br><span class=\"line\">\t\t\tcheck_line_args <span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span> <span class=\"string\">&quot;服务器&quot;</span> <span class=\"string\">&quot;1&quot;</span> <span class=\"variable\">$#</span></span><br><span class=\"line\">\t\t\t<span class=\"built_in\">shift</span></span><br><span class=\"line\">\t\t\t;;</span><br><span class=\"line\">\t\t--program-path)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">shift</span></span><br><span class=\"line\">\t\t\tcheck_line_args <span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span> <span class=\"string\">&quot;开发环境&quot;</span> <span class=\"string\">&quot;2&quot;</span> <span class=\"variable\">$#</span></span><br><span class=\"line\">\t\t\t<span class=\"built_in\">shift</span></span><br><span class=\"line\">\t\t\t;;</span><br><span class=\"line\">\t\t--tool-path)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">shift</span></span><br><span class=\"line\">\t\t\tcheck_line_args <span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span> <span class=\"string\">&quot;工具&quot;</span> <span class=\"string\">&quot;3&quot;</span> <span class=\"variable\">$#</span></span><br><span class=\"line\">\t\t\t<span class=\"built_in\">shift</span></span><br><span class=\"line\">\t\t\t;;</span><br><span class=\"line\">\t\t--show-program-list)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (( i = 0 ; i &lt;= <span class=\"variable\">$&#123;#programList[@]&#125;</span> ; i++)) <span class=\"keyword\">do</span></span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;programList[i]&#125;</span> &gt;&gt; program-list.txt</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">done</span>;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">exit</span> 0</span><br><span class=\"line\">\t\t\t;;</span><br><span class=\"line\">\t\t--show-server-list)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (( i = 0 ; i &lt;= <span class=\"variable\">$&#123;#serverList[@]&#125;</span> ; i++)) <span class=\"keyword\">do</span></span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;serverList[i]&#125;</span> &gt;&gt; server-list.txt</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">done</span>;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">exit</span> 0</span><br><span class=\"line\">\t\t\t;;</span><br><span class=\"line\">\t\t--show-tool-list)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (( i = 0 ; i &lt;= <span class=\"variable\">$&#123;#toolList[@]&#125;</span> ; i++)) <span class=\"keyword\">do</span></span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;toolList[i]&#125;</span> &gt;&gt; tool-list.txt</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">done</span>;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">exit</span> 0</span><br><span class=\"line\">\t\t\t;;</span><br><span class=\"line\">\t\t*)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;不支持的参数, 请使用 --help 查看帮助&quot;</span></span><br><span class=\"line\">\t\t\t<span class=\"built_in\">exit</span> 1</span><br><span class=\"line\">\t\t\t;;</span><br><span class=\"line\">\t<span class=\"keyword\">esac</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n\n<p>介绍一下这段脚本中的一些比较基础的语法:</p>\n<ul>\n<li>shift</li>\n</ul>\n<p>将第一个参数移出。比如:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash test.sh --a b</span><br></pre></td></tr></table></figure>\n\n<p>test.sh 的内容:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"built_in\">shift</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$1</span></span><br></pre></td></tr></table></figure>\n\n<p>输出为 b</p>\n<ul>\n<li>$1</li>\n</ul>\n<p>代表第一个参数, 以此类推, $2 代表第二个</p>\n<ul>\n<li>$#</li>\n</ul>\n<p>代表参数的个数</p>\n<p>下面是check_line_args函数的实现:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">check_line_args</span></span>() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">test</span> <span class=\"string\">&quot;<span class=\"variable\">$3</span>&quot;</span> == <span class=\"string\">&quot;1&quot;</span> ; <span class=\"keyword\">then</span></span><br><span class=\"line\">\t\tSERVERPATH=<span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">elif</span> <span class=\"built_in\">test</span> <span class=\"string\">&quot;<span class=\"variable\">$3</span>&quot;</span> == <span class=\"string\">&quot;2&quot;</span> ; <span class=\"keyword\">then</span></span><br><span class=\"line\">\t\tPROGRAMPATH=<span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">elif</span> <span class=\"built_in\">test</span> <span class=\"string\">&quot;<span class=\"variable\">$3</span>&quot;</span> == <span class=\"string\">&quot;3&quot;</span> ; <span class=\"keyword\">then</span></span><br><span class=\"line\">\t\tTOOLPATH=<span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">fi</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">test</span> <span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span> == <span class=\"string\">&quot;&quot;</span> ; <span class=\"keyword\">then</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;请输入<span class=\"variable\">$2</span>所需程序的安装路径&quot;</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span> 1</span><br><span class=\"line\">\t<span class=\"keyword\">fi</span></span><br><span class=\"line\">\tcheck_mkr <span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面是check_mkr函数的实现:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">check_mkr</span></span>() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> [[ ! -d <span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span> ]] ; <span class=\"keyword\">then</span></span><br><span class=\"line\">\t\tmkdir <span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">fi</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h1><p>首先总结一下本篇博客的内容: 将一个全新的树莓派通过执行脚本的方式将我所有的使用习惯和开发环境下载到本地并编译, 该脚本通过命令选项的方式将所需要的可选项设置好, 这样脚本在执行中途就不需要等待用户输入了。</p>\n<p>最后将所有的软件安装位置和安装的成功与否生成一个txt文本文档保存在用户根目录下。</p>\n<p>本脚本如果在安装某个软件失败了, 需要自行解决并安装下一个软件。</p>","more":"<h1 id=\"包含的所有东西\"><a href=\"#包含的所有东西\" class=\"headerlink\" title=\"包含的所有东西\"></a>包含的所有东西</h1><h2 id=\"服务器部分\"><a href=\"#服务器部分\" class=\"headerlink\" title=\"服务器部分\"></a>服务器部分</h2><table>\n<thead>\n<tr>\n<th align=\"center\">名称</th>\n<th align=\"center\">版本</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">tomcat</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">nginx</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">apache</td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n<h2 id=\"开发环境部分\"><a href=\"#开发环境部分\" class=\"headerlink\" title=\"开发环境部分\"></a>开发环境部分</h2><table>\n<thead>\n<tr>\n<th align=\"center\">名称</th>\n<th align=\"center\">版本</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">java</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">gcc</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">clang</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">llvm</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">python</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">gradle</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">redis</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">maven</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">meriadb</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">zookeeper</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">cmake</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">node</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">make</td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n<h2 id=\"工具部分\"><a href=\"#工具部分\" class=\"headerlink\" title=\"工具部分\"></a>工具部分</h2><table>\n<thead>\n<tr>\n<th align=\"center\">名称</th>\n<th align=\"center\">版本</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">createap</td>\n<td align=\"center\"></td>\n<td align=\"left\">可以将树莓派作为一个移动热点使用</td>\n</tr>\n<tr>\n<td align=\"center\">v2ray</td>\n<td align=\"center\"></td>\n<td align=\"left\">代理, 包含server和client</td>\n</tr>\n<tr>\n<td align=\"center\">seafile</td>\n<td align=\"center\"></td>\n<td align=\"left\">文件管理 自带web gui</td>\n</tr>\n<tr>\n<td align=\"center\">vsftpd</td>\n<td align=\"center\"></td>\n<td align=\"left\">ftp协议的文件共享</td>\n</tr>\n<tr>\n<td align=\"center\">vim</td>\n<td align=\"center\"></td>\n<td align=\"left\">自己的一些配置</td>\n</tr>\n</tbody></table>\n<p>还包括 bashrc, vimrc。</p>\n<h2 id=\"vim-plugins\"><a href=\"#vim-plugins\" class=\"headerlink\" title=\"vim plugins\"></a>vim plugins</h2><table>\n<thead>\n<tr>\n<th align=\"center\">名称</th>\n<th align=\"center\">版本</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n</table>\n<h1 id=\"脚本内容\"><a href=\"#脚本内容\" class=\"headerlink\" title=\"脚本内容\"></a>脚本内容</h1><h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>首先我需要一些变量来存储将要安装的软件的名字, 路径, 版本等:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 目录</span></span><br><span class=\"line\">PROGRAMPATH=~/programTools</span><br><span class=\"line\">SERVERPATH=~/server</span><br><span class=\"line\">TOOLPATH=~/tools</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 用户密码</span></span><br><span class=\"line\">PASSWD=<span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 开发环境程序</span></span><br><span class=\"line\">programList=(<span class=\"string\">&quot;java&quot;</span>, <span class=\"string\">&quot;gcc&quot;</span>, <span class=\"string\">&quot;clang&quot;</span>, <span class=\"string\">&quot;llvm&quot;</span>, <span class=\"string\">&quot;python&quot;</span>, <span class=\"string\">&quot;gradle&quot;</span>, <span class=\"string\">&quot;redis&quot;</span>, <span class=\"string\">&quot;maven&quot;</span>, <span class=\"string\">&quot;meriadb&quot;</span>, <span class=\"string\">&quot;zookeeper&quot;</span>, <span class=\"string\">&quot;cmake&quot;</span>, <span class=\"string\">&quot;node&quot;</span>, <span class=\"string\">&quot;make&quot;</span>)</span><br><span class=\"line\">serverList=(<span class=\"string\">&quot;tomcat&quot;</span>, <span class=\"string\">&quot;nginx&quot;</span>, <span class=\"string\">&quot;apache&quot;</span>)</span><br><span class=\"line\">toolList=(<span class=\"string\">&quot;createap&quot;</span>, <span class=\"string\">&quot;v2ray&quot;</span>, <span class=\"string\">&quot;seafile&quot;</span>, <span class=\"string\">&quot;vsftpd&quot;</span>, <span class=\"string\">&quot;vim&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># gcc</span></span><br><span class=\"line\">GCCVERSION=10.1.0</span><br><span class=\"line\">GCCFILENAME=gcc-source.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># make</span></span><br><span class=\"line\">MAKEVERSION=4.3</span><br><span class=\"line\">MAKEFILENAME=make-source.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># git</span></span><br><span class=\"line\">GITVERSION=2.27.0</span><br><span class=\"line\">GITFILENAME=git-source.tar.gz</span><br></pre></td></tr></table></figure>\n\n<p>接着我需要编写一个帮助函数, 以便告诉用户这个脚本都支持那些参数:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show_help() &#123;</span><br><span class=\"line\">\techo &quot;命令行参数:&quot;</span><br><span class=\"line\">\techo &quot;--program-path: 开发环境所需程序的安装位置&quot;</span><br><span class=\"line\">\techo &quot;--server-path: 服务器程序的安装位置&quot;</span><br><span class=\"line\">\techo &quot;--tool-path: 工具的安装位置&quot;</span><br><span class=\"line\">\techo &quot;--show-program-list: 展示开发环境中所有可安装程序的列表(保存到当前目录下的program-list.txt)&quot;</span><br><span class=\"line\">\techo &quot;--show-server-list: 展示所有可安装服务器程序的列表(保存到当前目录下的server-list.txt)&quot;</span><br><span class=\"line\">\techo &quot;--show-tool-list: 展示所有可安装工具的列表(保存到当前目录下的tool-list.txt)&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后是直接写在外面执行的接收参数的逻辑:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"built_in\">test</span> <span class=\"variable\">$#</span> -gt 0 ; <span class=\"keyword\">do</span></span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">\t\t-h | --<span class=\"built_in\">help</span>)</span><br><span class=\"line\">\t\t\tshow_help</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">exit</span> 0</span><br><span class=\"line\">\t\t\t;;</span><br><span class=\"line\">\t\t--server-path)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">shift</span></span><br><span class=\"line\">\t\t\tcheck_line_args <span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span> <span class=\"string\">&quot;服务器&quot;</span> <span class=\"string\">&quot;1&quot;</span> <span class=\"variable\">$#</span></span><br><span class=\"line\">\t\t\t<span class=\"built_in\">shift</span></span><br><span class=\"line\">\t\t\t;;</span><br><span class=\"line\">\t\t--program-path)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">shift</span></span><br><span class=\"line\">\t\t\tcheck_line_args <span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span> <span class=\"string\">&quot;开发环境&quot;</span> <span class=\"string\">&quot;2&quot;</span> <span class=\"variable\">$#</span></span><br><span class=\"line\">\t\t\t<span class=\"built_in\">shift</span></span><br><span class=\"line\">\t\t\t;;</span><br><span class=\"line\">\t\t--tool-path)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">shift</span></span><br><span class=\"line\">\t\t\tcheck_line_args <span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span> <span class=\"string\">&quot;工具&quot;</span> <span class=\"string\">&quot;3&quot;</span> <span class=\"variable\">$#</span></span><br><span class=\"line\">\t\t\t<span class=\"built_in\">shift</span></span><br><span class=\"line\">\t\t\t;;</span><br><span class=\"line\">\t\t--show-program-list)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (( i = 0 ; i &lt;= <span class=\"variable\">$&#123;#programList[@]&#125;</span> ; i++)) <span class=\"keyword\">do</span></span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;programList[i]&#125;</span> &gt;&gt; program-list.txt</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">done</span>;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">exit</span> 0</span><br><span class=\"line\">\t\t\t;;</span><br><span class=\"line\">\t\t--show-server-list)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (( i = 0 ; i &lt;= <span class=\"variable\">$&#123;#serverList[@]&#125;</span> ; i++)) <span class=\"keyword\">do</span></span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;serverList[i]&#125;</span> &gt;&gt; server-list.txt</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">done</span>;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">exit</span> 0</span><br><span class=\"line\">\t\t\t;;</span><br><span class=\"line\">\t\t--show-tool-list)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (( i = 0 ; i &lt;= <span class=\"variable\">$&#123;#toolList[@]&#125;</span> ; i++)) <span class=\"keyword\">do</span></span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;toolList[i]&#125;</span> &gt;&gt; tool-list.txt</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">done</span>;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">exit</span> 0</span><br><span class=\"line\">\t\t\t;;</span><br><span class=\"line\">\t\t*)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;不支持的参数, 请使用 --help 查看帮助&quot;</span></span><br><span class=\"line\">\t\t\t<span class=\"built_in\">exit</span> 1</span><br><span class=\"line\">\t\t\t;;</span><br><span class=\"line\">\t<span class=\"keyword\">esac</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n\n<p>介绍一下这段脚本中的一些比较基础的语法:</p>\n<ul>\n<li>shift</li>\n</ul>\n<p>将第一个参数移出。比如:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash test.sh --a b</span><br></pre></td></tr></table></figure>\n\n<p>test.sh 的内容:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"built_in\">shift</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$1</span></span><br></pre></td></tr></table></figure>\n\n<p>输出为 b</p>\n<ul>\n<li>$1</li>\n</ul>\n<p>代表第一个参数, 以此类推, $2 代表第二个</p>\n<ul>\n<li>$#</li>\n</ul>\n<p>代表参数的个数</p>\n<p>下面是check_line_args函数的实现:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">check_line_args</span></span>() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">test</span> <span class=\"string\">&quot;<span class=\"variable\">$3</span>&quot;</span> == <span class=\"string\">&quot;1&quot;</span> ; <span class=\"keyword\">then</span></span><br><span class=\"line\">\t\tSERVERPATH=<span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">elif</span> <span class=\"built_in\">test</span> <span class=\"string\">&quot;<span class=\"variable\">$3</span>&quot;</span> == <span class=\"string\">&quot;2&quot;</span> ; <span class=\"keyword\">then</span></span><br><span class=\"line\">\t\tPROGRAMPATH=<span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">elif</span> <span class=\"built_in\">test</span> <span class=\"string\">&quot;<span class=\"variable\">$3</span>&quot;</span> == <span class=\"string\">&quot;3&quot;</span> ; <span class=\"keyword\">then</span></span><br><span class=\"line\">\t\tTOOLPATH=<span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">fi</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">test</span> <span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span> == <span class=\"string\">&quot;&quot;</span> ; <span class=\"keyword\">then</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;请输入<span class=\"variable\">$2</span>所需程序的安装路径&quot;</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span> 1</span><br><span class=\"line\">\t<span class=\"keyword\">fi</span></span><br><span class=\"line\">\tcheck_mkr <span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面是check_mkr函数的实现:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">check_mkr</span></span>() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> [[ ! -d <span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span> ]] ; <span class=\"keyword\">then</span></span><br><span class=\"line\">\t\tmkdir <span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">fi</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"sudo命令环境变量问题","date":"2020-06-18T18:58:19.000Z","_content":"\n# sudo 的环境变量\n\n首先查看sudo的环境变量:\n\n```sh\nsudo env | grep path\n```\n\n可以看到环境变量和我们的root用户和当前用户的环境变量都不一样, 这是因为 /etc/sudoers 这个文件中有这样一句:\n\n```sh\nDefaults env_reset\n```\n\n只要在 env_reset 前面加上一个 `!` 就可以了。\n\n之后在 .bashrc 文件中加入:\n\n```sh\nalias sudo='sudo env PATH=$PATH'\n```\n","source":"_posts/config_skill_experience/system_config/linux/sudo-env.md","raw":"---\ntitle: sudo命令环境变量问题\ndate: 2020-06-19 02:58:19\ncategories:\n- 配置技巧/经验\n- 系统配置\n- linux\ntags:\n- linux\n---\n\n# sudo 的环境变量\n\n首先查看sudo的环境变量:\n\n```sh\nsudo env | grep path\n```\n\n可以看到环境变量和我们的root用户和当前用户的环境变量都不一样, 这是因为 /etc/sudoers 这个文件中有这样一句:\n\n```sh\nDefaults env_reset\n```\n\n只要在 env_reset 前面加上一个 `!` 就可以了。\n\n之后在 .bashrc 文件中加入:\n\n```sh\nalias sudo='sudo env PATH=$PATH'\n```\n","slug":"config_skill_experience/system_config/linux/sudo-env","published":1,"updated":"2022-10-03T02:34:28.728Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejs9005x3vsb8ru22lx0","content":"<h1 id=\"sudo-的环境变量\"><a href=\"#sudo-的环境变量\" class=\"headerlink\" title=\"sudo 的环境变量\"></a>sudo 的环境变量</h1><p>首先查看sudo的环境变量:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo env | grep path</span><br></pre></td></tr></table></figure>\n\n<p>可以看到环境变量和我们的root用户和当前用户的环境变量都不一样, 这是因为 &#x2F;etc&#x2F;sudoers 这个文件中有这样一句:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Defaults env_reset</span><br></pre></td></tr></table></figure>\n\n<p>只要在 env_reset 前面加上一个 <code>!</code> 就可以了。</p>\n<p>之后在 .bashrc 文件中加入:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">alias</span> sudo=<span class=\"string\">&#x27;sudo env PATH=$PATH&#x27;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"","more":"<h1 id=\"sudo-的环境变量\"><a href=\"#sudo-的环境变量\" class=\"headerlink\" title=\"sudo 的环境变量\"></a>sudo 的环境变量</h1><p>首先查看sudo的环境变量:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo env | grep path</span><br></pre></td></tr></table></figure>\n\n<p>可以看到环境变量和我们的root用户和当前用户的环境变量都不一样, 这是因为 &#x2F;etc&#x2F;sudoers 这个文件中有这样一句:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Defaults env_reset</span><br></pre></td></tr></table></figure>\n\n<p>只要在 env_reset 前面加上一个 <code>!</code> 就可以了。</p>\n<p>之后在 .bashrc 文件中加入:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">alias</span> sudo=<span class=\"string\">&#x27;sudo env PATH=$PATH&#x27;</span></span><br></pre></td></tr></table></figure>\n"},{"title":"虚拟机打不开了!","date":"2019-07-02T03:52:02.000Z","_content":"\n# 前言\n\n今天和平常一样打开电脑, 启动虚拟机, 等了半天还是黑屏, 我慌的不行, 我的系统里还有不少东西呢!\n\n# 解决\n\nemm, 直接移除, 然后重新打开就好了...\n\n日。\n","source":"_posts/config_skill_experience/system_config/virtual_machine/vmware-not-working.md","raw":"---\ntitle: 虚拟机打不开了!\ndate: 2019-07-02 11:52:02\ncategories:\n- 配置技巧/经验\n- 虚拟机\ntags:\n- 虚拟机\n---\n\n# 前言\n\n今天和平常一样打开电脑, 启动虚拟机, 等了半天还是黑屏, 我慌的不行, 我的系统里还有不少东西呢!\n\n# 解决\n\nemm, 直接移除, 然后重新打开就好了...\n\n日。\n","slug":"config_skill_experience/system_config/virtual_machine/vmware-not-working","published":1,"updated":"2022-10-07T13:28:18.913Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejsr00613vsb83y46oc9","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>今天和平常一样打开电脑, 启动虚拟机, 等了半天还是黑屏, 我慌的不行, 我的系统里还有不少东西呢!</p>\n<h1 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h1><p>emm, 直接移除, 然后重新打开就好了…</p>\n<p>日。</p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>今天和平常一样打开电脑, 启动虚拟机, 等了半天还是黑屏, 我慌的不行, 我的系统里还有不少东西呢!</p>\n<h1 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h1><p>emm, 直接移除, 然后重新打开就好了…</p>\n<p>日。</p>\n"},{"title":"使用VMware虚拟机CentOS操作系统遇到的共享文件夹的问题","date":"2019-02-24T15:59:22.000Z","_content":"\n# 前言\n\n我在使用Vmware时, 遇到了想和物理主机互传文件的问题, 所以就有了此篇文章。\n<!--more-->\n\n# 步骤\n\n* 首先安装所需要的依赖\n\n```shell\nyum -y install kernel-devel=$(uname -r)\nyum -y install net-tools perl gcc gcc-c++\n```\n\n* 安装vm tool\n\n```shell\nmount /dev/cdrom /home/tmp\ncp /home/tmp/VMwareTools-9.6.0-1294478.tar.gz /tmp\ncd /tmp\ntar -zxf VMwareTools-9.6.0-1294478.tar.gz\ncd vmware-tools-distrib\n./vmware-install.pl\n```\n\n* 安装vmhgfs-fuse\n\n```shell\nyum install open-vm-tools-devel -y\n# ubuntu是 open-vm-dkms, 安装好之后使用这个工具挂载\nvmhgfs-fuse .host:/ /home/littleboy/winShareFolder\n```\n\n进入 `home/littleboy/winShareFolder` 就可以看到共享的文件夹了。\n","source":"_posts/config_skill_experience/system_config/virtual_machine/vmware-share-folder.md","raw":"---\ntitle: 使用VMware虚拟机CentOS操作系统遇到的共享文件夹的问题\ndate: 2019-02-24 23:59:22\ncategories:\n- 配置技巧/经验\n- 系统配置\n- 虚拟机\ntags:\n- 虚拟机\n---\n\n# 前言\n\n我在使用Vmware时, 遇到了想和物理主机互传文件的问题, 所以就有了此篇文章。\n<!--more-->\n\n# 步骤\n\n* 首先安装所需要的依赖\n\n```shell\nyum -y install kernel-devel=$(uname -r)\nyum -y install net-tools perl gcc gcc-c++\n```\n\n* 安装vm tool\n\n```shell\nmount /dev/cdrom /home/tmp\ncp /home/tmp/VMwareTools-9.6.0-1294478.tar.gz /tmp\ncd /tmp\ntar -zxf VMwareTools-9.6.0-1294478.tar.gz\ncd vmware-tools-distrib\n./vmware-install.pl\n```\n\n* 安装vmhgfs-fuse\n\n```shell\nyum install open-vm-tools-devel -y\n# ubuntu是 open-vm-dkms, 安装好之后使用这个工具挂载\nvmhgfs-fuse .host:/ /home/littleboy/winShareFolder\n```\n\n进入 `home/littleboy/winShareFolder` 就可以看到共享的文件夹了。\n","slug":"config_skill_experience/system_config/virtual_machine/vmware-share-folder","published":1,"updated":"2022-10-03T02:38:34.835Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejsv00643vsb46l80ws8","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>我在使用Vmware时, 遇到了想和物理主机互传文件的问题, 所以就有了此篇文章。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h1><ul>\n<li>首先安装所需要的依赖</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install kernel-devel=$(uname -r)</span><br><span class=\"line\">yum -y install net-tools perl gcc gcc-c++</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>安装vm tool</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mount /dev/cdrom /home/tmp</span><br><span class=\"line\">cp /home/tmp/VMwareTools-9.6.0-1294478.tar.gz /tmp</span><br><span class=\"line\">cd /tmp</span><br><span class=\"line\">tar -zxf VMwareTools-9.6.0-1294478.tar.gz</span><br><span class=\"line\">cd vmware-tools-distrib</span><br><span class=\"line\">./vmware-install.pl</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>安装vmhgfs-fuse</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install open-vm-tools-devel -y</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ubuntu是 open-vm-dkms, 安装好之后使用这个工具挂载</span></span><br><span class=\"line\">vmhgfs-fuse .host:/ /home/littleboy/winShareFolder</span><br></pre></td></tr></table></figure>\n\n<p>进入 <code>home/littleboy/winShareFolder</code> 就可以看到共享的文件夹了。</p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>我在使用Vmware时, 遇到了想和物理主机互传文件的问题, 所以就有了此篇文章。</p>","more":"<h1 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h1><ul>\n<li>首先安装所需要的依赖</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install kernel-devel=$(uname -r)</span><br><span class=\"line\">yum -y install net-tools perl gcc gcc-c++</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>安装vm tool</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mount /dev/cdrom /home/tmp</span><br><span class=\"line\">cp /home/tmp/VMwareTools-9.6.0-1294478.tar.gz /tmp</span><br><span class=\"line\">cd /tmp</span><br><span class=\"line\">tar -zxf VMwareTools-9.6.0-1294478.tar.gz</span><br><span class=\"line\">cd vmware-tools-distrib</span><br><span class=\"line\">./vmware-install.pl</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>安装vmhgfs-fuse</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install open-vm-tools-devel -y</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ubuntu是 open-vm-dkms, 安装好之后使用这个工具挂载</span></span><br><span class=\"line\">vmhgfs-fuse .host:/ /home/littleboy/winShareFolder</span><br></pre></td></tr></table></figure>\n\n<p>进入 <code>home/littleboy/winShareFolder</code> 就可以看到共享的文件夹了。</p>"},{"title":"装机","date":"2018-11-30T11:51:27.000Z","_content":"\n## 前言\n\n今天我的室友将他的电脑留在这里, 那么不对它做些什么是不可能的! 哈哈, 那么, 我就开始啦。\n\n<!--more-->\n\n### 双系统\n\n如果只是装一个windows的话, 就没有必要特意写一篇博客了。既然决定写一篇博客, 那么双系统肯定是要上的。\n\n我打算安装的双系统是ubuntu + windows10, 其实说来也简单, 主要思路是先安装ubuntu, 然后载安装windows, 最后通过修改ubuntu的启动文件(grub.conf)来启到引导系统的作用。\n\n\n\n### 安装windows到非启动盘\n\n其实还挺麻烦的, 但是我已经将我遇到的困难总结好了, 下面是我的总结。\n\n\n\n#### 安装windows系统遇到的问题以及解决步骤\n\n1. 遇到了Windows无法安装到GPT分区形式磁盘的问题\n\n   解决办法是，使用高级启动，命令行中：\n   输入：diskpart\n   输入：list disk\n   输入：select disk 0（这里输入你想要安装的磁盘编号）\n   输入：clean\n   输入：convert mbr\n   输入：create partition primary size = xxx，回车\n   创建主分区大小（MB）\n   输入：format fs=ntfs quick，回车\n   格式化磁盘为ntfs\n   输入：exit，回车\n   退出diskpart\n   输入：exit，回车\n   退出cmd\n\n2. 遇到了Windows无法安装到所选位置.错误:0X80300024的问题\n\n   解决办法是，将启动方式改成uefi，第一启动项设置成要安装系统的盘符\n\n\n\n下面是我觉得一些很厉害的博客, 有时间做个总结。\n\n[实现Windows7和Ubuntu9.04的双启动](http://www.cqvip.com/QK/87339A/200910X/68789083504848575148494854.html)\n\n[ubuntu 10.10 grub 添加win7系统引导 （附grub2讲解）](http://blog.chinaunix.net/uid-15007890-id-3056369.html)\n\n[Ubuntu grub设置](https://blog.csdn.net/thalo1204/article/details/48369093)\n\n[grub4dos命令和grldr引导文件介绍](https://blog.csdn.net/a5nan/article/details/65435072)\n\n[grub4dos初级教程](https://blog.csdn.net/weixin_42809008/article/details/81232824)\n\n[中国DOS联盟](http://cndos.fam.cx/forum/viewthread.php?tid=28300&fpage=1)\n\n[纯MS-DOS 7.10完整安装版](http://www.cn-dos.net/newdos/dosart32.htm)\n","source":"_posts/config_skill_experience/system_config/windows/deploy-system.md","raw":"---\ntitle: 装机\ndate: 2018-11-30 19:51:27\ncategories:\n- 配置技巧/经验\n- 系统配置\n- windows\ntags:\n- windows\n---\n\n## 前言\n\n今天我的室友将他的电脑留在这里, 那么不对它做些什么是不可能的! 哈哈, 那么, 我就开始啦。\n\n<!--more-->\n\n### 双系统\n\n如果只是装一个windows的话, 就没有必要特意写一篇博客了。既然决定写一篇博客, 那么双系统肯定是要上的。\n\n我打算安装的双系统是ubuntu + windows10, 其实说来也简单, 主要思路是先安装ubuntu, 然后载安装windows, 最后通过修改ubuntu的启动文件(grub.conf)来启到引导系统的作用。\n\n\n\n### 安装windows到非启动盘\n\n其实还挺麻烦的, 但是我已经将我遇到的困难总结好了, 下面是我的总结。\n\n\n\n#### 安装windows系统遇到的问题以及解决步骤\n\n1. 遇到了Windows无法安装到GPT分区形式磁盘的问题\n\n   解决办法是，使用高级启动，命令行中：\n   输入：diskpart\n   输入：list disk\n   输入：select disk 0（这里输入你想要安装的磁盘编号）\n   输入：clean\n   输入：convert mbr\n   输入：create partition primary size = xxx，回车\n   创建主分区大小（MB）\n   输入：format fs=ntfs quick，回车\n   格式化磁盘为ntfs\n   输入：exit，回车\n   退出diskpart\n   输入：exit，回车\n   退出cmd\n\n2. 遇到了Windows无法安装到所选位置.错误:0X80300024的问题\n\n   解决办法是，将启动方式改成uefi，第一启动项设置成要安装系统的盘符\n\n\n\n下面是我觉得一些很厉害的博客, 有时间做个总结。\n\n[实现Windows7和Ubuntu9.04的双启动](http://www.cqvip.com/QK/87339A/200910X/68789083504848575148494854.html)\n\n[ubuntu 10.10 grub 添加win7系统引导 （附grub2讲解）](http://blog.chinaunix.net/uid-15007890-id-3056369.html)\n\n[Ubuntu grub设置](https://blog.csdn.net/thalo1204/article/details/48369093)\n\n[grub4dos命令和grldr引导文件介绍](https://blog.csdn.net/a5nan/article/details/65435072)\n\n[grub4dos初级教程](https://blog.csdn.net/weixin_42809008/article/details/81232824)\n\n[中国DOS联盟](http://cndos.fam.cx/forum/viewthread.php?tid=28300&fpage=1)\n\n[纯MS-DOS 7.10完整安装版](http://www.cn-dos.net/newdos/dosart32.htm)\n","slug":"config_skill_experience/system_config/windows/deploy-system","published":1,"updated":"2022-10-07T12:45:45.053Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejsz00683vsbb9m0a6et","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>今天我的室友将他的电脑留在这里, 那么不对它做些什么是不可能的! 哈哈, 那么, 我就开始啦。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"双系统\"><a href=\"#双系统\" class=\"headerlink\" title=\"双系统\"></a>双系统</h3><p>如果只是装一个windows的话, 就没有必要特意写一篇博客了。既然决定写一篇博客, 那么双系统肯定是要上的。</p>\n<p>我打算安装的双系统是ubuntu + windows10, 其实说来也简单, 主要思路是先安装ubuntu, 然后载安装windows, 最后通过修改ubuntu的启动文件(grub.conf)来启到引导系统的作用。</p>\n<h3 id=\"安装windows到非启动盘\"><a href=\"#安装windows到非启动盘\" class=\"headerlink\" title=\"安装windows到非启动盘\"></a>安装windows到非启动盘</h3><p>其实还挺麻烦的, 但是我已经将我遇到的困难总结好了, 下面是我的总结。</p>\n<h4 id=\"安装windows系统遇到的问题以及解决步骤\"><a href=\"#安装windows系统遇到的问题以及解决步骤\" class=\"headerlink\" title=\"安装windows系统遇到的问题以及解决步骤\"></a>安装windows系统遇到的问题以及解决步骤</h4><ol>\n<li><p>遇到了Windows无法安装到GPT分区形式磁盘的问题</p>\n<p>解决办法是，使用高级启动，命令行中：<br>输入：diskpart<br>输入：list disk<br>输入：select disk 0（这里输入你想要安装的磁盘编号）<br>输入：clean<br>输入：convert mbr<br>输入：create partition primary size &#x3D; xxx，回车<br>创建主分区大小（MB）<br>输入：format fs&#x3D;ntfs quick，回车<br>格式化磁盘为ntfs<br>输入：exit，回车<br>退出diskpart<br>输入：exit，回车<br>退出cmd</p>\n</li>\n<li><p>遇到了Windows无法安装到所选位置.错误:0X80300024的问题</p>\n<p>解决办法是，将启动方式改成uefi，第一启动项设置成要安装系统的盘符</p>\n</li>\n</ol>\n<p>下面是我觉得一些很厉害的博客, 有时间做个总结。</p>\n<p><a href=\"http://www.cqvip.com/QK/87339A/200910X/68789083504848575148494854.html\">实现Windows7和Ubuntu9.04的双启动</a></p>\n<p><a href=\"http://blog.chinaunix.net/uid-15007890-id-3056369.html\">ubuntu 10.10 grub 添加win7系统引导 （附grub2讲解）</a></p>\n<p><a href=\"https://blog.csdn.net/thalo1204/article/details/48369093\">Ubuntu grub设置</a></p>\n<p><a href=\"https://blog.csdn.net/a5nan/article/details/65435072\">grub4dos命令和grldr引导文件介绍</a></p>\n<p><a href=\"https://blog.csdn.net/weixin_42809008/article/details/81232824\">grub4dos初级教程</a></p>\n<p><a href=\"http://cndos.fam.cx/forum/viewthread.php?tid=28300&fpage=1\">中国DOS联盟</a></p>\n<p><a href=\"http://www.cn-dos.net/newdos/dosart32.htm\">纯MS-DOS 7.10完整安装版</a></p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>今天我的室友将他的电脑留在这里, 那么不对它做些什么是不可能的! 哈哈, 那么, 我就开始啦。</p>","more":"<h3 id=\"双系统\"><a href=\"#双系统\" class=\"headerlink\" title=\"双系统\"></a>双系统</h3><p>如果只是装一个windows的话, 就没有必要特意写一篇博客了。既然决定写一篇博客, 那么双系统肯定是要上的。</p>\n<p>我打算安装的双系统是ubuntu + windows10, 其实说来也简单, 主要思路是先安装ubuntu, 然后载安装windows, 最后通过修改ubuntu的启动文件(grub.conf)来启到引导系统的作用。</p>\n<h3 id=\"安装windows到非启动盘\"><a href=\"#安装windows到非启动盘\" class=\"headerlink\" title=\"安装windows到非启动盘\"></a>安装windows到非启动盘</h3><p>其实还挺麻烦的, 但是我已经将我遇到的困难总结好了, 下面是我的总结。</p>\n<h4 id=\"安装windows系统遇到的问题以及解决步骤\"><a href=\"#安装windows系统遇到的问题以及解决步骤\" class=\"headerlink\" title=\"安装windows系统遇到的问题以及解决步骤\"></a>安装windows系统遇到的问题以及解决步骤</h4><ol>\n<li><p>遇到了Windows无法安装到GPT分区形式磁盘的问题</p>\n<p>解决办法是，使用高级启动，命令行中：<br>输入：diskpart<br>输入：list disk<br>输入：select disk 0（这里输入你想要安装的磁盘编号）<br>输入：clean<br>输入：convert mbr<br>输入：create partition primary size &#x3D; xxx，回车<br>创建主分区大小（MB）<br>输入：format fs&#x3D;ntfs quick，回车<br>格式化磁盘为ntfs<br>输入：exit，回车<br>退出diskpart<br>输入：exit，回车<br>退出cmd</p>\n</li>\n<li><p>遇到了Windows无法安装到所选位置.错误:0X80300024的问题</p>\n<p>解决办法是，将启动方式改成uefi，第一启动项设置成要安装系统的盘符</p>\n</li>\n</ol>\n<p>下面是我觉得一些很厉害的博客, 有时间做个总结。</p>\n<p><a href=\"http://www.cqvip.com/QK/87339A/200910X/68789083504848575148494854.html\">实现Windows7和Ubuntu9.04的双启动</a></p>\n<p><a href=\"http://blog.chinaunix.net/uid-15007890-id-3056369.html\">ubuntu 10.10 grub 添加win7系统引导 （附grub2讲解）</a></p>\n<p><a href=\"https://blog.csdn.net/thalo1204/article/details/48369093\">Ubuntu grub设置</a></p>\n<p><a href=\"https://blog.csdn.net/a5nan/article/details/65435072\">grub4dos命令和grldr引导文件介绍</a></p>\n<p><a href=\"https://blog.csdn.net/weixin_42809008/article/details/81232824\">grub4dos初级教程</a></p>\n<p><a href=\"http://cndos.fam.cx/forum/viewthread.php?tid=28300&fpage=1\">中国DOS联盟</a></p>\n<p><a href=\"http://www.cn-dos.net/newdos/dosart32.htm\">纯MS-DOS 7.10完整安装版</a></p>"},{"title":"在windows系统中自定义cmd命令","date":"2019-01-19T04:00:12.000Z","_content":"\n# 前言\n\n我在运行一些服务或者程序时, 经常免不了要打开cmd, cd到程序所在目录, 然后执行运行的命令, 次数多了之后就觉得很烦, 想着可不可以自定义命令, 比如我直接输入`zkstart`, 就可以运行zookeeper, 当然是可以的!\n\n<!--more-->\n\n# 定义环境变量\n\n在windows系统中, 环境变量其实还是一个挺方便的玩应, 你可以将你所有常用的目录都定义到环境变量中, 这样系统就可以直接根据你的环境变量名称找到相对应的路径。\n\n步骤如下:\n右键我的电脑, 属性\n\n![环境变量](/images/system-tap/own-path-variable/own-path-variable1.jpg)\n\n接着就可以创建环境变量了\n\n![环境变量](/images/system-tap/own-path-variable/own-path-variable2.jpg)\n\n``具体有什么用呢?``\n比如我创建了一个tomcat目录的环境变量, 变量名为`tPath`, 那么我在cmd中想快速进入到tomcat的目录, 就可以这样:\n\n```cmd\nC:\\> cd %tPath%\n```\n这样就可以直接cd到该目录下了。\n\n<br>\n\n# 自定义命令\n\n之前说了可以根据环境变量自定义命令, 那么具体该怎么做呢?\n首先我们需要先了解一个环境变量: `PATHEXT`, 这个是已经定义好的变量, 这个变量值定义了可运行命令的后缀名, 也就是说如果你想要运行一个命令, 那么必须是以这个变量里定义的后缀名结尾的。\n\n当然, 我们可以自己修改这个变量值, 让系统变得聪明一点。我就在我的环境变量中加入了`.LNK`, 这个是快捷方式的后缀名, 这样系统就可以识别了。\n\n举个例子:\n\n将`zookeeper/bin`的目录放到环境变量中, 像这样:\n\n![环境变量](/images/system-tap/own-path-variable/own-path-variable3.jpg)\n\n将变量名放到`path`中:\n\n![环境变量](/images/system-tap/own-path-variable/own-path-variable4.jpg)\n\n在zookeeper的bin目录下创建一个快捷方式:\n\n![环境变量](/images/system-tap/own-path-variable/own-path-variable5.jpg)\n\n大功告成!\n直接在cmd中输入`zkpr`就可以直接启动zookeeper啦!\n\n![环境变量](/images/system-tap/own-path-variable/own-path-variable6.jpg)\n","source":"_posts/config_skill_experience/system_config/windows/own-path-variable.md","raw":"---\ntitle: 在windows系统中自定义cmd命令\ndate: 2019-01-19 12:00:12\ncategories:\n- 配置技巧/经验\n- 系统配置\n- windows\ntags:\n- windows\n---\n\n# 前言\n\n我在运行一些服务或者程序时, 经常免不了要打开cmd, cd到程序所在目录, 然后执行运行的命令, 次数多了之后就觉得很烦, 想着可不可以自定义命令, 比如我直接输入`zkstart`, 就可以运行zookeeper, 当然是可以的!\n\n<!--more-->\n\n# 定义环境变量\n\n在windows系统中, 环境变量其实还是一个挺方便的玩应, 你可以将你所有常用的目录都定义到环境变量中, 这样系统就可以直接根据你的环境变量名称找到相对应的路径。\n\n步骤如下:\n右键我的电脑, 属性\n\n![环境变量](/images/system-tap/own-path-variable/own-path-variable1.jpg)\n\n接着就可以创建环境变量了\n\n![环境变量](/images/system-tap/own-path-variable/own-path-variable2.jpg)\n\n``具体有什么用呢?``\n比如我创建了一个tomcat目录的环境变量, 变量名为`tPath`, 那么我在cmd中想快速进入到tomcat的目录, 就可以这样:\n\n```cmd\nC:\\> cd %tPath%\n```\n这样就可以直接cd到该目录下了。\n\n<br>\n\n# 自定义命令\n\n之前说了可以根据环境变量自定义命令, 那么具体该怎么做呢?\n首先我们需要先了解一个环境变量: `PATHEXT`, 这个是已经定义好的变量, 这个变量值定义了可运行命令的后缀名, 也就是说如果你想要运行一个命令, 那么必须是以这个变量里定义的后缀名结尾的。\n\n当然, 我们可以自己修改这个变量值, 让系统变得聪明一点。我就在我的环境变量中加入了`.LNK`, 这个是快捷方式的后缀名, 这样系统就可以识别了。\n\n举个例子:\n\n将`zookeeper/bin`的目录放到环境变量中, 像这样:\n\n![环境变量](/images/system-tap/own-path-variable/own-path-variable3.jpg)\n\n将变量名放到`path`中:\n\n![环境变量](/images/system-tap/own-path-variable/own-path-variable4.jpg)\n\n在zookeeper的bin目录下创建一个快捷方式:\n\n![环境变量](/images/system-tap/own-path-variable/own-path-variable5.jpg)\n\n大功告成!\n直接在cmd中输入`zkpr`就可以直接启动zookeeper啦!\n\n![环境变量](/images/system-tap/own-path-variable/own-path-variable6.jpg)\n","slug":"config_skill_experience/system_config/windows/own-path-variable","published":1,"updated":"2022-10-07T12:45:52.317Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejt300693vsb9sjg33f2","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>我在运行一些服务或者程序时, 经常免不了要打开cmd, cd到程序所在目录, 然后执行运行的命令, 次数多了之后就觉得很烦, 想着可不可以自定义命令, 比如我直接输入<code>zkstart</code>, 就可以运行zookeeper, 当然是可以的!</p>\n<span id=\"more\"></span>\n\n<h1 id=\"定义环境变量\"><a href=\"#定义环境变量\" class=\"headerlink\" title=\"定义环境变量\"></a>定义环境变量</h1><p>在windows系统中, 环境变量其实还是一个挺方便的玩应, 你可以将你所有常用的目录都定义到环境变量中, 这样系统就可以直接根据你的环境变量名称找到相对应的路径。</p>\n<p>步骤如下:<br>右键我的电脑, 属性</p>\n<p><img src=\"/images/system-tap/own-path-variable/own-path-variable1.jpg\" alt=\"环境变量\"></p>\n<p>接着就可以创建环境变量了</p>\n<p><img src=\"/images/system-tap/own-path-variable/own-path-variable2.jpg\" alt=\"环境变量\"></p>\n<p><code>具体有什么用呢?</code><br>比如我创建了一个tomcat目录的环境变量, 变量名为<code>tPath</code>, 那么我在cmd中想快速进入到tomcat的目录, 就可以这样:</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">C:\\&gt; <span class=\"title\">cd</span> %<span class=\"title\">tPath</span>%</span></span><br></pre></td></tr></table></figure>\n<p>这样就可以直接cd到该目录下了。</p>\n<br>\n\n<h1 id=\"自定义命令\"><a href=\"#自定义命令\" class=\"headerlink\" title=\"自定义命令\"></a>自定义命令</h1><p>之前说了可以根据环境变量自定义命令, 那么具体该怎么做呢?<br>首先我们需要先了解一个环境变量: <code>PATHEXT</code>, 这个是已经定义好的变量, 这个变量值定义了可运行命令的后缀名, 也就是说如果你想要运行一个命令, 那么必须是以这个变量里定义的后缀名结尾的。</p>\n<p>当然, 我们可以自己修改这个变量值, 让系统变得聪明一点。我就在我的环境变量中加入了<code>.LNK</code>, 这个是快捷方式的后缀名, 这样系统就可以识别了。</p>\n<p>举个例子:</p>\n<p>将<code>zookeeper/bin</code>的目录放到环境变量中, 像这样:</p>\n<p><img src=\"/images/system-tap/own-path-variable/own-path-variable3.jpg\" alt=\"环境变量\"></p>\n<p>将变量名放到<code>path</code>中:</p>\n<p><img src=\"/images/system-tap/own-path-variable/own-path-variable4.jpg\" alt=\"环境变量\"></p>\n<p>在zookeeper的bin目录下创建一个快捷方式:</p>\n<p><img src=\"/images/system-tap/own-path-variable/own-path-variable5.jpg\" alt=\"环境变量\"></p>\n<p>大功告成!<br>直接在cmd中输入<code>zkpr</code>就可以直接启动zookeeper啦!</p>\n<p><img src=\"/images/system-tap/own-path-variable/own-path-variable6.jpg\" alt=\"环境变量\"></p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>我在运行一些服务或者程序时, 经常免不了要打开cmd, cd到程序所在目录, 然后执行运行的命令, 次数多了之后就觉得很烦, 想着可不可以自定义命令, 比如我直接输入<code>zkstart</code>, 就可以运行zookeeper, 当然是可以的!</p>","more":"<h1 id=\"定义环境变量\"><a href=\"#定义环境变量\" class=\"headerlink\" title=\"定义环境变量\"></a>定义环境变量</h1><p>在windows系统中, 环境变量其实还是一个挺方便的玩应, 你可以将你所有常用的目录都定义到环境变量中, 这样系统就可以直接根据你的环境变量名称找到相对应的路径。</p>\n<p>步骤如下:<br>右键我的电脑, 属性</p>\n<p><img src=\"/images/system-tap/own-path-variable/own-path-variable1.jpg\" alt=\"环境变量\"></p>\n<p>接着就可以创建环境变量了</p>\n<p><img src=\"/images/system-tap/own-path-variable/own-path-variable2.jpg\" alt=\"环境变量\"></p>\n<p><code>具体有什么用呢?</code><br>比如我创建了一个tomcat目录的环境变量, 变量名为<code>tPath</code>, 那么我在cmd中想快速进入到tomcat的目录, 就可以这样:</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">C:\\&gt; <span class=\"title\">cd</span> %<span class=\"title\">tPath</span>%</span></span><br></pre></td></tr></table></figure>\n<p>这样就可以直接cd到该目录下了。</p>\n<br>\n\n<h1 id=\"自定义命令\"><a href=\"#自定义命令\" class=\"headerlink\" title=\"自定义命令\"></a>自定义命令</h1><p>之前说了可以根据环境变量自定义命令, 那么具体该怎么做呢?<br>首先我们需要先了解一个环境变量: <code>PATHEXT</code>, 这个是已经定义好的变量, 这个变量值定义了可运行命令的后缀名, 也就是说如果你想要运行一个命令, 那么必须是以这个变量里定义的后缀名结尾的。</p>\n<p>当然, 我们可以自己修改这个变量值, 让系统变得聪明一点。我就在我的环境变量中加入了<code>.LNK</code>, 这个是快捷方式的后缀名, 这样系统就可以识别了。</p>\n<p>举个例子:</p>\n<p>将<code>zookeeper/bin</code>的目录放到环境变量中, 像这样:</p>\n<p><img src=\"/images/system-tap/own-path-variable/own-path-variable3.jpg\" alt=\"环境变量\"></p>\n<p>将变量名放到<code>path</code>中:</p>\n<p><img src=\"/images/system-tap/own-path-variable/own-path-variable4.jpg\" alt=\"环境变量\"></p>\n<p>在zookeeper的bin目录下创建一个快捷方式:</p>\n<p><img src=\"/images/system-tap/own-path-variable/own-path-variable5.jpg\" alt=\"环境变量\"></p>\n<p>大功告成!<br>直接在cmd中输入<code>zkpr</code>就可以直接启动zookeeper啦!</p>\n<p><img src=\"/images/system-tap/own-path-variable/own-path-variable6.jpg\" alt=\"环境变量\"></p>"},{"title":"使用cocoscreator遇到的一些问题","date":"2019-11-16T03:40:54.000Z","catetories":["前端技巧/经验","cocos","cocoscreator"],"_content":"\n# 前言\n\n最近接手了一个使用 cocoscreator 的活, 由于之前没有接触过, 所以遇到了很多问题, 但是最后也都解决了, 今天想来记录一下。\n\n# 问题\n\n* 制作一个类系统弹窗, 并使背景置灰。\n\n遇到这个需求时, 我的第一个反应是上官网找找有没有可以直接使用的弹窗组件。但是其实并没有这种东西, 所以需要自己搞一个。\n\n<!--more-->\n\n那么怎么搞? 其实难点只在于使背景置灰和屏蔽其他地方的click事件。那么我的思路是, 搞一个覆盖全屏幕的父组件, 由于cocoscreator是组件在上面的话, 那么在屏幕上的z轴就会在下面。所以首先应该放置灰层, 这个组件需要有 Sprite 和 Button, 直接将 Sprite 大小设置成覆盖全屏幕并设置为半透明(Opacity 属性和 color 属性就可以模拟置灰层), 然后给 Button 一个 click events, 但是并不给它指定的事件, 这样其他组件的点击事件就会被屏蔽, 其他的就好说了, 直接用组件拼一个弹窗就可以了。\n\n我知道这样搞其实很low, 比较好的方式其实是通过代码来进行动态加工组件, 等有空的时候吧, 先加一个 //TODO, 哈哈。\n\n* 如何使用本地代码\n\n就是比如 android 平台有个本地方法, 如何在 cocoscreator 中调用? 其实很简单:\n\n```js\nif (cc.sys.isNative) {\n\tif (cc.sys.os == cc.sys.OS_ANDROID) {\n\t\tjsb.reflection.callStaticMethod('AppActivity', 'test()', '(Ljava/lang/String;)V', args + '')\n\t} else if (cc.sys.os == cc.sys.OS_IOS) {\n\t\tjsb.reflection.callStaticMethod('LxbFunctionMgr', 'openUrl:', args + '')\n\t}\n}\n```\n\n这样不需要注释也可以看懂, `callStaticMethod` 方法参数依次是要调用的类, 要调用的方法, 参数类型和参数。\n\n* 记录一些cocoscreator的demo\n\n[cocoscreator官方文档](https://docs.cocos.com)\n[cocoscreator教程demo集合](https://github.com/Leo501/CocosCreatorTutorial)\n[cocoscreator学习笔记](https://github.com/shahdza/Cocos_LearningTest)\n\n","source":"_posts/front_skill_experience/cocos/cocoscreator/cocoscreator-intructration.md","raw":"---\ntitle: 使用cocoscreator遇到的一些问题\ndate: 2019-11-16 11:40:54\ncatetories:\n- 前端技巧/经验\n- cocos\n- cocoscreator\ntags:\n- cocos\n- android\n---\n\n# 前言\n\n最近接手了一个使用 cocoscreator 的活, 由于之前没有接触过, 所以遇到了很多问题, 但是最后也都解决了, 今天想来记录一下。\n\n# 问题\n\n* 制作一个类系统弹窗, 并使背景置灰。\n\n遇到这个需求时, 我的第一个反应是上官网找找有没有可以直接使用的弹窗组件。但是其实并没有这种东西, 所以需要自己搞一个。\n\n<!--more-->\n\n那么怎么搞? 其实难点只在于使背景置灰和屏蔽其他地方的click事件。那么我的思路是, 搞一个覆盖全屏幕的父组件, 由于cocoscreator是组件在上面的话, 那么在屏幕上的z轴就会在下面。所以首先应该放置灰层, 这个组件需要有 Sprite 和 Button, 直接将 Sprite 大小设置成覆盖全屏幕并设置为半透明(Opacity 属性和 color 属性就可以模拟置灰层), 然后给 Button 一个 click events, 但是并不给它指定的事件, 这样其他组件的点击事件就会被屏蔽, 其他的就好说了, 直接用组件拼一个弹窗就可以了。\n\n我知道这样搞其实很low, 比较好的方式其实是通过代码来进行动态加工组件, 等有空的时候吧, 先加一个 //TODO, 哈哈。\n\n* 如何使用本地代码\n\n就是比如 android 平台有个本地方法, 如何在 cocoscreator 中调用? 其实很简单:\n\n```js\nif (cc.sys.isNative) {\n\tif (cc.sys.os == cc.sys.OS_ANDROID) {\n\t\tjsb.reflection.callStaticMethod('AppActivity', 'test()', '(Ljava/lang/String;)V', args + '')\n\t} else if (cc.sys.os == cc.sys.OS_IOS) {\n\t\tjsb.reflection.callStaticMethod('LxbFunctionMgr', 'openUrl:', args + '')\n\t}\n}\n```\n\n这样不需要注释也可以看懂, `callStaticMethod` 方法参数依次是要调用的类, 要调用的方法, 参数类型和参数。\n\n* 记录一些cocoscreator的demo\n\n[cocoscreator官方文档](https://docs.cocos.com)\n[cocoscreator教程demo集合](https://github.com/Leo501/CocosCreatorTutorial)\n[cocoscreator学习笔记](https://github.com/shahdza/Cocos_LearningTest)\n\n","slug":"front_skill_experience/cocos/cocoscreator/cocoscreator-intructration","published":1,"updated":"2022-10-02T15:26:02.856Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejt6006b3vsb12us79dx","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最近接手了一个使用 cocoscreator 的活, 由于之前没有接触过, 所以遇到了很多问题, 但是最后也都解决了, 今天想来记录一下。</p>\n<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><ul>\n<li>制作一个类系统弹窗, 并使背景置灰。</li>\n</ul>\n<p>遇到这个需求时, 我的第一个反应是上官网找找有没有可以直接使用的弹窗组件。但是其实并没有这种东西, 所以需要自己搞一个。</p>\n<span id=\"more\"></span>\n\n<p>那么怎么搞? 其实难点只在于使背景置灰和屏蔽其他地方的click事件。那么我的思路是, 搞一个覆盖全屏幕的父组件, 由于cocoscreator是组件在上面的话, 那么在屏幕上的z轴就会在下面。所以首先应该放置灰层, 这个组件需要有 Sprite 和 Button, 直接将 Sprite 大小设置成覆盖全屏幕并设置为半透明(Opacity 属性和 color 属性就可以模拟置灰层), 然后给 Button 一个 click events, 但是并不给它指定的事件, 这样其他组件的点击事件就会被屏蔽, 其他的就好说了, 直接用组件拼一个弹窗就可以了。</p>\n<p>我知道这样搞其实很low, 比较好的方式其实是通过代码来进行动态加工组件, 等有空的时候吧, 先加一个 &#x2F;&#x2F;TODO, 哈哈。</p>\n<ul>\n<li>如何使用本地代码</li>\n</ul>\n<p>就是比如 android 平台有个本地方法, 如何在 cocoscreator 中调用? 其实很简单:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (cc.sys.isNative) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (cc.sys.os == cc.sys.OS_ANDROID) &#123;</span><br><span class=\"line\">\t\tjsb.reflection.callStaticMethod(<span class=\"string\">&#x27;AppActivity&#x27;</span>, <span class=\"string\">&#x27;test()&#x27;</span>, <span class=\"string\">&#x27;(Ljava/lang/String;)V&#x27;</span>, args + <span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cc.sys.os == cc.sys.OS_IOS) &#123;</span><br><span class=\"line\">\t\tjsb.reflection.callStaticMethod(<span class=\"string\">&#x27;LxbFunctionMgr&#x27;</span>, <span class=\"string\">&#x27;openUrl:&#x27;</span>, args + <span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样不需要注释也可以看懂, <code>callStaticMethod</code> 方法参数依次是要调用的类, 要调用的方法, 参数类型和参数。</p>\n<ul>\n<li>记录一些cocoscreator的demo</li>\n</ul>\n<p><a href=\"https://docs.cocos.com/\">cocoscreator官方文档</a><br><a href=\"https://github.com/Leo501/CocosCreatorTutorial\">cocoscreator教程demo集合</a><br><a href=\"https://github.com/shahdza/Cocos_LearningTest\">cocoscreator学习笔记</a></p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最近接手了一个使用 cocoscreator 的活, 由于之前没有接触过, 所以遇到了很多问题, 但是最后也都解决了, 今天想来记录一下。</p>\n<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><ul>\n<li>制作一个类系统弹窗, 并使背景置灰。</li>\n</ul>\n<p>遇到这个需求时, 我的第一个反应是上官网找找有没有可以直接使用的弹窗组件。但是其实并没有这种东西, 所以需要自己搞一个。</p>","more":"<p>那么怎么搞? 其实难点只在于使背景置灰和屏蔽其他地方的click事件。那么我的思路是, 搞一个覆盖全屏幕的父组件, 由于cocoscreator是组件在上面的话, 那么在屏幕上的z轴就会在下面。所以首先应该放置灰层, 这个组件需要有 Sprite 和 Button, 直接将 Sprite 大小设置成覆盖全屏幕并设置为半透明(Opacity 属性和 color 属性就可以模拟置灰层), 然后给 Button 一个 click events, 但是并不给它指定的事件, 这样其他组件的点击事件就会被屏蔽, 其他的就好说了, 直接用组件拼一个弹窗就可以了。</p>\n<p>我知道这样搞其实很low, 比较好的方式其实是通过代码来进行动态加工组件, 等有空的时候吧, 先加一个 &#x2F;&#x2F;TODO, 哈哈。</p>\n<ul>\n<li>如何使用本地代码</li>\n</ul>\n<p>就是比如 android 平台有个本地方法, 如何在 cocoscreator 中调用? 其实很简单:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (cc.sys.isNative) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (cc.sys.os == cc.sys.OS_ANDROID) &#123;</span><br><span class=\"line\">\t\tjsb.reflection.callStaticMethod(<span class=\"string\">&#x27;AppActivity&#x27;</span>, <span class=\"string\">&#x27;test()&#x27;</span>, <span class=\"string\">&#x27;(Ljava/lang/String;)V&#x27;</span>, args + <span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cc.sys.os == cc.sys.OS_IOS) &#123;</span><br><span class=\"line\">\t\tjsb.reflection.callStaticMethod(<span class=\"string\">&#x27;LxbFunctionMgr&#x27;</span>, <span class=\"string\">&#x27;openUrl:&#x27;</span>, args + <span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样不需要注释也可以看懂, <code>callStaticMethod</code> 方法参数依次是要调用的类, 要调用的方法, 参数类型和参数。</p>\n<ul>\n<li>记录一些cocoscreator的demo</li>\n</ul>\n<p><a href=\"https://docs.cocos.com/\">cocoscreator官方文档</a><br><a href=\"https://github.com/Leo501/CocosCreatorTutorial\">cocoscreator教程demo集合</a><br><a href=\"https://github.com/shahdza/Cocos_LearningTest\">cocoscreator学习笔记</a></p>"},{"title":"商城开发笔记-根据实体类自动建表","date":"2019-01-24T11:33:19.000Z","_content":"\n# 前言\n\n我们在 [商城开发笔记-pojo,dao,interface,service的依赖](/my_project/shopping_mall/Dependence_and_configuration/Shopping-mall-developNote-pojo-dao-interface-service-depend.html) 和 [商城开发笔记-service的配置](/my_project/shopping_mall/Dependence_and_configuration/Shopping-mall-developNote-service-config.html) 讨论过这个项目的pojo, dao, interface和service的依赖, 我们使用的是mybatis提供的`mybatis-generator`插件, 来生成实体类和mapper, 但是如果添加或者修改表结构的话, 就得使用sql来直接修改。 hibernate可以根据实体类来创建或者修改表, 那么我们今天要使用另一个插件, `ACTable`来让mybatis也支持这个功能。\n\n这个插件我在 [读mybatis-enhance开源项目](/categories/read-open-source/Java/mybatis-enhance/) 这个分类中详细介绍过, 对这个插件感兴趣的话可以移步。\n<!--more-->\n## 添加依赖\n\n首先我们需要在`parent`模块中将这个依赖添加进来:\nparent的pom.xml的properties部分:\n\n```xml\n<mybatis.actable.version>1.0.4</mybatis.actable.version>\n```\n\ndependencyManagement部分:\n\n```xml\n<dependency>\n    <groupId>com.gitee.sunchenbin.mybatis.actable</groupId>\n    <artifactId>mybatis-enhance-actable</artifactId>\n    <version>${mybatis.actable.version}</version>\n</dependency>\n```\n\n最后我们需要在dao, pojo和service模块中都加入这个依赖:\n\n```xml\n<dependency>\n    <groupId>com.gitee.sunchenbin.mybatis.actable</groupId>\n    <artifactId>mybatis-enhance-actable</artifactId>\n</dependency>\n```\n\n# 配置\n\n其实人家在 [码云](http://git.oschina.net/sunchenbin/mybatis-enhance) 的项目介绍中就已经将配置说的很清楚了, 那么接下来我来根据我们这个项目来聊一下具体的配置。\n\n## 实体类配置\n\n例子:\n\n```java\n@Table(name = \"MyTable\")\npublic class MyTable implements Serializable {\n  @Column(name = \"Id\", type = MySqlTypeConstant.BIGINT, length = 20, isKey = true, isAutoIncrement = true)\n  private long id;\n\n  @Column(name = \"Name\", type = MySqlTypeConstant.VARCHAR, length = 50, isNull = false, defaultValue = \"\")\n  private String name;\n\n  /********get set 方法就不写了*******/\n}\n```\n\n其实很简单, 一看就可以看明白, 在实体类顶部需要声明`@Table`注解, 指定表名。\n在字段顶部声明`@Column`注解, 指定各种属性。\n\n## 模式设置\n\n这个插件提供了三种模式, 分别是:\n\n1. 当mybatis.table.auto=create时，系统启动后，会将所有的表删除掉，然后根据model中配置的结构重新建表，该操作会破坏原有数据。\n2. 当mybatis.table.auto=update时，系统会自动判断哪些表是新建的，哪些字段要修改类型等，哪些字段要删除，哪些字段要新增，该操作不会破坏原有数据。\n3. 当mybatis.table.auto=none时，系统不做任何处理。\n\n可以使用配置文件来进行设置(autoCreateTable.properties):\n\n```properties\nmybatis.table.auto=update\nmybatis.model.pack=配置用于实体类的包名\n```\n\n## xml配置\n\n我们这个项目的数据库配置文件是service模块的`application-dao.xml`, 所以直接修改这个文件就可以了。\n\nOK, 下面是原来的配置文件:\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"\n        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd\n        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd\">\n\n    <!-- 加载配置文件 -->\n    <context:property-placeholder location=\"classpath:conf/db.properties\" />\n\n    <!-- 配置数据库连接池 -->\n    <bean id=\"dataSource\" class=\"com.alibaba.druid.pool.DruidDataSource\" destroy-method=\"close\">\n        <property name=\"url\" value=\"${jdbc.url}\" />\n        <property name=\"username\" value=\"${jdbc.username}\" />\n        <property name=\"password\" value=\"${jdbc.password}\" />\n        <property name=\"driverClassName\" value=\"${jdbc.driver}\" />\n        <!-- 最大连接数 -->\n        <property name=\"maxActive\" value=\"${jdbc.pool.maxActive}\" />\n        <!-- 最小空闲连接数 -->\n        <property name=\"minIdle\" value=\"${jdbc.pool.minIdle}\" />\n    </bean>\n\n    <!-- mybatis 的sqlSessionFactory, 配置了mybatis的配置文件和mapper.xml文件 -->\n    <bean id=\"sqlSessionFactory\" class=\"org.mybatis.spring.SqlSessionFactoryBean\">\n        <property name=\"dataSource\" ref=\"dataSource\" />\n        <property name=\"configLocation\" value=\"classpath:mybatis/sqlMapConfig.xml\" />\n        <property name=\"mapperLocations\" value=\"classpath*:mapper/*.xml\" />\n    </bean>\n\n    <!-- mapper 扫描器 -->\n    <bean class=\"org.mybatis.spring.mapper.MapperScannerConfigurer\">\n        <property name=\"basePackage\" value=\"com.littleboy.dao\" />\n    </bean>\n</beans>\n```\n\n我们这里先将刚才设置模式的配置文件引入进来:\n\n```xml\n<bean id=\"configProperties\" class=\"org.springframework.beans.factory.config.PropertiesFactoryBean\">\n    <property name=\"locations\">\n        <list>\n            <value>classpath:conf/db.properties</value>\n            <value>classpath*:conf/autoCreateTable.properties</value>\n        </list>\n    </property>\n</bean>\n<bean id=\"propertyConfigurer\" class=\"org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer\">\n    <property name=\"properties\" ref=\"configProperties\" />\n</bean>\n```\n\n原先的配置使用了简写的形式, 和下面的写法是等价的:\n\n```xml\n<bean id=\"configProperties\" class=\"org.springframework.beans.factory.config.PropertiesFactoryBean\">\n    <property name=\"location\" value=\"classpath*:conf-descriptor.properties\"/>\n</bean>\n<bean id=\"propertyConfigurer\" class=\"org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer\">\n    <property name=\"properties\" ref=\"configProperties\" />\n</bean>\n```\n简写的形式也可以配置多个文件, 使用逗号分隔, 像这样:\n\n```xml\n<context:property-placeholder location=\"classpath:conf/db.properties, classpath*:conf/autoCreateTable.properties\" />\n```\n\nmybatis的的sqlSessionFactory的配置也需要改一下:\n\n```xml\n<bean id=\"sqlSessionFactory\" class=\"com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean\">\n    <property name=\"dataSource\" ref=\"dataSource\" />\n    <property name=\"configLocation\" value=\"classpath:mybatis/sqlMapConfig.xml\" />\n    <property name=\"mapperLocations\">\n        <array>\n            <value>classpath*:mapper/*.xml</value>\n            <value>classpath*:com/gitee/sunchenbin/mybatis/actable/mapping/*/*.xml</value>\n        </array>\n    </property>\n    <property name=\"typeAliasesPackage\" value=\"com.littleboy.pojo.*\" />\n</bean>\n\n```\n和原来比只多加了一行, 最后是mapper扫描器, 需要在basePackage属性中将这个插件的dao的包路径也添加进来。\n\n```xml\n<bean class=\"org.mybatis.spring.mapper.MapperScannerConfigurer\">\n    <property name=\"basePackage\"\n              value=\"com.gitee.sunchenbin.mybatis.actable.dao.*;com.littleboy.dao\" />\n    <property name=\"sqlSessionFactoryBeanName\" value=\"sqlSessionFactory\" />\n</bean>\n```\n\n** 注意, 这里在配置MapperScannerConfigurer时, 要注意路径, actable工具的路径需要加入 `*`, 而我们自己的路径则不需要加 **, 因为它的包路径, dao下面还有其他的包, 所以需要加入星号来扫描, 而我们所有的类都放在dao包下, 如果加入星号会报找不到的错误。\n","source":"_posts/my_project/shopping_mall/Dependence_and_configuration/Shopping-mall-developNote-actable-new-config.md","raw":"---\ntitle: 商城开发笔记-根据实体类自动建表\ndate: 2019-01-24 19:33:19\ncategories:\n  - 开发笔记\n  - 商城\n  - 配置篇\ntags:\n  - 商城开发\n---\n\n# 前言\n\n我们在 [商城开发笔记-pojo,dao,interface,service的依赖](/my_project/shopping_mall/Dependence_and_configuration/Shopping-mall-developNote-pojo-dao-interface-service-depend.html) 和 [商城开发笔记-service的配置](/my_project/shopping_mall/Dependence_and_configuration/Shopping-mall-developNote-service-config.html) 讨论过这个项目的pojo, dao, interface和service的依赖, 我们使用的是mybatis提供的`mybatis-generator`插件, 来生成实体类和mapper, 但是如果添加或者修改表结构的话, 就得使用sql来直接修改。 hibernate可以根据实体类来创建或者修改表, 那么我们今天要使用另一个插件, `ACTable`来让mybatis也支持这个功能。\n\n这个插件我在 [读mybatis-enhance开源项目](/categories/read-open-source/Java/mybatis-enhance/) 这个分类中详细介绍过, 对这个插件感兴趣的话可以移步。\n<!--more-->\n## 添加依赖\n\n首先我们需要在`parent`模块中将这个依赖添加进来:\nparent的pom.xml的properties部分:\n\n```xml\n<mybatis.actable.version>1.0.4</mybatis.actable.version>\n```\n\ndependencyManagement部分:\n\n```xml\n<dependency>\n    <groupId>com.gitee.sunchenbin.mybatis.actable</groupId>\n    <artifactId>mybatis-enhance-actable</artifactId>\n    <version>${mybatis.actable.version}</version>\n</dependency>\n```\n\n最后我们需要在dao, pojo和service模块中都加入这个依赖:\n\n```xml\n<dependency>\n    <groupId>com.gitee.sunchenbin.mybatis.actable</groupId>\n    <artifactId>mybatis-enhance-actable</artifactId>\n</dependency>\n```\n\n# 配置\n\n其实人家在 [码云](http://git.oschina.net/sunchenbin/mybatis-enhance) 的项目介绍中就已经将配置说的很清楚了, 那么接下来我来根据我们这个项目来聊一下具体的配置。\n\n## 实体类配置\n\n例子:\n\n```java\n@Table(name = \"MyTable\")\npublic class MyTable implements Serializable {\n  @Column(name = \"Id\", type = MySqlTypeConstant.BIGINT, length = 20, isKey = true, isAutoIncrement = true)\n  private long id;\n\n  @Column(name = \"Name\", type = MySqlTypeConstant.VARCHAR, length = 50, isNull = false, defaultValue = \"\")\n  private String name;\n\n  /********get set 方法就不写了*******/\n}\n```\n\n其实很简单, 一看就可以看明白, 在实体类顶部需要声明`@Table`注解, 指定表名。\n在字段顶部声明`@Column`注解, 指定各种属性。\n\n## 模式设置\n\n这个插件提供了三种模式, 分别是:\n\n1. 当mybatis.table.auto=create时，系统启动后，会将所有的表删除掉，然后根据model中配置的结构重新建表，该操作会破坏原有数据。\n2. 当mybatis.table.auto=update时，系统会自动判断哪些表是新建的，哪些字段要修改类型等，哪些字段要删除，哪些字段要新增，该操作不会破坏原有数据。\n3. 当mybatis.table.auto=none时，系统不做任何处理。\n\n可以使用配置文件来进行设置(autoCreateTable.properties):\n\n```properties\nmybatis.table.auto=update\nmybatis.model.pack=配置用于实体类的包名\n```\n\n## xml配置\n\n我们这个项目的数据库配置文件是service模块的`application-dao.xml`, 所以直接修改这个文件就可以了。\n\nOK, 下面是原来的配置文件:\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"\n        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd\n        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd\">\n\n    <!-- 加载配置文件 -->\n    <context:property-placeholder location=\"classpath:conf/db.properties\" />\n\n    <!-- 配置数据库连接池 -->\n    <bean id=\"dataSource\" class=\"com.alibaba.druid.pool.DruidDataSource\" destroy-method=\"close\">\n        <property name=\"url\" value=\"${jdbc.url}\" />\n        <property name=\"username\" value=\"${jdbc.username}\" />\n        <property name=\"password\" value=\"${jdbc.password}\" />\n        <property name=\"driverClassName\" value=\"${jdbc.driver}\" />\n        <!-- 最大连接数 -->\n        <property name=\"maxActive\" value=\"${jdbc.pool.maxActive}\" />\n        <!-- 最小空闲连接数 -->\n        <property name=\"minIdle\" value=\"${jdbc.pool.minIdle}\" />\n    </bean>\n\n    <!-- mybatis 的sqlSessionFactory, 配置了mybatis的配置文件和mapper.xml文件 -->\n    <bean id=\"sqlSessionFactory\" class=\"org.mybatis.spring.SqlSessionFactoryBean\">\n        <property name=\"dataSource\" ref=\"dataSource\" />\n        <property name=\"configLocation\" value=\"classpath:mybatis/sqlMapConfig.xml\" />\n        <property name=\"mapperLocations\" value=\"classpath*:mapper/*.xml\" />\n    </bean>\n\n    <!-- mapper 扫描器 -->\n    <bean class=\"org.mybatis.spring.mapper.MapperScannerConfigurer\">\n        <property name=\"basePackage\" value=\"com.littleboy.dao\" />\n    </bean>\n</beans>\n```\n\n我们这里先将刚才设置模式的配置文件引入进来:\n\n```xml\n<bean id=\"configProperties\" class=\"org.springframework.beans.factory.config.PropertiesFactoryBean\">\n    <property name=\"locations\">\n        <list>\n            <value>classpath:conf/db.properties</value>\n            <value>classpath*:conf/autoCreateTable.properties</value>\n        </list>\n    </property>\n</bean>\n<bean id=\"propertyConfigurer\" class=\"org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer\">\n    <property name=\"properties\" ref=\"configProperties\" />\n</bean>\n```\n\n原先的配置使用了简写的形式, 和下面的写法是等价的:\n\n```xml\n<bean id=\"configProperties\" class=\"org.springframework.beans.factory.config.PropertiesFactoryBean\">\n    <property name=\"location\" value=\"classpath*:conf-descriptor.properties\"/>\n</bean>\n<bean id=\"propertyConfigurer\" class=\"org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer\">\n    <property name=\"properties\" ref=\"configProperties\" />\n</bean>\n```\n简写的形式也可以配置多个文件, 使用逗号分隔, 像这样:\n\n```xml\n<context:property-placeholder location=\"classpath:conf/db.properties, classpath*:conf/autoCreateTable.properties\" />\n```\n\nmybatis的的sqlSessionFactory的配置也需要改一下:\n\n```xml\n<bean id=\"sqlSessionFactory\" class=\"com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean\">\n    <property name=\"dataSource\" ref=\"dataSource\" />\n    <property name=\"configLocation\" value=\"classpath:mybatis/sqlMapConfig.xml\" />\n    <property name=\"mapperLocations\">\n        <array>\n            <value>classpath*:mapper/*.xml</value>\n            <value>classpath*:com/gitee/sunchenbin/mybatis/actable/mapping/*/*.xml</value>\n        </array>\n    </property>\n    <property name=\"typeAliasesPackage\" value=\"com.littleboy.pojo.*\" />\n</bean>\n\n```\n和原来比只多加了一行, 最后是mapper扫描器, 需要在basePackage属性中将这个插件的dao的包路径也添加进来。\n\n```xml\n<bean class=\"org.mybatis.spring.mapper.MapperScannerConfigurer\">\n    <property name=\"basePackage\"\n              value=\"com.gitee.sunchenbin.mybatis.actable.dao.*;com.littleboy.dao\" />\n    <property name=\"sqlSessionFactoryBeanName\" value=\"sqlSessionFactory\" />\n</bean>\n```\n\n** 注意, 这里在配置MapperScannerConfigurer时, 要注意路径, actable工具的路径需要加入 `*`, 而我们自己的路径则不需要加 **, 因为它的包路径, dao下面还有其他的包, 所以需要加入星号来扫描, 而我们所有的类都放在dao包下, 如果加入星号会报找不到的错误。\n","slug":"my_project/shopping_mall/Dependence_and_configuration/Shopping-mall-developNote-actable-new-config","published":1,"updated":"2021-10-14T08:18:54.351Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejta006e3vsb4u4f9k5r","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>我们在 <a href=\"/my_project/shopping_mall/Dependence_and_configuration/Shopping-mall-developNote-pojo-dao-interface-service-depend.html\">商城开发笔记-pojo,dao,interface,service的依赖</a> 和 <a href=\"/my_project/shopping_mall/Dependence_and_configuration/Shopping-mall-developNote-service-config.html\">商城开发笔记-service的配置</a> 讨论过这个项目的pojo, dao, interface和service的依赖, 我们使用的是mybatis提供的<code>mybatis-generator</code>插件, 来生成实体类和mapper, 但是如果添加或者修改表结构的话, 就得使用sql来直接修改。 hibernate可以根据实体类来创建或者修改表, 那么我们今天要使用另一个插件, <code>ACTable</code>来让mybatis也支持这个功能。</p>\n<p>这个插件我在 <a href=\"/categories/read-open-source/Java/mybatis-enhance/\">读mybatis-enhance开源项目</a> 这个分类中详细介绍过, 对这个插件感兴趣的话可以移步。</p>\n<span id=\"more\"></span>\n<h2 id=\"添加依赖\"><a href=\"#添加依赖\" class=\"headerlink\" title=\"添加依赖\"></a>添加依赖</h2><p>首先我们需要在<code>parent</code>模块中将这个依赖添加进来:<br>parent的pom.xml的properties部分:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mybatis.actable.version</span>&gt;</span>1.0.4<span class=\"tag\">&lt;/<span class=\"name\">mybatis.actable.version</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>dependencyManagement部分:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.gitee.sunchenbin.mybatis.actable<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-enhance-actable<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;mybatis.actable.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>最后我们需要在dao, pojo和service模块中都加入这个依赖:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.gitee.sunchenbin.mybatis.actable<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-enhance-actable<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><p>其实人家在 <a href=\"http://git.oschina.net/sunchenbin/mybatis-enhance\">码云</a> 的项目介绍中就已经将配置说的很清楚了, 那么接下来我来根据我们这个项目来聊一下具体的配置。</p>\n<h2 id=\"实体类配置\"><a href=\"#实体类配置\" class=\"headerlink\" title=\"实体类配置\"></a>实体类配置</h2><p>例子:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Table(name = &quot;MyTable&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyTable</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@Column(name = &quot;Id&quot;, type = MySqlTypeConstant.BIGINT, length = 20, isKey = true, isAutoIncrement = true)</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> id;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Column(name = &quot;Name&quot;, type = MySqlTypeConstant.VARCHAR, length = 50, isNull = false, defaultValue = &quot;&quot;)</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/********get set 方法就不写了*******/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其实很简单, 一看就可以看明白, 在实体类顶部需要声明<code>@Table</code>注解, 指定表名。<br>在字段顶部声明<code>@Column</code>注解, 指定各种属性。</p>\n<h2 id=\"模式设置\"><a href=\"#模式设置\" class=\"headerlink\" title=\"模式设置\"></a>模式设置</h2><p>这个插件提供了三种模式, 分别是:</p>\n<ol>\n<li>当mybatis.table.auto&#x3D;create时，系统启动后，会将所有的表删除掉，然后根据model中配置的结构重新建表，该操作会破坏原有数据。</li>\n<li>当mybatis.table.auto&#x3D;update时，系统会自动判断哪些表是新建的，哪些字段要修改类型等，哪些字段要删除，哪些字段要新增，该操作不会破坏原有数据。</li>\n<li>当mybatis.table.auto&#x3D;none时，系统不做任何处理。</li>\n</ol>\n<p>可以使用配置文件来进行设置(autoCreateTable.properties):</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">mybatis.table.auto</span>=<span class=\"string\">update</span></span><br><span class=\"line\"><span class=\"meta\">mybatis.model.pack</span>=<span class=\"string\">配置用于实体类的包名</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"xml配置\"><a href=\"#xml配置\" class=\"headerlink\" title=\"xml配置\"></a>xml配置</h2><p>我们这个项目的数据库配置文件是service模块的<code>application-dao.xml</code>, 所以直接修改这个文件就可以了。</p>\n<p>OK, 下面是原来的配置文件:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:context</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 加载配置文件 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:property-placeholder</span> <span class=\"attr\">location</span>=<span class=\"string\">&quot;classpath:conf/db.properties&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 配置数据库连接池 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;dataSource&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> <span class=\"attr\">destroy-method</span>=<span class=\"string\">&quot;close&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;url&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;jdbc.url&#125;&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;username&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;jdbc.username&#125;&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;jdbc.password&#125;&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;driverClassName&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;jdbc.driver&#125;&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 最大连接数 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;maxActive&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;jdbc.pool.maxActive&#125;&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 最小空闲连接数 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;minIdle&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;jdbc.pool.minIdle&#125;&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- mybatis 的sqlSessionFactory, 配置了mybatis的配置文件和mapper.xml文件 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sqlSessionFactory&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;dataSource&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;configLocation&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;classpath:mybatis/sqlMapConfig.xml&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;mapperLocations&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;classpath*:mapper/*.xml&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- mapper 扫描器 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;basePackage&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;com.littleboy.dao&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>我们这里先将刚才设置模式的配置文件引入进来:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;configProperties&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.beans.factory.config.PropertiesFactoryBean&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;locations&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>classpath:conf/db.properties<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>classpath*:conf/autoCreateTable.properties<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;propertyConfigurer&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;properties&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;configProperties&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>原先的配置使用了简写的形式, 和下面的写法是等价的:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;configProperties&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.beans.factory.config.PropertiesFactoryBean&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;location&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;classpath*:conf-descriptor.properties&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;propertyConfigurer&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;properties&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;configProperties&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>简写的形式也可以配置多个文件, 使用逗号分隔, 像这样:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context:property-placeholder</span> <span class=\"attr\">location</span>=<span class=\"string\">&quot;classpath:conf/db.properties, classpath*:conf/autoCreateTable.properties&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>mybatis的的sqlSessionFactory的配置也需要改一下:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sqlSessionFactory&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;dataSource&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;configLocation&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;classpath:mybatis/sqlMapConfig.xml&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;mapperLocations&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">array</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>classpath*:mapper/*.xml<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>classpath*:com/gitee/sunchenbin/mybatis/actable/mapping/*/*.xml<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">array</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;typeAliasesPackage&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;com.littleboy.pojo.*&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>和原来比只多加了一行, 最后是mapper扫描器, 需要在basePackage属性中将这个插件的dao的包路径也添加进来。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;basePackage&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">value</span>=<span class=\"string\">&quot;com.gitee.sunchenbin.mybatis.actable.dao.*;com.littleboy.dao&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;sqlSessionFactoryBeanName&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;sqlSessionFactory&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>** 注意, 这里在配置MapperScannerConfigurer时, 要注意路径, actable工具的路径需要加入 <code>*</code>, 而我们自己的路径则不需要加 **, 因为它的包路径, dao下面还有其他的包, 所以需要加入星号来扫描, 而我们所有的类都放在dao包下, 如果加入星号会报找不到的错误。</p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>我们在 <a href=\"/my_project/shopping_mall/Dependence_and_configuration/Shopping-mall-developNote-pojo-dao-interface-service-depend.html\">商城开发笔记-pojo,dao,interface,service的依赖</a> 和 <a href=\"/my_project/shopping_mall/Dependence_and_configuration/Shopping-mall-developNote-service-config.html\">商城开发笔记-service的配置</a> 讨论过这个项目的pojo, dao, interface和service的依赖, 我们使用的是mybatis提供的<code>mybatis-generator</code>插件, 来生成实体类和mapper, 但是如果添加或者修改表结构的话, 就得使用sql来直接修改。 hibernate可以根据实体类来创建或者修改表, 那么我们今天要使用另一个插件, <code>ACTable</code>来让mybatis也支持这个功能。</p>\n<p>这个插件我在 <a href=\"/categories/read-open-source/Java/mybatis-enhance/\">读mybatis-enhance开源项目</a> 这个分类中详细介绍过, 对这个插件感兴趣的话可以移步。</p>","more":"<h2 id=\"添加依赖\"><a href=\"#添加依赖\" class=\"headerlink\" title=\"添加依赖\"></a>添加依赖</h2><p>首先我们需要在<code>parent</code>模块中将这个依赖添加进来:<br>parent的pom.xml的properties部分:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mybatis.actable.version</span>&gt;</span>1.0.4<span class=\"tag\">&lt;/<span class=\"name\">mybatis.actable.version</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>dependencyManagement部分:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.gitee.sunchenbin.mybatis.actable<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-enhance-actable<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;mybatis.actable.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>最后我们需要在dao, pojo和service模块中都加入这个依赖:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.gitee.sunchenbin.mybatis.actable<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-enhance-actable<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><p>其实人家在 <a href=\"http://git.oschina.net/sunchenbin/mybatis-enhance\">码云</a> 的项目介绍中就已经将配置说的很清楚了, 那么接下来我来根据我们这个项目来聊一下具体的配置。</p>\n<h2 id=\"实体类配置\"><a href=\"#实体类配置\" class=\"headerlink\" title=\"实体类配置\"></a>实体类配置</h2><p>例子:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Table(name = &quot;MyTable&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyTable</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@Column(name = &quot;Id&quot;, type = MySqlTypeConstant.BIGINT, length = 20, isKey = true, isAutoIncrement = true)</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> id;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Column(name = &quot;Name&quot;, type = MySqlTypeConstant.VARCHAR, length = 50, isNull = false, defaultValue = &quot;&quot;)</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/********get set 方法就不写了*******/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其实很简单, 一看就可以看明白, 在实体类顶部需要声明<code>@Table</code>注解, 指定表名。<br>在字段顶部声明<code>@Column</code>注解, 指定各种属性。</p>\n<h2 id=\"模式设置\"><a href=\"#模式设置\" class=\"headerlink\" title=\"模式设置\"></a>模式设置</h2><p>这个插件提供了三种模式, 分别是:</p>\n<ol>\n<li>当mybatis.table.auto&#x3D;create时，系统启动后，会将所有的表删除掉，然后根据model中配置的结构重新建表，该操作会破坏原有数据。</li>\n<li>当mybatis.table.auto&#x3D;update时，系统会自动判断哪些表是新建的，哪些字段要修改类型等，哪些字段要删除，哪些字段要新增，该操作不会破坏原有数据。</li>\n<li>当mybatis.table.auto&#x3D;none时，系统不做任何处理。</li>\n</ol>\n<p>可以使用配置文件来进行设置(autoCreateTable.properties):</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">mybatis.table.auto</span>=<span class=\"string\">update</span></span><br><span class=\"line\"><span class=\"meta\">mybatis.model.pack</span>=<span class=\"string\">配置用于实体类的包名</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"xml配置\"><a href=\"#xml配置\" class=\"headerlink\" title=\"xml配置\"></a>xml配置</h2><p>我们这个项目的数据库配置文件是service模块的<code>application-dao.xml</code>, 所以直接修改这个文件就可以了。</p>\n<p>OK, 下面是原来的配置文件:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:context</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 加载配置文件 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:property-placeholder</span> <span class=\"attr\">location</span>=<span class=\"string\">&quot;classpath:conf/db.properties&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 配置数据库连接池 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;dataSource&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> <span class=\"attr\">destroy-method</span>=<span class=\"string\">&quot;close&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;url&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;jdbc.url&#125;&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;username&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;jdbc.username&#125;&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;jdbc.password&#125;&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;driverClassName&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;jdbc.driver&#125;&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 最大连接数 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;maxActive&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;jdbc.pool.maxActive&#125;&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 最小空闲连接数 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;minIdle&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;jdbc.pool.minIdle&#125;&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- mybatis 的sqlSessionFactory, 配置了mybatis的配置文件和mapper.xml文件 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sqlSessionFactory&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;dataSource&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;configLocation&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;classpath:mybatis/sqlMapConfig.xml&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;mapperLocations&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;classpath*:mapper/*.xml&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- mapper 扫描器 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;basePackage&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;com.littleboy.dao&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>我们这里先将刚才设置模式的配置文件引入进来:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;configProperties&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.beans.factory.config.PropertiesFactoryBean&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;locations&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>classpath:conf/db.properties<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>classpath*:conf/autoCreateTable.properties<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;propertyConfigurer&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;properties&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;configProperties&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>原先的配置使用了简写的形式, 和下面的写法是等价的:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;configProperties&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.beans.factory.config.PropertiesFactoryBean&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;location&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;classpath*:conf-descriptor.properties&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;propertyConfigurer&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;properties&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;configProperties&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>简写的形式也可以配置多个文件, 使用逗号分隔, 像这样:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context:property-placeholder</span> <span class=\"attr\">location</span>=<span class=\"string\">&quot;classpath:conf/db.properties, classpath*:conf/autoCreateTable.properties&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>mybatis的的sqlSessionFactory的配置也需要改一下:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sqlSessionFactory&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;dataSource&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;configLocation&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;classpath:mybatis/sqlMapConfig.xml&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;mapperLocations&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">array</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>classpath*:mapper/*.xml<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>classpath*:com/gitee/sunchenbin/mybatis/actable/mapping/*/*.xml<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">array</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;typeAliasesPackage&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;com.littleboy.pojo.*&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>和原来比只多加了一行, 最后是mapper扫描器, 需要在basePackage属性中将这个插件的dao的包路径也添加进来。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;basePackage&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">value</span>=<span class=\"string\">&quot;com.gitee.sunchenbin.mybatis.actable.dao.*;com.littleboy.dao&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;sqlSessionFactoryBeanName&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;sqlSessionFactory&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>** 注意, 这里在配置MapperScannerConfigurer时, 要注意路径, actable工具的路径需要加入 <code>*</code>, 而我们自己的路径则不需要加 **, 因为它的包路径, dao下面还有其他的包, 所以需要加入星号来扫描, 而我们所有的类都放在dao包下, 如果加入星号会报找不到的错误。</p>"},{"title":"商城开发笔记-common, manager的依赖","date":"2018-11-20T11:33:19.000Z","_content":"\n# common的依赖\n\n## 主体部分\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <!-- 主体内容 -->\n  <parent>\n    <artifactId>parent</artifactId>\n    <groupId>com.littleboy</groupId>\n    <version>0.1</version>\n    <relativePath>../parent/pom.xml</relativePath>\n  </parent>\n  <modelVersion>4.0.0</modelVersion>\n  <artifactId>common</artifactId>\n</project>\n```\n\n## 打包方式\n\n```xml\n<packaging>jar</packaging>\n```\n\n<!--more-->\n\n## 引入依赖\n\n因为是common工程, 所以只需要放其他工程都能用得到的工具:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>joda-time</groupId>\n    <artifactId>joda-time</artifactId>\n  </dependency>\n\n  <dependency>\n    <groupId>org.apache.commons</groupId>\n    <artifactId>commons-lang3</artifactId>\n  </dependency>\n\n  <dependency>\n    <groupId>commons-io</groupId>\n    <artifactId>commons-io</artifactId>\n  </dependency>\n\n  <dependency>\n    <groupId>commons-net</groupId>\n    <artifactId>commons-net</artifactId>\n  </dependency>\n\n  <dependency>\n    <groupId>com.fasterxml.jackson.core</groupId>\n    <artifactId>jackson-databind</artifactId>\n  </dependency>\n\n  <dependency>\n    <groupId>org.apache.httpcomponents</groupId>\n    <artifactId>httpclient</artifactId>\n  </dependency>\n\n  <dependency>\n    <groupId>org.quartz-scheduler</groupId>\n    <artifactId>quartz</artifactId>\n  </dependency>\n\n  <dependency>\n    <groupId>org.slf4j</groupId>\n    <artifactId>slf4j-log4j12</artifactId>\n  </dependency>\n  <dependency>\n    <groupId>junit</groupId>\n    <artifactId>junit</artifactId>\n  </dependency>\n</dependencies>\n```\n\n没什么可说的, 大家看看就好, 这些工具到时候等用到我就会介绍的。\n\n<br>\n\n# Manager的依赖\n\n## 主体部分\n\n参照common工程, 区别只在于artifactId\n\n## 打包方式\n\n同样是jar, 写法参照common工程\n\n## 引入依赖\n\n因为是一个父工程, 本身没什么东西, 所以只需要将common的依赖引用过来就可以, 呐, 是不是将common工程的pom.xml再复制一遍呢? 当然不是, 还记得么, 我们的common工程打包方式是jar, 所以, 可以直接将common当成一个jar包引入进来:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>${parent.groupId}</groupId>\n    <artifactId>common</artifactId>\n    <version>${parent.version}</version>\n  </dependency>\n</dependencies>\n```\n\n看, 这样是不是方便多了呢?\n\n## Maven插件\n\n配置Maven插件的tomcat, 这里指定了它的过滤器路径和端口号:\n\n```xml\n<build>\n  <plugins>\n    <plugin>\n      <groupId>org.apache.tomcat.maven</groupId>\n      <artifactId>tomcat7-maven-plugin</artifactId>\n      <configuration>\n        <path>/</path>\n        <port>8081</port>\n      </configuration>\n    </plugin>\n  </plugins>\n</build>\n```\n\n","source":"_posts/my_project/shopping_mall/Dependence_and_configuration/Shopping-mall-developNote-common-manager-depend.md","raw":"---\ntitle: '商城开发笔记-common, manager的依赖'\ndate: 2018-11-20 19:33:19\ncategories:\n- 开发笔记\n- 商城\n- 配置篇\ntags:\n- 商城开发\n---\n\n# common的依赖\n\n## 主体部分\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <!-- 主体内容 -->\n  <parent>\n    <artifactId>parent</artifactId>\n    <groupId>com.littleboy</groupId>\n    <version>0.1</version>\n    <relativePath>../parent/pom.xml</relativePath>\n  </parent>\n  <modelVersion>4.0.0</modelVersion>\n  <artifactId>common</artifactId>\n</project>\n```\n\n## 打包方式\n\n```xml\n<packaging>jar</packaging>\n```\n\n<!--more-->\n\n## 引入依赖\n\n因为是common工程, 所以只需要放其他工程都能用得到的工具:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>joda-time</groupId>\n    <artifactId>joda-time</artifactId>\n  </dependency>\n\n  <dependency>\n    <groupId>org.apache.commons</groupId>\n    <artifactId>commons-lang3</artifactId>\n  </dependency>\n\n  <dependency>\n    <groupId>commons-io</groupId>\n    <artifactId>commons-io</artifactId>\n  </dependency>\n\n  <dependency>\n    <groupId>commons-net</groupId>\n    <artifactId>commons-net</artifactId>\n  </dependency>\n\n  <dependency>\n    <groupId>com.fasterxml.jackson.core</groupId>\n    <artifactId>jackson-databind</artifactId>\n  </dependency>\n\n  <dependency>\n    <groupId>org.apache.httpcomponents</groupId>\n    <artifactId>httpclient</artifactId>\n  </dependency>\n\n  <dependency>\n    <groupId>org.quartz-scheduler</groupId>\n    <artifactId>quartz</artifactId>\n  </dependency>\n\n  <dependency>\n    <groupId>org.slf4j</groupId>\n    <artifactId>slf4j-log4j12</artifactId>\n  </dependency>\n  <dependency>\n    <groupId>junit</groupId>\n    <artifactId>junit</artifactId>\n  </dependency>\n</dependencies>\n```\n\n没什么可说的, 大家看看就好, 这些工具到时候等用到我就会介绍的。\n\n<br>\n\n# Manager的依赖\n\n## 主体部分\n\n参照common工程, 区别只在于artifactId\n\n## 打包方式\n\n同样是jar, 写法参照common工程\n\n## 引入依赖\n\n因为是一个父工程, 本身没什么东西, 所以只需要将common的依赖引用过来就可以, 呐, 是不是将common工程的pom.xml再复制一遍呢? 当然不是, 还记得么, 我们的common工程打包方式是jar, 所以, 可以直接将common当成一个jar包引入进来:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>${parent.groupId}</groupId>\n    <artifactId>common</artifactId>\n    <version>${parent.version}</version>\n  </dependency>\n</dependencies>\n```\n\n看, 这样是不是方便多了呢?\n\n## Maven插件\n\n配置Maven插件的tomcat, 这里指定了它的过滤器路径和端口号:\n\n```xml\n<build>\n  <plugins>\n    <plugin>\n      <groupId>org.apache.tomcat.maven</groupId>\n      <artifactId>tomcat7-maven-plugin</artifactId>\n      <configuration>\n        <path>/</path>\n        <port>8081</port>\n      </configuration>\n    </plugin>\n  </plugins>\n</build>\n```\n\n","slug":"my_project/shopping_mall/Dependence_and_configuration/Shopping-mall-developNote-common-manager-depend","published":1,"updated":"2021-10-14T08:18:54.355Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejtd006g3vsbdiwt8f2e","content":"<h1 id=\"common的依赖\"><a href=\"#common的依赖\" class=\"headerlink\" title=\"common的依赖\"></a>common的依赖</h1><h2 id=\"主体部分\"><a href=\"#主体部分\" class=\"headerlink\" title=\"主体部分\"></a>主体部分</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 主体内容 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.littleboy<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">relativePath</span>&gt;</span>../parent/pom.xml<span class=\"tag\">&lt;/<span class=\"name\">relativePath</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>common<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"打包方式\"><a href=\"#打包方式\" class=\"headerlink\" title=\"打包方式\"></a>打包方式</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>jar<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"引入依赖\"><a href=\"#引入依赖\" class=\"headerlink\" title=\"引入依赖\"></a>引入依赖</h2><p>因为是common工程, 所以只需要放其他工程都能用得到的工具:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>joda-time<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>joda-time<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.commons<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-lang3<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>commons-io<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-io<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>commons-net<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-net<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-databind<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.httpcomponents<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>httpclient<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.quartz-scheduler<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>quartz<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.slf4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>slf4j-log4j12<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>没什么可说的, 大家看看就好, 这些工具到时候等用到我就会介绍的。</p>\n<br>\n\n<h1 id=\"Manager的依赖\"><a href=\"#Manager的依赖\" class=\"headerlink\" title=\"Manager的依赖\"></a>Manager的依赖</h1><h2 id=\"主体部分-1\"><a href=\"#主体部分-1\" class=\"headerlink\" title=\"主体部分\"></a>主体部分</h2><p>参照common工程, 区别只在于artifactId</p>\n<h2 id=\"打包方式-1\"><a href=\"#打包方式-1\" class=\"headerlink\" title=\"打包方式\"></a>打包方式</h2><p>同样是jar, 写法参照common工程</p>\n<h2 id=\"引入依赖-1\"><a href=\"#引入依赖-1\" class=\"headerlink\" title=\"引入依赖\"></a>引入依赖</h2><p>因为是一个父工程, 本身没什么东西, 所以只需要将common的依赖引用过来就可以, 呐, 是不是将common工程的pom.xml再复制一遍呢? 当然不是, 还记得么, 我们的common工程打包方式是jar, 所以, 可以直接将common当成一个jar包引入进来:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>$&#123;parent.groupId&#125;<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>common<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;parent.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>看, 这样是不是方便多了呢?</p>\n<h2 id=\"Maven插件\"><a href=\"#Maven插件\" class=\"headerlink\" title=\"Maven插件\"></a>Maven插件</h2><p>配置Maven插件的tomcat, 这里指定了它的过滤器路径和端口号:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.tomcat.maven<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">path</span>&gt;</span>/<span class=\"tag\">&lt;/<span class=\"name\">path</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">port</span>&gt;</span>8081<span class=\"tag\">&lt;/<span class=\"name\">port</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"common的依赖\"><a href=\"#common的依赖\" class=\"headerlink\" title=\"common的依赖\"></a>common的依赖</h1><h2 id=\"主体部分\"><a href=\"#主体部分\" class=\"headerlink\" title=\"主体部分\"></a>主体部分</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 主体内容 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.littleboy<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">relativePath</span>&gt;</span>../parent/pom.xml<span class=\"tag\">&lt;/<span class=\"name\">relativePath</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>common<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"打包方式\"><a href=\"#打包方式\" class=\"headerlink\" title=\"打包方式\"></a>打包方式</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>jar<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure>","more":"<h2 id=\"引入依赖\"><a href=\"#引入依赖\" class=\"headerlink\" title=\"引入依赖\"></a>引入依赖</h2><p>因为是common工程, 所以只需要放其他工程都能用得到的工具:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>joda-time<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>joda-time<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.commons<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-lang3<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>commons-io<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-io<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>commons-net<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-net<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-databind<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.httpcomponents<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>httpclient<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.quartz-scheduler<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>quartz<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.slf4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>slf4j-log4j12<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>没什么可说的, 大家看看就好, 这些工具到时候等用到我就会介绍的。</p>\n<br>\n\n<h1 id=\"Manager的依赖\"><a href=\"#Manager的依赖\" class=\"headerlink\" title=\"Manager的依赖\"></a>Manager的依赖</h1><h2 id=\"主体部分-1\"><a href=\"#主体部分-1\" class=\"headerlink\" title=\"主体部分\"></a>主体部分</h2><p>参照common工程, 区别只在于artifactId</p>\n<h2 id=\"打包方式-1\"><a href=\"#打包方式-1\" class=\"headerlink\" title=\"打包方式\"></a>打包方式</h2><p>同样是jar, 写法参照common工程</p>\n<h2 id=\"引入依赖-1\"><a href=\"#引入依赖-1\" class=\"headerlink\" title=\"引入依赖\"></a>引入依赖</h2><p>因为是一个父工程, 本身没什么东西, 所以只需要将common的依赖引用过来就可以, 呐, 是不是将common工程的pom.xml再复制一遍呢? 当然不是, 还记得么, 我们的common工程打包方式是jar, 所以, 可以直接将common当成一个jar包引入进来:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>$&#123;parent.groupId&#125;<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>common<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;parent.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>看, 这样是不是方便多了呢?</p>\n<h2 id=\"Maven插件\"><a href=\"#Maven插件\" class=\"headerlink\" title=\"Maven插件\"></a>Maven插件</h2><p>配置Maven插件的tomcat, 这里指定了它的过滤器路径和端口号:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.tomcat.maven<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">path</span>&gt;</span>/<span class=\"tag\">&lt;/<span class=\"name\">path</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">port</span>&gt;</span>8081<span class=\"tag\">&lt;/<span class=\"name\">port</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>"},{"title":"商城开发笔记 -- 架构","date":"2018-11-16T13:31:10.000Z","_content":"\n# 前言\n\n​    OK, 从今天开始, 我将不定时更新这个系列, 也可以说是一个专栏, 我将开发一个商城, 当然是练手用的, 哈哈。\n​    期间我会把我遇到的所有的难以解决的问题, 解决方案, 突然出现的想法都记录在这个系列里, 希望能帮助到你。\n\n<br>\n\n## 简介\n\n​    本项目的目的是让开发者体验一下现代的大型商业项目的全开发过程, 同时本项目将会使用一些比较常见的开源工具, 并将该工具的使用方式记录到本系列中, 如果我觉得有必要, 甚至会自己去实现一个简单的该开源工具, 并将过程记录下来。 OK, 不多bb, 让我们开始吧! \n\n<!--more-->\n\n<br>\n\n## 架构\n\n首先来介绍一下本项目的架构, 在介绍本项目架构之前, 先来介绍一下都有什么架构吧\n\n![架构示意图](http://dubbo.apache.org/docs/zh-cn/user/sources/images/dubbo-architecture-roadmap.jpg)\n\n1. **ORM**\n\n   单一应用架构, 最原始的架构, 将所有的功能都放到一起, 形成一个系统, 维护性差\n\n2. **MVC**\n\n   垂直应用架构, 将应用拆分成互不相干的几个应用(比如数据库访问层, 服务层, 表现层)\n\n3. **RPC**\n\n   分布式应用架构, 当垂直应用越来越多, 应用之间交互不可避免, 将核心业务独立出来\n\n   举个例子\n\n   商城系统, 在将核心业务独立出来之前, 他的架构是MVC架构, 也就是说分三个模块, 数据库操作层, 服务层, 表现层。也就是这个样子:\n\n   ```mermaid\n   graph TB\n   orm[数据库操作层] --> service[服务层]\n   service --> controller[表现层]\n   controller --> view[视图]\n   ```\n\n   非常明显的垂直应用架构对吧, 当有垂直应用增加的时候, 会变成这个样子:\n\n   ```mermaid\n   graph TD\n   order[商城系统] --> orm[订单数据库操作层]\n   order --> memberOrm\n   order --> goodOrm\n   orm --> goodService\n   orm --> orderService[订单服务层]\n   orderService --> orderController[订单表现层]\n\n   memberOrm[会员数据库操作层] --> orderService[订单服务层]\n   memberOrm --> memberService[会员服务层]\n   memberService --> memberController[会员表现层]\n\n   goodOrm[商品展示数据库操作层] --> orderService[订单服务层]\n   goodOrm --> goodService[商品展示服务层]\n   goodService --> goodController[商品表现层]\n   ```\n\n   ​    这样的系统复杂程度增加之后会不利于维护, 那么, 我们将核心模块独立出来, 拆分成多个工程, 这样就可以将一个系统部署到多台服务器上了\n\n   ```mermaid\n   graph TD\n   order[订单系统] --> orm[数据库操作层]\n   orm --> orderService[订单服务层]\n   orm --> goodService\n   orderService --> orderController[订单表现层]\n\n   member[会员系统] --> memberOrm[会员数据库操作层]\n   memberOrm --> orderService\n   memberOrm --> memberService[会员服务层]\n   memberService --> memberController[会员表现层]\n\n   goodShow[商品展示系统] --> goodOrm[商品展示数据库操作层]\n   goodOrm --> orderService\n   goodOrm --> goodService[商品展示服务层]\n   goodService --> goodController[商品表现层]\n   ```\n\n   ​\n\n4. **SOA**\n\n   ​    现在的架构, 每一个服务都是独立的, 那么如果想要跨服务器去调用会非常困难, 这个时候, 服务中心就出现了, 所有的服务都需要在这个服务中心去注册并暴露ip和端口, 表现层在调用的时候就可以直接通过该ip去调用, 大概长这个样子\n\n   ```mermaid\n   graph TD\n   orderController[订单表现层] --> serviceCenter[服务中心]\n   goodController[商品表现层] --> serviceCenter\n   memberController[会员表现层] --> serviceCenter\n\n   serviceCenter --> orderService[订单服务层]\n   serviceCenter --> goodService[商品服务层]\n   serviceCenter --> memberService[会员服务层]\n   ```\n\n   ​\n\n显而易见, 当然是SOA架构最好了, 我们的这个项目也会采用这种架构来进行开发, 下面来简单介绍一下这个项目的模块组成。","source":"_posts/my_project/shopping_mall/Dependence_and_configuration/Shopping-mall-developNote-framework.md","raw":"---\ntitle: 商城开发笔记 -- 架构\ndate: 2018-11-16 21:31:10\ncategories:\n- 开发笔记\n- 商城\n- 配置篇\ntags:\n- 商城开发\n---\n\n# 前言\n\n​    OK, 从今天开始, 我将不定时更新这个系列, 也可以说是一个专栏, 我将开发一个商城, 当然是练手用的, 哈哈。\n​    期间我会把我遇到的所有的难以解决的问题, 解决方案, 突然出现的想法都记录在这个系列里, 希望能帮助到你。\n\n<br>\n\n## 简介\n\n​    本项目的目的是让开发者体验一下现代的大型商业项目的全开发过程, 同时本项目将会使用一些比较常见的开源工具, 并将该工具的使用方式记录到本系列中, 如果我觉得有必要, 甚至会自己去实现一个简单的该开源工具, 并将过程记录下来。 OK, 不多bb, 让我们开始吧! \n\n<!--more-->\n\n<br>\n\n## 架构\n\n首先来介绍一下本项目的架构, 在介绍本项目架构之前, 先来介绍一下都有什么架构吧\n\n![架构示意图](http://dubbo.apache.org/docs/zh-cn/user/sources/images/dubbo-architecture-roadmap.jpg)\n\n1. **ORM**\n\n   单一应用架构, 最原始的架构, 将所有的功能都放到一起, 形成一个系统, 维护性差\n\n2. **MVC**\n\n   垂直应用架构, 将应用拆分成互不相干的几个应用(比如数据库访问层, 服务层, 表现层)\n\n3. **RPC**\n\n   分布式应用架构, 当垂直应用越来越多, 应用之间交互不可避免, 将核心业务独立出来\n\n   举个例子\n\n   商城系统, 在将核心业务独立出来之前, 他的架构是MVC架构, 也就是说分三个模块, 数据库操作层, 服务层, 表现层。也就是这个样子:\n\n   ```mermaid\n   graph TB\n   orm[数据库操作层] --> service[服务层]\n   service --> controller[表现层]\n   controller --> view[视图]\n   ```\n\n   非常明显的垂直应用架构对吧, 当有垂直应用增加的时候, 会变成这个样子:\n\n   ```mermaid\n   graph TD\n   order[商城系统] --> orm[订单数据库操作层]\n   order --> memberOrm\n   order --> goodOrm\n   orm --> goodService\n   orm --> orderService[订单服务层]\n   orderService --> orderController[订单表现层]\n\n   memberOrm[会员数据库操作层] --> orderService[订单服务层]\n   memberOrm --> memberService[会员服务层]\n   memberService --> memberController[会员表现层]\n\n   goodOrm[商品展示数据库操作层] --> orderService[订单服务层]\n   goodOrm --> goodService[商品展示服务层]\n   goodService --> goodController[商品表现层]\n   ```\n\n   ​    这样的系统复杂程度增加之后会不利于维护, 那么, 我们将核心模块独立出来, 拆分成多个工程, 这样就可以将一个系统部署到多台服务器上了\n\n   ```mermaid\n   graph TD\n   order[订单系统] --> orm[数据库操作层]\n   orm --> orderService[订单服务层]\n   orm --> goodService\n   orderService --> orderController[订单表现层]\n\n   member[会员系统] --> memberOrm[会员数据库操作层]\n   memberOrm --> orderService\n   memberOrm --> memberService[会员服务层]\n   memberService --> memberController[会员表现层]\n\n   goodShow[商品展示系统] --> goodOrm[商品展示数据库操作层]\n   goodOrm --> orderService\n   goodOrm --> goodService[商品展示服务层]\n   goodService --> goodController[商品表现层]\n   ```\n\n   ​\n\n4. **SOA**\n\n   ​    现在的架构, 每一个服务都是独立的, 那么如果想要跨服务器去调用会非常困难, 这个时候, 服务中心就出现了, 所有的服务都需要在这个服务中心去注册并暴露ip和端口, 表现层在调用的时候就可以直接通过该ip去调用, 大概长这个样子\n\n   ```mermaid\n   graph TD\n   orderController[订单表现层] --> serviceCenter[服务中心]\n   goodController[商品表现层] --> serviceCenter\n   memberController[会员表现层] --> serviceCenter\n\n   serviceCenter --> orderService[订单服务层]\n   serviceCenter --> goodService[商品服务层]\n   serviceCenter --> memberService[会员服务层]\n   ```\n\n   ​\n\n显而易见, 当然是SOA架构最好了, 我们的这个项目也会采用这种架构来进行开发, 下面来简单介绍一下这个项目的模块组成。","slug":"my_project/shopping_mall/Dependence_and_configuration/Shopping-mall-developNote-framework","published":1,"updated":"2021-10-14T08:18:54.363Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejtj006l3vsb6el6a3oa","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>​    OK, 从今天开始, 我将不定时更新这个系列, 也可以说是一个专栏, 我将开发一个商城, 当然是练手用的, 哈哈。<br>​    期间我会把我遇到的所有的难以解决的问题, 解决方案, 突然出现的想法都记录在这个系列里, 希望能帮助到你。</p>\n<br>\n\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>​    本项目的目的是让开发者体验一下现代的大型商业项目的全开发过程, 同时本项目将会使用一些比较常见的开源工具, 并将该工具的使用方式记录到本系列中, 如果我觉得有必要, 甚至会自己去实现一个简单的该开源工具, 并将过程记录下来。 OK, 不多bb, 让我们开始吧! </p>\n<span id=\"more\"></span>\n\n<br>\n\n<h2 id=\"架构\"><a href=\"#架构\" class=\"headerlink\" title=\"架构\"></a>架构</h2><p>首先来介绍一下本项目的架构, 在介绍本项目架构之前, 先来介绍一下都有什么架构吧</p>\n<p><img src=\"http://dubbo.apache.org/docs/zh-cn/user/sources/images/dubbo-architecture-roadmap.jpg\" alt=\"架构示意图\"></p>\n<ol>\n<li><p><strong>ORM</strong></p>\n<p>单一应用架构, 最原始的架构, 将所有的功能都放到一起, 形成一个系统, 维护性差</p>\n</li>\n<li><p><strong>MVC</strong></p>\n<p>垂直应用架构, 将应用拆分成互不相干的几个应用(比如数据库访问层, 服务层, 表现层)</p>\n</li>\n<li><p><strong>RPC</strong></p>\n<p>分布式应用架构, 当垂直应用越来越多, 应用之间交互不可避免, 将核心业务独立出来</p>\n<p>举个例子</p>\n<p>商城系统, 在将核心业务独立出来之前, 他的架构是MVC架构, 也就是说分三个模块, 数据库操作层, 服务层, 表现层。也就是这个样子:</p>\n<pre class=\"mermaid\">   graph TB\norm[数据库操作层] --> service[服务层]\nservice --> controller[表现层]\ncontroller --> view[视图]</pre>\n\n<p>非常明显的垂直应用架构对吧, 当有垂直应用增加的时候, 会变成这个样子:</p>\n<pre class=\"mermaid\">   graph TD\norder[商城系统] --> orm[订单数据库操作层]\norder --> memberOrm\norder --> goodOrm\norm --> goodService\norm --> orderService[订单服务层]\norderService --> orderController[订单表现层]\n\nmemberOrm[会员数据库操作层] --> orderService[订单服务层]\nmemberOrm --> memberService[会员服务层]\nmemberService --> memberController[会员表现层]\n\ngoodOrm[商品展示数据库操作层] --> orderService[订单服务层]\ngoodOrm --> goodService[商品展示服务层]\ngoodService --> goodController[商品表现层]</pre>\n\n<p>​    这样的系统复杂程度增加之后会不利于维护, 那么, 我们将核心模块独立出来, 拆分成多个工程, 这样就可以将一个系统部署到多台服务器上了</p>\n<pre class=\"mermaid\">   graph TD\norder[订单系统] --> orm[数据库操作层]\norm --> orderService[订单服务层]\norm --> goodService\norderService --> orderController[订单表现层]\n\nmember[会员系统] --> memberOrm[会员数据库操作层]\nmemberOrm --> orderService\nmemberOrm --> memberService[会员服务层]\nmemberService --> memberController[会员表现层]\n\ngoodShow[商品展示系统] --> goodOrm[商品展示数据库操作层]\ngoodOrm --> orderService\ngoodOrm --> goodService[商品展示服务层]\ngoodService --> goodController[商品表现层]</pre>\n\n<p>​</p>\n</li>\n<li><p><strong>SOA</strong></p>\n<p>​    现在的架构, 每一个服务都是独立的, 那么如果想要跨服务器去调用会非常困难, 这个时候, 服务中心就出现了, 所有的服务都需要在这个服务中心去注册并暴露ip和端口, 表现层在调用的时候就可以直接通过该ip去调用, 大概长这个样子</p>\n<pre class=\"mermaid\">   graph TD\norderController[订单表现层] --> serviceCenter[服务中心]\ngoodController[商品表现层] --> serviceCenter\nmemberController[会员表现层] --> serviceCenter\n\nserviceCenter --> orderService[订单服务层]\nserviceCenter --> goodService[商品服务层]\nserviceCenter --> memberService[会员服务层]</pre>\n\n<p>​</p>\n</li>\n</ol>\n<p>显而易见, 当然是SOA架构最好了, 我们的这个项目也会采用这种架构来进行开发, 下面来简单介绍一下这个项目的模块组成。</p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>​    OK, 从今天开始, 我将不定时更新这个系列, 也可以说是一个专栏, 我将开发一个商城, 当然是练手用的, 哈哈。<br>​    期间我会把我遇到的所有的难以解决的问题, 解决方案, 突然出现的想法都记录在这个系列里, 希望能帮助到你。</p>\n<br>\n\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>​    本项目的目的是让开发者体验一下现代的大型商业项目的全开发过程, 同时本项目将会使用一些比较常见的开源工具, 并将该工具的使用方式记录到本系列中, 如果我觉得有必要, 甚至会自己去实现一个简单的该开源工具, 并将过程记录下来。 OK, 不多bb, 让我们开始吧! </p>","more":"<br>\n\n<h2 id=\"架构\"><a href=\"#架构\" class=\"headerlink\" title=\"架构\"></a>架构</h2><p>首先来介绍一下本项目的架构, 在介绍本项目架构之前, 先来介绍一下都有什么架构吧</p>\n<p><img src=\"http://dubbo.apache.org/docs/zh-cn/user/sources/images/dubbo-architecture-roadmap.jpg\" alt=\"架构示意图\"></p>\n<ol>\n<li><p><strong>ORM</strong></p>\n<p>单一应用架构, 最原始的架构, 将所有的功能都放到一起, 形成一个系统, 维护性差</p>\n</li>\n<li><p><strong>MVC</strong></p>\n<p>垂直应用架构, 将应用拆分成互不相干的几个应用(比如数据库访问层, 服务层, 表现层)</p>\n</li>\n<li><p><strong>RPC</strong></p>\n<p>分布式应用架构, 当垂直应用越来越多, 应用之间交互不可避免, 将核心业务独立出来</p>\n<p>举个例子</p>\n<p>商城系统, 在将核心业务独立出来之前, 他的架构是MVC架构, 也就是说分三个模块, 数据库操作层, 服务层, 表现层。也就是这个样子:</p>\n<pre class=\"mermaid\">   graph TB\norm[数据库操作层] --> service[服务层]\nservice --> controller[表现层]\ncontroller --> view[视图]</pre>\n\n<p>非常明显的垂直应用架构对吧, 当有垂直应用增加的时候, 会变成这个样子:</p>\n<pre class=\"mermaid\">   graph TD\norder[商城系统] --> orm[订单数据库操作层]\norder --> memberOrm\norder --> goodOrm\norm --> goodService\norm --> orderService[订单服务层]\norderService --> orderController[订单表现层]\n\nmemberOrm[会员数据库操作层] --> orderService[订单服务层]\nmemberOrm --> memberService[会员服务层]\nmemberService --> memberController[会员表现层]\n\ngoodOrm[商品展示数据库操作层] --> orderService[订单服务层]\ngoodOrm --> goodService[商品展示服务层]\ngoodService --> goodController[商品表现层]</pre>\n\n<p>​    这样的系统复杂程度增加之后会不利于维护, 那么, 我们将核心模块独立出来, 拆分成多个工程, 这样就可以将一个系统部署到多台服务器上了</p>\n<pre class=\"mermaid\">   graph TD\norder[订单系统] --> orm[数据库操作层]\norm --> orderService[订单服务层]\norm --> goodService\norderService --> orderController[订单表现层]\n\nmember[会员系统] --> memberOrm[会员数据库操作层]\nmemberOrm --> orderService\nmemberOrm --> memberService[会员服务层]\nmemberService --> memberController[会员表现层]\n\ngoodShow[商品展示系统] --> goodOrm[商品展示数据库操作层]\ngoodOrm --> orderService\ngoodOrm --> goodService[商品展示服务层]\ngoodService --> goodController[商品表现层]</pre>\n\n<p>​</p>\n</li>\n<li><p><strong>SOA</strong></p>\n<p>​    现在的架构, 每一个服务都是独立的, 那么如果想要跨服务器去调用会非常困难, 这个时候, 服务中心就出现了, 所有的服务都需要在这个服务中心去注册并暴露ip和端口, 表现层在调用的时候就可以直接通过该ip去调用, 大概长这个样子</p>\n<pre class=\"mermaid\">   graph TD\norderController[订单表现层] --> serviceCenter[服务中心]\ngoodController[商品表现层] --> serviceCenter\nmemberController[会员表现层] --> serviceCenter\n\nserviceCenter --> orderService[订单服务层]\nserviceCenter --> goodService[商品服务层]\nserviceCenter --> memberService[会员服务层]</pre>\n\n<p>​</p>\n</li>\n</ol>\n<p>显而易见, 当然是SOA架构最好了, 我们的这个项目也会采用这种架构来进行开发, 下面来简单介绍一下这个项目的模块组成。</p>"},{"title":"商城开发笔记-linux端环境搭建","date":"2018-12-09T09:56:18.000Z","_content":"\n# 在Linux系统(CentOS)下搭建运行环境\n\n## 前言\n\n由于[这篇文章](/operation_system/windows/deploy-system.html), 我尝试着把我的项目放到linux系统上运行试试看, 然后就有了这篇总结。\n\n<!--more-->\n\n## 准备\n\n* 一台已经装好linux系统的电脑\n\n嗯, 只需要这些, 具体装机的教程[看这里](/operation_system/windows/deploy-system.html)。\n\n## 搭建环境\n\n具体的步骤[看这里](/operation_system/linux/linux-java-git-maven-zookeeper.html)\n\n按照以上步骤我们就可以得到一台安装好java, maven, git以及zookeeper的linux系统的电脑了。\n\n## 启动项目\n\n我们现在用的是linux系统, 当然要使用全自动化来做我们想做的事情啦, 所以编写shell脚本来运行我们的项目。\n\n由于我们的项目架构是分布式的, 需要启动多个项目, 所以需要编写多个shell脚本来运行我们的项目。\n\n> startShoppingMall.sh\n\n```shell\n#!/bin/bash\nzookeeper=~/tools/zookeeper/bin\nweb=~/git/shopping_mall/web\n\nsh $zookeeper/zkServer.sh\ngnome-terminal -t \"service_project\" -x bash -c \"sh ./startService.sh;exec bash;\"\n\nsleep 20s\n\ncd $web\nmvn tomcat7:run\n```\n\n具体的思路是:\n\n1. 声明所需要的变量(2 - 3 行)\n2. 启动zookeeper(5行)\n3. 启动另一个窗口来执行启动service project的脚本(6行)\n4. 等待20秒(8行)\n5. 启动web project(10 - 11行)\n\n> startService.sh\n\n```shell\n#!/bin/bash\nservice=~/git/shopping_mall/service\ncd $service\nmvn tomcat7:run\n```\n\n## 遇到的问题\n\n### jdk解压缩的问题\n\noracle官网的jdk压缩包解压不了,  [这篇文章](/operation_system/linux/linux-java-git-maven-zookeeper.html)里有讲。\n\n### 启动项目不能访问的问题\n\n* 启动项目之后访问不了, ubuntu没有这个问题, CentOS有, 因为CentOS自带防火墙, 需要将指定的端口设为白名单\n\n#### 查看防火墙状态\n\n```shell\n$ systemctl status firewalld\n```\n\n#### 开启防火墙并设置开机自启\n\n```shell\n$ systemctl start firewalld\n$ systemctl enable firewalld\n```\n\n#### 开放端口\n\n```shell\n$ firewall-cmd --zone=public --add-port=22/tcp --permanent\n$ firewall-cmd --reload # 重新载入使更改生效\n```\n\n#### 查看指定端口是否开放\n\n```shell\n$ firewall-cmd --zone=public --query-port=22/tcp\n```\n\n#### 查看所有开放端口\n\n```shell\n$ firewall-cmd --zone=public --list-ports\n```\n\n#### 关掉开放的端口\n\n```shell\n$ firewall-cmd --zone=public --remove-port=22/tcp --permanent\n$ firewall-cmd --reload # 重新载入使更改生效\n```\n\n#### 批量开放端口\n\n```shell\n$ firewall-cmd --zone=public --add-port=100-500/tcp --permanent\n$ firewall-cmd --reload # 重新载入使更改生效\n```\n\n#### 批量限制端口\n\n```shell\n$ firewall-cmd --zone=public --remove-port=100-500/tcp --permanent\n$ firewall-cmd --reload\n```\n\n#### 开放ip\n\n```shell\n$ firewall-cmd --permanent --add-rich-rule=\"rule family=\"ipv4\" source address=\"192.168.0.200\" port protocol=\"tcp\" port=\"80\" reject\"\n$ firewall-cmd --reload # 重新载入使更改生效\n```\n\n限制指定ip访问指定端口\n\n#### 查看设置的规则\n\n```shell\n$ firewall-cmd --zone=public --list-rich-rules\n```\n\n#### 解除ip限制\n\n```shell\n$ firewall-cmd --permanent --add-rich-rule=\"rule family=\"ipv4\" source address=\"192.168.0.200\" port protocol=\"tcp\" port=\"80\" accept\"\n$ firewall-cmd --reload # 重新载入使更改生效\n```\n\n#### 限制ip段\n\n```shell\n$ firewall-cmd --permanent --add-rich-rule=\"rule family=\"ipv4\" source address=\"10.0.0.0/24\" port protocol=\"tcp\" port=\"80\" reject\"\n$ firewall-cmd --reload # 重新载入使更改生效\n```\n\n其中10.0.0.0/24表示为从10.0.0.0这个IP开始，24代表子网掩码为255.255.255.0，共包含256个地址，即从0-255共256个IP，即正好限制了这一整段的IP地址，具体的设置规则可参考下表\n\n| 选项 | IP总数 | 子网掩码        | C段个数 |\n| ---- | ------ | --------------- | ------- |\n| /30  | 4      | 255.255.255.252 | 1/64    |\n| /29  | 8      | 255.255.255.248 | 1/32    |\n| /28  | 16     | 255.255.255.240 | 1/16    |\n| /27  | 32     | 255.255.255.224 | 1/8     |\n| /26  | 64     | 255.255.255.192 | 1/4     |\n| /24  | 256    | 255.255.255.0   | 1       |\n| /23  | 512    | 255.255.254.0   | 2       |\n| /22  | 1024   | 255.255.252.0   | 4       |\n| /21  | 2048   | 255.255.248.0   | 8       |\n| /20  | 4096   | 255.255.240.0   | 16      |\n| /19  | 8192   | 255.255.224.0   | 32      |\n| /18  | 16384  | 255.255.192.0   | 64      |\n| /17  | 32768  | 255.255.128.0   | 128     |\n| /16  | 65536  | 255.255.0.0     | 256     |\n\n#### 打开限制ip段\n\n```shell\n$ firewall-cmd --permanent --add-rich-rule=\"rule family=\"ipv4\" source address=\"10.0.0.0/24\" port protocol=\"tcp\" port=\"80\" accept\"\n$ firewall-cmd --reload # 重新载入使更改生效\n```\n\n* 还有一种情况是端口已经被占用\n\n这种情况可以使用\n\n```shell\n$ netstat -nl | grep 8080\n```\n\n来查看指定的端口号有没有被占用, 更多的选项请输入\n\n```shell\n$ man netstat\n```\n\n来查看\n","source":"_posts/my_project/shopping_mall/Dependence_and_configuration/Shopping-mall-developNote-linux-environment.md","raw":"---\ntitle: 商城开发笔记-linux端环境搭建\ndate: 2018-12-09 17:56:18\ncategories:\n- 开发笔记\n- 商城\n- 配置篇\ntags:\n- 商城开发\n- linux\n---\n\n# 在Linux系统(CentOS)下搭建运行环境\n\n## 前言\n\n由于[这篇文章](/operation_system/windows/deploy-system.html), 我尝试着把我的项目放到linux系统上运行试试看, 然后就有了这篇总结。\n\n<!--more-->\n\n## 准备\n\n* 一台已经装好linux系统的电脑\n\n嗯, 只需要这些, 具体装机的教程[看这里](/operation_system/windows/deploy-system.html)。\n\n## 搭建环境\n\n具体的步骤[看这里](/operation_system/linux/linux-java-git-maven-zookeeper.html)\n\n按照以上步骤我们就可以得到一台安装好java, maven, git以及zookeeper的linux系统的电脑了。\n\n## 启动项目\n\n我们现在用的是linux系统, 当然要使用全自动化来做我们想做的事情啦, 所以编写shell脚本来运行我们的项目。\n\n由于我们的项目架构是分布式的, 需要启动多个项目, 所以需要编写多个shell脚本来运行我们的项目。\n\n> startShoppingMall.sh\n\n```shell\n#!/bin/bash\nzookeeper=~/tools/zookeeper/bin\nweb=~/git/shopping_mall/web\n\nsh $zookeeper/zkServer.sh\ngnome-terminal -t \"service_project\" -x bash -c \"sh ./startService.sh;exec bash;\"\n\nsleep 20s\n\ncd $web\nmvn tomcat7:run\n```\n\n具体的思路是:\n\n1. 声明所需要的变量(2 - 3 行)\n2. 启动zookeeper(5行)\n3. 启动另一个窗口来执行启动service project的脚本(6行)\n4. 等待20秒(8行)\n5. 启动web project(10 - 11行)\n\n> startService.sh\n\n```shell\n#!/bin/bash\nservice=~/git/shopping_mall/service\ncd $service\nmvn tomcat7:run\n```\n\n## 遇到的问题\n\n### jdk解压缩的问题\n\noracle官网的jdk压缩包解压不了,  [这篇文章](/operation_system/linux/linux-java-git-maven-zookeeper.html)里有讲。\n\n### 启动项目不能访问的问题\n\n* 启动项目之后访问不了, ubuntu没有这个问题, CentOS有, 因为CentOS自带防火墙, 需要将指定的端口设为白名单\n\n#### 查看防火墙状态\n\n```shell\n$ systemctl status firewalld\n```\n\n#### 开启防火墙并设置开机自启\n\n```shell\n$ systemctl start firewalld\n$ systemctl enable firewalld\n```\n\n#### 开放端口\n\n```shell\n$ firewall-cmd --zone=public --add-port=22/tcp --permanent\n$ firewall-cmd --reload # 重新载入使更改生效\n```\n\n#### 查看指定端口是否开放\n\n```shell\n$ firewall-cmd --zone=public --query-port=22/tcp\n```\n\n#### 查看所有开放端口\n\n```shell\n$ firewall-cmd --zone=public --list-ports\n```\n\n#### 关掉开放的端口\n\n```shell\n$ firewall-cmd --zone=public --remove-port=22/tcp --permanent\n$ firewall-cmd --reload # 重新载入使更改生效\n```\n\n#### 批量开放端口\n\n```shell\n$ firewall-cmd --zone=public --add-port=100-500/tcp --permanent\n$ firewall-cmd --reload # 重新载入使更改生效\n```\n\n#### 批量限制端口\n\n```shell\n$ firewall-cmd --zone=public --remove-port=100-500/tcp --permanent\n$ firewall-cmd --reload\n```\n\n#### 开放ip\n\n```shell\n$ firewall-cmd --permanent --add-rich-rule=\"rule family=\"ipv4\" source address=\"192.168.0.200\" port protocol=\"tcp\" port=\"80\" reject\"\n$ firewall-cmd --reload # 重新载入使更改生效\n```\n\n限制指定ip访问指定端口\n\n#### 查看设置的规则\n\n```shell\n$ firewall-cmd --zone=public --list-rich-rules\n```\n\n#### 解除ip限制\n\n```shell\n$ firewall-cmd --permanent --add-rich-rule=\"rule family=\"ipv4\" source address=\"192.168.0.200\" port protocol=\"tcp\" port=\"80\" accept\"\n$ firewall-cmd --reload # 重新载入使更改生效\n```\n\n#### 限制ip段\n\n```shell\n$ firewall-cmd --permanent --add-rich-rule=\"rule family=\"ipv4\" source address=\"10.0.0.0/24\" port protocol=\"tcp\" port=\"80\" reject\"\n$ firewall-cmd --reload # 重新载入使更改生效\n```\n\n其中10.0.0.0/24表示为从10.0.0.0这个IP开始，24代表子网掩码为255.255.255.0，共包含256个地址，即从0-255共256个IP，即正好限制了这一整段的IP地址，具体的设置规则可参考下表\n\n| 选项 | IP总数 | 子网掩码        | C段个数 |\n| ---- | ------ | --------------- | ------- |\n| /30  | 4      | 255.255.255.252 | 1/64    |\n| /29  | 8      | 255.255.255.248 | 1/32    |\n| /28  | 16     | 255.255.255.240 | 1/16    |\n| /27  | 32     | 255.255.255.224 | 1/8     |\n| /26  | 64     | 255.255.255.192 | 1/4     |\n| /24  | 256    | 255.255.255.0   | 1       |\n| /23  | 512    | 255.255.254.0   | 2       |\n| /22  | 1024   | 255.255.252.0   | 4       |\n| /21  | 2048   | 255.255.248.0   | 8       |\n| /20  | 4096   | 255.255.240.0   | 16      |\n| /19  | 8192   | 255.255.224.0   | 32      |\n| /18  | 16384  | 255.255.192.0   | 64      |\n| /17  | 32768  | 255.255.128.0   | 128     |\n| /16  | 65536  | 255.255.0.0     | 256     |\n\n#### 打开限制ip段\n\n```shell\n$ firewall-cmd --permanent --add-rich-rule=\"rule family=\"ipv4\" source address=\"10.0.0.0/24\" port protocol=\"tcp\" port=\"80\" accept\"\n$ firewall-cmd --reload # 重新载入使更改生效\n```\n\n* 还有一种情况是端口已经被占用\n\n这种情况可以使用\n\n```shell\n$ netstat -nl | grep 8080\n```\n\n来查看指定的端口号有没有被占用, 更多的选项请输入\n\n```shell\n$ man netstat\n```\n\n来查看\n","slug":"my_project/shopping_mall/Dependence_and_configuration/Shopping-mall-developNote-linux-environment","published":1,"updated":"2021-10-14T08:18:54.363Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejtl006n3vsb3a3z4p95","content":"<h1 id=\"在Linux系统-CentOS-下搭建运行环境\"><a href=\"#在Linux系统-CentOS-下搭建运行环境\" class=\"headerlink\" title=\"在Linux系统(CentOS)下搭建运行环境\"></a>在Linux系统(CentOS)下搭建运行环境</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>由于<a href=\"/operation_system/windows/deploy-system.html\">这篇文章</a>, 我尝试着把我的项目放到linux系统上运行试试看, 然后就有了这篇总结。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><ul>\n<li>一台已经装好linux系统的电脑</li>\n</ul>\n<p>嗯, 只需要这些, 具体装机的教程<a href=\"/operation_system/windows/deploy-system.html\">看这里</a>。</p>\n<h2 id=\"搭建环境\"><a href=\"#搭建环境\" class=\"headerlink\" title=\"搭建环境\"></a>搭建环境</h2><p>具体的步骤<a href=\"/operation_system/linux/linux-java-git-maven-zookeeper.html\">看这里</a></p>\n<p>按照以上步骤我们就可以得到一台安装好java, maven, git以及zookeeper的linux系统的电脑了。</p>\n<h2 id=\"启动项目\"><a href=\"#启动项目\" class=\"headerlink\" title=\"启动项目\"></a>启动项目</h2><p>我们现在用的是linux系统, 当然要使用全自动化来做我们想做的事情啦, 所以编写shell脚本来运行我们的项目。</p>\n<p>由于我们的项目架构是分布式的, 需要启动多个项目, 所以需要编写多个shell脚本来运行我们的项目。</p>\n<blockquote>\n<p>startShoppingMall.sh</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\">zookeeper=~/tools/zookeeper/bin</span><br><span class=\"line\">web=~/git/shopping_mall/web</span><br><span class=\"line\"></span><br><span class=\"line\">sh $zookeeper/zkServer.sh</span><br><span class=\"line\">gnome-terminal -t &quot;service_project&quot; -x bash -c &quot;sh ./startService.sh;exec bash;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">sleep 20s</span><br><span class=\"line\"></span><br><span class=\"line\">cd $web</span><br><span class=\"line\">mvn tomcat7:run</span><br></pre></td></tr></table></figure>\n\n<p>具体的思路是:</p>\n<ol>\n<li>声明所需要的变量(2 - 3 行)</li>\n<li>启动zookeeper(5行)</li>\n<li>启动另一个窗口来执行启动service project的脚本(6行)</li>\n<li>等待20秒(8行)</li>\n<li>启动web project(10 - 11行)</li>\n</ol>\n<blockquote>\n<p>startService.sh</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\">service=~/git/shopping_mall/service</span><br><span class=\"line\">cd $service</span><br><span class=\"line\">mvn tomcat7:run</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h2><h3 id=\"jdk解压缩的问题\"><a href=\"#jdk解压缩的问题\" class=\"headerlink\" title=\"jdk解压缩的问题\"></a>jdk解压缩的问题</h3><p>oracle官网的jdk压缩包解压不了,  <a href=\"/operation_system/linux/linux-java-git-maven-zookeeper.html\">这篇文章</a>里有讲。</p>\n<h3 id=\"启动项目不能访问的问题\"><a href=\"#启动项目不能访问的问题\" class=\"headerlink\" title=\"启动项目不能访问的问题\"></a>启动项目不能访问的问题</h3><ul>\n<li>启动项目之后访问不了, ubuntu没有这个问题, CentOS有, 因为CentOS自带防火墙, 需要将指定的端口设为白名单</li>\n</ul>\n<h4 id=\"查看防火墙状态\"><a href=\"#查看防火墙状态\" class=\"headerlink\" title=\"查看防火墙状态\"></a>查看防火墙状态</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> systemctl status firewalld</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"开启防火墙并设置开机自启\"><a href=\"#开启防火墙并设置开机自启\" class=\"headerlink\" title=\"开启防火墙并设置开机自启\"></a>开启防火墙并设置开机自启</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> systemctl start firewalld</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> systemctl <span class=\"built_in\">enable</span> firewalld</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"开放端口\"><a href=\"#开放端口\" class=\"headerlink\" title=\"开放端口\"></a>开放端口</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> firewall-cmd --zone=public --add-port=22/tcp --permanent</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> firewall-cmd --reload <span class=\"comment\"># 重新载入使更改生效</span></span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看指定端口是否开放\"><a href=\"#查看指定端口是否开放\" class=\"headerlink\" title=\"查看指定端口是否开放\"></a>查看指定端口是否开放</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> firewall-cmd --zone=public --query-port=22/tcp</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看所有开放端口\"><a href=\"#查看所有开放端口\" class=\"headerlink\" title=\"查看所有开放端口\"></a>查看所有开放端口</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> firewall-cmd --zone=public --list-ports</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"关掉开放的端口\"><a href=\"#关掉开放的端口\" class=\"headerlink\" title=\"关掉开放的端口\"></a>关掉开放的端口</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> firewall-cmd --zone=public --remove-port=22/tcp --permanent</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> firewall-cmd --reload <span class=\"comment\"># 重新载入使更改生效</span></span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"批量开放端口\"><a href=\"#批量开放端口\" class=\"headerlink\" title=\"批量开放端口\"></a>批量开放端口</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> firewall-cmd --zone=public --add-port=100-500/tcp --permanent</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> firewall-cmd --reload <span class=\"comment\"># 重新载入使更改生效</span></span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"批量限制端口\"><a href=\"#批量限制端口\" class=\"headerlink\" title=\"批量限制端口\"></a>批量限制端口</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> firewall-cmd --zone=public --remove-port=100-500/tcp --permanent</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> firewall-cmd --reload</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"开放ip\"><a href=\"#开放ip\" class=\"headerlink\" title=\"开放ip\"></a>开放ip</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> firewall-cmd --permanent --add-rich-rule=<span class=\"string\">&quot;rule family=&quot;</span>ipv4<span class=\"string\">&quot; source address=&quot;</span>192.168.0.200<span class=\"string\">&quot; port protocol=&quot;</span>tcp<span class=\"string\">&quot; port=&quot;</span>80<span class=\"string\">&quot; reject&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> firewall-cmd --reload <span class=\"comment\"># 重新载入使更改生效</span></span></span><br></pre></td></tr></table></figure>\n\n<p>限制指定ip访问指定端口</p>\n<h4 id=\"查看设置的规则\"><a href=\"#查看设置的规则\" class=\"headerlink\" title=\"查看设置的规则\"></a>查看设置的规则</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> firewall-cmd --zone=public --list-rich-rules</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"解除ip限制\"><a href=\"#解除ip限制\" class=\"headerlink\" title=\"解除ip限制\"></a>解除ip限制</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> firewall-cmd --permanent --add-rich-rule=<span class=\"string\">&quot;rule family=&quot;</span>ipv4<span class=\"string\">&quot; source address=&quot;</span>192.168.0.200<span class=\"string\">&quot; port protocol=&quot;</span>tcp<span class=\"string\">&quot; port=&quot;</span>80<span class=\"string\">&quot; accept&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> firewall-cmd --reload <span class=\"comment\"># 重新载入使更改生效</span></span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"限制ip段\"><a href=\"#限制ip段\" class=\"headerlink\" title=\"限制ip段\"></a>限制ip段</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> firewall-cmd --permanent --add-rich-rule=<span class=\"string\">&quot;rule family=&quot;</span>ipv4<span class=\"string\">&quot; source address=&quot;</span>10.0.0.0/24<span class=\"string\">&quot; port protocol=&quot;</span>tcp<span class=\"string\">&quot; port=&quot;</span>80<span class=\"string\">&quot; reject&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> firewall-cmd --reload <span class=\"comment\"># 重新载入使更改生效</span></span></span><br></pre></td></tr></table></figure>\n\n<p>其中10.0.0.0&#x2F;24表示为从10.0.0.0这个IP开始，24代表子网掩码为255.255.255.0，共包含256个地址，即从0-255共256个IP，即正好限制了这一整段的IP地址，具体的设置规则可参考下表</p>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>IP总数</th>\n<th>子网掩码</th>\n<th>C段个数</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&#x2F;30</td>\n<td>4</td>\n<td>255.255.255.252</td>\n<td>1&#x2F;64</td>\n</tr>\n<tr>\n<td>&#x2F;29</td>\n<td>8</td>\n<td>255.255.255.248</td>\n<td>1&#x2F;32</td>\n</tr>\n<tr>\n<td>&#x2F;28</td>\n<td>16</td>\n<td>255.255.255.240</td>\n<td>1&#x2F;16</td>\n</tr>\n<tr>\n<td>&#x2F;27</td>\n<td>32</td>\n<td>255.255.255.224</td>\n<td>1&#x2F;8</td>\n</tr>\n<tr>\n<td>&#x2F;26</td>\n<td>64</td>\n<td>255.255.255.192</td>\n<td>1&#x2F;4</td>\n</tr>\n<tr>\n<td>&#x2F;24</td>\n<td>256</td>\n<td>255.255.255.0</td>\n<td>1</td>\n</tr>\n<tr>\n<td>&#x2F;23</td>\n<td>512</td>\n<td>255.255.254.0</td>\n<td>2</td>\n</tr>\n<tr>\n<td>&#x2F;22</td>\n<td>1024</td>\n<td>255.255.252.0</td>\n<td>4</td>\n</tr>\n<tr>\n<td>&#x2F;21</td>\n<td>2048</td>\n<td>255.255.248.0</td>\n<td>8</td>\n</tr>\n<tr>\n<td>&#x2F;20</td>\n<td>4096</td>\n<td>255.255.240.0</td>\n<td>16</td>\n</tr>\n<tr>\n<td>&#x2F;19</td>\n<td>8192</td>\n<td>255.255.224.0</td>\n<td>32</td>\n</tr>\n<tr>\n<td>&#x2F;18</td>\n<td>16384</td>\n<td>255.255.192.0</td>\n<td>64</td>\n</tr>\n<tr>\n<td>&#x2F;17</td>\n<td>32768</td>\n<td>255.255.128.0</td>\n<td>128</td>\n</tr>\n<tr>\n<td>&#x2F;16</td>\n<td>65536</td>\n<td>255.255.0.0</td>\n<td>256</td>\n</tr>\n</tbody></table>\n<h4 id=\"打开限制ip段\"><a href=\"#打开限制ip段\" class=\"headerlink\" title=\"打开限制ip段\"></a>打开限制ip段</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> firewall-cmd --permanent --add-rich-rule=<span class=\"string\">&quot;rule family=&quot;</span>ipv4<span class=\"string\">&quot; source address=&quot;</span>10.0.0.0/24<span class=\"string\">&quot; port protocol=&quot;</span>tcp<span class=\"string\">&quot; port=&quot;</span>80<span class=\"string\">&quot; accept&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> firewall-cmd --reload <span class=\"comment\"># 重新载入使更改生效</span></span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>还有一种情况是端口已经被占用</li>\n</ul>\n<p>这种情况可以使用</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> netstat -nl | grep 8080</span></span><br></pre></td></tr></table></figure>\n\n<p>来查看指定的端口号有没有被占用, 更多的选项请输入</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> man netstat</span></span><br></pre></td></tr></table></figure>\n\n<p>来查看</p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"在Linux系统-CentOS-下搭建运行环境\"><a href=\"#在Linux系统-CentOS-下搭建运行环境\" class=\"headerlink\" title=\"在Linux系统(CentOS)下搭建运行环境\"></a>在Linux系统(CentOS)下搭建运行环境</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>由于<a href=\"/operation_system/windows/deploy-system.html\">这篇文章</a>, 我尝试着把我的项目放到linux系统上运行试试看, 然后就有了这篇总结。</p>","more":"<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><ul>\n<li>一台已经装好linux系统的电脑</li>\n</ul>\n<p>嗯, 只需要这些, 具体装机的教程<a href=\"/operation_system/windows/deploy-system.html\">看这里</a>。</p>\n<h2 id=\"搭建环境\"><a href=\"#搭建环境\" class=\"headerlink\" title=\"搭建环境\"></a>搭建环境</h2><p>具体的步骤<a href=\"/operation_system/linux/linux-java-git-maven-zookeeper.html\">看这里</a></p>\n<p>按照以上步骤我们就可以得到一台安装好java, maven, git以及zookeeper的linux系统的电脑了。</p>\n<h2 id=\"启动项目\"><a href=\"#启动项目\" class=\"headerlink\" title=\"启动项目\"></a>启动项目</h2><p>我们现在用的是linux系统, 当然要使用全自动化来做我们想做的事情啦, 所以编写shell脚本来运行我们的项目。</p>\n<p>由于我们的项目架构是分布式的, 需要启动多个项目, 所以需要编写多个shell脚本来运行我们的项目。</p>\n<blockquote>\n<p>startShoppingMall.sh</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\">zookeeper=~/tools/zookeeper/bin</span><br><span class=\"line\">web=~/git/shopping_mall/web</span><br><span class=\"line\"></span><br><span class=\"line\">sh $zookeeper/zkServer.sh</span><br><span class=\"line\">gnome-terminal -t &quot;service_project&quot; -x bash -c &quot;sh ./startService.sh;exec bash;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">sleep 20s</span><br><span class=\"line\"></span><br><span class=\"line\">cd $web</span><br><span class=\"line\">mvn tomcat7:run</span><br></pre></td></tr></table></figure>\n\n<p>具体的思路是:</p>\n<ol>\n<li>声明所需要的变量(2 - 3 行)</li>\n<li>启动zookeeper(5行)</li>\n<li>启动另一个窗口来执行启动service project的脚本(6行)</li>\n<li>等待20秒(8行)</li>\n<li>启动web project(10 - 11行)</li>\n</ol>\n<blockquote>\n<p>startService.sh</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\">service=~/git/shopping_mall/service</span><br><span class=\"line\">cd $service</span><br><span class=\"line\">mvn tomcat7:run</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h2><h3 id=\"jdk解压缩的问题\"><a href=\"#jdk解压缩的问题\" class=\"headerlink\" title=\"jdk解压缩的问题\"></a>jdk解压缩的问题</h3><p>oracle官网的jdk压缩包解压不了,  <a href=\"/operation_system/linux/linux-java-git-maven-zookeeper.html\">这篇文章</a>里有讲。</p>\n<h3 id=\"启动项目不能访问的问题\"><a href=\"#启动项目不能访问的问题\" class=\"headerlink\" title=\"启动项目不能访问的问题\"></a>启动项目不能访问的问题</h3><ul>\n<li>启动项目之后访问不了, ubuntu没有这个问题, CentOS有, 因为CentOS自带防火墙, 需要将指定的端口设为白名单</li>\n</ul>\n<h4 id=\"查看防火墙状态\"><a href=\"#查看防火墙状态\" class=\"headerlink\" title=\"查看防火墙状态\"></a>查看防火墙状态</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> systemctl status firewalld</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"开启防火墙并设置开机自启\"><a href=\"#开启防火墙并设置开机自启\" class=\"headerlink\" title=\"开启防火墙并设置开机自启\"></a>开启防火墙并设置开机自启</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> systemctl start firewalld</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> systemctl <span class=\"built_in\">enable</span> firewalld</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"开放端口\"><a href=\"#开放端口\" class=\"headerlink\" title=\"开放端口\"></a>开放端口</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> firewall-cmd --zone=public --add-port=22/tcp --permanent</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> firewall-cmd --reload <span class=\"comment\"># 重新载入使更改生效</span></span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看指定端口是否开放\"><a href=\"#查看指定端口是否开放\" class=\"headerlink\" title=\"查看指定端口是否开放\"></a>查看指定端口是否开放</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> firewall-cmd --zone=public --query-port=22/tcp</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看所有开放端口\"><a href=\"#查看所有开放端口\" class=\"headerlink\" title=\"查看所有开放端口\"></a>查看所有开放端口</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> firewall-cmd --zone=public --list-ports</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"关掉开放的端口\"><a href=\"#关掉开放的端口\" class=\"headerlink\" title=\"关掉开放的端口\"></a>关掉开放的端口</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> firewall-cmd --zone=public --remove-port=22/tcp --permanent</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> firewall-cmd --reload <span class=\"comment\"># 重新载入使更改生效</span></span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"批量开放端口\"><a href=\"#批量开放端口\" class=\"headerlink\" title=\"批量开放端口\"></a>批量开放端口</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> firewall-cmd --zone=public --add-port=100-500/tcp --permanent</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> firewall-cmd --reload <span class=\"comment\"># 重新载入使更改生效</span></span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"批量限制端口\"><a href=\"#批量限制端口\" class=\"headerlink\" title=\"批量限制端口\"></a>批量限制端口</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> firewall-cmd --zone=public --remove-port=100-500/tcp --permanent</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> firewall-cmd --reload</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"开放ip\"><a href=\"#开放ip\" class=\"headerlink\" title=\"开放ip\"></a>开放ip</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> firewall-cmd --permanent --add-rich-rule=<span class=\"string\">&quot;rule family=&quot;</span>ipv4<span class=\"string\">&quot; source address=&quot;</span>192.168.0.200<span class=\"string\">&quot; port protocol=&quot;</span>tcp<span class=\"string\">&quot; port=&quot;</span>80<span class=\"string\">&quot; reject&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> firewall-cmd --reload <span class=\"comment\"># 重新载入使更改生效</span></span></span><br></pre></td></tr></table></figure>\n\n<p>限制指定ip访问指定端口</p>\n<h4 id=\"查看设置的规则\"><a href=\"#查看设置的规则\" class=\"headerlink\" title=\"查看设置的规则\"></a>查看设置的规则</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> firewall-cmd --zone=public --list-rich-rules</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"解除ip限制\"><a href=\"#解除ip限制\" class=\"headerlink\" title=\"解除ip限制\"></a>解除ip限制</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> firewall-cmd --permanent --add-rich-rule=<span class=\"string\">&quot;rule family=&quot;</span>ipv4<span class=\"string\">&quot; source address=&quot;</span>192.168.0.200<span class=\"string\">&quot; port protocol=&quot;</span>tcp<span class=\"string\">&quot; port=&quot;</span>80<span class=\"string\">&quot; accept&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> firewall-cmd --reload <span class=\"comment\"># 重新载入使更改生效</span></span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"限制ip段\"><a href=\"#限制ip段\" class=\"headerlink\" title=\"限制ip段\"></a>限制ip段</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> firewall-cmd --permanent --add-rich-rule=<span class=\"string\">&quot;rule family=&quot;</span>ipv4<span class=\"string\">&quot; source address=&quot;</span>10.0.0.0/24<span class=\"string\">&quot; port protocol=&quot;</span>tcp<span class=\"string\">&quot; port=&quot;</span>80<span class=\"string\">&quot; reject&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> firewall-cmd --reload <span class=\"comment\"># 重新载入使更改生效</span></span></span><br></pre></td></tr></table></figure>\n\n<p>其中10.0.0.0&#x2F;24表示为从10.0.0.0这个IP开始，24代表子网掩码为255.255.255.0，共包含256个地址，即从0-255共256个IP，即正好限制了这一整段的IP地址，具体的设置规则可参考下表</p>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>IP总数</th>\n<th>子网掩码</th>\n<th>C段个数</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&#x2F;30</td>\n<td>4</td>\n<td>255.255.255.252</td>\n<td>1&#x2F;64</td>\n</tr>\n<tr>\n<td>&#x2F;29</td>\n<td>8</td>\n<td>255.255.255.248</td>\n<td>1&#x2F;32</td>\n</tr>\n<tr>\n<td>&#x2F;28</td>\n<td>16</td>\n<td>255.255.255.240</td>\n<td>1&#x2F;16</td>\n</tr>\n<tr>\n<td>&#x2F;27</td>\n<td>32</td>\n<td>255.255.255.224</td>\n<td>1&#x2F;8</td>\n</tr>\n<tr>\n<td>&#x2F;26</td>\n<td>64</td>\n<td>255.255.255.192</td>\n<td>1&#x2F;4</td>\n</tr>\n<tr>\n<td>&#x2F;24</td>\n<td>256</td>\n<td>255.255.255.0</td>\n<td>1</td>\n</tr>\n<tr>\n<td>&#x2F;23</td>\n<td>512</td>\n<td>255.255.254.0</td>\n<td>2</td>\n</tr>\n<tr>\n<td>&#x2F;22</td>\n<td>1024</td>\n<td>255.255.252.0</td>\n<td>4</td>\n</tr>\n<tr>\n<td>&#x2F;21</td>\n<td>2048</td>\n<td>255.255.248.0</td>\n<td>8</td>\n</tr>\n<tr>\n<td>&#x2F;20</td>\n<td>4096</td>\n<td>255.255.240.0</td>\n<td>16</td>\n</tr>\n<tr>\n<td>&#x2F;19</td>\n<td>8192</td>\n<td>255.255.224.0</td>\n<td>32</td>\n</tr>\n<tr>\n<td>&#x2F;18</td>\n<td>16384</td>\n<td>255.255.192.0</td>\n<td>64</td>\n</tr>\n<tr>\n<td>&#x2F;17</td>\n<td>32768</td>\n<td>255.255.128.0</td>\n<td>128</td>\n</tr>\n<tr>\n<td>&#x2F;16</td>\n<td>65536</td>\n<td>255.255.0.0</td>\n<td>256</td>\n</tr>\n</tbody></table>\n<h4 id=\"打开限制ip段\"><a href=\"#打开限制ip段\" class=\"headerlink\" title=\"打开限制ip段\"></a>打开限制ip段</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> firewall-cmd --permanent --add-rich-rule=<span class=\"string\">&quot;rule family=&quot;</span>ipv4<span class=\"string\">&quot; source address=&quot;</span>10.0.0.0/24<span class=\"string\">&quot; port protocol=&quot;</span>tcp<span class=\"string\">&quot; port=&quot;</span>80<span class=\"string\">&quot; accept&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> firewall-cmd --reload <span class=\"comment\"># 重新载入使更改生效</span></span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>还有一种情况是端口已经被占用</li>\n</ul>\n<p>这种情况可以使用</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> netstat -nl | grep 8080</span></span><br></pre></td></tr></table></figure>\n\n<p>来查看指定的端口号有没有被占用, 更多的选项请输入</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> man netstat</span></span><br></pre></td></tr></table></figure>\n\n<p>来查看</p>"},{"title":"商城开发笔记-给parent配置添加swagger依赖","date":"2019-10-26T08:46:09.000Z","_content":"\n# 介绍\n\nswagger 是一个定义接口文档及接口相关信息的工具, 通过这个工具可以生成各种形式的文档。作为 Java 大一统框架, 当然会将该规范纳入进来, 形成了 Spring-swagger, 现在改成了 Springfox, 那么接下来讲一讲如何引入这个东东。\n\n# 依赖\n\npom.xml:\n\n```xml\n<dependency>\n    <groupId>io.springfox</groupId>\n    <artifactId>springfox-swagger2</artifactId>\n    <version>${swagger.version}</version>\n</dependency>\n<dependency>\n    <groupId>io.springfox</groupId>\n    <artifactId>springfox-swagger-ui</artifactId>\n    <version>${swagger.version}</version>\n</dependency>\n```\n\n<!--more-->\n\n# 配置\n\n```java\npackage com.littleboy.config;\n\nimport com.google.common.base.Predicate;\nimport com.littleboy.config.annotation.SwaggerCustomIgnore;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\nimport springfox.documentation.builders.ApiInfoBuilder;\nimport springfox.documentation.service.ApiInfo;\nimport springfox.documentation.service.Contact;\nimport springfox.documentation.spi.DocumentationType;\nimport springfox.documentation.spring.web.plugins.Docket;\nimport springfox.documentation.swagger2.annotations.EnableSwagger2;\n\nimport static com.google.common.base.Predicates.*;\nimport static springfox.documentation.builders.RequestHandlerSelectors.*;\nimport static springfox.documentation.builders.PathSelectors.*;\n\n@Configuration\n@EnableSwagger2\n@ComponentScan(basePackages = \"com.littleboy.controller\")\npublic class SwaggerConfig {\n\t//组织Docket对象，翻译过来就是摘要的意思，它是生成API文档的核心对象，里面配置一些必要的信息\n\t@Bean\n\tpublic Docket swaggerSpringMvcPlugin(){\n\t\t//指定规范，这里是SWAGGER_2\n\t\treturn new Docket(DocumentationType.SWAGGER_2)\n\t\t\t\t//设定Api文档头信息，这个信息会展示在文档UI的头部位置\n\t\t\t\t.apiInfo(swaggerDemoApiInfo())\n\t\t\t\t.select()\n\t\t\t\t//添加过滤条件，谓词过滤predicate，这里是自定义注解进行过滤\n\t\t\t\t.apis(not(withMethodAnnotation(SwaggerCustomIgnore.class)))\n\t\t\t\t//这里配合@ComponentScan一起使用，又再次细化了匹配规则(当然，我们也可以只选择@ComponentScan、paths()方法当中的一中)\n\t\t\t\t.paths(allowPaths())\n\t\t\t\t.build();\n\t}\n\n\t/**\n\t * 自定义API文档基本信息实体\n\t * @return\n\t */\n\tprivate ApiInfo swaggerDemoApiInfo(){\n\t\t//构建联系实体，在UI界面会显示\n\t\tContact contact = new Contact(\"littleboy\", \"http://icecreamzhao.github.io\", \"dahazidk@163.com\");\n\t\treturn new ApiInfoBuilder()\n\t\t\t\t.contact(contact)\n\t\t\t\t//文档标题\n\t\t\t\t.title(\"Swagger2构建RESTful API文档\")\n\t\t\t\t//文档描述\n\t\t\t\t.description(\"SpringBoot集成Springbox开源项目，实现OAS，构建成RESTful API文档\")\n\t\t\t\t//文档版本\n\t\t\t\t.version(\"1.0.0\")\n\t\t\t\t.build();\n\t}\n\n\t/**\n\t * path匹配规则\n\t * @return\n\t */\n\tprivate Predicate<String> allowPaths(){\n\t\treturn or(\n\t\t\t\tregex(\"/user.*\"),\n\t\t\t\tregex(\"/role.*\")\n\t\t);\n\t}\n}\n```\n\nSwaggerCustomIgnore:\n\n```java\npackage com.littleboy.config.annotation;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\n/**\n * 忽略接口注解\n */\n@Target({ElementType.METHOD})\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface SwaggerCustomIgnore {\n\n}\n```\n\n# 查看效果\n\n启动项目, 访问`http://localhost:8080/swagger-ui.html` 就可以查看符合条件的接口文档了。\n","source":"_posts/my_project/shopping_mall/Dependence_and_configuration/Shopping-mall-developNote-parent-depend-addSwagger.md","raw":"---\ntitle: 商城开发笔记-给parent配置添加swagger依赖\ndate: 2019-10-26 16:46:09\ncategories:\n- 开发笔记\n- 商城\n- 配置篇\ntags:\n- 商城开发\n---\n\n# 介绍\n\nswagger 是一个定义接口文档及接口相关信息的工具, 通过这个工具可以生成各种形式的文档。作为 Java 大一统框架, 当然会将该规范纳入进来, 形成了 Spring-swagger, 现在改成了 Springfox, 那么接下来讲一讲如何引入这个东东。\n\n# 依赖\n\npom.xml:\n\n```xml\n<dependency>\n    <groupId>io.springfox</groupId>\n    <artifactId>springfox-swagger2</artifactId>\n    <version>${swagger.version}</version>\n</dependency>\n<dependency>\n    <groupId>io.springfox</groupId>\n    <artifactId>springfox-swagger-ui</artifactId>\n    <version>${swagger.version}</version>\n</dependency>\n```\n\n<!--more-->\n\n# 配置\n\n```java\npackage com.littleboy.config;\n\nimport com.google.common.base.Predicate;\nimport com.littleboy.config.annotation.SwaggerCustomIgnore;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\nimport springfox.documentation.builders.ApiInfoBuilder;\nimport springfox.documentation.service.ApiInfo;\nimport springfox.documentation.service.Contact;\nimport springfox.documentation.spi.DocumentationType;\nimport springfox.documentation.spring.web.plugins.Docket;\nimport springfox.documentation.swagger2.annotations.EnableSwagger2;\n\nimport static com.google.common.base.Predicates.*;\nimport static springfox.documentation.builders.RequestHandlerSelectors.*;\nimport static springfox.documentation.builders.PathSelectors.*;\n\n@Configuration\n@EnableSwagger2\n@ComponentScan(basePackages = \"com.littleboy.controller\")\npublic class SwaggerConfig {\n\t//组织Docket对象，翻译过来就是摘要的意思，它是生成API文档的核心对象，里面配置一些必要的信息\n\t@Bean\n\tpublic Docket swaggerSpringMvcPlugin(){\n\t\t//指定规范，这里是SWAGGER_2\n\t\treturn new Docket(DocumentationType.SWAGGER_2)\n\t\t\t\t//设定Api文档头信息，这个信息会展示在文档UI的头部位置\n\t\t\t\t.apiInfo(swaggerDemoApiInfo())\n\t\t\t\t.select()\n\t\t\t\t//添加过滤条件，谓词过滤predicate，这里是自定义注解进行过滤\n\t\t\t\t.apis(not(withMethodAnnotation(SwaggerCustomIgnore.class)))\n\t\t\t\t//这里配合@ComponentScan一起使用，又再次细化了匹配规则(当然，我们也可以只选择@ComponentScan、paths()方法当中的一中)\n\t\t\t\t.paths(allowPaths())\n\t\t\t\t.build();\n\t}\n\n\t/**\n\t * 自定义API文档基本信息实体\n\t * @return\n\t */\n\tprivate ApiInfo swaggerDemoApiInfo(){\n\t\t//构建联系实体，在UI界面会显示\n\t\tContact contact = new Contact(\"littleboy\", \"http://icecreamzhao.github.io\", \"dahazidk@163.com\");\n\t\treturn new ApiInfoBuilder()\n\t\t\t\t.contact(contact)\n\t\t\t\t//文档标题\n\t\t\t\t.title(\"Swagger2构建RESTful API文档\")\n\t\t\t\t//文档描述\n\t\t\t\t.description(\"SpringBoot集成Springbox开源项目，实现OAS，构建成RESTful API文档\")\n\t\t\t\t//文档版本\n\t\t\t\t.version(\"1.0.0\")\n\t\t\t\t.build();\n\t}\n\n\t/**\n\t * path匹配规则\n\t * @return\n\t */\n\tprivate Predicate<String> allowPaths(){\n\t\treturn or(\n\t\t\t\tregex(\"/user.*\"),\n\t\t\t\tregex(\"/role.*\")\n\t\t);\n\t}\n}\n```\n\nSwaggerCustomIgnore:\n\n```java\npackage com.littleboy.config.annotation;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\n/**\n * 忽略接口注解\n */\n@Target({ElementType.METHOD})\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface SwaggerCustomIgnore {\n\n}\n```\n\n# 查看效果\n\n启动项目, 访问`http://localhost:8080/swagger-ui.html` 就可以查看符合条件的接口文档了。\n","slug":"my_project/shopping_mall/Dependence_and_configuration/Shopping-mall-developNote-parent-depend-addSwagger","published":1,"updated":"2021-10-14T08:18:54.347Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejtr006r3vsbabcf3bbj","content":"<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>swagger 是一个定义接口文档及接口相关信息的工具, 通过这个工具可以生成各种形式的文档。作为 Java 大一统框架, 当然会将该规范纳入进来, 形成了 Spring-swagger, 现在改成了 Springfox, 那么接下来讲一讲如何引入这个东东。</p>\n<h1 id=\"依赖\"><a href=\"#依赖\" class=\"headerlink\" title=\"依赖\"></a>依赖</h1><p>pom.xml:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.springfox<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>springfox-swagger2<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;swagger.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.springfox<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>springfox-swagger-ui<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;swagger.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.littleboy.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.google.common.base.Predicate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.littleboy.config.annotation.SwaggerCustomIgnore;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> springfox.documentation.builders.ApiInfoBuilder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> springfox.documentation.service.ApiInfo;</span><br><span class=\"line\"><span class=\"keyword\">import</span> springfox.documentation.service.Contact;</span><br><span class=\"line\"><span class=\"keyword\">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class=\"line\"><span class=\"keyword\">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> com.google.common.base.Predicates.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> springfox.documentation.builders.RequestHandlerSelectors.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> springfox.documentation.builders.PathSelectors.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableSwagger2</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan(basePackages = &quot;com.littleboy.controller&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SwaggerConfig</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//组织Docket对象，翻译过来就是摘要的意思，它是生成API文档的核心对象，里面配置一些必要的信息</span></span><br><span class=\"line\">\t<span class=\"meta\">@Bean</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Docket <span class=\"title\">swaggerSpringMvcPlugin</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//指定规范，这里是SWAGGER_2</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//设定Api文档头信息，这个信息会展示在文档UI的头部位置</span></span><br><span class=\"line\">\t\t\t\t.apiInfo(swaggerDemoApiInfo())</span><br><span class=\"line\">\t\t\t\t.select()</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//添加过滤条件，谓词过滤predicate，这里是自定义注解进行过滤</span></span><br><span class=\"line\">\t\t\t\t.apis(not(withMethodAnnotation(SwaggerCustomIgnore.class)))</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//这里配合@ComponentScan一起使用，又再次细化了匹配规则(当然，我们也可以只选择@ComponentScan、paths()方法当中的一中)</span></span><br><span class=\"line\">\t\t\t\t.paths(allowPaths())</span><br><span class=\"line\">\t\t\t\t.build();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 自定义API文档基本信息实体</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> ApiInfo <span class=\"title\">swaggerDemoApiInfo</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//构建联系实体，在UI界面会显示</span></span><br><span class=\"line\">\t\tContact contact = <span class=\"keyword\">new</span> Contact(<span class=\"string\">&quot;littleboy&quot;</span>, <span class=\"string\">&quot;http://icecreamzhao.github.io&quot;</span>, <span class=\"string\">&quot;dahazidk@163.com&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ApiInfoBuilder()</span><br><span class=\"line\">\t\t\t\t.contact(contact)</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//文档标题</span></span><br><span class=\"line\">\t\t\t\t.title(<span class=\"string\">&quot;Swagger2构建RESTful API文档&quot;</span>)</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//文档描述</span></span><br><span class=\"line\">\t\t\t\t.description(<span class=\"string\">&quot;SpringBoot集成Springbox开源项目，实现OAS，构建成RESTful API文档&quot;</span>)</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//文档版本</span></span><br><span class=\"line\">\t\t\t\t.version(<span class=\"string\">&quot;1.0.0&quot;</span>)</span><br><span class=\"line\">\t\t\t\t.build();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * path匹配规则</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Predicate&lt;String&gt; <span class=\"title\">allowPaths</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> or(</span><br><span class=\"line\">\t\t\t\tregex(<span class=\"string\">&quot;/user.*&quot;</span>),</span><br><span class=\"line\">\t\t\t\tregex(<span class=\"string\">&quot;/role.*&quot;</span>)</span><br><span class=\"line\">\t\t);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>SwaggerCustomIgnore:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.littleboy.config.annotation;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.ElementType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Retention;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Target;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 忽略接口注解</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Target(&#123;ElementType.METHOD&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> SwaggerCustomIgnore &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"查看效果\"><a href=\"#查看效果\" class=\"headerlink\" title=\"查看效果\"></a>查看效果</h1><p>启动项目, 访问<code>http://localhost:8080/swagger-ui.html</code> 就可以查看符合条件的接口文档了。</p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>swagger 是一个定义接口文档及接口相关信息的工具, 通过这个工具可以生成各种形式的文档。作为 Java 大一统框架, 当然会将该规范纳入进来, 形成了 Spring-swagger, 现在改成了 Springfox, 那么接下来讲一讲如何引入这个东东。</p>\n<h1 id=\"依赖\"><a href=\"#依赖\" class=\"headerlink\" title=\"依赖\"></a>依赖</h1><p>pom.xml:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.springfox<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>springfox-swagger2<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;swagger.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.springfox<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>springfox-swagger-ui<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;swagger.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>","more":"<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.littleboy.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.google.common.base.Predicate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.littleboy.config.annotation.SwaggerCustomIgnore;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> springfox.documentation.builders.ApiInfoBuilder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> springfox.documentation.service.ApiInfo;</span><br><span class=\"line\"><span class=\"keyword\">import</span> springfox.documentation.service.Contact;</span><br><span class=\"line\"><span class=\"keyword\">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class=\"line\"><span class=\"keyword\">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> com.google.common.base.Predicates.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> springfox.documentation.builders.RequestHandlerSelectors.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> springfox.documentation.builders.PathSelectors.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableSwagger2</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan(basePackages = &quot;com.littleboy.controller&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SwaggerConfig</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//组织Docket对象，翻译过来就是摘要的意思，它是生成API文档的核心对象，里面配置一些必要的信息</span></span><br><span class=\"line\">\t<span class=\"meta\">@Bean</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Docket <span class=\"title\">swaggerSpringMvcPlugin</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//指定规范，这里是SWAGGER_2</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//设定Api文档头信息，这个信息会展示在文档UI的头部位置</span></span><br><span class=\"line\">\t\t\t\t.apiInfo(swaggerDemoApiInfo())</span><br><span class=\"line\">\t\t\t\t.select()</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//添加过滤条件，谓词过滤predicate，这里是自定义注解进行过滤</span></span><br><span class=\"line\">\t\t\t\t.apis(not(withMethodAnnotation(SwaggerCustomIgnore.class)))</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//这里配合@ComponentScan一起使用，又再次细化了匹配规则(当然，我们也可以只选择@ComponentScan、paths()方法当中的一中)</span></span><br><span class=\"line\">\t\t\t\t.paths(allowPaths())</span><br><span class=\"line\">\t\t\t\t.build();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 自定义API文档基本信息实体</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> ApiInfo <span class=\"title\">swaggerDemoApiInfo</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//构建联系实体，在UI界面会显示</span></span><br><span class=\"line\">\t\tContact contact = <span class=\"keyword\">new</span> Contact(<span class=\"string\">&quot;littleboy&quot;</span>, <span class=\"string\">&quot;http://icecreamzhao.github.io&quot;</span>, <span class=\"string\">&quot;dahazidk@163.com&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ApiInfoBuilder()</span><br><span class=\"line\">\t\t\t\t.contact(contact)</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//文档标题</span></span><br><span class=\"line\">\t\t\t\t.title(<span class=\"string\">&quot;Swagger2构建RESTful API文档&quot;</span>)</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//文档描述</span></span><br><span class=\"line\">\t\t\t\t.description(<span class=\"string\">&quot;SpringBoot集成Springbox开源项目，实现OAS，构建成RESTful API文档&quot;</span>)</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//文档版本</span></span><br><span class=\"line\">\t\t\t\t.version(<span class=\"string\">&quot;1.0.0&quot;</span>)</span><br><span class=\"line\">\t\t\t\t.build();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * path匹配规则</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Predicate&lt;String&gt; <span class=\"title\">allowPaths</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> or(</span><br><span class=\"line\">\t\t\t\tregex(<span class=\"string\">&quot;/user.*&quot;</span>),</span><br><span class=\"line\">\t\t\t\tregex(<span class=\"string\">&quot;/role.*&quot;</span>)</span><br><span class=\"line\">\t\t);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>SwaggerCustomIgnore:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.littleboy.config.annotation;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.ElementType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Retention;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Target;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 忽略接口注解</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Target(&#123;ElementType.METHOD&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> SwaggerCustomIgnore &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"查看效果\"><a href=\"#查看效果\" class=\"headerlink\" title=\"查看效果\"></a>查看效果</h1><p>启动项目, 访问<code>http://localhost:8080/swagger-ui.html</code> 就可以查看符合条件的接口文档了。</p>"},{"title":"商城开发笔记-依赖","date":"2018-11-20T10:47:53.000Z","_content":"\n# 框架简介\n\n本项目主要用到的框架有:\n\n1. Spring\n2. SpringMVC\n3. Mybatis\n4. zookeeper\n5. dubbo\n6. radis\n7. junit\n\n还有一些其他的小工具, 方便开发使用的, 等用到的时候我再作介绍\n\n<!--more-->\n\n<br>\n\n# 配置\n\n依赖介绍完, 下面我们来配置项目\n\n因为配置文件内容较多, 所以我会分成几篇博客来说明。\n\n首先, 咱们用parent工程来管理所有工程的依赖版本号, 注意, 这里只是管理版本号, 并不是真正将依赖添加进来。\n\n> parent的pom.xml\n\n主体:\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>com.littleboy</groupId>\n  <artifactId>parent</artifactId>\n  <version>0.1</version>\n  \n  <!-- 主体内容 -->\n\n  <modules>\n      <module>../common</module>\n\t  <module>../manager</module>\n\t  <module>../web</module>\n  </modules>\n</project>\n```\n\n打包方式:\n\n```xml\n<packaging>pom</packaging>\n```\n\n一般来说都会将依赖版本号写到properties节点中, 这样以后更换版本的时候就会非常方便\n\n```xml\n<properties>\n  <!-- 项目编码 -->\n  <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n  <!-- 指定Java编译和源码版本 -->\n  <maven.compiler.source>1.7</maven.compiler.source>\n  <maven.compiler.target>1.7</maven.compiler.target>\n  <!-- 测试 -->\n  <junit.version>4.11</junit.version>\n\n  <!-- spring -->\n  <spring.version>5.0.8.RELEASE</spring.version>\n\n  <!-- database -->\n  <!-- mybatis -->\n  <mybatis.spring.version>1.3.2</mybatis.spring.version>\n  <mybatis.version>3.4.6</mybatis.version>\n  <!-- 分页 -->\n  <mybatis.pagintor.version>1.2.15</mybatis.pagintor.version>\n  <mybatis.pagehelper.version>5.1.4</mybatis.pagehelper.version>\n  <mybatis.generator.version>1.3.7</mybatis.generator.version>\n  <!-- 缓存, 可以用来操作redis https://blog.csdn.net/a837201942/article/details/77160658 -->\n  <jedis.version>2.9.0</jedis.version>\n  <!-- 全文检索 -->\n  <solrj.version>7.4.0</solrj.version>\n\n  <!-- 分布式框架 -->\n  <dubbo.version>2.5.9</dubbo.version>\n  <zookeeper.version>3.4.13</zookeeper.version>\n  <zkclient.version>0.10</zkclient.version>\n\n  <!-- 消息队列 -->\n  <activemq.version>5.7.0</activemq.version>\n\n  <!-- 连接池 -->\n  <druid.version>1.1.9</druid.version>\n  <!-- mysql -->\n  <mysql.version>8.0.11</mysql.version>\n\n  <!-- 杂七杂八 -->\n  <!-- 日志 -->\n  <slf4j.version>1.7.7</slf4j.version>\n  <!-- jackson -->\n  <jackson.version>2.9.6</jackson.version>\n  <!-- http协议客户端编程 -->\n  <httpClient.verrsion>4.5.6</httpClient.verrsion>\n  <!-- jstl -->\n  <jstl.version>1.2</jstl.version>\n  <!-- servlet -->\n  <servlet.version>4.0.1</servlet.version>\n  <!-- jsp -->\n  <jsp.version>2.3.3</jsp.version>\n  <!-- joda-time (替代 java 自带日期时间用)-->\n  <joda-time.version>2.10</joda-time.version>\n  <!-- common (apache家的, 很厉害) 使用方法可以查看 https://www.cnblogs.com/shihaiming/p/7814804.html -->\n  <commons-lang.version>3.7</commons-lang.version>\n  <!-- 同上, 使用方法可以查看 https://www.cnblogs.com/softidea/p/4279576.html -->\n  <commons-io.version>2.6</commons-io.version>\n  <!-- 文件上传下载 使用方法 https://www.cnblogs.com/whgk/p/6479405.html -->\n  <commons-fileUpload.version>1.3.3</commons-fileUpload.version>\n\n  <common-net.version>3.3</common-net.version>\n  <!-- 任务调度框架 https://www.cnblogs.com/drift-ice/p/3817269.html -->\n  <quartz.version>2.3.0</quartz.version>\n</properties>\n```\n\n因为parent是用来管理版本号的, 所以, 这里将所有用到的依赖都写到`<dependencyManagement>`节点下, 说明是管理依赖而不是引入依赖\n\n```xml\n<dependencyManagement>\n<dependencies>\n<!-- 工具类 -->\n<dependency>\n<groupId>joda-time</groupId>\n<artifactId>joda-time</artifactId>\n<version>${joda-time.version}</version>\n</dependency>\n\n<dependency>\n<groupId>org.apache.commons</groupId>\n<artifactId>commons-lang3</artifactId>\n<version>${commons-lang.version}</version>\n</dependency>\n\n<dependency>\n<groupId>commons-io</groupId>\n<artifactId>commons-io</artifactId>\n<version>${commons-io.version}</version>\n</dependency>\n\n<dependency>\n<groupId>commons-net</groupId>\n<artifactId>commons-net</artifactId>\n<version>${common-net.version}</version>\n</dependency>\n\n<dependency>\n<groupId>com.fasterxml.jackson.core</groupId>\n<artifactId>jackson-databind</artifactId>\n<version>${jackson.version}</version>\n</dependency>\n\n<dependency>\n<groupId>org.apache.httpcomponents</groupId>\n<artifactId>httpclient</artifactId>\n<version>${httpClient.verrsion}</version>\n</dependency>\n\n<dependency>\n<groupId>org.quartz-scheduler</groupId>\n<artifactId>quartz</artifactId>\n<version>${quartz.version}</version>\n</dependency>\n\n<dependency>\n<groupId>org.slf4j</groupId>\n      <artifactId>slf4j-log4j12</artifactId>\n      <version>${slf4j.version}</version>\n    </dependency>\n    <!-- 工具类结束 -->\n\n    <!-- mybatis 和数据库 -->\n    <dependency>\n      <groupId>org.mybatis</groupId>\n      <artifactId>mybatis</artifactId>\n      <version>${mybatis.version}</version>\n    </dependency>\n\n    <dependency>\n      <groupId>org.mybatis</groupId>\n      <artifactId>mybatis-spring</artifactId>\n      <version>${mybatis.spring.version}</version>\n    </dependency>\n\n    <dependency>\n      <groupId>com.github.miemiedev</groupId>\n      <artifactId>mybatis-paginator</artifactId>\n      <version>${mybatis.pagintor.version}</version>\n    </dependency>\n\n    <dependency>\n      <groupId>org.mybatis.generator</groupId>\n      <artifactId>mybatis-generator-core</artifactId>\n      <version>${mybatis.generator.version}</version>\n    </dependency>\n\n    <dependency>\n      <groupId>com.github.pagehelper</groupId>\n      <artifactId>pagehelper</artifactId>\n      <version>${mybatis.pagehelper.version}</version>\n    </dependency>\n\n    <dependency>\n      <groupId>mysql</groupId>\n      <artifactId>mysql-connector-java</artifactId>\n      <version>${mysql.version}</version>\n    </dependency>\n\n    <dependency>\n      <groupId>com.alibaba</groupId>\n      <artifactId>druid</artifactId>\n      <version>${druid.version}</version>\n    </dependency>\n    <!-- mybatis 和数据库结束 -->\n\n    <!-- spring -->\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-context</artifactId>\n      <version>${spring.version}</version>\n    </dependency>\n\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-beans</artifactId>\n      <version>${spring.version}</version>\n    </dependency>\n\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-webmvc</artifactId>\n      <version>${spring.version}</version>\n    </dependency>\n\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-jdbc</artifactId>\n      <version>${spring.version}</version>\n    </dependency>\n\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-aspects</artifactId>\n      <version>${spring.version}</version>\n    </dependency>\n\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-jms</artifactId>\n      <version>${spring.version}</version>\n    </dependency>\n\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-context-support</artifactId>\n      <version>${spring.version}</version>\n    </dependency>\n    <!-- spring 结束 -->\n\n    <!-- 表现层 -->\n    <dependency>\n      <groupId>javax.servlet</groupId>\n      <artifactId>jstl</artifactId>\n      <version>${jstl.version}</version>\n    </dependency>\n\n    <!-- scope provided 代表不会被打包进去 -->\n    <dependency>\n      <groupId>javax.servlet</groupId>\n      <artifactId>javax.servlet-api</artifactId>\n      <version>${servlet.version}</version>\n      <scope>provided</scope>\n    </dependency>\n\n    <dependency>\n      <groupId>javax.servlet.jsp</groupId>\n      <artifactId>javax.servlet.jsp-api</artifactId>\n      <version>${jsp.version}</version>\n      <scope>provided</scope>\n    </dependency>\n    <!-- 表现层结束 -->\n\n    <dependency>\n      <groupId>commons-fileupload</groupId>\n      <artifactId>commons-fileupload</artifactId>\n      <version>${commons-fileUpload.version}</version>\n    </dependency>\n\n    <dependency>\n      <groupId>redis.clients</groupId>\n      <artifactId>jedis</artifactId>\n      <version>${jedis.version}</version>\n    </dependency>\n\n    <dependency>\n      <groupId>org.apache.solr</groupId>\n      <artifactId>solr-solrj</artifactId>\n      <version>${solrj.version}</version>\n    </dependency>\n\n    <dependency>\n      <groupId>com.alibaba</groupId>\n      <artifactId>dubbo</artifactId>\n      <version>${dubbo.version}</version>\n    </dependency>\n\n    <dependency>\n      <groupId>org.apache.zookeeper</groupId>\n      <artifactId>zookeeper</artifactId>\n      <version>${zookeeper.version}</version>\n    </dependency>\n\n    <dependency>\n      <groupId>com.101tec</groupId>\n      <artifactId>zkclient</artifactId>\n      <version>${zkclient.version}</version>\n    </dependency>\n\n    <dependency>\n      <groupId>org.apache.activemq</groupId>\n      <artifactId>activemq-all</artifactId>\n      <version>${activemq.version}</version>\n    </dependency>\n\n    <dependency>\n      <groupId>org.freemarker</groupId>\n      <artifactId>freemarker</artifactId>\n      <version>${freeMarker.version}</version>\n    </dependency>\n\n    <dependency>\n      <groupId>junit</groupId>\n      <artifactId>junit</artifactId>\n      <version>${junit.version}</version>\n      <scope>test</scope>\n    </dependency>\n  </dependencies>\n</dependencyManagement>\n```\n\n最后, 来引入一些Maven插件, 仔细注意一下, tomcat插件没有没引入, 只是放到了插件管理中:\n\n```xml\n<build>\n  <finalName>${project.artifactId}</finalName>\n  <plugins>\n    <!-- 指定源码版本 -->\n    <plugin>\n      <groupId>org.apache.maven.plugins</groupId>\n      <artifactId>maven-resources-plugin</artifactId>\n      <version>3.0.2</version>\n      <configuration>\n        <encoding>UTF-8</encoding>\n      </configuration>\n    </plugin>\n\n    <!-- 指定编译版本 -->\n    <plugin>\n      <groupId>org.apache.maven.plugins</groupId>\n      <artifactId>maven-compiler-plugin</artifactId>\n      <version>3.7.0</version>\n      <configuration>\n        <source>1.8</source>\n        <target>1.8</target>\n        <encoding>UTF-8</encoding>\n      </configuration>\n    </plugin>\n  </plugins>\n  \n  <!-- 这里是插件管理, 同样不是引入插件, 而是管理插件 -->\n  <pluginManagement>\n    <plugins>\n      <plugin>\n        <groupId>org.apache.tomcat.maven</groupId>\n        <artifactId>tomcat7-maven-plugin</artifactId>\n        <version>2.2</version>\n      </plugin>\n    </plugins>\n  </pluginManagement>\n</build>\n```\n\n<br>\n\n好了, 这下parent的pom.xml就完成了, 下一篇博客会接着讲配置。\n","source":"_posts/my_project/shopping_mall/Dependence_and_configuration/Shopping-mall-developNote-parent-depend.md","raw":"---\ntitle: 商城开发笔记-依赖\ndate: 2018-11-20 18:47:53\ncategories:\n- 开发笔记\n- 商城\n- 配置篇\ntags:\n- 商城开发\n---\n\n# 框架简介\n\n本项目主要用到的框架有:\n\n1. Spring\n2. SpringMVC\n3. Mybatis\n4. zookeeper\n5. dubbo\n6. radis\n7. junit\n\n还有一些其他的小工具, 方便开发使用的, 等用到的时候我再作介绍\n\n<!--more-->\n\n<br>\n\n# 配置\n\n依赖介绍完, 下面我们来配置项目\n\n因为配置文件内容较多, 所以我会分成几篇博客来说明。\n\n首先, 咱们用parent工程来管理所有工程的依赖版本号, 注意, 这里只是管理版本号, 并不是真正将依赖添加进来。\n\n> parent的pom.xml\n\n主体:\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>com.littleboy</groupId>\n  <artifactId>parent</artifactId>\n  <version>0.1</version>\n  \n  <!-- 主体内容 -->\n\n  <modules>\n      <module>../common</module>\n\t  <module>../manager</module>\n\t  <module>../web</module>\n  </modules>\n</project>\n```\n\n打包方式:\n\n```xml\n<packaging>pom</packaging>\n```\n\n一般来说都会将依赖版本号写到properties节点中, 这样以后更换版本的时候就会非常方便\n\n```xml\n<properties>\n  <!-- 项目编码 -->\n  <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n  <!-- 指定Java编译和源码版本 -->\n  <maven.compiler.source>1.7</maven.compiler.source>\n  <maven.compiler.target>1.7</maven.compiler.target>\n  <!-- 测试 -->\n  <junit.version>4.11</junit.version>\n\n  <!-- spring -->\n  <spring.version>5.0.8.RELEASE</spring.version>\n\n  <!-- database -->\n  <!-- mybatis -->\n  <mybatis.spring.version>1.3.2</mybatis.spring.version>\n  <mybatis.version>3.4.6</mybatis.version>\n  <!-- 分页 -->\n  <mybatis.pagintor.version>1.2.15</mybatis.pagintor.version>\n  <mybatis.pagehelper.version>5.1.4</mybatis.pagehelper.version>\n  <mybatis.generator.version>1.3.7</mybatis.generator.version>\n  <!-- 缓存, 可以用来操作redis https://blog.csdn.net/a837201942/article/details/77160658 -->\n  <jedis.version>2.9.0</jedis.version>\n  <!-- 全文检索 -->\n  <solrj.version>7.4.0</solrj.version>\n\n  <!-- 分布式框架 -->\n  <dubbo.version>2.5.9</dubbo.version>\n  <zookeeper.version>3.4.13</zookeeper.version>\n  <zkclient.version>0.10</zkclient.version>\n\n  <!-- 消息队列 -->\n  <activemq.version>5.7.0</activemq.version>\n\n  <!-- 连接池 -->\n  <druid.version>1.1.9</druid.version>\n  <!-- mysql -->\n  <mysql.version>8.0.11</mysql.version>\n\n  <!-- 杂七杂八 -->\n  <!-- 日志 -->\n  <slf4j.version>1.7.7</slf4j.version>\n  <!-- jackson -->\n  <jackson.version>2.9.6</jackson.version>\n  <!-- http协议客户端编程 -->\n  <httpClient.verrsion>4.5.6</httpClient.verrsion>\n  <!-- jstl -->\n  <jstl.version>1.2</jstl.version>\n  <!-- servlet -->\n  <servlet.version>4.0.1</servlet.version>\n  <!-- jsp -->\n  <jsp.version>2.3.3</jsp.version>\n  <!-- joda-time (替代 java 自带日期时间用)-->\n  <joda-time.version>2.10</joda-time.version>\n  <!-- common (apache家的, 很厉害) 使用方法可以查看 https://www.cnblogs.com/shihaiming/p/7814804.html -->\n  <commons-lang.version>3.7</commons-lang.version>\n  <!-- 同上, 使用方法可以查看 https://www.cnblogs.com/softidea/p/4279576.html -->\n  <commons-io.version>2.6</commons-io.version>\n  <!-- 文件上传下载 使用方法 https://www.cnblogs.com/whgk/p/6479405.html -->\n  <commons-fileUpload.version>1.3.3</commons-fileUpload.version>\n\n  <common-net.version>3.3</common-net.version>\n  <!-- 任务调度框架 https://www.cnblogs.com/drift-ice/p/3817269.html -->\n  <quartz.version>2.3.0</quartz.version>\n</properties>\n```\n\n因为parent是用来管理版本号的, 所以, 这里将所有用到的依赖都写到`<dependencyManagement>`节点下, 说明是管理依赖而不是引入依赖\n\n```xml\n<dependencyManagement>\n<dependencies>\n<!-- 工具类 -->\n<dependency>\n<groupId>joda-time</groupId>\n<artifactId>joda-time</artifactId>\n<version>${joda-time.version}</version>\n</dependency>\n\n<dependency>\n<groupId>org.apache.commons</groupId>\n<artifactId>commons-lang3</artifactId>\n<version>${commons-lang.version}</version>\n</dependency>\n\n<dependency>\n<groupId>commons-io</groupId>\n<artifactId>commons-io</artifactId>\n<version>${commons-io.version}</version>\n</dependency>\n\n<dependency>\n<groupId>commons-net</groupId>\n<artifactId>commons-net</artifactId>\n<version>${common-net.version}</version>\n</dependency>\n\n<dependency>\n<groupId>com.fasterxml.jackson.core</groupId>\n<artifactId>jackson-databind</artifactId>\n<version>${jackson.version}</version>\n</dependency>\n\n<dependency>\n<groupId>org.apache.httpcomponents</groupId>\n<artifactId>httpclient</artifactId>\n<version>${httpClient.verrsion}</version>\n</dependency>\n\n<dependency>\n<groupId>org.quartz-scheduler</groupId>\n<artifactId>quartz</artifactId>\n<version>${quartz.version}</version>\n</dependency>\n\n<dependency>\n<groupId>org.slf4j</groupId>\n      <artifactId>slf4j-log4j12</artifactId>\n      <version>${slf4j.version}</version>\n    </dependency>\n    <!-- 工具类结束 -->\n\n    <!-- mybatis 和数据库 -->\n    <dependency>\n      <groupId>org.mybatis</groupId>\n      <artifactId>mybatis</artifactId>\n      <version>${mybatis.version}</version>\n    </dependency>\n\n    <dependency>\n      <groupId>org.mybatis</groupId>\n      <artifactId>mybatis-spring</artifactId>\n      <version>${mybatis.spring.version}</version>\n    </dependency>\n\n    <dependency>\n      <groupId>com.github.miemiedev</groupId>\n      <artifactId>mybatis-paginator</artifactId>\n      <version>${mybatis.pagintor.version}</version>\n    </dependency>\n\n    <dependency>\n      <groupId>org.mybatis.generator</groupId>\n      <artifactId>mybatis-generator-core</artifactId>\n      <version>${mybatis.generator.version}</version>\n    </dependency>\n\n    <dependency>\n      <groupId>com.github.pagehelper</groupId>\n      <artifactId>pagehelper</artifactId>\n      <version>${mybatis.pagehelper.version}</version>\n    </dependency>\n\n    <dependency>\n      <groupId>mysql</groupId>\n      <artifactId>mysql-connector-java</artifactId>\n      <version>${mysql.version}</version>\n    </dependency>\n\n    <dependency>\n      <groupId>com.alibaba</groupId>\n      <artifactId>druid</artifactId>\n      <version>${druid.version}</version>\n    </dependency>\n    <!-- mybatis 和数据库结束 -->\n\n    <!-- spring -->\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-context</artifactId>\n      <version>${spring.version}</version>\n    </dependency>\n\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-beans</artifactId>\n      <version>${spring.version}</version>\n    </dependency>\n\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-webmvc</artifactId>\n      <version>${spring.version}</version>\n    </dependency>\n\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-jdbc</artifactId>\n      <version>${spring.version}</version>\n    </dependency>\n\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-aspects</artifactId>\n      <version>${spring.version}</version>\n    </dependency>\n\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-jms</artifactId>\n      <version>${spring.version}</version>\n    </dependency>\n\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-context-support</artifactId>\n      <version>${spring.version}</version>\n    </dependency>\n    <!-- spring 结束 -->\n\n    <!-- 表现层 -->\n    <dependency>\n      <groupId>javax.servlet</groupId>\n      <artifactId>jstl</artifactId>\n      <version>${jstl.version}</version>\n    </dependency>\n\n    <!-- scope provided 代表不会被打包进去 -->\n    <dependency>\n      <groupId>javax.servlet</groupId>\n      <artifactId>javax.servlet-api</artifactId>\n      <version>${servlet.version}</version>\n      <scope>provided</scope>\n    </dependency>\n\n    <dependency>\n      <groupId>javax.servlet.jsp</groupId>\n      <artifactId>javax.servlet.jsp-api</artifactId>\n      <version>${jsp.version}</version>\n      <scope>provided</scope>\n    </dependency>\n    <!-- 表现层结束 -->\n\n    <dependency>\n      <groupId>commons-fileupload</groupId>\n      <artifactId>commons-fileupload</artifactId>\n      <version>${commons-fileUpload.version}</version>\n    </dependency>\n\n    <dependency>\n      <groupId>redis.clients</groupId>\n      <artifactId>jedis</artifactId>\n      <version>${jedis.version}</version>\n    </dependency>\n\n    <dependency>\n      <groupId>org.apache.solr</groupId>\n      <artifactId>solr-solrj</artifactId>\n      <version>${solrj.version}</version>\n    </dependency>\n\n    <dependency>\n      <groupId>com.alibaba</groupId>\n      <artifactId>dubbo</artifactId>\n      <version>${dubbo.version}</version>\n    </dependency>\n\n    <dependency>\n      <groupId>org.apache.zookeeper</groupId>\n      <artifactId>zookeeper</artifactId>\n      <version>${zookeeper.version}</version>\n    </dependency>\n\n    <dependency>\n      <groupId>com.101tec</groupId>\n      <artifactId>zkclient</artifactId>\n      <version>${zkclient.version}</version>\n    </dependency>\n\n    <dependency>\n      <groupId>org.apache.activemq</groupId>\n      <artifactId>activemq-all</artifactId>\n      <version>${activemq.version}</version>\n    </dependency>\n\n    <dependency>\n      <groupId>org.freemarker</groupId>\n      <artifactId>freemarker</artifactId>\n      <version>${freeMarker.version}</version>\n    </dependency>\n\n    <dependency>\n      <groupId>junit</groupId>\n      <artifactId>junit</artifactId>\n      <version>${junit.version}</version>\n      <scope>test</scope>\n    </dependency>\n  </dependencies>\n</dependencyManagement>\n```\n\n最后, 来引入一些Maven插件, 仔细注意一下, tomcat插件没有没引入, 只是放到了插件管理中:\n\n```xml\n<build>\n  <finalName>${project.artifactId}</finalName>\n  <plugins>\n    <!-- 指定源码版本 -->\n    <plugin>\n      <groupId>org.apache.maven.plugins</groupId>\n      <artifactId>maven-resources-plugin</artifactId>\n      <version>3.0.2</version>\n      <configuration>\n        <encoding>UTF-8</encoding>\n      </configuration>\n    </plugin>\n\n    <!-- 指定编译版本 -->\n    <plugin>\n      <groupId>org.apache.maven.plugins</groupId>\n      <artifactId>maven-compiler-plugin</artifactId>\n      <version>3.7.0</version>\n      <configuration>\n        <source>1.8</source>\n        <target>1.8</target>\n        <encoding>UTF-8</encoding>\n      </configuration>\n    </plugin>\n  </plugins>\n  \n  <!-- 这里是插件管理, 同样不是引入插件, 而是管理插件 -->\n  <pluginManagement>\n    <plugins>\n      <plugin>\n        <groupId>org.apache.tomcat.maven</groupId>\n        <artifactId>tomcat7-maven-plugin</artifactId>\n        <version>2.2</version>\n      </plugin>\n    </plugins>\n  </pluginManagement>\n</build>\n```\n\n<br>\n\n好了, 这下parent的pom.xml就完成了, 下一篇博客会接着讲配置。\n","slug":"my_project/shopping_mall/Dependence_and_configuration/Shopping-mall-developNote-parent-depend","published":1,"updated":"2021-10-14T08:18:54.283Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejtt006s3vsb0esc8gj4","content":"<h1 id=\"框架简介\"><a href=\"#框架简介\" class=\"headerlink\" title=\"框架简介\"></a>框架简介</h1><p>本项目主要用到的框架有:</p>\n<ol>\n<li>Spring</li>\n<li>SpringMVC</li>\n<li>Mybatis</li>\n<li>zookeeper</li>\n<li>dubbo</li>\n<li>radis</li>\n<li>junit</li>\n</ol>\n<p>还有一些其他的小工具, 方便开发使用的, 等用到的时候我再作介绍</p>\n<span id=\"more\"></span>\n\n<br>\n\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><p>依赖介绍完, 下面我们来配置项目</p>\n<p>因为配置文件内容较多, 所以我会分成几篇博客来说明。</p>\n<p>首先, 咱们用parent工程来管理所有工程的依赖版本号, 注意, 这里只是管理版本号, 并不是真正将依赖添加进来。</p>\n<blockquote>\n<p>parent的pom.xml</p>\n</blockquote>\n<p>主体:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.littleboy<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 主体内容 --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">modules</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">module</span>&gt;</span>../common<span class=\"tag\">&lt;/<span class=\"name\">module</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">module</span>&gt;</span>../manager<span class=\"tag\">&lt;/<span class=\"name\">module</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">module</span>&gt;</span>../web<span class=\"tag\">&lt;/<span class=\"name\">module</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">modules</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>打包方式:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>一般来说都会将依赖版本号写到properties节点中, 这样以后更换版本的时候就会非常方便</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 项目编码 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 指定Java编译和源码版本 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">maven.compiler.source</span>&gt;</span>1.7<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.source</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">maven.compiler.target</span>&gt;</span>1.7<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.target</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 测试 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">junit.version</span>&gt;</span>4.11<span class=\"tag\">&lt;/<span class=\"name\">junit.version</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- spring --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">spring.version</span>&gt;</span>5.0.8.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">spring.version</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- database --&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- mybatis --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">mybatis.spring.version</span>&gt;</span>1.3.2<span class=\"tag\">&lt;/<span class=\"name\">mybatis.spring.version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">mybatis.version</span>&gt;</span>3.4.6<span class=\"tag\">&lt;/<span class=\"name\">mybatis.version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 分页 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">mybatis.pagintor.version</span>&gt;</span>1.2.15<span class=\"tag\">&lt;/<span class=\"name\">mybatis.pagintor.version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">mybatis.pagehelper.version</span>&gt;</span>5.1.4<span class=\"tag\">&lt;/<span class=\"name\">mybatis.pagehelper.version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">mybatis.generator.version</span>&gt;</span>1.3.7<span class=\"tag\">&lt;/<span class=\"name\">mybatis.generator.version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 缓存, 可以用来操作redis https://blog.csdn.net/a837201942/article/details/77160658 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">jedis.version</span>&gt;</span>2.9.0<span class=\"tag\">&lt;/<span class=\"name\">jedis.version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 全文检索 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">solrj.version</span>&gt;</span>7.4.0<span class=\"tag\">&lt;/<span class=\"name\">solrj.version</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 分布式框架 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dubbo.version</span>&gt;</span>2.5.9<span class=\"tag\">&lt;/<span class=\"name\">dubbo.version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">zookeeper.version</span>&gt;</span>3.4.13<span class=\"tag\">&lt;/<span class=\"name\">zookeeper.version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">zkclient.version</span>&gt;</span>0.10<span class=\"tag\">&lt;/<span class=\"name\">zkclient.version</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 消息队列 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">activemq.version</span>&gt;</span>5.7.0<span class=\"tag\">&lt;/<span class=\"name\">activemq.version</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 连接池 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">druid.version</span>&gt;</span>1.1.9<span class=\"tag\">&lt;/<span class=\"name\">druid.version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- mysql --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">mysql.version</span>&gt;</span>8.0.11<span class=\"tag\">&lt;/<span class=\"name\">mysql.version</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 杂七杂八 --&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 日志 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">slf4j.version</span>&gt;</span>1.7.7<span class=\"tag\">&lt;/<span class=\"name\">slf4j.version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- jackson --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">jackson.version</span>&gt;</span>2.9.6<span class=\"tag\">&lt;/<span class=\"name\">jackson.version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- http协议客户端编程 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">httpClient.verrsion</span>&gt;</span>4.5.6<span class=\"tag\">&lt;/<span class=\"name\">httpClient.verrsion</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- jstl --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">jstl.version</span>&gt;</span>1.2<span class=\"tag\">&lt;/<span class=\"name\">jstl.version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- servlet --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">servlet.version</span>&gt;</span>4.0.1<span class=\"tag\">&lt;/<span class=\"name\">servlet.version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- jsp --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">jsp.version</span>&gt;</span>2.3.3<span class=\"tag\">&lt;/<span class=\"name\">jsp.version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- joda-time (替代 java 自带日期时间用)--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">joda-time.version</span>&gt;</span>2.10<span class=\"tag\">&lt;/<span class=\"name\">joda-time.version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- common (apache家的, 很厉害) 使用方法可以查看 https://www.cnblogs.com/shihaiming/p/7814804.html --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">commons-lang.version</span>&gt;</span>3.7<span class=\"tag\">&lt;/<span class=\"name\">commons-lang.version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 同上, 使用方法可以查看 https://www.cnblogs.com/softidea/p/4279576.html --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">commons-io.version</span>&gt;</span>2.6<span class=\"tag\">&lt;/<span class=\"name\">commons-io.version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 文件上传下载 使用方法 https://www.cnblogs.com/whgk/p/6479405.html --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">commons-fileUpload.version</span>&gt;</span>1.3.3<span class=\"tag\">&lt;/<span class=\"name\">commons-fileUpload.version</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">common-net.version</span>&gt;</span>3.3<span class=\"tag\">&lt;/<span class=\"name\">common-net.version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 任务调度框架 https://www.cnblogs.com/drift-ice/p/3817269.html --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">quartz.version</span>&gt;</span>2.3.0<span class=\"tag\">&lt;/<span class=\"name\">quartz.version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>因为parent是用来管理版本号的, 所以, 这里将所有用到的依赖都写到<code>&lt;dependencyManagement&gt;</code>节点下, 说明是管理依赖而不是引入依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 工具类 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>joda-time<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>joda-time<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;joda-time.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.commons<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-lang3<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;commons-lang.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>commons-io<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-io<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;commons-io.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>commons-net<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-net<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;common-net.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-databind<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;jackson.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.httpcomponents<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>httpclient<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;httpClient.verrsion&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.quartz-scheduler<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>quartz<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;quartz.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.slf4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>slf4j-log4j12<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 工具类结束 --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- mybatis 和数据库 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;mybatis.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-spring<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;mybatis.spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.github.miemiedev<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-paginator<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;mybatis.pagintor.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis.generator<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-generator-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;mybatis.generator.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.github.pagehelper<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>pagehelper<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;mybatis.pagehelper.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;mysql.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>druid<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;druid.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- mybatis 和数据库结束 --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- spring --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-context<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-beans<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-webmvc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-jdbc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-aspects<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-jms<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-context-support<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- spring 结束 --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 表现层 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jstl<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;jstl.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- scope provided 代表不会被打包进去 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>javax.servlet-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;servlet.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>provided<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet.jsp<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>javax.servlet.jsp-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;jsp.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>provided<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 表现层结束 --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>commons-fileupload<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-fileupload<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;commons-fileUpload.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>redis.clients<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jedis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;jedis.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.solr<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>solr-solrj<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;solrj.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>dubbo<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;dubbo.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.zookeeper<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>zookeeper<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;zookeeper.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.101tec<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>zkclient<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;zkclient.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.activemq<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>activemq-all<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;activemq.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.freemarker<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>freemarker<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;freeMarker.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;junit.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>最后, 来引入一些Maven插件, 仔细注意一下, tomcat插件没有没引入, 只是放到了插件管理中:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">finalName</span>&gt;</span>$&#123;project.artifactId&#125;<span class=\"tag\">&lt;/<span class=\"name\">finalName</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 指定源码版本 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-resources-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.0.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">encoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">encoding</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 指定编译版本 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.7.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">source</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">source</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">target</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">encoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">encoding</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 这里是插件管理, 同样不是引入插件, 而是管理插件 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">pluginManagement</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.tomcat.maven<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">pluginManagement</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<p>好了, 这下parent的pom.xml就完成了, 下一篇博客会接着讲配置。</p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"框架简介\"><a href=\"#框架简介\" class=\"headerlink\" title=\"框架简介\"></a>框架简介</h1><p>本项目主要用到的框架有:</p>\n<ol>\n<li>Spring</li>\n<li>SpringMVC</li>\n<li>Mybatis</li>\n<li>zookeeper</li>\n<li>dubbo</li>\n<li>radis</li>\n<li>junit</li>\n</ol>\n<p>还有一些其他的小工具, 方便开发使用的, 等用到的时候我再作介绍</p>","more":"<br>\n\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><p>依赖介绍完, 下面我们来配置项目</p>\n<p>因为配置文件内容较多, 所以我会分成几篇博客来说明。</p>\n<p>首先, 咱们用parent工程来管理所有工程的依赖版本号, 注意, 这里只是管理版本号, 并不是真正将依赖添加进来。</p>\n<blockquote>\n<p>parent的pom.xml</p>\n</blockquote>\n<p>主体:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.littleboy<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 主体内容 --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">modules</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">module</span>&gt;</span>../common<span class=\"tag\">&lt;/<span class=\"name\">module</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">module</span>&gt;</span>../manager<span class=\"tag\">&lt;/<span class=\"name\">module</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">module</span>&gt;</span>../web<span class=\"tag\">&lt;/<span class=\"name\">module</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">modules</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>打包方式:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>一般来说都会将依赖版本号写到properties节点中, 这样以后更换版本的时候就会非常方便</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 项目编码 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 指定Java编译和源码版本 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">maven.compiler.source</span>&gt;</span>1.7<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.source</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">maven.compiler.target</span>&gt;</span>1.7<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.target</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 测试 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">junit.version</span>&gt;</span>4.11<span class=\"tag\">&lt;/<span class=\"name\">junit.version</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- spring --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">spring.version</span>&gt;</span>5.0.8.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">spring.version</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- database --&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- mybatis --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">mybatis.spring.version</span>&gt;</span>1.3.2<span class=\"tag\">&lt;/<span class=\"name\">mybatis.spring.version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">mybatis.version</span>&gt;</span>3.4.6<span class=\"tag\">&lt;/<span class=\"name\">mybatis.version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 分页 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">mybatis.pagintor.version</span>&gt;</span>1.2.15<span class=\"tag\">&lt;/<span class=\"name\">mybatis.pagintor.version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">mybatis.pagehelper.version</span>&gt;</span>5.1.4<span class=\"tag\">&lt;/<span class=\"name\">mybatis.pagehelper.version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">mybatis.generator.version</span>&gt;</span>1.3.7<span class=\"tag\">&lt;/<span class=\"name\">mybatis.generator.version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 缓存, 可以用来操作redis https://blog.csdn.net/a837201942/article/details/77160658 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">jedis.version</span>&gt;</span>2.9.0<span class=\"tag\">&lt;/<span class=\"name\">jedis.version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 全文检索 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">solrj.version</span>&gt;</span>7.4.0<span class=\"tag\">&lt;/<span class=\"name\">solrj.version</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 分布式框架 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dubbo.version</span>&gt;</span>2.5.9<span class=\"tag\">&lt;/<span class=\"name\">dubbo.version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">zookeeper.version</span>&gt;</span>3.4.13<span class=\"tag\">&lt;/<span class=\"name\">zookeeper.version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">zkclient.version</span>&gt;</span>0.10<span class=\"tag\">&lt;/<span class=\"name\">zkclient.version</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 消息队列 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">activemq.version</span>&gt;</span>5.7.0<span class=\"tag\">&lt;/<span class=\"name\">activemq.version</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 连接池 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">druid.version</span>&gt;</span>1.1.9<span class=\"tag\">&lt;/<span class=\"name\">druid.version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- mysql --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">mysql.version</span>&gt;</span>8.0.11<span class=\"tag\">&lt;/<span class=\"name\">mysql.version</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 杂七杂八 --&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 日志 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">slf4j.version</span>&gt;</span>1.7.7<span class=\"tag\">&lt;/<span class=\"name\">slf4j.version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- jackson --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">jackson.version</span>&gt;</span>2.9.6<span class=\"tag\">&lt;/<span class=\"name\">jackson.version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- http协议客户端编程 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">httpClient.verrsion</span>&gt;</span>4.5.6<span class=\"tag\">&lt;/<span class=\"name\">httpClient.verrsion</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- jstl --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">jstl.version</span>&gt;</span>1.2<span class=\"tag\">&lt;/<span class=\"name\">jstl.version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- servlet --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">servlet.version</span>&gt;</span>4.0.1<span class=\"tag\">&lt;/<span class=\"name\">servlet.version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- jsp --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">jsp.version</span>&gt;</span>2.3.3<span class=\"tag\">&lt;/<span class=\"name\">jsp.version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- joda-time (替代 java 自带日期时间用)--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">joda-time.version</span>&gt;</span>2.10<span class=\"tag\">&lt;/<span class=\"name\">joda-time.version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- common (apache家的, 很厉害) 使用方法可以查看 https://www.cnblogs.com/shihaiming/p/7814804.html --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">commons-lang.version</span>&gt;</span>3.7<span class=\"tag\">&lt;/<span class=\"name\">commons-lang.version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 同上, 使用方法可以查看 https://www.cnblogs.com/softidea/p/4279576.html --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">commons-io.version</span>&gt;</span>2.6<span class=\"tag\">&lt;/<span class=\"name\">commons-io.version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 文件上传下载 使用方法 https://www.cnblogs.com/whgk/p/6479405.html --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">commons-fileUpload.version</span>&gt;</span>1.3.3<span class=\"tag\">&lt;/<span class=\"name\">commons-fileUpload.version</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">common-net.version</span>&gt;</span>3.3<span class=\"tag\">&lt;/<span class=\"name\">common-net.version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 任务调度框架 https://www.cnblogs.com/drift-ice/p/3817269.html --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">quartz.version</span>&gt;</span>2.3.0<span class=\"tag\">&lt;/<span class=\"name\">quartz.version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>因为parent是用来管理版本号的, 所以, 这里将所有用到的依赖都写到<code>&lt;dependencyManagement&gt;</code>节点下, 说明是管理依赖而不是引入依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 工具类 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>joda-time<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>joda-time<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;joda-time.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.commons<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-lang3<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;commons-lang.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>commons-io<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-io<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;commons-io.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>commons-net<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-net<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;common-net.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-databind<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;jackson.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.httpcomponents<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>httpclient<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;httpClient.verrsion&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.quartz-scheduler<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>quartz<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;quartz.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.slf4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>slf4j-log4j12<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 工具类结束 --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- mybatis 和数据库 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;mybatis.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-spring<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;mybatis.spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.github.miemiedev<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-paginator<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;mybatis.pagintor.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis.generator<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-generator-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;mybatis.generator.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.github.pagehelper<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>pagehelper<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;mybatis.pagehelper.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;mysql.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>druid<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;druid.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- mybatis 和数据库结束 --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- spring --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-context<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-beans<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-webmvc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-jdbc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-aspects<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-jms<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-context-support<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- spring 结束 --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 表现层 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jstl<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;jstl.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- scope provided 代表不会被打包进去 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>javax.servlet-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;servlet.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>provided<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet.jsp<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>javax.servlet.jsp-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;jsp.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>provided<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 表现层结束 --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>commons-fileupload<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-fileupload<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;commons-fileUpload.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>redis.clients<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jedis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;jedis.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.solr<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>solr-solrj<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;solrj.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>dubbo<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;dubbo.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.zookeeper<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>zookeeper<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;zookeeper.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.101tec<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>zkclient<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;zkclient.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.activemq<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>activemq-all<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;activemq.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.freemarker<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>freemarker<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;freeMarker.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;junit.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>最后, 来引入一些Maven插件, 仔细注意一下, tomcat插件没有没引入, 只是放到了插件管理中:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">finalName</span>&gt;</span>$&#123;project.artifactId&#125;<span class=\"tag\">&lt;/<span class=\"name\">finalName</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 指定源码版本 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-resources-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.0.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">encoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">encoding</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 指定编译版本 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.7.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">source</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">source</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">target</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">encoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">encoding</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 这里是插件管理, 同样不是引入插件, 而是管理插件 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">pluginManagement</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.tomcat.maven<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">pluginManagement</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<p>好了, 这下parent的pom.xml就完成了, 下一篇博客会接着讲配置。</p>"},{"title":"商城开发笔记-pojo,dao,interface,service的依赖","date":"2018-11-21T11:37:28.000Z","_content":"\n# pojo的依赖\n\npojo是用来存放实体类的工程, 它什么依赖也不需要, 只需要将打包方式改成jar就可以。\n\n<br>\n\n# dao的依赖\n\n他的打包方式同样是jar, 而且因为和数据库打交道, 所以需要将mybatis的依赖添加进来\n\n<!--more-->\n\n> dependencies部分\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>${parent.groupId}</groupId>\n    <artifactId>pojo</artifactId>\n    <version>${parent.version}</version>\n  </dependency>\n\n  <dependency>\n    <groupId>org.mybatis</groupId>\n    <artifactId>mybatis</artifactId>\n  </dependency>\n\n  <dependency>\n    <groupId>org.mybatis</groupId>\n    <artifactId>mybatis-spring</artifactId>\n  </dependency>\n\n  <dependency>\n    <groupId>com.github.miemiedev</groupId>\n    <artifactId>mybatis-paginator</artifactId>\n  </dependency>\n\n  <dependency>\n    <groupId>com.github.pagehelper</groupId>\n    <artifactId>pagehelper</artifactId>\n  </dependency>\n\n  <dependency>\n    <groupId>mysql</groupId>\n    <artifactId>mysql-connector-java</artifactId>\n  </dependency>\n\n  <!--这个是数据库连接池-->\n  <dependency>\n    <groupId>com.alibaba</groupId>\n    <artifactId>druid</artifactId>\n  </dependency>\n</dependencies>\n```\n\n依赖还包括了pagehelper, 是mybatis提供的用来分页的工具\n\n<br>\n\n# interface的依赖\n\n打包方式依然是jar, 由于存放的都是接口, 所以也用不到什么依赖, 只需要将pojo引入进来就可以了\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>${parent.groupId}</groupId>\n    <artifactId>pojo</artifactId>\n    <version>${parent.version}</version>\n  </dependency>\n</dependencies>\n```\n\n<br>\n\n# service的依赖\n\n这里很重要, 还记得咱们之前讲的关于本项目的架构的问题么? 因为这个项目使用的是SOA架构, 服务统一由服务中心管理, 由服务中心暴露服务的端口给表现层, 所以服务层的打包方式需要是war, 以一个web工程的方式打包, 这样才可以单独启动这个工程, 从而暴露端口。\n\n所以它需要的依赖就包括了SpringMVC, 以下是它的dependencies部分:\n\n> service的配置部分\n\n```xml\n<dependencies>\n  <!--dao-->\n  <dependency>\n    <groupId>${parent.groupId}</groupId>\n    <artifactId>dao</artifactId>\n    <version>${parent.version}</version>\n  </dependency>\n\n  <!--interface-->\n  <dependency>\n    <groupId>${parent.groupId}</groupId>\n    <artifactId>interface</artifactId>\n    <version>${parent.version}</version>\n  </dependency>\n\n  <!--spring start-->\n  <dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-context</artifactId>\n  </dependency>\n\n  <dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-beans</artifactId>\n  </dependency>\n\n  <dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-webmvc</artifactId>\n  </dependency>\n\n  <dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-jdbc</artifactId>\n  </dependency>\n\n  <dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-aspects</artifactId>\n  </dependency>\n\n  <dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-jms</artifactId>\n  </dependency>\n\n  <dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-context-support</artifactId>\n  </dependency>\n  <!--Spring end-->\n\n  <!--dubbo-->\n  <dependency>\n    <groupId>com.alibaba</groupId>\n    <artifactId>dubbo</artifactId>\n    <exclusions>\n      <!--将spring依赖去除-->\n      <exclusion>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring</artifactId>\n      </exclusion>\n      <exclusion>\n        <!--将netty依赖去除-->\n        <groupId>org.boss.netty</groupId>\n        <artifactId>netty</artifactId>\n      </exclusion>\n    </exclusions>\n  </dependency>\n\n  <!--分页-->\n  <dependency>\n    <groupId>com.github.pagehelper</groupId>\n    <artifactId>pagehelper</artifactId>\n  </dependency>\n\n  <!--zookeeper start-->\n  <dependency>\n    <groupId>org.apache.zookeeper</groupId>\n    <artifactId>zookeeper</artifactId>\n  </dependency>\n\n  <dependency>\n    <groupId>com.101tec</groupId>\n    <artifactId>zkclient</artifactId>\n  </dependency>\n  <!--zookeeper end-->\n  \n  <dependency>\n    <groupId>org.junit.jupiter</groupId>\n    <artifactId>junit-jupiter-api</artifactId>\n    <version>RELEASE</version>\n  </dependency>\n</dependencies>\n```\n\n这里需要说明一下, 因为dubbo中引用了Spring依赖, 所以我们需要将依赖去掉, 要不然会冲突。\n\n<br>\n\nok, 下一篇博客就是我们最后一个工程的依赖了, 依赖讲完后, 我们再来说说整个项目的配置。","source":"_posts/my_project/shopping_mall/Dependence_and_configuration/Shopping-mall-developNote-pojo-dao-interface-service-depend.md","raw":"---\ntitle: '商城开发笔记-pojo,dao,interface,service的依赖'\ndate: 2018-11-21 19:37:28\ncategories:\n- 开发笔记\n- 商城\n- 配置篇\ntags:\n- 商城开发\n---\n\n# pojo的依赖\n\npojo是用来存放实体类的工程, 它什么依赖也不需要, 只需要将打包方式改成jar就可以。\n\n<br>\n\n# dao的依赖\n\n他的打包方式同样是jar, 而且因为和数据库打交道, 所以需要将mybatis的依赖添加进来\n\n<!--more-->\n\n> dependencies部分\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>${parent.groupId}</groupId>\n    <artifactId>pojo</artifactId>\n    <version>${parent.version}</version>\n  </dependency>\n\n  <dependency>\n    <groupId>org.mybatis</groupId>\n    <artifactId>mybatis</artifactId>\n  </dependency>\n\n  <dependency>\n    <groupId>org.mybatis</groupId>\n    <artifactId>mybatis-spring</artifactId>\n  </dependency>\n\n  <dependency>\n    <groupId>com.github.miemiedev</groupId>\n    <artifactId>mybatis-paginator</artifactId>\n  </dependency>\n\n  <dependency>\n    <groupId>com.github.pagehelper</groupId>\n    <artifactId>pagehelper</artifactId>\n  </dependency>\n\n  <dependency>\n    <groupId>mysql</groupId>\n    <artifactId>mysql-connector-java</artifactId>\n  </dependency>\n\n  <!--这个是数据库连接池-->\n  <dependency>\n    <groupId>com.alibaba</groupId>\n    <artifactId>druid</artifactId>\n  </dependency>\n</dependencies>\n```\n\n依赖还包括了pagehelper, 是mybatis提供的用来分页的工具\n\n<br>\n\n# interface的依赖\n\n打包方式依然是jar, 由于存放的都是接口, 所以也用不到什么依赖, 只需要将pojo引入进来就可以了\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>${parent.groupId}</groupId>\n    <artifactId>pojo</artifactId>\n    <version>${parent.version}</version>\n  </dependency>\n</dependencies>\n```\n\n<br>\n\n# service的依赖\n\n这里很重要, 还记得咱们之前讲的关于本项目的架构的问题么? 因为这个项目使用的是SOA架构, 服务统一由服务中心管理, 由服务中心暴露服务的端口给表现层, 所以服务层的打包方式需要是war, 以一个web工程的方式打包, 这样才可以单独启动这个工程, 从而暴露端口。\n\n所以它需要的依赖就包括了SpringMVC, 以下是它的dependencies部分:\n\n> service的配置部分\n\n```xml\n<dependencies>\n  <!--dao-->\n  <dependency>\n    <groupId>${parent.groupId}</groupId>\n    <artifactId>dao</artifactId>\n    <version>${parent.version}</version>\n  </dependency>\n\n  <!--interface-->\n  <dependency>\n    <groupId>${parent.groupId}</groupId>\n    <artifactId>interface</artifactId>\n    <version>${parent.version}</version>\n  </dependency>\n\n  <!--spring start-->\n  <dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-context</artifactId>\n  </dependency>\n\n  <dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-beans</artifactId>\n  </dependency>\n\n  <dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-webmvc</artifactId>\n  </dependency>\n\n  <dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-jdbc</artifactId>\n  </dependency>\n\n  <dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-aspects</artifactId>\n  </dependency>\n\n  <dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-jms</artifactId>\n  </dependency>\n\n  <dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-context-support</artifactId>\n  </dependency>\n  <!--Spring end-->\n\n  <!--dubbo-->\n  <dependency>\n    <groupId>com.alibaba</groupId>\n    <artifactId>dubbo</artifactId>\n    <exclusions>\n      <!--将spring依赖去除-->\n      <exclusion>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring</artifactId>\n      </exclusion>\n      <exclusion>\n        <!--将netty依赖去除-->\n        <groupId>org.boss.netty</groupId>\n        <artifactId>netty</artifactId>\n      </exclusion>\n    </exclusions>\n  </dependency>\n\n  <!--分页-->\n  <dependency>\n    <groupId>com.github.pagehelper</groupId>\n    <artifactId>pagehelper</artifactId>\n  </dependency>\n\n  <!--zookeeper start-->\n  <dependency>\n    <groupId>org.apache.zookeeper</groupId>\n    <artifactId>zookeeper</artifactId>\n  </dependency>\n\n  <dependency>\n    <groupId>com.101tec</groupId>\n    <artifactId>zkclient</artifactId>\n  </dependency>\n  <!--zookeeper end-->\n  \n  <dependency>\n    <groupId>org.junit.jupiter</groupId>\n    <artifactId>junit-jupiter-api</artifactId>\n    <version>RELEASE</version>\n  </dependency>\n</dependencies>\n```\n\n这里需要说明一下, 因为dubbo中引用了Spring依赖, 所以我们需要将依赖去掉, 要不然会冲突。\n\n<br>\n\nok, 下一篇博客就是我们最后一个工程的依赖了, 依赖讲完后, 我们再来说说整个项目的配置。","slug":"my_project/shopping_mall/Dependence_and_configuration/Shopping-mall-developNote-pojo-dao-interface-service-depend","published":1,"updated":"2021-10-14T08:18:54.371Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejty006w3vsbbwl89dn2","content":"<h1 id=\"pojo的依赖\"><a href=\"#pojo的依赖\" class=\"headerlink\" title=\"pojo的依赖\"></a>pojo的依赖</h1><p>pojo是用来存放实体类的工程, 它什么依赖也不需要, 只需要将打包方式改成jar就可以。</p>\n<br>\n\n<h1 id=\"dao的依赖\"><a href=\"#dao的依赖\" class=\"headerlink\" title=\"dao的依赖\"></a>dao的依赖</h1><p>他的打包方式同样是jar, 而且因为和数据库打交道, 所以需要将mybatis的依赖添加进来</p>\n<span id=\"more\"></span>\n\n<blockquote>\n<p>dependencies部分</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>$&#123;parent.groupId&#125;<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>pojo<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;parent.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-spring<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.github.miemiedev<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-paginator<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.github.pagehelper<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>pagehelper<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--这个是数据库连接池--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>druid<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>依赖还包括了pagehelper, 是mybatis提供的用来分页的工具</p>\n<br>\n\n<h1 id=\"interface的依赖\"><a href=\"#interface的依赖\" class=\"headerlink\" title=\"interface的依赖\"></a>interface的依赖</h1><p>打包方式依然是jar, 由于存放的都是接口, 所以也用不到什么依赖, 只需要将pojo引入进来就可以了</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>$&#123;parent.groupId&#125;<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>pojo<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;parent.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h1 id=\"service的依赖\"><a href=\"#service的依赖\" class=\"headerlink\" title=\"service的依赖\"></a>service的依赖</h1><p>这里很重要, 还记得咱们之前讲的关于本项目的架构的问题么? 因为这个项目使用的是SOA架构, 服务统一由服务中心管理, 由服务中心暴露服务的端口给表现层, 所以服务层的打包方式需要是war, 以一个web工程的方式打包, 这样才可以单独启动这个工程, 从而暴露端口。</p>\n<p>所以它需要的依赖就包括了SpringMVC, 以下是它的dependencies部分:</p>\n<blockquote>\n<p>service的配置部分</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--dao--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>$&#123;parent.groupId&#125;<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>dao<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;parent.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--interface--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>$&#123;parent.groupId&#125;<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>interface<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;parent.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--spring start--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-context<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-beans<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-webmvc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-jdbc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-aspects<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-jms<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-context-support<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--Spring end--&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--dubbo--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>dubbo<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!--将spring依赖去除--&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--将netty依赖去除--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.boss.netty<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>netty<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--分页--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.github.pagehelper<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>pagehelper<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--zookeeper start--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.zookeeper<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>zookeeper<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.101tec<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>zkclient<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--zookeeper end--&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.junit.jupiter<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit-jupiter-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这里需要说明一下, 因为dubbo中引用了Spring依赖, 所以我们需要将依赖去掉, 要不然会冲突。</p>\n<br>\n\n<p>ok, 下一篇博客就是我们最后一个工程的依赖了, 依赖讲完后, 我们再来说说整个项目的配置。</p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"pojo的依赖\"><a href=\"#pojo的依赖\" class=\"headerlink\" title=\"pojo的依赖\"></a>pojo的依赖</h1><p>pojo是用来存放实体类的工程, 它什么依赖也不需要, 只需要将打包方式改成jar就可以。</p>\n<br>\n\n<h1 id=\"dao的依赖\"><a href=\"#dao的依赖\" class=\"headerlink\" title=\"dao的依赖\"></a>dao的依赖</h1><p>他的打包方式同样是jar, 而且因为和数据库打交道, 所以需要将mybatis的依赖添加进来</p>","more":"<blockquote>\n<p>dependencies部分</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>$&#123;parent.groupId&#125;<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>pojo<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;parent.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-spring<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.github.miemiedev<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-paginator<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.github.pagehelper<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>pagehelper<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--这个是数据库连接池--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>druid<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>依赖还包括了pagehelper, 是mybatis提供的用来分页的工具</p>\n<br>\n\n<h1 id=\"interface的依赖\"><a href=\"#interface的依赖\" class=\"headerlink\" title=\"interface的依赖\"></a>interface的依赖</h1><p>打包方式依然是jar, 由于存放的都是接口, 所以也用不到什么依赖, 只需要将pojo引入进来就可以了</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>$&#123;parent.groupId&#125;<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>pojo<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;parent.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h1 id=\"service的依赖\"><a href=\"#service的依赖\" class=\"headerlink\" title=\"service的依赖\"></a>service的依赖</h1><p>这里很重要, 还记得咱们之前讲的关于本项目的架构的问题么? 因为这个项目使用的是SOA架构, 服务统一由服务中心管理, 由服务中心暴露服务的端口给表现层, 所以服务层的打包方式需要是war, 以一个web工程的方式打包, 这样才可以单独启动这个工程, 从而暴露端口。</p>\n<p>所以它需要的依赖就包括了SpringMVC, 以下是它的dependencies部分:</p>\n<blockquote>\n<p>service的配置部分</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--dao--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>$&#123;parent.groupId&#125;<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>dao<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;parent.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--interface--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>$&#123;parent.groupId&#125;<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>interface<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;parent.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--spring start--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-context<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-beans<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-webmvc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-jdbc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-aspects<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-jms<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-context-support<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--Spring end--&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--dubbo--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>dubbo<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!--将spring依赖去除--&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--将netty依赖去除--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.boss.netty<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>netty<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--分页--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.github.pagehelper<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>pagehelper<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--zookeeper start--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.zookeeper<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>zookeeper<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.101tec<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>zkclient<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--zookeeper end--&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.junit.jupiter<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit-jupiter-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这里需要说明一下, 因为dubbo中引用了Spring依赖, 所以我们需要将依赖去掉, 要不然会冲突。</p>\n<br>\n\n<p>ok, 下一篇博客就是我们最后一个工程的依赖了, 依赖讲完后, 我们再来说说整个项目的配置。</p>"},{"title":"商城开发笔记-service的配置","date":"2018-11-26T11:46:23.000Z","_content":"\n# 数据库配置\n\n如果把配置写到xml配置文件中会显得很乱, 而且不好改, 如果有多个数据库的话, 会非常不方便, 那么可以单独写到一个配置文件中, 这样如果有多个数据库配置的话, 就可以直接切换配置文件了。\n\n<!--more-->\n\n<br>\n\n下面是我的数据库配置文件(db.properties):\n\n```properties\njdbc.driver=com.mysql.cj.jdbc.Driver\njdbc.url=jdbc:mysql://localhost:3306/taotao?useUnicode=true&characterEncoding=utf-8&serverTimezone=UTC\njdbc.username=littleboy\njdbc.password=970711dhz\n\njdbc.pool.init=1\njdbc.pool.minIdle=3\njdbc.pool.maxActive=20\n\nweb.view.prefix=/WEB-INF/views/\nweb.view.suffix=.html\n```\n\n<br>\n\n# Spring 配置\n\nSpring 配置主要分为三个, \n\n1. dao层配置, 也就是数据库配置\n2. service层配置\n3. 事务配置\n\n<br>\n\n## dao层配置\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"\n        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd\n        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd\">\n\n    <!-- 加载配置文件 -->\n    <context:property-placeholder location=\"classpath:conf/db.properties\" />\n\n    <!-- 配置数据库连接池 -->\n    <bean id=\"dataSource\" class=\"com.alibaba.druid.pool.DruidDataSource\" destroy-method=\"close\">\n        <property name=\"url\" value=\"${jdbc.url}\" />\n        <property name=\"username\" value=\"${jdbc.username}\" />\n        <property name=\"password\" value=\"${jdbc.password}\" />\n        <property name=\"driverClassName\" value=\"${jdbc.driver}\" />\n        <!-- 最大连接数 -->\n        <property name=\"maxActive\" value=\"${jdbc.pool.maxActive}\" />\n        <!-- 最小空闲连接数 -->\n        <property name=\"minIdle\" value=\"${jdbc.pool.minIdle}\" />\n    </bean>\n\n    <!-- mybatis 的sqlSessionFactory, 配置了mybatis的配置文件和mapper.xml文件 -->\n    <bean id=\"sqlSessionFactory\" class=\"org.mybatis.spring.SqlSessionFactoryBean\">\n        <property name=\"dataSource\" ref=\"dataSource\" />\n        <property name=\"configLocation\" value=\"classpath:mybatis/sqlMapConfig.xml\" />\n        <property name=\"mapperLocations\" value=\"classpath*:mapper/*.xml\" />\n    </bean>\n\n    <!-- mapper 扫描器 -->\n    <bean class=\"org.mybatis.spring.mapper.MapperScannerConfigurer\">\n        <property name=\"basePackage\" value=\"com.littleboy.dao\" />\n    </bean>\n</beans>\n```\n\n这里用的数据库连接池是阿里开发的druid, 可自行百度\n\n这里有一个Mapper扫描器和配置mybaits的东西, 这里涉及到了mybatis的自动生成实体类和Mapper, [这篇讲到了这个。](/my_project/shopping_mall/taps/shopping-mall-developNote-mybatis-automatic-generation.html)\n\n<br>\n\n## service 层配置\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xmlns:dubbo=\"http://code.alibabatech.com/schema/dubbo\"\n       xsi:schemaLocation=\"\n        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd\n        http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd\n        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd\">\n\n    <!-- 扫描service -->\n    <context:component-scan base-package=\"com.littleboy.service.**\" />\n\n    <!-- 使用dubbo发布服务 -->\n    <!-- 提供方应用信息, 用于计算依赖关系 -->\n    <!-- 服务的工程名 -->\n    <dubbo:application name=\"manager\" />\n\n    <!-- 注册中心 -->\n    <dubbo:registry protocol=\"zookeeper\"\n                    address=\"127.0.0.1:2182\" />\n\n    <!-- 用dubbo协议在20080端口暴露服务 -->\n    <dubbo:protocol name=\"dubbo\" port=\"20080\" />\n    <!-- 声明需要暴露的服务接口 -->\n    <dubbo:service interface=\"com.littleboy.service.ItemService\" ref=\"itemServiceImpl\" timeout=\"600000\"/>\n    <dubbo:service interface=\"com.littleboy.service.ItemCatService\" ref=\"itemCatServiceImpl\" timeout=\"600000\" />\n\n</beans>\n```\n\n这里除了必要的自动扫描之外, 还有dubbo的配置, 首先声明了服务的工程名, 接着是配置了注册中心的地址, 这里的地址是你的zookeeper的地址。\n\n最后配置了dubbo的端口和服务接口\n\n<br>\n\n## translation 配置\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:tx=\"http://www.springframework.org/schema/tx\"\n       xmlns:aop=\"http://www.springframework.org/schema/aop\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n       http://www.springframework.org/schema/beans/spring-beans-4.0.xsd\n        http://www.springframework.org/schema/tx\n        http://www.springframework.org/schema/tx/spring-tx-4.0.xsd\n        http://www.springframework.org/schema/aop\n        http://www.springframework.org/schema/aop/spring-aop.xsd\">\n  \n    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->\n    <bean id=\"transactionManager\"\n          class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\n        <property name=\"dataSource\" ref=\"dataSource\" />\n    </bean>\n\n    <!-- 配置事务通知属性 -->\n    <tx:advice id=\"txAdvice\" transaction-manager=\"transactionManager\">\n        <!-- 定义事务传播属性 -->\n        <tx:attributes>\n            <tx:method name=\"insert*\" propagation=\"REQUIRED\" />\n            <tx:method name=\"update*\" propagation=\"REQUIRED\" />\n            <tx:method name=\"edit*\" propagation=\"REQUIRED\" />\n            <tx:method name=\"save*\" propagation=\"REQUIRED\" />\n            <tx:method name=\"add*\" propagation=\"REQUIRED\" />\n            <tx:method name=\"new*\" propagation=\"REQUIRED\" />\n            <tx:method name=\"set*\" propagation=\"REQUIRED\" />\n            <tx:method name=\"remove*\" propagation=\"REQUIRED\" />\n            <tx:method name=\"delete*\" propagation=\"REQUIRED\" />\n            <tx:method name=\"change*\" propagation=\"REQUIRED\" />\n            <tx:method name=\"get*\" propagation=\"REQUIRED\" read-only=\"true\" />\n            <tx:method name=\"find*\" propagation=\"REQUIRED\" read-only=\"true\" />\n            <tx:method name=\"load*\" propagation=\"REQUIRED\" read-only=\"true\" />\n            <tx:method name=\"*\" propagation=\"REQUIRED\" read-only=\"true\" />\n        </tx:attributes>\n    </tx:advice>\n\n    <aop:config>\n        <aop:advisor advice-ref=\"txAdvice\" pointcut=\"execution(* com.littleboy.service..*.*(..))\"/>\n    </aop:config>\n</beans>\n```\n\n没啥可说的, 配置了事务, 并使用aop将事务切入到service中, 可以看看数据库方面的书来补充一下事务方面的知识。\n\n<br>\n\n## web.xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE web-app PUBLIC\n        \"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN\"\n        \"http://java.sun.com/dtd/web-app_2_3.dtd\" >\n<web-app\n        id=\"WebApp_ID\"\n        version=\"3.0\"\n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xmlns=\"http://java.sun.com/xml/ns/javaee\"\n        xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee\n        http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\">\n\n    <display-name>manager</display-name>\n\n    <!-- 加载 spring 容器 -->\n    <context-param>\n        <param-name>contextConfigLocation</param-name>\n        <param-value>classpath:spring/application*.xml</param-value>\n    </context-param>\n\n    <listener>\n        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\n    </listener>\n</web-app>\n```\n\n配置了Spring的监听器, 加载Spring容器\n\n<br>\n\n下一篇讲web工程的配置。","source":"_posts/my_project/shopping_mall/Dependence_and_configuration/Shopping-mall-developNote-service-config.md","raw":"---\ntitle: 商城开发笔记-service的配置\ndate: 2018-11-26 19:46:23\ncategories:\n- 开发笔记\n- 商城\n- 配置篇\ntags:\n- 商城开发\n---\n\n# 数据库配置\n\n如果把配置写到xml配置文件中会显得很乱, 而且不好改, 如果有多个数据库的话, 会非常不方便, 那么可以单独写到一个配置文件中, 这样如果有多个数据库配置的话, 就可以直接切换配置文件了。\n\n<!--more-->\n\n<br>\n\n下面是我的数据库配置文件(db.properties):\n\n```properties\njdbc.driver=com.mysql.cj.jdbc.Driver\njdbc.url=jdbc:mysql://localhost:3306/taotao?useUnicode=true&characterEncoding=utf-8&serverTimezone=UTC\njdbc.username=littleboy\njdbc.password=970711dhz\n\njdbc.pool.init=1\njdbc.pool.minIdle=3\njdbc.pool.maxActive=20\n\nweb.view.prefix=/WEB-INF/views/\nweb.view.suffix=.html\n```\n\n<br>\n\n# Spring 配置\n\nSpring 配置主要分为三个, \n\n1. dao层配置, 也就是数据库配置\n2. service层配置\n3. 事务配置\n\n<br>\n\n## dao层配置\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"\n        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd\n        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd\">\n\n    <!-- 加载配置文件 -->\n    <context:property-placeholder location=\"classpath:conf/db.properties\" />\n\n    <!-- 配置数据库连接池 -->\n    <bean id=\"dataSource\" class=\"com.alibaba.druid.pool.DruidDataSource\" destroy-method=\"close\">\n        <property name=\"url\" value=\"${jdbc.url}\" />\n        <property name=\"username\" value=\"${jdbc.username}\" />\n        <property name=\"password\" value=\"${jdbc.password}\" />\n        <property name=\"driverClassName\" value=\"${jdbc.driver}\" />\n        <!-- 最大连接数 -->\n        <property name=\"maxActive\" value=\"${jdbc.pool.maxActive}\" />\n        <!-- 最小空闲连接数 -->\n        <property name=\"minIdle\" value=\"${jdbc.pool.minIdle}\" />\n    </bean>\n\n    <!-- mybatis 的sqlSessionFactory, 配置了mybatis的配置文件和mapper.xml文件 -->\n    <bean id=\"sqlSessionFactory\" class=\"org.mybatis.spring.SqlSessionFactoryBean\">\n        <property name=\"dataSource\" ref=\"dataSource\" />\n        <property name=\"configLocation\" value=\"classpath:mybatis/sqlMapConfig.xml\" />\n        <property name=\"mapperLocations\" value=\"classpath*:mapper/*.xml\" />\n    </bean>\n\n    <!-- mapper 扫描器 -->\n    <bean class=\"org.mybatis.spring.mapper.MapperScannerConfigurer\">\n        <property name=\"basePackage\" value=\"com.littleboy.dao\" />\n    </bean>\n</beans>\n```\n\n这里用的数据库连接池是阿里开发的druid, 可自行百度\n\n这里有一个Mapper扫描器和配置mybaits的东西, 这里涉及到了mybatis的自动生成实体类和Mapper, [这篇讲到了这个。](/my_project/shopping_mall/taps/shopping-mall-developNote-mybatis-automatic-generation.html)\n\n<br>\n\n## service 层配置\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xmlns:dubbo=\"http://code.alibabatech.com/schema/dubbo\"\n       xsi:schemaLocation=\"\n        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd\n        http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd\n        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd\">\n\n    <!-- 扫描service -->\n    <context:component-scan base-package=\"com.littleboy.service.**\" />\n\n    <!-- 使用dubbo发布服务 -->\n    <!-- 提供方应用信息, 用于计算依赖关系 -->\n    <!-- 服务的工程名 -->\n    <dubbo:application name=\"manager\" />\n\n    <!-- 注册中心 -->\n    <dubbo:registry protocol=\"zookeeper\"\n                    address=\"127.0.0.1:2182\" />\n\n    <!-- 用dubbo协议在20080端口暴露服务 -->\n    <dubbo:protocol name=\"dubbo\" port=\"20080\" />\n    <!-- 声明需要暴露的服务接口 -->\n    <dubbo:service interface=\"com.littleboy.service.ItemService\" ref=\"itemServiceImpl\" timeout=\"600000\"/>\n    <dubbo:service interface=\"com.littleboy.service.ItemCatService\" ref=\"itemCatServiceImpl\" timeout=\"600000\" />\n\n</beans>\n```\n\n这里除了必要的自动扫描之外, 还有dubbo的配置, 首先声明了服务的工程名, 接着是配置了注册中心的地址, 这里的地址是你的zookeeper的地址。\n\n最后配置了dubbo的端口和服务接口\n\n<br>\n\n## translation 配置\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:tx=\"http://www.springframework.org/schema/tx\"\n       xmlns:aop=\"http://www.springframework.org/schema/aop\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n       http://www.springframework.org/schema/beans/spring-beans-4.0.xsd\n        http://www.springframework.org/schema/tx\n        http://www.springframework.org/schema/tx/spring-tx-4.0.xsd\n        http://www.springframework.org/schema/aop\n        http://www.springframework.org/schema/aop/spring-aop.xsd\">\n  \n    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->\n    <bean id=\"transactionManager\"\n          class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\n        <property name=\"dataSource\" ref=\"dataSource\" />\n    </bean>\n\n    <!-- 配置事务通知属性 -->\n    <tx:advice id=\"txAdvice\" transaction-manager=\"transactionManager\">\n        <!-- 定义事务传播属性 -->\n        <tx:attributes>\n            <tx:method name=\"insert*\" propagation=\"REQUIRED\" />\n            <tx:method name=\"update*\" propagation=\"REQUIRED\" />\n            <tx:method name=\"edit*\" propagation=\"REQUIRED\" />\n            <tx:method name=\"save*\" propagation=\"REQUIRED\" />\n            <tx:method name=\"add*\" propagation=\"REQUIRED\" />\n            <tx:method name=\"new*\" propagation=\"REQUIRED\" />\n            <tx:method name=\"set*\" propagation=\"REQUIRED\" />\n            <tx:method name=\"remove*\" propagation=\"REQUIRED\" />\n            <tx:method name=\"delete*\" propagation=\"REQUIRED\" />\n            <tx:method name=\"change*\" propagation=\"REQUIRED\" />\n            <tx:method name=\"get*\" propagation=\"REQUIRED\" read-only=\"true\" />\n            <tx:method name=\"find*\" propagation=\"REQUIRED\" read-only=\"true\" />\n            <tx:method name=\"load*\" propagation=\"REQUIRED\" read-only=\"true\" />\n            <tx:method name=\"*\" propagation=\"REQUIRED\" read-only=\"true\" />\n        </tx:attributes>\n    </tx:advice>\n\n    <aop:config>\n        <aop:advisor advice-ref=\"txAdvice\" pointcut=\"execution(* com.littleboy.service..*.*(..))\"/>\n    </aop:config>\n</beans>\n```\n\n没啥可说的, 配置了事务, 并使用aop将事务切入到service中, 可以看看数据库方面的书来补充一下事务方面的知识。\n\n<br>\n\n## web.xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE web-app PUBLIC\n        \"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN\"\n        \"http://java.sun.com/dtd/web-app_2_3.dtd\" >\n<web-app\n        id=\"WebApp_ID\"\n        version=\"3.0\"\n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xmlns=\"http://java.sun.com/xml/ns/javaee\"\n        xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee\n        http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\">\n\n    <display-name>manager</display-name>\n\n    <!-- 加载 spring 容器 -->\n    <context-param>\n        <param-name>contextConfigLocation</param-name>\n        <param-value>classpath:spring/application*.xml</param-value>\n    </context-param>\n\n    <listener>\n        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\n    </listener>\n</web-app>\n```\n\n配置了Spring的监听器, 加载Spring容器\n\n<br>\n\n下一篇讲web工程的配置。","slug":"my_project/shopping_mall/Dependence_and_configuration/Shopping-mall-developNote-service-config","published":1,"updated":"2021-10-14T08:18:54.375Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8yleju1006x3vsbcuxffwz6","content":"<h1 id=\"数据库配置\"><a href=\"#数据库配置\" class=\"headerlink\" title=\"数据库配置\"></a>数据库配置</h1><p>如果把配置写到xml配置文件中会显得很乱, 而且不好改, 如果有多个数据库的话, 会非常不方便, 那么可以单独写到一个配置文件中, 这样如果有多个数据库配置的话, 就可以直接切换配置文件了。</p>\n<span id=\"more\"></span>\n\n<br>\n\n<p>下面是我的数据库配置文件(db.properties):</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">jdbc.driver</span>=<span class=\"string\">com.mysql.cj.jdbc.Driver</span></span><br><span class=\"line\"><span class=\"meta\">jdbc.url</span>=<span class=\"string\">jdbc:mysql://localhost:3306/taotao?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=UTC</span></span><br><span class=\"line\"><span class=\"meta\">jdbc.username</span>=<span class=\"string\">littleboy</span></span><br><span class=\"line\"><span class=\"meta\">jdbc.password</span>=<span class=\"string\">970711dhz</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">jdbc.pool.init</span>=<span class=\"string\">1</span></span><br><span class=\"line\"><span class=\"meta\">jdbc.pool.minIdle</span>=<span class=\"string\">3</span></span><br><span class=\"line\"><span class=\"meta\">jdbc.pool.maxActive</span>=<span class=\"string\">20</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">web.view.prefix</span>=<span class=\"string\">/WEB-INF/views/</span></span><br><span class=\"line\"><span class=\"meta\">web.view.suffix</span>=<span class=\"string\">.html</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h1 id=\"Spring-配置\"><a href=\"#Spring-配置\" class=\"headerlink\" title=\"Spring 配置\"></a>Spring 配置</h1><p>Spring 配置主要分为三个, </p>\n<ol>\n<li>dao层配置, 也就是数据库配置</li>\n<li>service层配置</li>\n<li>事务配置</li>\n</ol>\n<br>\n\n<h2 id=\"dao层配置\"><a href=\"#dao层配置\" class=\"headerlink\" title=\"dao层配置\"></a>dao层配置</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:context</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 加载配置文件 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:property-placeholder</span> <span class=\"attr\">location</span>=<span class=\"string\">&quot;classpath:conf/db.properties&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 配置数据库连接池 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;dataSource&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> <span class=\"attr\">destroy-method</span>=<span class=\"string\">&quot;close&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;url&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;jdbc.url&#125;&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;username&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;jdbc.username&#125;&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;jdbc.password&#125;&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;driverClassName&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;jdbc.driver&#125;&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 最大连接数 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;maxActive&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;jdbc.pool.maxActive&#125;&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 最小空闲连接数 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;minIdle&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;jdbc.pool.minIdle&#125;&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- mybatis 的sqlSessionFactory, 配置了mybatis的配置文件和mapper.xml文件 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sqlSessionFactory&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;dataSource&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;configLocation&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;classpath:mybatis/sqlMapConfig.xml&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;mapperLocations&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;classpath*:mapper/*.xml&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- mapper 扫描器 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;basePackage&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;com.littleboy.dao&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这里用的数据库连接池是阿里开发的druid, 可自行百度</p>\n<p>这里有一个Mapper扫描器和配置mybaits的东西, 这里涉及到了mybatis的自动生成实体类和Mapper, <a href=\"/my_project/shopping_mall/taps/shopping-mall-developNote-mybatis-automatic-generation.html\">这篇讲到了这个。</a></p>\n<br>\n\n<h2 id=\"service-层配置\"><a href=\"#service-层配置\" class=\"headerlink\" title=\"service 层配置\"></a>service 层配置</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:context</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:dubbo</span>=<span class=\"string\">&quot;http://code.alibabatech.com/schema/dubbo&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">        http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 扫描service --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">&quot;com.littleboy.service.**&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 使用dubbo发布服务 --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 提供方应用信息, 用于计算依赖关系 --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 服务的工程名 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dubbo:application</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;manager&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 注册中心 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dubbo:registry</span> <span class=\"attr\">protocol</span>=<span class=\"string\">&quot;zookeeper&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                    <span class=\"attr\">address</span>=<span class=\"string\">&quot;127.0.0.1:2182&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 用dubbo协议在20080端口暴露服务 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dubbo:protocol</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;dubbo&quot;</span> <span class=\"attr\">port</span>=<span class=\"string\">&quot;20080&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 声明需要暴露的服务接口 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dubbo:service</span> <span class=\"attr\">interface</span>=<span class=\"string\">&quot;com.littleboy.service.ItemService&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;itemServiceImpl&quot;</span> <span class=\"attr\">timeout</span>=<span class=\"string\">&quot;600000&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dubbo:service</span> <span class=\"attr\">interface</span>=<span class=\"string\">&quot;com.littleboy.service.ItemCatService&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;itemCatServiceImpl&quot;</span> <span class=\"attr\">timeout</span>=<span class=\"string\">&quot;600000&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这里除了必要的自动扫描之外, 还有dubbo的配置, 首先声明了服务的工程名, 接着是配置了注册中心的地址, 这里的地址是你的zookeeper的地址。</p>\n<p>最后配置了dubbo的端口和服务接口</p>\n<br>\n\n<h2 id=\"translation-配置\"><a href=\"#translation-配置\" class=\"headerlink\" title=\"translation 配置\"></a>translation 配置</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:tx</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:aop</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">       http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">        http://www.springframework.org/schema/tx</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">        http://www.springframework.org/schema/tx/spring-tx-4.0.xsd</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">        http://www.springframework.org/schema/aop</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">        http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- (事务管理)transaction manager, use JtaTransactionManager for global tx --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;transactionManager&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;dataSource&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 配置事务通知属性 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tx:advice</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;txAdvice&quot;</span> <span class=\"attr\">transaction-manager</span>=<span class=\"string\">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 定义事务传播属性 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tx:attributes</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;insert*&quot;</span> <span class=\"attr\">propagation</span>=<span class=\"string\">&quot;REQUIRED&quot;</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;update*&quot;</span> <span class=\"attr\">propagation</span>=<span class=\"string\">&quot;REQUIRED&quot;</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;edit*&quot;</span> <span class=\"attr\">propagation</span>=<span class=\"string\">&quot;REQUIRED&quot;</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;save*&quot;</span> <span class=\"attr\">propagation</span>=<span class=\"string\">&quot;REQUIRED&quot;</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;add*&quot;</span> <span class=\"attr\">propagation</span>=<span class=\"string\">&quot;REQUIRED&quot;</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;new*&quot;</span> <span class=\"attr\">propagation</span>=<span class=\"string\">&quot;REQUIRED&quot;</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;set*&quot;</span> <span class=\"attr\">propagation</span>=<span class=\"string\">&quot;REQUIRED&quot;</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;remove*&quot;</span> <span class=\"attr\">propagation</span>=<span class=\"string\">&quot;REQUIRED&quot;</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;delete*&quot;</span> <span class=\"attr\">propagation</span>=<span class=\"string\">&quot;REQUIRED&quot;</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;change*&quot;</span> <span class=\"attr\">propagation</span>=<span class=\"string\">&quot;REQUIRED&quot;</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;get*&quot;</span> <span class=\"attr\">propagation</span>=<span class=\"string\">&quot;REQUIRED&quot;</span> <span class=\"attr\">read-only</span>=<span class=\"string\">&quot;true&quot;</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;find*&quot;</span> <span class=\"attr\">propagation</span>=<span class=\"string\">&quot;REQUIRED&quot;</span> <span class=\"attr\">read-only</span>=<span class=\"string\">&quot;true&quot;</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;load*&quot;</span> <span class=\"attr\">propagation</span>=<span class=\"string\">&quot;REQUIRED&quot;</span> <span class=\"attr\">read-only</span>=<span class=\"string\">&quot;true&quot;</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;*&quot;</span> <span class=\"attr\">propagation</span>=<span class=\"string\">&quot;REQUIRED&quot;</span> <span class=\"attr\">read-only</span>=<span class=\"string\">&quot;true&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tx:attributes</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tx:advice</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">aop:config</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">aop:advisor</span> <span class=\"attr\">advice-ref</span>=<span class=\"string\">&quot;txAdvice&quot;</span> <span class=\"attr\">pointcut</span>=<span class=\"string\">&quot;execution(* com.littleboy.service..*.*(..))&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">aop:config</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>没啥可说的, 配置了事务, 并使用aop将事务切入到service中, 可以看看数据库方面的书来补充一下事务方面的知识。</p>\n<br>\n\n<h2 id=\"web-xml\"><a href=\"#web-xml\" class=\"headerlink\" title=\"web.xml\"></a>web.xml</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">web-app</span> <span class=\"meta-keyword\">PUBLIC</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-string\">&quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-string\">&quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot;</span> &gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">web-app</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">id</span>=<span class=\"string\">&quot;WebApp_ID&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">version</span>=<span class=\"string\">&quot;3.0&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://java.sun.com/xml/ns/javaee&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://java.sun.com/xml/ns/javaee</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">        http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">display-name</span>&gt;</span>manager<span class=\"tag\">&lt;/<span class=\"name\">display-name</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 加载 spring 容器 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context-param</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>contextConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>classpath:spring/application*.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">context-param</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">listener</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class=\"tag\">&lt;/<span class=\"name\">listener-class</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">listener</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>配置了Spring的监听器, 加载Spring容器</p>\n<br>\n\n<p>下一篇讲web工程的配置。</p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"数据库配置\"><a href=\"#数据库配置\" class=\"headerlink\" title=\"数据库配置\"></a>数据库配置</h1><p>如果把配置写到xml配置文件中会显得很乱, 而且不好改, 如果有多个数据库的话, 会非常不方便, 那么可以单独写到一个配置文件中, 这样如果有多个数据库配置的话, 就可以直接切换配置文件了。</p>","more":"<br>\n\n<p>下面是我的数据库配置文件(db.properties):</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">jdbc.driver</span>=<span class=\"string\">com.mysql.cj.jdbc.Driver</span></span><br><span class=\"line\"><span class=\"meta\">jdbc.url</span>=<span class=\"string\">jdbc:mysql://localhost:3306/taotao?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=UTC</span></span><br><span class=\"line\"><span class=\"meta\">jdbc.username</span>=<span class=\"string\">littleboy</span></span><br><span class=\"line\"><span class=\"meta\">jdbc.password</span>=<span class=\"string\">970711dhz</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">jdbc.pool.init</span>=<span class=\"string\">1</span></span><br><span class=\"line\"><span class=\"meta\">jdbc.pool.minIdle</span>=<span class=\"string\">3</span></span><br><span class=\"line\"><span class=\"meta\">jdbc.pool.maxActive</span>=<span class=\"string\">20</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">web.view.prefix</span>=<span class=\"string\">/WEB-INF/views/</span></span><br><span class=\"line\"><span class=\"meta\">web.view.suffix</span>=<span class=\"string\">.html</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h1 id=\"Spring-配置\"><a href=\"#Spring-配置\" class=\"headerlink\" title=\"Spring 配置\"></a>Spring 配置</h1><p>Spring 配置主要分为三个, </p>\n<ol>\n<li>dao层配置, 也就是数据库配置</li>\n<li>service层配置</li>\n<li>事务配置</li>\n</ol>\n<br>\n\n<h2 id=\"dao层配置\"><a href=\"#dao层配置\" class=\"headerlink\" title=\"dao层配置\"></a>dao层配置</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:context</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 加载配置文件 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:property-placeholder</span> <span class=\"attr\">location</span>=<span class=\"string\">&quot;classpath:conf/db.properties&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 配置数据库连接池 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;dataSource&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> <span class=\"attr\">destroy-method</span>=<span class=\"string\">&quot;close&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;url&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;jdbc.url&#125;&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;username&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;jdbc.username&#125;&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;jdbc.password&#125;&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;driverClassName&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;jdbc.driver&#125;&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 最大连接数 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;maxActive&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;jdbc.pool.maxActive&#125;&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 最小空闲连接数 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;minIdle&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;jdbc.pool.minIdle&#125;&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- mybatis 的sqlSessionFactory, 配置了mybatis的配置文件和mapper.xml文件 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sqlSessionFactory&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;dataSource&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;configLocation&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;classpath:mybatis/sqlMapConfig.xml&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;mapperLocations&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;classpath*:mapper/*.xml&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- mapper 扫描器 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;basePackage&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;com.littleboy.dao&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这里用的数据库连接池是阿里开发的druid, 可自行百度</p>\n<p>这里有一个Mapper扫描器和配置mybaits的东西, 这里涉及到了mybatis的自动生成实体类和Mapper, <a href=\"/my_project/shopping_mall/taps/shopping-mall-developNote-mybatis-automatic-generation.html\">这篇讲到了这个。</a></p>\n<br>\n\n<h2 id=\"service-层配置\"><a href=\"#service-层配置\" class=\"headerlink\" title=\"service 层配置\"></a>service 层配置</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:context</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:dubbo</span>=<span class=\"string\">&quot;http://code.alibabatech.com/schema/dubbo&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">        http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 扫描service --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">&quot;com.littleboy.service.**&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 使用dubbo发布服务 --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 提供方应用信息, 用于计算依赖关系 --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 服务的工程名 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dubbo:application</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;manager&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 注册中心 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dubbo:registry</span> <span class=\"attr\">protocol</span>=<span class=\"string\">&quot;zookeeper&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                    <span class=\"attr\">address</span>=<span class=\"string\">&quot;127.0.0.1:2182&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 用dubbo协议在20080端口暴露服务 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dubbo:protocol</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;dubbo&quot;</span> <span class=\"attr\">port</span>=<span class=\"string\">&quot;20080&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 声明需要暴露的服务接口 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dubbo:service</span> <span class=\"attr\">interface</span>=<span class=\"string\">&quot;com.littleboy.service.ItemService&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;itemServiceImpl&quot;</span> <span class=\"attr\">timeout</span>=<span class=\"string\">&quot;600000&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dubbo:service</span> <span class=\"attr\">interface</span>=<span class=\"string\">&quot;com.littleboy.service.ItemCatService&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;itemCatServiceImpl&quot;</span> <span class=\"attr\">timeout</span>=<span class=\"string\">&quot;600000&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这里除了必要的自动扫描之外, 还有dubbo的配置, 首先声明了服务的工程名, 接着是配置了注册中心的地址, 这里的地址是你的zookeeper的地址。</p>\n<p>最后配置了dubbo的端口和服务接口</p>\n<br>\n\n<h2 id=\"translation-配置\"><a href=\"#translation-配置\" class=\"headerlink\" title=\"translation 配置\"></a>translation 配置</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:tx</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:aop</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">       http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">        http://www.springframework.org/schema/tx</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">        http://www.springframework.org/schema/tx/spring-tx-4.0.xsd</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">        http://www.springframework.org/schema/aop</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">        http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- (事务管理)transaction manager, use JtaTransactionManager for global tx --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;transactionManager&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;dataSource&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 配置事务通知属性 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tx:advice</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;txAdvice&quot;</span> <span class=\"attr\">transaction-manager</span>=<span class=\"string\">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 定义事务传播属性 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tx:attributes</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;insert*&quot;</span> <span class=\"attr\">propagation</span>=<span class=\"string\">&quot;REQUIRED&quot;</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;update*&quot;</span> <span class=\"attr\">propagation</span>=<span class=\"string\">&quot;REQUIRED&quot;</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;edit*&quot;</span> <span class=\"attr\">propagation</span>=<span class=\"string\">&quot;REQUIRED&quot;</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;save*&quot;</span> <span class=\"attr\">propagation</span>=<span class=\"string\">&quot;REQUIRED&quot;</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;add*&quot;</span> <span class=\"attr\">propagation</span>=<span class=\"string\">&quot;REQUIRED&quot;</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;new*&quot;</span> <span class=\"attr\">propagation</span>=<span class=\"string\">&quot;REQUIRED&quot;</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;set*&quot;</span> <span class=\"attr\">propagation</span>=<span class=\"string\">&quot;REQUIRED&quot;</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;remove*&quot;</span> <span class=\"attr\">propagation</span>=<span class=\"string\">&quot;REQUIRED&quot;</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;delete*&quot;</span> <span class=\"attr\">propagation</span>=<span class=\"string\">&quot;REQUIRED&quot;</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;change*&quot;</span> <span class=\"attr\">propagation</span>=<span class=\"string\">&quot;REQUIRED&quot;</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;get*&quot;</span> <span class=\"attr\">propagation</span>=<span class=\"string\">&quot;REQUIRED&quot;</span> <span class=\"attr\">read-only</span>=<span class=\"string\">&quot;true&quot;</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;find*&quot;</span> <span class=\"attr\">propagation</span>=<span class=\"string\">&quot;REQUIRED&quot;</span> <span class=\"attr\">read-only</span>=<span class=\"string\">&quot;true&quot;</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;load*&quot;</span> <span class=\"attr\">propagation</span>=<span class=\"string\">&quot;REQUIRED&quot;</span> <span class=\"attr\">read-only</span>=<span class=\"string\">&quot;true&quot;</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;*&quot;</span> <span class=\"attr\">propagation</span>=<span class=\"string\">&quot;REQUIRED&quot;</span> <span class=\"attr\">read-only</span>=<span class=\"string\">&quot;true&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tx:attributes</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tx:advice</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">aop:config</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">aop:advisor</span> <span class=\"attr\">advice-ref</span>=<span class=\"string\">&quot;txAdvice&quot;</span> <span class=\"attr\">pointcut</span>=<span class=\"string\">&quot;execution(* com.littleboy.service..*.*(..))&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">aop:config</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>没啥可说的, 配置了事务, 并使用aop将事务切入到service中, 可以看看数据库方面的书来补充一下事务方面的知识。</p>\n<br>\n\n<h2 id=\"web-xml\"><a href=\"#web-xml\" class=\"headerlink\" title=\"web.xml\"></a>web.xml</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">web-app</span> <span class=\"meta-keyword\">PUBLIC</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-string\">&quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-string\">&quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot;</span> &gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">web-app</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">id</span>=<span class=\"string\">&quot;WebApp_ID&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">version</span>=<span class=\"string\">&quot;3.0&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://java.sun.com/xml/ns/javaee&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://java.sun.com/xml/ns/javaee</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">        http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">display-name</span>&gt;</span>manager<span class=\"tag\">&lt;/<span class=\"name\">display-name</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 加载 spring 容器 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context-param</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>contextConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>classpath:spring/application*.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">context-param</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">listener</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class=\"tag\">&lt;/<span class=\"name\">listener-class</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">listener</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>配置了Spring的监听器, 加载Spring容器</p>\n<br>\n\n<p>下一篇讲web工程的配置。</p>"},{"title":"商城开发笔记 -- 搭建工程","date":"2018-11-17T07:10:41.000Z","_content":"\n# 项目说明\n\n## 简介\n\n本项目用 intellij idea 进行开发, Maven管理项目依赖, 技术栈是传统的SSM (Spring, SpringMVC, Mybatis)框架, 前台使用vue\n\n<!--more-->\n\n<br>\n\n## 框架\n\n本项目包含了八个工程, 分别是:\n\n* parent\n\n  这个工程为所有工程的父工程\n\n  * common\n\n    用来存放所有公共方法的工程\n\n  * web\n\n    存放所有controller的工程\n\n  * manager\n\n    是下面所有工程的父工程\n\n    * pojo\n\n      存放实体类的工程\n\n    * dao\n\n      存放对数据库进行操作的工程\n\n    * interface\n\n      服务接口层\n\n    * service\n\n      服务实现类层\n\nOK, 大概介绍了一下这个项目, 那么, 现在就开始动手搭建起来吧!\n\n<br>\n\n## 准备工作\n\n[dubbo](http://dubbo.apache.org/zh-cn/docs/user/preface/background.html)\n\n首先下载[intellij idea](http://www.jetbrains.com/idea/), 选择IU版, 下载安装激活一条龙\n\n<br>\n\n## 新建项目\n\n打开你的idea, `File -> New -> project -> empty project`, 填写你的项目名称和路径\n\n![选择模板](/images/my-project/shopping-mall/idea-create-project0.png)\n\n![填写你的项目名](/images/my-project/shopping-mall/idea-create-project1.png)\n\n现在你的项目大概长这个样子\n\n![项目文件结构](/images/my-project/shopping-mall/idea-create-project2.png)\n\n开始往这个项目里面添加工程, 首先先添加父工程\n\n点击`File -> New -> Module -> Maven`, 由于我们的父工程的作用只是管理Maven依赖的版本的, 所以这里我们不勾选 `Create from archetype`\n\n![新建父工程](/images/my-project/shopping-mall/idea-create-project3.png)\n\n点击下一步, 填写你的域名和项目名\n\n![填写父工程的域名和项目名](/images/my-project/shopping-mall/idea-create-project4.png)\n\n点击下一步, 填写项目名和项目所在路径和项目配置文件路径**(iml文件所在路径)**\n\n![选择父工程项目路径](/images/my-project/shopping-mall/idea-create-project5.png)\n\n点击finish, 现在你的项目长这个样子\n\n![父工程的项目文件结构](/images/my-project/shopping-mall/idea-create-project6.png)\n\n前面说了, 因为父工程的作用只是管理Maven依赖版本, 所以, 将 src 文件夹删掉\n\nOK, 现在, 我们继续\n\n下面创建common模块\n\n`File -> New -> Module -> Maven -> Next`, **注意, 这里和之前不一样, 需要你去选择要继承的工程, `add as module to`选择none, parent那里选择刚刚创建的parent**, 把工程名填写好\n\n![选择继承的父工程](/images/my-project/shopping-mall/idea-create-project7.png)\n\n点击下一步, 填写好工程名, 选好路径\n\n![填写项目名选择项目路径](/images/my-project/shopping-mall/idea-create-project8.png)\n\nOK, 现在你的项目不出意外长这个样子\n\n![项目文件结构](/images/my-project/shopping-mall/idea-create-project9.png)\n\n下面按照上面的步骤再创建一个工程, 名字叫manager, 因为manager工程中也不放任何代码, 所以可以将src目录删掉\n\n看看你创建完的项目目录是不是和我的一样?(我这里忘记删掉src了【吐舌】)\n\n![项目文件结构](/images/my-project/shopping-mall/idea-create-project10.png)\n\n如果不一样, 请将你的manager删掉, 并仔细按照上面的步骤重新创建。那么接下来该创建子工程了, 我们第一个要创建的工程是pojo\n\n同样地, 按照上面的步骤依次创建, **请注意,同样的, 到`Maven -> Next`那里, `add as module to`选择Manager, parent那里同样的选择manager**, 把工程名填写好\n\n![选择需要继承的父工程](/images/my-project/shopping-mall/idea-create-project11.png)\n\n那么, 按照上面的步骤, 依次把`dao, interface, service`创建好, 应该是这个样子\n\n![项目文件结构](/images/my-project/shopping-mall/idea-create-project12.png)\n\n还差最后一个工程我们就完成了! 胜利在望!\n\n由于这个工程是一个web工程, 所以在Maven那里可以选择适合的模板, 挑选最后带有webapp字样的模板去创建, 而且这个工程应该是和common, manager同级, 所以`add as module to`同样选择none, parent那里选择parent\n\nOK, 这个是我们这个项目最后的样子!\n\n![最后的项目文件结构](/images/my-project/shopping-mall/idea-create-project13.png)\n\n大功告成! 我们成功的搭建起了一个SOA架构的项目!\n\n<br>\n\n下一篇我们要搞一搞这个项目的其他依赖。","source":"_posts/my_project/shopping_mall/Dependence_and_configuration/Shopping-mall-developNote-setUp-project.md","raw":"---\ntitle: 商城开发笔记 -- 搭建工程\ndate: 2018-11-17 15:10:41\ncategories:\n- 开发笔记\n- 商城\n- 配置篇\ntags:\n- 商城开发\n---\n\n# 项目说明\n\n## 简介\n\n本项目用 intellij idea 进行开发, Maven管理项目依赖, 技术栈是传统的SSM (Spring, SpringMVC, Mybatis)框架, 前台使用vue\n\n<!--more-->\n\n<br>\n\n## 框架\n\n本项目包含了八个工程, 分别是:\n\n* parent\n\n  这个工程为所有工程的父工程\n\n  * common\n\n    用来存放所有公共方法的工程\n\n  * web\n\n    存放所有controller的工程\n\n  * manager\n\n    是下面所有工程的父工程\n\n    * pojo\n\n      存放实体类的工程\n\n    * dao\n\n      存放对数据库进行操作的工程\n\n    * interface\n\n      服务接口层\n\n    * service\n\n      服务实现类层\n\nOK, 大概介绍了一下这个项目, 那么, 现在就开始动手搭建起来吧!\n\n<br>\n\n## 准备工作\n\n[dubbo](http://dubbo.apache.org/zh-cn/docs/user/preface/background.html)\n\n首先下载[intellij idea](http://www.jetbrains.com/idea/), 选择IU版, 下载安装激活一条龙\n\n<br>\n\n## 新建项目\n\n打开你的idea, `File -> New -> project -> empty project`, 填写你的项目名称和路径\n\n![选择模板](/images/my-project/shopping-mall/idea-create-project0.png)\n\n![填写你的项目名](/images/my-project/shopping-mall/idea-create-project1.png)\n\n现在你的项目大概长这个样子\n\n![项目文件结构](/images/my-project/shopping-mall/idea-create-project2.png)\n\n开始往这个项目里面添加工程, 首先先添加父工程\n\n点击`File -> New -> Module -> Maven`, 由于我们的父工程的作用只是管理Maven依赖的版本的, 所以这里我们不勾选 `Create from archetype`\n\n![新建父工程](/images/my-project/shopping-mall/idea-create-project3.png)\n\n点击下一步, 填写你的域名和项目名\n\n![填写父工程的域名和项目名](/images/my-project/shopping-mall/idea-create-project4.png)\n\n点击下一步, 填写项目名和项目所在路径和项目配置文件路径**(iml文件所在路径)**\n\n![选择父工程项目路径](/images/my-project/shopping-mall/idea-create-project5.png)\n\n点击finish, 现在你的项目长这个样子\n\n![父工程的项目文件结构](/images/my-project/shopping-mall/idea-create-project6.png)\n\n前面说了, 因为父工程的作用只是管理Maven依赖版本, 所以, 将 src 文件夹删掉\n\nOK, 现在, 我们继续\n\n下面创建common模块\n\n`File -> New -> Module -> Maven -> Next`, **注意, 这里和之前不一样, 需要你去选择要继承的工程, `add as module to`选择none, parent那里选择刚刚创建的parent**, 把工程名填写好\n\n![选择继承的父工程](/images/my-project/shopping-mall/idea-create-project7.png)\n\n点击下一步, 填写好工程名, 选好路径\n\n![填写项目名选择项目路径](/images/my-project/shopping-mall/idea-create-project8.png)\n\nOK, 现在你的项目不出意外长这个样子\n\n![项目文件结构](/images/my-project/shopping-mall/idea-create-project9.png)\n\n下面按照上面的步骤再创建一个工程, 名字叫manager, 因为manager工程中也不放任何代码, 所以可以将src目录删掉\n\n看看你创建完的项目目录是不是和我的一样?(我这里忘记删掉src了【吐舌】)\n\n![项目文件结构](/images/my-project/shopping-mall/idea-create-project10.png)\n\n如果不一样, 请将你的manager删掉, 并仔细按照上面的步骤重新创建。那么接下来该创建子工程了, 我们第一个要创建的工程是pojo\n\n同样地, 按照上面的步骤依次创建, **请注意,同样的, 到`Maven -> Next`那里, `add as module to`选择Manager, parent那里同样的选择manager**, 把工程名填写好\n\n![选择需要继承的父工程](/images/my-project/shopping-mall/idea-create-project11.png)\n\n那么, 按照上面的步骤, 依次把`dao, interface, service`创建好, 应该是这个样子\n\n![项目文件结构](/images/my-project/shopping-mall/idea-create-project12.png)\n\n还差最后一个工程我们就完成了! 胜利在望!\n\n由于这个工程是一个web工程, 所以在Maven那里可以选择适合的模板, 挑选最后带有webapp字样的模板去创建, 而且这个工程应该是和common, manager同级, 所以`add as module to`同样选择none, parent那里选择parent\n\nOK, 这个是我们这个项目最后的样子!\n\n![最后的项目文件结构](/images/my-project/shopping-mall/idea-create-project13.png)\n\n大功告成! 我们成功的搭建起了一个SOA架构的项目!\n\n<br>\n\n下一篇我们要搞一搞这个项目的其他依赖。","slug":"my_project/shopping_mall/Dependence_and_configuration/Shopping-mall-developNote-setUp-project","published":1,"updated":"2021-10-14T08:18:54.375Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8yleju800723vsbhxvebkhf","content":"<h1 id=\"项目说明\"><a href=\"#项目说明\" class=\"headerlink\" title=\"项目说明\"></a>项目说明</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>本项目用 intellij idea 进行开发, Maven管理项目依赖, 技术栈是传统的SSM (Spring, SpringMVC, Mybatis)框架, 前台使用vue</p>\n<span id=\"more\"></span>\n\n<br>\n\n<h2 id=\"框架\"><a href=\"#框架\" class=\"headerlink\" title=\"框架\"></a>框架</h2><p>本项目包含了八个工程, 分别是:</p>\n<ul>\n<li><p>parent</p>\n<p>这个工程为所有工程的父工程</p>\n<ul>\n<li><p>common</p>\n<p>用来存放所有公共方法的工程</p>\n</li>\n<li><p>web</p>\n<p>存放所有controller的工程</p>\n</li>\n<li><p>manager</p>\n<p>是下面所有工程的父工程</p>\n<ul>\n<li><p>pojo</p>\n<p>存放实体类的工程</p>\n</li>\n<li><p>dao</p>\n<p>存放对数据库进行操作的工程</p>\n</li>\n<li><p>interface</p>\n<p>服务接口层</p>\n</li>\n<li><p>service</p>\n<p>服务实现类层</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>OK, 大概介绍了一下这个项目, 那么, 现在就开始动手搭建起来吧!</p>\n<br>\n\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><p><a href=\"http://dubbo.apache.org/zh-cn/docs/user/preface/background.html\">dubbo</a></p>\n<p>首先下载<a href=\"http://www.jetbrains.com/idea/\">intellij idea</a>, 选择IU版, 下载安装激活一条龙</p>\n<br>\n\n<h2 id=\"新建项目\"><a href=\"#新建项目\" class=\"headerlink\" title=\"新建项目\"></a>新建项目</h2><p>打开你的idea, <code>File -&gt; New -&gt; project -&gt; empty project</code>, 填写你的项目名称和路径</p>\n<p><img src=\"/images/my-project/shopping-mall/idea-create-project0.png\" alt=\"选择模板\"></p>\n<p><img src=\"/images/my-project/shopping-mall/idea-create-project1.png\" alt=\"填写你的项目名\"></p>\n<p>现在你的项目大概长这个样子</p>\n<p><img src=\"/images/my-project/shopping-mall/idea-create-project2.png\" alt=\"项目文件结构\"></p>\n<p>开始往这个项目里面添加工程, 首先先添加父工程</p>\n<p>点击<code>File -&gt; New -&gt; Module -&gt; Maven</code>, 由于我们的父工程的作用只是管理Maven依赖的版本的, 所以这里我们不勾选 <code>Create from archetype</code></p>\n<p><img src=\"/images/my-project/shopping-mall/idea-create-project3.png\" alt=\"新建父工程\"></p>\n<p>点击下一步, 填写你的域名和项目名</p>\n<p><img src=\"/images/my-project/shopping-mall/idea-create-project4.png\" alt=\"填写父工程的域名和项目名\"></p>\n<p>点击下一步, 填写项目名和项目所在路径和项目配置文件路径**(iml文件所在路径)**</p>\n<p><img src=\"/images/my-project/shopping-mall/idea-create-project5.png\" alt=\"选择父工程项目路径\"></p>\n<p>点击finish, 现在你的项目长这个样子</p>\n<p><img src=\"/images/my-project/shopping-mall/idea-create-project6.png\" alt=\"父工程的项目文件结构\"></p>\n<p>前面说了, 因为父工程的作用只是管理Maven依赖版本, 所以, 将 src 文件夹删掉</p>\n<p>OK, 现在, 我们继续</p>\n<p>下面创建common模块</p>\n<p><code>File -&gt; New -&gt; Module -&gt; Maven -&gt; Next</code>, <strong>注意, 这里和之前不一样, 需要你去选择要继承的工程, <code>add as module to</code>选择none, parent那里选择刚刚创建的parent</strong>, 把工程名填写好</p>\n<p><img src=\"/images/my-project/shopping-mall/idea-create-project7.png\" alt=\"选择继承的父工程\"></p>\n<p>点击下一步, 填写好工程名, 选好路径</p>\n<p><img src=\"/images/my-project/shopping-mall/idea-create-project8.png\" alt=\"填写项目名选择项目路径\"></p>\n<p>OK, 现在你的项目不出意外长这个样子</p>\n<p><img src=\"/images/my-project/shopping-mall/idea-create-project9.png\" alt=\"项目文件结构\"></p>\n<p>下面按照上面的步骤再创建一个工程, 名字叫manager, 因为manager工程中也不放任何代码, 所以可以将src目录删掉</p>\n<p>看看你创建完的项目目录是不是和我的一样?(我这里忘记删掉src了【吐舌】)</p>\n<p><img src=\"/images/my-project/shopping-mall/idea-create-project10.png\" alt=\"项目文件结构\"></p>\n<p>如果不一样, 请将你的manager删掉, 并仔细按照上面的步骤重新创建。那么接下来该创建子工程了, 我们第一个要创建的工程是pojo</p>\n<p>同样地, 按照上面的步骤依次创建, <strong>请注意,同样的, 到<code>Maven -&gt; Next</code>那里, <code>add as module to</code>选择Manager, parent那里同样的选择manager</strong>, 把工程名填写好</p>\n<p><img src=\"/images/my-project/shopping-mall/idea-create-project11.png\" alt=\"选择需要继承的父工程\"></p>\n<p>那么, 按照上面的步骤, 依次把<code>dao, interface, service</code>创建好, 应该是这个样子</p>\n<p><img src=\"/images/my-project/shopping-mall/idea-create-project12.png\" alt=\"项目文件结构\"></p>\n<p>还差最后一个工程我们就完成了! 胜利在望!</p>\n<p>由于这个工程是一个web工程, 所以在Maven那里可以选择适合的模板, 挑选最后带有webapp字样的模板去创建, 而且这个工程应该是和common, manager同级, 所以<code>add as module to</code>同样选择none, parent那里选择parent</p>\n<p>OK, 这个是我们这个项目最后的样子!</p>\n<p><img src=\"/images/my-project/shopping-mall/idea-create-project13.png\" alt=\"最后的项目文件结构\"></p>\n<p>大功告成! 我们成功的搭建起了一个SOA架构的项目!</p>\n<br>\n\n<p>下一篇我们要搞一搞这个项目的其他依赖。</p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"项目说明\"><a href=\"#项目说明\" class=\"headerlink\" title=\"项目说明\"></a>项目说明</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>本项目用 intellij idea 进行开发, Maven管理项目依赖, 技术栈是传统的SSM (Spring, SpringMVC, Mybatis)框架, 前台使用vue</p>","more":"<br>\n\n<h2 id=\"框架\"><a href=\"#框架\" class=\"headerlink\" title=\"框架\"></a>框架</h2><p>本项目包含了八个工程, 分别是:</p>\n<ul>\n<li><p>parent</p>\n<p>这个工程为所有工程的父工程</p>\n<ul>\n<li><p>common</p>\n<p>用来存放所有公共方法的工程</p>\n</li>\n<li><p>web</p>\n<p>存放所有controller的工程</p>\n</li>\n<li><p>manager</p>\n<p>是下面所有工程的父工程</p>\n<ul>\n<li><p>pojo</p>\n<p>存放实体类的工程</p>\n</li>\n<li><p>dao</p>\n<p>存放对数据库进行操作的工程</p>\n</li>\n<li><p>interface</p>\n<p>服务接口层</p>\n</li>\n<li><p>service</p>\n<p>服务实现类层</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>OK, 大概介绍了一下这个项目, 那么, 现在就开始动手搭建起来吧!</p>\n<br>\n\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><p><a href=\"http://dubbo.apache.org/zh-cn/docs/user/preface/background.html\">dubbo</a></p>\n<p>首先下载<a href=\"http://www.jetbrains.com/idea/\">intellij idea</a>, 选择IU版, 下载安装激活一条龙</p>\n<br>\n\n<h2 id=\"新建项目\"><a href=\"#新建项目\" class=\"headerlink\" title=\"新建项目\"></a>新建项目</h2><p>打开你的idea, <code>File -&gt; New -&gt; project -&gt; empty project</code>, 填写你的项目名称和路径</p>\n<p><img src=\"/images/my-project/shopping-mall/idea-create-project0.png\" alt=\"选择模板\"></p>\n<p><img src=\"/images/my-project/shopping-mall/idea-create-project1.png\" alt=\"填写你的项目名\"></p>\n<p>现在你的项目大概长这个样子</p>\n<p><img src=\"/images/my-project/shopping-mall/idea-create-project2.png\" alt=\"项目文件结构\"></p>\n<p>开始往这个项目里面添加工程, 首先先添加父工程</p>\n<p>点击<code>File -&gt; New -&gt; Module -&gt; Maven</code>, 由于我们的父工程的作用只是管理Maven依赖的版本的, 所以这里我们不勾选 <code>Create from archetype</code></p>\n<p><img src=\"/images/my-project/shopping-mall/idea-create-project3.png\" alt=\"新建父工程\"></p>\n<p>点击下一步, 填写你的域名和项目名</p>\n<p><img src=\"/images/my-project/shopping-mall/idea-create-project4.png\" alt=\"填写父工程的域名和项目名\"></p>\n<p>点击下一步, 填写项目名和项目所在路径和项目配置文件路径**(iml文件所在路径)**</p>\n<p><img src=\"/images/my-project/shopping-mall/idea-create-project5.png\" alt=\"选择父工程项目路径\"></p>\n<p>点击finish, 现在你的项目长这个样子</p>\n<p><img src=\"/images/my-project/shopping-mall/idea-create-project6.png\" alt=\"父工程的项目文件结构\"></p>\n<p>前面说了, 因为父工程的作用只是管理Maven依赖版本, 所以, 将 src 文件夹删掉</p>\n<p>OK, 现在, 我们继续</p>\n<p>下面创建common模块</p>\n<p><code>File -&gt; New -&gt; Module -&gt; Maven -&gt; Next</code>, <strong>注意, 这里和之前不一样, 需要你去选择要继承的工程, <code>add as module to</code>选择none, parent那里选择刚刚创建的parent</strong>, 把工程名填写好</p>\n<p><img src=\"/images/my-project/shopping-mall/idea-create-project7.png\" alt=\"选择继承的父工程\"></p>\n<p>点击下一步, 填写好工程名, 选好路径</p>\n<p><img src=\"/images/my-project/shopping-mall/idea-create-project8.png\" alt=\"填写项目名选择项目路径\"></p>\n<p>OK, 现在你的项目不出意外长这个样子</p>\n<p><img src=\"/images/my-project/shopping-mall/idea-create-project9.png\" alt=\"项目文件结构\"></p>\n<p>下面按照上面的步骤再创建一个工程, 名字叫manager, 因为manager工程中也不放任何代码, 所以可以将src目录删掉</p>\n<p>看看你创建完的项目目录是不是和我的一样?(我这里忘记删掉src了【吐舌】)</p>\n<p><img src=\"/images/my-project/shopping-mall/idea-create-project10.png\" alt=\"项目文件结构\"></p>\n<p>如果不一样, 请将你的manager删掉, 并仔细按照上面的步骤重新创建。那么接下来该创建子工程了, 我们第一个要创建的工程是pojo</p>\n<p>同样地, 按照上面的步骤依次创建, <strong>请注意,同样的, 到<code>Maven -&gt; Next</code>那里, <code>add as module to</code>选择Manager, parent那里同样的选择manager</strong>, 把工程名填写好</p>\n<p><img src=\"/images/my-project/shopping-mall/idea-create-project11.png\" alt=\"选择需要继承的父工程\"></p>\n<p>那么, 按照上面的步骤, 依次把<code>dao, interface, service</code>创建好, 应该是这个样子</p>\n<p><img src=\"/images/my-project/shopping-mall/idea-create-project12.png\" alt=\"项目文件结构\"></p>\n<p>还差最后一个工程我们就完成了! 胜利在望!</p>\n<p>由于这个工程是一个web工程, 所以在Maven那里可以选择适合的模板, 挑选最后带有webapp字样的模板去创建, 而且这个工程应该是和common, manager同级, 所以<code>add as module to</code>同样选择none, parent那里选择parent</p>\n<p>OK, 这个是我们这个项目最后的样子!</p>\n<p><img src=\"/images/my-project/shopping-mall/idea-create-project13.png\" alt=\"最后的项目文件结构\"></p>\n<p>大功告成! 我们成功的搭建起了一个SOA架构的项目!</p>\n<br>\n\n<p>下一篇我们要搞一搞这个项目的其他依赖。</p>"},{"title":"商城开发笔记-vue环境搭建与配置","date":"2018-12-06T15:34:14.000Z","_content":"\n# Vue简介\n\n其实不用我多说, 人家[官网](https://cn.vuejs.org/)写的比我写的明白, 渐进式JavaScript框架。\n\n那么什么叫渐进式呢? 说白了, 就是用什么功能, 安什么插件, 用哪个就安哪个, 渐进式么, 哈哈。\n\n那么为什么用Vue作为我们这个项目的前端框架呢? 因为开发方便呗, 哪个方便我们就用哪个, 也不扯别的了, 开整!\n<!--more-->\n# Vue 环境搭建\n\n其实呢, vue就是一个js文件, 引入就行了, 但是除此之外还有一个东西叫做Vue-cli, 是用来构建交互式项目的脚手架, 基于webpack, 这个是[官方文档](https://cli.vuejs.org/zh/guide/)。\n\n我们现在要来搭建的就是这个脚手架。\n\n首先要先有node环境, 我相信都走到这一步了, node环境肯定是有的, 而且安装也很简单, 就不多解释了。\n\n之后在我们的web项目中新建一个文件夹用来存储前端的文件, 我还是比较传统的将他们放在了webapp文件夹下。\n\n然后使用\n\n```shell\nnpm install -g vue-cli\n```\n\n来安装vue的脚手架, 最后使用\n\n```shell\nvue init webpack vue_demo\n```\n\n来创建一个基于webpack的vue项目, 这样环境就初步搭建成功了。\n\n# Vue项目介绍与配置\n\n先来看看都有哪些目录:\n\n```\n|-- build 包含构建配置文件\n|-- config 包含项目配置文件\n|-- node_moudles 包含依赖模块\n|-- src 项目源代码\n|-- static 静态资源文件\n|-- |-- .gitkeep 如果有一个空文件夹,但又不希望被git忽略,那么有一个.gitkeep文件,就可以被git进行版本控制\n|-- .babelrc es6 转 es5 (babel的配置文件)\n```\n\n其他的文件或者文件夹有用到在介绍, 先说这么多, 把重点放到配置文件上面。\n\n端口号, eslint的启用等等, 都是在`config --> index.js` 这个文件里面配置, 大家可以自己随便看看。\n\n\nOK, 整个项目的介绍, 依赖以及相关的配置都介绍完了, 接下来我会慢慢的琢磨业务, 并用这些技术来实现, 嗯。\n","source":"_posts/my_project/shopping_mall/Dependence_and_configuration/Shopping-mall-developNote-vue-envionmentAndConfig.md","raw":"---\ntitle: 商城开发笔记-vue环境搭建与配置\ndate: 2018-12-06 23:34:14\ncategories:\n- 开发笔记\n- 商城\n- 配置篇\ntags:\n- 商城开发\n---\n\n# Vue简介\n\n其实不用我多说, 人家[官网](https://cn.vuejs.org/)写的比我写的明白, 渐进式JavaScript框架。\n\n那么什么叫渐进式呢? 说白了, 就是用什么功能, 安什么插件, 用哪个就安哪个, 渐进式么, 哈哈。\n\n那么为什么用Vue作为我们这个项目的前端框架呢? 因为开发方便呗, 哪个方便我们就用哪个, 也不扯别的了, 开整!\n<!--more-->\n# Vue 环境搭建\n\n其实呢, vue就是一个js文件, 引入就行了, 但是除此之外还有一个东西叫做Vue-cli, 是用来构建交互式项目的脚手架, 基于webpack, 这个是[官方文档](https://cli.vuejs.org/zh/guide/)。\n\n我们现在要来搭建的就是这个脚手架。\n\n首先要先有node环境, 我相信都走到这一步了, node环境肯定是有的, 而且安装也很简单, 就不多解释了。\n\n之后在我们的web项目中新建一个文件夹用来存储前端的文件, 我还是比较传统的将他们放在了webapp文件夹下。\n\n然后使用\n\n```shell\nnpm install -g vue-cli\n```\n\n来安装vue的脚手架, 最后使用\n\n```shell\nvue init webpack vue_demo\n```\n\n来创建一个基于webpack的vue项目, 这样环境就初步搭建成功了。\n\n# Vue项目介绍与配置\n\n先来看看都有哪些目录:\n\n```\n|-- build 包含构建配置文件\n|-- config 包含项目配置文件\n|-- node_moudles 包含依赖模块\n|-- src 项目源代码\n|-- static 静态资源文件\n|-- |-- .gitkeep 如果有一个空文件夹,但又不希望被git忽略,那么有一个.gitkeep文件,就可以被git进行版本控制\n|-- .babelrc es6 转 es5 (babel的配置文件)\n```\n\n其他的文件或者文件夹有用到在介绍, 先说这么多, 把重点放到配置文件上面。\n\n端口号, eslint的启用等等, 都是在`config --> index.js` 这个文件里面配置, 大家可以自己随便看看。\n\n\nOK, 整个项目的介绍, 依赖以及相关的配置都介绍完了, 接下来我会慢慢的琢磨业务, 并用这些技术来实现, 嗯。\n","slug":"my_project/shopping_mall/Dependence_and_configuration/Shopping-mall-developNote-vue-envionmentAndConfig","published":1,"updated":"2021-10-14T08:18:54.435Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejub00743vsb8x5i4xho","content":"<h1 id=\"Vue简介\"><a href=\"#Vue简介\" class=\"headerlink\" title=\"Vue简介\"></a>Vue简介</h1><p>其实不用我多说, 人家<a href=\"https://cn.vuejs.org/\">官网</a>写的比我写的明白, 渐进式JavaScript框架。</p>\n<p>那么什么叫渐进式呢? 说白了, 就是用什么功能, 安什么插件, 用哪个就安哪个, 渐进式么, 哈哈。</p>\n<p>那么为什么用Vue作为我们这个项目的前端框架呢? 因为开发方便呗, 哪个方便我们就用哪个, 也不扯别的了, 开整!</p>\n<span id=\"more\"></span>\n<h1 id=\"Vue-环境搭建\"><a href=\"#Vue-环境搭建\" class=\"headerlink\" title=\"Vue 环境搭建\"></a>Vue 环境搭建</h1><p>其实呢, vue就是一个js文件, 引入就行了, 但是除此之外还有一个东西叫做Vue-cli, 是用来构建交互式项目的脚手架, 基于webpack, 这个是<a href=\"https://cli.vuejs.org/zh/guide/\">官方文档</a>。</p>\n<p>我们现在要来搭建的就是这个脚手架。</p>\n<p>首先要先有node环境, 我相信都走到这一步了, node环境肯定是有的, 而且安装也很简单, 就不多解释了。</p>\n<p>之后在我们的web项目中新建一个文件夹用来存储前端的文件, 我还是比较传统的将他们放在了webapp文件夹下。</p>\n<p>然后使用</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g vue-cli</span><br></pre></td></tr></table></figure>\n\n<p>来安装vue的脚手架, 最后使用</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vue init webpack vue_demo</span><br></pre></td></tr></table></figure>\n\n<p>来创建一个基于webpack的vue项目, 这样环境就初步搭建成功了。</p>\n<h1 id=\"Vue项目介绍与配置\"><a href=\"#Vue项目介绍与配置\" class=\"headerlink\" title=\"Vue项目介绍与配置\"></a>Vue项目介绍与配置</h1><p>先来看看都有哪些目录:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|-- build 包含构建配置文件</span><br><span class=\"line\">|-- config 包含项目配置文件</span><br><span class=\"line\">|-- node_moudles 包含依赖模块</span><br><span class=\"line\">|-- src 项目源代码</span><br><span class=\"line\">|-- static 静态资源文件</span><br><span class=\"line\">|-- |-- .gitkeep 如果有一个空文件夹,但又不希望被git忽略,那么有一个.gitkeep文件,就可以被git进行版本控制</span><br><span class=\"line\">|-- .babelrc es6 转 es5 (babel的配置文件)</span><br></pre></td></tr></table></figure>\n\n<p>其他的文件或者文件夹有用到在介绍, 先说这么多, 把重点放到配置文件上面。</p>\n<p>端口号, eslint的启用等等, 都是在<code>config --&gt; index.js</code> 这个文件里面配置, 大家可以自己随便看看。</p>\n<p>OK, 整个项目的介绍, 依赖以及相关的配置都介绍完了, 接下来我会慢慢的琢磨业务, 并用这些技术来实现, 嗯。</p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"Vue简介\"><a href=\"#Vue简介\" class=\"headerlink\" title=\"Vue简介\"></a>Vue简介</h1><p>其实不用我多说, 人家<a href=\"https://cn.vuejs.org/\">官网</a>写的比我写的明白, 渐进式JavaScript框架。</p>\n<p>那么什么叫渐进式呢? 说白了, 就是用什么功能, 安什么插件, 用哪个就安哪个, 渐进式么, 哈哈。</p>\n<p>那么为什么用Vue作为我们这个项目的前端框架呢? 因为开发方便呗, 哪个方便我们就用哪个, 也不扯别的了, 开整!</p>","more":"<h1 id=\"Vue-环境搭建\"><a href=\"#Vue-环境搭建\" class=\"headerlink\" title=\"Vue 环境搭建\"></a>Vue 环境搭建</h1><p>其实呢, vue就是一个js文件, 引入就行了, 但是除此之外还有一个东西叫做Vue-cli, 是用来构建交互式项目的脚手架, 基于webpack, 这个是<a href=\"https://cli.vuejs.org/zh/guide/\">官方文档</a>。</p>\n<p>我们现在要来搭建的就是这个脚手架。</p>\n<p>首先要先有node环境, 我相信都走到这一步了, node环境肯定是有的, 而且安装也很简单, 就不多解释了。</p>\n<p>之后在我们的web项目中新建一个文件夹用来存储前端的文件, 我还是比较传统的将他们放在了webapp文件夹下。</p>\n<p>然后使用</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g vue-cli</span><br></pre></td></tr></table></figure>\n\n<p>来安装vue的脚手架, 最后使用</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vue init webpack vue_demo</span><br></pre></td></tr></table></figure>\n\n<p>来创建一个基于webpack的vue项目, 这样环境就初步搭建成功了。</p>\n<h1 id=\"Vue项目介绍与配置\"><a href=\"#Vue项目介绍与配置\" class=\"headerlink\" title=\"Vue项目介绍与配置\"></a>Vue项目介绍与配置</h1><p>先来看看都有哪些目录:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|-- build 包含构建配置文件</span><br><span class=\"line\">|-- config 包含项目配置文件</span><br><span class=\"line\">|-- node_moudles 包含依赖模块</span><br><span class=\"line\">|-- src 项目源代码</span><br><span class=\"line\">|-- static 静态资源文件</span><br><span class=\"line\">|-- |-- .gitkeep 如果有一个空文件夹,但又不希望被git忽略,那么有一个.gitkeep文件,就可以被git进行版本控制</span><br><span class=\"line\">|-- .babelrc es6 转 es5 (babel的配置文件)</span><br></pre></td></tr></table></figure>\n\n<p>其他的文件或者文件夹有用到在介绍, 先说这么多, 把重点放到配置文件上面。</p>\n<p>端口号, eslint的启用等等, 都是在<code>config --&gt; index.js</code> 这个文件里面配置, 大家可以自己随便看看。</p>\n<p>OK, 整个项目的介绍, 依赖以及相关的配置都介绍完了, 接下来我会慢慢的琢磨业务, 并用这些技术来实现, 嗯。</p>"},{"title":"商城开发/商城开发笔记-web的配置","date":"2018-11-27T15:30:43.000Z","_content":"\n# Spring MVC的配置\n\n主要包括了注解配置, 拦截器配置, 自动扫描配置和最重要的dubbo配置 ~~其实还包括一个静态资源配置, 但是因为咱们的前端使用的是vue, Spring MVC就不用管这里了~~\n\n<!--more-->\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:mvc=\"http://www.springframework.org/schema/mvc\"\n       xmlns:dubbo=\"http://code.alibabatech.com/schema/dubbo\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"\n        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n        http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd\n        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd\n        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd\">\n\n    <mvc:annotation-driven />\n    <mvc:default-servlet-handler />\n    <!-- 相当于注册了DefaultAnnotationHandlerMapping和AnnotationMethodHandlerAdapter两个bean\n    配置一些messageconverter\n    即解决了@Controller注解的使用前提配置。 -->\n    <!-- https://blog.csdn.net/jbgtwang/article/details/7359592 -->\n    <!-- https://scotch.io/@ethanmillar/spring-mvc-component-scan-annotation-config-annotation-driven -->\n\n    <mvc:interceptors>\n        <mvc:interceptor>\n            <mvc:mapping path=\"/**\" />\n            <bean class=\"com.littleboy.interceptor.CommonInterceptor\">\n                <property name=\"excludedUrls\">\n                    <list>\n                        <value>/</value>\n                    </list>\n                </property>\n            </bean>\n        </mvc:interceptor>\n    </mvc:interceptors>\n    <!-- spring + ajax 请求时, 会遇到 403 的解决方案 -->\n    <!-- https://blog.csdn.net/qq_25152183/article/details/53158222 -->\n\n    <context:property-placeholder location=\"classpath:conf/db.properties\" />\n\n    <context:component-scan base-package=\"com.littleboy.controller\" />\n\n    <bean id=\"viewResolver\" class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\">\n        <property name=\"prefix\" value=\"${web.view.prefix}\" />\n        <property name=\"suffix\" value=\"${web.view.suffix}\" />\n    </bean>\n\n    <!-- 静态资源配置 -->\n    <!--<mvc:resources mapping=\"/resources/**\" location=\"shopping_mail_front/static/**\" />-->\n\n    <!-- 声明需要使用的dubbo服务的工程名 -->\n    <dubbo:application name=\"manager\" />\n    <!-- 声明需要使用的dubbo的注册中心地址 -->\n    <dubbo:registry protocol=\"zookeeper\" address=\"127.0.0.1:2182\" />\n    <!-- 声明需要使用的具体服务名 -->\n    <dubbo:reference interface=\"com.littleboy.service.ItemService\" id=\"itemService\" />\n    <dubbo:reference interface=\"com.littleboy.service.ItemCatService\" id=\"itemCatService\" />\n</beans>\n```\n\n我们来仔细的说一说这个配置, 顺便也帮我自己梳理一下Spring MVC的基础。\n\n一上来, 就是两个我们不怎么熟悉的配置\n\n`<mvc:annotation-driven />` `<mvc:default-servlet-handler />`\n\n没关系, 我们来一个一个讲。\n\n<br>\n\n## <mvc:annotaion-driven />\n\n这个其实是简写的一种形式, 通过这种写法能让我们省去很多配置, 它会帮我们自动注册 `DefaultAnnotationHandlerMapping` 和 `AnnotationMethodHandlerAdapter`, 这两个bean是Spring为`@controller`分发请求所必需的。\n\n并提供了数据绑定支持, `@NumberFormatAnnotation` 支持, `@DateTimeFormat` 支持, `@Valid` 支持, 读写xml支持(JAXB), 读写JSON支持(Jackson)\n\n对于Spring的基础, [这篇博客](http://elf8848.iteye.com/blog/875830)讲的很详细, 可以看一看。\n\n<br>\n\n## <mvc:default-servlet-handler />\n\n这个和访问静态资源有关, 访问静态资源有三种方案。\n\n上面算其中一种, 将`/**` url注册到SimpleUrlHandlerMapping的urlMap中, 并把对静态资源的访问转到`org.springframework.web.servlet.resource.DefaultServletHttpRequestHandler`处理并返回, DefaultServletHttpRequestHandler是各个servlet容器默认的servlet。\n\n其他两种分别是:\n\n1. 使用tomcat的defaultServlet来处理静态文件。例子：\n\n   ```xml\n   <servlet-mapping>\n       <servlet-name>default</servlet-name>  \n       <url-pattern>*.jpg</url-pattern>     \n   </servlet-mapping>    \n   <servlet-mapping>\n       <servlet-name>default</servlet-name>    \n       <url-pattern>*.js</url-pattern>    \n   </servlet-mapping>    \n   <servlet-mapping>\n       <servlet-name>default</servlet-name>       \n       <url-pattern>*.css</url-pattern>      \n   </servlet-mapping>\n   ```\n\n   每一种静态资源都需要配置一个Servlet\n\n2. 使用Spring的提供的配置来处理。例子:\n\n   ```xml\n   <mvc:resources mapping=\"/images/**\" location=\"/images/\" />\n   ```\n\n   mapping属性配置了对于静态资源的请求路径, location属性配置了静态资源所在路径。\n\n<br>\n\n## 拦截器\n\n接下来我配置了一个拦截器, 因为当我搭建好项目, 弄好前端, 进行第一次访问时发现报错, 打开f12一看发现了这个:\n\n![Spring+ajax请求被阻塞](/images/Spring+ajax-request-block.png)\n\n我仔细的查了以下, 发现contentType(就是发送请求的文件类型)为三个常用格式以外的格式, 如`application/json` 时, 会先发送一个试探的OPTIONS类型的请求发送给服务端, 这个时候, 修改请求头是没有用的, 因为还没有走到。\n\n这个时候就需要一个拦截器来拦截所有请求, 在所有请求中加上允许跨域的头。\n\n大概是这么写:\n\n```java\n/************\n * 拦截器\n ***********/\npublic class CommonInterceptor implements HandlerInterceptor {\n    private List<String> excludedUrls;\n\n    /**\n     * 在请求处理之前被调用, 该方法会被最先执行, 之后执行controller方法\n     * @param request 请求\n     * @param response 返回\n     * @param handler\n     * @return 请求是否结束, 如果返回值是false, 那么接下来的方法都不会执行\n     * @throws Exception\n     */\n    @Override\n    public boolean preHandle(\n            HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n        // 设置响应头\n        response.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n        response.setHeader(\"Access-Control-Allow-Methods\", \"*\");\n        response.setHeader(\"Access-Control-Max-Age\", \"3600\");\n        response.setHeader(\"Access-Control-Allow-Headers\",\n                \"Origin, X-Requested-With, Content-Type, Accept\");\n        return true;\n    }\n\n    /**\n     * 在controller的方法执行之后, DispatcherServlet 进行视图渲染之前被执行\n     * @param request 请求\n     * @param response 返回\n     * @param handler\n     * @param modelAndView 该dto是已经被controller处理之后的了\n     * @throws Exception\n     */\n    @Override\n    public void postHandle(\n            HttpServletRequest request, HttpServletResponse response, Object handler,\n            @Nullable ModelAndView modelAndView) throws Exception {\n    }\n\n    /**\n     * 在DispatcherServlet进行了视图渲染之后执行的方法, 主要用于资源清理\n     * @param request\n     * @param response\n     * @param handler\n     * @param ex\n     * @throws Exception\n     */\n    @Override\n    public void afterCompletion(\n            HttpServletRequest request, HttpServletResponse response, Object handler, @Nullable Exception ex) throws\n            Exception {\n    }\n\n    public List<String> getExcludedUrls() {\n        return excludedUrls;\n    }\n\n    public void setExcludedUrls(List<String> excludedUrls) {\n        this.excludedUrls = excludedUrls;\n    }\n}\n```\n\n这样浏览器会发送的两个请求就都会成功了。\n\n接下来配置了一个配置文件, 视图解析器。\n\n<br>\n\n# dubbo配置\n\n在service工程中我们接触过一次, 只不过那一次是声明服务, 而这一次是接收服务。\n\n同样也需要声明dubbo服务的工程名以及注册中心地址~~(也就是zookeeper的地址)~~, 然后就是需要使用的服务id和接口了。\n\n<br>\n\n# mybatis配置\n\n其实mybatis的配置文件没有什么东西, 但是, 这个配置文件得有, 所以还是得写一下。\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE configuration\n        PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n<configuration>\n    <!-- 别名 -->\n    <typeAliases>\n        <package name=\"com.littleboy.pojo\"/>\n    </typeAliases>\n</configuration>\n```\n\n<br>\n\n# web配置\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE web-app PUBLIC\n        \"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN\"\n        \"http://java.sun.com/dtd/web-app_2_3.dtd\" >\n<web-app\n        id=\"WebApp_ID\"\n        version=\"3.0\"\n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xmlns=\"http://java.sun.com/xml/ns/javaee\"\n        xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\">\n\n    <display-name>web</display-name>\n    <welcome-file-list>\n        <welcome-file>helloWorld.html</welcome-file>\n    </welcome-file-list>\n\n    <context-param>\n        <param-name>contextConfigLocation</param-name>\n        <param-value>classpath:spring/spring-mvc.xml</param-value>\n    </context-param>\n\n    <listener>\n        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\n    </listener>\n\n    <!-- post 编码问题 -->\n    <filter>\n        <filter-name>CharacterEncodingFilter</filter-name>\n        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>\n        <init-param>\n            <param-name>encoding</param-name>\n            <param-value>utf-8</param-value>\n        </init-param>\n    </filter>\n\n    <filter-mapping>\n        <filter-name>CharacterEncodingFilter</filter-name>\n        <url-pattern>/*</url-pattern>\n    </filter-mapping>\n    <!-- 编码结束 -->\n\n    <servlet>\n        <servlet-name>manager</servlet-name>\n        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n        <init-param>\n            <param-name>contextConfigLocation</param-name>\n            <param-value>classpath:spring/spring-mvc.xml</param-value>\n        </init-param>\n    </servlet>\n\n    <!-- 不包括jsp -->\n    <servlet-mapping>\n        <servlet-name>manager</servlet-name>\n        <url-pattern>/</url-pattern>\n    </servlet-mapping>\n</web-app>\n```\n\n随便看看就行了, 没什么难的, 首先加载了Spring配置, 配置了SpringMVC的监听器和过滤器, 设置了Spring的DispatcherServlet, 需要注意, 访问的如果是jsp的话, 是不会被DispatcherServlet处理的。\n\n<br>\n\nok, 后端配置总算是讲完了, 接下来该聊一聊前端了。","source":"_posts/my_project/shopping_mall/Dependence_and_configuration/Shopping-mall-developNote-web-config.md","raw":"---\ntitle: 商城开发/商城开发笔记-web的配置\ndate: 2018-11-27 23:30:43\ncategories:\n- 开发笔记\n- 商城\n- 配置篇\ntags:\n- 商城开发\n---\n\n# Spring MVC的配置\n\n主要包括了注解配置, 拦截器配置, 自动扫描配置和最重要的dubbo配置 ~~其实还包括一个静态资源配置, 但是因为咱们的前端使用的是vue, Spring MVC就不用管这里了~~\n\n<!--more-->\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:mvc=\"http://www.springframework.org/schema/mvc\"\n       xmlns:dubbo=\"http://code.alibabatech.com/schema/dubbo\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"\n        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n        http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd\n        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd\n        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd\">\n\n    <mvc:annotation-driven />\n    <mvc:default-servlet-handler />\n    <!-- 相当于注册了DefaultAnnotationHandlerMapping和AnnotationMethodHandlerAdapter两个bean\n    配置一些messageconverter\n    即解决了@Controller注解的使用前提配置。 -->\n    <!-- https://blog.csdn.net/jbgtwang/article/details/7359592 -->\n    <!-- https://scotch.io/@ethanmillar/spring-mvc-component-scan-annotation-config-annotation-driven -->\n\n    <mvc:interceptors>\n        <mvc:interceptor>\n            <mvc:mapping path=\"/**\" />\n            <bean class=\"com.littleboy.interceptor.CommonInterceptor\">\n                <property name=\"excludedUrls\">\n                    <list>\n                        <value>/</value>\n                    </list>\n                </property>\n            </bean>\n        </mvc:interceptor>\n    </mvc:interceptors>\n    <!-- spring + ajax 请求时, 会遇到 403 的解决方案 -->\n    <!-- https://blog.csdn.net/qq_25152183/article/details/53158222 -->\n\n    <context:property-placeholder location=\"classpath:conf/db.properties\" />\n\n    <context:component-scan base-package=\"com.littleboy.controller\" />\n\n    <bean id=\"viewResolver\" class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\">\n        <property name=\"prefix\" value=\"${web.view.prefix}\" />\n        <property name=\"suffix\" value=\"${web.view.suffix}\" />\n    </bean>\n\n    <!-- 静态资源配置 -->\n    <!--<mvc:resources mapping=\"/resources/**\" location=\"shopping_mail_front/static/**\" />-->\n\n    <!-- 声明需要使用的dubbo服务的工程名 -->\n    <dubbo:application name=\"manager\" />\n    <!-- 声明需要使用的dubbo的注册中心地址 -->\n    <dubbo:registry protocol=\"zookeeper\" address=\"127.0.0.1:2182\" />\n    <!-- 声明需要使用的具体服务名 -->\n    <dubbo:reference interface=\"com.littleboy.service.ItemService\" id=\"itemService\" />\n    <dubbo:reference interface=\"com.littleboy.service.ItemCatService\" id=\"itemCatService\" />\n</beans>\n```\n\n我们来仔细的说一说这个配置, 顺便也帮我自己梳理一下Spring MVC的基础。\n\n一上来, 就是两个我们不怎么熟悉的配置\n\n`<mvc:annotation-driven />` `<mvc:default-servlet-handler />`\n\n没关系, 我们来一个一个讲。\n\n<br>\n\n## <mvc:annotaion-driven />\n\n这个其实是简写的一种形式, 通过这种写法能让我们省去很多配置, 它会帮我们自动注册 `DefaultAnnotationHandlerMapping` 和 `AnnotationMethodHandlerAdapter`, 这两个bean是Spring为`@controller`分发请求所必需的。\n\n并提供了数据绑定支持, `@NumberFormatAnnotation` 支持, `@DateTimeFormat` 支持, `@Valid` 支持, 读写xml支持(JAXB), 读写JSON支持(Jackson)\n\n对于Spring的基础, [这篇博客](http://elf8848.iteye.com/blog/875830)讲的很详细, 可以看一看。\n\n<br>\n\n## <mvc:default-servlet-handler />\n\n这个和访问静态资源有关, 访问静态资源有三种方案。\n\n上面算其中一种, 将`/**` url注册到SimpleUrlHandlerMapping的urlMap中, 并把对静态资源的访问转到`org.springframework.web.servlet.resource.DefaultServletHttpRequestHandler`处理并返回, DefaultServletHttpRequestHandler是各个servlet容器默认的servlet。\n\n其他两种分别是:\n\n1. 使用tomcat的defaultServlet来处理静态文件。例子：\n\n   ```xml\n   <servlet-mapping>\n       <servlet-name>default</servlet-name>  \n       <url-pattern>*.jpg</url-pattern>     \n   </servlet-mapping>    \n   <servlet-mapping>\n       <servlet-name>default</servlet-name>    \n       <url-pattern>*.js</url-pattern>    \n   </servlet-mapping>    \n   <servlet-mapping>\n       <servlet-name>default</servlet-name>       \n       <url-pattern>*.css</url-pattern>      \n   </servlet-mapping>\n   ```\n\n   每一种静态资源都需要配置一个Servlet\n\n2. 使用Spring的提供的配置来处理。例子:\n\n   ```xml\n   <mvc:resources mapping=\"/images/**\" location=\"/images/\" />\n   ```\n\n   mapping属性配置了对于静态资源的请求路径, location属性配置了静态资源所在路径。\n\n<br>\n\n## 拦截器\n\n接下来我配置了一个拦截器, 因为当我搭建好项目, 弄好前端, 进行第一次访问时发现报错, 打开f12一看发现了这个:\n\n![Spring+ajax请求被阻塞](/images/Spring+ajax-request-block.png)\n\n我仔细的查了以下, 发现contentType(就是发送请求的文件类型)为三个常用格式以外的格式, 如`application/json` 时, 会先发送一个试探的OPTIONS类型的请求发送给服务端, 这个时候, 修改请求头是没有用的, 因为还没有走到。\n\n这个时候就需要一个拦截器来拦截所有请求, 在所有请求中加上允许跨域的头。\n\n大概是这么写:\n\n```java\n/************\n * 拦截器\n ***********/\npublic class CommonInterceptor implements HandlerInterceptor {\n    private List<String> excludedUrls;\n\n    /**\n     * 在请求处理之前被调用, 该方法会被最先执行, 之后执行controller方法\n     * @param request 请求\n     * @param response 返回\n     * @param handler\n     * @return 请求是否结束, 如果返回值是false, 那么接下来的方法都不会执行\n     * @throws Exception\n     */\n    @Override\n    public boolean preHandle(\n            HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n        // 设置响应头\n        response.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n        response.setHeader(\"Access-Control-Allow-Methods\", \"*\");\n        response.setHeader(\"Access-Control-Max-Age\", \"3600\");\n        response.setHeader(\"Access-Control-Allow-Headers\",\n                \"Origin, X-Requested-With, Content-Type, Accept\");\n        return true;\n    }\n\n    /**\n     * 在controller的方法执行之后, DispatcherServlet 进行视图渲染之前被执行\n     * @param request 请求\n     * @param response 返回\n     * @param handler\n     * @param modelAndView 该dto是已经被controller处理之后的了\n     * @throws Exception\n     */\n    @Override\n    public void postHandle(\n            HttpServletRequest request, HttpServletResponse response, Object handler,\n            @Nullable ModelAndView modelAndView) throws Exception {\n    }\n\n    /**\n     * 在DispatcherServlet进行了视图渲染之后执行的方法, 主要用于资源清理\n     * @param request\n     * @param response\n     * @param handler\n     * @param ex\n     * @throws Exception\n     */\n    @Override\n    public void afterCompletion(\n            HttpServletRequest request, HttpServletResponse response, Object handler, @Nullable Exception ex) throws\n            Exception {\n    }\n\n    public List<String> getExcludedUrls() {\n        return excludedUrls;\n    }\n\n    public void setExcludedUrls(List<String> excludedUrls) {\n        this.excludedUrls = excludedUrls;\n    }\n}\n```\n\n这样浏览器会发送的两个请求就都会成功了。\n\n接下来配置了一个配置文件, 视图解析器。\n\n<br>\n\n# dubbo配置\n\n在service工程中我们接触过一次, 只不过那一次是声明服务, 而这一次是接收服务。\n\n同样也需要声明dubbo服务的工程名以及注册中心地址~~(也就是zookeeper的地址)~~, 然后就是需要使用的服务id和接口了。\n\n<br>\n\n# mybatis配置\n\n其实mybatis的配置文件没有什么东西, 但是, 这个配置文件得有, 所以还是得写一下。\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE configuration\n        PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n<configuration>\n    <!-- 别名 -->\n    <typeAliases>\n        <package name=\"com.littleboy.pojo\"/>\n    </typeAliases>\n</configuration>\n```\n\n<br>\n\n# web配置\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE web-app PUBLIC\n        \"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN\"\n        \"http://java.sun.com/dtd/web-app_2_3.dtd\" >\n<web-app\n        id=\"WebApp_ID\"\n        version=\"3.0\"\n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xmlns=\"http://java.sun.com/xml/ns/javaee\"\n        xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\">\n\n    <display-name>web</display-name>\n    <welcome-file-list>\n        <welcome-file>helloWorld.html</welcome-file>\n    </welcome-file-list>\n\n    <context-param>\n        <param-name>contextConfigLocation</param-name>\n        <param-value>classpath:spring/spring-mvc.xml</param-value>\n    </context-param>\n\n    <listener>\n        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\n    </listener>\n\n    <!-- post 编码问题 -->\n    <filter>\n        <filter-name>CharacterEncodingFilter</filter-name>\n        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>\n        <init-param>\n            <param-name>encoding</param-name>\n            <param-value>utf-8</param-value>\n        </init-param>\n    </filter>\n\n    <filter-mapping>\n        <filter-name>CharacterEncodingFilter</filter-name>\n        <url-pattern>/*</url-pattern>\n    </filter-mapping>\n    <!-- 编码结束 -->\n\n    <servlet>\n        <servlet-name>manager</servlet-name>\n        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n        <init-param>\n            <param-name>contextConfigLocation</param-name>\n            <param-value>classpath:spring/spring-mvc.xml</param-value>\n        </init-param>\n    </servlet>\n\n    <!-- 不包括jsp -->\n    <servlet-mapping>\n        <servlet-name>manager</servlet-name>\n        <url-pattern>/</url-pattern>\n    </servlet-mapping>\n</web-app>\n```\n\n随便看看就行了, 没什么难的, 首先加载了Spring配置, 配置了SpringMVC的监听器和过滤器, 设置了Spring的DispatcherServlet, 需要注意, 访问的如果是jsp的话, 是不会被DispatcherServlet处理的。\n\n<br>\n\nok, 后端配置总算是讲完了, 接下来该聊一聊前端了。","slug":"my_project/shopping_mall/Dependence_and_configuration/Shopping-mall-developNote-web-config","published":1,"updated":"2021-10-14T08:18:54.503Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejuh00793vsb84pseeyr","content":"<h1 id=\"Spring-MVC的配置\"><a href=\"#Spring-MVC的配置\" class=\"headerlink\" title=\"Spring MVC的配置\"></a>Spring MVC的配置</h1><p>主要包括了注解配置, 拦截器配置, 自动扫描配置和最重要的dubbo配置 <del>其实还包括一个静态资源配置, 但是因为咱们的前端使用的是vue, Spring MVC就不用管这里了</del></p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:mvc</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:dubbo</span>=<span class=\"string\">&quot;http://code.alibabatech.com/schema/dubbo&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:context</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">        http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mvc:annotation-driven</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mvc:default-servlet-handler</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 相当于注册了DefaultAnnotationHandlerMapping和AnnotationMethodHandlerAdapter两个bean</span></span><br><span class=\"line\"><span class=\"comment\">    配置一些messageconverter</span></span><br><span class=\"line\"><span class=\"comment\">    即解决了@Controller注解的使用前提配置。 --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- https://blog.csdn.net/jbgtwang/article/details/7359592 --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- https://scotch.io/@ethanmillar/spring-mvc-component-scan-annotation-config-annotation-driven --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mvc:interceptors</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mvc:interceptor</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">mvc:mapping</span> <span class=\"attr\">path</span>=<span class=\"string\">&quot;/**&quot;</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.littleboy.interceptor.CommonInterceptor&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;excludedUrls&quot;</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>/<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">mvc:interceptor</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">mvc:interceptors</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- spring + ajax 请求时, 会遇到 403 的解决方案 --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- https://blog.csdn.net/qq_25152183/article/details/53158222 --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:property-placeholder</span> <span class=\"attr\">location</span>=<span class=\"string\">&quot;classpath:conf/db.properties&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">&quot;com.littleboy.controller&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;viewResolver&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;prefix&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;web.view.prefix&#125;&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;suffix&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;web.view.suffix&#125;&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 静态资源配置 --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--&lt;mvc:resources mapping=&quot;/resources/**&quot; location=&quot;shopping_mail_front/static/**&quot; /&gt;--&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 声明需要使用的dubbo服务的工程名 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dubbo:application</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;manager&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 声明需要使用的dubbo的注册中心地址 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dubbo:registry</span> <span class=\"attr\">protocol</span>=<span class=\"string\">&quot;zookeeper&quot;</span> <span class=\"attr\">address</span>=<span class=\"string\">&quot;127.0.0.1:2182&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 声明需要使用的具体服务名 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dubbo:reference</span> <span class=\"attr\">interface</span>=<span class=\"string\">&quot;com.littleboy.service.ItemService&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;itemService&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dubbo:reference</span> <span class=\"attr\">interface</span>=<span class=\"string\">&quot;com.littleboy.service.ItemCatService&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;itemCatService&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>我们来仔细的说一说这个配置, 顺便也帮我自己梳理一下Spring MVC的基础。</p>\n<p>一上来, 就是两个我们不怎么熟悉的配置</p>\n<p><code>&lt;mvc:annotation-driven /&gt;</code> <code>&lt;mvc:default-servlet-handler /&gt;</code></p>\n<p>没关系, 我们来一个一个讲。</p>\n<br>\n\n<h2 id=\"lt-mvc-annotaion-driven-x2F-gt\"><a href=\"#lt-mvc-annotaion-driven-x2F-gt\" class=\"headerlink\" title=\"&lt;mvc:annotaion-driven &#x2F;&gt;\"></a>&lt;mvc:annotaion-driven &#x2F;&gt;</h2><p>这个其实是简写的一种形式, 通过这种写法能让我们省去很多配置, 它会帮我们自动注册 <code>DefaultAnnotationHandlerMapping</code> 和 <code>AnnotationMethodHandlerAdapter</code>, 这两个bean是Spring为<code>@controller</code>分发请求所必需的。</p>\n<p>并提供了数据绑定支持, <code>@NumberFormatAnnotation</code> 支持, <code>@DateTimeFormat</code> 支持, <code>@Valid</code> 支持, 读写xml支持(JAXB), 读写JSON支持(Jackson)</p>\n<p>对于Spring的基础, <a href=\"http://elf8848.iteye.com/blog/875830\">这篇博客</a>讲的很详细, 可以看一看。</p>\n<br>\n\n<h2 id=\"lt-mvc-default-servlet-handler-x2F-gt\"><a href=\"#lt-mvc-default-servlet-handler-x2F-gt\" class=\"headerlink\" title=\"&lt;mvc:default-servlet-handler &#x2F;&gt;\"></a>&lt;mvc:default-servlet-handler &#x2F;&gt;</h2><p>这个和访问静态资源有关, 访问静态资源有三种方案。</p>\n<p>上面算其中一种, 将<code>/**</code> url注册到SimpleUrlHandlerMapping的urlMap中, 并把对静态资源的访问转到<code>org.springframework.web.servlet.resource.DefaultServletHttpRequestHandler</code>处理并返回, DefaultServletHttpRequestHandler是各个servlet容器默认的servlet。</p>\n<p>其他两种分别是:</p>\n<ol>\n<li><p>使用tomcat的defaultServlet来处理静态文件。例子：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>default<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>*.jpg<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span>     </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span>    </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>default<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>*.js<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span>    </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span>    </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>default<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>       </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>*.css<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span>      </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>每一种静态资源都需要配置一个Servlet</p>\n</li>\n<li><p>使用Spring的提供的配置来处理。例子:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mvc:resources</span> <span class=\"attr\">mapping</span>=<span class=\"string\">&quot;/images/**&quot;</span> <span class=\"attr\">location</span>=<span class=\"string\">&quot;/images/&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>mapping属性配置了对于静态资源的请求路径, location属性配置了静态资源所在路径。</p>\n</li>\n</ol>\n<br>\n\n<h2 id=\"拦截器\"><a href=\"#拦截器\" class=\"headerlink\" title=\"拦截器\"></a>拦截器</h2><p>接下来我配置了一个拦截器, 因为当我搭建好项目, 弄好前端, 进行第一次访问时发现报错, 打开f12一看发现了这个:</p>\n<p><img src=\"/images/Spring+ajax-request-block.png\" alt=\"Spring+ajax请求被阻塞\"></p>\n<p>我仔细的查了以下, 发现contentType(就是发送请求的文件类型)为三个常用格式以外的格式, 如<code>application/json</code> 时, 会先发送一个试探的OPTIONS类型的请求发送给服务端, 这个时候, 修改请求头是没有用的, 因为还没有走到。</p>\n<p>这个时候就需要一个拦截器来拦截所有请求, 在所有请求中加上允许跨域的头。</p>\n<p>大概是这么写:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/************</span></span><br><span class=\"line\"><span class=\"comment\"> * 拦截器</span></span><br><span class=\"line\"><span class=\"comment\"> ***********/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CommonInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title\">HandlerInterceptor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; excludedUrls;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 在请求处理之前被调用, 该方法会被最先执行, 之后执行controller方法</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> request 请求</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> response 返回</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> handler</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 请求是否结束, 如果返回值是false, 那么接下来的方法都不会执行</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">preHandle</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">            HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 设置响应头</span></span><br><span class=\"line\">        response.setHeader(<span class=\"string\">&quot;Access-Control-Allow-Origin&quot;</span>, <span class=\"string\">&quot;*&quot;</span>);</span><br><span class=\"line\">        response.setHeader(<span class=\"string\">&quot;Access-Control-Allow-Methods&quot;</span>, <span class=\"string\">&quot;*&quot;</span>);</span><br><span class=\"line\">        response.setHeader(<span class=\"string\">&quot;Access-Control-Max-Age&quot;</span>, <span class=\"string\">&quot;3600&quot;</span>);</span><br><span class=\"line\">        response.setHeader(<span class=\"string\">&quot;Access-Control-Allow-Headers&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;Origin, X-Requested-With, Content-Type, Accept&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 在controller的方法执行之后, DispatcherServlet 进行视图渲染之前被执行</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> request 请求</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> response 返回</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> handler</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> modelAndView 该dto是已经被controller处理之后的了</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postHandle</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">            HttpServletRequest request, HttpServletResponse response, Object handler,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">            <span class=\"meta\">@Nullable</span> ModelAndView modelAndView)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 在DispatcherServlet进行了视图渲染之后执行的方法, 主要用于资源清理</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> request</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> response</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> handler</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> ex</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterCompletion</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">            HttpServletRequest request, HttpServletResponse response, Object handler, <span class=\"meta\">@Nullable</span> Exception ex)</span> <span class=\"keyword\">throws</span></span></span><br><span class=\"line\"><span class=\"function\">            Exception </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title\">getExcludedUrls</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> excludedUrls;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setExcludedUrls</span><span class=\"params\">(List&lt;String&gt; excludedUrls)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.excludedUrls = excludedUrls;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样浏览器会发送的两个请求就都会成功了。</p>\n<p>接下来配置了一个配置文件, 视图解析器。</p>\n<br>\n\n<h1 id=\"dubbo配置\"><a href=\"#dubbo配置\" class=\"headerlink\" title=\"dubbo配置\"></a>dubbo配置</h1><p>在service工程中我们接触过一次, 只不过那一次是声明服务, 而这一次是接收服务。</p>\n<p>同样也需要声明dubbo服务的工程名以及注册中心地址<del>(也就是zookeeper的地址)</del>, 然后就是需要使用的服务id和接口了。</p>\n<br>\n\n<h1 id=\"mybatis配置\"><a href=\"#mybatis配置\" class=\"headerlink\" title=\"mybatis配置\"></a>mybatis配置</h1><p>其实mybatis的配置文件没有什么东西, 但是, 这个配置文件得有, 所以还是得写一下。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">configuration</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-keyword\">PUBLIC</span> <span class=\"meta-string\">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-string\">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 别名 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">typeAliases</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;com.littleboy.pojo&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">typeAliases</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h1 id=\"web配置\"><a href=\"#web配置\" class=\"headerlink\" title=\"web配置\"></a>web配置</h1><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">web-app</span> <span class=\"meta-keyword\">PUBLIC</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-string\">&quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-string\">&quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot;</span> &gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">web-app</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">id</span>=<span class=\"string\">&quot;WebApp_ID&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">version</span>=<span class=\"string\">&quot;3.0&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://java.sun.com/xml/ns/javaee&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">display-name</span>&gt;</span>web<span class=\"tag\">&lt;/<span class=\"name\">display-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">welcome-file-list</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">welcome-file</span>&gt;</span>helloWorld.html<span class=\"tag\">&lt;/<span class=\"name\">welcome-file</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">welcome-file-list</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context-param</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>contextConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>classpath:spring/spring-mvc.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">context-param</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">listener</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class=\"tag\">&lt;/<span class=\"name\">listener-class</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">listener</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- post 编码问题 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>CharacterEncodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-class</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>encoding<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>utf-8<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>CharacterEncodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">filter-mapping</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 编码结束 --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>manager<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>contextConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>classpath:spring/spring-mvc.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 不包括jsp --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>manager<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>随便看看就行了, 没什么难的, 首先加载了Spring配置, 配置了SpringMVC的监听器和过滤器, 设置了Spring的DispatcherServlet, 需要注意, 访问的如果是jsp的话, 是不会被DispatcherServlet处理的。</p>\n<br>\n\n<p>ok, 后端配置总算是讲完了, 接下来该聊一聊前端了。</p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"Spring-MVC的配置\"><a href=\"#Spring-MVC的配置\" class=\"headerlink\" title=\"Spring MVC的配置\"></a>Spring MVC的配置</h1><p>主要包括了注解配置, 拦截器配置, 自动扫描配置和最重要的dubbo配置 <del>其实还包括一个静态资源配置, 但是因为咱们的前端使用的是vue, Spring MVC就不用管这里了</del></p>","more":"<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:mvc</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:dubbo</span>=<span class=\"string\">&quot;http://code.alibabatech.com/schema/dubbo&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:context</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">        http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mvc:annotation-driven</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mvc:default-servlet-handler</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 相当于注册了DefaultAnnotationHandlerMapping和AnnotationMethodHandlerAdapter两个bean</span></span><br><span class=\"line\"><span class=\"comment\">    配置一些messageconverter</span></span><br><span class=\"line\"><span class=\"comment\">    即解决了@Controller注解的使用前提配置。 --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- https://blog.csdn.net/jbgtwang/article/details/7359592 --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- https://scotch.io/@ethanmillar/spring-mvc-component-scan-annotation-config-annotation-driven --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mvc:interceptors</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mvc:interceptor</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">mvc:mapping</span> <span class=\"attr\">path</span>=<span class=\"string\">&quot;/**&quot;</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.littleboy.interceptor.CommonInterceptor&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;excludedUrls&quot;</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>/<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">mvc:interceptor</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">mvc:interceptors</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- spring + ajax 请求时, 会遇到 403 的解决方案 --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- https://blog.csdn.net/qq_25152183/article/details/53158222 --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:property-placeholder</span> <span class=\"attr\">location</span>=<span class=\"string\">&quot;classpath:conf/db.properties&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">&quot;com.littleboy.controller&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;viewResolver&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;prefix&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;web.view.prefix&#125;&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;suffix&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;web.view.suffix&#125;&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 静态资源配置 --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--&lt;mvc:resources mapping=&quot;/resources/**&quot; location=&quot;shopping_mail_front/static/**&quot; /&gt;--&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 声明需要使用的dubbo服务的工程名 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dubbo:application</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;manager&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 声明需要使用的dubbo的注册中心地址 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dubbo:registry</span> <span class=\"attr\">protocol</span>=<span class=\"string\">&quot;zookeeper&quot;</span> <span class=\"attr\">address</span>=<span class=\"string\">&quot;127.0.0.1:2182&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 声明需要使用的具体服务名 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dubbo:reference</span> <span class=\"attr\">interface</span>=<span class=\"string\">&quot;com.littleboy.service.ItemService&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;itemService&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dubbo:reference</span> <span class=\"attr\">interface</span>=<span class=\"string\">&quot;com.littleboy.service.ItemCatService&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;itemCatService&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>我们来仔细的说一说这个配置, 顺便也帮我自己梳理一下Spring MVC的基础。</p>\n<p>一上来, 就是两个我们不怎么熟悉的配置</p>\n<p><code>&lt;mvc:annotation-driven /&gt;</code> <code>&lt;mvc:default-servlet-handler /&gt;</code></p>\n<p>没关系, 我们来一个一个讲。</p>\n<br>\n\n<h2 id=\"lt-mvc-annotaion-driven-x2F-gt\"><a href=\"#lt-mvc-annotaion-driven-x2F-gt\" class=\"headerlink\" title=\"&lt;mvc:annotaion-driven &#x2F;&gt;\"></a>&lt;mvc:annotaion-driven &#x2F;&gt;</h2><p>这个其实是简写的一种形式, 通过这种写法能让我们省去很多配置, 它会帮我们自动注册 <code>DefaultAnnotationHandlerMapping</code> 和 <code>AnnotationMethodHandlerAdapter</code>, 这两个bean是Spring为<code>@controller</code>分发请求所必需的。</p>\n<p>并提供了数据绑定支持, <code>@NumberFormatAnnotation</code> 支持, <code>@DateTimeFormat</code> 支持, <code>@Valid</code> 支持, 读写xml支持(JAXB), 读写JSON支持(Jackson)</p>\n<p>对于Spring的基础, <a href=\"http://elf8848.iteye.com/blog/875830\">这篇博客</a>讲的很详细, 可以看一看。</p>\n<br>\n\n<h2 id=\"lt-mvc-default-servlet-handler-x2F-gt\"><a href=\"#lt-mvc-default-servlet-handler-x2F-gt\" class=\"headerlink\" title=\"&lt;mvc:default-servlet-handler &#x2F;&gt;\"></a>&lt;mvc:default-servlet-handler &#x2F;&gt;</h2><p>这个和访问静态资源有关, 访问静态资源有三种方案。</p>\n<p>上面算其中一种, 将<code>/**</code> url注册到SimpleUrlHandlerMapping的urlMap中, 并把对静态资源的访问转到<code>org.springframework.web.servlet.resource.DefaultServletHttpRequestHandler</code>处理并返回, DefaultServletHttpRequestHandler是各个servlet容器默认的servlet。</p>\n<p>其他两种分别是:</p>\n<ol>\n<li><p>使用tomcat的defaultServlet来处理静态文件。例子：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>default<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>*.jpg<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span>     </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span>    </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>default<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>*.js<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span>    </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span>    </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>default<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>       </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>*.css<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span>      </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>每一种静态资源都需要配置一个Servlet</p>\n</li>\n<li><p>使用Spring的提供的配置来处理。例子:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mvc:resources</span> <span class=\"attr\">mapping</span>=<span class=\"string\">&quot;/images/**&quot;</span> <span class=\"attr\">location</span>=<span class=\"string\">&quot;/images/&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>mapping属性配置了对于静态资源的请求路径, location属性配置了静态资源所在路径。</p>\n</li>\n</ol>\n<br>\n\n<h2 id=\"拦截器\"><a href=\"#拦截器\" class=\"headerlink\" title=\"拦截器\"></a>拦截器</h2><p>接下来我配置了一个拦截器, 因为当我搭建好项目, 弄好前端, 进行第一次访问时发现报错, 打开f12一看发现了这个:</p>\n<p><img src=\"/images/Spring+ajax-request-block.png\" alt=\"Spring+ajax请求被阻塞\"></p>\n<p>我仔细的查了以下, 发现contentType(就是发送请求的文件类型)为三个常用格式以外的格式, 如<code>application/json</code> 时, 会先发送一个试探的OPTIONS类型的请求发送给服务端, 这个时候, 修改请求头是没有用的, 因为还没有走到。</p>\n<p>这个时候就需要一个拦截器来拦截所有请求, 在所有请求中加上允许跨域的头。</p>\n<p>大概是这么写:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/************</span></span><br><span class=\"line\"><span class=\"comment\"> * 拦截器</span></span><br><span class=\"line\"><span class=\"comment\"> ***********/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CommonInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title\">HandlerInterceptor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; excludedUrls;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 在请求处理之前被调用, 该方法会被最先执行, 之后执行controller方法</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> request 请求</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> response 返回</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> handler</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 请求是否结束, 如果返回值是false, 那么接下来的方法都不会执行</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">preHandle</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">            HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 设置响应头</span></span><br><span class=\"line\">        response.setHeader(<span class=\"string\">&quot;Access-Control-Allow-Origin&quot;</span>, <span class=\"string\">&quot;*&quot;</span>);</span><br><span class=\"line\">        response.setHeader(<span class=\"string\">&quot;Access-Control-Allow-Methods&quot;</span>, <span class=\"string\">&quot;*&quot;</span>);</span><br><span class=\"line\">        response.setHeader(<span class=\"string\">&quot;Access-Control-Max-Age&quot;</span>, <span class=\"string\">&quot;3600&quot;</span>);</span><br><span class=\"line\">        response.setHeader(<span class=\"string\">&quot;Access-Control-Allow-Headers&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;Origin, X-Requested-With, Content-Type, Accept&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 在controller的方法执行之后, DispatcherServlet 进行视图渲染之前被执行</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> request 请求</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> response 返回</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> handler</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> modelAndView 该dto是已经被controller处理之后的了</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postHandle</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">            HttpServletRequest request, HttpServletResponse response, Object handler,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">            <span class=\"meta\">@Nullable</span> ModelAndView modelAndView)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 在DispatcherServlet进行了视图渲染之后执行的方法, 主要用于资源清理</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> request</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> response</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> handler</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> ex</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterCompletion</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">            HttpServletRequest request, HttpServletResponse response, Object handler, <span class=\"meta\">@Nullable</span> Exception ex)</span> <span class=\"keyword\">throws</span></span></span><br><span class=\"line\"><span class=\"function\">            Exception </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title\">getExcludedUrls</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> excludedUrls;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setExcludedUrls</span><span class=\"params\">(List&lt;String&gt; excludedUrls)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.excludedUrls = excludedUrls;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样浏览器会发送的两个请求就都会成功了。</p>\n<p>接下来配置了一个配置文件, 视图解析器。</p>\n<br>\n\n<h1 id=\"dubbo配置\"><a href=\"#dubbo配置\" class=\"headerlink\" title=\"dubbo配置\"></a>dubbo配置</h1><p>在service工程中我们接触过一次, 只不过那一次是声明服务, 而这一次是接收服务。</p>\n<p>同样也需要声明dubbo服务的工程名以及注册中心地址<del>(也就是zookeeper的地址)</del>, 然后就是需要使用的服务id和接口了。</p>\n<br>\n\n<h1 id=\"mybatis配置\"><a href=\"#mybatis配置\" class=\"headerlink\" title=\"mybatis配置\"></a>mybatis配置</h1><p>其实mybatis的配置文件没有什么东西, 但是, 这个配置文件得有, 所以还是得写一下。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">configuration</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-keyword\">PUBLIC</span> <span class=\"meta-string\">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-string\">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 别名 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">typeAliases</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;com.littleboy.pojo&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">typeAliases</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h1 id=\"web配置\"><a href=\"#web配置\" class=\"headerlink\" title=\"web配置\"></a>web配置</h1><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">web-app</span> <span class=\"meta-keyword\">PUBLIC</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-string\">&quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-string\">&quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot;</span> &gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">web-app</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">id</span>=<span class=\"string\">&quot;WebApp_ID&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">version</span>=<span class=\"string\">&quot;3.0&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://java.sun.com/xml/ns/javaee&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">display-name</span>&gt;</span>web<span class=\"tag\">&lt;/<span class=\"name\">display-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">welcome-file-list</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">welcome-file</span>&gt;</span>helloWorld.html<span class=\"tag\">&lt;/<span class=\"name\">welcome-file</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">welcome-file-list</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context-param</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>contextConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>classpath:spring/spring-mvc.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">context-param</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">listener</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class=\"tag\">&lt;/<span class=\"name\">listener-class</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">listener</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- post 编码问题 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>CharacterEncodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-class</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>encoding<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>utf-8<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>CharacterEncodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">filter-mapping</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 编码结束 --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>manager<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>contextConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>classpath:spring/spring-mvc.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 不包括jsp --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>manager<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>随便看看就行了, 没什么难的, 首先加载了Spring配置, 配置了SpringMVC的监听器和过滤器, 设置了Spring的DispatcherServlet, 需要注意, 访问的如果是jsp的话, 是不会被DispatcherServlet处理的。</p>\n<br>\n\n<p>ok, 后端配置总算是讲完了, 接下来该聊一聊前端了。</p>"},{"title":"商城开发笔记-web依赖","date":"2018-11-26T11:39:18.000Z","_content":"\n# web的依赖\n\n不同于其他的工程, 它的打包方式是web工程的打包方式, 所以应该是:\n\n```xml\n<packaging>war</packaging>\n```\n\n<br>\n\n由于是表现层, 所以依赖中应该包括SpringMVC, 下面是它的所有依赖:\n\n<!--more-->\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>${project.parent.groupId}</groupId>\n    <artifactId>interface</artifactId>\n    <version>${project.parent.version}</version>\n  </dependency>\n\n  <dependency>\n    <groupId>javax.servlet</groupId>\n    <artifactId>jstl</artifactId>\n  </dependency>\n\n  <!-- scope provided 代表不会被打包进去 -->\n  <dependency>\n    <groupId>javax.servlet</groupId>\n    <artifactId>javax.servlet-api</artifactId>\n    <scope>provided</scope>\n  </dependency>\n\n  <dependency>\n    <groupId>javax.servlet.jsp</groupId>\n    <artifactId>javax.servlet.jsp-api</artifactId>\n  </dependency>\n\n  <dependency>\n    <groupId>commons-fileupload</groupId>\n    <artifactId>commons-fileupload</artifactId>\n  </dependency>\n\n  <dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-context</artifactId>\n  </dependency>\n\n  <dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-beans</artifactId>\n  </dependency>\n\n  <dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-webmvc</artifactId>\n  </dependency>\n\n  <dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-jdbc</artifactId>\n  </dependency>\n\n  <dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-aspects</artifactId>\n  </dependency>\n\n  <dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-jms</artifactId>\n  </dependency>\n\n  <dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-context-support</artifactId>\n  </dependency>\n\n  <dependency>\n    <groupId>com.alibaba</groupId>\n    <artifactId>dubbo</artifactId>\n    <exclusions>\n      <exclusion>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring</artifactId>\n      </exclusion>\n      <exclusion>\n        <groupId>org.boss.netty</groupId>\n        <artifactId>netty</artifactId>\n      </exclusion>\n    </exclusions>\n    <version>2.5.9</version>\n  </dependency>\n\n  <dependency>\n    <groupId>org.apache.zookeeper</groupId>\n    <artifactId>zookeeper</artifactId>\n  </dependency>\n\n  <dependency>\n    <groupId>com.101tec</groupId>\n    <artifactId>zkclient</artifactId>\n    <version>0.10</version>\n  </dependency>\n\n  <dependency>\n    <groupId>com.github.pagehelper</groupId>\n    <artifactId>pagehelper</artifactId>\n  </dependency>\n</dependencies>\n```\n\n<br>\n\n由于是web工程, 所以和service一样, 也需要tomcat插件:\n\n```xml\n<build>\n  <plugins>\n    <plugin>\n      <groupId>org.apache.tomcat.maven</groupId>\n      <artifactId>tomcat7-maven-plugin</artifactId>\n      <configuration>\n        <path>/</path>\n        <port>8082</port>\n        <contextReloadable>true</contextReloadable>\n      </configuration>\n    </plugin>\n  </plugins>\n</build>\n```\n\n这样, 我们所有的项目的依赖就都介绍完了, 下一篇我们来说一说配置。","source":"_posts/my_project/shopping_mall/Dependence_and_configuration/Shopping-mall-developNote-web-depend.md","raw":"---\ntitle: 商城开发笔记-web依赖\ndate: 2018-11-26 19:39:18\ncategories:\n- 开发笔记\n- 商城\n- 配置篇\ntags:\n- 商城开发\n---\n\n# web的依赖\n\n不同于其他的工程, 它的打包方式是web工程的打包方式, 所以应该是:\n\n```xml\n<packaging>war</packaging>\n```\n\n<br>\n\n由于是表现层, 所以依赖中应该包括SpringMVC, 下面是它的所有依赖:\n\n<!--more-->\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>${project.parent.groupId}</groupId>\n    <artifactId>interface</artifactId>\n    <version>${project.parent.version}</version>\n  </dependency>\n\n  <dependency>\n    <groupId>javax.servlet</groupId>\n    <artifactId>jstl</artifactId>\n  </dependency>\n\n  <!-- scope provided 代表不会被打包进去 -->\n  <dependency>\n    <groupId>javax.servlet</groupId>\n    <artifactId>javax.servlet-api</artifactId>\n    <scope>provided</scope>\n  </dependency>\n\n  <dependency>\n    <groupId>javax.servlet.jsp</groupId>\n    <artifactId>javax.servlet.jsp-api</artifactId>\n  </dependency>\n\n  <dependency>\n    <groupId>commons-fileupload</groupId>\n    <artifactId>commons-fileupload</artifactId>\n  </dependency>\n\n  <dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-context</artifactId>\n  </dependency>\n\n  <dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-beans</artifactId>\n  </dependency>\n\n  <dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-webmvc</artifactId>\n  </dependency>\n\n  <dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-jdbc</artifactId>\n  </dependency>\n\n  <dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-aspects</artifactId>\n  </dependency>\n\n  <dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-jms</artifactId>\n  </dependency>\n\n  <dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-context-support</artifactId>\n  </dependency>\n\n  <dependency>\n    <groupId>com.alibaba</groupId>\n    <artifactId>dubbo</artifactId>\n    <exclusions>\n      <exclusion>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring</artifactId>\n      </exclusion>\n      <exclusion>\n        <groupId>org.boss.netty</groupId>\n        <artifactId>netty</artifactId>\n      </exclusion>\n    </exclusions>\n    <version>2.5.9</version>\n  </dependency>\n\n  <dependency>\n    <groupId>org.apache.zookeeper</groupId>\n    <artifactId>zookeeper</artifactId>\n  </dependency>\n\n  <dependency>\n    <groupId>com.101tec</groupId>\n    <artifactId>zkclient</artifactId>\n    <version>0.10</version>\n  </dependency>\n\n  <dependency>\n    <groupId>com.github.pagehelper</groupId>\n    <artifactId>pagehelper</artifactId>\n  </dependency>\n</dependencies>\n```\n\n<br>\n\n由于是web工程, 所以和service一样, 也需要tomcat插件:\n\n```xml\n<build>\n  <plugins>\n    <plugin>\n      <groupId>org.apache.tomcat.maven</groupId>\n      <artifactId>tomcat7-maven-plugin</artifactId>\n      <configuration>\n        <path>/</path>\n        <port>8082</port>\n        <contextReloadable>true</contextReloadable>\n      </configuration>\n    </plugin>\n  </plugins>\n</build>\n```\n\n这样, 我们所有的项目的依赖就都介绍完了, 下一篇我们来说一说配置。","slug":"my_project/shopping_mall/Dependence_and_configuration/Shopping-mall-developNote-web-depend","published":1,"updated":"2021-10-14T08:18:54.507Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejuj007a3vsbbt3041qj","content":"<h1 id=\"web的依赖\"><a href=\"#web的依赖\" class=\"headerlink\" title=\"web的依赖\"></a>web的依赖</h1><p>不同于其他的工程, 它的打包方式是web工程的打包方式, 所以应该是:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>war<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<p>由于是表现层, 所以依赖中应该包括SpringMVC, 下面是它的所有依赖:</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>$&#123;project.parent.groupId&#125;<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>interface<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;project.parent.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jstl<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- scope provided 代表不会被打包进去 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>javax.servlet-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>provided<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet.jsp<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>javax.servlet.jsp-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>commons-fileupload<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-fileupload<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-context<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-beans<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-webmvc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-jdbc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-aspects<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-jms<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-context-support<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>dubbo<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.boss.netty<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>netty<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.5.9<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.zookeeper<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>zookeeper<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.101tec<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>zkclient<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.10<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.github.pagehelper<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>pagehelper<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<p>由于是web工程, 所以和service一样, 也需要tomcat插件:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.tomcat.maven<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">path</span>&gt;</span>/<span class=\"tag\">&lt;/<span class=\"name\">path</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">port</span>&gt;</span>8082<span class=\"tag\">&lt;/<span class=\"name\">port</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">contextReloadable</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">contextReloadable</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这样, 我们所有的项目的依赖就都介绍完了, 下一篇我们来说一说配置。</p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"web的依赖\"><a href=\"#web的依赖\" class=\"headerlink\" title=\"web的依赖\"></a>web的依赖</h1><p>不同于其他的工程, 它的打包方式是web工程的打包方式, 所以应该是:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>war<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<p>由于是表现层, 所以依赖中应该包括SpringMVC, 下面是它的所有依赖:</p>","more":"<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>$&#123;project.parent.groupId&#125;<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>interface<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;project.parent.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jstl<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- scope provided 代表不会被打包进去 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>javax.servlet-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>provided<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet.jsp<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>javax.servlet.jsp-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>commons-fileupload<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-fileupload<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-context<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-beans<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-webmvc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-jdbc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-aspects<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-jms<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-context-support<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>dubbo<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.boss.netty<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>netty<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.5.9<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.zookeeper<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>zookeeper<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.101tec<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>zkclient<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.10<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.github.pagehelper<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>pagehelper<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<p>由于是web工程, 所以和service一样, 也需要tomcat插件:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.tomcat.maven<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">path</span>&gt;</span>/<span class=\"tag\">&lt;/<span class=\"name\">path</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">port</span>&gt;</span>8082<span class=\"tag\">&lt;/<span class=\"name\">port</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">contextReloadable</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">contextReloadable</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这样, 我们所有的项目的依赖就都介绍完了, 下一篇我们来说一说配置。</p>"},{"title":"商城开发笔记-注册","date":"2019-10-29T05:39:32.000Z","_content":"\n# 目标\n\n* 创建用户表\n* 编写添加用户功能\n\n# 创建用户表\n\n由于我们已经使用了actable框架, 可以实现通过实体类自动创建表, 所以我们只需要设计好实体类就可以了。\n\n我们在 pojo 模块中新建 `BasePojo.java` 用来充当我们的实体类基类。\n\n<!--more-->\n\nBasePojo.java:\n\n```java\npackage com.littleboy.pojo;\n\nimport com.gitee.sunchenbin.mybatis.actable.annotation.Column;\nimport com.gitee.sunchenbin.mybatis.actable.constants.MySqlTypeConstant;\nimport com.littleboy.common.annotation.CreateTime;\nimport com.littleboy.common.annotation.UpdateTime;\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport java.io.Serializable;\nimport java.sql.Timestamp;\n\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\nclass BasePojo implements Serializable {\n\t@Column(name = \"id\", type = MySqlTypeConstant.VARCHAR, length = 32, isKey = true, comment = \"主键\")\n\tprivate String id;\n\n\t@CreateTime\n\t@Column(name = \"create_time\", type = MySqlTypeConstant.TIMESTAMP, isNull = false, comment = \"创建时间\")\n\tprivate Timestamp createTime;\n\n\t@UpdateTime\n\t@Column(name = \"update_time\", type = MySqlTypeConstant.TIMESTAMP, isNull = false, comment = \"更新时间\")\n\tprivate Timestamp updateTime;\n}\n```\n\nOK, 这样只要继承了这个类的实体类都会拥有 createTime 和 updateTime 字段了, 这里 `@CreateTime` 和 `@UpdateTime` 可能会报错, 别急, 我们马上来实现他们。\n\n接下来我们要写两个注解, 用来在插入或者更新表时自动添加或者更新时间戳。在 common 模块中新建 `annotation` 和 `interceptor` 包, 在 `annotation` 中新建两个注解:\nCreateTime.java:\n\n```java\npackage com.littleboy.common.annotation;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\n@Retention(RetentionPolicy.RUNTIME)\n@Target({ElementType.FIELD})\npublic @interface CreateTime {\n}\n```\n\nUpdateTime.java:\n\n```java\npackage com.littleboy.common.annotation;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\n@Retention(RetentionPolicy.RUNTIME)\n@Target({ElementType.FIELD})\npublic @interface UpdateTime {\n}\n```\n\nmybatis 有一个拦截器, 可以在执行 sql 之前做自己想做的事, 那么思路就比较清晰了, 在插入或者更新的时候, 检测每一个实体类的字段有没有加入 `@CreateTime` 和 `@UpdateTime`, 如果有, 则将该字段设置好当前时间就可以了。那么具体的实现步骤如下:\n\n```java\npackage com.littleboy.common.interceptor;\n\nimport com.littleboy.common.annotation.CreateTime;\nimport com.littleboy.common.annotation.UpdateTime;\nimport org.apache.commons.lang3.ArrayUtils;\nimport org.apache.ibatis.binding.MapperMethod;\nimport org.apache.ibatis.executor.Executor;\nimport org.apache.ibatis.mapping.MappedStatement;\nimport org.apache.ibatis.mapping.SqlCommandType;\nimport org.apache.ibatis.plugin.*;\n\nimport java.lang.reflect.Field;\nimport java.sql.Timestamp;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.util.Iterator;\nimport java.util.Properties;\n\n@Intercepts({@Signature(type = Executor.class, method = \"update\", args = {MappedStatement.class, Object.class})})\npublic class DateTimeInterceptor implements Interceptor {\n\t@Override\n\tpublic Object intercept(Invocation invocation) throws Throwable {\n\t\tMappedStatement mappedStatement = (MappedStatement)invocation.getArgs()[0];\n\n\t\t// 获取 SQL\n\t\tSqlCommandType sqlCommandType = mappedStatement.getSqlCommandType();\n\n\t\t// 获取参数\n\t\tObject parameter = invocation.getArgs()[1];\n\t\tObject param = null;\n\n\t\t// 获取私有成员变量\n\t\tif (((MapperMethod.ParamMap)parameter).size() > 1) {\n\t\t\tIterator iterator = ((MapperMethod.ParamMap)parameter).keySet().iterator();\n\t\t\twhile (iterator.hasNext()) {\n\t\t\t\tparam = ((MapperMethod.ParamMap)parameter).get(iterator.next());\n\t\t\t}\n\t\t}\n\t\tField[] declaredFields = getAllFields(param);\n\n\t\tfor (Field field : declaredFields) {\n\t\t\tfield.setAccessible(true);\n\t\t\tif (field.getAnnotation(CreateTime.class) != null) {\n\t\t\t\tif (SqlCommandType.INSERT.equals(sqlCommandType)) {\n\t\t\t\t\t// insert语句插入createTime\n\t\t\t\t\t// 这里设置时间，当然时间格式可以自定。比如转成String类型\n\t\t\t\t\tfield.set(param, Timestamp.valueOf(new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(new Date())));\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (field.getAnnotation(UpdateTime.class) != null) {\n\n\t\t\t\tif (SqlCommandType.INSERT.equals(sqlCommandType)\n\t\t\t\t\t\t|| SqlCommandType.UPDATE.equals(sqlCommandType)) {\n\t\t\t\t\t// insert 或update语句插入updateTime\n\t\t\t\t\tfield.set(param, Timestamp.valueOf(new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(new Date())));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn invocation.proceed();\n\t}\n\n\t/**\n\t * 递归获取该类以及该类的父类所有的注解\n\t * @param obj 需要获取的类的实例\n\t * @param <T> 类型\n\t * @return 全部的注解\n\t */\n\tprivate <T> Field[] getAllFields(T obj) {\n\t\tField[] declaredFields = obj.getClass().getDeclaredFields();\n\t\tdeclaredFields = recursionParents(obj.getClass(), declaredFields);\n\n\t\treturn declaredFields;\n\t}\n\n\t/**\n\t * 递归获取父类的注解\n\t * @param clas   反射的class\n\t * @param fields 全部注解\n\t * @return 全部的注解\n\t */\n\tprivate Field[] recursionParents(Class<?> clas, Field[] fields) {\n\t\tif (clas.getSuperclass() != null) {\n\t\t\tClass clasSup = clas.getSuperclass();\n\t\t\tfields = ArrayUtils.addAll(fields, clasSup.getDeclaredFields());\n\t\t\tfields = recursionParents(clasSup, fields);\n\t\t}\n\t\treturn fields;\n\t}\n\n\t@Override\n\tpublic Object plugin(Object o) {\n\t\treturn Plugin.wrap(o, this);\n\t}\n\n\t@Override\n\tpublic void setProperties(Properties properties) {}\n}\n```\n\nok, 基类实现好了, 接下来开始设计用户实体类:\n\nSXUser.java:\n\n```java\npackage com.littleboy.pojo;\n\nimport com.gitee.sunchenbin.mybatis.actable.annotation.Column;\nimport com.gitee.sunchenbin.mybatis.actable.annotation.Table;\nimport com.gitee.sunchenbin.mybatis.actable.constants.MySqlTypeConstant;\n\nimport java.sql.Timestamp;\n\nimport com.littleboy.common.annotation.CreateTime;\nimport lombok.*;\n\n@Data\n@Builder\n@NoArgsConstructor\n@AllArgsConstructor\n@ToString(callSuper = true)\n@Table(name = \"sx_user\", comment = \"用户表\")\npublic class SXUser extends BasePojo {\n\n\t@Column(name = \"account\", type = MySqlTypeConstant.VARCHAR, length = 20, isNull = false, comment = \"账号(手机号)\")\n\tprivate String account;\n\n\t@Column(name = \"passwd\", type = MySqlTypeConstant.VARCHAR, length = 60, isNull = false, comment = \"密码\")\n\tprivate String passwd;\n\n\t@Column(name = \"name\", type = MySqlTypeConstant.VARCHAR, length = 10, isNull = false, comment = \"真实姓名\")\n\tprivate String name;\n\n\t@Column(name = \"status\", type = MySqlTypeConstant.SMALLINT, defaultValue = \"0\", isNull = false, comment = \"-1 不可用 0 刚注册,未完善资料 1 完善了资料,未审核 2 审核过\")\n\tprivate int status;\n\n\t@Column(name = \"type\", type = MySqlTypeConstant.TINYINT, defaultValue = \"1\", isNull = false, comment = \"1买家 2卖家\")\n\tprivate int type;\n\n\t@CreateTime\n\t@Column(name = \"last_login_time\", type = MySqlTypeConstant.TIMESTAMP,isNull = false, comment = \"最后一次登录时间\")\n\tprivate Timestamp lastLoginTime;\n}\n```\n\nok, 用户表设计好了, 接下来就是编写添加用户的功能了。\n\n# 添加用户\n\n首先编写 dao 层:\n\ndao.SXUserMapper.java:\n\n```java\npackage com.littleboy.dao;\n\nimport com.littleboy.pojo.SXUser;\nimport org.apache.ibatis.annotations.Param;\n\npublic interface SXUserMapper {\n    /**\n     * 通过id获取用户\n     * @param id 用户id\n     * @return 获取到的用户\n     */\n    SXUser getUserById(@Param(\"id\") String id);\n\n    /**\n     * 通过手机号获取用户\n     * @param account 手机号\n     * @return 获取到的用户\n     */\n    SXUser getUserByAccount(@Param(\"account\") String account);\n\n    /**\n     * 插入一条用户记录\n     * @param user 用户记录\n     */\n    void insertUser(@Param(\"user\") SXUser user);\n}\n```\n\n接下来是对应的 xml:\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\" >\n<mapper namespace=\"com.littleboy.dao.SXUserMapper\">\n    <select id=\"getUserById\" resultType=\"SXUser\" parameterType=\"String\">\n        select * from sx_user where sx_user.id = #{id}\n    </select>\n\n    <select id=\"getUserByAccount\" resultType=\"SXUser\" parameterType=\"String\">\n        select * from sx_user where sx_user.account = #{name}\n    </select>\n\n    <insert id=\"insertUser\" parameterType=\"com.littleboy.pojo.SXUser\">\n        insert sx_user(id, account, passwd, name, create_time, update_time, last_login_time)\n        values (#{user.id}, #{user.account}, #{user.passwd}, #{user.name}, #{user.createTime}, #{user.updateTime}, #{user.lastLoginTime})\n    </insert>\n</mapper>\n```\n\n服务层省略, 代码可以查看 [码云-商城源码](https://gitee.com/littleboydk/shopping_mall)。\n\ncontroller层:\n\n```java\npackage com.littleboy.controller;\n\nimport com.littleboy.dto.ReturnInfo;\nimport com.littleboy.dto.UserDto;\nimport com.littleboy.pojo.SXUser;\nimport com.littleboy.service.SXUserService;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.web.bind.annotation.*;\n\n@RestController\n@RequestMapping(value = \"/user\")\npublic class UserController {\n    @Autowired\n    private SXUserService mSXUserService;\n\n    /**\n     * 用户注册\n     * @param userDto 用户注册信息\n     * @return 用户注册成功的信息\n     */\n    @PostMapping(value = \"/register\")\n    public ReturnInfo register(@RequestBody UserDto userDto) {\n        System.out.println(userDto);\n        ReturnInfo<UserDto> returnInfo = new ReturnInfo<>();\n        if (!StringUtils.isAllEmpty(userDto.getAccount()) &&\n                !StringUtils.isAllEmpty(userDto.getPasswd()) &&\n                !StringUtils.isAllEmpty(userDto.getName())) {\n\n            mSXUserService.insertUser(\n                    SXUser.builder()\n                            .account(userDto.getAccount())\n                            .passwd(new BCryptPasswordEncoder().encode(userDto.getPasswd()))\n                            .name(userDto.getName()).build());\n\n            returnInfo.setObject(userDto);\n            returnInfo.setReturnInfo(\"恭喜你, 注册成功! \");\n            returnInfo.setStatus(1);\n        } else {\n            returnInfo.setStatus(-1);\n            returnInfo.setReturnInfo(\"很抱歉, 注册失败, 请检查您填写的信息是否正确\");\n        }\n        return returnInfo;\n    }\n}\n\n```\n\n这里使用了 SpringSecurity 的密码加密方式, 嗯, 接口搞定, 写个测试用例测试一下:\n\n","source":"_posts/my_project/shopping_mall/crud/Shopping-mall-developNote-register.md","raw":"---\ntitle: 商城开发笔记-注册\ndate: 2019-10-29 13:39:32\ncategories:\n- 开发笔记\n- 商城\n- 功能篇\ntags:\n- 商城开发\n---\n\n# 目标\n\n* 创建用户表\n* 编写添加用户功能\n\n# 创建用户表\n\n由于我们已经使用了actable框架, 可以实现通过实体类自动创建表, 所以我们只需要设计好实体类就可以了。\n\n我们在 pojo 模块中新建 `BasePojo.java` 用来充当我们的实体类基类。\n\n<!--more-->\n\nBasePojo.java:\n\n```java\npackage com.littleboy.pojo;\n\nimport com.gitee.sunchenbin.mybatis.actable.annotation.Column;\nimport com.gitee.sunchenbin.mybatis.actable.constants.MySqlTypeConstant;\nimport com.littleboy.common.annotation.CreateTime;\nimport com.littleboy.common.annotation.UpdateTime;\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport java.io.Serializable;\nimport java.sql.Timestamp;\n\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\nclass BasePojo implements Serializable {\n\t@Column(name = \"id\", type = MySqlTypeConstant.VARCHAR, length = 32, isKey = true, comment = \"主键\")\n\tprivate String id;\n\n\t@CreateTime\n\t@Column(name = \"create_time\", type = MySqlTypeConstant.TIMESTAMP, isNull = false, comment = \"创建时间\")\n\tprivate Timestamp createTime;\n\n\t@UpdateTime\n\t@Column(name = \"update_time\", type = MySqlTypeConstant.TIMESTAMP, isNull = false, comment = \"更新时间\")\n\tprivate Timestamp updateTime;\n}\n```\n\nOK, 这样只要继承了这个类的实体类都会拥有 createTime 和 updateTime 字段了, 这里 `@CreateTime` 和 `@UpdateTime` 可能会报错, 别急, 我们马上来实现他们。\n\n接下来我们要写两个注解, 用来在插入或者更新表时自动添加或者更新时间戳。在 common 模块中新建 `annotation` 和 `interceptor` 包, 在 `annotation` 中新建两个注解:\nCreateTime.java:\n\n```java\npackage com.littleboy.common.annotation;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\n@Retention(RetentionPolicy.RUNTIME)\n@Target({ElementType.FIELD})\npublic @interface CreateTime {\n}\n```\n\nUpdateTime.java:\n\n```java\npackage com.littleboy.common.annotation;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\n@Retention(RetentionPolicy.RUNTIME)\n@Target({ElementType.FIELD})\npublic @interface UpdateTime {\n}\n```\n\nmybatis 有一个拦截器, 可以在执行 sql 之前做自己想做的事, 那么思路就比较清晰了, 在插入或者更新的时候, 检测每一个实体类的字段有没有加入 `@CreateTime` 和 `@UpdateTime`, 如果有, 则将该字段设置好当前时间就可以了。那么具体的实现步骤如下:\n\n```java\npackage com.littleboy.common.interceptor;\n\nimport com.littleboy.common.annotation.CreateTime;\nimport com.littleboy.common.annotation.UpdateTime;\nimport org.apache.commons.lang3.ArrayUtils;\nimport org.apache.ibatis.binding.MapperMethod;\nimport org.apache.ibatis.executor.Executor;\nimport org.apache.ibatis.mapping.MappedStatement;\nimport org.apache.ibatis.mapping.SqlCommandType;\nimport org.apache.ibatis.plugin.*;\n\nimport java.lang.reflect.Field;\nimport java.sql.Timestamp;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.util.Iterator;\nimport java.util.Properties;\n\n@Intercepts({@Signature(type = Executor.class, method = \"update\", args = {MappedStatement.class, Object.class})})\npublic class DateTimeInterceptor implements Interceptor {\n\t@Override\n\tpublic Object intercept(Invocation invocation) throws Throwable {\n\t\tMappedStatement mappedStatement = (MappedStatement)invocation.getArgs()[0];\n\n\t\t// 获取 SQL\n\t\tSqlCommandType sqlCommandType = mappedStatement.getSqlCommandType();\n\n\t\t// 获取参数\n\t\tObject parameter = invocation.getArgs()[1];\n\t\tObject param = null;\n\n\t\t// 获取私有成员变量\n\t\tif (((MapperMethod.ParamMap)parameter).size() > 1) {\n\t\t\tIterator iterator = ((MapperMethod.ParamMap)parameter).keySet().iterator();\n\t\t\twhile (iterator.hasNext()) {\n\t\t\t\tparam = ((MapperMethod.ParamMap)parameter).get(iterator.next());\n\t\t\t}\n\t\t}\n\t\tField[] declaredFields = getAllFields(param);\n\n\t\tfor (Field field : declaredFields) {\n\t\t\tfield.setAccessible(true);\n\t\t\tif (field.getAnnotation(CreateTime.class) != null) {\n\t\t\t\tif (SqlCommandType.INSERT.equals(sqlCommandType)) {\n\t\t\t\t\t// insert语句插入createTime\n\t\t\t\t\t// 这里设置时间，当然时间格式可以自定。比如转成String类型\n\t\t\t\t\tfield.set(param, Timestamp.valueOf(new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(new Date())));\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (field.getAnnotation(UpdateTime.class) != null) {\n\n\t\t\t\tif (SqlCommandType.INSERT.equals(sqlCommandType)\n\t\t\t\t\t\t|| SqlCommandType.UPDATE.equals(sqlCommandType)) {\n\t\t\t\t\t// insert 或update语句插入updateTime\n\t\t\t\t\tfield.set(param, Timestamp.valueOf(new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(new Date())));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn invocation.proceed();\n\t}\n\n\t/**\n\t * 递归获取该类以及该类的父类所有的注解\n\t * @param obj 需要获取的类的实例\n\t * @param <T> 类型\n\t * @return 全部的注解\n\t */\n\tprivate <T> Field[] getAllFields(T obj) {\n\t\tField[] declaredFields = obj.getClass().getDeclaredFields();\n\t\tdeclaredFields = recursionParents(obj.getClass(), declaredFields);\n\n\t\treturn declaredFields;\n\t}\n\n\t/**\n\t * 递归获取父类的注解\n\t * @param clas   反射的class\n\t * @param fields 全部注解\n\t * @return 全部的注解\n\t */\n\tprivate Field[] recursionParents(Class<?> clas, Field[] fields) {\n\t\tif (clas.getSuperclass() != null) {\n\t\t\tClass clasSup = clas.getSuperclass();\n\t\t\tfields = ArrayUtils.addAll(fields, clasSup.getDeclaredFields());\n\t\t\tfields = recursionParents(clasSup, fields);\n\t\t}\n\t\treturn fields;\n\t}\n\n\t@Override\n\tpublic Object plugin(Object o) {\n\t\treturn Plugin.wrap(o, this);\n\t}\n\n\t@Override\n\tpublic void setProperties(Properties properties) {}\n}\n```\n\nok, 基类实现好了, 接下来开始设计用户实体类:\n\nSXUser.java:\n\n```java\npackage com.littleboy.pojo;\n\nimport com.gitee.sunchenbin.mybatis.actable.annotation.Column;\nimport com.gitee.sunchenbin.mybatis.actable.annotation.Table;\nimport com.gitee.sunchenbin.mybatis.actable.constants.MySqlTypeConstant;\n\nimport java.sql.Timestamp;\n\nimport com.littleboy.common.annotation.CreateTime;\nimport lombok.*;\n\n@Data\n@Builder\n@NoArgsConstructor\n@AllArgsConstructor\n@ToString(callSuper = true)\n@Table(name = \"sx_user\", comment = \"用户表\")\npublic class SXUser extends BasePojo {\n\n\t@Column(name = \"account\", type = MySqlTypeConstant.VARCHAR, length = 20, isNull = false, comment = \"账号(手机号)\")\n\tprivate String account;\n\n\t@Column(name = \"passwd\", type = MySqlTypeConstant.VARCHAR, length = 60, isNull = false, comment = \"密码\")\n\tprivate String passwd;\n\n\t@Column(name = \"name\", type = MySqlTypeConstant.VARCHAR, length = 10, isNull = false, comment = \"真实姓名\")\n\tprivate String name;\n\n\t@Column(name = \"status\", type = MySqlTypeConstant.SMALLINT, defaultValue = \"0\", isNull = false, comment = \"-1 不可用 0 刚注册,未完善资料 1 完善了资料,未审核 2 审核过\")\n\tprivate int status;\n\n\t@Column(name = \"type\", type = MySqlTypeConstant.TINYINT, defaultValue = \"1\", isNull = false, comment = \"1买家 2卖家\")\n\tprivate int type;\n\n\t@CreateTime\n\t@Column(name = \"last_login_time\", type = MySqlTypeConstant.TIMESTAMP,isNull = false, comment = \"最后一次登录时间\")\n\tprivate Timestamp lastLoginTime;\n}\n```\n\nok, 用户表设计好了, 接下来就是编写添加用户的功能了。\n\n# 添加用户\n\n首先编写 dao 层:\n\ndao.SXUserMapper.java:\n\n```java\npackage com.littleboy.dao;\n\nimport com.littleboy.pojo.SXUser;\nimport org.apache.ibatis.annotations.Param;\n\npublic interface SXUserMapper {\n    /**\n     * 通过id获取用户\n     * @param id 用户id\n     * @return 获取到的用户\n     */\n    SXUser getUserById(@Param(\"id\") String id);\n\n    /**\n     * 通过手机号获取用户\n     * @param account 手机号\n     * @return 获取到的用户\n     */\n    SXUser getUserByAccount(@Param(\"account\") String account);\n\n    /**\n     * 插入一条用户记录\n     * @param user 用户记录\n     */\n    void insertUser(@Param(\"user\") SXUser user);\n}\n```\n\n接下来是对应的 xml:\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\" >\n<mapper namespace=\"com.littleboy.dao.SXUserMapper\">\n    <select id=\"getUserById\" resultType=\"SXUser\" parameterType=\"String\">\n        select * from sx_user where sx_user.id = #{id}\n    </select>\n\n    <select id=\"getUserByAccount\" resultType=\"SXUser\" parameterType=\"String\">\n        select * from sx_user where sx_user.account = #{name}\n    </select>\n\n    <insert id=\"insertUser\" parameterType=\"com.littleboy.pojo.SXUser\">\n        insert sx_user(id, account, passwd, name, create_time, update_time, last_login_time)\n        values (#{user.id}, #{user.account}, #{user.passwd}, #{user.name}, #{user.createTime}, #{user.updateTime}, #{user.lastLoginTime})\n    </insert>\n</mapper>\n```\n\n服务层省略, 代码可以查看 [码云-商城源码](https://gitee.com/littleboydk/shopping_mall)。\n\ncontroller层:\n\n```java\npackage com.littleboy.controller;\n\nimport com.littleboy.dto.ReturnInfo;\nimport com.littleboy.dto.UserDto;\nimport com.littleboy.pojo.SXUser;\nimport com.littleboy.service.SXUserService;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.web.bind.annotation.*;\n\n@RestController\n@RequestMapping(value = \"/user\")\npublic class UserController {\n    @Autowired\n    private SXUserService mSXUserService;\n\n    /**\n     * 用户注册\n     * @param userDto 用户注册信息\n     * @return 用户注册成功的信息\n     */\n    @PostMapping(value = \"/register\")\n    public ReturnInfo register(@RequestBody UserDto userDto) {\n        System.out.println(userDto);\n        ReturnInfo<UserDto> returnInfo = new ReturnInfo<>();\n        if (!StringUtils.isAllEmpty(userDto.getAccount()) &&\n                !StringUtils.isAllEmpty(userDto.getPasswd()) &&\n                !StringUtils.isAllEmpty(userDto.getName())) {\n\n            mSXUserService.insertUser(\n                    SXUser.builder()\n                            .account(userDto.getAccount())\n                            .passwd(new BCryptPasswordEncoder().encode(userDto.getPasswd()))\n                            .name(userDto.getName()).build());\n\n            returnInfo.setObject(userDto);\n            returnInfo.setReturnInfo(\"恭喜你, 注册成功! \");\n            returnInfo.setStatus(1);\n        } else {\n            returnInfo.setStatus(-1);\n            returnInfo.setReturnInfo(\"很抱歉, 注册失败, 请检查您填写的信息是否正确\");\n        }\n        return returnInfo;\n    }\n}\n\n```\n\n这里使用了 SpringSecurity 的密码加密方式, 嗯, 接口搞定, 写个测试用例测试一下:\n\n","slug":"my_project/shopping_mall/crud/Shopping-mall-developNote-register","published":1,"updated":"2021-10-14T08:18:54.515Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejuq007e3vsb2o3e9z43","content":"<h1 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h1><ul>\n<li>创建用户表</li>\n<li>编写添加用户功能</li>\n</ul>\n<h1 id=\"创建用户表\"><a href=\"#创建用户表\" class=\"headerlink\" title=\"创建用户表\"></a>创建用户表</h1><p>由于我们已经使用了actable框架, 可以实现通过实体类自动创建表, 所以我们只需要设计好实体类就可以了。</p>\n<p>我们在 pojo 模块中新建 <code>BasePojo.java</code> 用来充当我们的实体类基类。</p>\n<span id=\"more\"></span>\n\n<p>BasePojo.java:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.littleboy.pojo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.gitee.sunchenbin.mybatis.actable.annotation.Column;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.gitee.sunchenbin.mybatis.actable.constants.MySqlTypeConstant;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.littleboy.common.annotation.CreateTime;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.littleboy.common.annotation.UpdateTime;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.AllArgsConstructor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.NoArgsConstructor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.Serializable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.Timestamp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BasePojo</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Column(name = &quot;id&quot;, type = MySqlTypeConstant.VARCHAR, length = 32, isKey = true, comment = &quot;主键&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String id;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@CreateTime</span></span><br><span class=\"line\">\t<span class=\"meta\">@Column(name = &quot;create_time&quot;, type = MySqlTypeConstant.TIMESTAMP, isNull = false, comment = &quot;创建时间&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Timestamp createTime;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@UpdateTime</span></span><br><span class=\"line\">\t<span class=\"meta\">@Column(name = &quot;update_time&quot;, type = MySqlTypeConstant.TIMESTAMP, isNull = false, comment = &quot;更新时间&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Timestamp updateTime;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>OK, 这样只要继承了这个类的实体类都会拥有 createTime 和 updateTime 字段了, 这里 <code>@CreateTime</code> 和 <code>@UpdateTime</code> 可能会报错, 别急, 我们马上来实现他们。</p>\n<p>接下来我们要写两个注解, 用来在插入或者更新表时自动添加或者更新时间戳。在 common 模块中新建 <code>annotation</code> 和 <code>interceptor</code> 包, 在 <code>annotation</code> 中新建两个注解:<br>CreateTime.java:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.littleboy.common.annotation;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.ElementType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Retention;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Target;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@Target(&#123;ElementType.FIELD&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> CreateTime &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>UpdateTime.java:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.littleboy.common.annotation;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.ElementType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Retention;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Target;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@Target(&#123;ElementType.FIELD&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> UpdateTime &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>mybatis 有一个拦截器, 可以在执行 sql 之前做自己想做的事, 那么思路就比较清晰了, 在插入或者更新的时候, 检测每一个实体类的字段有没有加入 <code>@CreateTime</code> 和 <code>@UpdateTime</code>, 如果有, 则将该字段设置好当前时间就可以了。那么具体的实现步骤如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.littleboy.common.interceptor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.littleboy.common.annotation.CreateTime;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.littleboy.common.annotation.UpdateTime;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.lang3.ArrayUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.binding.MapperMethod;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.executor.Executor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.mapping.MappedStatement;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.mapping.SqlCommandType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.plugin.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.Timestamp;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.text.SimpleDateFormat;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Iterator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Properties;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Intercepts(&#123;@Signature(type = Executor.class, method = &quot;update&quot;, args = &#123;MappedStatement.class, Object.class&#125;)&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DateTimeInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title\">Interceptor</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">intercept</span><span class=\"params\">(Invocation invocation)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">\t\tMappedStatement mappedStatement = (MappedStatement)invocation.getArgs()[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 获取 SQL</span></span><br><span class=\"line\">\t\tSqlCommandType sqlCommandType = mappedStatement.getSqlCommandType();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 获取参数</span></span><br><span class=\"line\">\t\tObject parameter = invocation.getArgs()[<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\tObject param = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 获取私有成员变量</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (((MapperMethod.ParamMap)parameter).size() &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\tIterator iterator = ((MapperMethod.ParamMap)parameter).keySet().iterator();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> (iterator.hasNext()) &#123;</span><br><span class=\"line\">\t\t\t\tparam = ((MapperMethod.ParamMap)parameter).get(iterator.next());</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tField[] declaredFields = getAllFields(param);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (Field field : declaredFields) &#123;</span><br><span class=\"line\">\t\t\tfield.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (field.getAnnotation(CreateTime.class) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (SqlCommandType.INSERT.equals(sqlCommandType)) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// insert语句插入createTime</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// 这里设置时间，当然时间格式可以自定。比如转成String类型</span></span><br><span class=\"line\">\t\t\t\t\tfield.set(param, Timestamp.valueOf(<span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>).format(<span class=\"keyword\">new</span> Date())));</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (field.getAnnotation(UpdateTime.class) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (SqlCommandType.INSERT.equals(sqlCommandType)</span><br><span class=\"line\">\t\t\t\t\t\t|| SqlCommandType.UPDATE.equals(sqlCommandType)) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// insert 或update语句插入updateTime</span></span><br><span class=\"line\">\t\t\t\t\tfield.set(param, Timestamp.valueOf(<span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>).format(<span class=\"keyword\">new</span> Date())));</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> invocation.proceed();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 递归获取该类以及该类的父类所有的注解</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> obj 需要获取的类的实例</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> &lt;T&gt; 类型</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> 全部的注解</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> &lt;T&gt; Field[] getAllFields(T obj) &#123;</span><br><span class=\"line\">\t\tField[] declaredFields = obj.getClass().getDeclaredFields();</span><br><span class=\"line\">\t\tdeclaredFields = recursionParents(obj.getClass(), declaredFields);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> declaredFields;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 递归获取父类的注解</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> clas   反射的class</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> fields 全部注解</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> 全部的注解</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Field[] recursionParents(Class&lt;?&gt; clas, Field[] fields) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (clas.getSuperclass() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tClass clasSup = clas.getSuperclass();</span><br><span class=\"line\">\t\t\tfields = ArrayUtils.addAll(fields, clasSup.getDeclaredFields());</span><br><span class=\"line\">\t\t\tfields = recursionParents(clasSup, fields);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> fields;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">plugin</span><span class=\"params\">(Object o)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> Plugin.wrap(o, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setProperties</span><span class=\"params\">(Properties properties)</span> </span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>ok, 基类实现好了, 接下来开始设计用户实体类:</p>\n<p>SXUser.java:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.littleboy.pojo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.gitee.sunchenbin.mybatis.actable.annotation.Column;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.gitee.sunchenbin.mybatis.actable.annotation.Table;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.gitee.sunchenbin.mybatis.actable.constants.MySqlTypeConstant;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.Timestamp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.littleboy.common.annotation.CreateTime;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@Builder</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@ToString(callSuper = true)</span></span><br><span class=\"line\"><span class=\"meta\">@Table(name = &quot;sx_user&quot;, comment = &quot;用户表&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SXUser</span> <span class=\"keyword\">extends</span> <span class=\"title\">BasePojo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Column(name = &quot;account&quot;, type = MySqlTypeConstant.VARCHAR, length = 20, isNull = false, comment = &quot;账号(手机号)&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String account;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Column(name = &quot;passwd&quot;, type = MySqlTypeConstant.VARCHAR, length = 60, isNull = false, comment = &quot;密码&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String passwd;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Column(name = &quot;name&quot;, type = MySqlTypeConstant.VARCHAR, length = 10, isNull = false, comment = &quot;真实姓名&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Column(name = &quot;status&quot;, type = MySqlTypeConstant.SMALLINT, defaultValue = &quot;0&quot;, isNull = false, comment = &quot;-1 不可用 0 刚注册,未完善资料 1 完善了资料,未审核 2 审核过&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> status;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Column(name = &quot;type&quot;, type = MySqlTypeConstant.TINYINT, defaultValue = &quot;1&quot;, isNull = false, comment = &quot;1买家 2卖家&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> type;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@CreateTime</span></span><br><span class=\"line\">\t<span class=\"meta\">@Column(name = &quot;last_login_time&quot;, type = MySqlTypeConstant.TIMESTAMP,isNull = false, comment = &quot;最后一次登录时间&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Timestamp lastLoginTime;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>ok, 用户表设计好了, 接下来就是编写添加用户的功能了。</p>\n<h1 id=\"添加用户\"><a href=\"#添加用户\" class=\"headerlink\" title=\"添加用户\"></a>添加用户</h1><p>首先编写 dao 层:</p>\n<p>dao.SXUserMapper.java:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.littleboy.dao;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.littleboy.pojo.SXUser;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.annotations.Param;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">SXUserMapper</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 通过id获取用户</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> id 用户id</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 获取到的用户</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">SXUser <span class=\"title\">getUserById</span><span class=\"params\">(<span class=\"meta\">@Param(&quot;id&quot;)</span> String id)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 通过手机号获取用户</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> account 手机号</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 获取到的用户</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">SXUser <span class=\"title\">getUserByAccount</span><span class=\"params\">(<span class=\"meta\">@Param(&quot;account&quot;)</span> String account)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 插入一条用户记录</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> user 用户记录</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insertUser</span><span class=\"params\">(<span class=\"meta\">@Param(&quot;user&quot;)</span> SXUser user)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接下来是对应的 xml:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">mapper</span> <span class=\"meta-keyword\">PUBLIC</span> <span class=\"meta-string\">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class=\"meta-string\">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">&quot;com.littleboy.dao.SXUserMapper&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;getUserById&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;SXUser&quot;</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">&quot;String&quot;</span>&gt;</span></span><br><span class=\"line\">        select * from sx_user where sx_user.id = #&#123;id&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;getUserByAccount&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;SXUser&quot;</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">&quot;String&quot;</span>&gt;</span></span><br><span class=\"line\">        select * from sx_user where sx_user.account = #&#123;name&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">insert</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;insertUser&quot;</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">&quot;com.littleboy.pojo.SXUser&quot;</span>&gt;</span></span><br><span class=\"line\">        insert sx_user(id, account, passwd, name, create_time, update_time, last_login_time)</span><br><span class=\"line\">        values (#&#123;user.id&#125;, #&#123;user.account&#125;, #&#123;user.passwd&#125;, #&#123;user.name&#125;, #&#123;user.createTime&#125;, #&#123;user.updateTime&#125;, #&#123;user.lastLoginTime&#125;)</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">insert</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>服务层省略, 代码可以查看 <a href=\"https://gitee.com/littleboydk/shopping_mall\">码云-商城源码</a>。</p>\n<p>controller层:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.littleboy.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.littleboy.dto.ReturnInfo;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.littleboy.dto.UserDto;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.littleboy.pojo.SXUser;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.littleboy.service.SXUserService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(value = &quot;/user&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> SXUserService mSXUserService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 用户注册</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> userDto 用户注册信息</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 用户注册成功的信息</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(value = &quot;/register&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ReturnInfo <span class=\"title\">register</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> UserDto userDto)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(userDto);</span><br><span class=\"line\">        ReturnInfo&lt;UserDto&gt; returnInfo = <span class=\"keyword\">new</span> ReturnInfo&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!StringUtils.isAllEmpty(userDto.getAccount()) &amp;&amp;</span><br><span class=\"line\">                !StringUtils.isAllEmpty(userDto.getPasswd()) &amp;&amp;</span><br><span class=\"line\">                !StringUtils.isAllEmpty(userDto.getName())) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            mSXUserService.insertUser(</span><br><span class=\"line\">                    SXUser.builder()</span><br><span class=\"line\">                            .account(userDto.getAccount())</span><br><span class=\"line\">                            .passwd(<span class=\"keyword\">new</span> BCryptPasswordEncoder().encode(userDto.getPasswd()))</span><br><span class=\"line\">                            .name(userDto.getName()).build());</span><br><span class=\"line\"></span><br><span class=\"line\">            returnInfo.setObject(userDto);</span><br><span class=\"line\">            returnInfo.setReturnInfo(<span class=\"string\">&quot;恭喜你, 注册成功! &quot;</span>);</span><br><span class=\"line\">            returnInfo.setStatus(<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            returnInfo.setStatus(-<span class=\"number\">1</span>);</span><br><span class=\"line\">            returnInfo.setReturnInfo(<span class=\"string\">&quot;很抱歉, 注册失败, 请检查您填写的信息是否正确&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> returnInfo;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这里使用了 SpringSecurity 的密码加密方式, 嗯, 接口搞定, 写个测试用例测试一下:</p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h1><ul>\n<li>创建用户表</li>\n<li>编写添加用户功能</li>\n</ul>\n<h1 id=\"创建用户表\"><a href=\"#创建用户表\" class=\"headerlink\" title=\"创建用户表\"></a>创建用户表</h1><p>由于我们已经使用了actable框架, 可以实现通过实体类自动创建表, 所以我们只需要设计好实体类就可以了。</p>\n<p>我们在 pojo 模块中新建 <code>BasePojo.java</code> 用来充当我们的实体类基类。</p>","more":"<p>BasePojo.java:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.littleboy.pojo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.gitee.sunchenbin.mybatis.actable.annotation.Column;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.gitee.sunchenbin.mybatis.actable.constants.MySqlTypeConstant;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.littleboy.common.annotation.CreateTime;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.littleboy.common.annotation.UpdateTime;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.AllArgsConstructor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.NoArgsConstructor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.Serializable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.Timestamp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BasePojo</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Column(name = &quot;id&quot;, type = MySqlTypeConstant.VARCHAR, length = 32, isKey = true, comment = &quot;主键&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String id;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@CreateTime</span></span><br><span class=\"line\">\t<span class=\"meta\">@Column(name = &quot;create_time&quot;, type = MySqlTypeConstant.TIMESTAMP, isNull = false, comment = &quot;创建时间&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Timestamp createTime;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@UpdateTime</span></span><br><span class=\"line\">\t<span class=\"meta\">@Column(name = &quot;update_time&quot;, type = MySqlTypeConstant.TIMESTAMP, isNull = false, comment = &quot;更新时间&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Timestamp updateTime;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>OK, 这样只要继承了这个类的实体类都会拥有 createTime 和 updateTime 字段了, 这里 <code>@CreateTime</code> 和 <code>@UpdateTime</code> 可能会报错, 别急, 我们马上来实现他们。</p>\n<p>接下来我们要写两个注解, 用来在插入或者更新表时自动添加或者更新时间戳。在 common 模块中新建 <code>annotation</code> 和 <code>interceptor</code> 包, 在 <code>annotation</code> 中新建两个注解:<br>CreateTime.java:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.littleboy.common.annotation;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.ElementType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Retention;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Target;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@Target(&#123;ElementType.FIELD&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> CreateTime &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>UpdateTime.java:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.littleboy.common.annotation;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.ElementType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Retention;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Target;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@Target(&#123;ElementType.FIELD&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> UpdateTime &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>mybatis 有一个拦截器, 可以在执行 sql 之前做自己想做的事, 那么思路就比较清晰了, 在插入或者更新的时候, 检测每一个实体类的字段有没有加入 <code>@CreateTime</code> 和 <code>@UpdateTime</code>, 如果有, 则将该字段设置好当前时间就可以了。那么具体的实现步骤如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.littleboy.common.interceptor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.littleboy.common.annotation.CreateTime;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.littleboy.common.annotation.UpdateTime;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.lang3.ArrayUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.binding.MapperMethod;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.executor.Executor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.mapping.MappedStatement;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.mapping.SqlCommandType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.plugin.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.Timestamp;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.text.SimpleDateFormat;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Iterator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Properties;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Intercepts(&#123;@Signature(type = Executor.class, method = &quot;update&quot;, args = &#123;MappedStatement.class, Object.class&#125;)&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DateTimeInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title\">Interceptor</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">intercept</span><span class=\"params\">(Invocation invocation)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">\t\tMappedStatement mappedStatement = (MappedStatement)invocation.getArgs()[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 获取 SQL</span></span><br><span class=\"line\">\t\tSqlCommandType sqlCommandType = mappedStatement.getSqlCommandType();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 获取参数</span></span><br><span class=\"line\">\t\tObject parameter = invocation.getArgs()[<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\tObject param = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 获取私有成员变量</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (((MapperMethod.ParamMap)parameter).size() &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\tIterator iterator = ((MapperMethod.ParamMap)parameter).keySet().iterator();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> (iterator.hasNext()) &#123;</span><br><span class=\"line\">\t\t\t\tparam = ((MapperMethod.ParamMap)parameter).get(iterator.next());</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tField[] declaredFields = getAllFields(param);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (Field field : declaredFields) &#123;</span><br><span class=\"line\">\t\t\tfield.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (field.getAnnotation(CreateTime.class) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (SqlCommandType.INSERT.equals(sqlCommandType)) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// insert语句插入createTime</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// 这里设置时间，当然时间格式可以自定。比如转成String类型</span></span><br><span class=\"line\">\t\t\t\t\tfield.set(param, Timestamp.valueOf(<span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>).format(<span class=\"keyword\">new</span> Date())));</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (field.getAnnotation(UpdateTime.class) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (SqlCommandType.INSERT.equals(sqlCommandType)</span><br><span class=\"line\">\t\t\t\t\t\t|| SqlCommandType.UPDATE.equals(sqlCommandType)) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// insert 或update语句插入updateTime</span></span><br><span class=\"line\">\t\t\t\t\tfield.set(param, Timestamp.valueOf(<span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>).format(<span class=\"keyword\">new</span> Date())));</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> invocation.proceed();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 递归获取该类以及该类的父类所有的注解</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> obj 需要获取的类的实例</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> &lt;T&gt; 类型</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> 全部的注解</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> &lt;T&gt; Field[] getAllFields(T obj) &#123;</span><br><span class=\"line\">\t\tField[] declaredFields = obj.getClass().getDeclaredFields();</span><br><span class=\"line\">\t\tdeclaredFields = recursionParents(obj.getClass(), declaredFields);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> declaredFields;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 递归获取父类的注解</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> clas   反射的class</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> fields 全部注解</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> 全部的注解</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Field[] recursionParents(Class&lt;?&gt; clas, Field[] fields) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (clas.getSuperclass() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tClass clasSup = clas.getSuperclass();</span><br><span class=\"line\">\t\t\tfields = ArrayUtils.addAll(fields, clasSup.getDeclaredFields());</span><br><span class=\"line\">\t\t\tfields = recursionParents(clasSup, fields);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> fields;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">plugin</span><span class=\"params\">(Object o)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> Plugin.wrap(o, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setProperties</span><span class=\"params\">(Properties properties)</span> </span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>ok, 基类实现好了, 接下来开始设计用户实体类:</p>\n<p>SXUser.java:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.littleboy.pojo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.gitee.sunchenbin.mybatis.actable.annotation.Column;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.gitee.sunchenbin.mybatis.actable.annotation.Table;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.gitee.sunchenbin.mybatis.actable.constants.MySqlTypeConstant;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.Timestamp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.littleboy.common.annotation.CreateTime;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@Builder</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@ToString(callSuper = true)</span></span><br><span class=\"line\"><span class=\"meta\">@Table(name = &quot;sx_user&quot;, comment = &quot;用户表&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SXUser</span> <span class=\"keyword\">extends</span> <span class=\"title\">BasePojo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Column(name = &quot;account&quot;, type = MySqlTypeConstant.VARCHAR, length = 20, isNull = false, comment = &quot;账号(手机号)&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String account;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Column(name = &quot;passwd&quot;, type = MySqlTypeConstant.VARCHAR, length = 60, isNull = false, comment = &quot;密码&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String passwd;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Column(name = &quot;name&quot;, type = MySqlTypeConstant.VARCHAR, length = 10, isNull = false, comment = &quot;真实姓名&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Column(name = &quot;status&quot;, type = MySqlTypeConstant.SMALLINT, defaultValue = &quot;0&quot;, isNull = false, comment = &quot;-1 不可用 0 刚注册,未完善资料 1 完善了资料,未审核 2 审核过&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> status;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Column(name = &quot;type&quot;, type = MySqlTypeConstant.TINYINT, defaultValue = &quot;1&quot;, isNull = false, comment = &quot;1买家 2卖家&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> type;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@CreateTime</span></span><br><span class=\"line\">\t<span class=\"meta\">@Column(name = &quot;last_login_time&quot;, type = MySqlTypeConstant.TIMESTAMP,isNull = false, comment = &quot;最后一次登录时间&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Timestamp lastLoginTime;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>ok, 用户表设计好了, 接下来就是编写添加用户的功能了。</p>\n<h1 id=\"添加用户\"><a href=\"#添加用户\" class=\"headerlink\" title=\"添加用户\"></a>添加用户</h1><p>首先编写 dao 层:</p>\n<p>dao.SXUserMapper.java:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.littleboy.dao;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.littleboy.pojo.SXUser;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.annotations.Param;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">SXUserMapper</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 通过id获取用户</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> id 用户id</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 获取到的用户</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">SXUser <span class=\"title\">getUserById</span><span class=\"params\">(<span class=\"meta\">@Param(&quot;id&quot;)</span> String id)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 通过手机号获取用户</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> account 手机号</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 获取到的用户</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">SXUser <span class=\"title\">getUserByAccount</span><span class=\"params\">(<span class=\"meta\">@Param(&quot;account&quot;)</span> String account)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 插入一条用户记录</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> user 用户记录</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insertUser</span><span class=\"params\">(<span class=\"meta\">@Param(&quot;user&quot;)</span> SXUser user)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接下来是对应的 xml:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">mapper</span> <span class=\"meta-keyword\">PUBLIC</span> <span class=\"meta-string\">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class=\"meta-string\">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">&quot;com.littleboy.dao.SXUserMapper&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;getUserById&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;SXUser&quot;</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">&quot;String&quot;</span>&gt;</span></span><br><span class=\"line\">        select * from sx_user where sx_user.id = #&#123;id&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;getUserByAccount&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;SXUser&quot;</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">&quot;String&quot;</span>&gt;</span></span><br><span class=\"line\">        select * from sx_user where sx_user.account = #&#123;name&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">insert</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;insertUser&quot;</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">&quot;com.littleboy.pojo.SXUser&quot;</span>&gt;</span></span><br><span class=\"line\">        insert sx_user(id, account, passwd, name, create_time, update_time, last_login_time)</span><br><span class=\"line\">        values (#&#123;user.id&#125;, #&#123;user.account&#125;, #&#123;user.passwd&#125;, #&#123;user.name&#125;, #&#123;user.createTime&#125;, #&#123;user.updateTime&#125;, #&#123;user.lastLoginTime&#125;)</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">insert</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>服务层省略, 代码可以查看 <a href=\"https://gitee.com/littleboydk/shopping_mall\">码云-商城源码</a>。</p>\n<p>controller层:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.littleboy.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.littleboy.dto.ReturnInfo;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.littleboy.dto.UserDto;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.littleboy.pojo.SXUser;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.littleboy.service.SXUserService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(value = &quot;/user&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> SXUserService mSXUserService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 用户注册</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> userDto 用户注册信息</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 用户注册成功的信息</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(value = &quot;/register&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ReturnInfo <span class=\"title\">register</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> UserDto userDto)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(userDto);</span><br><span class=\"line\">        ReturnInfo&lt;UserDto&gt; returnInfo = <span class=\"keyword\">new</span> ReturnInfo&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!StringUtils.isAllEmpty(userDto.getAccount()) &amp;&amp;</span><br><span class=\"line\">                !StringUtils.isAllEmpty(userDto.getPasswd()) &amp;&amp;</span><br><span class=\"line\">                !StringUtils.isAllEmpty(userDto.getName())) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            mSXUserService.insertUser(</span><br><span class=\"line\">                    SXUser.builder()</span><br><span class=\"line\">                            .account(userDto.getAccount())</span><br><span class=\"line\">                            .passwd(<span class=\"keyword\">new</span> BCryptPasswordEncoder().encode(userDto.getPasswd()))</span><br><span class=\"line\">                            .name(userDto.getName()).build());</span><br><span class=\"line\"></span><br><span class=\"line\">            returnInfo.setObject(userDto);</span><br><span class=\"line\">            returnInfo.setReturnInfo(<span class=\"string\">&quot;恭喜你, 注册成功! &quot;</span>);</span><br><span class=\"line\">            returnInfo.setStatus(<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            returnInfo.setStatus(-<span class=\"number\">1</span>);</span><br><span class=\"line\">            returnInfo.setReturnInfo(<span class=\"string\">&quot;很抱歉, 注册失败, 请检查您填写的信息是否正确&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> returnInfo;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这里使用了 SpringSecurity 的密码加密方式, 嗯, 接口搞定, 写个测试用例测试一下:</p>"},{"title":"商城开发笔记-js配置","date":"2018-12-10T12:04:06.000Z","_content":"\n# js模块介绍\n\n这个项目使用的ui是[inspinia](http://cn.inspinia.cn/), 我觉得还挺好看的, 所以就选择了这个。\n\n大概看了一下, 有用到这几个js模块:\n\n* jquery\n* bootstrap\n* jquery.metisMenu\n* jquery.slimscroll\n* inspinia\n* pace\n* bootstrap-datepicker\n* summernote\n\n## 在Vue项目引用jQuery\n\n步骤如下:\n\n* 在`package.json`文件的`dependencies`中添加: `\"jquery\": \"^3.3.1\"`\n\n* 接着在`build/webpack.bash.conf.js`文件中的头部分添加:\n\n  ```js\n  const webpack = require('webpack')\n  ```\n\n* 还是这个文件, 在`module.exports`部分中添加:\n\n  ```js\n  plugins: [\n      new webpack.ProvidePlugin({\n          $: 'jquery'\n      })\n  ]\n  ```\n\n  如果已经有`plugins`, 就直接写声明部分\n\n* 最后在`main.js`入口文件中, 添加:\n\n  ```js\n  import $ from 'jquery'\n\n  Vue.prototype.$ = $\n  ```\n\n这样就可以直接使用`this.$`来进行对元素的操作了。\n\n## 使用 BootstrapVue\n\n首先安装:\n\n```js\nnpm install vue bootstrap-vue bootstrap --save-dev\n```\n\n接着在 main.js 中声明 bootstrap-vue:\n\n```js\nimport '~/bootstrap/dist/css/bootstrap.css'\nimport '~/bootstrap-vue/dist/bootstrap-vue.css'\nimport BootstrapVue from 'bootstrap-vue'\n\nVue.use(BootstrapVue)\n```\n\n这样就可以直接使用 bootstrap 的组件了。关于组件的详细信息可以查看[官网](https://bootstrap-vue.js.org)。\n\n## 在 Vue 中使用 jquery.metisMenu 和 jquery.slimscroll\n\n同样的, 首先安装:\n\n```js\nnpm install --save metismenu jquery-slimscroll\n```\n\n在 main.js 中使用 `require` 来加载 metisMenu 和 slimscoroll:\n\n```js\nrequire('metismenu')\nrequire('jquery-slimscroll')\n```\n\n关于 import 和 require 的区别, 请查看[import和require的区别](https://www.cnblogs.com/sunshq/p/7922182.html)。\n\n之后就可以直接使用了, 关于 metisMenu 的使用方法请查看[官网](https://mm.onokumus.com/index.html)。\n\n## 使用 bootstrap-datepicker\n\n这个和之前的步骤不太一样。首先到[官网](https://github.com/uxsolutions/bootstrap-datepicker/releases)将最新的版本下载下来, 然后将 css 和 js 两个文件夹放置项目的静态文件目录, 假定为 `/src/static`文件夹下。\n\n之后在 `main.js` 中引入文件:\n\n```js\nimport '../static/css/bootstrap-datepicker.css'\nimport '../static/js/bootstrap-datepicker.js'\n```\n\n就可以了。\n\n## 在 vue 中使用 summernote\n\n首先安装:\n\n```js\nnpm install --save codemirror font-awesome moment popper.js summernote tooltip.js\n```\n\n安装好之后在 main.js 中引入:\n\n```js\nrequire('popper.js')\nrequire('tooltip.js')\nrequire('bootstrap')\nrequire('summernote')\n```\n\n大功告成! \n\n## 在Vue中引用js文件\n\n先说怎么操作:\n\n1. 在`build/webpack.base.conf.js`文件中的`module.exports`部分里面的`alias`里添加:\n```js\nmodule.exports = {\n\t// ... 省略前面的代码\n\tresolve: {\n    extensions: ['.js', '.vue', '.json'],\n    alias: {\n\t\t`apiTools`: resolve('src/api/tools.js')\n\t}\n}\n\n// ...省略后面的代码\n```\n2. 在`main.js`里引用:\n```js\nimport tools from 'apiTools'\nimport tools2 from 'apiTools'\n```\n> 补充, apiTools.js内容是:\n```\nfunction tools () {\n  console.log('test')\n}\n\nfunction tools2() {\n\tconsole.log('test2')\n}\n\nexport default {\n  tools: tools(),\n  tools2: tools2()\n}\n```\n3. 调用js方法\n```\nexport default {\n  name: 'App',\n  mounted() {\n    tools\n    tools2\n  }\n}\n</script>\n```\n\n大概就是这三步, 那么接下来解释一下:\n\n第一步, 设置别名, 如果接触过linux系统的话, 对别名应该比较熟悉。其实就是字符串替换, 比如上面的例子, 就是将`apiTools`替换成了后面的路径。\n第二步, 引用js文件, 这里import后面的是js文件暴露出的方法名(或者是变量名), from 后面的是前面约定好的替换的字符串。\n最后一步, 直接调用就可以。\n\n# 补充\n\n在配置字符串替换的时候, 可能有关键字的问题, 这个还不太确定, 所以在配置的时候尽量避免使用那些常用的字符串。\n","source":"_posts/my_project/shopping_mall/js/shopping-mall-developNote-js.md","raw":"---\ntitle: 商城开发笔记-js配置\ndate: 2018-12-10 20:04:06\ncategories:\n- 开发笔记\n- 商城\n- 前端篇\ntags:\n- 商城开发\n- js\n---\n\n# js模块介绍\n\n这个项目使用的ui是[inspinia](http://cn.inspinia.cn/), 我觉得还挺好看的, 所以就选择了这个。\n\n大概看了一下, 有用到这几个js模块:\n\n* jquery\n* bootstrap\n* jquery.metisMenu\n* jquery.slimscroll\n* inspinia\n* pace\n* bootstrap-datepicker\n* summernote\n\n## 在Vue项目引用jQuery\n\n步骤如下:\n\n* 在`package.json`文件的`dependencies`中添加: `\"jquery\": \"^3.3.1\"`\n\n* 接着在`build/webpack.bash.conf.js`文件中的头部分添加:\n\n  ```js\n  const webpack = require('webpack')\n  ```\n\n* 还是这个文件, 在`module.exports`部分中添加:\n\n  ```js\n  plugins: [\n      new webpack.ProvidePlugin({\n          $: 'jquery'\n      })\n  ]\n  ```\n\n  如果已经有`plugins`, 就直接写声明部分\n\n* 最后在`main.js`入口文件中, 添加:\n\n  ```js\n  import $ from 'jquery'\n\n  Vue.prototype.$ = $\n  ```\n\n这样就可以直接使用`this.$`来进行对元素的操作了。\n\n## 使用 BootstrapVue\n\n首先安装:\n\n```js\nnpm install vue bootstrap-vue bootstrap --save-dev\n```\n\n接着在 main.js 中声明 bootstrap-vue:\n\n```js\nimport '~/bootstrap/dist/css/bootstrap.css'\nimport '~/bootstrap-vue/dist/bootstrap-vue.css'\nimport BootstrapVue from 'bootstrap-vue'\n\nVue.use(BootstrapVue)\n```\n\n这样就可以直接使用 bootstrap 的组件了。关于组件的详细信息可以查看[官网](https://bootstrap-vue.js.org)。\n\n## 在 Vue 中使用 jquery.metisMenu 和 jquery.slimscroll\n\n同样的, 首先安装:\n\n```js\nnpm install --save metismenu jquery-slimscroll\n```\n\n在 main.js 中使用 `require` 来加载 metisMenu 和 slimscoroll:\n\n```js\nrequire('metismenu')\nrequire('jquery-slimscroll')\n```\n\n关于 import 和 require 的区别, 请查看[import和require的区别](https://www.cnblogs.com/sunshq/p/7922182.html)。\n\n之后就可以直接使用了, 关于 metisMenu 的使用方法请查看[官网](https://mm.onokumus.com/index.html)。\n\n## 使用 bootstrap-datepicker\n\n这个和之前的步骤不太一样。首先到[官网](https://github.com/uxsolutions/bootstrap-datepicker/releases)将最新的版本下载下来, 然后将 css 和 js 两个文件夹放置项目的静态文件目录, 假定为 `/src/static`文件夹下。\n\n之后在 `main.js` 中引入文件:\n\n```js\nimport '../static/css/bootstrap-datepicker.css'\nimport '../static/js/bootstrap-datepicker.js'\n```\n\n就可以了。\n\n## 在 vue 中使用 summernote\n\n首先安装:\n\n```js\nnpm install --save codemirror font-awesome moment popper.js summernote tooltip.js\n```\n\n安装好之后在 main.js 中引入:\n\n```js\nrequire('popper.js')\nrequire('tooltip.js')\nrequire('bootstrap')\nrequire('summernote')\n```\n\n大功告成! \n\n## 在Vue中引用js文件\n\n先说怎么操作:\n\n1. 在`build/webpack.base.conf.js`文件中的`module.exports`部分里面的`alias`里添加:\n```js\nmodule.exports = {\n\t// ... 省略前面的代码\n\tresolve: {\n    extensions: ['.js', '.vue', '.json'],\n    alias: {\n\t\t`apiTools`: resolve('src/api/tools.js')\n\t}\n}\n\n// ...省略后面的代码\n```\n2. 在`main.js`里引用:\n```js\nimport tools from 'apiTools'\nimport tools2 from 'apiTools'\n```\n> 补充, apiTools.js内容是:\n```\nfunction tools () {\n  console.log('test')\n}\n\nfunction tools2() {\n\tconsole.log('test2')\n}\n\nexport default {\n  tools: tools(),\n  tools2: tools2()\n}\n```\n3. 调用js方法\n```\nexport default {\n  name: 'App',\n  mounted() {\n    tools\n    tools2\n  }\n}\n</script>\n```\n\n大概就是这三步, 那么接下来解释一下:\n\n第一步, 设置别名, 如果接触过linux系统的话, 对别名应该比较熟悉。其实就是字符串替换, 比如上面的例子, 就是将`apiTools`替换成了后面的路径。\n第二步, 引用js文件, 这里import后面的是js文件暴露出的方法名(或者是变量名), from 后面的是前面约定好的替换的字符串。\n最后一步, 直接调用就可以。\n\n# 补充\n\n在配置字符串替换的时候, 可能有关键字的问题, 这个还不太确定, 所以在配置的时候尽量避免使用那些常用的字符串。\n","slug":"my_project/shopping_mall/js/shopping-mall-developNote-js","published":1,"updated":"2021-10-14T08:18:54.651Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejut007f3vsbfe5g1jzj","content":"<h1 id=\"js模块介绍\"><a href=\"#js模块介绍\" class=\"headerlink\" title=\"js模块介绍\"></a>js模块介绍</h1><p>这个项目使用的ui是<a href=\"http://cn.inspinia.cn/\">inspinia</a>, 我觉得还挺好看的, 所以就选择了这个。</p>\n<p>大概看了一下, 有用到这几个js模块:</p>\n<ul>\n<li>jquery</li>\n<li>bootstrap</li>\n<li>jquery.metisMenu</li>\n<li>jquery.slimscroll</li>\n<li>inspinia</li>\n<li>pace</li>\n<li>bootstrap-datepicker</li>\n<li>summernote</li>\n</ul>\n<h2 id=\"在Vue项目引用jQuery\"><a href=\"#在Vue项目引用jQuery\" class=\"headerlink\" title=\"在Vue项目引用jQuery\"></a>在Vue项目引用jQuery</h2><p>步骤如下:</p>\n<ul>\n<li><p>在<code>package.json</code>文件的<code>dependencies</code>中添加: <code>&quot;jquery&quot;: &quot;^3.3.1&quot;</code></p>\n</li>\n<li><p>接着在<code>build/webpack.bash.conf.js</code>文件中的头部分添加:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;webpack&#x27;</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>还是这个文件, 在<code>module.exports</code>部分中添加:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.ProvidePlugin(&#123;</span><br><span class=\"line\">        <span class=\"attr\">$</span>: <span class=\"string\">&#x27;jquery&#x27;</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>如果已经有<code>plugins</code>, 就直接写声明部分</p>\n</li>\n<li><p>最后在<code>main.js</code>入口文件中, 添加:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> $ <span class=\"keyword\">from</span> <span class=\"string\">&#x27;jquery&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.prototype.$ = $</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>这样就可以直接使用<code>this.$</code>来进行对元素的操作了。</p>\n<h2 id=\"使用-BootstrapVue\"><a href=\"#使用-BootstrapVue\" class=\"headerlink\" title=\"使用 BootstrapVue\"></a>使用 BootstrapVue</h2><p>首先安装:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install vue bootstrap-vue bootstrap --save-dev</span><br></pre></td></tr></table></figure>\n\n<p>接着在 main.js 中声明 bootstrap-vue:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;~/bootstrap/dist/css/bootstrap.css&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;~/bootstrap-vue/dist/bootstrap-vue.css&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> BootstrapVue <span class=\"keyword\">from</span> <span class=\"string\">&#x27;bootstrap-vue&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(BootstrapVue)</span><br></pre></td></tr></table></figure>\n\n<p>这样就可以直接使用 bootstrap 的组件了。关于组件的详细信息可以查看<a href=\"https://bootstrap-vue.js.org/\">官网</a>。</p>\n<h2 id=\"在-Vue-中使用-jquery-metisMenu-和-jquery-slimscroll\"><a href=\"#在-Vue-中使用-jquery-metisMenu-和-jquery-slimscroll\" class=\"headerlink\" title=\"在 Vue 中使用 jquery.metisMenu 和 jquery.slimscroll\"></a>在 Vue 中使用 jquery.metisMenu 和 jquery.slimscroll</h2><p>同样的, 首先安装:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save metismenu jquery-slimscroll</span><br></pre></td></tr></table></figure>\n\n<p>在 main.js 中使用 <code>require</code> 来加载 metisMenu 和 slimscoroll:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">&#x27;metismenu&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">&#x27;jquery-slimscroll&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>关于 import 和 require 的区别, 请查看<a href=\"https://www.cnblogs.com/sunshq/p/7922182.html\">import和require的区别</a>。</p>\n<p>之后就可以直接使用了, 关于 metisMenu 的使用方法请查看<a href=\"https://mm.onokumus.com/index.html\">官网</a>。</p>\n<h2 id=\"使用-bootstrap-datepicker\"><a href=\"#使用-bootstrap-datepicker\" class=\"headerlink\" title=\"使用 bootstrap-datepicker\"></a>使用 bootstrap-datepicker</h2><p>这个和之前的步骤不太一样。首先到<a href=\"https://github.com/uxsolutions/bootstrap-datepicker/releases\">官网</a>将最新的版本下载下来, 然后将 css 和 js 两个文件夹放置项目的静态文件目录, 假定为 <code>/src/static</code>文件夹下。</p>\n<p>之后在 <code>main.js</code> 中引入文件:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;../static/css/bootstrap-datepicker.css&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;../static/js/bootstrap-datepicker.js&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>就可以了。</p>\n<h2 id=\"在-vue-中使用-summernote\"><a href=\"#在-vue-中使用-summernote\" class=\"headerlink\" title=\"在 vue 中使用 summernote\"></a>在 vue 中使用 summernote</h2><p>首先安装:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save codemirror font-awesome moment popper.js summernote tooltip.js</span><br></pre></td></tr></table></figure>\n\n<p>安装好之后在 main.js 中引入:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">&#x27;popper.js&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">&#x27;tooltip.js&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">&#x27;bootstrap&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">&#x27;summernote&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>大功告成! </p>\n<h2 id=\"在Vue中引用js文件\"><a href=\"#在Vue中引用js文件\" class=\"headerlink\" title=\"在Vue中引用js文件\"></a>在Vue中引用js文件</h2><p>先说怎么操作:</p>\n<ol>\n<li>在<code>build/webpack.base.conf.js</code>文件中的<code>module.exports</code>部分里面的<code>alias</code>里添加:<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// ... 省略前面的代码</span></span><br><span class=\"line\">\t<span class=\"attr\">resolve</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">extensions</span>: [<span class=\"string\">&#x27;.js&#x27;</span>, <span class=\"string\">&#x27;.vue&#x27;</span>, <span class=\"string\">&#x27;.json&#x27;</span>],</span><br><span class=\"line\">    <span class=\"attr\">alias</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"string\">`apiTools`</span>: resolve(<span class=\"string\">&#x27;src/api/tools.js&#x27;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ...省略后面的代码</span></span><br></pre></td></tr></table></figure></li>\n<li>在<code>main.js</code>里引用:<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> tools <span class=\"keyword\">from</span> <span class=\"string\">&#x27;apiTools&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> tools2 <span class=\"keyword\">from</span> <span class=\"string\">&#x27;apiTools&#x27;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>补充, apiTools.js内容是:</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function tools () &#123;</span><br><span class=\"line\">  console.log(&#x27;test&#x27;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function tools2() &#123;</span><br><span class=\"line\">\tconsole.log(&#x27;test2&#x27;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  tools: tools(),</span><br><span class=\"line\">  tools2: tools2()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>调用js方法<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export default &#123;</span><br><span class=\"line\">  name: &#x27;App&#x27;,</span><br><span class=\"line\">  mounted() &#123;</span><br><span class=\"line\">    tools</span><br><span class=\"line\">    tools2</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>大概就是这三步, 那么接下来解释一下:</p>\n<p>第一步, 设置别名, 如果接触过linux系统的话, 对别名应该比较熟悉。其实就是字符串替换, 比如上面的例子, 就是将<code>apiTools</code>替换成了后面的路径。<br>第二步, 引用js文件, 这里import后面的是js文件暴露出的方法名(或者是变量名), from 后面的是前面约定好的替换的字符串。<br>最后一步, 直接调用就可以。</p>\n<h1 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h1><p>在配置字符串替换的时候, 可能有关键字的问题, 这个还不太确定, 所以在配置的时候尽量避免使用那些常用的字符串。</p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"","more":"<h1 id=\"js模块介绍\"><a href=\"#js模块介绍\" class=\"headerlink\" title=\"js模块介绍\"></a>js模块介绍</h1><p>这个项目使用的ui是<a href=\"http://cn.inspinia.cn/\">inspinia</a>, 我觉得还挺好看的, 所以就选择了这个。</p>\n<p>大概看了一下, 有用到这几个js模块:</p>\n<ul>\n<li>jquery</li>\n<li>bootstrap</li>\n<li>jquery.metisMenu</li>\n<li>jquery.slimscroll</li>\n<li>inspinia</li>\n<li>pace</li>\n<li>bootstrap-datepicker</li>\n<li>summernote</li>\n</ul>\n<h2 id=\"在Vue项目引用jQuery\"><a href=\"#在Vue项目引用jQuery\" class=\"headerlink\" title=\"在Vue项目引用jQuery\"></a>在Vue项目引用jQuery</h2><p>步骤如下:</p>\n<ul>\n<li><p>在<code>package.json</code>文件的<code>dependencies</code>中添加: <code>&quot;jquery&quot;: &quot;^3.3.1&quot;</code></p>\n</li>\n<li><p>接着在<code>build/webpack.bash.conf.js</code>文件中的头部分添加:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;webpack&#x27;</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>还是这个文件, 在<code>module.exports</code>部分中添加:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.ProvidePlugin(&#123;</span><br><span class=\"line\">        <span class=\"attr\">$</span>: <span class=\"string\">&#x27;jquery&#x27;</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>如果已经有<code>plugins</code>, 就直接写声明部分</p>\n</li>\n<li><p>最后在<code>main.js</code>入口文件中, 添加:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> $ <span class=\"keyword\">from</span> <span class=\"string\">&#x27;jquery&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.prototype.$ = $</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>这样就可以直接使用<code>this.$</code>来进行对元素的操作了。</p>\n<h2 id=\"使用-BootstrapVue\"><a href=\"#使用-BootstrapVue\" class=\"headerlink\" title=\"使用 BootstrapVue\"></a>使用 BootstrapVue</h2><p>首先安装:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install vue bootstrap-vue bootstrap --save-dev</span><br></pre></td></tr></table></figure>\n\n<p>接着在 main.js 中声明 bootstrap-vue:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;~/bootstrap/dist/css/bootstrap.css&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;~/bootstrap-vue/dist/bootstrap-vue.css&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> BootstrapVue <span class=\"keyword\">from</span> <span class=\"string\">&#x27;bootstrap-vue&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(BootstrapVue)</span><br></pre></td></tr></table></figure>\n\n<p>这样就可以直接使用 bootstrap 的组件了。关于组件的详细信息可以查看<a href=\"https://bootstrap-vue.js.org/\">官网</a>。</p>\n<h2 id=\"在-Vue-中使用-jquery-metisMenu-和-jquery-slimscroll\"><a href=\"#在-Vue-中使用-jquery-metisMenu-和-jquery-slimscroll\" class=\"headerlink\" title=\"在 Vue 中使用 jquery.metisMenu 和 jquery.slimscroll\"></a>在 Vue 中使用 jquery.metisMenu 和 jquery.slimscroll</h2><p>同样的, 首先安装:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save metismenu jquery-slimscroll</span><br></pre></td></tr></table></figure>\n\n<p>在 main.js 中使用 <code>require</code> 来加载 metisMenu 和 slimscoroll:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">&#x27;metismenu&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">&#x27;jquery-slimscroll&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>关于 import 和 require 的区别, 请查看<a href=\"https://www.cnblogs.com/sunshq/p/7922182.html\">import和require的区别</a>。</p>\n<p>之后就可以直接使用了, 关于 metisMenu 的使用方法请查看<a href=\"https://mm.onokumus.com/index.html\">官网</a>。</p>\n<h2 id=\"使用-bootstrap-datepicker\"><a href=\"#使用-bootstrap-datepicker\" class=\"headerlink\" title=\"使用 bootstrap-datepicker\"></a>使用 bootstrap-datepicker</h2><p>这个和之前的步骤不太一样。首先到<a href=\"https://github.com/uxsolutions/bootstrap-datepicker/releases\">官网</a>将最新的版本下载下来, 然后将 css 和 js 两个文件夹放置项目的静态文件目录, 假定为 <code>/src/static</code>文件夹下。</p>\n<p>之后在 <code>main.js</code> 中引入文件:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;../static/css/bootstrap-datepicker.css&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;../static/js/bootstrap-datepicker.js&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>就可以了。</p>\n<h2 id=\"在-vue-中使用-summernote\"><a href=\"#在-vue-中使用-summernote\" class=\"headerlink\" title=\"在 vue 中使用 summernote\"></a>在 vue 中使用 summernote</h2><p>首先安装:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save codemirror font-awesome moment popper.js summernote tooltip.js</span><br></pre></td></tr></table></figure>\n\n<p>安装好之后在 main.js 中引入:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">&#x27;popper.js&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">&#x27;tooltip.js&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">&#x27;bootstrap&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">&#x27;summernote&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>大功告成! </p>\n<h2 id=\"在Vue中引用js文件\"><a href=\"#在Vue中引用js文件\" class=\"headerlink\" title=\"在Vue中引用js文件\"></a>在Vue中引用js文件</h2><p>先说怎么操作:</p>\n<ol>\n<li>在<code>build/webpack.base.conf.js</code>文件中的<code>module.exports</code>部分里面的<code>alias</code>里添加:<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// ... 省略前面的代码</span></span><br><span class=\"line\">\t<span class=\"attr\">resolve</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">extensions</span>: [<span class=\"string\">&#x27;.js&#x27;</span>, <span class=\"string\">&#x27;.vue&#x27;</span>, <span class=\"string\">&#x27;.json&#x27;</span>],</span><br><span class=\"line\">    <span class=\"attr\">alias</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"string\">`apiTools`</span>: resolve(<span class=\"string\">&#x27;src/api/tools.js&#x27;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ...省略后面的代码</span></span><br></pre></td></tr></table></figure></li>\n<li>在<code>main.js</code>里引用:<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> tools <span class=\"keyword\">from</span> <span class=\"string\">&#x27;apiTools&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> tools2 <span class=\"keyword\">from</span> <span class=\"string\">&#x27;apiTools&#x27;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>补充, apiTools.js内容是:</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function tools () &#123;</span><br><span class=\"line\">  console.log(&#x27;test&#x27;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function tools2() &#123;</span><br><span class=\"line\">\tconsole.log(&#x27;test2&#x27;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  tools: tools(),</span><br><span class=\"line\">  tools2: tools2()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>调用js方法<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export default &#123;</span><br><span class=\"line\">  name: &#x27;App&#x27;,</span><br><span class=\"line\">  mounted() &#123;</span><br><span class=\"line\">    tools</span><br><span class=\"line\">    tools2</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>大概就是这三步, 那么接下来解释一下:</p>\n<p>第一步, 设置别名, 如果接触过linux系统的话, 对别名应该比较熟悉。其实就是字符串替换, 比如上面的例子, 就是将<code>apiTools</code>替换成了后面的路径。<br>第二步, 引用js文件, 这里import后面的是js文件暴露出的方法名(或者是变量名), from 后面的是前面约定好的替换的字符串。<br>最后一步, 直接调用就可以。</p>\n<h1 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h1><p>在配置字符串替换的时候, 可能有关键字的问题, 这个还不太确定, 所以在配置的时候尽量避免使用那些常用的字符串。</p>\n"},{"title":"商城开发笔记-小知识点-mybatis构建实体类","date":"2018-12-03T13:36:52.000Z","_content":"\n# 思路\n\n主要使用了`org.mybatis.generator.api.MyBatisGenerator`这个类, 该类使用xml文件来对表进行映射, 从而创建对应的实体类。\n\n<!--more-->\n\n<br>\n\n# 流程\n\n1. 创建一个用来存储警告信息的list\n2. 将映射文件初始化mybatis的配置类中\n3. 执行generate()方法\n\n实际操作:\n\n首先需要使用mybatis-generator的依赖:\n\n```xml\n <!-- https://mvnrepository.com/artifact/org.mybatis.generator/mybatis-generator-core -->\n<dependency>\n       <groupId>org.mybatis.generator</groupId>\n       <artifactId>mybatis-generator-core</artifactId>\n       <version>1.3.7</version>\n</dependency>\n```\n\n接着是使用方法:\n\n```java\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.mybatis.generator.api.MyBatisGenerator;\nimport org.mybatis.generator.config.Configuration;\nimport org.mybatis.generator.config.xml.ConfigurationParser;\nimport org.mybatis.generator.internal.DefaultShellCallback;\n\npublic class MybatisGenerateClass {\n  public static void generateClass() throws Exception {\n    // 1. 创建一个用来存储警告信息的list\n    List<String> warningsList = new ArrayList<String>();\n    // 2. 将映射文件初始化mybatis的配置类中\n    File configFile = new File(\"你的配置文件.xml\");\n    boolean overwrite = true;\n    ConfigurationParser cp = new ConfigurationParser(warningsList);\n    Configuration config = cp.parseConfiguration(configFile);\n    DefaultShellCallback callback = new DefaultCallback(overwrite);\n    // 3. 执行generate()方法\n    MyBatisGenerator myBatisGenerator = new MyBatisGenerator(config, callback, warningsList);\n    myBatisGenerator.generate(null);\n  }\n}\n```\n\n<br>\n\n# 映射文件\n\n需要包含:\n\n* 数据库驱动jar\n* 数据库链接地址, 账密, 需要注意一点, 我这里将`&`使用了`&amp;`来代表, 并且指定了时区\n* 实体类存放的位置以及相关设置\n* dao以及映射文件存放位置以及相关设置\n* 需要映射的表\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE generatorConfiguration\n        PUBLIC \"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd\">\n<generatorConfiguration>\n    <!--数据库驱动,最好不要有中文字符,不然会找不到,使用绝对地址更加稳定-->\n    <classPathEntry location=\"C:\\Users\\littleboy\\.m2\\repository\\mysql\\mysql-connector-java\\8.0.11\\mysql-connector-java-8.0.11.jar\" />\n    <context id=\"DB2Tables\"  targetRuntime=\"MyBatis3\">\n      \t<!--注释规则-->\n      \t<!--suppressAllComments  false时打开注释，true时关闭注释-->\n      \t<!--suppressDate  false时打开时间标志，true时关闭...真是反人类啊-->\n        <commentGenerator>\n            <property name=\"suppressDate\" value=\"true\"/>\n            <property name=\"suppressAllComments\" value=\"true\"/>\n        </commentGenerator>\n      \n        <!--数据库链接地址、账号、密码-->\n        <jdbcConnection driverClass=\"com.mysql.cj.jdbc.Driver\"\n                        connectionURL=\"jdbc:mysql://localhost/taotao?characterEncoding=utf8&amp;useSSL=true&amp;serverTimezone=UTC\"\n                        userId=\"username\"\n                        password=\"password\">\n        </jdbcConnection>\n      \n      \t<!--mybatis里专门用来处理NUMERIC和DECIMAL类型的策略-->\n        <javaTypeResolver>\n            <property name=\"forceBigDecimals\" value=\"false\"/>\n        </javaTypeResolver>\n        <!--生成Model类存放位置-->\n        <javaModelGenerator targetPackage=\"com.littleboy.pojo\" targetProject=\"src\">\n            <property name=\"enableSubPackages\" value=\"true\"/>\n            <property name=\"trimStrings\" value=\"true\"/>\n        </javaModelGenerator>\n        <!--生成映射文件存放位置-->\n        <sqlMapGenerator targetPackage=\"com.littleboy.dao\" targetProject=\"src\">\n            <property name=\"enableSubPackages\" value=\"true\"/>\n        </sqlMapGenerator>\n        <!--生成DaoMapper类存放位置-->\n        <javaClientGenerator type=\"XMLMAPPER\" targetPackage=\"com.littleboy.dao\" targetProject=\"src\">\n            <property name=\"enableSubPackages\" value=\"true\"/>\n        </javaClientGenerator>\n        <!--生成对应表及类名,需要记住的一点是逆向工程无法生成关联关系,只能生成单表操作-->\n        <table tableName=\"tb_content\" enableCountByExample=\"false\" enableUpdateByExample=\"false\"\n               enableDeleteByExample=\"false\" enableSelectByExample=\"false\"\n               selectByExampleQueryId=\"false\"></table>\n        <table tableName=\"tb_content_category\" enableCountByExample=\"false\" enableUpdateByExample=\"false\"\n               enableDeleteByExample=\"false\" enableSelectByExample=\"false\"\n               selectByExampleQueryId=\"false\"></table>\n        <table tableName=\"tb_item\" enableCountByExample=\"false\" enableUpdateByExample=\"false\"\n               enableDeleteByExample=\"false\" enableSelectByExample=\"false\"\n               selectByExampleQueryId=\"false\"></table>\n        <table tableName=\"tb_item_cat\" enableCountByExample=\"false\" enableUpdateByExample=\"false\"\n               enableDeleteByExample=\"false\" enableSelectByExample=\"false\"\n               selectByExampleQueryId=\"false\"></table>\n        <table tableName=\"tb_item_desc\" enableCountByExample=\"false\" enableUpdateByExample=\"false\"\n               enableDeleteByExample=\"false\" enableSelectByExample=\"false\"\n               selectByExampleQueryId=\"false\"></table>\n        <table tableName=\"tb_item_param\" enableCountByExample=\"false\" enableUpdateByExample=\"false\"\n               enableDeleteByExample=\"false\" enableSelectByExample=\"false\"\n               selectByExampleQueryId=\"false\"></table>\n        <table tableName=\"tb_item_param_item\" enableCountByExample=\"false\" enableUpdateByExample=\"false\"\n               enableDeleteByExample=\"false\" enableSelectByExample=\"false\"\n               selectByExampleQueryId=\"false\"></table>\n        <table tableName=\"tb_order\" enableCountByExample=\"false\" enableUpdateByExample=\"false\"\n               enableDeleteByExample=\"false\" enableSelectByExample=\"false\"\n               selectByExampleQueryId=\"false\"></table>\n        <table tableName=\"tb_order_item\" enableCountByExample=\"false\" enableUpdateByExample=\"false\"\n               enableDeleteByExample=\"false\" enableSelectByExample=\"false\"\n               selectByExampleQueryId=\"false\"></table>\n        <table tableName=\"tb_order_shipping\" enableCountByExample=\"false\" enableUpdateByExample=\"false\"\n               enableDeleteByExample=\"false\" enableSelectByExample=\"false\"\n               selectByExampleQueryId=\"false\"></table>\n        <table tableName=\"tb_user\" enableCountByExample=\"false\" enableUpdateByExample=\"false\"\n               enableDeleteByExample=\"false\" enableSelectByExample=\"false\"\n               selectByExampleQueryId=\"false\"></table>\n    </context>\n</generatorConfiguration>\n```\n\n","source":"_posts/my_project/shopping_mall/taps/shopping-mall-developNote-mybatis-automatic-generation.md","raw":"---\ntitle: 商城开发笔记-小知识点-mybatis构建实体类\ndate: 2018-12-03 21:36:52\ncategories:\n- 开发笔记\n- 商城\n- 技巧篇\ntags:\n- 商城开发\n- 小知识点\n---\n\n# 思路\n\n主要使用了`org.mybatis.generator.api.MyBatisGenerator`这个类, 该类使用xml文件来对表进行映射, 从而创建对应的实体类。\n\n<!--more-->\n\n<br>\n\n# 流程\n\n1. 创建一个用来存储警告信息的list\n2. 将映射文件初始化mybatis的配置类中\n3. 执行generate()方法\n\n实际操作:\n\n首先需要使用mybatis-generator的依赖:\n\n```xml\n <!-- https://mvnrepository.com/artifact/org.mybatis.generator/mybatis-generator-core -->\n<dependency>\n       <groupId>org.mybatis.generator</groupId>\n       <artifactId>mybatis-generator-core</artifactId>\n       <version>1.3.7</version>\n</dependency>\n```\n\n接着是使用方法:\n\n```java\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.mybatis.generator.api.MyBatisGenerator;\nimport org.mybatis.generator.config.Configuration;\nimport org.mybatis.generator.config.xml.ConfigurationParser;\nimport org.mybatis.generator.internal.DefaultShellCallback;\n\npublic class MybatisGenerateClass {\n  public static void generateClass() throws Exception {\n    // 1. 创建一个用来存储警告信息的list\n    List<String> warningsList = new ArrayList<String>();\n    // 2. 将映射文件初始化mybatis的配置类中\n    File configFile = new File(\"你的配置文件.xml\");\n    boolean overwrite = true;\n    ConfigurationParser cp = new ConfigurationParser(warningsList);\n    Configuration config = cp.parseConfiguration(configFile);\n    DefaultShellCallback callback = new DefaultCallback(overwrite);\n    // 3. 执行generate()方法\n    MyBatisGenerator myBatisGenerator = new MyBatisGenerator(config, callback, warningsList);\n    myBatisGenerator.generate(null);\n  }\n}\n```\n\n<br>\n\n# 映射文件\n\n需要包含:\n\n* 数据库驱动jar\n* 数据库链接地址, 账密, 需要注意一点, 我这里将`&`使用了`&amp;`来代表, 并且指定了时区\n* 实体类存放的位置以及相关设置\n* dao以及映射文件存放位置以及相关设置\n* 需要映射的表\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE generatorConfiguration\n        PUBLIC \"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd\">\n<generatorConfiguration>\n    <!--数据库驱动,最好不要有中文字符,不然会找不到,使用绝对地址更加稳定-->\n    <classPathEntry location=\"C:\\Users\\littleboy\\.m2\\repository\\mysql\\mysql-connector-java\\8.0.11\\mysql-connector-java-8.0.11.jar\" />\n    <context id=\"DB2Tables\"  targetRuntime=\"MyBatis3\">\n      \t<!--注释规则-->\n      \t<!--suppressAllComments  false时打开注释，true时关闭注释-->\n      \t<!--suppressDate  false时打开时间标志，true时关闭...真是反人类啊-->\n        <commentGenerator>\n            <property name=\"suppressDate\" value=\"true\"/>\n            <property name=\"suppressAllComments\" value=\"true\"/>\n        </commentGenerator>\n      \n        <!--数据库链接地址、账号、密码-->\n        <jdbcConnection driverClass=\"com.mysql.cj.jdbc.Driver\"\n                        connectionURL=\"jdbc:mysql://localhost/taotao?characterEncoding=utf8&amp;useSSL=true&amp;serverTimezone=UTC\"\n                        userId=\"username\"\n                        password=\"password\">\n        </jdbcConnection>\n      \n      \t<!--mybatis里专门用来处理NUMERIC和DECIMAL类型的策略-->\n        <javaTypeResolver>\n            <property name=\"forceBigDecimals\" value=\"false\"/>\n        </javaTypeResolver>\n        <!--生成Model类存放位置-->\n        <javaModelGenerator targetPackage=\"com.littleboy.pojo\" targetProject=\"src\">\n            <property name=\"enableSubPackages\" value=\"true\"/>\n            <property name=\"trimStrings\" value=\"true\"/>\n        </javaModelGenerator>\n        <!--生成映射文件存放位置-->\n        <sqlMapGenerator targetPackage=\"com.littleboy.dao\" targetProject=\"src\">\n            <property name=\"enableSubPackages\" value=\"true\"/>\n        </sqlMapGenerator>\n        <!--生成DaoMapper类存放位置-->\n        <javaClientGenerator type=\"XMLMAPPER\" targetPackage=\"com.littleboy.dao\" targetProject=\"src\">\n            <property name=\"enableSubPackages\" value=\"true\"/>\n        </javaClientGenerator>\n        <!--生成对应表及类名,需要记住的一点是逆向工程无法生成关联关系,只能生成单表操作-->\n        <table tableName=\"tb_content\" enableCountByExample=\"false\" enableUpdateByExample=\"false\"\n               enableDeleteByExample=\"false\" enableSelectByExample=\"false\"\n               selectByExampleQueryId=\"false\"></table>\n        <table tableName=\"tb_content_category\" enableCountByExample=\"false\" enableUpdateByExample=\"false\"\n               enableDeleteByExample=\"false\" enableSelectByExample=\"false\"\n               selectByExampleQueryId=\"false\"></table>\n        <table tableName=\"tb_item\" enableCountByExample=\"false\" enableUpdateByExample=\"false\"\n               enableDeleteByExample=\"false\" enableSelectByExample=\"false\"\n               selectByExampleQueryId=\"false\"></table>\n        <table tableName=\"tb_item_cat\" enableCountByExample=\"false\" enableUpdateByExample=\"false\"\n               enableDeleteByExample=\"false\" enableSelectByExample=\"false\"\n               selectByExampleQueryId=\"false\"></table>\n        <table tableName=\"tb_item_desc\" enableCountByExample=\"false\" enableUpdateByExample=\"false\"\n               enableDeleteByExample=\"false\" enableSelectByExample=\"false\"\n               selectByExampleQueryId=\"false\"></table>\n        <table tableName=\"tb_item_param\" enableCountByExample=\"false\" enableUpdateByExample=\"false\"\n               enableDeleteByExample=\"false\" enableSelectByExample=\"false\"\n               selectByExampleQueryId=\"false\"></table>\n        <table tableName=\"tb_item_param_item\" enableCountByExample=\"false\" enableUpdateByExample=\"false\"\n               enableDeleteByExample=\"false\" enableSelectByExample=\"false\"\n               selectByExampleQueryId=\"false\"></table>\n        <table tableName=\"tb_order\" enableCountByExample=\"false\" enableUpdateByExample=\"false\"\n               enableDeleteByExample=\"false\" enableSelectByExample=\"false\"\n               selectByExampleQueryId=\"false\"></table>\n        <table tableName=\"tb_order_item\" enableCountByExample=\"false\" enableUpdateByExample=\"false\"\n               enableDeleteByExample=\"false\" enableSelectByExample=\"false\"\n               selectByExampleQueryId=\"false\"></table>\n        <table tableName=\"tb_order_shipping\" enableCountByExample=\"false\" enableUpdateByExample=\"false\"\n               enableDeleteByExample=\"false\" enableSelectByExample=\"false\"\n               selectByExampleQueryId=\"false\"></table>\n        <table tableName=\"tb_user\" enableCountByExample=\"false\" enableUpdateByExample=\"false\"\n               enableDeleteByExample=\"false\" enableSelectByExample=\"false\"\n               selectByExampleQueryId=\"false\"></table>\n    </context>\n</generatorConfiguration>\n```\n\n","slug":"my_project/shopping_mall/taps/shopping-mall-developNote-mybatis-automatic-generation","published":1,"updated":"2021-10-14T08:18:54.659Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejv0007j3vsbbmus7f5h","content":"<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>主要使用了<code>org.mybatis.generator.api.MyBatisGenerator</code>这个类, 该类使用xml文件来对表进行映射, 从而创建对应的实体类。</p>\n<span id=\"more\"></span>\n\n<br>\n\n<h1 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h1><ol>\n<li>创建一个用来存储警告信息的list</li>\n<li>将映射文件初始化mybatis的配置类中</li>\n<li>执行generate()方法</li>\n</ol>\n<p>实际操作:</p>\n<p>首先需要使用mybatis-generator的依赖:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/org.mybatis.generator/mybatis-generator-core --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis.generator<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-generator-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.3.7<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>接着是使用方法:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.mybatis.generator.api.MyBatisGenerator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.mybatis.generator.config.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.mybatis.generator.config.xml.ConfigurationParser;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.mybatis.generator.internal.DefaultShellCallback;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MybatisGenerateClass</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">generateClass</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1. 创建一个用来存储警告信息的list</span></span><br><span class=\"line\">    List&lt;String&gt; warningsList = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\">    <span class=\"comment\">// 2. 将映射文件初始化mybatis的配置类中</span></span><br><span class=\"line\">    File configFile = <span class=\"keyword\">new</span> File(<span class=\"string\">&quot;你的配置文件.xml&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> overwrite = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    ConfigurationParser cp = <span class=\"keyword\">new</span> ConfigurationParser(warningsList);</span><br><span class=\"line\">    Configuration config = cp.parseConfiguration(configFile);</span><br><span class=\"line\">    DefaultShellCallback callback = <span class=\"keyword\">new</span> DefaultCallback(overwrite);</span><br><span class=\"line\">    <span class=\"comment\">// 3. 执行generate()方法</span></span><br><span class=\"line\">    MyBatisGenerator myBatisGenerator = <span class=\"keyword\">new</span> MyBatisGenerator(config, callback, warningsList);</span><br><span class=\"line\">    myBatisGenerator.generate(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h1 id=\"映射文件\"><a href=\"#映射文件\" class=\"headerlink\" title=\"映射文件\"></a>映射文件</h1><p>需要包含:</p>\n<ul>\n<li>数据库驱动jar</li>\n<li>数据库链接地址, 账密, 需要注意一点, 我这里将<code>&amp;</code>使用了<code>&amp;amp;</code>来代表, 并且指定了时区</li>\n<li>实体类存放的位置以及相关设置</li>\n<li>dao以及映射文件存放位置以及相关设置</li>\n<li>需要映射的表</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">generatorConfiguration</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-keyword\">PUBLIC</span> <span class=\"meta-string\">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-string\">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">generatorConfiguration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--数据库驱动,最好不要有中文字符,不然会找不到,使用绝对地址更加稳定--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">classPathEntry</span> <span class=\"attr\">location</span>=<span class=\"string\">&quot;C:\\Users\\littleboy\\.m2\\repository\\mysql\\mysql-connector-java\\8.0.11\\mysql-connector-java-8.0.11.jar&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;DB2Tables&quot;</span>  <span class=\"attr\">targetRuntime</span>=<span class=\"string\">&quot;MyBatis3&quot;</span>&gt;</span></span><br><span class=\"line\">      \t<span class=\"comment\">&lt;!--注释规则--&gt;</span></span><br><span class=\"line\">      \t<span class=\"comment\">&lt;!--suppressAllComments  false时打开注释，true时关闭注释--&gt;</span></span><br><span class=\"line\">      \t<span class=\"comment\">&lt;!--suppressDate  false时打开时间标志，true时关闭...真是反人类啊--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">commentGenerator</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;suppressDate&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;true&quot;</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;suppressAllComments&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;true&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">commentGenerator</span>&gt;</span></span><br><span class=\"line\">      </span><br><span class=\"line\">        <span class=\"comment\">&lt;!--数据库链接地址、账号、密码--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">jdbcConnection</span> <span class=\"attr\">driverClass</span>=<span class=\"string\">&quot;com.mysql.cj.jdbc.Driver&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                        <span class=\"attr\">connectionURL</span>=<span class=\"string\">&quot;jdbc:mysql://localhost/taotao?characterEncoding=utf8<span class=\"symbol\">&amp;amp;</span>useSSL=true<span class=\"symbol\">&amp;amp;</span>serverTimezone=UTC&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                        <span class=\"attr\">userId</span>=<span class=\"string\">&quot;username&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                        <span class=\"attr\">password</span>=<span class=\"string\">&quot;password&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">jdbcConnection</span>&gt;</span></span><br><span class=\"line\">      </span><br><span class=\"line\">      \t<span class=\"comment\">&lt;!--mybatis里专门用来处理NUMERIC和DECIMAL类型的策略--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">javaTypeResolver</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;forceBigDecimals&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;false&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">javaTypeResolver</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--生成Model类存放位置--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">javaModelGenerator</span> <span class=\"attr\">targetPackage</span>=<span class=\"string\">&quot;com.littleboy.pojo&quot;</span> <span class=\"attr\">targetProject</span>=<span class=\"string\">&quot;src&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;enableSubPackages&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;true&quot;</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;trimStrings&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;true&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">javaModelGenerator</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--生成映射文件存放位置--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sqlMapGenerator</span> <span class=\"attr\">targetPackage</span>=<span class=\"string\">&quot;com.littleboy.dao&quot;</span> <span class=\"attr\">targetProject</span>=<span class=\"string\">&quot;src&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;enableSubPackages&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;true&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">sqlMapGenerator</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--生成DaoMapper类存放位置--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">javaClientGenerator</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;XMLMAPPER&quot;</span> <span class=\"attr\">targetPackage</span>=<span class=\"string\">&quot;com.littleboy.dao&quot;</span> <span class=\"attr\">targetProject</span>=<span class=\"string\">&quot;src&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;enableSubPackages&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;true&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">javaClientGenerator</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--生成对应表及类名,需要记住的一点是逆向工程无法生成关联关系,只能生成单表操作--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">tableName</span>=<span class=\"string\">&quot;tb_content&quot;</span> <span class=\"attr\">enableCountByExample</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">enableUpdateByExample</span>=<span class=\"string\">&quot;false&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">               <span class=\"attr\">enableDeleteByExample</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">enableSelectByExample</span>=<span class=\"string\">&quot;false&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">               <span class=\"attr\">selectByExampleQueryId</span>=<span class=\"string\">&quot;false&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">tableName</span>=<span class=\"string\">&quot;tb_content_category&quot;</span> <span class=\"attr\">enableCountByExample</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">enableUpdateByExample</span>=<span class=\"string\">&quot;false&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">               <span class=\"attr\">enableDeleteByExample</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">enableSelectByExample</span>=<span class=\"string\">&quot;false&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">               <span class=\"attr\">selectByExampleQueryId</span>=<span class=\"string\">&quot;false&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">tableName</span>=<span class=\"string\">&quot;tb_item&quot;</span> <span class=\"attr\">enableCountByExample</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">enableUpdateByExample</span>=<span class=\"string\">&quot;false&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">               <span class=\"attr\">enableDeleteByExample</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">enableSelectByExample</span>=<span class=\"string\">&quot;false&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">               <span class=\"attr\">selectByExampleQueryId</span>=<span class=\"string\">&quot;false&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">tableName</span>=<span class=\"string\">&quot;tb_item_cat&quot;</span> <span class=\"attr\">enableCountByExample</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">enableUpdateByExample</span>=<span class=\"string\">&quot;false&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">               <span class=\"attr\">enableDeleteByExample</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">enableSelectByExample</span>=<span class=\"string\">&quot;false&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">               <span class=\"attr\">selectByExampleQueryId</span>=<span class=\"string\">&quot;false&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">tableName</span>=<span class=\"string\">&quot;tb_item_desc&quot;</span> <span class=\"attr\">enableCountByExample</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">enableUpdateByExample</span>=<span class=\"string\">&quot;false&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">               <span class=\"attr\">enableDeleteByExample</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">enableSelectByExample</span>=<span class=\"string\">&quot;false&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">               <span class=\"attr\">selectByExampleQueryId</span>=<span class=\"string\">&quot;false&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">tableName</span>=<span class=\"string\">&quot;tb_item_param&quot;</span> <span class=\"attr\">enableCountByExample</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">enableUpdateByExample</span>=<span class=\"string\">&quot;false&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">               <span class=\"attr\">enableDeleteByExample</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">enableSelectByExample</span>=<span class=\"string\">&quot;false&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">               <span class=\"attr\">selectByExampleQueryId</span>=<span class=\"string\">&quot;false&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">tableName</span>=<span class=\"string\">&quot;tb_item_param_item&quot;</span> <span class=\"attr\">enableCountByExample</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">enableUpdateByExample</span>=<span class=\"string\">&quot;false&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">               <span class=\"attr\">enableDeleteByExample</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">enableSelectByExample</span>=<span class=\"string\">&quot;false&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">               <span class=\"attr\">selectByExampleQueryId</span>=<span class=\"string\">&quot;false&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">tableName</span>=<span class=\"string\">&quot;tb_order&quot;</span> <span class=\"attr\">enableCountByExample</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">enableUpdateByExample</span>=<span class=\"string\">&quot;false&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">               <span class=\"attr\">enableDeleteByExample</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">enableSelectByExample</span>=<span class=\"string\">&quot;false&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">               <span class=\"attr\">selectByExampleQueryId</span>=<span class=\"string\">&quot;false&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">tableName</span>=<span class=\"string\">&quot;tb_order_item&quot;</span> <span class=\"attr\">enableCountByExample</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">enableUpdateByExample</span>=<span class=\"string\">&quot;false&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">               <span class=\"attr\">enableDeleteByExample</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">enableSelectByExample</span>=<span class=\"string\">&quot;false&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">               <span class=\"attr\">selectByExampleQueryId</span>=<span class=\"string\">&quot;false&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">tableName</span>=<span class=\"string\">&quot;tb_order_shipping&quot;</span> <span class=\"attr\">enableCountByExample</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">enableUpdateByExample</span>=<span class=\"string\">&quot;false&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">               <span class=\"attr\">enableDeleteByExample</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">enableSelectByExample</span>=<span class=\"string\">&quot;false&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">               <span class=\"attr\">selectByExampleQueryId</span>=<span class=\"string\">&quot;false&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">tableName</span>=<span class=\"string\">&quot;tb_user&quot;</span> <span class=\"attr\">enableCountByExample</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">enableUpdateByExample</span>=<span class=\"string\">&quot;false&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">               <span class=\"attr\">enableDeleteByExample</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">enableSelectByExample</span>=<span class=\"string\">&quot;false&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">               <span class=\"attr\">selectByExampleQueryId</span>=<span class=\"string\">&quot;false&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">context</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>主要使用了<code>org.mybatis.generator.api.MyBatisGenerator</code>这个类, 该类使用xml文件来对表进行映射, 从而创建对应的实体类。</p>","more":"<br>\n\n<h1 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h1><ol>\n<li>创建一个用来存储警告信息的list</li>\n<li>将映射文件初始化mybatis的配置类中</li>\n<li>执行generate()方法</li>\n</ol>\n<p>实际操作:</p>\n<p>首先需要使用mybatis-generator的依赖:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/org.mybatis.generator/mybatis-generator-core --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis.generator<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-generator-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.3.7<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>接着是使用方法:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.mybatis.generator.api.MyBatisGenerator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.mybatis.generator.config.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.mybatis.generator.config.xml.ConfigurationParser;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.mybatis.generator.internal.DefaultShellCallback;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MybatisGenerateClass</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">generateClass</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1. 创建一个用来存储警告信息的list</span></span><br><span class=\"line\">    List&lt;String&gt; warningsList = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\">    <span class=\"comment\">// 2. 将映射文件初始化mybatis的配置类中</span></span><br><span class=\"line\">    File configFile = <span class=\"keyword\">new</span> File(<span class=\"string\">&quot;你的配置文件.xml&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> overwrite = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    ConfigurationParser cp = <span class=\"keyword\">new</span> ConfigurationParser(warningsList);</span><br><span class=\"line\">    Configuration config = cp.parseConfiguration(configFile);</span><br><span class=\"line\">    DefaultShellCallback callback = <span class=\"keyword\">new</span> DefaultCallback(overwrite);</span><br><span class=\"line\">    <span class=\"comment\">// 3. 执行generate()方法</span></span><br><span class=\"line\">    MyBatisGenerator myBatisGenerator = <span class=\"keyword\">new</span> MyBatisGenerator(config, callback, warningsList);</span><br><span class=\"line\">    myBatisGenerator.generate(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h1 id=\"映射文件\"><a href=\"#映射文件\" class=\"headerlink\" title=\"映射文件\"></a>映射文件</h1><p>需要包含:</p>\n<ul>\n<li>数据库驱动jar</li>\n<li>数据库链接地址, 账密, 需要注意一点, 我这里将<code>&amp;</code>使用了<code>&amp;amp;</code>来代表, 并且指定了时区</li>\n<li>实体类存放的位置以及相关设置</li>\n<li>dao以及映射文件存放位置以及相关设置</li>\n<li>需要映射的表</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">generatorConfiguration</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-keyword\">PUBLIC</span> <span class=\"meta-string\">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-string\">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">generatorConfiguration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--数据库驱动,最好不要有中文字符,不然会找不到,使用绝对地址更加稳定--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">classPathEntry</span> <span class=\"attr\">location</span>=<span class=\"string\">&quot;C:\\Users\\littleboy\\.m2\\repository\\mysql\\mysql-connector-java\\8.0.11\\mysql-connector-java-8.0.11.jar&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;DB2Tables&quot;</span>  <span class=\"attr\">targetRuntime</span>=<span class=\"string\">&quot;MyBatis3&quot;</span>&gt;</span></span><br><span class=\"line\">      \t<span class=\"comment\">&lt;!--注释规则--&gt;</span></span><br><span class=\"line\">      \t<span class=\"comment\">&lt;!--suppressAllComments  false时打开注释，true时关闭注释--&gt;</span></span><br><span class=\"line\">      \t<span class=\"comment\">&lt;!--suppressDate  false时打开时间标志，true时关闭...真是反人类啊--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">commentGenerator</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;suppressDate&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;true&quot;</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;suppressAllComments&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;true&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">commentGenerator</span>&gt;</span></span><br><span class=\"line\">      </span><br><span class=\"line\">        <span class=\"comment\">&lt;!--数据库链接地址、账号、密码--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">jdbcConnection</span> <span class=\"attr\">driverClass</span>=<span class=\"string\">&quot;com.mysql.cj.jdbc.Driver&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                        <span class=\"attr\">connectionURL</span>=<span class=\"string\">&quot;jdbc:mysql://localhost/taotao?characterEncoding=utf8<span class=\"symbol\">&amp;amp;</span>useSSL=true<span class=\"symbol\">&amp;amp;</span>serverTimezone=UTC&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                        <span class=\"attr\">userId</span>=<span class=\"string\">&quot;username&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                        <span class=\"attr\">password</span>=<span class=\"string\">&quot;password&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">jdbcConnection</span>&gt;</span></span><br><span class=\"line\">      </span><br><span class=\"line\">      \t<span class=\"comment\">&lt;!--mybatis里专门用来处理NUMERIC和DECIMAL类型的策略--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">javaTypeResolver</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;forceBigDecimals&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;false&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">javaTypeResolver</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--生成Model类存放位置--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">javaModelGenerator</span> <span class=\"attr\">targetPackage</span>=<span class=\"string\">&quot;com.littleboy.pojo&quot;</span> <span class=\"attr\">targetProject</span>=<span class=\"string\">&quot;src&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;enableSubPackages&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;true&quot;</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;trimStrings&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;true&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">javaModelGenerator</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--生成映射文件存放位置--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sqlMapGenerator</span> <span class=\"attr\">targetPackage</span>=<span class=\"string\">&quot;com.littleboy.dao&quot;</span> <span class=\"attr\">targetProject</span>=<span class=\"string\">&quot;src&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;enableSubPackages&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;true&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">sqlMapGenerator</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--生成DaoMapper类存放位置--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">javaClientGenerator</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;XMLMAPPER&quot;</span> <span class=\"attr\">targetPackage</span>=<span class=\"string\">&quot;com.littleboy.dao&quot;</span> <span class=\"attr\">targetProject</span>=<span class=\"string\">&quot;src&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;enableSubPackages&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;true&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">javaClientGenerator</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--生成对应表及类名,需要记住的一点是逆向工程无法生成关联关系,只能生成单表操作--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">tableName</span>=<span class=\"string\">&quot;tb_content&quot;</span> <span class=\"attr\">enableCountByExample</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">enableUpdateByExample</span>=<span class=\"string\">&quot;false&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">               <span class=\"attr\">enableDeleteByExample</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">enableSelectByExample</span>=<span class=\"string\">&quot;false&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">               <span class=\"attr\">selectByExampleQueryId</span>=<span class=\"string\">&quot;false&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">tableName</span>=<span class=\"string\">&quot;tb_content_category&quot;</span> <span class=\"attr\">enableCountByExample</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">enableUpdateByExample</span>=<span class=\"string\">&quot;false&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">               <span class=\"attr\">enableDeleteByExample</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">enableSelectByExample</span>=<span class=\"string\">&quot;false&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">               <span class=\"attr\">selectByExampleQueryId</span>=<span class=\"string\">&quot;false&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">tableName</span>=<span class=\"string\">&quot;tb_item&quot;</span> <span class=\"attr\">enableCountByExample</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">enableUpdateByExample</span>=<span class=\"string\">&quot;false&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">               <span class=\"attr\">enableDeleteByExample</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">enableSelectByExample</span>=<span class=\"string\">&quot;false&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">               <span class=\"attr\">selectByExampleQueryId</span>=<span class=\"string\">&quot;false&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">tableName</span>=<span class=\"string\">&quot;tb_item_cat&quot;</span> <span class=\"attr\">enableCountByExample</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">enableUpdateByExample</span>=<span class=\"string\">&quot;false&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">               <span class=\"attr\">enableDeleteByExample</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">enableSelectByExample</span>=<span class=\"string\">&quot;false&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">               <span class=\"attr\">selectByExampleQueryId</span>=<span class=\"string\">&quot;false&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">tableName</span>=<span class=\"string\">&quot;tb_item_desc&quot;</span> <span class=\"attr\">enableCountByExample</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">enableUpdateByExample</span>=<span class=\"string\">&quot;false&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">               <span class=\"attr\">enableDeleteByExample</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">enableSelectByExample</span>=<span class=\"string\">&quot;false&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">               <span class=\"attr\">selectByExampleQueryId</span>=<span class=\"string\">&quot;false&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">tableName</span>=<span class=\"string\">&quot;tb_item_param&quot;</span> <span class=\"attr\">enableCountByExample</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">enableUpdateByExample</span>=<span class=\"string\">&quot;false&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">               <span class=\"attr\">enableDeleteByExample</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">enableSelectByExample</span>=<span class=\"string\">&quot;false&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">               <span class=\"attr\">selectByExampleQueryId</span>=<span class=\"string\">&quot;false&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">tableName</span>=<span class=\"string\">&quot;tb_item_param_item&quot;</span> <span class=\"attr\">enableCountByExample</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">enableUpdateByExample</span>=<span class=\"string\">&quot;false&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">               <span class=\"attr\">enableDeleteByExample</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">enableSelectByExample</span>=<span class=\"string\">&quot;false&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">               <span class=\"attr\">selectByExampleQueryId</span>=<span class=\"string\">&quot;false&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">tableName</span>=<span class=\"string\">&quot;tb_order&quot;</span> <span class=\"attr\">enableCountByExample</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">enableUpdateByExample</span>=<span class=\"string\">&quot;false&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">               <span class=\"attr\">enableDeleteByExample</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">enableSelectByExample</span>=<span class=\"string\">&quot;false&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">               <span class=\"attr\">selectByExampleQueryId</span>=<span class=\"string\">&quot;false&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">tableName</span>=<span class=\"string\">&quot;tb_order_item&quot;</span> <span class=\"attr\">enableCountByExample</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">enableUpdateByExample</span>=<span class=\"string\">&quot;false&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">               <span class=\"attr\">enableDeleteByExample</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">enableSelectByExample</span>=<span class=\"string\">&quot;false&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">               <span class=\"attr\">selectByExampleQueryId</span>=<span class=\"string\">&quot;false&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">tableName</span>=<span class=\"string\">&quot;tb_order_shipping&quot;</span> <span class=\"attr\">enableCountByExample</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">enableUpdateByExample</span>=<span class=\"string\">&quot;false&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">               <span class=\"attr\">enableDeleteByExample</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">enableSelectByExample</span>=<span class=\"string\">&quot;false&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">               <span class=\"attr\">selectByExampleQueryId</span>=<span class=\"string\">&quot;false&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">tableName</span>=<span class=\"string\">&quot;tb_user&quot;</span> <span class=\"attr\">enableCountByExample</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">enableUpdateByExample</span>=<span class=\"string\">&quot;false&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">               <span class=\"attr\">enableDeleteByExample</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">enableSelectByExample</span>=<span class=\"string\">&quot;false&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">               <span class=\"attr\">selectByExampleQueryId</span>=<span class=\"string\">&quot;false&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">context</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure>"},{"title":"《跟我一起写makefile (五)》摘抄","date":"2019-06-04T08:29:42.000Z","_content":"\n# 六、多目标\n\nMakefile 的规则中的目标可以不止一个, 其支持多目标, 有可能我们的多目标同时依赖于一个文件, 并且其生成的命令大体类似, 于是我们就能把其合并起来。当然, 多个目标的生成规则的执行命令是同一个, 这可能会给我们带来麻烦, 不过好在我们可以使用一个自动化变量 \"$@\", 这个变量表示这目前规则中所有的目标的集合, 看一个例子:\n\n```\nbigoutput littleoutput : text.g\n\tgenerate text.g -$(subst output,,$@) > $@\n```\n\n上述规则等价于:\n\n```\nbigoutput: text.g\n\tgenerate text.g -big > bigoutput\n\nlittleoutput: text.g\n\tgenerate text.g -little > littleoutput\n```\n\n其中, `-$(subst output,,$@)` 中的 \"$\" 表示执行一个 Makefile 的函数, 函数名为 subst, 后面的为参数, 这里的这个函数是截取字符串的意思, \"$@\" 表示目标的集合, 就像一个数组, \"$@\" 依次取出目标, 并执行命令。\n\n<!--more-->\n# 七、静态模式\n\n静态模式可以更加容易地定义多目标的规则, 可以让我们的规则变得更加的弹性和灵活, 我们还是先来看一下语法:\n\n```\n<targets ...>: <target-pattern>: <prereq-patterns ...>\n\t<commands>\n\t...\n```\n\ntargets 定义了一系列的目标文件, 可以用通配符, 是目标的一个集合。\n\ntarget-pattern 是指明了 targets 的模式, 也就是目标集模式。\n\nprepreq-patterns 是目标的依赖模式, 它对 target-pattern 形成的模式进行一次依赖目标的定义。\n\n举个例子: 如果我们的 '<target-pattern>' 定义成 \"%.o\", 意思是我们的 `<target>` 集合中都是以 \".o\" 结尾的, 而如果我们的 `<prereq-patterns>` 定义成 \"%.c\", 意思是对 `<target-pattern>` 所形成的目标集进行二次定义, 其计算方法是, 取 `<target-pattern>` 模式中的 \"%\" (也就是去掉了[.o] 这个结尾), 并为其加上 `[.c]` 这个结尾, 形成的新集合。\n\n所以, 我们的\"目标模式\"或是\"依赖模式\"中都应该有\"%\"这个字符, 如果你的文件名中有\"%\", 那么你可以使用反斜杠\"/\"进行转义, 来标明真实的\"%\"字符。\n\n看一个例子:\n\n```\nobjects = foo.o bar.o\nall: $(objects)\n$(objects): %.o: %.c\n\t$(cc) -c $(CFLAGS) $< -o $@\n```\n\n上面的例子中, 指明了我们的目标从 `$object` 中获取, \"%.o\" 表明要所有以 \"%.o\" 结尾的目标, 也就是 \"foo.o bar.o\", 也就是变量 `$object` 集合的模式, 而依赖模式 `%.c` 则取模式 \"%.o\" 的 \"%\", 也就是 \"foo bar\", 并为其加上 \".c\" 的后缀, 于是, 我们的依赖目标就是 \"foo.c bar.c\"。而命令中的`$<`和`$@`则是自动化变量, `$<` 表示所有的依赖目标集(也就是 \"foo.c bar.c\"), `$@` 表示目标集(也就是\"foo.o bar.o\")。于是, 上面的规则展开后等价于下面的规则:\n\n```\nfoo.o: foo.c\n\t$(cc) -c $(CFLAGS) foo.c -o foo.o\n\nbar.o: bar.c\n\t$(cc) -c $(CFLAGS) bar.c -o bar.o\n```\n\n试想, 如果我们的 \"%.o\" 有几百个, 那种我们只要用这种很简单的 \"静态模式规则\" 就可以写完一堆规则, 实在太有效率了。我们在看一个例子:\n\n```\nfiles = foo.elc bar.o lose.o\n\n$(filter %.o, $(files)): %.o: %.c\n\t$(cc) -c $(CFLAGS) $< -o $@\n\n$(filter $.elc, $(files)): %.elc: %.el\n\temacs -f batch-byte-compile $<\n```\n\n`$(filter %.o, $(files))`表示调用 Makefile 的 filter 函数, 过滤 \"$files\" 集, 只要其中模式为 \"%.o\" 的内容。其他的内容, 就不用多说了。\n\n# 八、自动生成依赖性\n\n在 Makefile 中, 我们的依赖关系可能会需要包含一系列的头文件, 比如, 如果我们的 `main.c` 中有一句 `#include \"defs.h\"`, 那么我们的依赖关系应该是:\n\n```\nmain.o: main.c defs.h\n```\n\n但是如果是一个比较大型的工程, 你必须清楚哪些 C 文件包含了哪些头文件, 并且, 你在加入或删除头文件时, 也需要小心的修改 Makefile, 这是一个很没有维护性的工作。为了避免这种繁重而又容易出错的事情, 我们可以使用 C/C++ 编译的一个功能, 大多数的 C/C++ 编译器都支持一个 \"-M\" 的选项, 即自动寻找源文件中包含的头文件, 并生成一个依赖关系。例如, 如果我们执行下面的命令:\n\n```\ncc -M main.c\n```\n\n其输出是:\n\n```\nmain.o: main.c defs.h\n```\n\n于是由编译器自动生成的依赖关系, 这样一来, 你就不必再手动书写若干文件的依赖关系, 而由编译器自动生成了。需要提醒一句的是, 如果你使用 GNU 的 C/C++ 编译器, 你得用 \"-MM\" 参数, 不然, \"-M\" 参数会把一些标准库的头文件也包含进来。\n\n那么, 编译器的功能如何与我们的 Makefile 联系在一起呢。因为这样一来, 我们的 Makefile 也要根据这些源文件重新生成, 让 Makefile 自己依赖于源文件? 这个功能不现实, 不过我们可以有其他手段来迂回地实现这一功能。GNU 组织建议把编译器为每一个源文件地自动生成的依赖关系放到一个文件中, 为每一个 `name.c` 的文件都生成一个 `name.d` 的 Makefile 文件, `[.d]` 文件爱你中就存放对应 `[.c]` 文件的依赖关系。\n\n于是, 我们可以写出 `[.c]` 文件和 `[.d]` 文件的依赖关系, 并让 makefile 自动更新或生成 `[.d]` 文件, 并把其包含在我们的主 Makefile 中, 这样, 我们就可以自动化地生成每个文件的依赖关系了。\n\n这里我们给出了一个模式规则来产生`[.d]`文件:\n\n```\n%.d: %.c\n\t@set -e: rm -f $@ ;\\\n\t$(cc) -M (CPPFLAGS) $< > $@. ;\\\n\tsed 's/\\($*\\)\\.o[:]*/\\l.o$@:/g' <$@.>$@ ;\\\n\trm -f $@.\n```\n\n这个规则的意思是, 所有的`[.d]`文件依赖于`[.c]`文件, \"rm -f$@\"的意思是删除所有的目标, 也就是`[.d]`文件, 第二行的意思是, 为每个依赖文件`$<`, 也就是`[.c]`文件生成依赖文件, `$@`表示模式`.d`文件, 如果有一个C文件是name.c, 那么\"%\"就是name, `.`意为一个随机编号, 第二行生成的文件极有可能是`name.d.12345`, 第三行使用sed命令做了一个替换, 关于sed命令的用法请看相关文档。第四行就是删除临时文件。\n\n总而言之, 这个模式要做的事就是在编译器生成的依赖关系中加入`[.d]`文件的依赖, 即把依赖关系:\n\n> main.o: main.c defs.h\n\n转成:\n\n> main.o main.d: main.c defs.h\n\n\n于是, 我们的`[.d]`文件也会自动更新了, 并会自动生成了。当然, 你还可以在这个`[.d]`文件中加入除依赖关系之外的东西, 比如: 包括生成的命令也可一并加入, 让每个`[.d]`文件都包含一个完整的规则。一旦我们完成这个工作, 接下来, 我们就要把这些自动生成的规则放进我们的主 Makefile 中。我们可以使用 Makefile 的 `include` 命令, 来引用别的 Makefile 文件, 例如:\n\n```\nsources = foo.c bar.c\ninclude $(sources:.c=.d)\n```\n\n上述语句中的`$(sources:.c=.d)`中的`.c=.d`的意思是做一个替换, 把变量`$(sources)`所有的`[.c]`的字符串都替换成`[.d]`, 关于这个替换的内容, 在后面我们会有更详细的讲述。因为include是按次序来载入文件, 所以最先载入的`[.d]`文件中的目标会成为默认目标。\n","source":"_posts/note/blog_note/edit-makefile/edit-makefile-five.md","raw":"---\ntitle: 《跟我一起写makefile (五)》摘抄\ndate: 2019-06-04 16:29:42\ncategories:\n- 笔记\n- 读博客笔记\n- 跟我一起写makefile\ntags:\n- c++\n- 笔记\n- makefile\n---\n\n# 六、多目标\n\nMakefile 的规则中的目标可以不止一个, 其支持多目标, 有可能我们的多目标同时依赖于一个文件, 并且其生成的命令大体类似, 于是我们就能把其合并起来。当然, 多个目标的生成规则的执行命令是同一个, 这可能会给我们带来麻烦, 不过好在我们可以使用一个自动化变量 \"$@\", 这个变量表示这目前规则中所有的目标的集合, 看一个例子:\n\n```\nbigoutput littleoutput : text.g\n\tgenerate text.g -$(subst output,,$@) > $@\n```\n\n上述规则等价于:\n\n```\nbigoutput: text.g\n\tgenerate text.g -big > bigoutput\n\nlittleoutput: text.g\n\tgenerate text.g -little > littleoutput\n```\n\n其中, `-$(subst output,,$@)` 中的 \"$\" 表示执行一个 Makefile 的函数, 函数名为 subst, 后面的为参数, 这里的这个函数是截取字符串的意思, \"$@\" 表示目标的集合, 就像一个数组, \"$@\" 依次取出目标, 并执行命令。\n\n<!--more-->\n# 七、静态模式\n\n静态模式可以更加容易地定义多目标的规则, 可以让我们的规则变得更加的弹性和灵活, 我们还是先来看一下语法:\n\n```\n<targets ...>: <target-pattern>: <prereq-patterns ...>\n\t<commands>\n\t...\n```\n\ntargets 定义了一系列的目标文件, 可以用通配符, 是目标的一个集合。\n\ntarget-pattern 是指明了 targets 的模式, 也就是目标集模式。\n\nprepreq-patterns 是目标的依赖模式, 它对 target-pattern 形成的模式进行一次依赖目标的定义。\n\n举个例子: 如果我们的 '<target-pattern>' 定义成 \"%.o\", 意思是我们的 `<target>` 集合中都是以 \".o\" 结尾的, 而如果我们的 `<prereq-patterns>` 定义成 \"%.c\", 意思是对 `<target-pattern>` 所形成的目标集进行二次定义, 其计算方法是, 取 `<target-pattern>` 模式中的 \"%\" (也就是去掉了[.o] 这个结尾), 并为其加上 `[.c]` 这个结尾, 形成的新集合。\n\n所以, 我们的\"目标模式\"或是\"依赖模式\"中都应该有\"%\"这个字符, 如果你的文件名中有\"%\", 那么你可以使用反斜杠\"/\"进行转义, 来标明真实的\"%\"字符。\n\n看一个例子:\n\n```\nobjects = foo.o bar.o\nall: $(objects)\n$(objects): %.o: %.c\n\t$(cc) -c $(CFLAGS) $< -o $@\n```\n\n上面的例子中, 指明了我们的目标从 `$object` 中获取, \"%.o\" 表明要所有以 \"%.o\" 结尾的目标, 也就是 \"foo.o bar.o\", 也就是变量 `$object` 集合的模式, 而依赖模式 `%.c` 则取模式 \"%.o\" 的 \"%\", 也就是 \"foo bar\", 并为其加上 \".c\" 的后缀, 于是, 我们的依赖目标就是 \"foo.c bar.c\"。而命令中的`$<`和`$@`则是自动化变量, `$<` 表示所有的依赖目标集(也就是 \"foo.c bar.c\"), `$@` 表示目标集(也就是\"foo.o bar.o\")。于是, 上面的规则展开后等价于下面的规则:\n\n```\nfoo.o: foo.c\n\t$(cc) -c $(CFLAGS) foo.c -o foo.o\n\nbar.o: bar.c\n\t$(cc) -c $(CFLAGS) bar.c -o bar.o\n```\n\n试想, 如果我们的 \"%.o\" 有几百个, 那种我们只要用这种很简单的 \"静态模式规则\" 就可以写完一堆规则, 实在太有效率了。我们在看一个例子:\n\n```\nfiles = foo.elc bar.o lose.o\n\n$(filter %.o, $(files)): %.o: %.c\n\t$(cc) -c $(CFLAGS) $< -o $@\n\n$(filter $.elc, $(files)): %.elc: %.el\n\temacs -f batch-byte-compile $<\n```\n\n`$(filter %.o, $(files))`表示调用 Makefile 的 filter 函数, 过滤 \"$files\" 集, 只要其中模式为 \"%.o\" 的内容。其他的内容, 就不用多说了。\n\n# 八、自动生成依赖性\n\n在 Makefile 中, 我们的依赖关系可能会需要包含一系列的头文件, 比如, 如果我们的 `main.c` 中有一句 `#include \"defs.h\"`, 那么我们的依赖关系应该是:\n\n```\nmain.o: main.c defs.h\n```\n\n但是如果是一个比较大型的工程, 你必须清楚哪些 C 文件包含了哪些头文件, 并且, 你在加入或删除头文件时, 也需要小心的修改 Makefile, 这是一个很没有维护性的工作。为了避免这种繁重而又容易出错的事情, 我们可以使用 C/C++ 编译的一个功能, 大多数的 C/C++ 编译器都支持一个 \"-M\" 的选项, 即自动寻找源文件中包含的头文件, 并生成一个依赖关系。例如, 如果我们执行下面的命令:\n\n```\ncc -M main.c\n```\n\n其输出是:\n\n```\nmain.o: main.c defs.h\n```\n\n于是由编译器自动生成的依赖关系, 这样一来, 你就不必再手动书写若干文件的依赖关系, 而由编译器自动生成了。需要提醒一句的是, 如果你使用 GNU 的 C/C++ 编译器, 你得用 \"-MM\" 参数, 不然, \"-M\" 参数会把一些标准库的头文件也包含进来。\n\n那么, 编译器的功能如何与我们的 Makefile 联系在一起呢。因为这样一来, 我们的 Makefile 也要根据这些源文件重新生成, 让 Makefile 自己依赖于源文件? 这个功能不现实, 不过我们可以有其他手段来迂回地实现这一功能。GNU 组织建议把编译器为每一个源文件地自动生成的依赖关系放到一个文件中, 为每一个 `name.c` 的文件都生成一个 `name.d` 的 Makefile 文件, `[.d]` 文件爱你中就存放对应 `[.c]` 文件的依赖关系。\n\n于是, 我们可以写出 `[.c]` 文件和 `[.d]` 文件的依赖关系, 并让 makefile 自动更新或生成 `[.d]` 文件, 并把其包含在我们的主 Makefile 中, 这样, 我们就可以自动化地生成每个文件的依赖关系了。\n\n这里我们给出了一个模式规则来产生`[.d]`文件:\n\n```\n%.d: %.c\n\t@set -e: rm -f $@ ;\\\n\t$(cc) -M (CPPFLAGS) $< > $@. ;\\\n\tsed 's/\\($*\\)\\.o[:]*/\\l.o$@:/g' <$@.>$@ ;\\\n\trm -f $@.\n```\n\n这个规则的意思是, 所有的`[.d]`文件依赖于`[.c]`文件, \"rm -f$@\"的意思是删除所有的目标, 也就是`[.d]`文件, 第二行的意思是, 为每个依赖文件`$<`, 也就是`[.c]`文件生成依赖文件, `$@`表示模式`.d`文件, 如果有一个C文件是name.c, 那么\"%\"就是name, `.`意为一个随机编号, 第二行生成的文件极有可能是`name.d.12345`, 第三行使用sed命令做了一个替换, 关于sed命令的用法请看相关文档。第四行就是删除临时文件。\n\n总而言之, 这个模式要做的事就是在编译器生成的依赖关系中加入`[.d]`文件的依赖, 即把依赖关系:\n\n> main.o: main.c defs.h\n\n转成:\n\n> main.o main.d: main.c defs.h\n\n\n于是, 我们的`[.d]`文件也会自动更新了, 并会自动生成了。当然, 你还可以在这个`[.d]`文件中加入除依赖关系之外的东西, 比如: 包括生成的命令也可一并加入, 让每个`[.d]`文件都包含一个完整的规则。一旦我们完成这个工作, 接下来, 我们就要把这些自动生成的规则放进我们的主 Makefile 中。我们可以使用 Makefile 的 `include` 命令, 来引用别的 Makefile 文件, 例如:\n\n```\nsources = foo.c bar.c\ninclude $(sources:.c=.d)\n```\n\n上述语句中的`$(sources:.c=.d)`中的`.c=.d`的意思是做一个替换, 把变量`$(sources)`所有的`[.c]`的字符串都替换成`[.d]`, 关于这个替换的内容, 在后面我们会有更详细的讲述。因为include是按次序来载入文件, 所以最先载入的`[.d]`文件中的目标会成为默认目标。\n","slug":"note/blog_note/edit-makefile/edit-makefile-five","published":1,"updated":"2022-10-02T15:42:29.977Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejv3007l3vsbc1utb1oz","content":"<h1 id=\"六、多目标\"><a href=\"#六、多目标\" class=\"headerlink\" title=\"六、多目标\"></a>六、多目标</h1><p>Makefile 的规则中的目标可以不止一个, 其支持多目标, 有可能我们的多目标同时依赖于一个文件, 并且其生成的命令大体类似, 于是我们就能把其合并起来。当然, 多个目标的生成规则的执行命令是同一个, 这可能会给我们带来麻烦, 不过好在我们可以使用一个自动化变量 “$@”, 这个变量表示这目前规则中所有的目标的集合, 看一个例子:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bigoutput littleoutput : text.g</span><br><span class=\"line\">\tgenerate text.g -$(subst output,,$@) &gt; $@</span><br></pre></td></tr></table></figure>\n\n<p>上述规则等价于:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bigoutput: text.g</span><br><span class=\"line\">\tgenerate text.g -big &gt; bigoutput</span><br><span class=\"line\"></span><br><span class=\"line\">littleoutput: text.g</span><br><span class=\"line\">\tgenerate text.g -little &gt; littleoutput</span><br></pre></td></tr></table></figure>\n\n<p>其中, <code>-$(subst output,,$@)</code> 中的 “$” 表示执行一个 Makefile 的函数, 函数名为 subst, 后面的为参数, 这里的这个函数是截取字符串的意思, “$@” 表示目标的集合, 就像一个数组, “$@” 依次取出目标, 并执行命令。</p>\n<span id=\"more\"></span>\n<h1 id=\"七、静态模式\"><a href=\"#七、静态模式\" class=\"headerlink\" title=\"七、静态模式\"></a>七、静态模式</h1><p>静态模式可以更加容易地定义多目标的规则, 可以让我们的规则变得更加的弹性和灵活, 我们还是先来看一下语法:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;targets ...&gt;: &lt;target-pattern&gt;: &lt;prereq-patterns ...&gt;</span><br><span class=\"line\">\t&lt;commands&gt;</span><br><span class=\"line\">\t...</span><br></pre></td></tr></table></figure>\n\n<p>targets 定义了一系列的目标文件, 可以用通配符, 是目标的一个集合。</p>\n<p>target-pattern 是指明了 targets 的模式, 也就是目标集模式。</p>\n<p>prepreq-patterns 是目标的依赖模式, 它对 target-pattern 形成的模式进行一次依赖目标的定义。</p>\n<p>举个例子: 如果我们的 ‘<target-pattern>‘ 定义成 “%.o”, 意思是我们的 <code>&lt;target&gt;</code> 集合中都是以 “.o” 结尾的, 而如果我们的 <code>&lt;prereq-patterns&gt;</code> 定义成 “%.c”, 意思是对 <code>&lt;target-pattern&gt;</code> 所形成的目标集进行二次定义, 其计算方法是, 取 <code>&lt;target-pattern&gt;</code> 模式中的 “%” (也就是去掉了[.o] 这个结尾), 并为其加上 <code>[.c]</code> 这个结尾, 形成的新集合。</p>\n<p>所以, 我们的”目标模式”或是”依赖模式”中都应该有”%”这个字符, 如果你的文件名中有”%”, 那么你可以使用反斜杠”&#x2F;“进行转义, 来标明真实的”%”字符。</p>\n<p>看一个例子:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">objects = foo.o bar.o</span><br><span class=\"line\">all: $(objects)</span><br><span class=\"line\">$(objects): %.o: %.c</span><br><span class=\"line\">\t$(cc) -c $(CFLAGS) $&lt; -o $@</span><br></pre></td></tr></table></figure>\n\n<p>上面的例子中, 指明了我们的目标从 <code>$object</code> 中获取, “%.o” 表明要所有以 “%.o” 结尾的目标, 也就是 “foo.o bar.o”, 也就是变量 <code>$object</code> 集合的模式, 而依赖模式 <code>%.c</code> 则取模式 “%.o” 的 “%”, 也就是 “foo bar”, 并为其加上 “.c” 的后缀, 于是, 我们的依赖目标就是 “foo.c bar.c”。而命令中的<code>$&lt;</code>和<code>$@</code>则是自动化变量, <code>$&lt;</code> 表示所有的依赖目标集(也就是 “foo.c bar.c”), <code>$@</code> 表示目标集(也就是”foo.o bar.o”)。于是, 上面的规则展开后等价于下面的规则:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo.o: foo.c</span><br><span class=\"line\">\t$(cc) -c $(CFLAGS) foo.c -o foo.o</span><br><span class=\"line\"></span><br><span class=\"line\">bar.o: bar.c</span><br><span class=\"line\">\t$(cc) -c $(CFLAGS) bar.c -o bar.o</span><br></pre></td></tr></table></figure>\n\n<p>试想, 如果我们的 “%.o” 有几百个, 那种我们只要用这种很简单的 “静态模式规则” 就可以写完一堆规则, 实在太有效率了。我们在看一个例子:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">files = foo.elc bar.o lose.o</span><br><span class=\"line\"></span><br><span class=\"line\">$(filter %.o, $(files)): %.o: %.c</span><br><span class=\"line\">\t$(cc) -c $(CFLAGS) $&lt; -o $@</span><br><span class=\"line\"></span><br><span class=\"line\">$(filter $.elc, $(files)): %.elc: %.el</span><br><span class=\"line\">\temacs -f batch-byte-compile $&lt;</span><br></pre></td></tr></table></figure>\n\n<p><code>$(filter %.o, $(files))</code>表示调用 Makefile 的 filter 函数, 过滤 “$files” 集, 只要其中模式为 “%.o” 的内容。其他的内容, 就不用多说了。</p>\n<h1 id=\"八、自动生成依赖性\"><a href=\"#八、自动生成依赖性\" class=\"headerlink\" title=\"八、自动生成依赖性\"></a>八、自动生成依赖性</h1><p>在 Makefile 中, 我们的依赖关系可能会需要包含一系列的头文件, 比如, 如果我们的 <code>main.c</code> 中有一句 <code>#include &quot;defs.h&quot;</code>, 那么我们的依赖关系应该是:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main.o: main.c defs.h</span><br></pre></td></tr></table></figure>\n\n<p>但是如果是一个比较大型的工程, 你必须清楚哪些 C 文件包含了哪些头文件, 并且, 你在加入或删除头文件时, 也需要小心的修改 Makefile, 这是一个很没有维护性的工作。为了避免这种繁重而又容易出错的事情, 我们可以使用 C&#x2F;C++ 编译的一个功能, 大多数的 C&#x2F;C++ 编译器都支持一个 “-M” 的选项, 即自动寻找源文件中包含的头文件, 并生成一个依赖关系。例如, 如果我们执行下面的命令:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cc -M main.c</span><br></pre></td></tr></table></figure>\n\n<p>其输出是:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main.o: main.c defs.h</span><br></pre></td></tr></table></figure>\n\n<p>于是由编译器自动生成的依赖关系, 这样一来, 你就不必再手动书写若干文件的依赖关系, 而由编译器自动生成了。需要提醒一句的是, 如果你使用 GNU 的 C&#x2F;C++ 编译器, 你得用 “-MM” 参数, 不然, “-M” 参数会把一些标准库的头文件也包含进来。</p>\n<p>那么, 编译器的功能如何与我们的 Makefile 联系在一起呢。因为这样一来, 我们的 Makefile 也要根据这些源文件重新生成, 让 Makefile 自己依赖于源文件? 这个功能不现实, 不过我们可以有其他手段来迂回地实现这一功能。GNU 组织建议把编译器为每一个源文件地自动生成的依赖关系放到一个文件中, 为每一个 <code>name.c</code> 的文件都生成一个 <code>name.d</code> 的 Makefile 文件, <code>[.d]</code> 文件爱你中就存放对应 <code>[.c]</code> 文件的依赖关系。</p>\n<p>于是, 我们可以写出 <code>[.c]</code> 文件和 <code>[.d]</code> 文件的依赖关系, 并让 makefile 自动更新或生成 <code>[.d]</code> 文件, 并把其包含在我们的主 Makefile 中, 这样, 我们就可以自动化地生成每个文件的依赖关系了。</p>\n<p>这里我们给出了一个模式规则来产生<code>[.d]</code>文件:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%.d: %.c</span><br><span class=\"line\">\t@set -e: rm -f $@ ;\\</span><br><span class=\"line\">\t$(cc) -M (CPPFLAGS) $&lt; &gt; $@. ;\\</span><br><span class=\"line\">\tsed &#x27;s/\\($*\\)\\.o[:]*/\\l.o$@:/g&#x27; &lt;$@.&gt;$@ ;\\</span><br><span class=\"line\">\trm -f $@.</span><br></pre></td></tr></table></figure>\n\n<p>这个规则的意思是, 所有的<code>[.d]</code>文件依赖于<code>[.c]</code>文件, “rm -f$@”的意思是删除所有的目标, 也就是<code>[.d]</code>文件, 第二行的意思是, 为每个依赖文件<code>$&lt;</code>, 也就是<code>[.c]</code>文件生成依赖文件, <code>$@</code>表示模式<code>.d</code>文件, 如果有一个C文件是name.c, 那么”%”就是name, <code>.</code>意为一个随机编号, 第二行生成的文件极有可能是<code>name.d.12345</code>, 第三行使用sed命令做了一个替换, 关于sed命令的用法请看相关文档。第四行就是删除临时文件。</p>\n<p>总而言之, 这个模式要做的事就是在编译器生成的依赖关系中加入<code>[.d]</code>文件的依赖, 即把依赖关系:</p>\n<blockquote>\n<p>main.o: main.c defs.h</p>\n</blockquote>\n<p>转成:</p>\n<blockquote>\n<p>main.o main.d: main.c defs.h</p>\n</blockquote>\n<p>于是, 我们的<code>[.d]</code>文件也会自动更新了, 并会自动生成了。当然, 你还可以在这个<code>[.d]</code>文件中加入除依赖关系之外的东西, 比如: 包括生成的命令也可一并加入, 让每个<code>[.d]</code>文件都包含一个完整的规则。一旦我们完成这个工作, 接下来, 我们就要把这些自动生成的规则放进我们的主 Makefile 中。我们可以使用 Makefile 的 <code>include</code> 命令, 来引用别的 Makefile 文件, 例如:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sources = foo.c bar.c</span><br><span class=\"line\">include $(sources:.c=.d)</span><br></pre></td></tr></table></figure>\n\n<p>上述语句中的<code>$(sources:.c=.d)</code>中的<code>.c=.d</code>的意思是做一个替换, 把变量<code>$(sources)</code>所有的<code>[.c]</code>的字符串都替换成<code>[.d]</code>, 关于这个替换的内容, 在后面我们会有更详细的讲述。因为include是按次序来载入文件, 所以最先载入的<code>[.d]</code>文件中的目标会成为默认目标。</p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"六、多目标\"><a href=\"#六、多目标\" class=\"headerlink\" title=\"六、多目标\"></a>六、多目标</h1><p>Makefile 的规则中的目标可以不止一个, 其支持多目标, 有可能我们的多目标同时依赖于一个文件, 并且其生成的命令大体类似, 于是我们就能把其合并起来。当然, 多个目标的生成规则的执行命令是同一个, 这可能会给我们带来麻烦, 不过好在我们可以使用一个自动化变量 “$@”, 这个变量表示这目前规则中所有的目标的集合, 看一个例子:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bigoutput littleoutput : text.g</span><br><span class=\"line\">\tgenerate text.g -$(subst output,,$@) &gt; $@</span><br></pre></td></tr></table></figure>\n\n<p>上述规则等价于:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bigoutput: text.g</span><br><span class=\"line\">\tgenerate text.g -big &gt; bigoutput</span><br><span class=\"line\"></span><br><span class=\"line\">littleoutput: text.g</span><br><span class=\"line\">\tgenerate text.g -little &gt; littleoutput</span><br></pre></td></tr></table></figure>\n\n<p>其中, <code>-$(subst output,,$@)</code> 中的 “$” 表示执行一个 Makefile 的函数, 函数名为 subst, 后面的为参数, 这里的这个函数是截取字符串的意思, “$@” 表示目标的集合, 就像一个数组, “$@” 依次取出目标, 并执行命令。</p>","more":"<h1 id=\"七、静态模式\"><a href=\"#七、静态模式\" class=\"headerlink\" title=\"七、静态模式\"></a>七、静态模式</h1><p>静态模式可以更加容易地定义多目标的规则, 可以让我们的规则变得更加的弹性和灵活, 我们还是先来看一下语法:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;targets ...&gt;: &lt;target-pattern&gt;: &lt;prereq-patterns ...&gt;</span><br><span class=\"line\">\t&lt;commands&gt;</span><br><span class=\"line\">\t...</span><br></pre></td></tr></table></figure>\n\n<p>targets 定义了一系列的目标文件, 可以用通配符, 是目标的一个集合。</p>\n<p>target-pattern 是指明了 targets 的模式, 也就是目标集模式。</p>\n<p>prepreq-patterns 是目标的依赖模式, 它对 target-pattern 形成的模式进行一次依赖目标的定义。</p>\n<p>举个例子: 如果我们的 ‘<target-pattern>‘ 定义成 “%.o”, 意思是我们的 <code>&lt;target&gt;</code> 集合中都是以 “.o” 结尾的, 而如果我们的 <code>&lt;prereq-patterns&gt;</code> 定义成 “%.c”, 意思是对 <code>&lt;target-pattern&gt;</code> 所形成的目标集进行二次定义, 其计算方法是, 取 <code>&lt;target-pattern&gt;</code> 模式中的 “%” (也就是去掉了[.o] 这个结尾), 并为其加上 <code>[.c]</code> 这个结尾, 形成的新集合。</p>\n<p>所以, 我们的”目标模式”或是”依赖模式”中都应该有”%”这个字符, 如果你的文件名中有”%”, 那么你可以使用反斜杠”&#x2F;“进行转义, 来标明真实的”%”字符。</p>\n<p>看一个例子:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">objects = foo.o bar.o</span><br><span class=\"line\">all: $(objects)</span><br><span class=\"line\">$(objects): %.o: %.c</span><br><span class=\"line\">\t$(cc) -c $(CFLAGS) $&lt; -o $@</span><br></pre></td></tr></table></figure>\n\n<p>上面的例子中, 指明了我们的目标从 <code>$object</code> 中获取, “%.o” 表明要所有以 “%.o” 结尾的目标, 也就是 “foo.o bar.o”, 也就是变量 <code>$object</code> 集合的模式, 而依赖模式 <code>%.c</code> 则取模式 “%.o” 的 “%”, 也就是 “foo bar”, 并为其加上 “.c” 的后缀, 于是, 我们的依赖目标就是 “foo.c bar.c”。而命令中的<code>$&lt;</code>和<code>$@</code>则是自动化变量, <code>$&lt;</code> 表示所有的依赖目标集(也就是 “foo.c bar.c”), <code>$@</code> 表示目标集(也就是”foo.o bar.o”)。于是, 上面的规则展开后等价于下面的规则:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo.o: foo.c</span><br><span class=\"line\">\t$(cc) -c $(CFLAGS) foo.c -o foo.o</span><br><span class=\"line\"></span><br><span class=\"line\">bar.o: bar.c</span><br><span class=\"line\">\t$(cc) -c $(CFLAGS) bar.c -o bar.o</span><br></pre></td></tr></table></figure>\n\n<p>试想, 如果我们的 “%.o” 有几百个, 那种我们只要用这种很简单的 “静态模式规则” 就可以写完一堆规则, 实在太有效率了。我们在看一个例子:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">files = foo.elc bar.o lose.o</span><br><span class=\"line\"></span><br><span class=\"line\">$(filter %.o, $(files)): %.o: %.c</span><br><span class=\"line\">\t$(cc) -c $(CFLAGS) $&lt; -o $@</span><br><span class=\"line\"></span><br><span class=\"line\">$(filter $.elc, $(files)): %.elc: %.el</span><br><span class=\"line\">\temacs -f batch-byte-compile $&lt;</span><br></pre></td></tr></table></figure>\n\n<p><code>$(filter %.o, $(files))</code>表示调用 Makefile 的 filter 函数, 过滤 “$files” 集, 只要其中模式为 “%.o” 的内容。其他的内容, 就不用多说了。</p>\n<h1 id=\"八、自动生成依赖性\"><a href=\"#八、自动生成依赖性\" class=\"headerlink\" title=\"八、自动生成依赖性\"></a>八、自动生成依赖性</h1><p>在 Makefile 中, 我们的依赖关系可能会需要包含一系列的头文件, 比如, 如果我们的 <code>main.c</code> 中有一句 <code>#include &quot;defs.h&quot;</code>, 那么我们的依赖关系应该是:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main.o: main.c defs.h</span><br></pre></td></tr></table></figure>\n\n<p>但是如果是一个比较大型的工程, 你必须清楚哪些 C 文件包含了哪些头文件, 并且, 你在加入或删除头文件时, 也需要小心的修改 Makefile, 这是一个很没有维护性的工作。为了避免这种繁重而又容易出错的事情, 我们可以使用 C&#x2F;C++ 编译的一个功能, 大多数的 C&#x2F;C++ 编译器都支持一个 “-M” 的选项, 即自动寻找源文件中包含的头文件, 并生成一个依赖关系。例如, 如果我们执行下面的命令:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cc -M main.c</span><br></pre></td></tr></table></figure>\n\n<p>其输出是:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main.o: main.c defs.h</span><br></pre></td></tr></table></figure>\n\n<p>于是由编译器自动生成的依赖关系, 这样一来, 你就不必再手动书写若干文件的依赖关系, 而由编译器自动生成了。需要提醒一句的是, 如果你使用 GNU 的 C&#x2F;C++ 编译器, 你得用 “-MM” 参数, 不然, “-M” 参数会把一些标准库的头文件也包含进来。</p>\n<p>那么, 编译器的功能如何与我们的 Makefile 联系在一起呢。因为这样一来, 我们的 Makefile 也要根据这些源文件重新生成, 让 Makefile 自己依赖于源文件? 这个功能不现实, 不过我们可以有其他手段来迂回地实现这一功能。GNU 组织建议把编译器为每一个源文件地自动生成的依赖关系放到一个文件中, 为每一个 <code>name.c</code> 的文件都生成一个 <code>name.d</code> 的 Makefile 文件, <code>[.d]</code> 文件爱你中就存放对应 <code>[.c]</code> 文件的依赖关系。</p>\n<p>于是, 我们可以写出 <code>[.c]</code> 文件和 <code>[.d]</code> 文件的依赖关系, 并让 makefile 自动更新或生成 <code>[.d]</code> 文件, 并把其包含在我们的主 Makefile 中, 这样, 我们就可以自动化地生成每个文件的依赖关系了。</p>\n<p>这里我们给出了一个模式规则来产生<code>[.d]</code>文件:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%.d: %.c</span><br><span class=\"line\">\t@set -e: rm -f $@ ;\\</span><br><span class=\"line\">\t$(cc) -M (CPPFLAGS) $&lt; &gt; $@. ;\\</span><br><span class=\"line\">\tsed &#x27;s/\\($*\\)\\.o[:]*/\\l.o$@:/g&#x27; &lt;$@.&gt;$@ ;\\</span><br><span class=\"line\">\trm -f $@.</span><br></pre></td></tr></table></figure>\n\n<p>这个规则的意思是, 所有的<code>[.d]</code>文件依赖于<code>[.c]</code>文件, “rm -f$@”的意思是删除所有的目标, 也就是<code>[.d]</code>文件, 第二行的意思是, 为每个依赖文件<code>$&lt;</code>, 也就是<code>[.c]</code>文件生成依赖文件, <code>$@</code>表示模式<code>.d</code>文件, 如果有一个C文件是name.c, 那么”%”就是name, <code>.</code>意为一个随机编号, 第二行生成的文件极有可能是<code>name.d.12345</code>, 第三行使用sed命令做了一个替换, 关于sed命令的用法请看相关文档。第四行就是删除临时文件。</p>\n<p>总而言之, 这个模式要做的事就是在编译器生成的依赖关系中加入<code>[.d]</code>文件的依赖, 即把依赖关系:</p>\n<blockquote>\n<p>main.o: main.c defs.h</p>\n</blockquote>\n<p>转成:</p>\n<blockquote>\n<p>main.o main.d: main.c defs.h</p>\n</blockquote>\n<p>于是, 我们的<code>[.d]</code>文件也会自动更新了, 并会自动生成了。当然, 你还可以在这个<code>[.d]</code>文件中加入除依赖关系之外的东西, 比如: 包括生成的命令也可一并加入, 让每个<code>[.d]</code>文件都包含一个完整的规则。一旦我们完成这个工作, 接下来, 我们就要把这些自动生成的规则放进我们的主 Makefile 中。我们可以使用 Makefile 的 <code>include</code> 命令, 来引用别的 Makefile 文件, 例如:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sources = foo.c bar.c</span><br><span class=\"line\">include $(sources:.c=.d)</span><br></pre></td></tr></table></figure>\n\n<p>上述语句中的<code>$(sources:.c=.d)</code>中的<code>.c=.d</code>的意思是做一个替换, 把变量<code>$(sources)</code>所有的<code>[.c]</code>的字符串都替换成<code>[.d]</code>, 关于这个替换的内容, 在后面我们会有更详细的讲述。因为include是按次序来载入文件, 所以最先载入的<code>[.d]</code>文件中的目标会成为默认目标。</p>"},{"title":"《跟我一起写makefile (四)》摘抄","date":"2019-06-03T12:32:37.000Z","_content":"\n# 书写规则\n\n&emsp;&emsp;规则包含两部分, 一个是依赖关系, 一个是生成目标的方法。\n\n&emsp;&emsp;在 Makefile 中, 规则的顺序是很重要的。因为 Makefile 应该只有一个最终目标, 其他的目标都是被这个目标所连带出来的, 所以一定要让 make 知道你的最终目的是什么。一般来说, 定义在 Makefile 中的目标可能会有很多, 但是第一条规则中的目标将被确立为最终目标。如果第一条规则中的目标有很多个, 那么第一个目标会成为最终目标, make 所完成的也就是这个目标。\n\n<!--more-->\n\n## 一、规则举例\n\n```\nfoo.o : foo.c defs.h\n\tcc -c -g foo.c\n```\n\n## 二、在规则中使用通配符\n\nmake 支持三个通配符: `*`, `?`, `...`, 这是和 Unix 的 B-Shell 是相同的。\n\n波浪号 `~` 代表的是当前用户下的目录, `~test` 表示 test 用户下的目录, 而在 Windows 或 MS-DOS 下所指的目录根据环境变量 HOME 而定。\n\n举例:\n\n```\nclean:\n\trm -f *.o\n```\n\n> 删除所有后缀是.o的文件\n\n```\nprint: *.c\n\tlpr -p $?\n\ttouch print\n```\n\n> 通配符在规则中也支持, 目标print依赖所有的.c文件\n\n```\nobjects = *.o\n```\n\n> 这样写, 通配符并不会被展开, 而是只去匹配*.o的文件, 如果想在变量中使用通配符, 可以这样:\n> objects := $(wildcard *.o)\n\n# 三、文件搜寻\n\n在一些大的工程中, 有大量的源文件, 我们通常的做法是把这许多的源文件分类, 并存放在不同的目录中。所以当 make 需要去找寻文件的依赖关系时, 你可以在文件前加上路径, 但最好的方法是把一个路径告诉 make, 让 make 自动去找。\n\nMakefile 文件中的特殊变量 \"VPATH\" 就是完成这个功能的， 如果没有指明这个变量, make 只会在当前的目录中去找依赖文件和目标文件, 如果定义了这个变量, 那么 make 就会在当前目录中找不到的情况下, 到所指定的目录去找寻文件了。\n\n> VPATH = src:../headers\n\n上面的定义指定了两个目录, \"src\" 和 \"../headers\", make 会按照这个顺序进行搜索, 目录由 `:` 分割。\n\n另一个设置文件搜索路径的方法是使用 make 的 \"vpath\" 关键字, 这是 make 的一个关键字, 比上面提到的 VPATH 更为灵活, 可以指定不同文件在不同的搜索目录中。它的使用方法有三种:\n\n* `vpath <pattern> <directories>`\n\n> 为符合模式`<pattern>`的文件指定搜索目录`<directories>`\n\n* `vpath <pattern>` \n\n> 清除符合模式`<pattern>`的文件搜索目录\n\n* `vpath`\n\n> 清除所有已被设置好的文件搜索目录\n\nvpath 使用方法中的 `<pattern>` 需要包含 `%` 字符, 例如 `%.h` 表示了所有以 .h 结尾的文件。\n\npattern 指定了要搜索的文件集, 而 directories 制定了 pattern 的文件集的搜索的目录, 比如:\n\n> vpath %.h ../headers\n\n该语句表示, 要求 make 在 \"../headers\" 目录下搜索所有以 .h 结尾的文件。(如果某文件在当前目录没有找到的话)\n\n我们可以连续地使用 vpath 语句, 以指定不同的搜索策略, 如果连续的 vpath 语句中出现了相同的 pattern, 或是被重复了的 pattern, 那么 make 会按照 vpath 语句的先后顺序来搜索。如:\n\n\tvpath %.c foo\n\tvpath % blish\n\tvpath &.c bar\n\n> 表示 .c 结尾的文件, 先在 foo 目录, 然后是 blish, 最后是 bar 目录。\n\n\tvpath %.c foo:bar\n\tvpath % blish\n\n> 表示 .c 结尾的文件, 先在 foo 目录, 然后是 bar 目录, 最后是 blish 目录。\n\n# 五、伪目标\n\n最早先的例子中, 我们提到过一个 clean 的目标, 这是一个伪目标。\n\n\tclean:\n\t\trm *.o temp\n\n正像我们前面例子中的 clean 一样, 既然我们生成了许多文件编译文件, 我们也应该提供一个清除他们的目标以备完整的重编译使用。\n\n因为我们并不生成 clean 文件, 它只是一个标签, 所以当我们需要使用它时需要显式的指定它来执行。这个标签不能和其他的目标文件重名, 当然, 为了避免这种情况, 可以使用 .PHONY 的文件来显式的指明他是一个伪目标, 这样, 不管是否有这个文件, 这个目标就是一个伪目标。\n\n\t.PHONY clean\n\n伪目标一般没有依赖的文件, 但是我们也可以为伪目标指定所依赖的文件。伪目标同样可以作为\"默认目标\", 只要将其放在第一个。一个示例就是, 如果你的 Makefile 需要一口气生成若干可执行文件, 但你只想简单地敲一个 make 完事, 并且, 所有的目标文件都写在一个 Makefile 中, 那么你可以使用伪目标的不生成文件的特性:\n\n```\nall : prog1 prog2 prog3\n.PHONY : all\nprog1 : prog1.o utils.o\n\tcc -o prog1 prog1.o utils.o\n\nprog2 : prog2.o\n\tcc -o prog2 prog2.o\n\nprog3 : prog3.o sort.o utils.o\n\tcc -o prog3 prog3.o sort.o utils.o\n```\n\n我们知道 Makefile 的第一个目标总是默认目标, 我们声明了一个 all 的伪目标, 其依赖于其他三个目标, 由于伪目标不生成文件, 所以总是会被执行。\n\n从上面的例子也可以看出, 目标也可以成为依赖, 所以伪目标也可以成为依赖, 看下面的例子:\n\n```\n.PHONY cleanall cleanobj cleandiff\n\ncleanall : cleanobj cleandiff\n\trm program\n\ncleanobj :\n\trm *.o\n\ncleandiff :\n\trm *.diff\n```\n\n这样我们可以通过输入 `make cleanall` 和 `make cleanobj` 还有 `make cleandiff` 来达到清除不同类型文件的目的。\n","source":"_posts/note/blog_note/edit-makefile/edit-makefile-four.md","raw":"---\ntitle: 《跟我一起写makefile (四)》摘抄\ndate: 2019-06-03 20:32:37\ncategories:\n- 笔记\n- 读博客笔记\n- 跟我一起写makefile\ntags:\n- c++\n- 笔记\n- makefile\n---\n\n# 书写规则\n\n&emsp;&emsp;规则包含两部分, 一个是依赖关系, 一个是生成目标的方法。\n\n&emsp;&emsp;在 Makefile 中, 规则的顺序是很重要的。因为 Makefile 应该只有一个最终目标, 其他的目标都是被这个目标所连带出来的, 所以一定要让 make 知道你的最终目的是什么。一般来说, 定义在 Makefile 中的目标可能会有很多, 但是第一条规则中的目标将被确立为最终目标。如果第一条规则中的目标有很多个, 那么第一个目标会成为最终目标, make 所完成的也就是这个目标。\n\n<!--more-->\n\n## 一、规则举例\n\n```\nfoo.o : foo.c defs.h\n\tcc -c -g foo.c\n```\n\n## 二、在规则中使用通配符\n\nmake 支持三个通配符: `*`, `?`, `...`, 这是和 Unix 的 B-Shell 是相同的。\n\n波浪号 `~` 代表的是当前用户下的目录, `~test` 表示 test 用户下的目录, 而在 Windows 或 MS-DOS 下所指的目录根据环境变量 HOME 而定。\n\n举例:\n\n```\nclean:\n\trm -f *.o\n```\n\n> 删除所有后缀是.o的文件\n\n```\nprint: *.c\n\tlpr -p $?\n\ttouch print\n```\n\n> 通配符在规则中也支持, 目标print依赖所有的.c文件\n\n```\nobjects = *.o\n```\n\n> 这样写, 通配符并不会被展开, 而是只去匹配*.o的文件, 如果想在变量中使用通配符, 可以这样:\n> objects := $(wildcard *.o)\n\n# 三、文件搜寻\n\n在一些大的工程中, 有大量的源文件, 我们通常的做法是把这许多的源文件分类, 并存放在不同的目录中。所以当 make 需要去找寻文件的依赖关系时, 你可以在文件前加上路径, 但最好的方法是把一个路径告诉 make, 让 make 自动去找。\n\nMakefile 文件中的特殊变量 \"VPATH\" 就是完成这个功能的， 如果没有指明这个变量, make 只会在当前的目录中去找依赖文件和目标文件, 如果定义了这个变量, 那么 make 就会在当前目录中找不到的情况下, 到所指定的目录去找寻文件了。\n\n> VPATH = src:../headers\n\n上面的定义指定了两个目录, \"src\" 和 \"../headers\", make 会按照这个顺序进行搜索, 目录由 `:` 分割。\n\n另一个设置文件搜索路径的方法是使用 make 的 \"vpath\" 关键字, 这是 make 的一个关键字, 比上面提到的 VPATH 更为灵活, 可以指定不同文件在不同的搜索目录中。它的使用方法有三种:\n\n* `vpath <pattern> <directories>`\n\n> 为符合模式`<pattern>`的文件指定搜索目录`<directories>`\n\n* `vpath <pattern>` \n\n> 清除符合模式`<pattern>`的文件搜索目录\n\n* `vpath`\n\n> 清除所有已被设置好的文件搜索目录\n\nvpath 使用方法中的 `<pattern>` 需要包含 `%` 字符, 例如 `%.h` 表示了所有以 .h 结尾的文件。\n\npattern 指定了要搜索的文件集, 而 directories 制定了 pattern 的文件集的搜索的目录, 比如:\n\n> vpath %.h ../headers\n\n该语句表示, 要求 make 在 \"../headers\" 目录下搜索所有以 .h 结尾的文件。(如果某文件在当前目录没有找到的话)\n\n我们可以连续地使用 vpath 语句, 以指定不同的搜索策略, 如果连续的 vpath 语句中出现了相同的 pattern, 或是被重复了的 pattern, 那么 make 会按照 vpath 语句的先后顺序来搜索。如:\n\n\tvpath %.c foo\n\tvpath % blish\n\tvpath &.c bar\n\n> 表示 .c 结尾的文件, 先在 foo 目录, 然后是 blish, 最后是 bar 目录。\n\n\tvpath %.c foo:bar\n\tvpath % blish\n\n> 表示 .c 结尾的文件, 先在 foo 目录, 然后是 bar 目录, 最后是 blish 目录。\n\n# 五、伪目标\n\n最早先的例子中, 我们提到过一个 clean 的目标, 这是一个伪目标。\n\n\tclean:\n\t\trm *.o temp\n\n正像我们前面例子中的 clean 一样, 既然我们生成了许多文件编译文件, 我们也应该提供一个清除他们的目标以备完整的重编译使用。\n\n因为我们并不生成 clean 文件, 它只是一个标签, 所以当我们需要使用它时需要显式的指定它来执行。这个标签不能和其他的目标文件重名, 当然, 为了避免这种情况, 可以使用 .PHONY 的文件来显式的指明他是一个伪目标, 这样, 不管是否有这个文件, 这个目标就是一个伪目标。\n\n\t.PHONY clean\n\n伪目标一般没有依赖的文件, 但是我们也可以为伪目标指定所依赖的文件。伪目标同样可以作为\"默认目标\", 只要将其放在第一个。一个示例就是, 如果你的 Makefile 需要一口气生成若干可执行文件, 但你只想简单地敲一个 make 完事, 并且, 所有的目标文件都写在一个 Makefile 中, 那么你可以使用伪目标的不生成文件的特性:\n\n```\nall : prog1 prog2 prog3\n.PHONY : all\nprog1 : prog1.o utils.o\n\tcc -o prog1 prog1.o utils.o\n\nprog2 : prog2.o\n\tcc -o prog2 prog2.o\n\nprog3 : prog3.o sort.o utils.o\n\tcc -o prog3 prog3.o sort.o utils.o\n```\n\n我们知道 Makefile 的第一个目标总是默认目标, 我们声明了一个 all 的伪目标, 其依赖于其他三个目标, 由于伪目标不生成文件, 所以总是会被执行。\n\n从上面的例子也可以看出, 目标也可以成为依赖, 所以伪目标也可以成为依赖, 看下面的例子:\n\n```\n.PHONY cleanall cleanobj cleandiff\n\ncleanall : cleanobj cleandiff\n\trm program\n\ncleanobj :\n\trm *.o\n\ncleandiff :\n\trm *.diff\n```\n\n这样我们可以通过输入 `make cleanall` 和 `make cleanobj` 还有 `make cleandiff` 来达到清除不同类型文件的目的。\n","slug":"note/blog_note/edit-makefile/edit-makefile-four","published":1,"updated":"2022-10-02T15:42:47.414Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejv8007o3vsbc6zf3ssr","content":"<h1 id=\"书写规则\"><a href=\"#书写规则\" class=\"headerlink\" title=\"书写规则\"></a>书写规则</h1><p>&amp;emsp;&amp;emsp;规则包含两部分, 一个是依赖关系, 一个是生成目标的方法。</p>\n<p>&amp;emsp;&amp;emsp;在 Makefile 中, 规则的顺序是很重要的。因为 Makefile 应该只有一个最终目标, 其他的目标都是被这个目标所连带出来的, 所以一定要让 make 知道你的最终目的是什么。一般来说, 定义在 Makefile 中的目标可能会有很多, 但是第一条规则中的目标将被确立为最终目标。如果第一条规则中的目标有很多个, 那么第一个目标会成为最终目标, make 所完成的也就是这个目标。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"一、规则举例\"><a href=\"#一、规则举例\" class=\"headerlink\" title=\"一、规则举例\"></a>一、规则举例</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo.o : foo.c defs.h</span><br><span class=\"line\">\tcc -c -g foo.c</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二、在规则中使用通配符\"><a href=\"#二、在规则中使用通配符\" class=\"headerlink\" title=\"二、在规则中使用通配符\"></a>二、在规则中使用通配符</h2><p>make 支持三个通配符: <code>*</code>, <code>?</code>, <code>...</code>, 这是和 Unix 的 B-Shell 是相同的。</p>\n<p>波浪号 <code>~</code> 代表的是当前用户下的目录, <code>~test</code> 表示 test 用户下的目录, 而在 Windows 或 MS-DOS 下所指的目录根据环境变量 HOME 而定。</p>\n<p>举例:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clean:</span><br><span class=\"line\">\trm -f *.o</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>删除所有后缀是.o的文件</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print: *.c</span><br><span class=\"line\">\tlpr -p $?</span><br><span class=\"line\">\ttouch print</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>通配符在规则中也支持, 目标print依赖所有的.c文件</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">objects = *.o</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这样写, 通配符并不会被展开, 而是只去匹配*.o的文件, 如果想在变量中使用通配符, 可以这样:<br>objects :&#x3D; $(wildcard *.o)</p>\n</blockquote>\n<h1 id=\"三、文件搜寻\"><a href=\"#三、文件搜寻\" class=\"headerlink\" title=\"三、文件搜寻\"></a>三、文件搜寻</h1><p>在一些大的工程中, 有大量的源文件, 我们通常的做法是把这许多的源文件分类, 并存放在不同的目录中。所以当 make 需要去找寻文件的依赖关系时, 你可以在文件前加上路径, 但最好的方法是把一个路径告诉 make, 让 make 自动去找。</p>\n<p>Makefile 文件中的特殊变量 “VPATH” 就是完成这个功能的， 如果没有指明这个变量, make 只会在当前的目录中去找依赖文件和目标文件, 如果定义了这个变量, 那么 make 就会在当前目录中找不到的情况下, 到所指定的目录去找寻文件了。</p>\n<blockquote>\n<p>VPATH &#x3D; src:..&#x2F;headers</p>\n</blockquote>\n<p>上面的定义指定了两个目录, “src” 和 “..&#x2F;headers”, make 会按照这个顺序进行搜索, 目录由 <code>:</code> 分割。</p>\n<p>另一个设置文件搜索路径的方法是使用 make 的 “vpath” 关键字, 这是 make 的一个关键字, 比上面提到的 VPATH 更为灵活, 可以指定不同文件在不同的搜索目录中。它的使用方法有三种:</p>\n<ul>\n<li><code>vpath &lt;pattern&gt; &lt;directories&gt;</code></li>\n</ul>\n<blockquote>\n<p>为符合模式<code>&lt;pattern&gt;</code>的文件指定搜索目录<code>&lt;directories&gt;</code></p>\n</blockquote>\n<ul>\n<li><code>vpath &lt;pattern&gt;</code></li>\n</ul>\n<blockquote>\n<p>清除符合模式<code>&lt;pattern&gt;</code>的文件搜索目录</p>\n</blockquote>\n<ul>\n<li><code>vpath</code></li>\n</ul>\n<blockquote>\n<p>清除所有已被设置好的文件搜索目录</p>\n</blockquote>\n<p>vpath 使用方法中的 <code>&lt;pattern&gt;</code> 需要包含 <code>%</code> 字符, 例如 <code>%.h</code> 表示了所有以 .h 结尾的文件。</p>\n<p>pattern 指定了要搜索的文件集, 而 directories 制定了 pattern 的文件集的搜索的目录, 比如:</p>\n<blockquote>\n<p>vpath %.h ..&#x2F;headers</p>\n</blockquote>\n<p>该语句表示, 要求 make 在 “..&#x2F;headers” 目录下搜索所有以 .h 结尾的文件。(如果某文件在当前目录没有找到的话)</p>\n<p>我们可以连续地使用 vpath 语句, 以指定不同的搜索策略, 如果连续的 vpath 语句中出现了相同的 pattern, 或是被重复了的 pattern, 那么 make 会按照 vpath 语句的先后顺序来搜索。如:</p>\n<pre><code>vpath %.c foo\nvpath % blish\nvpath &amp;.c bar\n</code></pre>\n<blockquote>\n<p>表示 .c 结尾的文件, 先在 foo 目录, 然后是 blish, 最后是 bar 目录。</p>\n</blockquote>\n<pre><code>vpath %.c foo:bar\nvpath % blish\n</code></pre>\n<blockquote>\n<p>表示 .c 结尾的文件, 先在 foo 目录, 然后是 bar 目录, 最后是 blish 目录。</p>\n</blockquote>\n<h1 id=\"五、伪目标\"><a href=\"#五、伪目标\" class=\"headerlink\" title=\"五、伪目标\"></a>五、伪目标</h1><p>最早先的例子中, 我们提到过一个 clean 的目标, 这是一个伪目标。</p>\n<pre><code>clean:\n    rm *.o temp\n</code></pre>\n<p>正像我们前面例子中的 clean 一样, 既然我们生成了许多文件编译文件, 我们也应该提供一个清除他们的目标以备完整的重编译使用。</p>\n<p>因为我们并不生成 clean 文件, 它只是一个标签, 所以当我们需要使用它时需要显式的指定它来执行。这个标签不能和其他的目标文件重名, 当然, 为了避免这种情况, 可以使用 .PHONY 的文件来显式的指明他是一个伪目标, 这样, 不管是否有这个文件, 这个目标就是一个伪目标。</p>\n<pre><code>.PHONY clean\n</code></pre>\n<p>伪目标一般没有依赖的文件, 但是我们也可以为伪目标指定所依赖的文件。伪目标同样可以作为”默认目标”, 只要将其放在第一个。一个示例就是, 如果你的 Makefile 需要一口气生成若干可执行文件, 但你只想简单地敲一个 make 完事, 并且, 所有的目标文件都写在一个 Makefile 中, 那么你可以使用伪目标的不生成文件的特性:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">all : prog1 prog2 prog3</span><br><span class=\"line\">.PHONY : all</span><br><span class=\"line\">prog1 : prog1.o utils.o</span><br><span class=\"line\">\tcc -o prog1 prog1.o utils.o</span><br><span class=\"line\"></span><br><span class=\"line\">prog2 : prog2.o</span><br><span class=\"line\">\tcc -o prog2 prog2.o</span><br><span class=\"line\"></span><br><span class=\"line\">prog3 : prog3.o sort.o utils.o</span><br><span class=\"line\">\tcc -o prog3 prog3.o sort.o utils.o</span><br></pre></td></tr></table></figure>\n\n<p>我们知道 Makefile 的第一个目标总是默认目标, 我们声明了一个 all 的伪目标, 其依赖于其他三个目标, 由于伪目标不生成文件, 所以总是会被执行。</p>\n<p>从上面的例子也可以看出, 目标也可以成为依赖, 所以伪目标也可以成为依赖, 看下面的例子:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.PHONY cleanall cleanobj cleandiff</span><br><span class=\"line\"></span><br><span class=\"line\">cleanall : cleanobj cleandiff</span><br><span class=\"line\">\trm program</span><br><span class=\"line\"></span><br><span class=\"line\">cleanobj :</span><br><span class=\"line\">\trm *.o</span><br><span class=\"line\"></span><br><span class=\"line\">cleandiff :</span><br><span class=\"line\">\trm *.diff</span><br></pre></td></tr></table></figure>\n\n<p>这样我们可以通过输入 <code>make cleanall</code> 和 <code>make cleanobj</code> 还有 <code>make cleandiff</code> 来达到清除不同类型文件的目的。</p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"书写规则\"><a href=\"#书写规则\" class=\"headerlink\" title=\"书写规则\"></a>书写规则</h1><p>&amp;emsp;&amp;emsp;规则包含两部分, 一个是依赖关系, 一个是生成目标的方法。</p>\n<p>&amp;emsp;&amp;emsp;在 Makefile 中, 规则的顺序是很重要的。因为 Makefile 应该只有一个最终目标, 其他的目标都是被这个目标所连带出来的, 所以一定要让 make 知道你的最终目的是什么。一般来说, 定义在 Makefile 中的目标可能会有很多, 但是第一条规则中的目标将被确立为最终目标。如果第一条规则中的目标有很多个, 那么第一个目标会成为最终目标, make 所完成的也就是这个目标。</p>","more":"<h2 id=\"一、规则举例\"><a href=\"#一、规则举例\" class=\"headerlink\" title=\"一、规则举例\"></a>一、规则举例</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo.o : foo.c defs.h</span><br><span class=\"line\">\tcc -c -g foo.c</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二、在规则中使用通配符\"><a href=\"#二、在规则中使用通配符\" class=\"headerlink\" title=\"二、在规则中使用通配符\"></a>二、在规则中使用通配符</h2><p>make 支持三个通配符: <code>*</code>, <code>?</code>, <code>...</code>, 这是和 Unix 的 B-Shell 是相同的。</p>\n<p>波浪号 <code>~</code> 代表的是当前用户下的目录, <code>~test</code> 表示 test 用户下的目录, 而在 Windows 或 MS-DOS 下所指的目录根据环境变量 HOME 而定。</p>\n<p>举例:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clean:</span><br><span class=\"line\">\trm -f *.o</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>删除所有后缀是.o的文件</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print: *.c</span><br><span class=\"line\">\tlpr -p $?</span><br><span class=\"line\">\ttouch print</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>通配符在规则中也支持, 目标print依赖所有的.c文件</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">objects = *.o</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这样写, 通配符并不会被展开, 而是只去匹配*.o的文件, 如果想在变量中使用通配符, 可以这样:<br>objects :&#x3D; $(wildcard *.o)</p>\n</blockquote>\n<h1 id=\"三、文件搜寻\"><a href=\"#三、文件搜寻\" class=\"headerlink\" title=\"三、文件搜寻\"></a>三、文件搜寻</h1><p>在一些大的工程中, 有大量的源文件, 我们通常的做法是把这许多的源文件分类, 并存放在不同的目录中。所以当 make 需要去找寻文件的依赖关系时, 你可以在文件前加上路径, 但最好的方法是把一个路径告诉 make, 让 make 自动去找。</p>\n<p>Makefile 文件中的特殊变量 “VPATH” 就是完成这个功能的， 如果没有指明这个变量, make 只会在当前的目录中去找依赖文件和目标文件, 如果定义了这个变量, 那么 make 就会在当前目录中找不到的情况下, 到所指定的目录去找寻文件了。</p>\n<blockquote>\n<p>VPATH &#x3D; src:..&#x2F;headers</p>\n</blockquote>\n<p>上面的定义指定了两个目录, “src” 和 “..&#x2F;headers”, make 会按照这个顺序进行搜索, 目录由 <code>:</code> 分割。</p>\n<p>另一个设置文件搜索路径的方法是使用 make 的 “vpath” 关键字, 这是 make 的一个关键字, 比上面提到的 VPATH 更为灵活, 可以指定不同文件在不同的搜索目录中。它的使用方法有三种:</p>\n<ul>\n<li><code>vpath &lt;pattern&gt; &lt;directories&gt;</code></li>\n</ul>\n<blockquote>\n<p>为符合模式<code>&lt;pattern&gt;</code>的文件指定搜索目录<code>&lt;directories&gt;</code></p>\n</blockquote>\n<ul>\n<li><code>vpath &lt;pattern&gt;</code></li>\n</ul>\n<blockquote>\n<p>清除符合模式<code>&lt;pattern&gt;</code>的文件搜索目录</p>\n</blockquote>\n<ul>\n<li><code>vpath</code></li>\n</ul>\n<blockquote>\n<p>清除所有已被设置好的文件搜索目录</p>\n</blockquote>\n<p>vpath 使用方法中的 <code>&lt;pattern&gt;</code> 需要包含 <code>%</code> 字符, 例如 <code>%.h</code> 表示了所有以 .h 结尾的文件。</p>\n<p>pattern 指定了要搜索的文件集, 而 directories 制定了 pattern 的文件集的搜索的目录, 比如:</p>\n<blockquote>\n<p>vpath %.h ..&#x2F;headers</p>\n</blockquote>\n<p>该语句表示, 要求 make 在 “..&#x2F;headers” 目录下搜索所有以 .h 结尾的文件。(如果某文件在当前目录没有找到的话)</p>\n<p>我们可以连续地使用 vpath 语句, 以指定不同的搜索策略, 如果连续的 vpath 语句中出现了相同的 pattern, 或是被重复了的 pattern, 那么 make 会按照 vpath 语句的先后顺序来搜索。如:</p>\n<pre><code>vpath %.c foo\nvpath % blish\nvpath &amp;.c bar\n</code></pre>\n<blockquote>\n<p>表示 .c 结尾的文件, 先在 foo 目录, 然后是 blish, 最后是 bar 目录。</p>\n</blockquote>\n<pre><code>vpath %.c foo:bar\nvpath % blish\n</code></pre>\n<blockquote>\n<p>表示 .c 结尾的文件, 先在 foo 目录, 然后是 bar 目录, 最后是 blish 目录。</p>\n</blockquote>\n<h1 id=\"五、伪目标\"><a href=\"#五、伪目标\" class=\"headerlink\" title=\"五、伪目标\"></a>五、伪目标</h1><p>最早先的例子中, 我们提到过一个 clean 的目标, 这是一个伪目标。</p>\n<pre><code>clean:\n    rm *.o temp\n</code></pre>\n<p>正像我们前面例子中的 clean 一样, 既然我们生成了许多文件编译文件, 我们也应该提供一个清除他们的目标以备完整的重编译使用。</p>\n<p>因为我们并不生成 clean 文件, 它只是一个标签, 所以当我们需要使用它时需要显式的指定它来执行。这个标签不能和其他的目标文件重名, 当然, 为了避免这种情况, 可以使用 .PHONY 的文件来显式的指明他是一个伪目标, 这样, 不管是否有这个文件, 这个目标就是一个伪目标。</p>\n<pre><code>.PHONY clean\n</code></pre>\n<p>伪目标一般没有依赖的文件, 但是我们也可以为伪目标指定所依赖的文件。伪目标同样可以作为”默认目标”, 只要将其放在第一个。一个示例就是, 如果你的 Makefile 需要一口气生成若干可执行文件, 但你只想简单地敲一个 make 完事, 并且, 所有的目标文件都写在一个 Makefile 中, 那么你可以使用伪目标的不生成文件的特性:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">all : prog1 prog2 prog3</span><br><span class=\"line\">.PHONY : all</span><br><span class=\"line\">prog1 : prog1.o utils.o</span><br><span class=\"line\">\tcc -o prog1 prog1.o utils.o</span><br><span class=\"line\"></span><br><span class=\"line\">prog2 : prog2.o</span><br><span class=\"line\">\tcc -o prog2 prog2.o</span><br><span class=\"line\"></span><br><span class=\"line\">prog3 : prog3.o sort.o utils.o</span><br><span class=\"line\">\tcc -o prog3 prog3.o sort.o utils.o</span><br></pre></td></tr></table></figure>\n\n<p>我们知道 Makefile 的第一个目标总是默认目标, 我们声明了一个 all 的伪目标, 其依赖于其他三个目标, 由于伪目标不生成文件, 所以总是会被执行。</p>\n<p>从上面的例子也可以看出, 目标也可以成为依赖, 所以伪目标也可以成为依赖, 看下面的例子:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.PHONY cleanall cleanobj cleandiff</span><br><span class=\"line\"></span><br><span class=\"line\">cleanall : cleanobj cleandiff</span><br><span class=\"line\">\trm program</span><br><span class=\"line\"></span><br><span class=\"line\">cleanobj :</span><br><span class=\"line\">\trm *.o</span><br><span class=\"line\"></span><br><span class=\"line\">cleandiff :</span><br><span class=\"line\">\trm *.diff</span><br></pre></td></tr></table></figure>\n\n<p>这样我们可以通过输入 <code>make cleanall</code> 和 <code>make cleanobj</code> 还有 <code>make cleandiff</code> 来达到清除不同类型文件的目的。</p>"},{"title":"《跟我一起写makefile (一)》摘抄","date":"2019-06-02T00:16:53.000Z","_content":"\n# 前言\n\n之前转载了一篇关于[Makefile](/c_plus_plus_primer/tips/make/edit-makefile.html)的文章, 但是总感觉还是有一些东西没有搞明白, 偶然间看到了陈浩大神的专栏, 其中就有[关于Makefile的一系列的文章](https://blog.csdn.net/haoel/article/details/2886), 遂决定对这一系列的文章进行摘抄。\n<!--more-->\n\n# 概述\n\n&emsp;&emsp;什么是 makefile? 或许很多 Windows 的程序远都不知道这个东西, 因为那些 Windows 的 IDE 都为你做了这个工作, 但我觉得要做一个好的和 professional 的程序员, makefile 还是要懂。这就好像现在有这么多的 HTML 编辑器, 但如果你想成为一个专业人士, 你还是要了解 HTML 标识的含义。特别在 Unix 下的软件编译, 你就不能不自己写 makefile 了, 会不会写 makefile, 也可以侧面说明了一个人是否具备完成大型工程的能力。\n\n&emsp;&emsp;因为, makefile 关系到了整个工程的编译规则, 一个工程中的源文件不计其数, 其按类型, 功能, 模块分别放在若干个目录中, makefile 定义了一系列的规则来指定, 哪些文件需要先编译, 哪些文件需要后编译, 哪些文件需要重新编译, 甚至于进行更复杂的功能操作, 因为 makefile 就像一个 shell 脚本一样, 也可以执行操作系统的命令。\n\n&emsp;&emsp;makefile 带来的好处就是——\"自动化编译\", 一旦写好, 只遇到一个 make 命令, 整个工程完全自动编译, 极大的提高了软件开发的效率。make 是一个命令工具, 是一个解释 makefile 中指令的命令工具, 一般来说, 大多数的 IDE 都有这个命令, 比如: Delphi 的 make, Visual C++ 的 nmake, Linux 下 GNU 的make。可见, makefile 都成为了一种在工程方面的的编译方法。\n\n&emsp;&emsp;现在讲述如何写 makefile 的文章比较少, 这是我想写这篇文章的原因, 当然, 不同厂商的 make 各不相同, 也有不同的语法, 但其本质都是在\"文件依赖性\"上做文章, 这里, 我仅对 GNU 的 make 进行讲述, 我的环境是 RedHat Linux 8.0, make 的版本是3.80。毕竟这个 make 是应用最为广泛的, 而且它还是遵循于 IEEE 1003.2-1992 标准的(POSIX.2)。\n\n&emsp;&emsp;在这篇文档中, 将以 C/C++ 的源码作为我们的基础, 所以必然涉及一些关于 C/C++ 的编译的知识, 相关于这方面的内容, 还请各位查看相关的编译器的文档。这里所默认的编译器是 UNIX 下的 GCC 和 CC。\n\n# 关于程序的编译和链接\n\n&emsp;&emsp;在此, 我想多说一些关于程序编译的一些规范和方法, 一般来说, 无论是 C, C++, 还是 pas, 首先要把源文件编译成中间代码文件, 在 Windows 下也就是 `.obj` 文件, UNIX 下是 `.o` 文件, 即Object File, 这个动作叫做编译(compile)。然后再把大量的 Object File 合成执行文件, 这个动作叫做链接(link)。\n\n&emsp;&emsp;编译时, 编译器需要的是语法的正确, 函数与变量的声明的正确, 对于后者, 通常是你需要告诉编译器头文件的所在位置(头文件中应该只是声明, 而定义应该放在 C/C++ 文件中), 只要所有的语法正确, 编译器就可以编译出中间目标文件。一般来说, 每个源文件都应该对应与一个中间目标文件(O 文件或是 OBJ 文件)。\n\n&emsp;&emsp;链接时, 主要是链接函数和全局变量, 所以, 我们可以使用这些中间目标文件(O 或 OBJ 文件)来链接我们的应用程序。链接器并不管函数所在的源文件, 只管函数的中间目标文件(Object File), 在大多数时候, 由于源文件太多, 编译生成的中间目标文件太多, 而在链接时需要明显地指出中间目标文件名, 这对于编译很不方便, 所以, 我们要给中间文件打个包, 在 Windows 下这种包叫做\"库文件\"(Library File), 也就是`.lib`文件, 在 UNIX 下是 Archive File, 也就是`.a`文件。\n\n&emsp;&emsp;总结一下, 源文件首先会生成中间目标文件, 再由中间目标文件生成执行文件。在编译时, 编译器只检测语法和函数, 变量是否被声明。如果函数未被声明, 编译器会给出一个警告, 但可以生成 Object File。而在链接程序时, 链接器会在所有的 Object File 中找寻函数的实现, 如果找不到, 那就会报链接错误码(Linker Error)。在 VC 下, 这种错误一般是: Link 2001 错误, 意思是说, 链接器未能找到函数的实现, 需要指定函数的 Object File。\n\n# Makefile 介绍\n\n&emsp;&emsp;make 命令执行时, 需要一个 Makefile 文件, 以告诉 make 命令需要怎么样的去编译和链接程序。\n\n首先, 我们用一个示例来说明 Makefile 的书写规则, 一边给大家一个感性认识。这个示例来源于 GNU 的 make 使用手册, 在这个示例中, 我们的工程有 8 个 C 文件, 和 3 个头文件, 我们要写一个 Makefile 来告诉 make 命令如何编译和链接这几个文件。我们的规则是:\n\n1. 如果这个工程没有编译过, 那么我们的所有 C 文件都要编译并被链接。\n2. 如果这个工程的某几个 C 文件被修改, 那么我们只编译被修改的 C 文件, 并链接目标程序。\n\n&emsp;&emsp;只要我们的 Makefile 写得够好, 所有的这一切, 我们只用一个 make 命令就可以完成, make 命令会自动智能地根据当前文件的修改情况来确定哪些文件需要重编译, 从而自己编译所需要的文件和链接目标程序。\n\n# 一、Makefile 的规则\n\n在讲述这个 Makefile 之前, 还是让我们来粗略地看看 Makefile 的规则。\n\n```\ntarget ... : prerequisites ...\n\tcommand\n\t...\n\t...\n```\n\ntarget, 也就是一个目标文件, 可以是 Object File, 也可以是可执行文件, 还可以是一个标签(Label), 对于标签, 在后续的\"伪目标\"中会有叙述。\n\nprerequisites 就是要生成 target 所需要的文件或是目标。\n\ncommand 是 make 需要执行的命令(任意的 Shell 命令)。\n\n&emsp;&emsp;这是一个文件的依赖关系, 也就是说, target 这一个或多个目标文件依赖于 prerequisites 中的文件, 其生成规则定义在 command 中。说白一点, prerequisites 中如果有一个以上的文件比 target 文件修改日期要新的话, command 所定义的命令就会被执行。这就是 Makefile 的规则, 也就是 Makefile 中最核心的内容。\n\n# 二、一个示例\n\n正如前面说的, 如果一个工程有 3 个头文件和 8 个 C 文件, 我们为了完成前面所述的那三个规则, 我们的 Makefile 应该是下面这个样子:\n\n```\nedit: main.o kbd.o command.o display.o /\n      insert.o search.o files.o utils.o\n\tcc -o edit main.o kbd.o command.o display.o /\n\tinsert.o search.o files.o utils.o\n\nmain.o : main.c defs.h\n\tcc -c main.c\n\nkbd.o : kbd.c defs.h command.h\n\tcc -c kbd.c\n\ncommand.o : command.c defs.h command.h\n\tcc -c command.c\n\ndisplay.o : display.c defs.h buffer.h\n\tcc -c display.c\n\ninsert.o : insert.c defs.h buffer.h\n\tcc -c insert.c\n\nsearch.o : search.c defs.h buffer.h\n\tcc -c search.c\n\nfile.o : file.c defs.h buffer.h command.h\n\tcc -c files.c\n\nutils.o : utils.c defs.h\n\tcc -c utils.c\n\nclean :\n\trm edit main.o kbd.o command.o display.o /\n\t   insert.o search.o file.o utils.o\n```\n\n&emsp;&emsp;反斜杠(/)是换行符的意思。这样比较便于 Makefile 的易读。我们可以把这个内容保存在文件为\"Makefile\" 或 \"makefile\"的文件中, 然后在该目录下直接输入命令\"make\"就可以生成执行文件 edit。如果要删除执行文件和所有的中间目标文件, 那么只要简单地执行\"make clean\"就可以了。\n\n&emsp;&emsp;在这个 makefile 中, 目标文件(target)包含: 执行文件 edit 和中间目标文件(*.o), 依赖文件(prerequisites)就是冒号后面那些`.c`文件和`.h`文件。每一个`.o`文件都有一组依赖文件。依赖关系的实质上就是说明了目标文件是由那些文件生成的, 换言之, 目标文件是哪些文件更新的。\n\n&emsp;&emsp;在定义好依赖关系后, 后续的哪一行定义了如何生成目标文件的操作系统命令, 一定要以一个 Tab 键作为开头。记住, make 兵部观命令是怎么工作的, 他只管执行所定义的命令。make 会比较 targets 文件和 prerequisites 文件的修改日期, 如果 prerequisites 文件的日期要比 targets 文件的日期新, 或者 target 不存在的话, 那么 make 就会执行后续定义的命令。\n\n&emsp;&emsp;这里要说明一点的是, clean 不是一个文件, 他只不过是一个动作名字, 有点像 C 语言中的 label 一样, 其冒号后面什么也没有, 那么, make 就不会自动去找文件的依赖性, 也就不会自动执行其后所定义的命令。要执行其后的命令, 就要在 make 命令后明显的指出这个 label 的名字。这样的方法非常有用, 我们可以在一个 makefile 中定义不用的编译或是和编译无关的命令, 比如程序的打包, 备份等。\n","source":"_posts/note/blog_note/edit-makefile/edit-makefile-one.md","raw":"---\ntitle: 《跟我一起写makefile (一)》摘抄\ndate: 2019-06-02 08:16:53\ncategories:\n- 笔记\n- 读博客笔记\n- 跟我一起写makefile\ntags:\n- c++\n- 笔记\n- makefile\n---\n\n# 前言\n\n之前转载了一篇关于[Makefile](/c_plus_plus_primer/tips/make/edit-makefile.html)的文章, 但是总感觉还是有一些东西没有搞明白, 偶然间看到了陈浩大神的专栏, 其中就有[关于Makefile的一系列的文章](https://blog.csdn.net/haoel/article/details/2886), 遂决定对这一系列的文章进行摘抄。\n<!--more-->\n\n# 概述\n\n&emsp;&emsp;什么是 makefile? 或许很多 Windows 的程序远都不知道这个东西, 因为那些 Windows 的 IDE 都为你做了这个工作, 但我觉得要做一个好的和 professional 的程序员, makefile 还是要懂。这就好像现在有这么多的 HTML 编辑器, 但如果你想成为一个专业人士, 你还是要了解 HTML 标识的含义。特别在 Unix 下的软件编译, 你就不能不自己写 makefile 了, 会不会写 makefile, 也可以侧面说明了一个人是否具备完成大型工程的能力。\n\n&emsp;&emsp;因为, makefile 关系到了整个工程的编译规则, 一个工程中的源文件不计其数, 其按类型, 功能, 模块分别放在若干个目录中, makefile 定义了一系列的规则来指定, 哪些文件需要先编译, 哪些文件需要后编译, 哪些文件需要重新编译, 甚至于进行更复杂的功能操作, 因为 makefile 就像一个 shell 脚本一样, 也可以执行操作系统的命令。\n\n&emsp;&emsp;makefile 带来的好处就是——\"自动化编译\", 一旦写好, 只遇到一个 make 命令, 整个工程完全自动编译, 极大的提高了软件开发的效率。make 是一个命令工具, 是一个解释 makefile 中指令的命令工具, 一般来说, 大多数的 IDE 都有这个命令, 比如: Delphi 的 make, Visual C++ 的 nmake, Linux 下 GNU 的make。可见, makefile 都成为了一种在工程方面的的编译方法。\n\n&emsp;&emsp;现在讲述如何写 makefile 的文章比较少, 这是我想写这篇文章的原因, 当然, 不同厂商的 make 各不相同, 也有不同的语法, 但其本质都是在\"文件依赖性\"上做文章, 这里, 我仅对 GNU 的 make 进行讲述, 我的环境是 RedHat Linux 8.0, make 的版本是3.80。毕竟这个 make 是应用最为广泛的, 而且它还是遵循于 IEEE 1003.2-1992 标准的(POSIX.2)。\n\n&emsp;&emsp;在这篇文档中, 将以 C/C++ 的源码作为我们的基础, 所以必然涉及一些关于 C/C++ 的编译的知识, 相关于这方面的内容, 还请各位查看相关的编译器的文档。这里所默认的编译器是 UNIX 下的 GCC 和 CC。\n\n# 关于程序的编译和链接\n\n&emsp;&emsp;在此, 我想多说一些关于程序编译的一些规范和方法, 一般来说, 无论是 C, C++, 还是 pas, 首先要把源文件编译成中间代码文件, 在 Windows 下也就是 `.obj` 文件, UNIX 下是 `.o` 文件, 即Object File, 这个动作叫做编译(compile)。然后再把大量的 Object File 合成执行文件, 这个动作叫做链接(link)。\n\n&emsp;&emsp;编译时, 编译器需要的是语法的正确, 函数与变量的声明的正确, 对于后者, 通常是你需要告诉编译器头文件的所在位置(头文件中应该只是声明, 而定义应该放在 C/C++ 文件中), 只要所有的语法正确, 编译器就可以编译出中间目标文件。一般来说, 每个源文件都应该对应与一个中间目标文件(O 文件或是 OBJ 文件)。\n\n&emsp;&emsp;链接时, 主要是链接函数和全局变量, 所以, 我们可以使用这些中间目标文件(O 或 OBJ 文件)来链接我们的应用程序。链接器并不管函数所在的源文件, 只管函数的中间目标文件(Object File), 在大多数时候, 由于源文件太多, 编译生成的中间目标文件太多, 而在链接时需要明显地指出中间目标文件名, 这对于编译很不方便, 所以, 我们要给中间文件打个包, 在 Windows 下这种包叫做\"库文件\"(Library File), 也就是`.lib`文件, 在 UNIX 下是 Archive File, 也就是`.a`文件。\n\n&emsp;&emsp;总结一下, 源文件首先会生成中间目标文件, 再由中间目标文件生成执行文件。在编译时, 编译器只检测语法和函数, 变量是否被声明。如果函数未被声明, 编译器会给出一个警告, 但可以生成 Object File。而在链接程序时, 链接器会在所有的 Object File 中找寻函数的实现, 如果找不到, 那就会报链接错误码(Linker Error)。在 VC 下, 这种错误一般是: Link 2001 错误, 意思是说, 链接器未能找到函数的实现, 需要指定函数的 Object File。\n\n# Makefile 介绍\n\n&emsp;&emsp;make 命令执行时, 需要一个 Makefile 文件, 以告诉 make 命令需要怎么样的去编译和链接程序。\n\n首先, 我们用一个示例来说明 Makefile 的书写规则, 一边给大家一个感性认识。这个示例来源于 GNU 的 make 使用手册, 在这个示例中, 我们的工程有 8 个 C 文件, 和 3 个头文件, 我们要写一个 Makefile 来告诉 make 命令如何编译和链接这几个文件。我们的规则是:\n\n1. 如果这个工程没有编译过, 那么我们的所有 C 文件都要编译并被链接。\n2. 如果这个工程的某几个 C 文件被修改, 那么我们只编译被修改的 C 文件, 并链接目标程序。\n\n&emsp;&emsp;只要我们的 Makefile 写得够好, 所有的这一切, 我们只用一个 make 命令就可以完成, make 命令会自动智能地根据当前文件的修改情况来确定哪些文件需要重编译, 从而自己编译所需要的文件和链接目标程序。\n\n# 一、Makefile 的规则\n\n在讲述这个 Makefile 之前, 还是让我们来粗略地看看 Makefile 的规则。\n\n```\ntarget ... : prerequisites ...\n\tcommand\n\t...\n\t...\n```\n\ntarget, 也就是一个目标文件, 可以是 Object File, 也可以是可执行文件, 还可以是一个标签(Label), 对于标签, 在后续的\"伪目标\"中会有叙述。\n\nprerequisites 就是要生成 target 所需要的文件或是目标。\n\ncommand 是 make 需要执行的命令(任意的 Shell 命令)。\n\n&emsp;&emsp;这是一个文件的依赖关系, 也就是说, target 这一个或多个目标文件依赖于 prerequisites 中的文件, 其生成规则定义在 command 中。说白一点, prerequisites 中如果有一个以上的文件比 target 文件修改日期要新的话, command 所定义的命令就会被执行。这就是 Makefile 的规则, 也就是 Makefile 中最核心的内容。\n\n# 二、一个示例\n\n正如前面说的, 如果一个工程有 3 个头文件和 8 个 C 文件, 我们为了完成前面所述的那三个规则, 我们的 Makefile 应该是下面这个样子:\n\n```\nedit: main.o kbd.o command.o display.o /\n      insert.o search.o files.o utils.o\n\tcc -o edit main.o kbd.o command.o display.o /\n\tinsert.o search.o files.o utils.o\n\nmain.o : main.c defs.h\n\tcc -c main.c\n\nkbd.o : kbd.c defs.h command.h\n\tcc -c kbd.c\n\ncommand.o : command.c defs.h command.h\n\tcc -c command.c\n\ndisplay.o : display.c defs.h buffer.h\n\tcc -c display.c\n\ninsert.o : insert.c defs.h buffer.h\n\tcc -c insert.c\n\nsearch.o : search.c defs.h buffer.h\n\tcc -c search.c\n\nfile.o : file.c defs.h buffer.h command.h\n\tcc -c files.c\n\nutils.o : utils.c defs.h\n\tcc -c utils.c\n\nclean :\n\trm edit main.o kbd.o command.o display.o /\n\t   insert.o search.o file.o utils.o\n```\n\n&emsp;&emsp;反斜杠(/)是换行符的意思。这样比较便于 Makefile 的易读。我们可以把这个内容保存在文件为\"Makefile\" 或 \"makefile\"的文件中, 然后在该目录下直接输入命令\"make\"就可以生成执行文件 edit。如果要删除执行文件和所有的中间目标文件, 那么只要简单地执行\"make clean\"就可以了。\n\n&emsp;&emsp;在这个 makefile 中, 目标文件(target)包含: 执行文件 edit 和中间目标文件(*.o), 依赖文件(prerequisites)就是冒号后面那些`.c`文件和`.h`文件。每一个`.o`文件都有一组依赖文件。依赖关系的实质上就是说明了目标文件是由那些文件生成的, 换言之, 目标文件是哪些文件更新的。\n\n&emsp;&emsp;在定义好依赖关系后, 后续的哪一行定义了如何生成目标文件的操作系统命令, 一定要以一个 Tab 键作为开头。记住, make 兵部观命令是怎么工作的, 他只管执行所定义的命令。make 会比较 targets 文件和 prerequisites 文件的修改日期, 如果 prerequisites 文件的日期要比 targets 文件的日期新, 或者 target 不存在的话, 那么 make 就会执行后续定义的命令。\n\n&emsp;&emsp;这里要说明一点的是, clean 不是一个文件, 他只不过是一个动作名字, 有点像 C 语言中的 label 一样, 其冒号后面什么也没有, 那么, make 就不会自动去找文件的依赖性, 也就不会自动执行其后所定义的命令。要执行其后的命令, 就要在 make 命令后明显的指出这个 label 的名字。这样的方法非常有用, 我们可以在一个 makefile 中定义不用的编译或是和编译无关的命令, 比如程序的打包, 备份等。\n","slug":"note/blog_note/edit-makefile/edit-makefile-one","published":1,"updated":"2022-10-02T15:42:58.107Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejvb007q3vsbd68f1vv2","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>之前转载了一篇关于<a href=\"/c_plus_plus_primer/tips/make/edit-makefile.html\">Makefile</a>的文章, 但是总感觉还是有一些东西没有搞明白, 偶然间看到了陈浩大神的专栏, 其中就有<a href=\"https://blog.csdn.net/haoel/article/details/2886\">关于Makefile的一系列的文章</a>, 遂决定对这一系列的文章进行摘抄。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>&amp;emsp;&amp;emsp;什么是 makefile? 或许很多 Windows 的程序远都不知道这个东西, 因为那些 Windows 的 IDE 都为你做了这个工作, 但我觉得要做一个好的和 professional 的程序员, makefile 还是要懂。这就好像现在有这么多的 HTML 编辑器, 但如果你想成为一个专业人士, 你还是要了解 HTML 标识的含义。特别在 Unix 下的软件编译, 你就不能不自己写 makefile 了, 会不会写 makefile, 也可以侧面说明了一个人是否具备完成大型工程的能力。</p>\n<p>&amp;emsp;&amp;emsp;因为, makefile 关系到了整个工程的编译规则, 一个工程中的源文件不计其数, 其按类型, 功能, 模块分别放在若干个目录中, makefile 定义了一系列的规则来指定, 哪些文件需要先编译, 哪些文件需要后编译, 哪些文件需要重新编译, 甚至于进行更复杂的功能操作, 因为 makefile 就像一个 shell 脚本一样, 也可以执行操作系统的命令。</p>\n<p>&amp;emsp;&amp;emsp;makefile 带来的好处就是——“自动化编译”, 一旦写好, 只遇到一个 make 命令, 整个工程完全自动编译, 极大的提高了软件开发的效率。make 是一个命令工具, 是一个解释 makefile 中指令的命令工具, 一般来说, 大多数的 IDE 都有这个命令, 比如: Delphi 的 make, Visual C++ 的 nmake, Linux 下 GNU 的make。可见, makefile 都成为了一种在工程方面的的编译方法。</p>\n<p>&amp;emsp;&amp;emsp;现在讲述如何写 makefile 的文章比较少, 这是我想写这篇文章的原因, 当然, 不同厂商的 make 各不相同, 也有不同的语法, 但其本质都是在”文件依赖性”上做文章, 这里, 我仅对 GNU 的 make 进行讲述, 我的环境是 RedHat Linux 8.0, make 的版本是3.80。毕竟这个 make 是应用最为广泛的, 而且它还是遵循于 IEEE 1003.2-1992 标准的(POSIX.2)。</p>\n<p>&amp;emsp;&amp;emsp;在这篇文档中, 将以 C&#x2F;C++ 的源码作为我们的基础, 所以必然涉及一些关于 C&#x2F;C++ 的编译的知识, 相关于这方面的内容, 还请各位查看相关的编译器的文档。这里所默认的编译器是 UNIX 下的 GCC 和 CC。</p>\n<h1 id=\"关于程序的编译和链接\"><a href=\"#关于程序的编译和链接\" class=\"headerlink\" title=\"关于程序的编译和链接\"></a>关于程序的编译和链接</h1><p>&amp;emsp;&amp;emsp;在此, 我想多说一些关于程序编译的一些规范和方法, 一般来说, 无论是 C, C++, 还是 pas, 首先要把源文件编译成中间代码文件, 在 Windows 下也就是 <code>.obj</code> 文件, UNIX 下是 <code>.o</code> 文件, 即Object File, 这个动作叫做编译(compile)。然后再把大量的 Object File 合成执行文件, 这个动作叫做链接(link)。</p>\n<p>&amp;emsp;&amp;emsp;编译时, 编译器需要的是语法的正确, 函数与变量的声明的正确, 对于后者, 通常是你需要告诉编译器头文件的所在位置(头文件中应该只是声明, 而定义应该放在 C&#x2F;C++ 文件中), 只要所有的语法正确, 编译器就可以编译出中间目标文件。一般来说, 每个源文件都应该对应与一个中间目标文件(O 文件或是 OBJ 文件)。</p>\n<p>&amp;emsp;&amp;emsp;链接时, 主要是链接函数和全局变量, 所以, 我们可以使用这些中间目标文件(O 或 OBJ 文件)来链接我们的应用程序。链接器并不管函数所在的源文件, 只管函数的中间目标文件(Object File), 在大多数时候, 由于源文件太多, 编译生成的中间目标文件太多, 而在链接时需要明显地指出中间目标文件名, 这对于编译很不方便, 所以, 我们要给中间文件打个包, 在 Windows 下这种包叫做”库文件”(Library File), 也就是<code>.lib</code>文件, 在 UNIX 下是 Archive File, 也就是<code>.a</code>文件。</p>\n<p>&amp;emsp;&amp;emsp;总结一下, 源文件首先会生成中间目标文件, 再由中间目标文件生成执行文件。在编译时, 编译器只检测语法和函数, 变量是否被声明。如果函数未被声明, 编译器会给出一个警告, 但可以生成 Object File。而在链接程序时, 链接器会在所有的 Object File 中找寻函数的实现, 如果找不到, 那就会报链接错误码(Linker Error)。在 VC 下, 这种错误一般是: Link 2001 错误, 意思是说, 链接器未能找到函数的实现, 需要指定函数的 Object File。</p>\n<h1 id=\"Makefile-介绍\"><a href=\"#Makefile-介绍\" class=\"headerlink\" title=\"Makefile 介绍\"></a>Makefile 介绍</h1><p>&amp;emsp;&amp;emsp;make 命令执行时, 需要一个 Makefile 文件, 以告诉 make 命令需要怎么样的去编译和链接程序。</p>\n<p>首先, 我们用一个示例来说明 Makefile 的书写规则, 一边给大家一个感性认识。这个示例来源于 GNU 的 make 使用手册, 在这个示例中, 我们的工程有 8 个 C 文件, 和 3 个头文件, 我们要写一个 Makefile 来告诉 make 命令如何编译和链接这几个文件。我们的规则是:</p>\n<ol>\n<li>如果这个工程没有编译过, 那么我们的所有 C 文件都要编译并被链接。</li>\n<li>如果这个工程的某几个 C 文件被修改, 那么我们只编译被修改的 C 文件, 并链接目标程序。</li>\n</ol>\n<p>&amp;emsp;&amp;emsp;只要我们的 Makefile 写得够好, 所有的这一切, 我们只用一个 make 命令就可以完成, make 命令会自动智能地根据当前文件的修改情况来确定哪些文件需要重编译, 从而自己编译所需要的文件和链接目标程序。</p>\n<h1 id=\"一、Makefile-的规则\"><a href=\"#一、Makefile-的规则\" class=\"headerlink\" title=\"一、Makefile 的规则\"></a>一、Makefile 的规则</h1><p>在讲述这个 Makefile 之前, 还是让我们来粗略地看看 Makefile 的规则。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">target ... : prerequisites ...</span><br><span class=\"line\">\tcommand</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t...</span><br></pre></td></tr></table></figure>\n\n<p>target, 也就是一个目标文件, 可以是 Object File, 也可以是可执行文件, 还可以是一个标签(Label), 对于标签, 在后续的”伪目标”中会有叙述。</p>\n<p>prerequisites 就是要生成 target 所需要的文件或是目标。</p>\n<p>command 是 make 需要执行的命令(任意的 Shell 命令)。</p>\n<p>&amp;emsp;&amp;emsp;这是一个文件的依赖关系, 也就是说, target 这一个或多个目标文件依赖于 prerequisites 中的文件, 其生成规则定义在 command 中。说白一点, prerequisites 中如果有一个以上的文件比 target 文件修改日期要新的话, command 所定义的命令就会被执行。这就是 Makefile 的规则, 也就是 Makefile 中最核心的内容。</p>\n<h1 id=\"二、一个示例\"><a href=\"#二、一个示例\" class=\"headerlink\" title=\"二、一个示例\"></a>二、一个示例</h1><p>正如前面说的, 如果一个工程有 3 个头文件和 8 个 C 文件, 我们为了完成前面所述的那三个规则, 我们的 Makefile 应该是下面这个样子:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">edit: main.o kbd.o command.o display.o /</span><br><span class=\"line\">      insert.o search.o files.o utils.o</span><br><span class=\"line\">\tcc -o edit main.o kbd.o command.o display.o /</span><br><span class=\"line\">\tinsert.o search.o files.o utils.o</span><br><span class=\"line\"></span><br><span class=\"line\">main.o : main.c defs.h</span><br><span class=\"line\">\tcc -c main.c</span><br><span class=\"line\"></span><br><span class=\"line\">kbd.o : kbd.c defs.h command.h</span><br><span class=\"line\">\tcc -c kbd.c</span><br><span class=\"line\"></span><br><span class=\"line\">command.o : command.c defs.h command.h</span><br><span class=\"line\">\tcc -c command.c</span><br><span class=\"line\"></span><br><span class=\"line\">display.o : display.c defs.h buffer.h</span><br><span class=\"line\">\tcc -c display.c</span><br><span class=\"line\"></span><br><span class=\"line\">insert.o : insert.c defs.h buffer.h</span><br><span class=\"line\">\tcc -c insert.c</span><br><span class=\"line\"></span><br><span class=\"line\">search.o : search.c defs.h buffer.h</span><br><span class=\"line\">\tcc -c search.c</span><br><span class=\"line\"></span><br><span class=\"line\">file.o : file.c defs.h buffer.h command.h</span><br><span class=\"line\">\tcc -c files.c</span><br><span class=\"line\"></span><br><span class=\"line\">utils.o : utils.c defs.h</span><br><span class=\"line\">\tcc -c utils.c</span><br><span class=\"line\"></span><br><span class=\"line\">clean :</span><br><span class=\"line\">\trm edit main.o kbd.o command.o display.o /</span><br><span class=\"line\">\t   insert.o search.o file.o utils.o</span><br></pre></td></tr></table></figure>\n\n<p>&amp;emsp;&amp;emsp;反斜杠(&#x2F;)是换行符的意思。这样比较便于 Makefile 的易读。我们可以把这个内容保存在文件为”Makefile” 或 “makefile”的文件中, 然后在该目录下直接输入命令”make”就可以生成执行文件 edit。如果要删除执行文件和所有的中间目标文件, 那么只要简单地执行”make clean”就可以了。</p>\n<p>&amp;emsp;&amp;emsp;在这个 makefile 中, 目标文件(target)包含: 执行文件 edit 和中间目标文件(*.o), 依赖文件(prerequisites)就是冒号后面那些<code>.c</code>文件和<code>.h</code>文件。每一个<code>.o</code>文件都有一组依赖文件。依赖关系的实质上就是说明了目标文件是由那些文件生成的, 换言之, 目标文件是哪些文件更新的。</p>\n<p>&amp;emsp;&amp;emsp;在定义好依赖关系后, 后续的哪一行定义了如何生成目标文件的操作系统命令, 一定要以一个 Tab 键作为开头。记住, make 兵部观命令是怎么工作的, 他只管执行所定义的命令。make 会比较 targets 文件和 prerequisites 文件的修改日期, 如果 prerequisites 文件的日期要比 targets 文件的日期新, 或者 target 不存在的话, 那么 make 就会执行后续定义的命令。</p>\n<p>&amp;emsp;&amp;emsp;这里要说明一点的是, clean 不是一个文件, 他只不过是一个动作名字, 有点像 C 语言中的 label 一样, 其冒号后面什么也没有, 那么, make 就不会自动去找文件的依赖性, 也就不会自动执行其后所定义的命令。要执行其后的命令, 就要在 make 命令后明显的指出这个 label 的名字。这样的方法非常有用, 我们可以在一个 makefile 中定义不用的编译或是和编译无关的命令, 比如程序的打包, 备份等。</p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>之前转载了一篇关于<a href=\"/c_plus_plus_primer/tips/make/edit-makefile.html\">Makefile</a>的文章, 但是总感觉还是有一些东西没有搞明白, 偶然间看到了陈浩大神的专栏, 其中就有<a href=\"https://blog.csdn.net/haoel/article/details/2886\">关于Makefile的一系列的文章</a>, 遂决定对这一系列的文章进行摘抄。</p>","more":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>&amp;emsp;&amp;emsp;什么是 makefile? 或许很多 Windows 的程序远都不知道这个东西, 因为那些 Windows 的 IDE 都为你做了这个工作, 但我觉得要做一个好的和 professional 的程序员, makefile 还是要懂。这就好像现在有这么多的 HTML 编辑器, 但如果你想成为一个专业人士, 你还是要了解 HTML 标识的含义。特别在 Unix 下的软件编译, 你就不能不自己写 makefile 了, 会不会写 makefile, 也可以侧面说明了一个人是否具备完成大型工程的能力。</p>\n<p>&amp;emsp;&amp;emsp;因为, makefile 关系到了整个工程的编译规则, 一个工程中的源文件不计其数, 其按类型, 功能, 模块分别放在若干个目录中, makefile 定义了一系列的规则来指定, 哪些文件需要先编译, 哪些文件需要后编译, 哪些文件需要重新编译, 甚至于进行更复杂的功能操作, 因为 makefile 就像一个 shell 脚本一样, 也可以执行操作系统的命令。</p>\n<p>&amp;emsp;&amp;emsp;makefile 带来的好处就是——“自动化编译”, 一旦写好, 只遇到一个 make 命令, 整个工程完全自动编译, 极大的提高了软件开发的效率。make 是一个命令工具, 是一个解释 makefile 中指令的命令工具, 一般来说, 大多数的 IDE 都有这个命令, 比如: Delphi 的 make, Visual C++ 的 nmake, Linux 下 GNU 的make。可见, makefile 都成为了一种在工程方面的的编译方法。</p>\n<p>&amp;emsp;&amp;emsp;现在讲述如何写 makefile 的文章比较少, 这是我想写这篇文章的原因, 当然, 不同厂商的 make 各不相同, 也有不同的语法, 但其本质都是在”文件依赖性”上做文章, 这里, 我仅对 GNU 的 make 进行讲述, 我的环境是 RedHat Linux 8.0, make 的版本是3.80。毕竟这个 make 是应用最为广泛的, 而且它还是遵循于 IEEE 1003.2-1992 标准的(POSIX.2)。</p>\n<p>&amp;emsp;&amp;emsp;在这篇文档中, 将以 C&#x2F;C++ 的源码作为我们的基础, 所以必然涉及一些关于 C&#x2F;C++ 的编译的知识, 相关于这方面的内容, 还请各位查看相关的编译器的文档。这里所默认的编译器是 UNIX 下的 GCC 和 CC。</p>\n<h1 id=\"关于程序的编译和链接\"><a href=\"#关于程序的编译和链接\" class=\"headerlink\" title=\"关于程序的编译和链接\"></a>关于程序的编译和链接</h1><p>&amp;emsp;&amp;emsp;在此, 我想多说一些关于程序编译的一些规范和方法, 一般来说, 无论是 C, C++, 还是 pas, 首先要把源文件编译成中间代码文件, 在 Windows 下也就是 <code>.obj</code> 文件, UNIX 下是 <code>.o</code> 文件, 即Object File, 这个动作叫做编译(compile)。然后再把大量的 Object File 合成执行文件, 这个动作叫做链接(link)。</p>\n<p>&amp;emsp;&amp;emsp;编译时, 编译器需要的是语法的正确, 函数与变量的声明的正确, 对于后者, 通常是你需要告诉编译器头文件的所在位置(头文件中应该只是声明, 而定义应该放在 C&#x2F;C++ 文件中), 只要所有的语法正确, 编译器就可以编译出中间目标文件。一般来说, 每个源文件都应该对应与一个中间目标文件(O 文件或是 OBJ 文件)。</p>\n<p>&amp;emsp;&amp;emsp;链接时, 主要是链接函数和全局变量, 所以, 我们可以使用这些中间目标文件(O 或 OBJ 文件)来链接我们的应用程序。链接器并不管函数所在的源文件, 只管函数的中间目标文件(Object File), 在大多数时候, 由于源文件太多, 编译生成的中间目标文件太多, 而在链接时需要明显地指出中间目标文件名, 这对于编译很不方便, 所以, 我们要给中间文件打个包, 在 Windows 下这种包叫做”库文件”(Library File), 也就是<code>.lib</code>文件, 在 UNIX 下是 Archive File, 也就是<code>.a</code>文件。</p>\n<p>&amp;emsp;&amp;emsp;总结一下, 源文件首先会生成中间目标文件, 再由中间目标文件生成执行文件。在编译时, 编译器只检测语法和函数, 变量是否被声明。如果函数未被声明, 编译器会给出一个警告, 但可以生成 Object File。而在链接程序时, 链接器会在所有的 Object File 中找寻函数的实现, 如果找不到, 那就会报链接错误码(Linker Error)。在 VC 下, 这种错误一般是: Link 2001 错误, 意思是说, 链接器未能找到函数的实现, 需要指定函数的 Object File。</p>\n<h1 id=\"Makefile-介绍\"><a href=\"#Makefile-介绍\" class=\"headerlink\" title=\"Makefile 介绍\"></a>Makefile 介绍</h1><p>&amp;emsp;&amp;emsp;make 命令执行时, 需要一个 Makefile 文件, 以告诉 make 命令需要怎么样的去编译和链接程序。</p>\n<p>首先, 我们用一个示例来说明 Makefile 的书写规则, 一边给大家一个感性认识。这个示例来源于 GNU 的 make 使用手册, 在这个示例中, 我们的工程有 8 个 C 文件, 和 3 个头文件, 我们要写一个 Makefile 来告诉 make 命令如何编译和链接这几个文件。我们的规则是:</p>\n<ol>\n<li>如果这个工程没有编译过, 那么我们的所有 C 文件都要编译并被链接。</li>\n<li>如果这个工程的某几个 C 文件被修改, 那么我们只编译被修改的 C 文件, 并链接目标程序。</li>\n</ol>\n<p>&amp;emsp;&amp;emsp;只要我们的 Makefile 写得够好, 所有的这一切, 我们只用一个 make 命令就可以完成, make 命令会自动智能地根据当前文件的修改情况来确定哪些文件需要重编译, 从而自己编译所需要的文件和链接目标程序。</p>\n<h1 id=\"一、Makefile-的规则\"><a href=\"#一、Makefile-的规则\" class=\"headerlink\" title=\"一、Makefile 的规则\"></a>一、Makefile 的规则</h1><p>在讲述这个 Makefile 之前, 还是让我们来粗略地看看 Makefile 的规则。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">target ... : prerequisites ...</span><br><span class=\"line\">\tcommand</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t...</span><br></pre></td></tr></table></figure>\n\n<p>target, 也就是一个目标文件, 可以是 Object File, 也可以是可执行文件, 还可以是一个标签(Label), 对于标签, 在后续的”伪目标”中会有叙述。</p>\n<p>prerequisites 就是要生成 target 所需要的文件或是目标。</p>\n<p>command 是 make 需要执行的命令(任意的 Shell 命令)。</p>\n<p>&amp;emsp;&amp;emsp;这是一个文件的依赖关系, 也就是说, target 这一个或多个目标文件依赖于 prerequisites 中的文件, 其生成规则定义在 command 中。说白一点, prerequisites 中如果有一个以上的文件比 target 文件修改日期要新的话, command 所定义的命令就会被执行。这就是 Makefile 的规则, 也就是 Makefile 中最核心的内容。</p>\n<h1 id=\"二、一个示例\"><a href=\"#二、一个示例\" class=\"headerlink\" title=\"二、一个示例\"></a>二、一个示例</h1><p>正如前面说的, 如果一个工程有 3 个头文件和 8 个 C 文件, 我们为了完成前面所述的那三个规则, 我们的 Makefile 应该是下面这个样子:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">edit: main.o kbd.o command.o display.o /</span><br><span class=\"line\">      insert.o search.o files.o utils.o</span><br><span class=\"line\">\tcc -o edit main.o kbd.o command.o display.o /</span><br><span class=\"line\">\tinsert.o search.o files.o utils.o</span><br><span class=\"line\"></span><br><span class=\"line\">main.o : main.c defs.h</span><br><span class=\"line\">\tcc -c main.c</span><br><span class=\"line\"></span><br><span class=\"line\">kbd.o : kbd.c defs.h command.h</span><br><span class=\"line\">\tcc -c kbd.c</span><br><span class=\"line\"></span><br><span class=\"line\">command.o : command.c defs.h command.h</span><br><span class=\"line\">\tcc -c command.c</span><br><span class=\"line\"></span><br><span class=\"line\">display.o : display.c defs.h buffer.h</span><br><span class=\"line\">\tcc -c display.c</span><br><span class=\"line\"></span><br><span class=\"line\">insert.o : insert.c defs.h buffer.h</span><br><span class=\"line\">\tcc -c insert.c</span><br><span class=\"line\"></span><br><span class=\"line\">search.o : search.c defs.h buffer.h</span><br><span class=\"line\">\tcc -c search.c</span><br><span class=\"line\"></span><br><span class=\"line\">file.o : file.c defs.h buffer.h command.h</span><br><span class=\"line\">\tcc -c files.c</span><br><span class=\"line\"></span><br><span class=\"line\">utils.o : utils.c defs.h</span><br><span class=\"line\">\tcc -c utils.c</span><br><span class=\"line\"></span><br><span class=\"line\">clean :</span><br><span class=\"line\">\trm edit main.o kbd.o command.o display.o /</span><br><span class=\"line\">\t   insert.o search.o file.o utils.o</span><br></pre></td></tr></table></figure>\n\n<p>&amp;emsp;&amp;emsp;反斜杠(&#x2F;)是换行符的意思。这样比较便于 Makefile 的易读。我们可以把这个内容保存在文件为”Makefile” 或 “makefile”的文件中, 然后在该目录下直接输入命令”make”就可以生成执行文件 edit。如果要删除执行文件和所有的中间目标文件, 那么只要简单地执行”make clean”就可以了。</p>\n<p>&amp;emsp;&amp;emsp;在这个 makefile 中, 目标文件(target)包含: 执行文件 edit 和中间目标文件(*.o), 依赖文件(prerequisites)就是冒号后面那些<code>.c</code>文件和<code>.h</code>文件。每一个<code>.o</code>文件都有一组依赖文件。依赖关系的实质上就是说明了目标文件是由那些文件生成的, 换言之, 目标文件是哪些文件更新的。</p>\n<p>&amp;emsp;&amp;emsp;在定义好依赖关系后, 后续的哪一行定义了如何生成目标文件的操作系统命令, 一定要以一个 Tab 键作为开头。记住, make 兵部观命令是怎么工作的, 他只管执行所定义的命令。make 会比较 targets 文件和 prerequisites 文件的修改日期, 如果 prerequisites 文件的日期要比 targets 文件的日期新, 或者 target 不存在的话, 那么 make 就会执行后续定义的命令。</p>\n<p>&amp;emsp;&amp;emsp;这里要说明一点的是, clean 不是一个文件, 他只不过是一个动作名字, 有点像 C 语言中的 label 一样, 其冒号后面什么也没有, 那么, make 就不会自动去找文件的依赖性, 也就不会自动执行其后所定义的命令。要执行其后的命令, 就要在 make 命令后明显的指出这个 label 的名字。这样的方法非常有用, 我们可以在一个 makefile 中定义不用的编译或是和编译无关的命令, 比如程序的打包, 备份等。</p>"},{"title":"《跟我一起写makefile (七)》摘抄","date":"2019-07-02T05:31:14.000Z","_content":"\n# 使用变量\n\n&emsp;&emsp;在 Makefile 中定义的变量, 就像是 C/C++ 语言中的宏一样, 他代表一个文本字串, 在 Makefile 中执行的时候其会自动原模原样地展开在所使用的地方。其与 C/C++ 不同的是, 你可以在 Makefile 中改变其值。 在 Makefile 中, 变量可以使用在\"目标\", \"依赖目标\", \"命令\"或是 Makefile 的其他部分中。\n\n&emap;&emsp;变量的命名可以包含字符, 数字, 下划线(可以是数字开头), 但不应该含有 `:`, `#`, `=` 或是空字符(空格, 回车等)。变量是大小写敏感的, 传统的 Makefile 的变量名是全大写的命令方式, 但更好的方式是使用大小写搭配的变量名。\n\n<!--more-->\n\n# 变量的基础\n\n&emsp;&emsp;变量在声明时需要给予初值, 而在使用时给变量名加上`$`符号, 但最好使用小括号或是大括号把变量包括起来。如果要使用真实的`$`字符, 那么你需要用`$$`来表示。\n\n变量可以用在许多地方, 如规则中的\"目标\", \"依赖\", \"命令\"以及新的变量中。先看一个例子:\n\n```\nobjects = program.o foo.o utils.o\nprogram : $(objects)\n\tcc -o program $(objects)\n\n$(objects): defs.h\n```\n\n变量会在使用它的地方精确的展开, 就像 C/C++ 的宏一样, 例如:\n\n```\nfoo = c\nprog.o: prog.%(foo)\n\t$(foo)$(foo) -$(foo) prog.$(foo)\n```\n\n展开后得到:\n\n```\nprog.o : grop.c\n\tcc -c prog.c\n```\n\n给变量加上括号是为了更加安全的使用该变量。上面的例子中, 如果你不想给变量加上括号也是可以的, 但是还是加上更好一些。\n\n# 变量中的变量\n\n&emsp;&emsp;在定义变量的值时, 我们可以使用其他变量来构造变量的值, 在 Makefile 中有两种方式来在用变量的地方定义变量的值。\n\n&emsp;&emsp;先看第一种方式, 也就是简单的使用 `=`, 值可以定义在文件的任意一处, 也就是说, 右侧的变量不一定是定义好的值, 如:\n\n```\nfoo = $(bar)\nbar = $(ugh)\nugh = Huh?\n\nall:\n\techo $(foo)\n```\n我们执行\"make all\"将会打出变量`$(foo)`的值是`Huh?`。\n\n这个功能有好的地方也有不好的地方, 好的地方是可以把变量的真实值推到后面定义, 不好的地方是容易递归定义, 如:\n\n```\nCFlags = $(CFlags) -o\n```\n\n或:\n\n```\nA = $(B)\nB = $(A)\n```\n\n这会让 make 陷入无限循环的变量展开过程中去。当然, 我们的 make 是有能力检测这样的定义, 并会报错。还有就是如果在变量中使用函数, 那么这种方式会让我们的 make 运行的非常慢, 更糟糕的是, 他会使用两个 make 的函数`wildcard`和`shell`发生不可预知的错误。因为你不知道这两个函数会被调用多少次。\n\n为了避免上面的这两个情况, 我们可以使用 make 中的另一种用变量来定义变量的方法。这种方法使用的是`:=`操作符, 如:\n\n```\nx := foo\ny := $(x) bar\nx := later\n```\n\n这种方法, 前面的变量不能使用后面的定义的变量, 只能使用前面定义好的变量, 如果是这样:\n\n```\ny := $(x)bar\nx :=foo\n```\n\n那么, y的值是 bar 而不是 foobar。\n\n上面都是一些比较简单的变量使用了, 接着让我们来看一个复杂的例子,其中包括了 make 的函数, 条件表达式和一个系统 MAKELEVEL 的使用:\n\n```\nifeq (0, $(MAKELEVEL))\ncur-dir   := $(shell pwd)\nwhoami    := $(shell whoami)\nhost-type := $(shell arch)\nMAKE := ${MAKE} host-type=${host-type} whoami=${whoami}\nendif\n```\n\n关于条件表达式和函数, 我们在后面再说, 对于系统变量 MAKELEVEL, 其意思是, 如果我们的 make 有一个嵌套执行的动作(参见前面的\"嵌套使用make\"), 那么, 这个变量会记录我们当前 makefile 的调用层数。\n\n下面在介绍两个定义变量时我们需要知道的, 请先看一个例子, 如果我们要定义一个变量, 其值是一个空格, 那么我们可以这样来:\n\n```\nnullstring :=\nspace := $(nullString) # end of the line\n```\n\nnullString 是一个Empty 变量, 其中什么也没有, 而我们的 space 的值是一个空格。因为在操作符的右边是很难描述空格的, 这里采用的技术很管用, 先用一个 Empty 变量来标明变量的值开始了, 而后面采用 \"#\" 注释符来表示变量定义的终止, 这样, 我们可以定义出其值是一个空格的变量。请注意这里关于\"#\"的使用, 如果我们这样顶一个变量:\n\n```\ndir := /foo/bar     # directory to put the frobs in\n```\n\ndir 这个变量的值是\"/foo/bar\", 后面还跟了四个空格, 如果我们这样使用这个变量来指定别的目录那就完了。\n\n还有一个比较有用的操作符是`?=`, 先看示例:\n\n```\nFOO ?= bar\n```\n\n其含义是, 如果 FOO 没有被定义过, 那么变量 FOO 的值就是 bar, 如果 FOO 先前被定义过, 那么这条语句什么也不做, 其等价于:\n\n```\nifeq ($(origin FOO), undifined)\n\tFOO = bar\nendif\n```\n\n# 变量高级用法\n\n这里介绍两个变量的高级使用方法, 第一种是变量的替换。\n\n我们可以替换变量中的共有的部分, 其格式是 `$(var:a=b)` 或是 `$(var:a=b)`, 其意思是, 把变量\"var\"中所有以a字串结尾的a替换成b字串。这里的结尾意思是空格或是结束符。\n\n还是看一个示例吧:\n\n```\nfoo := a.o b.o c.o\nbar := $(foo:.o=.c)\n```\n\n这个示例中, 我们先定义了一个`$(foo)`变量, 而第二行的意思是把`$(foo)`中所有以`.o`字符串结尾的全部替换成`.c`, 所以我们的`$(bar)`的值是\"a.c b.c c.c\"。\n\n另外一种变量替换的技术是以\"静态模式\"定义的, 如:\n\n```\nfoo := a.o b.o c.o\nbar := $(foo:%.o=%.c)\n```\n\n这依赖于被替换字符串中的有相同的模式, 模式中必须包含一个`%`字符, 这个例子同样让`foo`变成\"a.c b.c c.c\"。\n\n第二种高级用法是 —— \"把变量的值在当变量\"。先看一个例子:\n\n```\nx = y\ny = z\na := $($(x))\n```\n\n在这个例子中, a 是被解析为 `$(y)`, 也就是说最后 a 的结果是 z。注意, 这里 x 的值是 y, 而不是 `$(y)`。\n\n我们还可以使用更多的层次:\n\n```\nx = y\ny = z\nz = u\na := $($($(x)))\n```\n\n这里的 a 的值是 u。\n\n让我们再复杂一些, 使用\"在变量定义中使用变量\"的第一个方式, 来看例子:\n\n```\nx = $(y)\ny = z\nz = hello\na := $($(x))\n```\n\n这里`$($(x))`被替换成了`$($(y))`, 所以最后 x 的结果是`$(z)`, 也就是\"hello\"。\n\n在复杂一些, 我们再加上函数:\n\n```\nx = variable1\nvariable2 := Hello\ny = $(subst 1, 2, $(x))\nz = y\na := $($($(z)))\n```\n\n这个例子中, `$($($(z)))` 扩展为 `$($(y))`, 再次被扩展为 `$($(subst 1, 2, $(x)))`, `$(x)`的值是variable1, `subst()` 函数将所有的 1 替换成了 2, 于是变成了`$(variable2)`, 最终的值是\"hello\"。\n\n在这种方式中, 可以使用多个变量l来组成一个变量的名字, 然后再取其值:\n\n```\nfirst_second = hello\na = first\nb = second\nall = $($a_$b)\n```\n\n这样`all`先被扩展为`$(first_second)`, 最后的值是\"hello\"。\n\n再来看看结合第一种技术的例子:\n\n```\na_objects := a.o b.o c.o\n1_objects := 1.o 2.o 3.o\n\nsources := $($(a1)_objects:.o=.c)\n```\n\n如果`a1`的值是 a 的话, 那么sources的值是`a.c b.c c.c`, 如果`a1`的值是 1 的话, 那么sources的值是`1.c 2.c 3.c`。\n\n再来看一个这种技术和\"函数\"与\"条件语句\"一同使用的句子:\n\n```\nifdef do_sort\n\tfunc := sort\nelse\n\tfunc := strip\nendif\n\nbar := a b c d e f\nfoo := $($(func) $(bar))\n```\n\n这个示例中, 如果定义了\"do_sort\", 那么 `foo := $(sort a b c d e f)`, 于是 foo 的值就是排过序的, 如果没定义, 那么调用的是`strip`函数。\n\n当然, 把变量的值在当变量这种技术, 同样可以用在操作符的左边:\n\n```\ndir = foo\n$(dir)_sources := $(wildcard $(dir)/*.c)\ndefine $(dir)_print\nlpr $($(dir)_sources)\nendef\n```\n\n这个例子定义了三个变量, `$(dir)`, `$(foo_sources)`和`$(foo_print)`。\n\n# 追加变量值\n\n我们可以使用`+=`操作符给变量追加值, 如:\n\n```\nobjects = main.o foo.o bar.o util.o\nobjects += another.o\n```\n\n于是我们的`$(objects)`值变成了\"main.o foo.o bar.o util.o\"。\n\n使用`+=`操作符, 可以模拟为下面这种例子:\n\n```\nobjects = main.o foo.o bar.o util.o\nobjects := $(objects) another.o\n```\n\n所不同的是, 用 `+=` 更为简洁。\n\n如果变量之前没有定义过, 那么`+=`会自动变成`=`, 如果前面有变量定义, 那么 `+=` 会继承于前次操作的赋值符。如果前一次的是`:=`, 那么`+=`会以`:=`作为其赋值符, 如:\n\n```\nvariable := value\nvariable += more\n```\n\n等价于:\n\n```\nvariable := value\nvariable := $(variable) more\n```\n\n但如果是这种情况:\n\n```\nvariable = value\nvariable += more\n```\n\n由于前次的赋值符是`=`, 所以`+=`也会以`=`来赋值, 那么就不会发生变量的递归定义, 所以 make 会自动为我们解决这个问题, 我们不必担心这个问题。\n\n# override 指示符\n\n如果有变量是通过make的命令行参数设置的, 那么 Makefile 中对这个变量的复制会被忽略。如果你想在 Makefile 中设置这类参数的值, 那么, 你可以使用`override`指示符, 其语法是:\n\n```\noverride <variable> = <value>\noverride <variable> := <value>\n```\n\n当然, 你还可以追加:\n\n对于多行的变量定义, 我们用 define 指示符, 在 define 指示符前, 也同样可以使用 override 指示符, 如:\n\n```\noverride define foo\nbar\nendef\n```\n","source":"_posts/note/blog_note/edit-makefile/edit-makefile-seven.md","raw":"---\ntitle: 《跟我一起写makefile (七)》摘抄\ndate: 2019-07-02 13:31:14\ncategories:\n- 笔记\n- 读博客笔记\n- 跟我一起写makefile\ntags:\n- c++\n- 笔记\n- makefile\n---\n\n# 使用变量\n\n&emsp;&emsp;在 Makefile 中定义的变量, 就像是 C/C++ 语言中的宏一样, 他代表一个文本字串, 在 Makefile 中执行的时候其会自动原模原样地展开在所使用的地方。其与 C/C++ 不同的是, 你可以在 Makefile 中改变其值。 在 Makefile 中, 变量可以使用在\"目标\", \"依赖目标\", \"命令\"或是 Makefile 的其他部分中。\n\n&emap;&emsp;变量的命名可以包含字符, 数字, 下划线(可以是数字开头), 但不应该含有 `:`, `#`, `=` 或是空字符(空格, 回车等)。变量是大小写敏感的, 传统的 Makefile 的变量名是全大写的命令方式, 但更好的方式是使用大小写搭配的变量名。\n\n<!--more-->\n\n# 变量的基础\n\n&emsp;&emsp;变量在声明时需要给予初值, 而在使用时给变量名加上`$`符号, 但最好使用小括号或是大括号把变量包括起来。如果要使用真实的`$`字符, 那么你需要用`$$`来表示。\n\n变量可以用在许多地方, 如规则中的\"目标\", \"依赖\", \"命令\"以及新的变量中。先看一个例子:\n\n```\nobjects = program.o foo.o utils.o\nprogram : $(objects)\n\tcc -o program $(objects)\n\n$(objects): defs.h\n```\n\n变量会在使用它的地方精确的展开, 就像 C/C++ 的宏一样, 例如:\n\n```\nfoo = c\nprog.o: prog.%(foo)\n\t$(foo)$(foo) -$(foo) prog.$(foo)\n```\n\n展开后得到:\n\n```\nprog.o : grop.c\n\tcc -c prog.c\n```\n\n给变量加上括号是为了更加安全的使用该变量。上面的例子中, 如果你不想给变量加上括号也是可以的, 但是还是加上更好一些。\n\n# 变量中的变量\n\n&emsp;&emsp;在定义变量的值时, 我们可以使用其他变量来构造变量的值, 在 Makefile 中有两种方式来在用变量的地方定义变量的值。\n\n&emsp;&emsp;先看第一种方式, 也就是简单的使用 `=`, 值可以定义在文件的任意一处, 也就是说, 右侧的变量不一定是定义好的值, 如:\n\n```\nfoo = $(bar)\nbar = $(ugh)\nugh = Huh?\n\nall:\n\techo $(foo)\n```\n我们执行\"make all\"将会打出变量`$(foo)`的值是`Huh?`。\n\n这个功能有好的地方也有不好的地方, 好的地方是可以把变量的真实值推到后面定义, 不好的地方是容易递归定义, 如:\n\n```\nCFlags = $(CFlags) -o\n```\n\n或:\n\n```\nA = $(B)\nB = $(A)\n```\n\n这会让 make 陷入无限循环的变量展开过程中去。当然, 我们的 make 是有能力检测这样的定义, 并会报错。还有就是如果在变量中使用函数, 那么这种方式会让我们的 make 运行的非常慢, 更糟糕的是, 他会使用两个 make 的函数`wildcard`和`shell`发生不可预知的错误。因为你不知道这两个函数会被调用多少次。\n\n为了避免上面的这两个情况, 我们可以使用 make 中的另一种用变量来定义变量的方法。这种方法使用的是`:=`操作符, 如:\n\n```\nx := foo\ny := $(x) bar\nx := later\n```\n\n这种方法, 前面的变量不能使用后面的定义的变量, 只能使用前面定义好的变量, 如果是这样:\n\n```\ny := $(x)bar\nx :=foo\n```\n\n那么, y的值是 bar 而不是 foobar。\n\n上面都是一些比较简单的变量使用了, 接着让我们来看一个复杂的例子,其中包括了 make 的函数, 条件表达式和一个系统 MAKELEVEL 的使用:\n\n```\nifeq (0, $(MAKELEVEL))\ncur-dir   := $(shell pwd)\nwhoami    := $(shell whoami)\nhost-type := $(shell arch)\nMAKE := ${MAKE} host-type=${host-type} whoami=${whoami}\nendif\n```\n\n关于条件表达式和函数, 我们在后面再说, 对于系统变量 MAKELEVEL, 其意思是, 如果我们的 make 有一个嵌套执行的动作(参见前面的\"嵌套使用make\"), 那么, 这个变量会记录我们当前 makefile 的调用层数。\n\n下面在介绍两个定义变量时我们需要知道的, 请先看一个例子, 如果我们要定义一个变量, 其值是一个空格, 那么我们可以这样来:\n\n```\nnullstring :=\nspace := $(nullString) # end of the line\n```\n\nnullString 是一个Empty 变量, 其中什么也没有, 而我们的 space 的值是一个空格。因为在操作符的右边是很难描述空格的, 这里采用的技术很管用, 先用一个 Empty 变量来标明变量的值开始了, 而后面采用 \"#\" 注释符来表示变量定义的终止, 这样, 我们可以定义出其值是一个空格的变量。请注意这里关于\"#\"的使用, 如果我们这样顶一个变量:\n\n```\ndir := /foo/bar     # directory to put the frobs in\n```\n\ndir 这个变量的值是\"/foo/bar\", 后面还跟了四个空格, 如果我们这样使用这个变量来指定别的目录那就完了。\n\n还有一个比较有用的操作符是`?=`, 先看示例:\n\n```\nFOO ?= bar\n```\n\n其含义是, 如果 FOO 没有被定义过, 那么变量 FOO 的值就是 bar, 如果 FOO 先前被定义过, 那么这条语句什么也不做, 其等价于:\n\n```\nifeq ($(origin FOO), undifined)\n\tFOO = bar\nendif\n```\n\n# 变量高级用法\n\n这里介绍两个变量的高级使用方法, 第一种是变量的替换。\n\n我们可以替换变量中的共有的部分, 其格式是 `$(var:a=b)` 或是 `$(var:a=b)`, 其意思是, 把变量\"var\"中所有以a字串结尾的a替换成b字串。这里的结尾意思是空格或是结束符。\n\n还是看一个示例吧:\n\n```\nfoo := a.o b.o c.o\nbar := $(foo:.o=.c)\n```\n\n这个示例中, 我们先定义了一个`$(foo)`变量, 而第二行的意思是把`$(foo)`中所有以`.o`字符串结尾的全部替换成`.c`, 所以我们的`$(bar)`的值是\"a.c b.c c.c\"。\n\n另外一种变量替换的技术是以\"静态模式\"定义的, 如:\n\n```\nfoo := a.o b.o c.o\nbar := $(foo:%.o=%.c)\n```\n\n这依赖于被替换字符串中的有相同的模式, 模式中必须包含一个`%`字符, 这个例子同样让`foo`变成\"a.c b.c c.c\"。\n\n第二种高级用法是 —— \"把变量的值在当变量\"。先看一个例子:\n\n```\nx = y\ny = z\na := $($(x))\n```\n\n在这个例子中, a 是被解析为 `$(y)`, 也就是说最后 a 的结果是 z。注意, 这里 x 的值是 y, 而不是 `$(y)`。\n\n我们还可以使用更多的层次:\n\n```\nx = y\ny = z\nz = u\na := $($($(x)))\n```\n\n这里的 a 的值是 u。\n\n让我们再复杂一些, 使用\"在变量定义中使用变量\"的第一个方式, 来看例子:\n\n```\nx = $(y)\ny = z\nz = hello\na := $($(x))\n```\n\n这里`$($(x))`被替换成了`$($(y))`, 所以最后 x 的结果是`$(z)`, 也就是\"hello\"。\n\n在复杂一些, 我们再加上函数:\n\n```\nx = variable1\nvariable2 := Hello\ny = $(subst 1, 2, $(x))\nz = y\na := $($($(z)))\n```\n\n这个例子中, `$($($(z)))` 扩展为 `$($(y))`, 再次被扩展为 `$($(subst 1, 2, $(x)))`, `$(x)`的值是variable1, `subst()` 函数将所有的 1 替换成了 2, 于是变成了`$(variable2)`, 最终的值是\"hello\"。\n\n在这种方式中, 可以使用多个变量l来组成一个变量的名字, 然后再取其值:\n\n```\nfirst_second = hello\na = first\nb = second\nall = $($a_$b)\n```\n\n这样`all`先被扩展为`$(first_second)`, 最后的值是\"hello\"。\n\n再来看看结合第一种技术的例子:\n\n```\na_objects := a.o b.o c.o\n1_objects := 1.o 2.o 3.o\n\nsources := $($(a1)_objects:.o=.c)\n```\n\n如果`a1`的值是 a 的话, 那么sources的值是`a.c b.c c.c`, 如果`a1`的值是 1 的话, 那么sources的值是`1.c 2.c 3.c`。\n\n再来看一个这种技术和\"函数\"与\"条件语句\"一同使用的句子:\n\n```\nifdef do_sort\n\tfunc := sort\nelse\n\tfunc := strip\nendif\n\nbar := a b c d e f\nfoo := $($(func) $(bar))\n```\n\n这个示例中, 如果定义了\"do_sort\", 那么 `foo := $(sort a b c d e f)`, 于是 foo 的值就是排过序的, 如果没定义, 那么调用的是`strip`函数。\n\n当然, 把变量的值在当变量这种技术, 同样可以用在操作符的左边:\n\n```\ndir = foo\n$(dir)_sources := $(wildcard $(dir)/*.c)\ndefine $(dir)_print\nlpr $($(dir)_sources)\nendef\n```\n\n这个例子定义了三个变量, `$(dir)`, `$(foo_sources)`和`$(foo_print)`。\n\n# 追加变量值\n\n我们可以使用`+=`操作符给变量追加值, 如:\n\n```\nobjects = main.o foo.o bar.o util.o\nobjects += another.o\n```\n\n于是我们的`$(objects)`值变成了\"main.o foo.o bar.o util.o\"。\n\n使用`+=`操作符, 可以模拟为下面这种例子:\n\n```\nobjects = main.o foo.o bar.o util.o\nobjects := $(objects) another.o\n```\n\n所不同的是, 用 `+=` 更为简洁。\n\n如果变量之前没有定义过, 那么`+=`会自动变成`=`, 如果前面有变量定义, 那么 `+=` 会继承于前次操作的赋值符。如果前一次的是`:=`, 那么`+=`会以`:=`作为其赋值符, 如:\n\n```\nvariable := value\nvariable += more\n```\n\n等价于:\n\n```\nvariable := value\nvariable := $(variable) more\n```\n\n但如果是这种情况:\n\n```\nvariable = value\nvariable += more\n```\n\n由于前次的赋值符是`=`, 所以`+=`也会以`=`来赋值, 那么就不会发生变量的递归定义, 所以 make 会自动为我们解决这个问题, 我们不必担心这个问题。\n\n# override 指示符\n\n如果有变量是通过make的命令行参数设置的, 那么 Makefile 中对这个变量的复制会被忽略。如果你想在 Makefile 中设置这类参数的值, 那么, 你可以使用`override`指示符, 其语法是:\n\n```\noverride <variable> = <value>\noverride <variable> := <value>\n```\n\n当然, 你还可以追加:\n\n对于多行的变量定义, 我们用 define 指示符, 在 define 指示符前, 也同样可以使用 override 指示符, 如:\n\n```\noverride define foo\nbar\nendef\n```\n","slug":"note/blog_note/edit-makefile/edit-makefile-seven","published":1,"updated":"2022-10-02T15:43:07.792Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejvg007u3vsbdirr60k5","content":"<h1 id=\"使用变量\"><a href=\"#使用变量\" class=\"headerlink\" title=\"使用变量\"></a>使用变量</h1><p>&amp;emsp;&amp;emsp;在 Makefile 中定义的变量, 就像是 C&#x2F;C++ 语言中的宏一样, 他代表一个文本字串, 在 Makefile 中执行的时候其会自动原模原样地展开在所使用的地方。其与 C&#x2F;C++ 不同的是, 你可以在 Makefile 中改变其值。 在 Makefile 中, 变量可以使用在”目标”, “依赖目标”, “命令”或是 Makefile 的其他部分中。</p>\n<p>&amp;emap;&amp;emsp;变量的命名可以包含字符, 数字, 下划线(可以是数字开头), 但不应该含有 <code>:</code>, <code>#</code>, <code>=</code> 或是空字符(空格, 回车等)。变量是大小写敏感的, 传统的 Makefile 的变量名是全大写的命令方式, 但更好的方式是使用大小写搭配的变量名。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"变量的基础\"><a href=\"#变量的基础\" class=\"headerlink\" title=\"变量的基础\"></a>变量的基础</h1><p>&amp;emsp;&amp;emsp;变量在声明时需要给予初值, 而在使用时给变量名加上<code>$</code>符号, 但最好使用小括号或是大括号把变量包括起来。如果要使用真实的<code>$</code>字符, 那么你需要用<code>$$</code>来表示。</p>\n<p>变量可以用在许多地方, 如规则中的”目标”, “依赖”, “命令”以及新的变量中。先看一个例子:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">objects = program.o foo.o utils.o</span><br><span class=\"line\">program : $(objects)</span><br><span class=\"line\">\tcc -o program $(objects)</span><br><span class=\"line\"></span><br><span class=\"line\">$(objects): defs.h</span><br></pre></td></tr></table></figure>\n\n<p>变量会在使用它的地方精确的展开, 就像 C&#x2F;C++ 的宏一样, 例如:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo = c</span><br><span class=\"line\">prog.o: prog.%(foo)</span><br><span class=\"line\">\t$(foo)$(foo) -$(foo) prog.$(foo)</span><br></pre></td></tr></table></figure>\n\n<p>展开后得到:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">prog.o : grop.c</span><br><span class=\"line\">\tcc -c prog.c</span><br></pre></td></tr></table></figure>\n\n<p>给变量加上括号是为了更加安全的使用该变量。上面的例子中, 如果你不想给变量加上括号也是可以的, 但是还是加上更好一些。</p>\n<h1 id=\"变量中的变量\"><a href=\"#变量中的变量\" class=\"headerlink\" title=\"变量中的变量\"></a>变量中的变量</h1><p>&amp;emsp;&amp;emsp;在定义变量的值时, 我们可以使用其他变量来构造变量的值, 在 Makefile 中有两种方式来在用变量的地方定义变量的值。</p>\n<p>&amp;emsp;&amp;emsp;先看第一种方式, 也就是简单的使用 <code>=</code>, 值可以定义在文件的任意一处, 也就是说, 右侧的变量不一定是定义好的值, 如:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo = $(bar)</span><br><span class=\"line\">bar = $(ugh)</span><br><span class=\"line\">ugh = Huh?</span><br><span class=\"line\"></span><br><span class=\"line\">all:</span><br><span class=\"line\">\techo $(foo)</span><br></pre></td></tr></table></figure>\n<p>我们执行”make all”将会打出变量<code>$(foo)</code>的值是<code>Huh?</code>。</p>\n<p>这个功能有好的地方也有不好的地方, 好的地方是可以把变量的真实值推到后面定义, 不好的地方是容易递归定义, 如:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CFlags = $(CFlags) -o</span><br></pre></td></tr></table></figure>\n\n<p>或:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A = $(B)</span><br><span class=\"line\">B = $(A)</span><br></pre></td></tr></table></figure>\n\n<p>这会让 make 陷入无限循环的变量展开过程中去。当然, 我们的 make 是有能力检测这样的定义, 并会报错。还有就是如果在变量中使用函数, 那么这种方式会让我们的 make 运行的非常慢, 更糟糕的是, 他会使用两个 make 的函数<code>wildcard</code>和<code>shell</code>发生不可预知的错误。因为你不知道这两个函数会被调用多少次。</p>\n<p>为了避免上面的这两个情况, 我们可以使用 make 中的另一种用变量来定义变量的方法。这种方法使用的是<code>:=</code>操作符, 如:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x := foo</span><br><span class=\"line\">y := $(x) bar</span><br><span class=\"line\">x := later</span><br></pre></td></tr></table></figure>\n\n<p>这种方法, 前面的变量不能使用后面的定义的变量, 只能使用前面定义好的变量, 如果是这样:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">y := $(x)bar</span><br><span class=\"line\">x :=foo</span><br></pre></td></tr></table></figure>\n\n<p>那么, y的值是 bar 而不是 foobar。</p>\n<p>上面都是一些比较简单的变量使用了, 接着让我们来看一个复杂的例子,其中包括了 make 的函数, 条件表达式和一个系统 MAKELEVEL 的使用:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ifeq (0, $(MAKELEVEL))</span><br><span class=\"line\">cur-dir   := $(shell pwd)</span><br><span class=\"line\">whoami    := $(shell whoami)</span><br><span class=\"line\">host-type := $(shell arch)</span><br><span class=\"line\">MAKE := $&#123;MAKE&#125; host-type=$&#123;host-type&#125; whoami=$&#123;whoami&#125;</span><br><span class=\"line\">endif</span><br></pre></td></tr></table></figure>\n\n<p>关于条件表达式和函数, 我们在后面再说, 对于系统变量 MAKELEVEL, 其意思是, 如果我们的 make 有一个嵌套执行的动作(参见前面的”嵌套使用make”), 那么, 这个变量会记录我们当前 makefile 的调用层数。</p>\n<p>下面在介绍两个定义变量时我们需要知道的, 请先看一个例子, 如果我们要定义一个变量, 其值是一个空格, 那么我们可以这样来:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nullstring :=</span><br><span class=\"line\">space := $(nullString) # end of the line</span><br></pre></td></tr></table></figure>\n\n<p>nullString 是一个Empty 变量, 其中什么也没有, 而我们的 space 的值是一个空格。因为在操作符的右边是很难描述空格的, 这里采用的技术很管用, 先用一个 Empty 变量来标明变量的值开始了, 而后面采用 “#” 注释符来表示变量定义的终止, 这样, 我们可以定义出其值是一个空格的变量。请注意这里关于”#”的使用, 如果我们这样顶一个变量:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dir := /foo/bar     # directory to put the frobs in</span><br></pre></td></tr></table></figure>\n\n<p>dir 这个变量的值是”&#x2F;foo&#x2F;bar”, 后面还跟了四个空格, 如果我们这样使用这个变量来指定别的目录那就完了。</p>\n<p>还有一个比较有用的操作符是<code>?=</code>, 先看示例:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FOO ?= bar</span><br></pre></td></tr></table></figure>\n\n<p>其含义是, 如果 FOO 没有被定义过, 那么变量 FOO 的值就是 bar, 如果 FOO 先前被定义过, 那么这条语句什么也不做, 其等价于:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ifeq ($(origin FOO), undifined)</span><br><span class=\"line\">\tFOO = bar</span><br><span class=\"line\">endif</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"变量高级用法\"><a href=\"#变量高级用法\" class=\"headerlink\" title=\"变量高级用法\"></a>变量高级用法</h1><p>这里介绍两个变量的高级使用方法, 第一种是变量的替换。</p>\n<p>我们可以替换变量中的共有的部分, 其格式是 <code>$(var:a=b)</code> 或是 <code>$(var:a=b)</code>, 其意思是, 把变量”var”中所有以a字串结尾的a替换成b字串。这里的结尾意思是空格或是结束符。</p>\n<p>还是看一个示例吧:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo := a.o b.o c.o</span><br><span class=\"line\">bar := $(foo:.o=.c)</span><br></pre></td></tr></table></figure>\n\n<p>这个示例中, 我们先定义了一个<code>$(foo)</code>变量, 而第二行的意思是把<code>$(foo)</code>中所有以<code>.o</code>字符串结尾的全部替换成<code>.c</code>, 所以我们的<code>$(bar)</code>的值是”a.c b.c c.c”。</p>\n<p>另外一种变量替换的技术是以”静态模式”定义的, 如:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo := a.o b.o c.o</span><br><span class=\"line\">bar := $(foo:%.o=%.c)</span><br></pre></td></tr></table></figure>\n\n<p>这依赖于被替换字符串中的有相同的模式, 模式中必须包含一个<code>%</code>字符, 这个例子同样让<code>foo</code>变成”a.c b.c c.c”。</p>\n<p>第二种高级用法是 —— “把变量的值在当变量”。先看一个例子:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = y</span><br><span class=\"line\">y = z</span><br><span class=\"line\">a := $($(x))</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中, a 是被解析为 <code>$(y)</code>, 也就是说最后 a 的结果是 z。注意, 这里 x 的值是 y, 而不是 <code>$(y)</code>。</p>\n<p>我们还可以使用更多的层次:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = y</span><br><span class=\"line\">y = z</span><br><span class=\"line\">z = u</span><br><span class=\"line\">a := $($($(x)))</span><br></pre></td></tr></table></figure>\n\n<p>这里的 a 的值是 u。</p>\n<p>让我们再复杂一些, 使用”在变量定义中使用变量”的第一个方式, 来看例子:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = $(y)</span><br><span class=\"line\">y = z</span><br><span class=\"line\">z = hello</span><br><span class=\"line\">a := $($(x))</span><br></pre></td></tr></table></figure>\n\n<p>这里<code>$($(x))</code>被替换成了<code>$($(y))</code>, 所以最后 x 的结果是<code>$(z)</code>, 也就是”hello”。</p>\n<p>在复杂一些, 我们再加上函数:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = variable1</span><br><span class=\"line\">variable2 := Hello</span><br><span class=\"line\">y = $(subst 1, 2, $(x))</span><br><span class=\"line\">z = y</span><br><span class=\"line\">a := $($($(z)))</span><br></pre></td></tr></table></figure>\n\n<p>这个例子中, <code>$($($(z)))</code> 扩展为 <code>$($(y))</code>, 再次被扩展为 <code>$($(subst 1, 2, $(x)))</code>, <code>$(x)</code>的值是variable1, <code>subst()</code> 函数将所有的 1 替换成了 2, 于是变成了<code>$(variable2)</code>, 最终的值是”hello”。</p>\n<p>在这种方式中, 可以使用多个变量l来组成一个变量的名字, 然后再取其值:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">first_second = hello</span><br><span class=\"line\">a = first</span><br><span class=\"line\">b = second</span><br><span class=\"line\">all = $($a_$b)</span><br></pre></td></tr></table></figure>\n\n<p>这样<code>all</code>先被扩展为<code>$(first_second)</code>, 最后的值是”hello”。</p>\n<p>再来看看结合第一种技术的例子:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a_objects := a.o b.o c.o</span><br><span class=\"line\">1_objects := 1.o 2.o 3.o</span><br><span class=\"line\"></span><br><span class=\"line\">sources := $($(a1)_objects:.o=.c)</span><br></pre></td></tr></table></figure>\n\n<p>如果<code>a1</code>的值是 a 的话, 那么sources的值是<code>a.c b.c c.c</code>, 如果<code>a1</code>的值是 1 的话, 那么sources的值是<code>1.c 2.c 3.c</code>。</p>\n<p>再来看一个这种技术和”函数”与”条件语句”一同使用的句子:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ifdef do_sort</span><br><span class=\"line\">\tfunc := sort</span><br><span class=\"line\">else</span><br><span class=\"line\">\tfunc := strip</span><br><span class=\"line\">endif</span><br><span class=\"line\"></span><br><span class=\"line\">bar := a b c d e f</span><br><span class=\"line\">foo := $($(func) $(bar))</span><br></pre></td></tr></table></figure>\n\n<p>这个示例中, 如果定义了”do_sort”, 那么 <code>foo := $(sort a b c d e f)</code>, 于是 foo 的值就是排过序的, 如果没定义, 那么调用的是<code>strip</code>函数。</p>\n<p>当然, 把变量的值在当变量这种技术, 同样可以用在操作符的左边:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dir = foo</span><br><span class=\"line\">$(dir)_sources := $(wildcard $(dir)/*.c)</span><br><span class=\"line\">define $(dir)_print</span><br><span class=\"line\">lpr $($(dir)_sources)</span><br><span class=\"line\">endef</span><br></pre></td></tr></table></figure>\n\n<p>这个例子定义了三个变量, <code>$(dir)</code>, <code>$(foo_sources)</code>和<code>$(foo_print)</code>。</p>\n<h1 id=\"追加变量值\"><a href=\"#追加变量值\" class=\"headerlink\" title=\"追加变量值\"></a>追加变量值</h1><p>我们可以使用<code>+=</code>操作符给变量追加值, 如:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">objects = main.o foo.o bar.o util.o</span><br><span class=\"line\">objects += another.o</span><br></pre></td></tr></table></figure>\n\n<p>于是我们的<code>$(objects)</code>值变成了”main.o foo.o bar.o util.o”。</p>\n<p>使用<code>+=</code>操作符, 可以模拟为下面这种例子:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">objects = main.o foo.o bar.o util.o</span><br><span class=\"line\">objects := $(objects) another.o</span><br></pre></td></tr></table></figure>\n\n<p>所不同的是, 用 <code>+=</code> 更为简洁。</p>\n<p>如果变量之前没有定义过, 那么<code>+=</code>会自动变成<code>=</code>, 如果前面有变量定义, 那么 <code>+=</code> 会继承于前次操作的赋值符。如果前一次的是<code>:=</code>, 那么<code>+=</code>会以<code>:=</code>作为其赋值符, 如:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">variable := value</span><br><span class=\"line\">variable += more</span><br></pre></td></tr></table></figure>\n\n<p>等价于:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">variable := value</span><br><span class=\"line\">variable := $(variable) more</span><br></pre></td></tr></table></figure>\n\n<p>但如果是这种情况:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">variable = value</span><br><span class=\"line\">variable += more</span><br></pre></td></tr></table></figure>\n\n<p>由于前次的赋值符是<code>=</code>, 所以<code>+=</code>也会以<code>=</code>来赋值, 那么就不会发生变量的递归定义, 所以 make 会自动为我们解决这个问题, 我们不必担心这个问题。</p>\n<h1 id=\"override-指示符\"><a href=\"#override-指示符\" class=\"headerlink\" title=\"override 指示符\"></a>override 指示符</h1><p>如果有变量是通过make的命令行参数设置的, 那么 Makefile 中对这个变量的复制会被忽略。如果你想在 Makefile 中设置这类参数的值, 那么, 你可以使用<code>override</code>指示符, 其语法是:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">override &lt;variable&gt; = &lt;value&gt;</span><br><span class=\"line\">override &lt;variable&gt; := &lt;value&gt;</span><br></pre></td></tr></table></figure>\n\n<p>当然, 你还可以追加:</p>\n<p>对于多行的变量定义, 我们用 define 指示符, 在 define 指示符前, 也同样可以使用 override 指示符, 如:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">override define foo</span><br><span class=\"line\">bar</span><br><span class=\"line\">endef</span><br></pre></td></tr></table></figure>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"使用变量\"><a href=\"#使用变量\" class=\"headerlink\" title=\"使用变量\"></a>使用变量</h1><p>&amp;emsp;&amp;emsp;在 Makefile 中定义的变量, 就像是 C&#x2F;C++ 语言中的宏一样, 他代表一个文本字串, 在 Makefile 中执行的时候其会自动原模原样地展开在所使用的地方。其与 C&#x2F;C++ 不同的是, 你可以在 Makefile 中改变其值。 在 Makefile 中, 变量可以使用在”目标”, “依赖目标”, “命令”或是 Makefile 的其他部分中。</p>\n<p>&amp;emap;&amp;emsp;变量的命名可以包含字符, 数字, 下划线(可以是数字开头), 但不应该含有 <code>:</code>, <code>#</code>, <code>=</code> 或是空字符(空格, 回车等)。变量是大小写敏感的, 传统的 Makefile 的变量名是全大写的命令方式, 但更好的方式是使用大小写搭配的变量名。</p>","more":"<h1 id=\"变量的基础\"><a href=\"#变量的基础\" class=\"headerlink\" title=\"变量的基础\"></a>变量的基础</h1><p>&amp;emsp;&amp;emsp;变量在声明时需要给予初值, 而在使用时给变量名加上<code>$</code>符号, 但最好使用小括号或是大括号把变量包括起来。如果要使用真实的<code>$</code>字符, 那么你需要用<code>$$</code>来表示。</p>\n<p>变量可以用在许多地方, 如规则中的”目标”, “依赖”, “命令”以及新的变量中。先看一个例子:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">objects = program.o foo.o utils.o</span><br><span class=\"line\">program : $(objects)</span><br><span class=\"line\">\tcc -o program $(objects)</span><br><span class=\"line\"></span><br><span class=\"line\">$(objects): defs.h</span><br></pre></td></tr></table></figure>\n\n<p>变量会在使用它的地方精确的展开, 就像 C&#x2F;C++ 的宏一样, 例如:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo = c</span><br><span class=\"line\">prog.o: prog.%(foo)</span><br><span class=\"line\">\t$(foo)$(foo) -$(foo) prog.$(foo)</span><br></pre></td></tr></table></figure>\n\n<p>展开后得到:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">prog.o : grop.c</span><br><span class=\"line\">\tcc -c prog.c</span><br></pre></td></tr></table></figure>\n\n<p>给变量加上括号是为了更加安全的使用该变量。上面的例子中, 如果你不想给变量加上括号也是可以的, 但是还是加上更好一些。</p>\n<h1 id=\"变量中的变量\"><a href=\"#变量中的变量\" class=\"headerlink\" title=\"变量中的变量\"></a>变量中的变量</h1><p>&amp;emsp;&amp;emsp;在定义变量的值时, 我们可以使用其他变量来构造变量的值, 在 Makefile 中有两种方式来在用变量的地方定义变量的值。</p>\n<p>&amp;emsp;&amp;emsp;先看第一种方式, 也就是简单的使用 <code>=</code>, 值可以定义在文件的任意一处, 也就是说, 右侧的变量不一定是定义好的值, 如:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo = $(bar)</span><br><span class=\"line\">bar = $(ugh)</span><br><span class=\"line\">ugh = Huh?</span><br><span class=\"line\"></span><br><span class=\"line\">all:</span><br><span class=\"line\">\techo $(foo)</span><br></pre></td></tr></table></figure>\n<p>我们执行”make all”将会打出变量<code>$(foo)</code>的值是<code>Huh?</code>。</p>\n<p>这个功能有好的地方也有不好的地方, 好的地方是可以把变量的真实值推到后面定义, 不好的地方是容易递归定义, 如:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CFlags = $(CFlags) -o</span><br></pre></td></tr></table></figure>\n\n<p>或:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A = $(B)</span><br><span class=\"line\">B = $(A)</span><br></pre></td></tr></table></figure>\n\n<p>这会让 make 陷入无限循环的变量展开过程中去。当然, 我们的 make 是有能力检测这样的定义, 并会报错。还有就是如果在变量中使用函数, 那么这种方式会让我们的 make 运行的非常慢, 更糟糕的是, 他会使用两个 make 的函数<code>wildcard</code>和<code>shell</code>发生不可预知的错误。因为你不知道这两个函数会被调用多少次。</p>\n<p>为了避免上面的这两个情况, 我们可以使用 make 中的另一种用变量来定义变量的方法。这种方法使用的是<code>:=</code>操作符, 如:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x := foo</span><br><span class=\"line\">y := $(x) bar</span><br><span class=\"line\">x := later</span><br></pre></td></tr></table></figure>\n\n<p>这种方法, 前面的变量不能使用后面的定义的变量, 只能使用前面定义好的变量, 如果是这样:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">y := $(x)bar</span><br><span class=\"line\">x :=foo</span><br></pre></td></tr></table></figure>\n\n<p>那么, y的值是 bar 而不是 foobar。</p>\n<p>上面都是一些比较简单的变量使用了, 接着让我们来看一个复杂的例子,其中包括了 make 的函数, 条件表达式和一个系统 MAKELEVEL 的使用:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ifeq (0, $(MAKELEVEL))</span><br><span class=\"line\">cur-dir   := $(shell pwd)</span><br><span class=\"line\">whoami    := $(shell whoami)</span><br><span class=\"line\">host-type := $(shell arch)</span><br><span class=\"line\">MAKE := $&#123;MAKE&#125; host-type=$&#123;host-type&#125; whoami=$&#123;whoami&#125;</span><br><span class=\"line\">endif</span><br></pre></td></tr></table></figure>\n\n<p>关于条件表达式和函数, 我们在后面再说, 对于系统变量 MAKELEVEL, 其意思是, 如果我们的 make 有一个嵌套执行的动作(参见前面的”嵌套使用make”), 那么, 这个变量会记录我们当前 makefile 的调用层数。</p>\n<p>下面在介绍两个定义变量时我们需要知道的, 请先看一个例子, 如果我们要定义一个变量, 其值是一个空格, 那么我们可以这样来:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nullstring :=</span><br><span class=\"line\">space := $(nullString) # end of the line</span><br></pre></td></tr></table></figure>\n\n<p>nullString 是一个Empty 变量, 其中什么也没有, 而我们的 space 的值是一个空格。因为在操作符的右边是很难描述空格的, 这里采用的技术很管用, 先用一个 Empty 变量来标明变量的值开始了, 而后面采用 “#” 注释符来表示变量定义的终止, 这样, 我们可以定义出其值是一个空格的变量。请注意这里关于”#”的使用, 如果我们这样顶一个变量:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dir := /foo/bar     # directory to put the frobs in</span><br></pre></td></tr></table></figure>\n\n<p>dir 这个变量的值是”&#x2F;foo&#x2F;bar”, 后面还跟了四个空格, 如果我们这样使用这个变量来指定别的目录那就完了。</p>\n<p>还有一个比较有用的操作符是<code>?=</code>, 先看示例:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FOO ?= bar</span><br></pre></td></tr></table></figure>\n\n<p>其含义是, 如果 FOO 没有被定义过, 那么变量 FOO 的值就是 bar, 如果 FOO 先前被定义过, 那么这条语句什么也不做, 其等价于:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ifeq ($(origin FOO), undifined)</span><br><span class=\"line\">\tFOO = bar</span><br><span class=\"line\">endif</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"变量高级用法\"><a href=\"#变量高级用法\" class=\"headerlink\" title=\"变量高级用法\"></a>变量高级用法</h1><p>这里介绍两个变量的高级使用方法, 第一种是变量的替换。</p>\n<p>我们可以替换变量中的共有的部分, 其格式是 <code>$(var:a=b)</code> 或是 <code>$(var:a=b)</code>, 其意思是, 把变量”var”中所有以a字串结尾的a替换成b字串。这里的结尾意思是空格或是结束符。</p>\n<p>还是看一个示例吧:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo := a.o b.o c.o</span><br><span class=\"line\">bar := $(foo:.o=.c)</span><br></pre></td></tr></table></figure>\n\n<p>这个示例中, 我们先定义了一个<code>$(foo)</code>变量, 而第二行的意思是把<code>$(foo)</code>中所有以<code>.o</code>字符串结尾的全部替换成<code>.c</code>, 所以我们的<code>$(bar)</code>的值是”a.c b.c c.c”。</p>\n<p>另外一种变量替换的技术是以”静态模式”定义的, 如:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo := a.o b.o c.o</span><br><span class=\"line\">bar := $(foo:%.o=%.c)</span><br></pre></td></tr></table></figure>\n\n<p>这依赖于被替换字符串中的有相同的模式, 模式中必须包含一个<code>%</code>字符, 这个例子同样让<code>foo</code>变成”a.c b.c c.c”。</p>\n<p>第二种高级用法是 —— “把变量的值在当变量”。先看一个例子:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = y</span><br><span class=\"line\">y = z</span><br><span class=\"line\">a := $($(x))</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中, a 是被解析为 <code>$(y)</code>, 也就是说最后 a 的结果是 z。注意, 这里 x 的值是 y, 而不是 <code>$(y)</code>。</p>\n<p>我们还可以使用更多的层次:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = y</span><br><span class=\"line\">y = z</span><br><span class=\"line\">z = u</span><br><span class=\"line\">a := $($($(x)))</span><br></pre></td></tr></table></figure>\n\n<p>这里的 a 的值是 u。</p>\n<p>让我们再复杂一些, 使用”在变量定义中使用变量”的第一个方式, 来看例子:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = $(y)</span><br><span class=\"line\">y = z</span><br><span class=\"line\">z = hello</span><br><span class=\"line\">a := $($(x))</span><br></pre></td></tr></table></figure>\n\n<p>这里<code>$($(x))</code>被替换成了<code>$($(y))</code>, 所以最后 x 的结果是<code>$(z)</code>, 也就是”hello”。</p>\n<p>在复杂一些, 我们再加上函数:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = variable1</span><br><span class=\"line\">variable2 := Hello</span><br><span class=\"line\">y = $(subst 1, 2, $(x))</span><br><span class=\"line\">z = y</span><br><span class=\"line\">a := $($($(z)))</span><br></pre></td></tr></table></figure>\n\n<p>这个例子中, <code>$($($(z)))</code> 扩展为 <code>$($(y))</code>, 再次被扩展为 <code>$($(subst 1, 2, $(x)))</code>, <code>$(x)</code>的值是variable1, <code>subst()</code> 函数将所有的 1 替换成了 2, 于是变成了<code>$(variable2)</code>, 最终的值是”hello”。</p>\n<p>在这种方式中, 可以使用多个变量l来组成一个变量的名字, 然后再取其值:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">first_second = hello</span><br><span class=\"line\">a = first</span><br><span class=\"line\">b = second</span><br><span class=\"line\">all = $($a_$b)</span><br></pre></td></tr></table></figure>\n\n<p>这样<code>all</code>先被扩展为<code>$(first_second)</code>, 最后的值是”hello”。</p>\n<p>再来看看结合第一种技术的例子:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a_objects := a.o b.o c.o</span><br><span class=\"line\">1_objects := 1.o 2.o 3.o</span><br><span class=\"line\"></span><br><span class=\"line\">sources := $($(a1)_objects:.o=.c)</span><br></pre></td></tr></table></figure>\n\n<p>如果<code>a1</code>的值是 a 的话, 那么sources的值是<code>a.c b.c c.c</code>, 如果<code>a1</code>的值是 1 的话, 那么sources的值是<code>1.c 2.c 3.c</code>。</p>\n<p>再来看一个这种技术和”函数”与”条件语句”一同使用的句子:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ifdef do_sort</span><br><span class=\"line\">\tfunc := sort</span><br><span class=\"line\">else</span><br><span class=\"line\">\tfunc := strip</span><br><span class=\"line\">endif</span><br><span class=\"line\"></span><br><span class=\"line\">bar := a b c d e f</span><br><span class=\"line\">foo := $($(func) $(bar))</span><br></pre></td></tr></table></figure>\n\n<p>这个示例中, 如果定义了”do_sort”, 那么 <code>foo := $(sort a b c d e f)</code>, 于是 foo 的值就是排过序的, 如果没定义, 那么调用的是<code>strip</code>函数。</p>\n<p>当然, 把变量的值在当变量这种技术, 同样可以用在操作符的左边:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dir = foo</span><br><span class=\"line\">$(dir)_sources := $(wildcard $(dir)/*.c)</span><br><span class=\"line\">define $(dir)_print</span><br><span class=\"line\">lpr $($(dir)_sources)</span><br><span class=\"line\">endef</span><br></pre></td></tr></table></figure>\n\n<p>这个例子定义了三个变量, <code>$(dir)</code>, <code>$(foo_sources)</code>和<code>$(foo_print)</code>。</p>\n<h1 id=\"追加变量值\"><a href=\"#追加变量值\" class=\"headerlink\" title=\"追加变量值\"></a>追加变量值</h1><p>我们可以使用<code>+=</code>操作符给变量追加值, 如:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">objects = main.o foo.o bar.o util.o</span><br><span class=\"line\">objects += another.o</span><br></pre></td></tr></table></figure>\n\n<p>于是我们的<code>$(objects)</code>值变成了”main.o foo.o bar.o util.o”。</p>\n<p>使用<code>+=</code>操作符, 可以模拟为下面这种例子:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">objects = main.o foo.o bar.o util.o</span><br><span class=\"line\">objects := $(objects) another.o</span><br></pre></td></tr></table></figure>\n\n<p>所不同的是, 用 <code>+=</code> 更为简洁。</p>\n<p>如果变量之前没有定义过, 那么<code>+=</code>会自动变成<code>=</code>, 如果前面有变量定义, 那么 <code>+=</code> 会继承于前次操作的赋值符。如果前一次的是<code>:=</code>, 那么<code>+=</code>会以<code>:=</code>作为其赋值符, 如:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">variable := value</span><br><span class=\"line\">variable += more</span><br></pre></td></tr></table></figure>\n\n<p>等价于:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">variable := value</span><br><span class=\"line\">variable := $(variable) more</span><br></pre></td></tr></table></figure>\n\n<p>但如果是这种情况:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">variable = value</span><br><span class=\"line\">variable += more</span><br></pre></td></tr></table></figure>\n\n<p>由于前次的赋值符是<code>=</code>, 所以<code>+=</code>也会以<code>=</code>来赋值, 那么就不会发生变量的递归定义, 所以 make 会自动为我们解决这个问题, 我们不必担心这个问题。</p>\n<h1 id=\"override-指示符\"><a href=\"#override-指示符\" class=\"headerlink\" title=\"override 指示符\"></a>override 指示符</h1><p>如果有变量是通过make的命令行参数设置的, 那么 Makefile 中对这个变量的复制会被忽略。如果你想在 Makefile 中设置这类参数的值, 那么, 你可以使用<code>override</code>指示符, 其语法是:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">override &lt;variable&gt; = &lt;value&gt;</span><br><span class=\"line\">override &lt;variable&gt; := &lt;value&gt;</span><br></pre></td></tr></table></figure>\n\n<p>当然, 你还可以追加:</p>\n<p>对于多行的变量定义, 我们用 define 指示符, 在 define 指示符前, 也同样可以使用 override 指示符, 如:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">override define foo</span><br><span class=\"line\">bar</span><br><span class=\"line\">endef</span><br></pre></td></tr></table></figure>"},{"title":"《跟我一起写Makefile (六)》摘抄","date":"2019-06-11T07:46:31.000Z","_content":"\n# 书写命令\n\n&emsp;&emsp;每条规则中的命令和操作系统Shell的命令行是一致的。make 会按顺序一条条执行命令, 每条命令的开头必须以 Tab 键开头, 除非, 命令是紧跟在依赖规则后面的分好后的。在命令行之间的空格或是空行会被忽略, 但是如果该空格或空行是以 Tab 键开头的, 那么 make 会认为其是一个空命令。\n\n&emsp;&emsp;我们再 UNIX 下可能会使用不同的Shell, 但是 make 的命令默认是被 `/bin/sh` —— UNIX的标准Shell解释执行的。除非你特别指定一个其他的Shell。Makefile 中, `#` 是注释符, 很像 C/C++ 中的 \"\\\\\", 其后的本行字符都被注释。\n\n<!--more-->\n# 一、显示命令\n\n通常, make 会把其要执行的命令在命令执行前输出到屏幕上。当我们用\"@\"字符在命令行前, 那么, 这个命令将不被 make 显示出来, 最具代表性的例子是, 我们用这个功能来向屏幕显示一些信息。如:\n\n> @echo 正在编译XXX模块\n\n当 make 执行时, 会输出\"正在编译XXX模块\", 但不会输出命令, 如果没有`@`, 那么 make 将输出:\n\n```\necho 正在编译XXX模块\n正在编译XXX模块\n```\n\n如果 make 执行时, 带入 make 参数 \"-n\" 或 \"--just-print\", 那么其只是显示命令, 但不会执行命令, 这个功能很有利于我们调试我们的 Makefile, 看看我们书写的命令执行起来是什么样子或是什么顺序。\n\n而 make 参数 \"-s\" 或 \"--slient\" 则是全面禁止命令的显示。\n\n# 二、命令执行\n\n当依赖目标新于目标时,也就是当规则的目标需要被更新时, make 会一条一条的执行其后的命令。需要注意的是, 如果你要让上一条的命令的结果应用在下一条命令时, 你应该使用分号分隔这两条命令。比如你的第一条命令是 cd 命令, 你希望第二条命令得在 cd 的基础上运行, 那么你就不能把这两条命令写在两行上, 而应该把这两条命令卸载一行上, 用分号分隔。\n\n如:\n\n示例一:\n```\nexec:\n\tcd /home/littleboy\n\tpwd\n```\n\n示例二:\n```\nexec:\n\tcd /home/littleboy; pwd\n```\n\n当我们执行 \"make exec\" 时, 第一个例子中的 cd 没有作用, pwd会打印出当前的 Makefile 目录。而第二个例子中, cd 就起作用了, pwd 会打印 `/home/littleboy`。\n\nmake 一般是使用环境变量 SHELL 所定义的系统 Shell 来执行命令, 默认情况下使用 UNIX 标准 Shell —— /bin/sh 来执行命令。但在 MS-DOS 下有点特殊, 因为 MS-DOS 下没有 SHELL 环境变量, 当然你也可以指定。如果你指定了 UNIX 风格的目录形式, 首先, make 会在 SHELL 所指定的路径中找寻命令解释器, 如果找不到, 其会在当前盘符中的当前目录寻找, 如果再找不到, 其会在 PATH 环境变量中所定义的所有路径中寻找。MS-DOS 中, 如果你定义的命令解释器没有找到, 其会给你的命令解释器加上诸如`.exe`、`.com`、`.bat`、`.sh` 等后缀。\n\n# 三、命令出错\n\n每当命令运行完后, make 会检测每个命令的返回码, 如果命令返回成功, 那么 make 会执行下一条命令, 当规则中所有的命令成功返回后, 这个规则就算是成功完成了。如果一个规则中的某个命令出错了(命令退出码非零), 那么 make 就会终止执行当前规则, 这将有可能终止所有规则的执行。\n\n有些时候, 命令的出错并不表示就是错误的。例如 mkdir 命令, 我们一定需要建立一个目录, 如果目录不存在, 那么 mkdir 就成功执行, 万事大吉。如果目录存在, 那 mkdir 就出错了, 但是并不代表命令有问题。所以有些错误我们需要忽略掉, 为了做到这一点, 我们可以在 Makefile 的命令行前加一个减号`-`(在 Tab 键之后), 标记为不管命令出不出错都认为是成功的。如:\n\n```\nclean:\n\t-rm -f *.o\n```\n\n还有一个全局的办法是, 给 make 加上`-i`或是`--ignore-errors`参数, 那么, Makefile 中所有命令都会忽略这个错误。而如果一个规则是以`.INGNORE`作为目标的, 那么这个规则中的所有命令都会忽略这个错误。这些是不同级别的防止命令出错的方法, 你可以根据你的不同喜欢设置。\n\n还有一个要提一下的是 make 的参数 `-k` 或是 `--keep-going`, 这个参数的意思是, 如果某规则中的命令出错了, 那么就终止该规则执行, 但继续执行其他规则。\n\n# 四、嵌套执行 make\n\n在一些大的工程中, 我们会把我们不同模块或是不同功能的源文件放在不同的目录中, 我们可以在每个目录中都书写一个该目录的 Makefile, 这有利于我们的 Makefile 变得更加的简洁, 而不至于把所有的东西全部写在一个 Makefile 中, 这样会很难维护我们的 Makefile, 这个技术对于我们模块编译和分段编译有着非常大的好处。\n\n例如, 我们有一个子目录叫 subdir, 这个目录有个 Makefile 文件, 来指明了这个目录下文件的编译规则。那么我们总控的 Makefile 可以这样书写:\n\n```\nsubsystem:\n\tcd subdir && $(MAKE)\n```\n\n其等价于:\n\n```\nsubsystem:\n\t$(MAKE) -C subdir\n```\n\n定义`$(MAKE)`宏变量的意思是, 也许我们的 make 需要一些参数, 所以定义成一个变量比较利于维护。这两个例子的意思都是先进入`subdir`目录, 然后执行 make 命令。\n\n我们把这个 Makefile 叫做 \"总控 Makefile\", 总控 Makefile 的变量可以传递到下级的 Makefile 中, 但是不会覆盖下层的 Makefile 中所定义的变量, 除非指定了 `-e` 参数。\n\n如果你要传递变量到下级 Makefile 中, 那么你可以使用这样的声明:\n\n```\nexport <variable...>\n```\n\n如果你不想让某些变量传递到下级 Makefile 中, 那么你可以这样声明:\n\n```\nunexport <variable...>\n```\n\n如:\n\n```\nexport variable = value\n```\n\n其等价于:\n\n```\nvariable = value\nexport variable\n```\n\n等价于:\n\n```\nexport variable := value\n```\n\n等价于:\n\n```\nvariable := value\nexport variable\n```\n\n再如:\n\n```\nexport variable += value\n```\n\n其等价于:\n\n```\nvariable += value\nexport variable\n```\n\n如果你要传递所有的变量, 那么, 只要有一个`export`就行了, 表示传递所有的变量。\n\n需要注意的是, 有两个变量, 一个是SHELL, 一个是 MAKEFILES, 这两个变量不管是否 export, 都会传递到下层的 Makefile 中, 特别是 MAKEFILES 变量, 其中包含了 make 的参数信息, 如果我们执行\"总控 Makefile\"时有 make 参数或是在上层 Makefile 中定义了这个变量, 那么 MAKEFILES 变量将会是这些参数, 并会传递到下层 Makefile 中, 这是一个系统级的变量。\n\n但是 make 命令中的有几个参数并不往下传递, 他们是`-C`, `-f`, `-h`, `-o`和`-W`, 如果你不想往下层传递参数, 那么你可以这样来:\n\n```\nsubsystem:\n\tcd subdir && $(MAKE) MAKEFLAGS=\n```\n\n如果你定义了环境变量 MAKEFLAGS, 那么你得确信其中的选项是大家都会用到的, 如果其中有`-t`, `-n`和`-q`参数, 那么将会有意想不到的错误。\n\n还有一个在嵌套执行中比较有用的参数, `-w`或是`--print-directory`会在 make 的过程中输出一些信息, 让你看到目前的工作目录。比如, 如果我们的下级 make 目录是 `/home/littleboy/gnu/make`, 如果我们使用`make -w`来执行, 那么当进入该目录时, 我们将会看到:\n\n```\nmake: Entering directory /home/littleboy/gnu/make`\n```\n\n而在完成下层 make 后离开目录时, 我们会看到:\n\n```\nmake: Leaving directory `/home/littleboy/gnu/make`\n```\n\n当你使用`-C`参数来指定 make 下层 Makefile 时, `-w` 会被自动打开。如果参数中有`-s`(`--slient`)或是`--no-print-directory`, 那么`-w`总是失效的。\n\n# 五: 定义命令包\n\n如果 Makefile 中出现一些相同命令序列, 那么我们可以为这些相同的命令序列定义一个变量。定义这种命令序列的语法以`define`开始, 以`endef`结束, 如:\n\n```\ndefine run-yacc\nyacc $(firstword $^)\nmv y.tab.c $@\nendef\n```\n\n这里, \"run-yacc\"是这个命令包的名字, 不要和 Makefile 中的变量重名。在`define`和`endef`中的两行就是命令序列。这个命令包中的第一个命令是运行 Yacc 程序, 因为 Yacc 程序总是生成 \"y.yab.c\" 的文件, 所以第二行的命令就是把这个文件改名字。还是把这个命令包放到一个实例中看看:\n\n```\nfoo.c: foo.y\n\t$(run-yacc)\n```\n\n我们可以看见, 要使用这个命令包, 我们就好像使用变量一样。在这个命令包的使用中, 命令包 \"run-yacc\" 中的 `$^` 就是 `foo.y`, `$@` 就是 `foo.c`, make 在执行命令包时, 命令包中的每个命令会被依次独立执行。\n","source":"_posts/note/blog_note/edit-makefile/edit-makefile-six.md","raw":"---\ntitle: 《跟我一起写Makefile (六)》摘抄\ndate: 2019-06-11 15:46:31\ncategories:\n- 笔记\n- 读博客笔记\n- 跟我一起写makefile\ntags:\n- c++\n- 跟我一起写makefile\n- makefile\n---\n\n# 书写命令\n\n&emsp;&emsp;每条规则中的命令和操作系统Shell的命令行是一致的。make 会按顺序一条条执行命令, 每条命令的开头必须以 Tab 键开头, 除非, 命令是紧跟在依赖规则后面的分好后的。在命令行之间的空格或是空行会被忽略, 但是如果该空格或空行是以 Tab 键开头的, 那么 make 会认为其是一个空命令。\n\n&emsp;&emsp;我们再 UNIX 下可能会使用不同的Shell, 但是 make 的命令默认是被 `/bin/sh` —— UNIX的标准Shell解释执行的。除非你特别指定一个其他的Shell。Makefile 中, `#` 是注释符, 很像 C/C++ 中的 \"\\\\\", 其后的本行字符都被注释。\n\n<!--more-->\n# 一、显示命令\n\n通常, make 会把其要执行的命令在命令执行前输出到屏幕上。当我们用\"@\"字符在命令行前, 那么, 这个命令将不被 make 显示出来, 最具代表性的例子是, 我们用这个功能来向屏幕显示一些信息。如:\n\n> @echo 正在编译XXX模块\n\n当 make 执行时, 会输出\"正在编译XXX模块\", 但不会输出命令, 如果没有`@`, 那么 make 将输出:\n\n```\necho 正在编译XXX模块\n正在编译XXX模块\n```\n\n如果 make 执行时, 带入 make 参数 \"-n\" 或 \"--just-print\", 那么其只是显示命令, 但不会执行命令, 这个功能很有利于我们调试我们的 Makefile, 看看我们书写的命令执行起来是什么样子或是什么顺序。\n\n而 make 参数 \"-s\" 或 \"--slient\" 则是全面禁止命令的显示。\n\n# 二、命令执行\n\n当依赖目标新于目标时,也就是当规则的目标需要被更新时, make 会一条一条的执行其后的命令。需要注意的是, 如果你要让上一条的命令的结果应用在下一条命令时, 你应该使用分号分隔这两条命令。比如你的第一条命令是 cd 命令, 你希望第二条命令得在 cd 的基础上运行, 那么你就不能把这两条命令写在两行上, 而应该把这两条命令卸载一行上, 用分号分隔。\n\n如:\n\n示例一:\n```\nexec:\n\tcd /home/littleboy\n\tpwd\n```\n\n示例二:\n```\nexec:\n\tcd /home/littleboy; pwd\n```\n\n当我们执行 \"make exec\" 时, 第一个例子中的 cd 没有作用, pwd会打印出当前的 Makefile 目录。而第二个例子中, cd 就起作用了, pwd 会打印 `/home/littleboy`。\n\nmake 一般是使用环境变量 SHELL 所定义的系统 Shell 来执行命令, 默认情况下使用 UNIX 标准 Shell —— /bin/sh 来执行命令。但在 MS-DOS 下有点特殊, 因为 MS-DOS 下没有 SHELL 环境变量, 当然你也可以指定。如果你指定了 UNIX 风格的目录形式, 首先, make 会在 SHELL 所指定的路径中找寻命令解释器, 如果找不到, 其会在当前盘符中的当前目录寻找, 如果再找不到, 其会在 PATH 环境变量中所定义的所有路径中寻找。MS-DOS 中, 如果你定义的命令解释器没有找到, 其会给你的命令解释器加上诸如`.exe`、`.com`、`.bat`、`.sh` 等后缀。\n\n# 三、命令出错\n\n每当命令运行完后, make 会检测每个命令的返回码, 如果命令返回成功, 那么 make 会执行下一条命令, 当规则中所有的命令成功返回后, 这个规则就算是成功完成了。如果一个规则中的某个命令出错了(命令退出码非零), 那么 make 就会终止执行当前规则, 这将有可能终止所有规则的执行。\n\n有些时候, 命令的出错并不表示就是错误的。例如 mkdir 命令, 我们一定需要建立一个目录, 如果目录不存在, 那么 mkdir 就成功执行, 万事大吉。如果目录存在, 那 mkdir 就出错了, 但是并不代表命令有问题。所以有些错误我们需要忽略掉, 为了做到这一点, 我们可以在 Makefile 的命令行前加一个减号`-`(在 Tab 键之后), 标记为不管命令出不出错都认为是成功的。如:\n\n```\nclean:\n\t-rm -f *.o\n```\n\n还有一个全局的办法是, 给 make 加上`-i`或是`--ignore-errors`参数, 那么, Makefile 中所有命令都会忽略这个错误。而如果一个规则是以`.INGNORE`作为目标的, 那么这个规则中的所有命令都会忽略这个错误。这些是不同级别的防止命令出错的方法, 你可以根据你的不同喜欢设置。\n\n还有一个要提一下的是 make 的参数 `-k` 或是 `--keep-going`, 这个参数的意思是, 如果某规则中的命令出错了, 那么就终止该规则执行, 但继续执行其他规则。\n\n# 四、嵌套执行 make\n\n在一些大的工程中, 我们会把我们不同模块或是不同功能的源文件放在不同的目录中, 我们可以在每个目录中都书写一个该目录的 Makefile, 这有利于我们的 Makefile 变得更加的简洁, 而不至于把所有的东西全部写在一个 Makefile 中, 这样会很难维护我们的 Makefile, 这个技术对于我们模块编译和分段编译有着非常大的好处。\n\n例如, 我们有一个子目录叫 subdir, 这个目录有个 Makefile 文件, 来指明了这个目录下文件的编译规则。那么我们总控的 Makefile 可以这样书写:\n\n```\nsubsystem:\n\tcd subdir && $(MAKE)\n```\n\n其等价于:\n\n```\nsubsystem:\n\t$(MAKE) -C subdir\n```\n\n定义`$(MAKE)`宏变量的意思是, 也许我们的 make 需要一些参数, 所以定义成一个变量比较利于维护。这两个例子的意思都是先进入`subdir`目录, 然后执行 make 命令。\n\n我们把这个 Makefile 叫做 \"总控 Makefile\", 总控 Makefile 的变量可以传递到下级的 Makefile 中, 但是不会覆盖下层的 Makefile 中所定义的变量, 除非指定了 `-e` 参数。\n\n如果你要传递变量到下级 Makefile 中, 那么你可以使用这样的声明:\n\n```\nexport <variable...>\n```\n\n如果你不想让某些变量传递到下级 Makefile 中, 那么你可以这样声明:\n\n```\nunexport <variable...>\n```\n\n如:\n\n```\nexport variable = value\n```\n\n其等价于:\n\n```\nvariable = value\nexport variable\n```\n\n等价于:\n\n```\nexport variable := value\n```\n\n等价于:\n\n```\nvariable := value\nexport variable\n```\n\n再如:\n\n```\nexport variable += value\n```\n\n其等价于:\n\n```\nvariable += value\nexport variable\n```\n\n如果你要传递所有的变量, 那么, 只要有一个`export`就行了, 表示传递所有的变量。\n\n需要注意的是, 有两个变量, 一个是SHELL, 一个是 MAKEFILES, 这两个变量不管是否 export, 都会传递到下层的 Makefile 中, 特别是 MAKEFILES 变量, 其中包含了 make 的参数信息, 如果我们执行\"总控 Makefile\"时有 make 参数或是在上层 Makefile 中定义了这个变量, 那么 MAKEFILES 变量将会是这些参数, 并会传递到下层 Makefile 中, 这是一个系统级的变量。\n\n但是 make 命令中的有几个参数并不往下传递, 他们是`-C`, `-f`, `-h`, `-o`和`-W`, 如果你不想往下层传递参数, 那么你可以这样来:\n\n```\nsubsystem:\n\tcd subdir && $(MAKE) MAKEFLAGS=\n```\n\n如果你定义了环境变量 MAKEFLAGS, 那么你得确信其中的选项是大家都会用到的, 如果其中有`-t`, `-n`和`-q`参数, 那么将会有意想不到的错误。\n\n还有一个在嵌套执行中比较有用的参数, `-w`或是`--print-directory`会在 make 的过程中输出一些信息, 让你看到目前的工作目录。比如, 如果我们的下级 make 目录是 `/home/littleboy/gnu/make`, 如果我们使用`make -w`来执行, 那么当进入该目录时, 我们将会看到:\n\n```\nmake: Entering directory /home/littleboy/gnu/make`\n```\n\n而在完成下层 make 后离开目录时, 我们会看到:\n\n```\nmake: Leaving directory `/home/littleboy/gnu/make`\n```\n\n当你使用`-C`参数来指定 make 下层 Makefile 时, `-w` 会被自动打开。如果参数中有`-s`(`--slient`)或是`--no-print-directory`, 那么`-w`总是失效的。\n\n# 五: 定义命令包\n\n如果 Makefile 中出现一些相同命令序列, 那么我们可以为这些相同的命令序列定义一个变量。定义这种命令序列的语法以`define`开始, 以`endef`结束, 如:\n\n```\ndefine run-yacc\nyacc $(firstword $^)\nmv y.tab.c $@\nendef\n```\n\n这里, \"run-yacc\"是这个命令包的名字, 不要和 Makefile 中的变量重名。在`define`和`endef`中的两行就是命令序列。这个命令包中的第一个命令是运行 Yacc 程序, 因为 Yacc 程序总是生成 \"y.yab.c\" 的文件, 所以第二行的命令就是把这个文件改名字。还是把这个命令包放到一个实例中看看:\n\n```\nfoo.c: foo.y\n\t$(run-yacc)\n```\n\n我们可以看见, 要使用这个命令包, 我们就好像使用变量一样。在这个命令包的使用中, 命令包 \"run-yacc\" 中的 `$^` 就是 `foo.y`, `$@` 就是 `foo.c`, make 在执行命令包时, 命令包中的每个命令会被依次独立执行。\n","slug":"note/blog_note/edit-makefile/edit-makefile-six","published":1,"updated":"2022-10-02T15:43:15.340Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejvj007w3vsb9i686exi","content":"<h1 id=\"书写命令\"><a href=\"#书写命令\" class=\"headerlink\" title=\"书写命令\"></a>书写命令</h1><p>&amp;emsp;&amp;emsp;每条规则中的命令和操作系统Shell的命令行是一致的。make 会按顺序一条条执行命令, 每条命令的开头必须以 Tab 键开头, 除非, 命令是紧跟在依赖规则后面的分好后的。在命令行之间的空格或是空行会被忽略, 但是如果该空格或空行是以 Tab 键开头的, 那么 make 会认为其是一个空命令。</p>\n<p>&amp;emsp;&amp;emsp;我们再 UNIX 下可能会使用不同的Shell, 但是 make 的命令默认是被 <code>/bin/sh</code> —— UNIX的标准Shell解释执行的。除非你特别指定一个其他的Shell。Makefile 中, <code>#</code> 是注释符, 很像 C&#x2F;C++ 中的 “\\“, 其后的本行字符都被注释。</p>\n<span id=\"more\"></span>\n<h1 id=\"一、显示命令\"><a href=\"#一、显示命令\" class=\"headerlink\" title=\"一、显示命令\"></a>一、显示命令</h1><p>通常, make 会把其要执行的命令在命令执行前输出到屏幕上。当我们用”@”字符在命令行前, 那么, 这个命令将不被 make 显示出来, 最具代表性的例子是, 我们用这个功能来向屏幕显示一些信息。如:</p>\n<blockquote>\n<p>@echo 正在编译XXX模块</p>\n</blockquote>\n<p>当 make 执行时, 会输出”正在编译XXX模块”, 但不会输出命令, 如果没有<code>@</code>, 那么 make 将输出:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo 正在编译XXX模块</span><br><span class=\"line\">正在编译XXX模块</span><br></pre></td></tr></table></figure>\n\n<p>如果 make 执行时, 带入 make 参数 “-n” 或 “–just-print”, 那么其只是显示命令, 但不会执行命令, 这个功能很有利于我们调试我们的 Makefile, 看看我们书写的命令执行起来是什么样子或是什么顺序。</p>\n<p>而 make 参数 “-s” 或 “–slient” 则是全面禁止命令的显示。</p>\n<h1 id=\"二、命令执行\"><a href=\"#二、命令执行\" class=\"headerlink\" title=\"二、命令执行\"></a>二、命令执行</h1><p>当依赖目标新于目标时,也就是当规则的目标需要被更新时, make 会一条一条的执行其后的命令。需要注意的是, 如果你要让上一条的命令的结果应用在下一条命令时, 你应该使用分号分隔这两条命令。比如你的第一条命令是 cd 命令, 你希望第二条命令得在 cd 的基础上运行, 那么你就不能把这两条命令写在两行上, 而应该把这两条命令卸载一行上, 用分号分隔。</p>\n<p>如:</p>\n<p>示例一:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exec:</span><br><span class=\"line\">\tcd /home/littleboy</span><br><span class=\"line\">\tpwd</span><br></pre></td></tr></table></figure>\n\n<p>示例二:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exec:</span><br><span class=\"line\">\tcd /home/littleboy; pwd</span><br></pre></td></tr></table></figure>\n\n<p>当我们执行 “make exec” 时, 第一个例子中的 cd 没有作用, pwd会打印出当前的 Makefile 目录。而第二个例子中, cd 就起作用了, pwd 会打印 <code>/home/littleboy</code>。</p>\n<p>make 一般是使用环境变量 SHELL 所定义的系统 Shell 来执行命令, 默认情况下使用 UNIX 标准 Shell —— &#x2F;bin&#x2F;sh 来执行命令。但在 MS-DOS 下有点特殊, 因为 MS-DOS 下没有 SHELL 环境变量, 当然你也可以指定。如果你指定了 UNIX 风格的目录形式, 首先, make 会在 SHELL 所指定的路径中找寻命令解释器, 如果找不到, 其会在当前盘符中的当前目录寻找, 如果再找不到, 其会在 PATH 环境变量中所定义的所有路径中寻找。MS-DOS 中, 如果你定义的命令解释器没有找到, 其会给你的命令解释器加上诸如<code>.exe</code>、<code>.com</code>、<code>.bat</code>、<code>.sh</code> 等后缀。</p>\n<h1 id=\"三、命令出错\"><a href=\"#三、命令出错\" class=\"headerlink\" title=\"三、命令出错\"></a>三、命令出错</h1><p>每当命令运行完后, make 会检测每个命令的返回码, 如果命令返回成功, 那么 make 会执行下一条命令, 当规则中所有的命令成功返回后, 这个规则就算是成功完成了。如果一个规则中的某个命令出错了(命令退出码非零), 那么 make 就会终止执行当前规则, 这将有可能终止所有规则的执行。</p>\n<p>有些时候, 命令的出错并不表示就是错误的。例如 mkdir 命令, 我们一定需要建立一个目录, 如果目录不存在, 那么 mkdir 就成功执行, 万事大吉。如果目录存在, 那 mkdir 就出错了, 但是并不代表命令有问题。所以有些错误我们需要忽略掉, 为了做到这一点, 我们可以在 Makefile 的命令行前加一个减号<code>-</code>(在 Tab 键之后), 标记为不管命令出不出错都认为是成功的。如:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clean:</span><br><span class=\"line\">\t-rm -f *.o</span><br></pre></td></tr></table></figure>\n\n<p>还有一个全局的办法是, 给 make 加上<code>-i</code>或是<code>--ignore-errors</code>参数, 那么, Makefile 中所有命令都会忽略这个错误。而如果一个规则是以<code>.INGNORE</code>作为目标的, 那么这个规则中的所有命令都会忽略这个错误。这些是不同级别的防止命令出错的方法, 你可以根据你的不同喜欢设置。</p>\n<p>还有一个要提一下的是 make 的参数 <code>-k</code> 或是 <code>--keep-going</code>, 这个参数的意思是, 如果某规则中的命令出错了, 那么就终止该规则执行, 但继续执行其他规则。</p>\n<h1 id=\"四、嵌套执行-make\"><a href=\"#四、嵌套执行-make\" class=\"headerlink\" title=\"四、嵌套执行 make\"></a>四、嵌套执行 make</h1><p>在一些大的工程中, 我们会把我们不同模块或是不同功能的源文件放在不同的目录中, 我们可以在每个目录中都书写一个该目录的 Makefile, 这有利于我们的 Makefile 变得更加的简洁, 而不至于把所有的东西全部写在一个 Makefile 中, 这样会很难维护我们的 Makefile, 这个技术对于我们模块编译和分段编译有着非常大的好处。</p>\n<p>例如, 我们有一个子目录叫 subdir, 这个目录有个 Makefile 文件, 来指明了这个目录下文件的编译规则。那么我们总控的 Makefile 可以这样书写:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">subsystem:</span><br><span class=\"line\">\tcd subdir &amp;&amp; $(MAKE)</span><br></pre></td></tr></table></figure>\n\n<p>其等价于:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">subsystem:</span><br><span class=\"line\">\t$(MAKE) -C subdir</span><br></pre></td></tr></table></figure>\n\n<p>定义<code>$(MAKE)</code>宏变量的意思是, 也许我们的 make 需要一些参数, 所以定义成一个变量比较利于维护。这两个例子的意思都是先进入<code>subdir</code>目录, 然后执行 make 命令。</p>\n<p>我们把这个 Makefile 叫做 “总控 Makefile”, 总控 Makefile 的变量可以传递到下级的 Makefile 中, 但是不会覆盖下层的 Makefile 中所定义的变量, 除非指定了 <code>-e</code> 参数。</p>\n<p>如果你要传递变量到下级 Makefile 中, 那么你可以使用这样的声明:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export &lt;variable...&gt;</span><br></pre></td></tr></table></figure>\n\n<p>如果你不想让某些变量传递到下级 Makefile 中, 那么你可以这样声明:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unexport &lt;variable...&gt;</span><br></pre></td></tr></table></figure>\n\n<p>如:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export variable = value</span><br></pre></td></tr></table></figure>\n\n<p>其等价于:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">variable = value</span><br><span class=\"line\">export variable</span><br></pre></td></tr></table></figure>\n\n<p>等价于:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export variable := value</span><br></pre></td></tr></table></figure>\n\n<p>等价于:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">variable := value</span><br><span class=\"line\">export variable</span><br></pre></td></tr></table></figure>\n\n<p>再如:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export variable += value</span><br></pre></td></tr></table></figure>\n\n<p>其等价于:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">variable += value</span><br><span class=\"line\">export variable</span><br></pre></td></tr></table></figure>\n\n<p>如果你要传递所有的变量, 那么, 只要有一个<code>export</code>就行了, 表示传递所有的变量。</p>\n<p>需要注意的是, 有两个变量, 一个是SHELL, 一个是 MAKEFILES, 这两个变量不管是否 export, 都会传递到下层的 Makefile 中, 特别是 MAKEFILES 变量, 其中包含了 make 的参数信息, 如果我们执行”总控 Makefile”时有 make 参数或是在上层 Makefile 中定义了这个变量, 那么 MAKEFILES 变量将会是这些参数, 并会传递到下层 Makefile 中, 这是一个系统级的变量。</p>\n<p>但是 make 命令中的有几个参数并不往下传递, 他们是<code>-C</code>, <code>-f</code>, <code>-h</code>, <code>-o</code>和<code>-W</code>, 如果你不想往下层传递参数, 那么你可以这样来:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">subsystem:</span><br><span class=\"line\">\tcd subdir &amp;&amp; $(MAKE) MAKEFLAGS=</span><br></pre></td></tr></table></figure>\n\n<p>如果你定义了环境变量 MAKEFLAGS, 那么你得确信其中的选项是大家都会用到的, 如果其中有<code>-t</code>, <code>-n</code>和<code>-q</code>参数, 那么将会有意想不到的错误。</p>\n<p>还有一个在嵌套执行中比较有用的参数, <code>-w</code>或是<code>--print-directory</code>会在 make 的过程中输出一些信息, 让你看到目前的工作目录。比如, 如果我们的下级 make 目录是 <code>/home/littleboy/gnu/make</code>, 如果我们使用<code>make -w</code>来执行, 那么当进入该目录时, 我们将会看到:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make: Entering directory /home/littleboy/gnu/make`</span><br></pre></td></tr></table></figure>\n\n<p>而在完成下层 make 后离开目录时, 我们会看到:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make: Leaving directory `/home/littleboy/gnu/make`</span><br></pre></td></tr></table></figure>\n\n<p>当你使用<code>-C</code>参数来指定 make 下层 Makefile 时, <code>-w</code> 会被自动打开。如果参数中有<code>-s</code>(<code>--slient</code>)或是<code>--no-print-directory</code>, 那么<code>-w</code>总是失效的。</p>\n<h1 id=\"五-定义命令包\"><a href=\"#五-定义命令包\" class=\"headerlink\" title=\"五: 定义命令包\"></a>五: 定义命令包</h1><p>如果 Makefile 中出现一些相同命令序列, 那么我们可以为这些相同的命令序列定义一个变量。定义这种命令序列的语法以<code>define</code>开始, 以<code>endef</code>结束, 如:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define run-yacc</span><br><span class=\"line\">yacc $(firstword $^)</span><br><span class=\"line\">mv y.tab.c $@</span><br><span class=\"line\">endef</span><br></pre></td></tr></table></figure>\n\n<p>这里, “run-yacc”是这个命令包的名字, 不要和 Makefile 中的变量重名。在<code>define</code>和<code>endef</code>中的两行就是命令序列。这个命令包中的第一个命令是运行 Yacc 程序, 因为 Yacc 程序总是生成 “y.yab.c” 的文件, 所以第二行的命令就是把这个文件改名字。还是把这个命令包放到一个实例中看看:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo.c: foo.y</span><br><span class=\"line\">\t$(run-yacc)</span><br></pre></td></tr></table></figure>\n\n<p>我们可以看见, 要使用这个命令包, 我们就好像使用变量一样。在这个命令包的使用中, 命令包 “run-yacc” 中的 <code>$^</code> 就是 <code>foo.y</code>, <code>$@</code> 就是 <code>foo.c</code>, make 在执行命令包时, 命令包中的每个命令会被依次独立执行。</p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"书写命令\"><a href=\"#书写命令\" class=\"headerlink\" title=\"书写命令\"></a>书写命令</h1><p>&amp;emsp;&amp;emsp;每条规则中的命令和操作系统Shell的命令行是一致的。make 会按顺序一条条执行命令, 每条命令的开头必须以 Tab 键开头, 除非, 命令是紧跟在依赖规则后面的分好后的。在命令行之间的空格或是空行会被忽略, 但是如果该空格或空行是以 Tab 键开头的, 那么 make 会认为其是一个空命令。</p>\n<p>&amp;emsp;&amp;emsp;我们再 UNIX 下可能会使用不同的Shell, 但是 make 的命令默认是被 <code>/bin/sh</code> —— UNIX的标准Shell解释执行的。除非你特别指定一个其他的Shell。Makefile 中, <code>#</code> 是注释符, 很像 C&#x2F;C++ 中的 “\\“, 其后的本行字符都被注释。</p>","more":"<h1 id=\"一、显示命令\"><a href=\"#一、显示命令\" class=\"headerlink\" title=\"一、显示命令\"></a>一、显示命令</h1><p>通常, make 会把其要执行的命令在命令执行前输出到屏幕上。当我们用”@”字符在命令行前, 那么, 这个命令将不被 make 显示出来, 最具代表性的例子是, 我们用这个功能来向屏幕显示一些信息。如:</p>\n<blockquote>\n<p>@echo 正在编译XXX模块</p>\n</blockquote>\n<p>当 make 执行时, 会输出”正在编译XXX模块”, 但不会输出命令, 如果没有<code>@</code>, 那么 make 将输出:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo 正在编译XXX模块</span><br><span class=\"line\">正在编译XXX模块</span><br></pre></td></tr></table></figure>\n\n<p>如果 make 执行时, 带入 make 参数 “-n” 或 “–just-print”, 那么其只是显示命令, 但不会执行命令, 这个功能很有利于我们调试我们的 Makefile, 看看我们书写的命令执行起来是什么样子或是什么顺序。</p>\n<p>而 make 参数 “-s” 或 “–slient” 则是全面禁止命令的显示。</p>\n<h1 id=\"二、命令执行\"><a href=\"#二、命令执行\" class=\"headerlink\" title=\"二、命令执行\"></a>二、命令执行</h1><p>当依赖目标新于目标时,也就是当规则的目标需要被更新时, make 会一条一条的执行其后的命令。需要注意的是, 如果你要让上一条的命令的结果应用在下一条命令时, 你应该使用分号分隔这两条命令。比如你的第一条命令是 cd 命令, 你希望第二条命令得在 cd 的基础上运行, 那么你就不能把这两条命令写在两行上, 而应该把这两条命令卸载一行上, 用分号分隔。</p>\n<p>如:</p>\n<p>示例一:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exec:</span><br><span class=\"line\">\tcd /home/littleboy</span><br><span class=\"line\">\tpwd</span><br></pre></td></tr></table></figure>\n\n<p>示例二:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exec:</span><br><span class=\"line\">\tcd /home/littleboy; pwd</span><br></pre></td></tr></table></figure>\n\n<p>当我们执行 “make exec” 时, 第一个例子中的 cd 没有作用, pwd会打印出当前的 Makefile 目录。而第二个例子中, cd 就起作用了, pwd 会打印 <code>/home/littleboy</code>。</p>\n<p>make 一般是使用环境变量 SHELL 所定义的系统 Shell 来执行命令, 默认情况下使用 UNIX 标准 Shell —— &#x2F;bin&#x2F;sh 来执行命令。但在 MS-DOS 下有点特殊, 因为 MS-DOS 下没有 SHELL 环境变量, 当然你也可以指定。如果你指定了 UNIX 风格的目录形式, 首先, make 会在 SHELL 所指定的路径中找寻命令解释器, 如果找不到, 其会在当前盘符中的当前目录寻找, 如果再找不到, 其会在 PATH 环境变量中所定义的所有路径中寻找。MS-DOS 中, 如果你定义的命令解释器没有找到, 其会给你的命令解释器加上诸如<code>.exe</code>、<code>.com</code>、<code>.bat</code>、<code>.sh</code> 等后缀。</p>\n<h1 id=\"三、命令出错\"><a href=\"#三、命令出错\" class=\"headerlink\" title=\"三、命令出错\"></a>三、命令出错</h1><p>每当命令运行完后, make 会检测每个命令的返回码, 如果命令返回成功, 那么 make 会执行下一条命令, 当规则中所有的命令成功返回后, 这个规则就算是成功完成了。如果一个规则中的某个命令出错了(命令退出码非零), 那么 make 就会终止执行当前规则, 这将有可能终止所有规则的执行。</p>\n<p>有些时候, 命令的出错并不表示就是错误的。例如 mkdir 命令, 我们一定需要建立一个目录, 如果目录不存在, 那么 mkdir 就成功执行, 万事大吉。如果目录存在, 那 mkdir 就出错了, 但是并不代表命令有问题。所以有些错误我们需要忽略掉, 为了做到这一点, 我们可以在 Makefile 的命令行前加一个减号<code>-</code>(在 Tab 键之后), 标记为不管命令出不出错都认为是成功的。如:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clean:</span><br><span class=\"line\">\t-rm -f *.o</span><br></pre></td></tr></table></figure>\n\n<p>还有一个全局的办法是, 给 make 加上<code>-i</code>或是<code>--ignore-errors</code>参数, 那么, Makefile 中所有命令都会忽略这个错误。而如果一个规则是以<code>.INGNORE</code>作为目标的, 那么这个规则中的所有命令都会忽略这个错误。这些是不同级别的防止命令出错的方法, 你可以根据你的不同喜欢设置。</p>\n<p>还有一个要提一下的是 make 的参数 <code>-k</code> 或是 <code>--keep-going</code>, 这个参数的意思是, 如果某规则中的命令出错了, 那么就终止该规则执行, 但继续执行其他规则。</p>\n<h1 id=\"四、嵌套执行-make\"><a href=\"#四、嵌套执行-make\" class=\"headerlink\" title=\"四、嵌套执行 make\"></a>四、嵌套执行 make</h1><p>在一些大的工程中, 我们会把我们不同模块或是不同功能的源文件放在不同的目录中, 我们可以在每个目录中都书写一个该目录的 Makefile, 这有利于我们的 Makefile 变得更加的简洁, 而不至于把所有的东西全部写在一个 Makefile 中, 这样会很难维护我们的 Makefile, 这个技术对于我们模块编译和分段编译有着非常大的好处。</p>\n<p>例如, 我们有一个子目录叫 subdir, 这个目录有个 Makefile 文件, 来指明了这个目录下文件的编译规则。那么我们总控的 Makefile 可以这样书写:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">subsystem:</span><br><span class=\"line\">\tcd subdir &amp;&amp; $(MAKE)</span><br></pre></td></tr></table></figure>\n\n<p>其等价于:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">subsystem:</span><br><span class=\"line\">\t$(MAKE) -C subdir</span><br></pre></td></tr></table></figure>\n\n<p>定义<code>$(MAKE)</code>宏变量的意思是, 也许我们的 make 需要一些参数, 所以定义成一个变量比较利于维护。这两个例子的意思都是先进入<code>subdir</code>目录, 然后执行 make 命令。</p>\n<p>我们把这个 Makefile 叫做 “总控 Makefile”, 总控 Makefile 的变量可以传递到下级的 Makefile 中, 但是不会覆盖下层的 Makefile 中所定义的变量, 除非指定了 <code>-e</code> 参数。</p>\n<p>如果你要传递变量到下级 Makefile 中, 那么你可以使用这样的声明:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export &lt;variable...&gt;</span><br></pre></td></tr></table></figure>\n\n<p>如果你不想让某些变量传递到下级 Makefile 中, 那么你可以这样声明:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unexport &lt;variable...&gt;</span><br></pre></td></tr></table></figure>\n\n<p>如:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export variable = value</span><br></pre></td></tr></table></figure>\n\n<p>其等价于:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">variable = value</span><br><span class=\"line\">export variable</span><br></pre></td></tr></table></figure>\n\n<p>等价于:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export variable := value</span><br></pre></td></tr></table></figure>\n\n<p>等价于:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">variable := value</span><br><span class=\"line\">export variable</span><br></pre></td></tr></table></figure>\n\n<p>再如:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export variable += value</span><br></pre></td></tr></table></figure>\n\n<p>其等价于:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">variable += value</span><br><span class=\"line\">export variable</span><br></pre></td></tr></table></figure>\n\n<p>如果你要传递所有的变量, 那么, 只要有一个<code>export</code>就行了, 表示传递所有的变量。</p>\n<p>需要注意的是, 有两个变量, 一个是SHELL, 一个是 MAKEFILES, 这两个变量不管是否 export, 都会传递到下层的 Makefile 中, 特别是 MAKEFILES 变量, 其中包含了 make 的参数信息, 如果我们执行”总控 Makefile”时有 make 参数或是在上层 Makefile 中定义了这个变量, 那么 MAKEFILES 变量将会是这些参数, 并会传递到下层 Makefile 中, 这是一个系统级的变量。</p>\n<p>但是 make 命令中的有几个参数并不往下传递, 他们是<code>-C</code>, <code>-f</code>, <code>-h</code>, <code>-o</code>和<code>-W</code>, 如果你不想往下层传递参数, 那么你可以这样来:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">subsystem:</span><br><span class=\"line\">\tcd subdir &amp;&amp; $(MAKE) MAKEFLAGS=</span><br></pre></td></tr></table></figure>\n\n<p>如果你定义了环境变量 MAKEFLAGS, 那么你得确信其中的选项是大家都会用到的, 如果其中有<code>-t</code>, <code>-n</code>和<code>-q</code>参数, 那么将会有意想不到的错误。</p>\n<p>还有一个在嵌套执行中比较有用的参数, <code>-w</code>或是<code>--print-directory</code>会在 make 的过程中输出一些信息, 让你看到目前的工作目录。比如, 如果我们的下级 make 目录是 <code>/home/littleboy/gnu/make</code>, 如果我们使用<code>make -w</code>来执行, 那么当进入该目录时, 我们将会看到:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make: Entering directory /home/littleboy/gnu/make`</span><br></pre></td></tr></table></figure>\n\n<p>而在完成下层 make 后离开目录时, 我们会看到:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make: Leaving directory `/home/littleboy/gnu/make`</span><br></pre></td></tr></table></figure>\n\n<p>当你使用<code>-C</code>参数来指定 make 下层 Makefile 时, <code>-w</code> 会被自动打开。如果参数中有<code>-s</code>(<code>--slient</code>)或是<code>--no-print-directory</code>, 那么<code>-w</code>总是失效的。</p>\n<h1 id=\"五-定义命令包\"><a href=\"#五-定义命令包\" class=\"headerlink\" title=\"五: 定义命令包\"></a>五: 定义命令包</h1><p>如果 Makefile 中出现一些相同命令序列, 那么我们可以为这些相同的命令序列定义一个变量。定义这种命令序列的语法以<code>define</code>开始, 以<code>endef</code>结束, 如:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define run-yacc</span><br><span class=\"line\">yacc $(firstword $^)</span><br><span class=\"line\">mv y.tab.c $@</span><br><span class=\"line\">endef</span><br></pre></td></tr></table></figure>\n\n<p>这里, “run-yacc”是这个命令包的名字, 不要和 Makefile 中的变量重名。在<code>define</code>和<code>endef</code>中的两行就是命令序列。这个命令包中的第一个命令是运行 Yacc 程序, 因为 Yacc 程序总是生成 “y.yab.c” 的文件, 所以第二行的命令就是把这个文件改名字。还是把这个命令包放到一个实例中看看:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo.c: foo.y</span><br><span class=\"line\">\t$(run-yacc)</span><br></pre></td></tr></table></figure>\n\n<p>我们可以看见, 要使用这个命令包, 我们就好像使用变量一样。在这个命令包的使用中, 命令包 “run-yacc” 中的 <code>$^</code> 就是 <code>foo.y</code>, <code>$@</code> 就是 <code>foo.c</code>, make 在执行命令包时, 命令包中的每个命令会被依次独立执行。</p>"},{"title":"《跟我一起写makefile (三)》摘抄","date":"2019-06-03T05:36:08.000Z","_content":"\n# Makefile 总述\n\n## 一、Makefile 里有什么?\n\nMakefile 里主要包含了五个东西, 显式规则, 隐式规则, 变量定义, 文件指示和注释。\n\n1. 显式规则。显式规则说明了, 如何生成一个或多个目标文件。这是由 Makefile 的书写者明显指出, 要生成的文件, 文件的依赖文件, 生成的命令。\n2. 隐式规则。由于我们的 make 有自动推导功能, 所以隐式的规则可以让我们比较粗糙地简略地书写 Makefile, 这是由 make 所支持的。\n3. 变量的定义。在 Makefile 中我们要定义一系列的变量, 变量一般都是字符串, 这个有点像 C 的宏, 当 Makefile 被执行时, 其中的变量都会被扩展到相应的引用位置上。\n4. 文件指示。其中包括了三个部分, 一个是在一个 Makefile 中引用另一个 Makefile, 就像 C 的 include 一样; 另一个是指根据某些情况指定 Makefile 中的有效部分, 就像 C 的 `#if` 一样; 还有就是定义一个多行的命令。\n5. 注释。Makefile 中只有行注释, 和 UNIX 的 shell 脚本一样, 其注释用 `#` 字符, 如果想要在 Makefile 中使用这个字符, 可以: `\\#`。\n\n最后值得一提的是, 在 Makefile 中的命令, 必须以 tab 键开头。\n\n<!--more-->\n\n## 二、Makefile 的文件名\n\n默认的情况是, make 命令会在当前目录下按顺序寻找文件名为 \"GNUmakefile\", \"makefile\", \"Makefile\" 的文件。在这三个文件名中, 最好使用\"Makefile\" 这个文件名, 比较醒目好认。最好不要使用\"GNUmakefile\", 这个只有 GNU 的 make 识别。\n\n## 三、引用其他的 Makefile\n\n在 Makefile 使用 include 关键字可以把别的 Makefile 包含进来, 被包含进来的文件会原模原样的放在当前文件的包含位置。include 语法是:\n\n```\ninclude <filename>\n```\n\nfilename 可以是当前操作系统 shell 的文件模式(可以包含路径和通配符)。\n\n在 include 前面可以有空字符, 但不能以 tab 键开始, include 和 <filename> 可以用一个或多个空格隔开, 如果有几个makefile: a.mk, b.mk, 还有一个文件叫 foo.make, 以及一个变量 $(bar), 其包含了 e.mk 和 f.mk, 那么可以这么写:\n\n> include foo.make *.mk $(bar)\n\n等价于:\n\n> include foo.make a.mk b.mk e.mk f.mk\n\nmake 命令开始时, 会找寻 include 所指出的其他的 Makefile, 并把其内容安置在当前位置。如果文件都没有指定绝对路径或者相对路径的话, make 会首先在当前目录下寻找, 如果当前目录下找不到, 那么 make 还会在以下几个目录下寻找:\n\n1. 如果 make 执行时, 有 \"-I\" 或 \"--include-dir\" 参数, 那么 make 就会在这个参数所指定的目录下寻找。\n2. 如果目录`<prefix>/include` (一般是: /usr/local/bin 或者 /usr/include)存在的话, make 也会去寻找。\n\n如果有文件没有找到的话, make 会生成一条警告信息, 但不会马上出现致命错误, 它会继续载入其他的文件, 一旦完成 makefile 的读取, make 会再重试这些没有找到或是无法载入的文件, 如果还是不行, make 会出现一条致命的信息, 如果想让 make 不理那些无法读取的文件, 而继续执行, 可以在 include 前加一个减号:\n\n```\n-include <filename>\n```\n\n表示无论 include 中出现了什么错误, 都不要报错继续执行, 和其他版本 make 兼容的相关命令是 sinclude, 作用和这个一样。\n\n## 四、环境变量 MAKEFILES\n\n如果当前环境变量中定义了环境变量 MAKEFILES, 那么, make 会把这个变量中的值做一个类似于 include 的动作。这个变量中的值是其他的 Makefile, 用空格分隔。只是, 它和 include 不同的是, 从这个环境中引入的 Makefile 的目标不会起作用, 如果环境变量中定义的文件发现错误, make 也不会理。\n\n如果这个变量被定义, 那么所有的 makefile 都会被影响。提这件事只是想告诉大家, 也许有时候 Makefile 出了怪事, 那么可以看看当前环境变量中有没有定义这个变量。\n\n## 五、make 的工作方式\n\nGNU 的 make 工作时的执行步骤如下:\n\n1. 读入所有的 Makefile\n2. 读入被 include 的其他 Makefile。\n3. 初始化文件中的变量。\n4. 推导隐晦规则, 并分析所有规则。\n5. 为所有的目标文件创建依赖关系链。\n6. 根据依赖生成关系, 决定那些目标要重新生成。\n7. 执行生成命令。\n\n1-5步为第一个阶段, 6-7为第二个阶段。第一个阶段中, 如果定义的变量被使用了, 那么, make 会把其展开在使用的位置。但 make 并不会完全马上展开, make 使用的是拖延战术, 如果变量出现在依赖关系的规则中, 那么仅当这条依赖被决定要使用了, 变量才会在其内部展开。\n","source":"_posts/note/blog_note/edit-makefile/edit-makefile-three.md","raw":"---\ntitle: 《跟我一起写makefile (三)》摘抄\ndate: 2019-06-03 13:36:08\ncategories:\n- 笔记\n- 读博客笔记\n- 跟我一起写makefile\ntags:\n- c++\n- 笔记\n- makefile\n---\n\n# Makefile 总述\n\n## 一、Makefile 里有什么?\n\nMakefile 里主要包含了五个东西, 显式规则, 隐式规则, 变量定义, 文件指示和注释。\n\n1. 显式规则。显式规则说明了, 如何生成一个或多个目标文件。这是由 Makefile 的书写者明显指出, 要生成的文件, 文件的依赖文件, 生成的命令。\n2. 隐式规则。由于我们的 make 有自动推导功能, 所以隐式的规则可以让我们比较粗糙地简略地书写 Makefile, 这是由 make 所支持的。\n3. 变量的定义。在 Makefile 中我们要定义一系列的变量, 变量一般都是字符串, 这个有点像 C 的宏, 当 Makefile 被执行时, 其中的变量都会被扩展到相应的引用位置上。\n4. 文件指示。其中包括了三个部分, 一个是在一个 Makefile 中引用另一个 Makefile, 就像 C 的 include 一样; 另一个是指根据某些情况指定 Makefile 中的有效部分, 就像 C 的 `#if` 一样; 还有就是定义一个多行的命令。\n5. 注释。Makefile 中只有行注释, 和 UNIX 的 shell 脚本一样, 其注释用 `#` 字符, 如果想要在 Makefile 中使用这个字符, 可以: `\\#`。\n\n最后值得一提的是, 在 Makefile 中的命令, 必须以 tab 键开头。\n\n<!--more-->\n\n## 二、Makefile 的文件名\n\n默认的情况是, make 命令会在当前目录下按顺序寻找文件名为 \"GNUmakefile\", \"makefile\", \"Makefile\" 的文件。在这三个文件名中, 最好使用\"Makefile\" 这个文件名, 比较醒目好认。最好不要使用\"GNUmakefile\", 这个只有 GNU 的 make 识别。\n\n## 三、引用其他的 Makefile\n\n在 Makefile 使用 include 关键字可以把别的 Makefile 包含进来, 被包含进来的文件会原模原样的放在当前文件的包含位置。include 语法是:\n\n```\ninclude <filename>\n```\n\nfilename 可以是当前操作系统 shell 的文件模式(可以包含路径和通配符)。\n\n在 include 前面可以有空字符, 但不能以 tab 键开始, include 和 <filename> 可以用一个或多个空格隔开, 如果有几个makefile: a.mk, b.mk, 还有一个文件叫 foo.make, 以及一个变量 $(bar), 其包含了 e.mk 和 f.mk, 那么可以这么写:\n\n> include foo.make *.mk $(bar)\n\n等价于:\n\n> include foo.make a.mk b.mk e.mk f.mk\n\nmake 命令开始时, 会找寻 include 所指出的其他的 Makefile, 并把其内容安置在当前位置。如果文件都没有指定绝对路径或者相对路径的话, make 会首先在当前目录下寻找, 如果当前目录下找不到, 那么 make 还会在以下几个目录下寻找:\n\n1. 如果 make 执行时, 有 \"-I\" 或 \"--include-dir\" 参数, 那么 make 就会在这个参数所指定的目录下寻找。\n2. 如果目录`<prefix>/include` (一般是: /usr/local/bin 或者 /usr/include)存在的话, make 也会去寻找。\n\n如果有文件没有找到的话, make 会生成一条警告信息, 但不会马上出现致命错误, 它会继续载入其他的文件, 一旦完成 makefile 的读取, make 会再重试这些没有找到或是无法载入的文件, 如果还是不行, make 会出现一条致命的信息, 如果想让 make 不理那些无法读取的文件, 而继续执行, 可以在 include 前加一个减号:\n\n```\n-include <filename>\n```\n\n表示无论 include 中出现了什么错误, 都不要报错继续执行, 和其他版本 make 兼容的相关命令是 sinclude, 作用和这个一样。\n\n## 四、环境变量 MAKEFILES\n\n如果当前环境变量中定义了环境变量 MAKEFILES, 那么, make 会把这个变量中的值做一个类似于 include 的动作。这个变量中的值是其他的 Makefile, 用空格分隔。只是, 它和 include 不同的是, 从这个环境中引入的 Makefile 的目标不会起作用, 如果环境变量中定义的文件发现错误, make 也不会理。\n\n如果这个变量被定义, 那么所有的 makefile 都会被影响。提这件事只是想告诉大家, 也许有时候 Makefile 出了怪事, 那么可以看看当前环境变量中有没有定义这个变量。\n\n## 五、make 的工作方式\n\nGNU 的 make 工作时的执行步骤如下:\n\n1. 读入所有的 Makefile\n2. 读入被 include 的其他 Makefile。\n3. 初始化文件中的变量。\n4. 推导隐晦规则, 并分析所有规则。\n5. 为所有的目标文件创建依赖关系链。\n6. 根据依赖生成关系, 决定那些目标要重新生成。\n7. 执行生成命令。\n\n1-5步为第一个阶段, 6-7为第二个阶段。第一个阶段中, 如果定义的变量被使用了, 那么, make 会把其展开在使用的位置。但 make 并不会完全马上展开, make 使用的是拖延战术, 如果变量出现在依赖关系的规则中, 那么仅当这条依赖被决定要使用了, 变量才会在其内部展开。\n","slug":"note/blog_note/edit-makefile/edit-makefile-three","published":1,"updated":"2022-10-02T15:43:24.997Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejvo00803vsb6e7ia8za","content":"<h1 id=\"Makefile-总述\"><a href=\"#Makefile-总述\" class=\"headerlink\" title=\"Makefile 总述\"></a>Makefile 总述</h1><h2 id=\"一、Makefile-里有什么\"><a href=\"#一、Makefile-里有什么\" class=\"headerlink\" title=\"一、Makefile 里有什么?\"></a>一、Makefile 里有什么?</h2><p>Makefile 里主要包含了五个东西, 显式规则, 隐式规则, 变量定义, 文件指示和注释。</p>\n<ol>\n<li>显式规则。显式规则说明了, 如何生成一个或多个目标文件。这是由 Makefile 的书写者明显指出, 要生成的文件, 文件的依赖文件, 生成的命令。</li>\n<li>隐式规则。由于我们的 make 有自动推导功能, 所以隐式的规则可以让我们比较粗糙地简略地书写 Makefile, 这是由 make 所支持的。</li>\n<li>变量的定义。在 Makefile 中我们要定义一系列的变量, 变量一般都是字符串, 这个有点像 C 的宏, 当 Makefile 被执行时, 其中的变量都会被扩展到相应的引用位置上。</li>\n<li>文件指示。其中包括了三个部分, 一个是在一个 Makefile 中引用另一个 Makefile, 就像 C 的 include 一样; 另一个是指根据某些情况指定 Makefile 中的有效部分, 就像 C 的 <code>#if</code> 一样; 还有就是定义一个多行的命令。</li>\n<li>注释。Makefile 中只有行注释, 和 UNIX 的 shell 脚本一样, 其注释用 <code>#</code> 字符, 如果想要在 Makefile 中使用这个字符, 可以: <code>\\#</code>。</li>\n</ol>\n<p>最后值得一提的是, 在 Makefile 中的命令, 必须以 tab 键开头。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"二、Makefile-的文件名\"><a href=\"#二、Makefile-的文件名\" class=\"headerlink\" title=\"二、Makefile 的文件名\"></a>二、Makefile 的文件名</h2><p>默认的情况是, make 命令会在当前目录下按顺序寻找文件名为 “GNUmakefile”, “makefile”, “Makefile” 的文件。在这三个文件名中, 最好使用”Makefile” 这个文件名, 比较醒目好认。最好不要使用”GNUmakefile”, 这个只有 GNU 的 make 识别。</p>\n<h2 id=\"三、引用其他的-Makefile\"><a href=\"#三、引用其他的-Makefile\" class=\"headerlink\" title=\"三、引用其他的 Makefile\"></a>三、引用其他的 Makefile</h2><p>在 Makefile 使用 include 关键字可以把别的 Makefile 包含进来, 被包含进来的文件会原模原样的放在当前文件的包含位置。include 语法是:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include &lt;filename&gt;</span><br></pre></td></tr></table></figure>\n\n<p>filename 可以是当前操作系统 shell 的文件模式(可以包含路径和通配符)。</p>\n<p>在 include 前面可以有空字符, 但不能以 tab 键开始, include 和 <filename> 可以用一个或多个空格隔开, 如果有几个makefile: a.mk, b.mk, 还有一个文件叫 foo.make, 以及一个变量 $(bar), 其包含了 e.mk 和 f.mk, 那么可以这么写:</p>\n<blockquote>\n<p>include foo.make *.mk $(bar)</p>\n</blockquote>\n<p>等价于:</p>\n<blockquote>\n<p>include foo.make a.mk b.mk e.mk f.mk</p>\n</blockquote>\n<p>make 命令开始时, 会找寻 include 所指出的其他的 Makefile, 并把其内容安置在当前位置。如果文件都没有指定绝对路径或者相对路径的话, make 会首先在当前目录下寻找, 如果当前目录下找不到, 那么 make 还会在以下几个目录下寻找:</p>\n<ol>\n<li>如果 make 执行时, 有 “-I” 或 “–include-dir” 参数, 那么 make 就会在这个参数所指定的目录下寻找。</li>\n<li>如果目录<code>&lt;prefix&gt;/include</code> (一般是: &#x2F;usr&#x2F;local&#x2F;bin 或者 &#x2F;usr&#x2F;include)存在的话, make 也会去寻找。</li>\n</ol>\n<p>如果有文件没有找到的话, make 会生成一条警告信息, 但不会马上出现致命错误, 它会继续载入其他的文件, 一旦完成 makefile 的读取, make 会再重试这些没有找到或是无法载入的文件, 如果还是不行, make 会出现一条致命的信息, 如果想让 make 不理那些无法读取的文件, 而继续执行, 可以在 include 前加一个减号:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-include &lt;filename&gt;</span><br></pre></td></tr></table></figure>\n\n<p>表示无论 include 中出现了什么错误, 都不要报错继续执行, 和其他版本 make 兼容的相关命令是 sinclude, 作用和这个一样。</p>\n<h2 id=\"四、环境变量-MAKEFILES\"><a href=\"#四、环境变量-MAKEFILES\" class=\"headerlink\" title=\"四、环境变量 MAKEFILES\"></a>四、环境变量 MAKEFILES</h2><p>如果当前环境变量中定义了环境变量 MAKEFILES, 那么, make 会把这个变量中的值做一个类似于 include 的动作。这个变量中的值是其他的 Makefile, 用空格分隔。只是, 它和 include 不同的是, 从这个环境中引入的 Makefile 的目标不会起作用, 如果环境变量中定义的文件发现错误, make 也不会理。</p>\n<p>如果这个变量被定义, 那么所有的 makefile 都会被影响。提这件事只是想告诉大家, 也许有时候 Makefile 出了怪事, 那么可以看看当前环境变量中有没有定义这个变量。</p>\n<h2 id=\"五、make-的工作方式\"><a href=\"#五、make-的工作方式\" class=\"headerlink\" title=\"五、make 的工作方式\"></a>五、make 的工作方式</h2><p>GNU 的 make 工作时的执行步骤如下:</p>\n<ol>\n<li>读入所有的 Makefile</li>\n<li>读入被 include 的其他 Makefile。</li>\n<li>初始化文件中的变量。</li>\n<li>推导隐晦规则, 并分析所有规则。</li>\n<li>为所有的目标文件创建依赖关系链。</li>\n<li>根据依赖生成关系, 决定那些目标要重新生成。</li>\n<li>执行生成命令。</li>\n</ol>\n<p>1-5步为第一个阶段, 6-7为第二个阶段。第一个阶段中, 如果定义的变量被使用了, 那么, make 会把其展开在使用的位置。但 make 并不会完全马上展开, make 使用的是拖延战术, 如果变量出现在依赖关系的规则中, 那么仅当这条依赖被决定要使用了, 变量才会在其内部展开。</p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"Makefile-总述\"><a href=\"#Makefile-总述\" class=\"headerlink\" title=\"Makefile 总述\"></a>Makefile 总述</h1><h2 id=\"一、Makefile-里有什么\"><a href=\"#一、Makefile-里有什么\" class=\"headerlink\" title=\"一、Makefile 里有什么?\"></a>一、Makefile 里有什么?</h2><p>Makefile 里主要包含了五个东西, 显式规则, 隐式规则, 变量定义, 文件指示和注释。</p>\n<ol>\n<li>显式规则。显式规则说明了, 如何生成一个或多个目标文件。这是由 Makefile 的书写者明显指出, 要生成的文件, 文件的依赖文件, 生成的命令。</li>\n<li>隐式规则。由于我们的 make 有自动推导功能, 所以隐式的规则可以让我们比较粗糙地简略地书写 Makefile, 这是由 make 所支持的。</li>\n<li>变量的定义。在 Makefile 中我们要定义一系列的变量, 变量一般都是字符串, 这个有点像 C 的宏, 当 Makefile 被执行时, 其中的变量都会被扩展到相应的引用位置上。</li>\n<li>文件指示。其中包括了三个部分, 一个是在一个 Makefile 中引用另一个 Makefile, 就像 C 的 include 一样; 另一个是指根据某些情况指定 Makefile 中的有效部分, 就像 C 的 <code>#if</code> 一样; 还有就是定义一个多行的命令。</li>\n<li>注释。Makefile 中只有行注释, 和 UNIX 的 shell 脚本一样, 其注释用 <code>#</code> 字符, 如果想要在 Makefile 中使用这个字符, 可以: <code>\\#</code>。</li>\n</ol>\n<p>最后值得一提的是, 在 Makefile 中的命令, 必须以 tab 键开头。</p>","more":"<h2 id=\"二、Makefile-的文件名\"><a href=\"#二、Makefile-的文件名\" class=\"headerlink\" title=\"二、Makefile 的文件名\"></a>二、Makefile 的文件名</h2><p>默认的情况是, make 命令会在当前目录下按顺序寻找文件名为 “GNUmakefile”, “makefile”, “Makefile” 的文件。在这三个文件名中, 最好使用”Makefile” 这个文件名, 比较醒目好认。最好不要使用”GNUmakefile”, 这个只有 GNU 的 make 识别。</p>\n<h2 id=\"三、引用其他的-Makefile\"><a href=\"#三、引用其他的-Makefile\" class=\"headerlink\" title=\"三、引用其他的 Makefile\"></a>三、引用其他的 Makefile</h2><p>在 Makefile 使用 include 关键字可以把别的 Makefile 包含进来, 被包含进来的文件会原模原样的放在当前文件的包含位置。include 语法是:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include &lt;filename&gt;</span><br></pre></td></tr></table></figure>\n\n<p>filename 可以是当前操作系统 shell 的文件模式(可以包含路径和通配符)。</p>\n<p>在 include 前面可以有空字符, 但不能以 tab 键开始, include 和 <filename> 可以用一个或多个空格隔开, 如果有几个makefile: a.mk, b.mk, 还有一个文件叫 foo.make, 以及一个变量 $(bar), 其包含了 e.mk 和 f.mk, 那么可以这么写:</p>\n<blockquote>\n<p>include foo.make *.mk $(bar)</p>\n</blockquote>\n<p>等价于:</p>\n<blockquote>\n<p>include foo.make a.mk b.mk e.mk f.mk</p>\n</blockquote>\n<p>make 命令开始时, 会找寻 include 所指出的其他的 Makefile, 并把其内容安置在当前位置。如果文件都没有指定绝对路径或者相对路径的话, make 会首先在当前目录下寻找, 如果当前目录下找不到, 那么 make 还会在以下几个目录下寻找:</p>\n<ol>\n<li>如果 make 执行时, 有 “-I” 或 “–include-dir” 参数, 那么 make 就会在这个参数所指定的目录下寻找。</li>\n<li>如果目录<code>&lt;prefix&gt;/include</code> (一般是: &#x2F;usr&#x2F;local&#x2F;bin 或者 &#x2F;usr&#x2F;include)存在的话, make 也会去寻找。</li>\n</ol>\n<p>如果有文件没有找到的话, make 会生成一条警告信息, 但不会马上出现致命错误, 它会继续载入其他的文件, 一旦完成 makefile 的读取, make 会再重试这些没有找到或是无法载入的文件, 如果还是不行, make 会出现一条致命的信息, 如果想让 make 不理那些无法读取的文件, 而继续执行, 可以在 include 前加一个减号:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-include &lt;filename&gt;</span><br></pre></td></tr></table></figure>\n\n<p>表示无论 include 中出现了什么错误, 都不要报错继续执行, 和其他版本 make 兼容的相关命令是 sinclude, 作用和这个一样。</p>\n<h2 id=\"四、环境变量-MAKEFILES\"><a href=\"#四、环境变量-MAKEFILES\" class=\"headerlink\" title=\"四、环境变量 MAKEFILES\"></a>四、环境变量 MAKEFILES</h2><p>如果当前环境变量中定义了环境变量 MAKEFILES, 那么, make 会把这个变量中的值做一个类似于 include 的动作。这个变量中的值是其他的 Makefile, 用空格分隔。只是, 它和 include 不同的是, 从这个环境中引入的 Makefile 的目标不会起作用, 如果环境变量中定义的文件发现错误, make 也不会理。</p>\n<p>如果这个变量被定义, 那么所有的 makefile 都会被影响。提这件事只是想告诉大家, 也许有时候 Makefile 出了怪事, 那么可以看看当前环境变量中有没有定义这个变量。</p>\n<h2 id=\"五、make-的工作方式\"><a href=\"#五、make-的工作方式\" class=\"headerlink\" title=\"五、make 的工作方式\"></a>五、make 的工作方式</h2><p>GNU 的 make 工作时的执行步骤如下:</p>\n<ol>\n<li>读入所有的 Makefile</li>\n<li>读入被 include 的其他 Makefile。</li>\n<li>初始化文件中的变量。</li>\n<li>推导隐晦规则, 并分析所有规则。</li>\n<li>为所有的目标文件创建依赖关系链。</li>\n<li>根据依赖生成关系, 决定那些目标要重新生成。</li>\n<li>执行生成命令。</li>\n</ol>\n<p>1-5步为第一个阶段, 6-7为第二个阶段。第一个阶段中, 如果定义的变量被使用了, 那么, make 会把其展开在使用的位置。但 make 并不会完全马上展开, make 使用的是拖延战术, 如果变量出现在依赖关系的规则中, 那么仅当这条依赖被决定要使用了, 变量才会在其内部展开。</p>"},{"title":"《跟我一起写makefile (二)》摘抄","date":"2019-06-03T01:26:13.000Z","_content":"\n# 三、make是如何工作的\n\n在默认的方式下, 也就是我们只输入 make 命令。那么,\n\n1. make 会在当前目录下找名字叫\"Makefile\" 或 \"makefile\"的文件\n2. 如果找到, 它会找文件中的第一个目标文件(target), 在上面的例子中, 他会找到\"edit\"这个文件, 并把这个文件作为最终的目标文件。\n3. 如果 edit 文件不存在, 或是 edit 所依赖的后面的 `.o` 文件的文件修改时间要比 edit 这个文件新, 那么, 他就会执行后面所定义的命令来生成 edit 文件。\n4. 如果 edit 所依赖的 `.o` 文件也存在, 那么 make 命令会在当前文件中找目标为 `.o` 文件的依赖性, 如果找到则在根据那个规则生成 `.o` 文件。(有点像堆栈的过程)\n5. 当然, 你的 C (或 cpp )文件和 H 文件是存在的啦, 于是 make 会生成 `.o` 文件, 然后再用 `.o` 文件声明 make 的终极任务, 也就是执行文件 edit 了。\n\n<!--more-->\n\n&emsp;&emsp;这就是整个 make 的依赖性, make 会一层又一层地去找文件的依赖关系, 直到最终编译出第一个目标文件。在找寻的过程中, 如果出现错误, 比如被依赖的文件找不到, 那么 make 会直接退出, 并报错, 而对于所定义的命令的错误, 或是编译不成功, make 根本不理。make 只管文件的依赖性, 即, 如果在我找了依赖关系之后, 冒号后面的文件还是不在, 那么对不起, 我就不工作啦。\n\n&emsp;&emsp;通过上述分析, 我们知道, 像 clean 这种, 没有被第一个目标文件直接或间接地关联, 那么它后面定义的命令将不会被自动执行, 不过我们可以显示让 make 执行。即命令 `make clean`, 以此来清除所有的目标文件, 以便重编译。\n\n&emsp;&emsp;如果整个工程已经被编译过了, 当我们修改了其中一个源文件, 比如 file.c, 那么根据依赖性, 我们的目标文件 file.o 会被重编译, 于是 file.o 的文件也是最新的了, 于是 file.o 的修改时间要比 edit 新, 所以 edit 也会被重新连接。\n\n&emsp;&emsp;而如果我们改变了 command.h, 那么 kdb.o, command.o 和 files.o 也会被重编译, 并且 edit 会重新连接。\n\n# 四、makefile 中使用变量\n\n在上面的例子中, 先让我们看看 edit 的规则:\n\n```\nedit : main.o kdb.o command.o display.o \\\n       insert.o search.o files.o utils.o\n\tcc -o edit main.o kdb.o command.o display.o \\\n\tinsert.o search.o files.o utils.o\n```\n\n我们可以看到`.o`文件的字符串被重复了两次, 如果我们的工程需要加入一个新的`.o`文件, 那么我们需要在两个地方加这个文件。当然我们的 makefile 并不复杂, 但是如果 makefile 变得复杂了之后, 那么我们有可能会忘掉或搞不清在哪里加而导致编译失败。所以, 为了使 makefile 易维护, 在 makefile 中我们可以使用变量, makefile 的变量也就是一个字符串, 理解成 C 中的宏会更好。\n\n我们可以声明一个`objects`来保存所有的 obj 文件:\n\n```\nobjects = main.o kdb.o command.o display.o \\\n          insert.o search.o files.o utils.o\n\nedit : $(objects)\n\tcc -o edit $(objects)\n\nmain.o : main.c defs.h\n\tcc -c main.c\n\nkdb.o : kdb.c defs.h command.h\n\tcc -c kdb.c\n\ncommand.o : command.c defs.h command.h\n\tcc -c command.c\n\ndisplay.o : display.c defs.h buffer.h\n\tcc -c display.c\n\ninsert.o : insert.c defs.h buffer.h\n\tcc -c insert.c\n\nfiles.o : files.c defs.h buffer.h command.h\n\tcc -c files.c\n\nutils.o : utils.c defs.h\n\tcc -c utils.c\n\nclean :\n\trm edit $(objects)\n```\n\n如果有新的`.o`文件加入, 我们只需要简单的修改一下 objects 变量就可以了。\n\n# 五、让 make 自动推导\n\nGNU 的 make 很强大, 它可以自动推导文件以及文件依赖关系后面的命令, 于是我们就没必要去在每一个`.o`文件后都写上类似的命令, 因为我们的 make 会自动识别, 并自己推导命令。\n\n只要 make 看到一个`.o`文件, 他就会自动的把`.c`文件加在依赖关系中, 如果 make 找到一个 whatever.o, 那么 whatever.c 就会是 whatever.o 的依赖文件。并且 cc -c whatever.c 也会被推导出来, 于是 makefile 变成了这样:\n\n```\nobjects = main.o kdb.o command.o display.o \\\n          insert.o search.o files.o utils.o\n\nedit : $(objects)\n\tcc -o edit $(objects)\n\nmain.o : defs.h\nkdb.o : defs.h command.h\ncommand.o : defs.h command.h\ndisplay.o : defs.h command.h\ninsert.o : defs.h buffer.h\nsearch.o : defs.h buffer.h\nfiles.o : defs.h buffer.h command.h\nutils.o : defs.h\n\n.PHONY : clean\nclean :\n\trm edit $(objects)\n```\n\n这种方法, 也就是 make 的\"隐晦规则\", 上面的内容中, \".PHONY\"表示, clean 是个伪目标文件。\n\n# 七、清空目标文件的规则\n\n每个 Makefile 中都应该写一个清空目标文件的规则, 一般的风格都是:\n\n```\nclean:\n\trm edit $(objects)\n```\n\n更为稳健的做法是:\n\n```\n.PHONY : clean\nclean:\n\t-rm edit $(objects)\n```\n\nrm 命令前加一个`-`的意思是也许某些文件出现问题, 但不要管, 继续做后面的事。当然 clean 的规则不要放到开头, 不然会被当成 make 的默认目标, 不成文的规矩是——\"clean 从来都是放到文件的最后\"。\n","source":"_posts/note/blog_note/edit-makefile/edit-makefile-two.md","raw":"---\ntitle: 《跟我一起写makefile (二)》摘抄\ndate: 2019-06-03 09:26:13\ncategories:\n- 笔记\n- 读博客笔记\n- 跟我一起写makefile\ntags:\n- c++\n- 笔记\n- makefile\n---\n\n# 三、make是如何工作的\n\n在默认的方式下, 也就是我们只输入 make 命令。那么,\n\n1. make 会在当前目录下找名字叫\"Makefile\" 或 \"makefile\"的文件\n2. 如果找到, 它会找文件中的第一个目标文件(target), 在上面的例子中, 他会找到\"edit\"这个文件, 并把这个文件作为最终的目标文件。\n3. 如果 edit 文件不存在, 或是 edit 所依赖的后面的 `.o` 文件的文件修改时间要比 edit 这个文件新, 那么, 他就会执行后面所定义的命令来生成 edit 文件。\n4. 如果 edit 所依赖的 `.o` 文件也存在, 那么 make 命令会在当前文件中找目标为 `.o` 文件的依赖性, 如果找到则在根据那个规则生成 `.o` 文件。(有点像堆栈的过程)\n5. 当然, 你的 C (或 cpp )文件和 H 文件是存在的啦, 于是 make 会生成 `.o` 文件, 然后再用 `.o` 文件声明 make 的终极任务, 也就是执行文件 edit 了。\n\n<!--more-->\n\n&emsp;&emsp;这就是整个 make 的依赖性, make 会一层又一层地去找文件的依赖关系, 直到最终编译出第一个目标文件。在找寻的过程中, 如果出现错误, 比如被依赖的文件找不到, 那么 make 会直接退出, 并报错, 而对于所定义的命令的错误, 或是编译不成功, make 根本不理。make 只管文件的依赖性, 即, 如果在我找了依赖关系之后, 冒号后面的文件还是不在, 那么对不起, 我就不工作啦。\n\n&emsp;&emsp;通过上述分析, 我们知道, 像 clean 这种, 没有被第一个目标文件直接或间接地关联, 那么它后面定义的命令将不会被自动执行, 不过我们可以显示让 make 执行。即命令 `make clean`, 以此来清除所有的目标文件, 以便重编译。\n\n&emsp;&emsp;如果整个工程已经被编译过了, 当我们修改了其中一个源文件, 比如 file.c, 那么根据依赖性, 我们的目标文件 file.o 会被重编译, 于是 file.o 的文件也是最新的了, 于是 file.o 的修改时间要比 edit 新, 所以 edit 也会被重新连接。\n\n&emsp;&emsp;而如果我们改变了 command.h, 那么 kdb.o, command.o 和 files.o 也会被重编译, 并且 edit 会重新连接。\n\n# 四、makefile 中使用变量\n\n在上面的例子中, 先让我们看看 edit 的规则:\n\n```\nedit : main.o kdb.o command.o display.o \\\n       insert.o search.o files.o utils.o\n\tcc -o edit main.o kdb.o command.o display.o \\\n\tinsert.o search.o files.o utils.o\n```\n\n我们可以看到`.o`文件的字符串被重复了两次, 如果我们的工程需要加入一个新的`.o`文件, 那么我们需要在两个地方加这个文件。当然我们的 makefile 并不复杂, 但是如果 makefile 变得复杂了之后, 那么我们有可能会忘掉或搞不清在哪里加而导致编译失败。所以, 为了使 makefile 易维护, 在 makefile 中我们可以使用变量, makefile 的变量也就是一个字符串, 理解成 C 中的宏会更好。\n\n我们可以声明一个`objects`来保存所有的 obj 文件:\n\n```\nobjects = main.o kdb.o command.o display.o \\\n          insert.o search.o files.o utils.o\n\nedit : $(objects)\n\tcc -o edit $(objects)\n\nmain.o : main.c defs.h\n\tcc -c main.c\n\nkdb.o : kdb.c defs.h command.h\n\tcc -c kdb.c\n\ncommand.o : command.c defs.h command.h\n\tcc -c command.c\n\ndisplay.o : display.c defs.h buffer.h\n\tcc -c display.c\n\ninsert.o : insert.c defs.h buffer.h\n\tcc -c insert.c\n\nfiles.o : files.c defs.h buffer.h command.h\n\tcc -c files.c\n\nutils.o : utils.c defs.h\n\tcc -c utils.c\n\nclean :\n\trm edit $(objects)\n```\n\n如果有新的`.o`文件加入, 我们只需要简单的修改一下 objects 变量就可以了。\n\n# 五、让 make 自动推导\n\nGNU 的 make 很强大, 它可以自动推导文件以及文件依赖关系后面的命令, 于是我们就没必要去在每一个`.o`文件后都写上类似的命令, 因为我们的 make 会自动识别, 并自己推导命令。\n\n只要 make 看到一个`.o`文件, 他就会自动的把`.c`文件加在依赖关系中, 如果 make 找到一个 whatever.o, 那么 whatever.c 就会是 whatever.o 的依赖文件。并且 cc -c whatever.c 也会被推导出来, 于是 makefile 变成了这样:\n\n```\nobjects = main.o kdb.o command.o display.o \\\n          insert.o search.o files.o utils.o\n\nedit : $(objects)\n\tcc -o edit $(objects)\n\nmain.o : defs.h\nkdb.o : defs.h command.h\ncommand.o : defs.h command.h\ndisplay.o : defs.h command.h\ninsert.o : defs.h buffer.h\nsearch.o : defs.h buffer.h\nfiles.o : defs.h buffer.h command.h\nutils.o : defs.h\n\n.PHONY : clean\nclean :\n\trm edit $(objects)\n```\n\n这种方法, 也就是 make 的\"隐晦规则\", 上面的内容中, \".PHONY\"表示, clean 是个伪目标文件。\n\n# 七、清空目标文件的规则\n\n每个 Makefile 中都应该写一个清空目标文件的规则, 一般的风格都是:\n\n```\nclean:\n\trm edit $(objects)\n```\n\n更为稳健的做法是:\n\n```\n.PHONY : clean\nclean:\n\t-rm edit $(objects)\n```\n\nrm 命令前加一个`-`的意思是也许某些文件出现问题, 但不要管, 继续做后面的事。当然 clean 的规则不要放到开头, 不然会被当成 make 的默认目标, 不成文的规矩是——\"clean 从来都是放到文件的最后\"。\n","slug":"note/blog_note/edit-makefile/edit-makefile-two","published":1,"updated":"2022-10-02T15:43:37.695Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejvr00833vsb59gyabh2","content":"<h1 id=\"三、make是如何工作的\"><a href=\"#三、make是如何工作的\" class=\"headerlink\" title=\"三、make是如何工作的\"></a>三、make是如何工作的</h1><p>在默认的方式下, 也就是我们只输入 make 命令。那么,</p>\n<ol>\n<li>make 会在当前目录下找名字叫”Makefile” 或 “makefile”的文件</li>\n<li>如果找到, 它会找文件中的第一个目标文件(target), 在上面的例子中, 他会找到”edit”这个文件, 并把这个文件作为最终的目标文件。</li>\n<li>如果 edit 文件不存在, 或是 edit 所依赖的后面的 <code>.o</code> 文件的文件修改时间要比 edit 这个文件新, 那么, 他就会执行后面所定义的命令来生成 edit 文件。</li>\n<li>如果 edit 所依赖的 <code>.o</code> 文件也存在, 那么 make 命令会在当前文件中找目标为 <code>.o</code> 文件的依赖性, 如果找到则在根据那个规则生成 <code>.o</code> 文件。(有点像堆栈的过程)</li>\n<li>当然, 你的 C (或 cpp )文件和 H 文件是存在的啦, 于是 make 会生成 <code>.o</code> 文件, 然后再用 <code>.o</code> 文件声明 make 的终极任务, 也就是执行文件 edit 了。</li>\n</ol>\n<span id=\"more\"></span>\n\n<p>&amp;emsp;&amp;emsp;这就是整个 make 的依赖性, make 会一层又一层地去找文件的依赖关系, 直到最终编译出第一个目标文件。在找寻的过程中, 如果出现错误, 比如被依赖的文件找不到, 那么 make 会直接退出, 并报错, 而对于所定义的命令的错误, 或是编译不成功, make 根本不理。make 只管文件的依赖性, 即, 如果在我找了依赖关系之后, 冒号后面的文件还是不在, 那么对不起, 我就不工作啦。</p>\n<p>&amp;emsp;&amp;emsp;通过上述分析, 我们知道, 像 clean 这种, 没有被第一个目标文件直接或间接地关联, 那么它后面定义的命令将不会被自动执行, 不过我们可以显示让 make 执行。即命令 <code>make clean</code>, 以此来清除所有的目标文件, 以便重编译。</p>\n<p>&amp;emsp;&amp;emsp;如果整个工程已经被编译过了, 当我们修改了其中一个源文件, 比如 file.c, 那么根据依赖性, 我们的目标文件 file.o 会被重编译, 于是 file.o 的文件也是最新的了, 于是 file.o 的修改时间要比 edit 新, 所以 edit 也会被重新连接。</p>\n<p>&amp;emsp;&amp;emsp;而如果我们改变了 command.h, 那么 kdb.o, command.o 和 files.o 也会被重编译, 并且 edit 会重新连接。</p>\n<h1 id=\"四、makefile-中使用变量\"><a href=\"#四、makefile-中使用变量\" class=\"headerlink\" title=\"四、makefile 中使用变量\"></a>四、makefile 中使用变量</h1><p>在上面的例子中, 先让我们看看 edit 的规则:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">edit : main.o kdb.o command.o display.o \\</span><br><span class=\"line\">       insert.o search.o files.o utils.o</span><br><span class=\"line\">\tcc -o edit main.o kdb.o command.o display.o \\</span><br><span class=\"line\">\tinsert.o search.o files.o utils.o</span><br></pre></td></tr></table></figure>\n\n<p>我们可以看到<code>.o</code>文件的字符串被重复了两次, 如果我们的工程需要加入一个新的<code>.o</code>文件, 那么我们需要在两个地方加这个文件。当然我们的 makefile 并不复杂, 但是如果 makefile 变得复杂了之后, 那么我们有可能会忘掉或搞不清在哪里加而导致编译失败。所以, 为了使 makefile 易维护, 在 makefile 中我们可以使用变量, makefile 的变量也就是一个字符串, 理解成 C 中的宏会更好。</p>\n<p>我们可以声明一个<code>objects</code>来保存所有的 obj 文件:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">objects = main.o kdb.o command.o display.o \\</span><br><span class=\"line\">          insert.o search.o files.o utils.o</span><br><span class=\"line\"></span><br><span class=\"line\">edit : $(objects)</span><br><span class=\"line\">\tcc -o edit $(objects)</span><br><span class=\"line\"></span><br><span class=\"line\">main.o : main.c defs.h</span><br><span class=\"line\">\tcc -c main.c</span><br><span class=\"line\"></span><br><span class=\"line\">kdb.o : kdb.c defs.h command.h</span><br><span class=\"line\">\tcc -c kdb.c</span><br><span class=\"line\"></span><br><span class=\"line\">command.o : command.c defs.h command.h</span><br><span class=\"line\">\tcc -c command.c</span><br><span class=\"line\"></span><br><span class=\"line\">display.o : display.c defs.h buffer.h</span><br><span class=\"line\">\tcc -c display.c</span><br><span class=\"line\"></span><br><span class=\"line\">insert.o : insert.c defs.h buffer.h</span><br><span class=\"line\">\tcc -c insert.c</span><br><span class=\"line\"></span><br><span class=\"line\">files.o : files.c defs.h buffer.h command.h</span><br><span class=\"line\">\tcc -c files.c</span><br><span class=\"line\"></span><br><span class=\"line\">utils.o : utils.c defs.h</span><br><span class=\"line\">\tcc -c utils.c</span><br><span class=\"line\"></span><br><span class=\"line\">clean :</span><br><span class=\"line\">\trm edit $(objects)</span><br></pre></td></tr></table></figure>\n\n<p>如果有新的<code>.o</code>文件加入, 我们只需要简单的修改一下 objects 变量就可以了。</p>\n<h1 id=\"五、让-make-自动推导\"><a href=\"#五、让-make-自动推导\" class=\"headerlink\" title=\"五、让 make 自动推导\"></a>五、让 make 自动推导</h1><p>GNU 的 make 很强大, 它可以自动推导文件以及文件依赖关系后面的命令, 于是我们就没必要去在每一个<code>.o</code>文件后都写上类似的命令, 因为我们的 make 会自动识别, 并自己推导命令。</p>\n<p>只要 make 看到一个<code>.o</code>文件, 他就会自动的把<code>.c</code>文件加在依赖关系中, 如果 make 找到一个 whatever.o, 那么 whatever.c 就会是 whatever.o 的依赖文件。并且 cc -c whatever.c 也会被推导出来, 于是 makefile 变成了这样:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">objects = main.o kdb.o command.o display.o \\</span><br><span class=\"line\">          insert.o search.o files.o utils.o</span><br><span class=\"line\"></span><br><span class=\"line\">edit : $(objects)</span><br><span class=\"line\">\tcc -o edit $(objects)</span><br><span class=\"line\"></span><br><span class=\"line\">main.o : defs.h</span><br><span class=\"line\">kdb.o : defs.h command.h</span><br><span class=\"line\">command.o : defs.h command.h</span><br><span class=\"line\">display.o : defs.h command.h</span><br><span class=\"line\">insert.o : defs.h buffer.h</span><br><span class=\"line\">search.o : defs.h buffer.h</span><br><span class=\"line\">files.o : defs.h buffer.h command.h</span><br><span class=\"line\">utils.o : defs.h</span><br><span class=\"line\"></span><br><span class=\"line\">.PHONY : clean</span><br><span class=\"line\">clean :</span><br><span class=\"line\">\trm edit $(objects)</span><br></pre></td></tr></table></figure>\n\n<p>这种方法, 也就是 make 的”隐晦规则”, 上面的内容中, “.PHONY”表示, clean 是个伪目标文件。</p>\n<h1 id=\"七、清空目标文件的规则\"><a href=\"#七、清空目标文件的规则\" class=\"headerlink\" title=\"七、清空目标文件的规则\"></a>七、清空目标文件的规则</h1><p>每个 Makefile 中都应该写一个清空目标文件的规则, 一般的风格都是:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clean:</span><br><span class=\"line\">\trm edit $(objects)</span><br></pre></td></tr></table></figure>\n\n<p>更为稳健的做法是:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.PHONY : clean</span><br><span class=\"line\">clean:</span><br><span class=\"line\">\t-rm edit $(objects)</span><br></pre></td></tr></table></figure>\n\n<p>rm 命令前加一个<code>-</code>的意思是也许某些文件出现问题, 但不要管, 继续做后面的事。当然 clean 的规则不要放到开头, 不然会被当成 make 的默认目标, 不成文的规矩是——“clean 从来都是放到文件的最后”。</p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"三、make是如何工作的\"><a href=\"#三、make是如何工作的\" class=\"headerlink\" title=\"三、make是如何工作的\"></a>三、make是如何工作的</h1><p>在默认的方式下, 也就是我们只输入 make 命令。那么,</p>\n<ol>\n<li>make 会在当前目录下找名字叫”Makefile” 或 “makefile”的文件</li>\n<li>如果找到, 它会找文件中的第一个目标文件(target), 在上面的例子中, 他会找到”edit”这个文件, 并把这个文件作为最终的目标文件。</li>\n<li>如果 edit 文件不存在, 或是 edit 所依赖的后面的 <code>.o</code> 文件的文件修改时间要比 edit 这个文件新, 那么, 他就会执行后面所定义的命令来生成 edit 文件。</li>\n<li>如果 edit 所依赖的 <code>.o</code> 文件也存在, 那么 make 命令会在当前文件中找目标为 <code>.o</code> 文件的依赖性, 如果找到则在根据那个规则生成 <code>.o</code> 文件。(有点像堆栈的过程)</li>\n<li>当然, 你的 C (或 cpp )文件和 H 文件是存在的啦, 于是 make 会生成 <code>.o</code> 文件, 然后再用 <code>.o</code> 文件声明 make 的终极任务, 也就是执行文件 edit 了。</li>\n</ol>","more":"<p>&amp;emsp;&amp;emsp;这就是整个 make 的依赖性, make 会一层又一层地去找文件的依赖关系, 直到最终编译出第一个目标文件。在找寻的过程中, 如果出现错误, 比如被依赖的文件找不到, 那么 make 会直接退出, 并报错, 而对于所定义的命令的错误, 或是编译不成功, make 根本不理。make 只管文件的依赖性, 即, 如果在我找了依赖关系之后, 冒号后面的文件还是不在, 那么对不起, 我就不工作啦。</p>\n<p>&amp;emsp;&amp;emsp;通过上述分析, 我们知道, 像 clean 这种, 没有被第一个目标文件直接或间接地关联, 那么它后面定义的命令将不会被自动执行, 不过我们可以显示让 make 执行。即命令 <code>make clean</code>, 以此来清除所有的目标文件, 以便重编译。</p>\n<p>&amp;emsp;&amp;emsp;如果整个工程已经被编译过了, 当我们修改了其中一个源文件, 比如 file.c, 那么根据依赖性, 我们的目标文件 file.o 会被重编译, 于是 file.o 的文件也是最新的了, 于是 file.o 的修改时间要比 edit 新, 所以 edit 也会被重新连接。</p>\n<p>&amp;emsp;&amp;emsp;而如果我们改变了 command.h, 那么 kdb.o, command.o 和 files.o 也会被重编译, 并且 edit 会重新连接。</p>\n<h1 id=\"四、makefile-中使用变量\"><a href=\"#四、makefile-中使用变量\" class=\"headerlink\" title=\"四、makefile 中使用变量\"></a>四、makefile 中使用变量</h1><p>在上面的例子中, 先让我们看看 edit 的规则:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">edit : main.o kdb.o command.o display.o \\</span><br><span class=\"line\">       insert.o search.o files.o utils.o</span><br><span class=\"line\">\tcc -o edit main.o kdb.o command.o display.o \\</span><br><span class=\"line\">\tinsert.o search.o files.o utils.o</span><br></pre></td></tr></table></figure>\n\n<p>我们可以看到<code>.o</code>文件的字符串被重复了两次, 如果我们的工程需要加入一个新的<code>.o</code>文件, 那么我们需要在两个地方加这个文件。当然我们的 makefile 并不复杂, 但是如果 makefile 变得复杂了之后, 那么我们有可能会忘掉或搞不清在哪里加而导致编译失败。所以, 为了使 makefile 易维护, 在 makefile 中我们可以使用变量, makefile 的变量也就是一个字符串, 理解成 C 中的宏会更好。</p>\n<p>我们可以声明一个<code>objects</code>来保存所有的 obj 文件:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">objects = main.o kdb.o command.o display.o \\</span><br><span class=\"line\">          insert.o search.o files.o utils.o</span><br><span class=\"line\"></span><br><span class=\"line\">edit : $(objects)</span><br><span class=\"line\">\tcc -o edit $(objects)</span><br><span class=\"line\"></span><br><span class=\"line\">main.o : main.c defs.h</span><br><span class=\"line\">\tcc -c main.c</span><br><span class=\"line\"></span><br><span class=\"line\">kdb.o : kdb.c defs.h command.h</span><br><span class=\"line\">\tcc -c kdb.c</span><br><span class=\"line\"></span><br><span class=\"line\">command.o : command.c defs.h command.h</span><br><span class=\"line\">\tcc -c command.c</span><br><span class=\"line\"></span><br><span class=\"line\">display.o : display.c defs.h buffer.h</span><br><span class=\"line\">\tcc -c display.c</span><br><span class=\"line\"></span><br><span class=\"line\">insert.o : insert.c defs.h buffer.h</span><br><span class=\"line\">\tcc -c insert.c</span><br><span class=\"line\"></span><br><span class=\"line\">files.o : files.c defs.h buffer.h command.h</span><br><span class=\"line\">\tcc -c files.c</span><br><span class=\"line\"></span><br><span class=\"line\">utils.o : utils.c defs.h</span><br><span class=\"line\">\tcc -c utils.c</span><br><span class=\"line\"></span><br><span class=\"line\">clean :</span><br><span class=\"line\">\trm edit $(objects)</span><br></pre></td></tr></table></figure>\n\n<p>如果有新的<code>.o</code>文件加入, 我们只需要简单的修改一下 objects 变量就可以了。</p>\n<h1 id=\"五、让-make-自动推导\"><a href=\"#五、让-make-自动推导\" class=\"headerlink\" title=\"五、让 make 自动推导\"></a>五、让 make 自动推导</h1><p>GNU 的 make 很强大, 它可以自动推导文件以及文件依赖关系后面的命令, 于是我们就没必要去在每一个<code>.o</code>文件后都写上类似的命令, 因为我们的 make 会自动识别, 并自己推导命令。</p>\n<p>只要 make 看到一个<code>.o</code>文件, 他就会自动的把<code>.c</code>文件加在依赖关系中, 如果 make 找到一个 whatever.o, 那么 whatever.c 就会是 whatever.o 的依赖文件。并且 cc -c whatever.c 也会被推导出来, 于是 makefile 变成了这样:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">objects = main.o kdb.o command.o display.o \\</span><br><span class=\"line\">          insert.o search.o files.o utils.o</span><br><span class=\"line\"></span><br><span class=\"line\">edit : $(objects)</span><br><span class=\"line\">\tcc -o edit $(objects)</span><br><span class=\"line\"></span><br><span class=\"line\">main.o : defs.h</span><br><span class=\"line\">kdb.o : defs.h command.h</span><br><span class=\"line\">command.o : defs.h command.h</span><br><span class=\"line\">display.o : defs.h command.h</span><br><span class=\"line\">insert.o : defs.h buffer.h</span><br><span class=\"line\">search.o : defs.h buffer.h</span><br><span class=\"line\">files.o : defs.h buffer.h command.h</span><br><span class=\"line\">utils.o : defs.h</span><br><span class=\"line\"></span><br><span class=\"line\">.PHONY : clean</span><br><span class=\"line\">clean :</span><br><span class=\"line\">\trm edit $(objects)</span><br></pre></td></tr></table></figure>\n\n<p>这种方法, 也就是 make 的”隐晦规则”, 上面的内容中, “.PHONY”表示, clean 是个伪目标文件。</p>\n<h1 id=\"七、清空目标文件的规则\"><a href=\"#七、清空目标文件的规则\" class=\"headerlink\" title=\"七、清空目标文件的规则\"></a>七、清空目标文件的规则</h1><p>每个 Makefile 中都应该写一个清空目标文件的规则, 一般的风格都是:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clean:</span><br><span class=\"line\">\trm edit $(objects)</span><br></pre></td></tr></table></figure>\n\n<p>更为稳健的做法是:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.PHONY : clean</span><br><span class=\"line\">clean:</span><br><span class=\"line\">\t-rm edit $(objects)</span><br></pre></td></tr></table></figure>\n\n<p>rm 命令前加一个<code>-</code>的意思是也许某些文件出现问题, 但不要管, 继续做后面的事。当然 clean 的规则不要放到开头, 不然会被当成 make 的默认目标, 不成文的规矩是——“clean 从来都是放到文件的最后”。</p>"},{"title":"c++的Makefile文件的编写","date":"2019-05-26T11:19:53.000Z","_content":"\n# 什么是Makefile\n\nMakefile文件描述了整个工程的编译, 连接等规则。其中包括: 工程中的那些源文件需要编译以及如何编译, 需要创建那些库文件以及如何创建这些库文件, 如何最后产生可执行文件。为工程编写Makefile的好处是能够使用一行命令来完成自动化编译, 一旦提供正确的Makefile, 编译整个工程所要做的唯一的一件事就是在shell下输入make命令, 整个工程会根据Makefile文件自动编译。\n\n# 编译与链接\n\nC或C++, 首先要把源文件编译成中间代码文件, 在Windows下后缀名为.obj, UNIX下为.o, 即Object file, 这个工作叫做编译(compile), 然后再把大量的Object file合成可执行文件, 这个动作叫做链接。\n\n编译时, 编译器会检查语法, 函数与变量的声明, 对于后者, 通常需要指定头文件的所在位置, 一般来说, 每个源文件都应该对应一个中间目标文件(Object file)。\n\n链接时, 主要是连接函数和全局变量, 可以直接使用中间目标文件进行链接, 在大多数时候, 由于中间目标文件太多, 而在链接时需要指出中间目标文件名, 在编写Makefile时很不方便, 所以可以将中间目标文件打包, 在Windows下叫做\"库文件\"(.lib文件), 在UNIX下是\"Archive File\"(.a文件)。\n<!--more-->\n\n# Makefile基本格式\n\n如下:\n\n```\ntarget ...: prerequisites ...\n\tcommand\n\t...\n\t...\n```\n\n> 注意, command之前必须是tab, 而不是空格, 使用vim的小伙伴需要注意, 如果你自定义了.vimrc文件, 那么极有可能将tab替换成了空格。\n\n* target - 目标文件 可以是Object File, 也可以是可执行文件\n* preprequisites - 生成的target所需要的文件或者目标\n* command - make需要执行的命令(任意的shell命令)\n\n# make 工作流程\n\n1. make会在当前目录下查找Makefile文件\n2. 如果找到, 他会找文件中的第一个目标文件(target), 并把这个文件作为最终的文件。\n3. 如果目标文件不存在， 或是目标文件所依赖的.o文件的修改时间要比目标文件新， 那么他会执行后面所定义的命令来生成这个文件。\n4. 如果目标文件所依赖的.o文件也存在，那么make会在当前文件中找目标为.o文件的依赖性，如果找到则再根据那一个规则生成.o文件。（这有点像一个堆栈的过程）\n5. 当然，你的C文件和H文件是存在的啦，于是make会生成 .o 文件，然后再用 .o 文件声明make的终极任务，也就是执行文件edit了。\n\n# 简单举例\n\n我们现在有一个主程序代码(main.cpp), 一份函数代码(gettop.cpp)以及一个头文件(gettop.h)\n\n目录结构是这样的:\n\n```\n|-cpp\n\tgettop.cpp\n|-h\n\tgettop.h\n-main.cpp\n```\n\n通常情况下, 需要这样编译:\n\n`g++ -o helloworld main.cpp cpp/gettop.cpp`\n\n那么写道Makefile中是这个样子的:\n\n```\nhelloworld: main.cpp cpp/gettop.cpp\n\tg++ -o helloworld main.cpp cpp/gettop.cpp\n```\n\n保存之后就可以直接输入make命令进行编译了。\n\n下面我们可以改进一下这个Makefile:\n\n```\ncc = g++\nhead = helloworld\nobj = main.cpp cpp/gettop.cpp\n\n$(head): $(obj)\n\t$(cc) -o $(head) $(obj)\n```\n\n这里我们定义了三个常量, 分别代表target, 编译命令以及所需文件。\n但我们现在依然还是没能解决当我们只修改一个文件时就要全部重新编译的问题。而且如果我们修改的是calc.h文件，make就无法察觉到变化了（所以有必要为头文件专门设置一个常量，并将其加入到依赖关系表中）。下面，我们来想一想如何解决这个问题。考虑到在标准的编译过程中，源文件往往是先被编译成目标文件，然后再由目标文件连接成可执行文件的。我们可以利用这一点来调整一下这些文件之间的依赖关系：\n\n```\ncc = g++\nhead = helloworld\ndeps = h/gettop.h\nobj = main.o gettop.o\n\n$(head): $(obj)\n\t$(cc) -o $(head) $(obj)\n\nmain.o main.cpp $(deps)\n\t$(cc) -c main.cpp\n\ngettop.o cpp/gettop.cpp $(deps)\n\t$(cc) -c cpp/gettop.cpp\n```\n\n这样一来，上面的问题显然是解决了，但同时我们又让代码变得非常啰嗦，啰嗦往往伴随着低效率，是不祥之兆。经过再度观察，我们发现所有.c都会被编译成相同名称的.o文件。我们可以根据该特点再对其做进一步的简化：\n\n```\ncc = g++\nhead = helloworld\ndeps = h/gettop.h\nobj = main.o gettop.o\n\n$(head): $(obj)\n\t$(cc) -o $(head) $(obj)\n\n%.o: %.cpp $(deps)\n\t$(cc) -c $< -o $@\n```\n\n在这里，我们用到了几个特殊的宏。首先是%.o:%.c，这是一个模式规则，表示所有的.o目标都依赖于与它同名的.c文件（当然还有deps中列出的头文件）。再来就是命令部分的$<和$@，其中`$<`代表的是依赖关系表中的第一项（如果我们想引用的是整个关系表，那么就应该使用$^），具体到我们这里就是%.c。而$@代表的是当前语句的目标，即%.o。这样一来，make命令就会自动将所有的.cpp源文件编译成同名的.o文件。不用我们一项一项去指定了。整个代码自然简洁了许多。\n\n自动变量的含义:\n\n| 自动变量 | 含义 |\n| :------- | :--- |\n| $@ | 目标集合 |\n| $% | 当目标是函数库文件时, 表示其中的目标文件名 |\n| $< | 第一个依赖目标. 如果依赖目标是多个, 逐个表示依赖目标 |\n| $? | 比目标新的依赖目标的集合 |\n| $^ | 所有依赖目标的集合, 会去除重复的依赖目标 |\n| $+ | 所有依赖目标的集合, 不会去除重复的依赖目标 |\n| $* | 这个是GNU make特有的, 其它的make不一定支持 |\n\n其实, make自带了自动推导文件以及文件依赖关系后面的命令, 只要make看到一个`.o`文件, 那么他就会自动把同名的`.cpp`文件加到依赖关系中去, 并且`g++ -c`命令也会被推导出来, 那么就可以变成这样:\n\n```\ncc = g++\nhead = helloworld\ndeps = h/gettop.h\nobj = main.o gettop.o\n\n$(head) : $(obj)\n\t$(cc) -o $(head) $(obj)\n\nmain.o : $(deps)\ngettop.o : $(deps)\n```\n\n另外，如果我们需要往工程中添加一个.c或.h，可能同时就要再手动为obj常量再添加第一个.o文件，如果这列表很长，代码会非常难看，为此，我们需要用到Makefile中的函数，这里我们演示两个：\n\n```\ncc = g++\nhead = helloworld\ndeps = $(shell find ./ -name \"*.h\")\nsrc = $(shell find ./ -name \"*.c\")\nobj = $(src:%.c=%.o)\n\n$(head): $(obj)\n\t$(cc) -o $(head) $(obj)\n\n%.o: %.c $(deps)\n\t$(cc) -c $< -o $@\n\n```\n\n其中，shell函数主要用于执行shell命令，具体到这里就是找出当前目录下所有的.c和.h文件。而$(src:%.c=%.o)则是一个字符替换函数，它会将src所有的.c字串替换成.o，实际上就等于列出了所有.c文件要编译的结果。有了这两个设定，无论我们今后在该工程加入多少.c和.h文件，Makefile都能自动将其纳入到工程中来。\n","source":"_posts/note/blog_note/edit-makefile/edit-makefile.md","raw":"---\ntitle: c++的Makefile文件的编写\ndate: 2019-05-26 19:19:53\ncategories:\n- 笔记\n- 读博客笔记\n- 跟我一起写makefile\ntags:\n- 笔记\n- makefile\n---\n\n# 什么是Makefile\n\nMakefile文件描述了整个工程的编译, 连接等规则。其中包括: 工程中的那些源文件需要编译以及如何编译, 需要创建那些库文件以及如何创建这些库文件, 如何最后产生可执行文件。为工程编写Makefile的好处是能够使用一行命令来完成自动化编译, 一旦提供正确的Makefile, 编译整个工程所要做的唯一的一件事就是在shell下输入make命令, 整个工程会根据Makefile文件自动编译。\n\n# 编译与链接\n\nC或C++, 首先要把源文件编译成中间代码文件, 在Windows下后缀名为.obj, UNIX下为.o, 即Object file, 这个工作叫做编译(compile), 然后再把大量的Object file合成可执行文件, 这个动作叫做链接。\n\n编译时, 编译器会检查语法, 函数与变量的声明, 对于后者, 通常需要指定头文件的所在位置, 一般来说, 每个源文件都应该对应一个中间目标文件(Object file)。\n\n链接时, 主要是连接函数和全局变量, 可以直接使用中间目标文件进行链接, 在大多数时候, 由于中间目标文件太多, 而在链接时需要指出中间目标文件名, 在编写Makefile时很不方便, 所以可以将中间目标文件打包, 在Windows下叫做\"库文件\"(.lib文件), 在UNIX下是\"Archive File\"(.a文件)。\n<!--more-->\n\n# Makefile基本格式\n\n如下:\n\n```\ntarget ...: prerequisites ...\n\tcommand\n\t...\n\t...\n```\n\n> 注意, command之前必须是tab, 而不是空格, 使用vim的小伙伴需要注意, 如果你自定义了.vimrc文件, 那么极有可能将tab替换成了空格。\n\n* target - 目标文件 可以是Object File, 也可以是可执行文件\n* preprequisites - 生成的target所需要的文件或者目标\n* command - make需要执行的命令(任意的shell命令)\n\n# make 工作流程\n\n1. make会在当前目录下查找Makefile文件\n2. 如果找到, 他会找文件中的第一个目标文件(target), 并把这个文件作为最终的文件。\n3. 如果目标文件不存在， 或是目标文件所依赖的.o文件的修改时间要比目标文件新， 那么他会执行后面所定义的命令来生成这个文件。\n4. 如果目标文件所依赖的.o文件也存在，那么make会在当前文件中找目标为.o文件的依赖性，如果找到则再根据那一个规则生成.o文件。（这有点像一个堆栈的过程）\n5. 当然，你的C文件和H文件是存在的啦，于是make会生成 .o 文件，然后再用 .o 文件声明make的终极任务，也就是执行文件edit了。\n\n# 简单举例\n\n我们现在有一个主程序代码(main.cpp), 一份函数代码(gettop.cpp)以及一个头文件(gettop.h)\n\n目录结构是这样的:\n\n```\n|-cpp\n\tgettop.cpp\n|-h\n\tgettop.h\n-main.cpp\n```\n\n通常情况下, 需要这样编译:\n\n`g++ -o helloworld main.cpp cpp/gettop.cpp`\n\n那么写道Makefile中是这个样子的:\n\n```\nhelloworld: main.cpp cpp/gettop.cpp\n\tg++ -o helloworld main.cpp cpp/gettop.cpp\n```\n\n保存之后就可以直接输入make命令进行编译了。\n\n下面我们可以改进一下这个Makefile:\n\n```\ncc = g++\nhead = helloworld\nobj = main.cpp cpp/gettop.cpp\n\n$(head): $(obj)\n\t$(cc) -o $(head) $(obj)\n```\n\n这里我们定义了三个常量, 分别代表target, 编译命令以及所需文件。\n但我们现在依然还是没能解决当我们只修改一个文件时就要全部重新编译的问题。而且如果我们修改的是calc.h文件，make就无法察觉到变化了（所以有必要为头文件专门设置一个常量，并将其加入到依赖关系表中）。下面，我们来想一想如何解决这个问题。考虑到在标准的编译过程中，源文件往往是先被编译成目标文件，然后再由目标文件连接成可执行文件的。我们可以利用这一点来调整一下这些文件之间的依赖关系：\n\n```\ncc = g++\nhead = helloworld\ndeps = h/gettop.h\nobj = main.o gettop.o\n\n$(head): $(obj)\n\t$(cc) -o $(head) $(obj)\n\nmain.o main.cpp $(deps)\n\t$(cc) -c main.cpp\n\ngettop.o cpp/gettop.cpp $(deps)\n\t$(cc) -c cpp/gettop.cpp\n```\n\n这样一来，上面的问题显然是解决了，但同时我们又让代码变得非常啰嗦，啰嗦往往伴随着低效率，是不祥之兆。经过再度观察，我们发现所有.c都会被编译成相同名称的.o文件。我们可以根据该特点再对其做进一步的简化：\n\n```\ncc = g++\nhead = helloworld\ndeps = h/gettop.h\nobj = main.o gettop.o\n\n$(head): $(obj)\n\t$(cc) -o $(head) $(obj)\n\n%.o: %.cpp $(deps)\n\t$(cc) -c $< -o $@\n```\n\n在这里，我们用到了几个特殊的宏。首先是%.o:%.c，这是一个模式规则，表示所有的.o目标都依赖于与它同名的.c文件（当然还有deps中列出的头文件）。再来就是命令部分的$<和$@，其中`$<`代表的是依赖关系表中的第一项（如果我们想引用的是整个关系表，那么就应该使用$^），具体到我们这里就是%.c。而$@代表的是当前语句的目标，即%.o。这样一来，make命令就会自动将所有的.cpp源文件编译成同名的.o文件。不用我们一项一项去指定了。整个代码自然简洁了许多。\n\n自动变量的含义:\n\n| 自动变量 | 含义 |\n| :------- | :--- |\n| $@ | 目标集合 |\n| $% | 当目标是函数库文件时, 表示其中的目标文件名 |\n| $< | 第一个依赖目标. 如果依赖目标是多个, 逐个表示依赖目标 |\n| $? | 比目标新的依赖目标的集合 |\n| $^ | 所有依赖目标的集合, 会去除重复的依赖目标 |\n| $+ | 所有依赖目标的集合, 不会去除重复的依赖目标 |\n| $* | 这个是GNU make特有的, 其它的make不一定支持 |\n\n其实, make自带了自动推导文件以及文件依赖关系后面的命令, 只要make看到一个`.o`文件, 那么他就会自动把同名的`.cpp`文件加到依赖关系中去, 并且`g++ -c`命令也会被推导出来, 那么就可以变成这样:\n\n```\ncc = g++\nhead = helloworld\ndeps = h/gettop.h\nobj = main.o gettop.o\n\n$(head) : $(obj)\n\t$(cc) -o $(head) $(obj)\n\nmain.o : $(deps)\ngettop.o : $(deps)\n```\n\n另外，如果我们需要往工程中添加一个.c或.h，可能同时就要再手动为obj常量再添加第一个.o文件，如果这列表很长，代码会非常难看，为此，我们需要用到Makefile中的函数，这里我们演示两个：\n\n```\ncc = g++\nhead = helloworld\ndeps = $(shell find ./ -name \"*.h\")\nsrc = $(shell find ./ -name \"*.c\")\nobj = $(src:%.c=%.o)\n\n$(head): $(obj)\n\t$(cc) -o $(head) $(obj)\n\n%.o: %.c $(deps)\n\t$(cc) -c $< -o $@\n\n```\n\n其中，shell函数主要用于执行shell命令，具体到这里就是找出当前目录下所有的.c和.h文件。而$(src:%.c=%.o)则是一个字符替换函数，它会将src所有的.c字串替换成.o，实际上就等于列出了所有.c文件要编译的结果。有了这两个设定，无论我们今后在该工程加入多少.c和.h文件，Makefile都能自动将其纳入到工程中来。\n","slug":"note/blog_note/edit-makefile/edit-makefile","published":1,"updated":"2022-10-02T15:41:31.536Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejvv00863vsb86ql8ods","content":"<h1 id=\"什么是Makefile\"><a href=\"#什么是Makefile\" class=\"headerlink\" title=\"什么是Makefile\"></a>什么是Makefile</h1><p>Makefile文件描述了整个工程的编译, 连接等规则。其中包括: 工程中的那些源文件需要编译以及如何编译, 需要创建那些库文件以及如何创建这些库文件, 如何最后产生可执行文件。为工程编写Makefile的好处是能够使用一行命令来完成自动化编译, 一旦提供正确的Makefile, 编译整个工程所要做的唯一的一件事就是在shell下输入make命令, 整个工程会根据Makefile文件自动编译。</p>\n<h1 id=\"编译与链接\"><a href=\"#编译与链接\" class=\"headerlink\" title=\"编译与链接\"></a>编译与链接</h1><p>C或C++, 首先要把源文件编译成中间代码文件, 在Windows下后缀名为.obj, UNIX下为.o, 即Object file, 这个工作叫做编译(compile), 然后再把大量的Object file合成可执行文件, 这个动作叫做链接。</p>\n<p>编译时, 编译器会检查语法, 函数与变量的声明, 对于后者, 通常需要指定头文件的所在位置, 一般来说, 每个源文件都应该对应一个中间目标文件(Object file)。</p>\n<p>链接时, 主要是连接函数和全局变量, 可以直接使用中间目标文件进行链接, 在大多数时候, 由于中间目标文件太多, 而在链接时需要指出中间目标文件名, 在编写Makefile时很不方便, 所以可以将中间目标文件打包, 在Windows下叫做”库文件”(.lib文件), 在UNIX下是”Archive File”(.a文件)。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"Makefile基本格式\"><a href=\"#Makefile基本格式\" class=\"headerlink\" title=\"Makefile基本格式\"></a>Makefile基本格式</h1><p>如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">target ...: prerequisites ...</span><br><span class=\"line\">\tcommand</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t...</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意, command之前必须是tab, 而不是空格, 使用vim的小伙伴需要注意, 如果你自定义了.vimrc文件, 那么极有可能将tab替换成了空格。</p>\n</blockquote>\n<ul>\n<li>target - 目标文件 可以是Object File, 也可以是可执行文件</li>\n<li>preprequisites - 生成的target所需要的文件或者目标</li>\n<li>command - make需要执行的命令(任意的shell命令)</li>\n</ul>\n<h1 id=\"make-工作流程\"><a href=\"#make-工作流程\" class=\"headerlink\" title=\"make 工作流程\"></a>make 工作流程</h1><ol>\n<li>make会在当前目录下查找Makefile文件</li>\n<li>如果找到, 他会找文件中的第一个目标文件(target), 并把这个文件作为最终的文件。</li>\n<li>如果目标文件不存在， 或是目标文件所依赖的.o文件的修改时间要比目标文件新， 那么他会执行后面所定义的命令来生成这个文件。</li>\n<li>如果目标文件所依赖的.o文件也存在，那么make会在当前文件中找目标为.o文件的依赖性，如果找到则再根据那一个规则生成.o文件。（这有点像一个堆栈的过程）</li>\n<li>当然，你的C文件和H文件是存在的啦，于是make会生成 .o 文件，然后再用 .o 文件声明make的终极任务，也就是执行文件edit了。</li>\n</ol>\n<h1 id=\"简单举例\"><a href=\"#简单举例\" class=\"headerlink\" title=\"简单举例\"></a>简单举例</h1><p>我们现在有一个主程序代码(main.cpp), 一份函数代码(gettop.cpp)以及一个头文件(gettop.h)</p>\n<p>目录结构是这样的:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|-cpp</span><br><span class=\"line\">\tgettop.cpp</span><br><span class=\"line\">|-h</span><br><span class=\"line\">\tgettop.h</span><br><span class=\"line\">-main.cpp</span><br></pre></td></tr></table></figure>\n\n<p>通常情况下, 需要这样编译:</p>\n<p><code>g++ -o helloworld main.cpp cpp/gettop.cpp</code></p>\n<p>那么写道Makefile中是这个样子的:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">helloworld: main.cpp cpp/gettop.cpp</span><br><span class=\"line\">\tg++ -o helloworld main.cpp cpp/gettop.cpp</span><br></pre></td></tr></table></figure>\n\n<p>保存之后就可以直接输入make命令进行编译了。</p>\n<p>下面我们可以改进一下这个Makefile:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cc = g++</span><br><span class=\"line\">head = helloworld</span><br><span class=\"line\">obj = main.cpp cpp/gettop.cpp</span><br><span class=\"line\"></span><br><span class=\"line\">$(head): $(obj)</span><br><span class=\"line\">\t$(cc) -o $(head) $(obj)</span><br></pre></td></tr></table></figure>\n\n<p>这里我们定义了三个常量, 分别代表target, 编译命令以及所需文件。<br>但我们现在依然还是没能解决当我们只修改一个文件时就要全部重新编译的问题。而且如果我们修改的是calc.h文件，make就无法察觉到变化了（所以有必要为头文件专门设置一个常量，并将其加入到依赖关系表中）。下面，我们来想一想如何解决这个问题。考虑到在标准的编译过程中，源文件往往是先被编译成目标文件，然后再由目标文件连接成可执行文件的。我们可以利用这一点来调整一下这些文件之间的依赖关系：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cc = g++</span><br><span class=\"line\">head = helloworld</span><br><span class=\"line\">deps = h/gettop.h</span><br><span class=\"line\">obj = main.o gettop.o</span><br><span class=\"line\"></span><br><span class=\"line\">$(head): $(obj)</span><br><span class=\"line\">\t$(cc) -o $(head) $(obj)</span><br><span class=\"line\"></span><br><span class=\"line\">main.o main.cpp $(deps)</span><br><span class=\"line\">\t$(cc) -c main.cpp</span><br><span class=\"line\"></span><br><span class=\"line\">gettop.o cpp/gettop.cpp $(deps)</span><br><span class=\"line\">\t$(cc) -c cpp/gettop.cpp</span><br></pre></td></tr></table></figure>\n\n<p>这样一来，上面的问题显然是解决了，但同时我们又让代码变得非常啰嗦，啰嗦往往伴随着低效率，是不祥之兆。经过再度观察，我们发现所有.c都会被编译成相同名称的.o文件。我们可以根据该特点再对其做进一步的简化：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cc = g++</span><br><span class=\"line\">head = helloworld</span><br><span class=\"line\">deps = h/gettop.h</span><br><span class=\"line\">obj = main.o gettop.o</span><br><span class=\"line\"></span><br><span class=\"line\">$(head): $(obj)</span><br><span class=\"line\">\t$(cc) -o $(head) $(obj)</span><br><span class=\"line\"></span><br><span class=\"line\">%.o: %.cpp $(deps)</span><br><span class=\"line\">\t$(cc) -c $&lt; -o $@</span><br></pre></td></tr></table></figure>\n\n<p>在这里，我们用到了几个特殊的宏。首先是%.o:%.c，这是一个模式规则，表示所有的.o目标都依赖于与它同名的.c文件（当然还有deps中列出的头文件）。再来就是命令部分的$&lt;和$@，其中<code>$&lt;</code>代表的是依赖关系表中的第一项（如果我们想引用的是整个关系表，那么就应该使用$^），具体到我们这里就是%.c。而$@代表的是当前语句的目标，即%.o。这样一来，make命令就会自动将所有的.cpp源文件编译成同名的.o文件。不用我们一项一项去指定了。整个代码自然简洁了许多。</p>\n<p>自动变量的含义:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">自动变量</th>\n<th align=\"left\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">$@</td>\n<td align=\"left\">目标集合</td>\n</tr>\n<tr>\n<td align=\"left\">$%</td>\n<td align=\"left\">当目标是函数库文件时, 表示其中的目标文件名</td>\n</tr>\n<tr>\n<td align=\"left\">$&lt;</td>\n<td align=\"left\">第一个依赖目标. 如果依赖目标是多个, 逐个表示依赖目标</td>\n</tr>\n<tr>\n<td align=\"left\">$?</td>\n<td align=\"left\">比目标新的依赖目标的集合</td>\n</tr>\n<tr>\n<td align=\"left\">$^</td>\n<td align=\"left\">所有依赖目标的集合, 会去除重复的依赖目标</td>\n</tr>\n<tr>\n<td align=\"left\">$+</td>\n<td align=\"left\">所有依赖目标的集合, 不会去除重复的依赖目标</td>\n</tr>\n<tr>\n<td align=\"left\">$*</td>\n<td align=\"left\">这个是GNU make特有的, 其它的make不一定支持</td>\n</tr>\n</tbody></table>\n<p>其实, make自带了自动推导文件以及文件依赖关系后面的命令, 只要make看到一个<code>.o</code>文件, 那么他就会自动把同名的<code>.cpp</code>文件加到依赖关系中去, 并且<code>g++ -c</code>命令也会被推导出来, 那么就可以变成这样:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cc = g++</span><br><span class=\"line\">head = helloworld</span><br><span class=\"line\">deps = h/gettop.h</span><br><span class=\"line\">obj = main.o gettop.o</span><br><span class=\"line\"></span><br><span class=\"line\">$(head) : $(obj)</span><br><span class=\"line\">\t$(cc) -o $(head) $(obj)</span><br><span class=\"line\"></span><br><span class=\"line\">main.o : $(deps)</span><br><span class=\"line\">gettop.o : $(deps)</span><br></pre></td></tr></table></figure>\n\n<p>另外，如果我们需要往工程中添加一个.c或.h，可能同时就要再手动为obj常量再添加第一个.o文件，如果这列表很长，代码会非常难看，为此，我们需要用到Makefile中的函数，这里我们演示两个：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cc = g++</span><br><span class=\"line\">head = helloworld</span><br><span class=\"line\">deps = $(shell find ./ -name &quot;*.h&quot;)</span><br><span class=\"line\">src = $(shell find ./ -name &quot;*.c&quot;)</span><br><span class=\"line\">obj = $(src:%.c=%.o)</span><br><span class=\"line\"></span><br><span class=\"line\">$(head): $(obj)</span><br><span class=\"line\">\t$(cc) -o $(head) $(obj)</span><br><span class=\"line\"></span><br><span class=\"line\">%.o: %.c $(deps)</span><br><span class=\"line\">\t$(cc) -c $&lt; -o $@</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>其中，shell函数主要用于执行shell命令，具体到这里就是找出当前目录下所有的.c和.h文件。而$(src:%.c&#x3D;%.o)则是一个字符替换函数，它会将src所有的.c字串替换成.o，实际上就等于列出了所有.c文件要编译的结果。有了这两个设定，无论我们今后在该工程加入多少.c和.h文件，Makefile都能自动将其纳入到工程中来。</p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"什么是Makefile\"><a href=\"#什么是Makefile\" class=\"headerlink\" title=\"什么是Makefile\"></a>什么是Makefile</h1><p>Makefile文件描述了整个工程的编译, 连接等规则。其中包括: 工程中的那些源文件需要编译以及如何编译, 需要创建那些库文件以及如何创建这些库文件, 如何最后产生可执行文件。为工程编写Makefile的好处是能够使用一行命令来完成自动化编译, 一旦提供正确的Makefile, 编译整个工程所要做的唯一的一件事就是在shell下输入make命令, 整个工程会根据Makefile文件自动编译。</p>\n<h1 id=\"编译与链接\"><a href=\"#编译与链接\" class=\"headerlink\" title=\"编译与链接\"></a>编译与链接</h1><p>C或C++, 首先要把源文件编译成中间代码文件, 在Windows下后缀名为.obj, UNIX下为.o, 即Object file, 这个工作叫做编译(compile), 然后再把大量的Object file合成可执行文件, 这个动作叫做链接。</p>\n<p>编译时, 编译器会检查语法, 函数与变量的声明, 对于后者, 通常需要指定头文件的所在位置, 一般来说, 每个源文件都应该对应一个中间目标文件(Object file)。</p>\n<p>链接时, 主要是连接函数和全局变量, 可以直接使用中间目标文件进行链接, 在大多数时候, 由于中间目标文件太多, 而在链接时需要指出中间目标文件名, 在编写Makefile时很不方便, 所以可以将中间目标文件打包, 在Windows下叫做”库文件”(.lib文件), 在UNIX下是”Archive File”(.a文件)。</p>","more":"<h1 id=\"Makefile基本格式\"><a href=\"#Makefile基本格式\" class=\"headerlink\" title=\"Makefile基本格式\"></a>Makefile基本格式</h1><p>如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">target ...: prerequisites ...</span><br><span class=\"line\">\tcommand</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t...</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意, command之前必须是tab, 而不是空格, 使用vim的小伙伴需要注意, 如果你自定义了.vimrc文件, 那么极有可能将tab替换成了空格。</p>\n</blockquote>\n<ul>\n<li>target - 目标文件 可以是Object File, 也可以是可执行文件</li>\n<li>preprequisites - 生成的target所需要的文件或者目标</li>\n<li>command - make需要执行的命令(任意的shell命令)</li>\n</ul>\n<h1 id=\"make-工作流程\"><a href=\"#make-工作流程\" class=\"headerlink\" title=\"make 工作流程\"></a>make 工作流程</h1><ol>\n<li>make会在当前目录下查找Makefile文件</li>\n<li>如果找到, 他会找文件中的第一个目标文件(target), 并把这个文件作为最终的文件。</li>\n<li>如果目标文件不存在， 或是目标文件所依赖的.o文件的修改时间要比目标文件新， 那么他会执行后面所定义的命令来生成这个文件。</li>\n<li>如果目标文件所依赖的.o文件也存在，那么make会在当前文件中找目标为.o文件的依赖性，如果找到则再根据那一个规则生成.o文件。（这有点像一个堆栈的过程）</li>\n<li>当然，你的C文件和H文件是存在的啦，于是make会生成 .o 文件，然后再用 .o 文件声明make的终极任务，也就是执行文件edit了。</li>\n</ol>\n<h1 id=\"简单举例\"><a href=\"#简单举例\" class=\"headerlink\" title=\"简单举例\"></a>简单举例</h1><p>我们现在有一个主程序代码(main.cpp), 一份函数代码(gettop.cpp)以及一个头文件(gettop.h)</p>\n<p>目录结构是这样的:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|-cpp</span><br><span class=\"line\">\tgettop.cpp</span><br><span class=\"line\">|-h</span><br><span class=\"line\">\tgettop.h</span><br><span class=\"line\">-main.cpp</span><br></pre></td></tr></table></figure>\n\n<p>通常情况下, 需要这样编译:</p>\n<p><code>g++ -o helloworld main.cpp cpp/gettop.cpp</code></p>\n<p>那么写道Makefile中是这个样子的:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">helloworld: main.cpp cpp/gettop.cpp</span><br><span class=\"line\">\tg++ -o helloworld main.cpp cpp/gettop.cpp</span><br></pre></td></tr></table></figure>\n\n<p>保存之后就可以直接输入make命令进行编译了。</p>\n<p>下面我们可以改进一下这个Makefile:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cc = g++</span><br><span class=\"line\">head = helloworld</span><br><span class=\"line\">obj = main.cpp cpp/gettop.cpp</span><br><span class=\"line\"></span><br><span class=\"line\">$(head): $(obj)</span><br><span class=\"line\">\t$(cc) -o $(head) $(obj)</span><br></pre></td></tr></table></figure>\n\n<p>这里我们定义了三个常量, 分别代表target, 编译命令以及所需文件。<br>但我们现在依然还是没能解决当我们只修改一个文件时就要全部重新编译的问题。而且如果我们修改的是calc.h文件，make就无法察觉到变化了（所以有必要为头文件专门设置一个常量，并将其加入到依赖关系表中）。下面，我们来想一想如何解决这个问题。考虑到在标准的编译过程中，源文件往往是先被编译成目标文件，然后再由目标文件连接成可执行文件的。我们可以利用这一点来调整一下这些文件之间的依赖关系：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cc = g++</span><br><span class=\"line\">head = helloworld</span><br><span class=\"line\">deps = h/gettop.h</span><br><span class=\"line\">obj = main.o gettop.o</span><br><span class=\"line\"></span><br><span class=\"line\">$(head): $(obj)</span><br><span class=\"line\">\t$(cc) -o $(head) $(obj)</span><br><span class=\"line\"></span><br><span class=\"line\">main.o main.cpp $(deps)</span><br><span class=\"line\">\t$(cc) -c main.cpp</span><br><span class=\"line\"></span><br><span class=\"line\">gettop.o cpp/gettop.cpp $(deps)</span><br><span class=\"line\">\t$(cc) -c cpp/gettop.cpp</span><br></pre></td></tr></table></figure>\n\n<p>这样一来，上面的问题显然是解决了，但同时我们又让代码变得非常啰嗦，啰嗦往往伴随着低效率，是不祥之兆。经过再度观察，我们发现所有.c都会被编译成相同名称的.o文件。我们可以根据该特点再对其做进一步的简化：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cc = g++</span><br><span class=\"line\">head = helloworld</span><br><span class=\"line\">deps = h/gettop.h</span><br><span class=\"line\">obj = main.o gettop.o</span><br><span class=\"line\"></span><br><span class=\"line\">$(head): $(obj)</span><br><span class=\"line\">\t$(cc) -o $(head) $(obj)</span><br><span class=\"line\"></span><br><span class=\"line\">%.o: %.cpp $(deps)</span><br><span class=\"line\">\t$(cc) -c $&lt; -o $@</span><br></pre></td></tr></table></figure>\n\n<p>在这里，我们用到了几个特殊的宏。首先是%.o:%.c，这是一个模式规则，表示所有的.o目标都依赖于与它同名的.c文件（当然还有deps中列出的头文件）。再来就是命令部分的$&lt;和$@，其中<code>$&lt;</code>代表的是依赖关系表中的第一项（如果我们想引用的是整个关系表，那么就应该使用$^），具体到我们这里就是%.c。而$@代表的是当前语句的目标，即%.o。这样一来，make命令就会自动将所有的.cpp源文件编译成同名的.o文件。不用我们一项一项去指定了。整个代码自然简洁了许多。</p>\n<p>自动变量的含义:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">自动变量</th>\n<th align=\"left\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">$@</td>\n<td align=\"left\">目标集合</td>\n</tr>\n<tr>\n<td align=\"left\">$%</td>\n<td align=\"left\">当目标是函数库文件时, 表示其中的目标文件名</td>\n</tr>\n<tr>\n<td align=\"left\">$&lt;</td>\n<td align=\"left\">第一个依赖目标. 如果依赖目标是多个, 逐个表示依赖目标</td>\n</tr>\n<tr>\n<td align=\"left\">$?</td>\n<td align=\"left\">比目标新的依赖目标的集合</td>\n</tr>\n<tr>\n<td align=\"left\">$^</td>\n<td align=\"left\">所有依赖目标的集合, 会去除重复的依赖目标</td>\n</tr>\n<tr>\n<td align=\"left\">$+</td>\n<td align=\"left\">所有依赖目标的集合, 不会去除重复的依赖目标</td>\n</tr>\n<tr>\n<td align=\"left\">$*</td>\n<td align=\"left\">这个是GNU make特有的, 其它的make不一定支持</td>\n</tr>\n</tbody></table>\n<p>其实, make自带了自动推导文件以及文件依赖关系后面的命令, 只要make看到一个<code>.o</code>文件, 那么他就会自动把同名的<code>.cpp</code>文件加到依赖关系中去, 并且<code>g++ -c</code>命令也会被推导出来, 那么就可以变成这样:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cc = g++</span><br><span class=\"line\">head = helloworld</span><br><span class=\"line\">deps = h/gettop.h</span><br><span class=\"line\">obj = main.o gettop.o</span><br><span class=\"line\"></span><br><span class=\"line\">$(head) : $(obj)</span><br><span class=\"line\">\t$(cc) -o $(head) $(obj)</span><br><span class=\"line\"></span><br><span class=\"line\">main.o : $(deps)</span><br><span class=\"line\">gettop.o : $(deps)</span><br></pre></td></tr></table></figure>\n\n<p>另外，如果我们需要往工程中添加一个.c或.h，可能同时就要再手动为obj常量再添加第一个.o文件，如果这列表很长，代码会非常难看，为此，我们需要用到Makefile中的函数，这里我们演示两个：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cc = g++</span><br><span class=\"line\">head = helloworld</span><br><span class=\"line\">deps = $(shell find ./ -name &quot;*.h&quot;)</span><br><span class=\"line\">src = $(shell find ./ -name &quot;*.c&quot;)</span><br><span class=\"line\">obj = $(src:%.c=%.o)</span><br><span class=\"line\"></span><br><span class=\"line\">$(head): $(obj)</span><br><span class=\"line\">\t$(cc) -o $(head) $(obj)</span><br><span class=\"line\"></span><br><span class=\"line\">%.o: %.c $(deps)</span><br><span class=\"line\">\t$(cc) -c $&lt; -o $@</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>其中，shell函数主要用于执行shell命令，具体到这里就是找出当前目录下所有的.c和.h文件。而$(src:%.c&#x3D;%.o)则是一个字符替换函数，它会将src所有的.c字串替换成.o，实际上就等于列出了所有.c文件要编译的结果。有了这两个设定，无论我们今后在该工程加入多少.c和.h文件，Makefile都能自动将其纳入到工程中来。</p>"},{"title":"C++ 编译器是如何工作的","date":"2019-10-18T20:51:46.000Z","_content":"\n# 需要搞明白的问题\n\nC++ 编译器都做了那些事情?\n\n# 知识点\n\n* 和 java 不同的一点是, java 重视文件, 文件名和文件目录都会影响到 java 项目的编译, 而c++不重视文件, 文件对于c++来说只是用来给编译器提供源码的一种方法。\n\n* cpp 文件可以互相 include。 如果 cpp 不互相 include 的话, 那么一个 cpp 就代表一个 translate unit; 如果互相 include, 那么就对于编译器来说就相当于是一个大的 cpp 文件, 编译之后也是众多有 include 关系的 cpp 编译成一个 translate unit。一个 translate unit 代表一个 obj 文件。\n\n<!--more-->\n\n* `.cpp` 后缀名只是默认约定的编译器处理文件的方式, 如果你不告诉编译器如何处理文件, 那么编译器就会按照默认的方式当作 c++ 文件处理; 但是你也可以告诉编译器, 指定一个后缀名, 将该后缀名的文件当作 c++ 文件来处理。\n\n* 编译好的 obj 文件为什么这么大?\n> 因为在预编译头那里引用了其他的头文件, 这意味着在编译之后, 这些头文件的内容会被复制到编译好的文件中。\n\n## 预处理相关的关键字\n\n### head file\n\n关于头文件: 当在使用 `#include \"*.h\"` 时, 编译器所做的事情是, 将该头文件中所有的内容复制替换到 `#inlclude \"*.h\"` 语句的位置。\n\n这里有一个例子:\n\n```c++\nint multiply(int a, int b)\n{\n\tint result = a * b;\n\treturn result;\n#include 'EndBrace.h'\n```\n\nEndBrace.h file:\n\n```h\n}\n```\n\n这里可以看到, `EndBrace.h` 文件中只有一个 `}` , 编译器在遇到 `#include` 时要做的事情就是找到该头文件并把内容复制到当前 include 的位置而已。\n\n### define\n\n关于 define: 当在使用 `#define` 时, 比如 `#define INTEGER int`, 那么编译器会搜索该 cpp 下所有 INTEGER 并替换成 int。\n\n### if 和 endif\n\n关于 if 和 endif: 如果符合 if 的条件, 则 if 块中所有的代码会被放到 obj 文件中, 如果不符合, 则不会。\n\n## linker\n\n链接, 将函数的声明和函数的定义找到并连接在一起。通常一个 C++ 工程由多个 obj 文件构成, 每一个 obj 是一个 translation unit, 而链接器的工作就是将所有 obj 中的符号和函数找到并连接到一起。\n\n# 总结\n\n最后来理一下思路, 编译器要做的事情有两件。第一件: compiling, 编译代码, 将代码编译成 `.obj` 文件, 之后就可以给 linker 用。compiling 期间, 首先预编译代码, 上面的知识点都是 preprocessor 语句, 预处理之后, 会进入 tokenizing (标记解释) 和 parsing (解析) 阶段; 第二件: 链接。\n","source":"_posts/note/blog_note/the_best_c_plus_plus_course/how-the-cpp-compiler-works.md","raw":"---\ntitle: C++ 编译器是如何工作的\ndate: 2019-10-19 04:51:46\ncategories:\n- 笔记\n- 最好的c++教程\ntags:\n- c++\n- 笔记\n- 最好的c++教程\n---\n\n# 需要搞明白的问题\n\nC++ 编译器都做了那些事情?\n\n# 知识点\n\n* 和 java 不同的一点是, java 重视文件, 文件名和文件目录都会影响到 java 项目的编译, 而c++不重视文件, 文件对于c++来说只是用来给编译器提供源码的一种方法。\n\n* cpp 文件可以互相 include。 如果 cpp 不互相 include 的话, 那么一个 cpp 就代表一个 translate unit; 如果互相 include, 那么就对于编译器来说就相当于是一个大的 cpp 文件, 编译之后也是众多有 include 关系的 cpp 编译成一个 translate unit。一个 translate unit 代表一个 obj 文件。\n\n<!--more-->\n\n* `.cpp` 后缀名只是默认约定的编译器处理文件的方式, 如果你不告诉编译器如何处理文件, 那么编译器就会按照默认的方式当作 c++ 文件处理; 但是你也可以告诉编译器, 指定一个后缀名, 将该后缀名的文件当作 c++ 文件来处理。\n\n* 编译好的 obj 文件为什么这么大?\n> 因为在预编译头那里引用了其他的头文件, 这意味着在编译之后, 这些头文件的内容会被复制到编译好的文件中。\n\n## 预处理相关的关键字\n\n### head file\n\n关于头文件: 当在使用 `#include \"*.h\"` 时, 编译器所做的事情是, 将该头文件中所有的内容复制替换到 `#inlclude \"*.h\"` 语句的位置。\n\n这里有一个例子:\n\n```c++\nint multiply(int a, int b)\n{\n\tint result = a * b;\n\treturn result;\n#include 'EndBrace.h'\n```\n\nEndBrace.h file:\n\n```h\n}\n```\n\n这里可以看到, `EndBrace.h` 文件中只有一个 `}` , 编译器在遇到 `#include` 时要做的事情就是找到该头文件并把内容复制到当前 include 的位置而已。\n\n### define\n\n关于 define: 当在使用 `#define` 时, 比如 `#define INTEGER int`, 那么编译器会搜索该 cpp 下所有 INTEGER 并替换成 int。\n\n### if 和 endif\n\n关于 if 和 endif: 如果符合 if 的条件, 则 if 块中所有的代码会被放到 obj 文件中, 如果不符合, 则不会。\n\n## linker\n\n链接, 将函数的声明和函数的定义找到并连接在一起。通常一个 C++ 工程由多个 obj 文件构成, 每一个 obj 是一个 translation unit, 而链接器的工作就是将所有 obj 中的符号和函数找到并连接到一起。\n\n# 总结\n\n最后来理一下思路, 编译器要做的事情有两件。第一件: compiling, 编译代码, 将代码编译成 `.obj` 文件, 之后就可以给 linker 用。compiling 期间, 首先预编译代码, 上面的知识点都是 preprocessor 语句, 预处理之后, 会进入 tokenizing (标记解释) 和 parsing (解析) 阶段; 第二件: 链接。\n","slug":"note/blog_note/the_best_c_plus_plus_course/how-the-cpp-compiler-works","published":1,"updated":"2022-10-07T13:29:08.881Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejvy00883vsb01r68rrg","content":"<h1 id=\"需要搞明白的问题\"><a href=\"#需要搞明白的问题\" class=\"headerlink\" title=\"需要搞明白的问题\"></a>需要搞明白的问题</h1><p>C++ 编译器都做了那些事情?</p>\n<h1 id=\"知识点\"><a href=\"#知识点\" class=\"headerlink\" title=\"知识点\"></a>知识点</h1><ul>\n<li><p>和 java 不同的一点是, java 重视文件, 文件名和文件目录都会影响到 java 项目的编译, 而c++不重视文件, 文件对于c++来说只是用来给编译器提供源码的一种方法。</p>\n</li>\n<li><p>cpp 文件可以互相 include。 如果 cpp 不互相 include 的话, 那么一个 cpp 就代表一个 translate unit; 如果互相 include, 那么就对于编译器来说就相当于是一个大的 cpp 文件, 编译之后也是众多有 include 关系的 cpp 编译成一个 translate unit。一个 translate unit 代表一个 obj 文件。</p>\n</li>\n</ul>\n<span id=\"more\"></span>\n\n<ul>\n<li><p><code>.cpp</code> 后缀名只是默认约定的编译器处理文件的方式, 如果你不告诉编译器如何处理文件, 那么编译器就会按照默认的方式当作 c++ 文件处理; 但是你也可以告诉编译器, 指定一个后缀名, 将该后缀名的文件当作 c++ 文件来处理。</p>\n</li>\n<li><p>编译好的 obj 文件为什么这么大?</p>\n<blockquote>\n<p>因为在预编译头那里引用了其他的头文件, 这意味着在编译之后, 这些头文件的内容会被复制到编译好的文件中。</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"预处理相关的关键字\"><a href=\"#预处理相关的关键字\" class=\"headerlink\" title=\"预处理相关的关键字\"></a>预处理相关的关键字</h2><h3 id=\"head-file\"><a href=\"#head-file\" class=\"headerlink\" title=\"head file\"></a>head file</h3><p>关于头文件: 当在使用 <code>#include &quot;*.h&quot;</code> 时, 编译器所做的事情是, 将该头文件中所有的内容复制替换到 <code>#inlclude &quot;*.h&quot;</code> 语句的位置。</p>\n<p>这里有一个例子:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">multiply</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> result = a * b;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&#x27;EndBrace.h&#x27;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>EndBrace.h file:</p>\n<figure class=\"highlight h\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里可以看到, <code>EndBrace.h</code> 文件中只有一个 <code>&#125;</code> , 编译器在遇到 <code>#include</code> 时要做的事情就是找到该头文件并把内容复制到当前 include 的位置而已。</p>\n<h3 id=\"define\"><a href=\"#define\" class=\"headerlink\" title=\"define\"></a>define</h3><p>关于 define: 当在使用 <code>#define</code> 时, 比如 <code>#define INTEGER int</code>, 那么编译器会搜索该 cpp 下所有 INTEGER 并替换成 int。</p>\n<h3 id=\"if-和-endif\"><a href=\"#if-和-endif\" class=\"headerlink\" title=\"if 和 endif\"></a>if 和 endif</h3><p>关于 if 和 endif: 如果符合 if 的条件, 则 if 块中所有的代码会被放到 obj 文件中, 如果不符合, 则不会。</p>\n<h2 id=\"linker\"><a href=\"#linker\" class=\"headerlink\" title=\"linker\"></a>linker</h2><p>链接, 将函数的声明和函数的定义找到并连接在一起。通常一个 C++ 工程由多个 obj 文件构成, 每一个 obj 是一个 translation unit, 而链接器的工作就是将所有 obj 中的符号和函数找到并连接到一起。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>最后来理一下思路, 编译器要做的事情有两件。第一件: compiling, 编译代码, 将代码编译成 <code>.obj</code> 文件, 之后就可以给 linker 用。compiling 期间, 首先预编译代码, 上面的知识点都是 preprocessor 语句, 预处理之后, 会进入 tokenizing (标记解释) 和 parsing (解析) 阶段; 第二件: 链接。</p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"需要搞明白的问题\"><a href=\"#需要搞明白的问题\" class=\"headerlink\" title=\"需要搞明白的问题\"></a>需要搞明白的问题</h1><p>C++ 编译器都做了那些事情?</p>\n<h1 id=\"知识点\"><a href=\"#知识点\" class=\"headerlink\" title=\"知识点\"></a>知识点</h1><ul>\n<li><p>和 java 不同的一点是, java 重视文件, 文件名和文件目录都会影响到 java 项目的编译, 而c++不重视文件, 文件对于c++来说只是用来给编译器提供源码的一种方法。</p>\n</li>\n<li><p>cpp 文件可以互相 include。 如果 cpp 不互相 include 的话, 那么一个 cpp 就代表一个 translate unit; 如果互相 include, 那么就对于编译器来说就相当于是一个大的 cpp 文件, 编译之后也是众多有 include 关系的 cpp 编译成一个 translate unit。一个 translate unit 代表一个 obj 文件。</p>\n</li>\n</ul>","more":"<ul>\n<li><p><code>.cpp</code> 后缀名只是默认约定的编译器处理文件的方式, 如果你不告诉编译器如何处理文件, 那么编译器就会按照默认的方式当作 c++ 文件处理; 但是你也可以告诉编译器, 指定一个后缀名, 将该后缀名的文件当作 c++ 文件来处理。</p>\n</li>\n<li><p>编译好的 obj 文件为什么这么大?</p>\n<blockquote>\n<p>因为在预编译头那里引用了其他的头文件, 这意味着在编译之后, 这些头文件的内容会被复制到编译好的文件中。</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"预处理相关的关键字\"><a href=\"#预处理相关的关键字\" class=\"headerlink\" title=\"预处理相关的关键字\"></a>预处理相关的关键字</h2><h3 id=\"head-file\"><a href=\"#head-file\" class=\"headerlink\" title=\"head file\"></a>head file</h3><p>关于头文件: 当在使用 <code>#include &quot;*.h&quot;</code> 时, 编译器所做的事情是, 将该头文件中所有的内容复制替换到 <code>#inlclude &quot;*.h&quot;</code> 语句的位置。</p>\n<p>这里有一个例子:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">multiply</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> result = a * b;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&#x27;EndBrace.h&#x27;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>EndBrace.h file:</p>\n<figure class=\"highlight h\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里可以看到, <code>EndBrace.h</code> 文件中只有一个 <code>&#125;</code> , 编译器在遇到 <code>#include</code> 时要做的事情就是找到该头文件并把内容复制到当前 include 的位置而已。</p>\n<h3 id=\"define\"><a href=\"#define\" class=\"headerlink\" title=\"define\"></a>define</h3><p>关于 define: 当在使用 <code>#define</code> 时, 比如 <code>#define INTEGER int</code>, 那么编译器会搜索该 cpp 下所有 INTEGER 并替换成 int。</p>\n<h3 id=\"if-和-endif\"><a href=\"#if-和-endif\" class=\"headerlink\" title=\"if 和 endif\"></a>if 和 endif</h3><p>关于 if 和 endif: 如果符合 if 的条件, 则 if 块中所有的代码会被放到 obj 文件中, 如果不符合, 则不会。</p>\n<h2 id=\"linker\"><a href=\"#linker\" class=\"headerlink\" title=\"linker\"></a>linker</h2><p>链接, 将函数的声明和函数的定义找到并连接在一起。通常一个 C++ 工程由多个 obj 文件构成, 每一个 obj 是一个 translation unit, 而链接器的工作就是将所有 obj 中的符号和函数找到并连接到一起。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>最后来理一下思路, 编译器要做的事情有两件。第一件: compiling, 编译代码, 将代码编译成 <code>.obj</code> 文件, 之后就可以给 linker 用。compiling 期间, 首先预编译代码, 上面的知识点都是 preprocessor 语句, 预处理之后, 会进入 tokenizing (标记解释) 和 parsing (解析) 阶段; 第二件: 链接。</p>"},{"title":"快乐的Linux命令行笔记-vim入门","date":"2019-02-08T14:15:25.000Z","_content":"\n[第一天的笔记-基本的命令和使用方法](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-1Day.html)\n[第二天的笔记-操作文件](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-2Day.html)\n[第三天的笔记-查阅命令文档并创建命令别名](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-3Day.html)\n[第四天的笔记-重定向标准输入和输出以及处理查询结果](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-4Day.html)\n[第五天的笔记-命令的展开](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-5Day.html)\n[第六天的笔记-快捷键](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-6Day.html)\n[第七天的笔记-文件权限](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-7Day.html)\n[第八天的笔记-进程](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-8Day.html)\n[第九天的笔记-修改shell环境](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-9Day.html)\n\n# 总结\n\n今天主要学习了vim的一些快捷操作。\n<!--more-->\n# vim\n\nvim编译器的一些快捷键\n\n| 快捷键 | 意义 |\n| :--- | :---- |\n|:q | 退出 |\n| :q! | 强制退出 |\n| :i | 进入输入模式 |\n| : w | 保存 |\n\n<br/>\n\n## 在非编辑模式下的快捷键\n\n| 快捷键 | 意义 |\n| :---- | :--- |\n| l / 右箭头 | 向右移动一格 |\n| h / 左箭头 | 向左移动一格 |\n| j / 上箭头 | 向上移动一格 |\n| k / 下箭头 | 向下移动一格 |\n| 0 (零) | 移动到行首 |\n| ^ | 移动到当前行的第一个非空字符|\n| $ | 移动到当前行的末尾 |\n| w | 移动到下一个单词或标点符号的开头 |\n| W | 移动到下一个单词的开头, 忽略标点符号 |\n| b | 移动到上一个单词或标点符号的开头 |\n| B | 移动到上一个单词的开头, 忽略标点符号 |\n| ctrl - f / pagedown | 向下翻一页 |\n| ctrl -b / pageup | 向上翻一页 |\n| numberG | 移动到指定行, 例如: 2G : 移动到第二行\n| G | 移动到文件末尾 |\n\n> 不是只有`G`命令支持前面加数字, `5j` 会将光标向下移动5行\n\n<br/>\n\n## 进入编辑模式的一些快捷键\n\n| 快捷键 | 意义 |\n| :---- | :--- |\n| a | 光标向后一格进入编辑模式 |\n| A | 在行尾进入编辑模式 |\n| o | 在当前行的下一行进入编辑模式 |\n| O | 在当前行的下一行进入编辑模式 |\n| u | 撤销更改 |\n\n<br/>\n\n## 删除文本的一些快捷键\n\n| 快捷键 | 意义 |\n| :---- | :--- |\n| x | 当前字符 |\n| 3x | 当前字符以及后面两个字符 |\n| dd | 剪切当前行 |\n| 5dd | 剪切从当前行以及随后的四行文本 |\n| dW | 剪切从光标开始到下一个单词的开头 |\n| d$ | 剪切从光标开始到当前行的结尾 |\n| d0 | 剪切从光标开始到当前行的行首 |\n| d^ | 剪切从光标开始到当前行的第一个非空字符 |\n| dG | 剪切从当前行到文件的末尾 |\n| d20G | 剪切从当前行到文件的第20行 |\n\n<br/>\n\n## 剪切, 复制和粘贴\n\n| 命令 | 意义 |\n| :---- | :--- |\n| yy | 复制当前行 |\n| 5yy | 复制当前行以及随后的4行文本 |\n| yW | 复制从当前光标位置到下一个单词的开头 |\n| y$ | 复制从当前光标位置到当前行的末尾 |\n| y0(零) | 复制从当前光标到当前行首 |\n| y^ | 复制从当前光标位置到文本行的第一个非空字符 |\n| yG | 复制从当前光标位置到文件末尾 |\n| y20G | 从当前行到文件的20行 |\n| p | 粘贴到当前光标位置 |\n| P | 粘贴到当前行之上 |\n\n<br/>\n\n## 连接行于行\n\n`J` 连接当前行和下一行为一行\n\n<br/>\n\n## 查找和替换\n\n> 在当前行中进行查找\n\n`fsearch key` 例如: `fa` 会搜索当前行从光标位置开始的字母a\n\n> 查找整个文件\n\n输入 `/` , 接着输入要查找的字符并按下回车, 使用 `n` 命令来查找下一个匹配的字符\n\n\n```shell\n:%s/The/the/g\n```\n* %s 代表需要操作的范围是从第一行到最后一行, 如果是第m行到第n行则可以这样: m,n\n* /The 代表需要被替换的字符\n* /the 代表替换的字符\n* /g 代表全局搜索\n\n```shell\n:%s/the/The/gc\n```\n\n该命令和上面意义一样, 只是每次替换之前, 都会先进行确认, 确认的方式包括:\n\n| 按键 | 行为 |\n| :---- | :--- |\n| y | 执行替换操作 |\n| n | 跳过这个匹配的实例 |\n| a | 对当前及所有以后匹配的字符串都进行匹配操作 |\n| q / esc | 退出替换操作 |\n| l | 执行这次替换并退出 |\n| ctrl-e, ctrl-y | 向上滚动, 向下滚动, 查看当前匹配字符的上下文 |\n\n<br/>\n\n## 同时编辑多个文件\n\n```shell\nvim file1.txt file2.txt ...\n```\n\n* `:n` 切换到下一个文件\n* `:N` 切换到上一个文件\n\n<br/>\n\n**如果当前文件修改后没有保存, 则不能切换, 可以先保存, 再切换, 也可以直接 `!n` 强制切换, 不保存**\n\n\n```shell\n:buffers\n```\n\n显示所有编辑的文件列表, 也可以直接切换第n个文件: `:buffer n`\n\n<br/>\n\n## 在vim编辑器中打开另一个文件\n\n```shell\n:e file2.txt\n```\n\n如果使用 `:e` 命令打开的文件, 则不能使用 `:n` 和 `:N` 来切换文件, 只能通过 `:buffer` 命令来切换\n\n<br/>\n\n## 将指定文件插入到另一个文件中\n\n在已经使用vim打开一个文件中的情况下:\n\n```shell\n:r file2.txt\n```\n\n将file2.txt的所有内容插入到光标所在位置。\n\n<br/>\n\n## 保存文件\n\n`ZZ` 注意是大写, 会保存并退出当前文件\n\n```shell\n:w other.txt\n```\n\n将当前文件保存为other.txt文件, 但是编辑则还是编辑当前文件。\n","source":"_posts/note/read_note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-10Day.md","raw":"---\ntitle: 快乐的Linux命令行笔记-vim入门\ndate: 2019-02-08 22:15:25\ncategories:\n- 笔记\n- 读书笔记\n- 快乐的Linux命令行\ntags:\n- 笔记\n- 快乐的Linux命令行\n- linux\n---\n\n[第一天的笔记-基本的命令和使用方法](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-1Day.html)\n[第二天的笔记-操作文件](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-2Day.html)\n[第三天的笔记-查阅命令文档并创建命令别名](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-3Day.html)\n[第四天的笔记-重定向标准输入和输出以及处理查询结果](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-4Day.html)\n[第五天的笔记-命令的展开](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-5Day.html)\n[第六天的笔记-快捷键](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-6Day.html)\n[第七天的笔记-文件权限](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-7Day.html)\n[第八天的笔记-进程](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-8Day.html)\n[第九天的笔记-修改shell环境](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-9Day.html)\n\n# 总结\n\n今天主要学习了vim的一些快捷操作。\n<!--more-->\n# vim\n\nvim编译器的一些快捷键\n\n| 快捷键 | 意义 |\n| :--- | :---- |\n|:q | 退出 |\n| :q! | 强制退出 |\n| :i | 进入输入模式 |\n| : w | 保存 |\n\n<br/>\n\n## 在非编辑模式下的快捷键\n\n| 快捷键 | 意义 |\n| :---- | :--- |\n| l / 右箭头 | 向右移动一格 |\n| h / 左箭头 | 向左移动一格 |\n| j / 上箭头 | 向上移动一格 |\n| k / 下箭头 | 向下移动一格 |\n| 0 (零) | 移动到行首 |\n| ^ | 移动到当前行的第一个非空字符|\n| $ | 移动到当前行的末尾 |\n| w | 移动到下一个单词或标点符号的开头 |\n| W | 移动到下一个单词的开头, 忽略标点符号 |\n| b | 移动到上一个单词或标点符号的开头 |\n| B | 移动到上一个单词的开头, 忽略标点符号 |\n| ctrl - f / pagedown | 向下翻一页 |\n| ctrl -b / pageup | 向上翻一页 |\n| numberG | 移动到指定行, 例如: 2G : 移动到第二行\n| G | 移动到文件末尾 |\n\n> 不是只有`G`命令支持前面加数字, `5j` 会将光标向下移动5行\n\n<br/>\n\n## 进入编辑模式的一些快捷键\n\n| 快捷键 | 意义 |\n| :---- | :--- |\n| a | 光标向后一格进入编辑模式 |\n| A | 在行尾进入编辑模式 |\n| o | 在当前行的下一行进入编辑模式 |\n| O | 在当前行的下一行进入编辑模式 |\n| u | 撤销更改 |\n\n<br/>\n\n## 删除文本的一些快捷键\n\n| 快捷键 | 意义 |\n| :---- | :--- |\n| x | 当前字符 |\n| 3x | 当前字符以及后面两个字符 |\n| dd | 剪切当前行 |\n| 5dd | 剪切从当前行以及随后的四行文本 |\n| dW | 剪切从光标开始到下一个单词的开头 |\n| d$ | 剪切从光标开始到当前行的结尾 |\n| d0 | 剪切从光标开始到当前行的行首 |\n| d^ | 剪切从光标开始到当前行的第一个非空字符 |\n| dG | 剪切从当前行到文件的末尾 |\n| d20G | 剪切从当前行到文件的第20行 |\n\n<br/>\n\n## 剪切, 复制和粘贴\n\n| 命令 | 意义 |\n| :---- | :--- |\n| yy | 复制当前行 |\n| 5yy | 复制当前行以及随后的4行文本 |\n| yW | 复制从当前光标位置到下一个单词的开头 |\n| y$ | 复制从当前光标位置到当前行的末尾 |\n| y0(零) | 复制从当前光标到当前行首 |\n| y^ | 复制从当前光标位置到文本行的第一个非空字符 |\n| yG | 复制从当前光标位置到文件末尾 |\n| y20G | 从当前行到文件的20行 |\n| p | 粘贴到当前光标位置 |\n| P | 粘贴到当前行之上 |\n\n<br/>\n\n## 连接行于行\n\n`J` 连接当前行和下一行为一行\n\n<br/>\n\n## 查找和替换\n\n> 在当前行中进行查找\n\n`fsearch key` 例如: `fa` 会搜索当前行从光标位置开始的字母a\n\n> 查找整个文件\n\n输入 `/` , 接着输入要查找的字符并按下回车, 使用 `n` 命令来查找下一个匹配的字符\n\n\n```shell\n:%s/The/the/g\n```\n* %s 代表需要操作的范围是从第一行到最后一行, 如果是第m行到第n行则可以这样: m,n\n* /The 代表需要被替换的字符\n* /the 代表替换的字符\n* /g 代表全局搜索\n\n```shell\n:%s/the/The/gc\n```\n\n该命令和上面意义一样, 只是每次替换之前, 都会先进行确认, 确认的方式包括:\n\n| 按键 | 行为 |\n| :---- | :--- |\n| y | 执行替换操作 |\n| n | 跳过这个匹配的实例 |\n| a | 对当前及所有以后匹配的字符串都进行匹配操作 |\n| q / esc | 退出替换操作 |\n| l | 执行这次替换并退出 |\n| ctrl-e, ctrl-y | 向上滚动, 向下滚动, 查看当前匹配字符的上下文 |\n\n<br/>\n\n## 同时编辑多个文件\n\n```shell\nvim file1.txt file2.txt ...\n```\n\n* `:n` 切换到下一个文件\n* `:N` 切换到上一个文件\n\n<br/>\n\n**如果当前文件修改后没有保存, 则不能切换, 可以先保存, 再切换, 也可以直接 `!n` 强制切换, 不保存**\n\n\n```shell\n:buffers\n```\n\n显示所有编辑的文件列表, 也可以直接切换第n个文件: `:buffer n`\n\n<br/>\n\n## 在vim编辑器中打开另一个文件\n\n```shell\n:e file2.txt\n```\n\n如果使用 `:e` 命令打开的文件, 则不能使用 `:n` 和 `:N` 来切换文件, 只能通过 `:buffer` 命令来切换\n\n<br/>\n\n## 将指定文件插入到另一个文件中\n\n在已经使用vim打开一个文件中的情况下:\n\n```shell\n:r file2.txt\n```\n\n将file2.txt的所有内容插入到光标所在位置。\n\n<br/>\n\n## 保存文件\n\n`ZZ` 注意是大写, 会保存并退出当前文件\n\n```shell\n:w other.txt\n```\n\n将当前文件保存为other.txt文件, 但是编辑则还是编辑当前文件。\n","slug":"note/read_note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-10Day","published":1,"updated":"2022-10-07T13:03:38.509Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejw2008b3vsb1i35h1gc","content":"<p><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-1Day.html\">第一天的笔记-基本的命令和使用方法</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-2Day.html\">第二天的笔记-操作文件</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-3Day.html\">第三天的笔记-查阅命令文档并创建命令别名</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-4Day.html\">第四天的笔记-重定向标准输入和输出以及处理查询结果</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-5Day.html\">第五天的笔记-命令的展开</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-6Day.html\">第六天的笔记-快捷键</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-7Day.html\">第七天的笔记-文件权限</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-8Day.html\">第八天的笔记-进程</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-9Day.html\">第九天的笔记-修改shell环境</a></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>今天主要学习了vim的一些快捷操作。</p>\n<span id=\"more\"></span>\n<h1 id=\"vim\"><a href=\"#vim\" class=\"headerlink\" title=\"vim\"></a>vim</h1><p>vim编译器的一些快捷键</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">快捷键</th>\n<th align=\"left\">意义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">:q</td>\n<td align=\"left\">退出</td>\n</tr>\n<tr>\n<td align=\"left\">:q!</td>\n<td align=\"left\">强制退出</td>\n</tr>\n<tr>\n<td align=\"left\">:i</td>\n<td align=\"left\">进入输入模式</td>\n</tr>\n<tr>\n<td align=\"left\">: w</td>\n<td align=\"left\">保存</td>\n</tr>\n</tbody></table>\n<br/>\n\n<h2 id=\"在非编辑模式下的快捷键\"><a href=\"#在非编辑模式下的快捷键\" class=\"headerlink\" title=\"在非编辑模式下的快捷键\"></a>在非编辑模式下的快捷键</h2><table>\n<thead>\n<tr>\n<th align=\"left\">快捷键</th>\n<th align=\"left\">意义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">l &#x2F; 右箭头</td>\n<td align=\"left\">向右移动一格</td>\n</tr>\n<tr>\n<td align=\"left\">h &#x2F; 左箭头</td>\n<td align=\"left\">向左移动一格</td>\n</tr>\n<tr>\n<td align=\"left\">j &#x2F; 上箭头</td>\n<td align=\"left\">向上移动一格</td>\n</tr>\n<tr>\n<td align=\"left\">k &#x2F; 下箭头</td>\n<td align=\"left\">向下移动一格</td>\n</tr>\n<tr>\n<td align=\"left\">0 (零)</td>\n<td align=\"left\">移动到行首</td>\n</tr>\n<tr>\n<td align=\"left\">^</td>\n<td align=\"left\">移动到当前行的第一个非空字符</td>\n</tr>\n<tr>\n<td align=\"left\">$</td>\n<td align=\"left\">移动到当前行的末尾</td>\n</tr>\n<tr>\n<td align=\"left\">w</td>\n<td align=\"left\">移动到下一个单词或标点符号的开头</td>\n</tr>\n<tr>\n<td align=\"left\">W</td>\n<td align=\"left\">移动到下一个单词的开头, 忽略标点符号</td>\n</tr>\n<tr>\n<td align=\"left\">b</td>\n<td align=\"left\">移动到上一个单词或标点符号的开头</td>\n</tr>\n<tr>\n<td align=\"left\">B</td>\n<td align=\"left\">移动到上一个单词的开头, 忽略标点符号</td>\n</tr>\n<tr>\n<td align=\"left\">ctrl - f &#x2F; pagedown</td>\n<td align=\"left\">向下翻一页</td>\n</tr>\n<tr>\n<td align=\"left\">ctrl -b &#x2F; pageup</td>\n<td align=\"left\">向上翻一页</td>\n</tr>\n<tr>\n<td align=\"left\">numberG</td>\n<td align=\"left\">移动到指定行, 例如: 2G : 移动到第二行</td>\n</tr>\n<tr>\n<td align=\"left\">G</td>\n<td align=\"left\">移动到文件末尾</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>不是只有<code>G</code>命令支持前面加数字, <code>5j</code> 会将光标向下移动5行</p>\n</blockquote>\n<br/>\n\n<h2 id=\"进入编辑模式的一些快捷键\"><a href=\"#进入编辑模式的一些快捷键\" class=\"headerlink\" title=\"进入编辑模式的一些快捷键\"></a>进入编辑模式的一些快捷键</h2><table>\n<thead>\n<tr>\n<th align=\"left\">快捷键</th>\n<th align=\"left\">意义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">a</td>\n<td align=\"left\">光标向后一格进入编辑模式</td>\n</tr>\n<tr>\n<td align=\"left\">A</td>\n<td align=\"left\">在行尾进入编辑模式</td>\n</tr>\n<tr>\n<td align=\"left\">o</td>\n<td align=\"left\">在当前行的下一行进入编辑模式</td>\n</tr>\n<tr>\n<td align=\"left\">O</td>\n<td align=\"left\">在当前行的下一行进入编辑模式</td>\n</tr>\n<tr>\n<td align=\"left\">u</td>\n<td align=\"left\">撤销更改</td>\n</tr>\n</tbody></table>\n<br/>\n\n<h2 id=\"删除文本的一些快捷键\"><a href=\"#删除文本的一些快捷键\" class=\"headerlink\" title=\"删除文本的一些快捷键\"></a>删除文本的一些快捷键</h2><table>\n<thead>\n<tr>\n<th align=\"left\">快捷键</th>\n<th align=\"left\">意义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">x</td>\n<td align=\"left\">当前字符</td>\n</tr>\n<tr>\n<td align=\"left\">3x</td>\n<td align=\"left\">当前字符以及后面两个字符</td>\n</tr>\n<tr>\n<td align=\"left\">dd</td>\n<td align=\"left\">剪切当前行</td>\n</tr>\n<tr>\n<td align=\"left\">5dd</td>\n<td align=\"left\">剪切从当前行以及随后的四行文本</td>\n</tr>\n<tr>\n<td align=\"left\">dW</td>\n<td align=\"left\">剪切从光标开始到下一个单词的开头</td>\n</tr>\n<tr>\n<td align=\"left\">d$</td>\n<td align=\"left\">剪切从光标开始到当前行的结尾</td>\n</tr>\n<tr>\n<td align=\"left\">d0</td>\n<td align=\"left\">剪切从光标开始到当前行的行首</td>\n</tr>\n<tr>\n<td align=\"left\">d^</td>\n<td align=\"left\">剪切从光标开始到当前行的第一个非空字符</td>\n</tr>\n<tr>\n<td align=\"left\">dG</td>\n<td align=\"left\">剪切从当前行到文件的末尾</td>\n</tr>\n<tr>\n<td align=\"left\">d20G</td>\n<td align=\"left\">剪切从当前行到文件的第20行</td>\n</tr>\n</tbody></table>\n<br/>\n\n<h2 id=\"剪切-复制和粘贴\"><a href=\"#剪切-复制和粘贴\" class=\"headerlink\" title=\"剪切, 复制和粘贴\"></a>剪切, 复制和粘贴</h2><table>\n<thead>\n<tr>\n<th align=\"left\">命令</th>\n<th align=\"left\">意义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">yy</td>\n<td align=\"left\">复制当前行</td>\n</tr>\n<tr>\n<td align=\"left\">5yy</td>\n<td align=\"left\">复制当前行以及随后的4行文本</td>\n</tr>\n<tr>\n<td align=\"left\">yW</td>\n<td align=\"left\">复制从当前光标位置到下一个单词的开头</td>\n</tr>\n<tr>\n<td align=\"left\">y$</td>\n<td align=\"left\">复制从当前光标位置到当前行的末尾</td>\n</tr>\n<tr>\n<td align=\"left\">y0(零)</td>\n<td align=\"left\">复制从当前光标到当前行首</td>\n</tr>\n<tr>\n<td align=\"left\">y^</td>\n<td align=\"left\">复制从当前光标位置到文本行的第一个非空字符</td>\n</tr>\n<tr>\n<td align=\"left\">yG</td>\n<td align=\"left\">复制从当前光标位置到文件末尾</td>\n</tr>\n<tr>\n<td align=\"left\">y20G</td>\n<td align=\"left\">从当前行到文件的20行</td>\n</tr>\n<tr>\n<td align=\"left\">p</td>\n<td align=\"left\">粘贴到当前光标位置</td>\n</tr>\n<tr>\n<td align=\"left\">P</td>\n<td align=\"left\">粘贴到当前行之上</td>\n</tr>\n</tbody></table>\n<br/>\n\n<h2 id=\"连接行于行\"><a href=\"#连接行于行\" class=\"headerlink\" title=\"连接行于行\"></a>连接行于行</h2><p><code>J</code> 连接当前行和下一行为一行</p>\n<br/>\n\n<h2 id=\"查找和替换\"><a href=\"#查找和替换\" class=\"headerlink\" title=\"查找和替换\"></a>查找和替换</h2><blockquote>\n<p>在当前行中进行查找</p>\n</blockquote>\n<p><code>fsearch key</code> 例如: <code>fa</code> 会搜索当前行从光标位置开始的字母a</p>\n<blockquote>\n<p>查找整个文件</p>\n</blockquote>\n<p>输入 <code>/</code> , 接着输入要查找的字符并按下回车, 使用 <code>n</code> 命令来查找下一个匹配的字符</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:%s/The/the/g</span><br></pre></td></tr></table></figure>\n<ul>\n<li>%s 代表需要操作的范围是从第一行到最后一行, 如果是第m行到第n行则可以这样: m,n</li>\n<li>&#x2F;The 代表需要被替换的字符</li>\n<li>&#x2F;the 代表替换的字符</li>\n<li>&#x2F;g 代表全局搜索</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:%s/the/The/gc</span><br></pre></td></tr></table></figure>\n\n<p>该命令和上面意义一样, 只是每次替换之前, 都会先进行确认, 确认的方式包括:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">按键</th>\n<th align=\"left\">行为</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">y</td>\n<td align=\"left\">执行替换操作</td>\n</tr>\n<tr>\n<td align=\"left\">n</td>\n<td align=\"left\">跳过这个匹配的实例</td>\n</tr>\n<tr>\n<td align=\"left\">a</td>\n<td align=\"left\">对当前及所有以后匹配的字符串都进行匹配操作</td>\n</tr>\n<tr>\n<td align=\"left\">q &#x2F; esc</td>\n<td align=\"left\">退出替换操作</td>\n</tr>\n<tr>\n<td align=\"left\">l</td>\n<td align=\"left\">执行这次替换并退出</td>\n</tr>\n<tr>\n<td align=\"left\">ctrl-e, ctrl-y</td>\n<td align=\"left\">向上滚动, 向下滚动, 查看当前匹配字符的上下文</td>\n</tr>\n</tbody></table>\n<br/>\n\n<h2 id=\"同时编辑多个文件\"><a href=\"#同时编辑多个文件\" class=\"headerlink\" title=\"同时编辑多个文件\"></a>同时编辑多个文件</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim file1.txt file2.txt ...</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>:n</code> 切换到下一个文件</li>\n<li><code>:N</code> 切换到上一个文件</li>\n</ul>\n<br/>\n\n<p><strong>如果当前文件修改后没有保存, 则不能切换, 可以先保存, 再切换, 也可以直接 <code>!n</code> 强制切换, 不保存</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:buffers</span><br></pre></td></tr></table></figure>\n\n<p>显示所有编辑的文件列表, 也可以直接切换第n个文件: <code>:buffer n</code></p>\n<br/>\n\n<h2 id=\"在vim编辑器中打开另一个文件\"><a href=\"#在vim编辑器中打开另一个文件\" class=\"headerlink\" title=\"在vim编辑器中打开另一个文件\"></a>在vim编辑器中打开另一个文件</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:e file2.txt</span><br></pre></td></tr></table></figure>\n\n<p>如果使用 <code>:e</code> 命令打开的文件, 则不能使用 <code>:n</code> 和 <code>:N</code> 来切换文件, 只能通过 <code>:buffer</code> 命令来切换</p>\n<br/>\n\n<h2 id=\"将指定文件插入到另一个文件中\"><a href=\"#将指定文件插入到另一个文件中\" class=\"headerlink\" title=\"将指定文件插入到另一个文件中\"></a>将指定文件插入到另一个文件中</h2><p>在已经使用vim打开一个文件中的情况下:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:r file2.txt</span><br></pre></td></tr></table></figure>\n\n<p>将file2.txt的所有内容插入到光标所在位置。</p>\n<br/>\n\n<h2 id=\"保存文件\"><a href=\"#保存文件\" class=\"headerlink\" title=\"保存文件\"></a>保存文件</h2><p><code>ZZ</code> 注意是大写, 会保存并退出当前文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:w other.txt</span><br></pre></td></tr></table></figure>\n\n<p>将当前文件保存为other.txt文件, 但是编辑则还是编辑当前文件。</p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<p><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-1Day.html\">第一天的笔记-基本的命令和使用方法</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-2Day.html\">第二天的笔记-操作文件</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-3Day.html\">第三天的笔记-查阅命令文档并创建命令别名</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-4Day.html\">第四天的笔记-重定向标准输入和输出以及处理查询结果</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-5Day.html\">第五天的笔记-命令的展开</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-6Day.html\">第六天的笔记-快捷键</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-7Day.html\">第七天的笔记-文件权限</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-8Day.html\">第八天的笔记-进程</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-9Day.html\">第九天的笔记-修改shell环境</a></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>今天主要学习了vim的一些快捷操作。</p>","more":"<h1 id=\"vim\"><a href=\"#vim\" class=\"headerlink\" title=\"vim\"></a>vim</h1><p>vim编译器的一些快捷键</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">快捷键</th>\n<th align=\"left\">意义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">:q</td>\n<td align=\"left\">退出</td>\n</tr>\n<tr>\n<td align=\"left\">:q!</td>\n<td align=\"left\">强制退出</td>\n</tr>\n<tr>\n<td align=\"left\">:i</td>\n<td align=\"left\">进入输入模式</td>\n</tr>\n<tr>\n<td align=\"left\">: w</td>\n<td align=\"left\">保存</td>\n</tr>\n</tbody></table>\n<br/>\n\n<h2 id=\"在非编辑模式下的快捷键\"><a href=\"#在非编辑模式下的快捷键\" class=\"headerlink\" title=\"在非编辑模式下的快捷键\"></a>在非编辑模式下的快捷键</h2><table>\n<thead>\n<tr>\n<th align=\"left\">快捷键</th>\n<th align=\"left\">意义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">l &#x2F; 右箭头</td>\n<td align=\"left\">向右移动一格</td>\n</tr>\n<tr>\n<td align=\"left\">h &#x2F; 左箭头</td>\n<td align=\"left\">向左移动一格</td>\n</tr>\n<tr>\n<td align=\"left\">j &#x2F; 上箭头</td>\n<td align=\"left\">向上移动一格</td>\n</tr>\n<tr>\n<td align=\"left\">k &#x2F; 下箭头</td>\n<td align=\"left\">向下移动一格</td>\n</tr>\n<tr>\n<td align=\"left\">0 (零)</td>\n<td align=\"left\">移动到行首</td>\n</tr>\n<tr>\n<td align=\"left\">^</td>\n<td align=\"left\">移动到当前行的第一个非空字符</td>\n</tr>\n<tr>\n<td align=\"left\">$</td>\n<td align=\"left\">移动到当前行的末尾</td>\n</tr>\n<tr>\n<td align=\"left\">w</td>\n<td align=\"left\">移动到下一个单词或标点符号的开头</td>\n</tr>\n<tr>\n<td align=\"left\">W</td>\n<td align=\"left\">移动到下一个单词的开头, 忽略标点符号</td>\n</tr>\n<tr>\n<td align=\"left\">b</td>\n<td align=\"left\">移动到上一个单词或标点符号的开头</td>\n</tr>\n<tr>\n<td align=\"left\">B</td>\n<td align=\"left\">移动到上一个单词的开头, 忽略标点符号</td>\n</tr>\n<tr>\n<td align=\"left\">ctrl - f &#x2F; pagedown</td>\n<td align=\"left\">向下翻一页</td>\n</tr>\n<tr>\n<td align=\"left\">ctrl -b &#x2F; pageup</td>\n<td align=\"left\">向上翻一页</td>\n</tr>\n<tr>\n<td align=\"left\">numberG</td>\n<td align=\"left\">移动到指定行, 例如: 2G : 移动到第二行</td>\n</tr>\n<tr>\n<td align=\"left\">G</td>\n<td align=\"left\">移动到文件末尾</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>不是只有<code>G</code>命令支持前面加数字, <code>5j</code> 会将光标向下移动5行</p>\n</blockquote>\n<br/>\n\n<h2 id=\"进入编辑模式的一些快捷键\"><a href=\"#进入编辑模式的一些快捷键\" class=\"headerlink\" title=\"进入编辑模式的一些快捷键\"></a>进入编辑模式的一些快捷键</h2><table>\n<thead>\n<tr>\n<th align=\"left\">快捷键</th>\n<th align=\"left\">意义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">a</td>\n<td align=\"left\">光标向后一格进入编辑模式</td>\n</tr>\n<tr>\n<td align=\"left\">A</td>\n<td align=\"left\">在行尾进入编辑模式</td>\n</tr>\n<tr>\n<td align=\"left\">o</td>\n<td align=\"left\">在当前行的下一行进入编辑模式</td>\n</tr>\n<tr>\n<td align=\"left\">O</td>\n<td align=\"left\">在当前行的下一行进入编辑模式</td>\n</tr>\n<tr>\n<td align=\"left\">u</td>\n<td align=\"left\">撤销更改</td>\n</tr>\n</tbody></table>\n<br/>\n\n<h2 id=\"删除文本的一些快捷键\"><a href=\"#删除文本的一些快捷键\" class=\"headerlink\" title=\"删除文本的一些快捷键\"></a>删除文本的一些快捷键</h2><table>\n<thead>\n<tr>\n<th align=\"left\">快捷键</th>\n<th align=\"left\">意义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">x</td>\n<td align=\"left\">当前字符</td>\n</tr>\n<tr>\n<td align=\"left\">3x</td>\n<td align=\"left\">当前字符以及后面两个字符</td>\n</tr>\n<tr>\n<td align=\"left\">dd</td>\n<td align=\"left\">剪切当前行</td>\n</tr>\n<tr>\n<td align=\"left\">5dd</td>\n<td align=\"left\">剪切从当前行以及随后的四行文本</td>\n</tr>\n<tr>\n<td align=\"left\">dW</td>\n<td align=\"left\">剪切从光标开始到下一个单词的开头</td>\n</tr>\n<tr>\n<td align=\"left\">d$</td>\n<td align=\"left\">剪切从光标开始到当前行的结尾</td>\n</tr>\n<tr>\n<td align=\"left\">d0</td>\n<td align=\"left\">剪切从光标开始到当前行的行首</td>\n</tr>\n<tr>\n<td align=\"left\">d^</td>\n<td align=\"left\">剪切从光标开始到当前行的第一个非空字符</td>\n</tr>\n<tr>\n<td align=\"left\">dG</td>\n<td align=\"left\">剪切从当前行到文件的末尾</td>\n</tr>\n<tr>\n<td align=\"left\">d20G</td>\n<td align=\"left\">剪切从当前行到文件的第20行</td>\n</tr>\n</tbody></table>\n<br/>\n\n<h2 id=\"剪切-复制和粘贴\"><a href=\"#剪切-复制和粘贴\" class=\"headerlink\" title=\"剪切, 复制和粘贴\"></a>剪切, 复制和粘贴</h2><table>\n<thead>\n<tr>\n<th align=\"left\">命令</th>\n<th align=\"left\">意义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">yy</td>\n<td align=\"left\">复制当前行</td>\n</tr>\n<tr>\n<td align=\"left\">5yy</td>\n<td align=\"left\">复制当前行以及随后的4行文本</td>\n</tr>\n<tr>\n<td align=\"left\">yW</td>\n<td align=\"left\">复制从当前光标位置到下一个单词的开头</td>\n</tr>\n<tr>\n<td align=\"left\">y$</td>\n<td align=\"left\">复制从当前光标位置到当前行的末尾</td>\n</tr>\n<tr>\n<td align=\"left\">y0(零)</td>\n<td align=\"left\">复制从当前光标到当前行首</td>\n</tr>\n<tr>\n<td align=\"left\">y^</td>\n<td align=\"left\">复制从当前光标位置到文本行的第一个非空字符</td>\n</tr>\n<tr>\n<td align=\"left\">yG</td>\n<td align=\"left\">复制从当前光标位置到文件末尾</td>\n</tr>\n<tr>\n<td align=\"left\">y20G</td>\n<td align=\"left\">从当前行到文件的20行</td>\n</tr>\n<tr>\n<td align=\"left\">p</td>\n<td align=\"left\">粘贴到当前光标位置</td>\n</tr>\n<tr>\n<td align=\"left\">P</td>\n<td align=\"left\">粘贴到当前行之上</td>\n</tr>\n</tbody></table>\n<br/>\n\n<h2 id=\"连接行于行\"><a href=\"#连接行于行\" class=\"headerlink\" title=\"连接行于行\"></a>连接行于行</h2><p><code>J</code> 连接当前行和下一行为一行</p>\n<br/>\n\n<h2 id=\"查找和替换\"><a href=\"#查找和替换\" class=\"headerlink\" title=\"查找和替换\"></a>查找和替换</h2><blockquote>\n<p>在当前行中进行查找</p>\n</blockquote>\n<p><code>fsearch key</code> 例如: <code>fa</code> 会搜索当前行从光标位置开始的字母a</p>\n<blockquote>\n<p>查找整个文件</p>\n</blockquote>\n<p>输入 <code>/</code> , 接着输入要查找的字符并按下回车, 使用 <code>n</code> 命令来查找下一个匹配的字符</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:%s/The/the/g</span><br></pre></td></tr></table></figure>\n<ul>\n<li>%s 代表需要操作的范围是从第一行到最后一行, 如果是第m行到第n行则可以这样: m,n</li>\n<li>&#x2F;The 代表需要被替换的字符</li>\n<li>&#x2F;the 代表替换的字符</li>\n<li>&#x2F;g 代表全局搜索</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:%s/the/The/gc</span><br></pre></td></tr></table></figure>\n\n<p>该命令和上面意义一样, 只是每次替换之前, 都会先进行确认, 确认的方式包括:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">按键</th>\n<th align=\"left\">行为</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">y</td>\n<td align=\"left\">执行替换操作</td>\n</tr>\n<tr>\n<td align=\"left\">n</td>\n<td align=\"left\">跳过这个匹配的实例</td>\n</tr>\n<tr>\n<td align=\"left\">a</td>\n<td align=\"left\">对当前及所有以后匹配的字符串都进行匹配操作</td>\n</tr>\n<tr>\n<td align=\"left\">q &#x2F; esc</td>\n<td align=\"left\">退出替换操作</td>\n</tr>\n<tr>\n<td align=\"left\">l</td>\n<td align=\"left\">执行这次替换并退出</td>\n</tr>\n<tr>\n<td align=\"left\">ctrl-e, ctrl-y</td>\n<td align=\"left\">向上滚动, 向下滚动, 查看当前匹配字符的上下文</td>\n</tr>\n</tbody></table>\n<br/>\n\n<h2 id=\"同时编辑多个文件\"><a href=\"#同时编辑多个文件\" class=\"headerlink\" title=\"同时编辑多个文件\"></a>同时编辑多个文件</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim file1.txt file2.txt ...</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>:n</code> 切换到下一个文件</li>\n<li><code>:N</code> 切换到上一个文件</li>\n</ul>\n<br/>\n\n<p><strong>如果当前文件修改后没有保存, 则不能切换, 可以先保存, 再切换, 也可以直接 <code>!n</code> 强制切换, 不保存</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:buffers</span><br></pre></td></tr></table></figure>\n\n<p>显示所有编辑的文件列表, 也可以直接切换第n个文件: <code>:buffer n</code></p>\n<br/>\n\n<h2 id=\"在vim编辑器中打开另一个文件\"><a href=\"#在vim编辑器中打开另一个文件\" class=\"headerlink\" title=\"在vim编辑器中打开另一个文件\"></a>在vim编辑器中打开另一个文件</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:e file2.txt</span><br></pre></td></tr></table></figure>\n\n<p>如果使用 <code>:e</code> 命令打开的文件, 则不能使用 <code>:n</code> 和 <code>:N</code> 来切换文件, 只能通过 <code>:buffer</code> 命令来切换</p>\n<br/>\n\n<h2 id=\"将指定文件插入到另一个文件中\"><a href=\"#将指定文件插入到另一个文件中\" class=\"headerlink\" title=\"将指定文件插入到另一个文件中\"></a>将指定文件插入到另一个文件中</h2><p>在已经使用vim打开一个文件中的情况下:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:r file2.txt</span><br></pre></td></tr></table></figure>\n\n<p>将file2.txt的所有内容插入到光标所在位置。</p>\n<br/>\n\n<h2 id=\"保存文件\"><a href=\"#保存文件\" class=\"headerlink\" title=\"保存文件\"></a>保存文件</h2><p><code>ZZ</code> 注意是大写, 会保存并退出当前文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:w other.txt</span><br></pre></td></tr></table></figure>\n\n<p>将当前文件保存为other.txt文件, 但是编辑则还是编辑当前文件。</p>"},{"title":"快乐的Linux命令行笔记-自定义shell提示符","date":"2019-02-14T13:49:02.000Z","_content":"\n[第一天的笔记-基本的命令和使用方法](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-1Day.html)\n[第二天的笔记-操作文件](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-2Day.html)\n[第三天的笔记-查阅命令文档并创建命令别名](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-3Day.html)\n[第四天的笔记-重定向标准输入和输出以及处理查询结果](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-4Day.html)\n[第五天的笔记-命令的展开](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-5Day.html)\n[第六天的笔记-快捷键](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-6Day.html)\n[第七天的笔记-文件权限](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-7Day.html)\n[第八天的笔记-进程](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-8Day.html)\n[第九天的笔记-修改shell环境](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-9Day.html)\n[第十天的笔记-vim入门](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-10Day.html)\n\n# 总结\n\n今天学习了关于如何自定义shell提示符, 包括修改文本, 修改文本颜色, 修改背景颜色甚至是移动光标。\n<!--more-->\n\n# 自定制shell提示符\n\n可以自定义linux命令行的提示符(就是每行命令的开始部分)。shell的提示符是由环境变量`PS1`来决定显示哪些内容的, 可以通过\n\n```shell\necho PS1\n```\n来查看当前提示符中都包含哪些内容, 通过转义字符来显示。\n\n> 提示符中用到的转义字符\n\n| 序列 | 显示值 |\n| :--- | :----- |\n| \\a | 以ASCII码格式编码的铃声, 当遇到这个转义序列时, 计算机会发出蜂鸣声 |\n| \\d | 以日, 月, 天格式来表示当前日期, 例如: \"Mon May 26\" |\n| \\h | 本地的主机名, 但不带末尾的域名 |\n| \\H | 完整的主机名 |\n| \\j | 运行在当前shell会话的工作数 |\n| \\l | 当前终端设备名 |\n| \\n | 一个换行符 |\n| \\r | 回车符 |\n| \\s | shell程序名 |\n| \\t | 24小时制, hh:mm:ss 的格式表示当前时间 |\n| \\T | 以12小时制表示当前时间 |\n| \\@ | 以12小时制, am/pm表示当前时间 |\n| \\u | 当前用户名 |\n| \\v | shell的version号 |\n| \\V | shell的version, release号 |\n| \\w | 当前工作目录名 |\n| \\W | 当前工作目录名的最后部分 |\n| \\! | 当前命令的最大历史行号 |\n| \\# | 当前shell会话中已经执行的命令数量 |\n| \\$ | 如果拥有超级用户权限, 则会显示一个\"$\"符, 不然会显示一个\"#\" |\n| \\[ | 标志着一系列非打印字符的开始, 这被用来以某种方式来操作终端仿真器, 比如说移动光标或者更改颜色 |\n| \\] | 标志非打印字符的结束 |\n\n可以通过改变`PS1`的值来改变提示符:\n\n```shell\nPS1=\"\\a\"\n```\n\n上面的语句可以将提示符改成蜂鸣声, 每次执行完一个语句计算机会发出声响。\n\n# 使用转义字符来设置文本颜色\n\n| 序列 | 文本颜色 |\n| :--- | :------- |\n| \\033[0;30m | 黑色 |\n| \\033[0;31m | 红色 |\n| \\033[0;32m | 绿色 |\n| \\033[0;33m | 棕色 |\n| \\033[0;34m | 蓝色 |\n| \\033[0;35m | 粉红 |\n| \\033[0;36m | 青色 |\n| \\033[0;37m | 浅灰色 |\n| \\033[1;30m | 深灰色 |\n| \\033[1;31m | 浅红色 |\n| \\033[1;32m | 浅绿色 |\n| \\033[1;33m | 黄色 |\n| \\033[1;34m | 浅蓝色 |\n| \\033[1;35m | 浅粉色 |\n| \\033[1;36m | 浅青色 |\n| \\033[1;37m | 白色 |\n\n> 修改提示符为黄色\n\n```shell\nPS1=\"\\[\\033[1;33m\\]\\u@\\h \\W\\$\\[033[1;37m\\]\n```\n\n上面的命令还会将`$`符后面的字符y的颜色变成白色。\n\n# 修改背景颜色\n\n| 序列 | 文本颜色 |\n| :--- | :------- |\n| \\033[0;40m | 蓝色 |\n| \\033[1;44m | 黑色 |\n| \\033[0;41m | 红色 |\n| \\033[1;45m | 紫色 |\n| \\033[0;42m | 绿色 |\n| \\033[1;46m | 青色 |\n| \\033[0;43m | 棕色 |\n| \\033[1;47m | 浅灰色 |\n\n> 将背景颜色修改为红色\n\n```shell\nPS1=\"\\[\\033[0;41m\\]\\u@\\h \\W\\$\\[\\033[1;37m\\]\"\n```\n# 移动光标\n\n| 序列 | 行动 |\n| :-- | :---- |\n| \\033[l;cH | 把光标移到第一行, 第c列 |\n| \\033[nA | 把光标向上移动n行 |\n| \\033[nB | 把光标向下移动n行 |\n| \\033[nC | 把光标向前移动n个字符 |\n| \\033[nD | 把光标向后移动n个字符 |\n| \\033[2J | 清空屏幕, 把光标移到左上角(第零行, 第零列) |\n| \\033[K | 清空从光标位置到行末的内容 |\n| \\033[s | 存储当前光标位置 |\n| \\033[u | 唤醒之前存储的光标位置 |\n","source":"_posts/note/read_note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-11Day.md","raw":"---\ntitle: 快乐的Linux命令行笔记-自定义shell提示符\ndate: 2019-02-14 21:49:02\ncategories:\n- 笔记\n- 读书笔记\n- 快乐的Linux命令行\ntags:\n- 笔记\n- linux\n- 快乐的Linux命令行\n---\n\n[第一天的笔记-基本的命令和使用方法](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-1Day.html)\n[第二天的笔记-操作文件](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-2Day.html)\n[第三天的笔记-查阅命令文档并创建命令别名](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-3Day.html)\n[第四天的笔记-重定向标准输入和输出以及处理查询结果](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-4Day.html)\n[第五天的笔记-命令的展开](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-5Day.html)\n[第六天的笔记-快捷键](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-6Day.html)\n[第七天的笔记-文件权限](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-7Day.html)\n[第八天的笔记-进程](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-8Day.html)\n[第九天的笔记-修改shell环境](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-9Day.html)\n[第十天的笔记-vim入门](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-10Day.html)\n\n# 总结\n\n今天学习了关于如何自定义shell提示符, 包括修改文本, 修改文本颜色, 修改背景颜色甚至是移动光标。\n<!--more-->\n\n# 自定制shell提示符\n\n可以自定义linux命令行的提示符(就是每行命令的开始部分)。shell的提示符是由环境变量`PS1`来决定显示哪些内容的, 可以通过\n\n```shell\necho PS1\n```\n来查看当前提示符中都包含哪些内容, 通过转义字符来显示。\n\n> 提示符中用到的转义字符\n\n| 序列 | 显示值 |\n| :--- | :----- |\n| \\a | 以ASCII码格式编码的铃声, 当遇到这个转义序列时, 计算机会发出蜂鸣声 |\n| \\d | 以日, 月, 天格式来表示当前日期, 例如: \"Mon May 26\" |\n| \\h | 本地的主机名, 但不带末尾的域名 |\n| \\H | 完整的主机名 |\n| \\j | 运行在当前shell会话的工作数 |\n| \\l | 当前终端设备名 |\n| \\n | 一个换行符 |\n| \\r | 回车符 |\n| \\s | shell程序名 |\n| \\t | 24小时制, hh:mm:ss 的格式表示当前时间 |\n| \\T | 以12小时制表示当前时间 |\n| \\@ | 以12小时制, am/pm表示当前时间 |\n| \\u | 当前用户名 |\n| \\v | shell的version号 |\n| \\V | shell的version, release号 |\n| \\w | 当前工作目录名 |\n| \\W | 当前工作目录名的最后部分 |\n| \\! | 当前命令的最大历史行号 |\n| \\# | 当前shell会话中已经执行的命令数量 |\n| \\$ | 如果拥有超级用户权限, 则会显示一个\"$\"符, 不然会显示一个\"#\" |\n| \\[ | 标志着一系列非打印字符的开始, 这被用来以某种方式来操作终端仿真器, 比如说移动光标或者更改颜色 |\n| \\] | 标志非打印字符的结束 |\n\n可以通过改变`PS1`的值来改变提示符:\n\n```shell\nPS1=\"\\a\"\n```\n\n上面的语句可以将提示符改成蜂鸣声, 每次执行完一个语句计算机会发出声响。\n\n# 使用转义字符来设置文本颜色\n\n| 序列 | 文本颜色 |\n| :--- | :------- |\n| \\033[0;30m | 黑色 |\n| \\033[0;31m | 红色 |\n| \\033[0;32m | 绿色 |\n| \\033[0;33m | 棕色 |\n| \\033[0;34m | 蓝色 |\n| \\033[0;35m | 粉红 |\n| \\033[0;36m | 青色 |\n| \\033[0;37m | 浅灰色 |\n| \\033[1;30m | 深灰色 |\n| \\033[1;31m | 浅红色 |\n| \\033[1;32m | 浅绿色 |\n| \\033[1;33m | 黄色 |\n| \\033[1;34m | 浅蓝色 |\n| \\033[1;35m | 浅粉色 |\n| \\033[1;36m | 浅青色 |\n| \\033[1;37m | 白色 |\n\n> 修改提示符为黄色\n\n```shell\nPS1=\"\\[\\033[1;33m\\]\\u@\\h \\W\\$\\[033[1;37m\\]\n```\n\n上面的命令还会将`$`符后面的字符y的颜色变成白色。\n\n# 修改背景颜色\n\n| 序列 | 文本颜色 |\n| :--- | :------- |\n| \\033[0;40m | 蓝色 |\n| \\033[1;44m | 黑色 |\n| \\033[0;41m | 红色 |\n| \\033[1;45m | 紫色 |\n| \\033[0;42m | 绿色 |\n| \\033[1;46m | 青色 |\n| \\033[0;43m | 棕色 |\n| \\033[1;47m | 浅灰色 |\n\n> 将背景颜色修改为红色\n\n```shell\nPS1=\"\\[\\033[0;41m\\]\\u@\\h \\W\\$\\[\\033[1;37m\\]\"\n```\n# 移动光标\n\n| 序列 | 行动 |\n| :-- | :---- |\n| \\033[l;cH | 把光标移到第一行, 第c列 |\n| \\033[nA | 把光标向上移动n行 |\n| \\033[nB | 把光标向下移动n行 |\n| \\033[nC | 把光标向前移动n个字符 |\n| \\033[nD | 把光标向后移动n个字符 |\n| \\033[2J | 清空屏幕, 把光标移到左上角(第零行, 第零列) |\n| \\033[K | 清空从光标位置到行末的内容 |\n| \\033[s | 存储当前光标位置 |\n| \\033[u | 唤醒之前存储的光标位置 |\n","slug":"note/read_note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-11Day","published":1,"updated":"2022-10-07T13:03:44.825Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejw6008e3vsb4rz4431a","content":"<p><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-1Day.html\">第一天的笔记-基本的命令和使用方法</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-2Day.html\">第二天的笔记-操作文件</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-3Day.html\">第三天的笔记-查阅命令文档并创建命令别名</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-4Day.html\">第四天的笔记-重定向标准输入和输出以及处理查询结果</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-5Day.html\">第五天的笔记-命令的展开</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-6Day.html\">第六天的笔记-快捷键</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-7Day.html\">第七天的笔记-文件权限</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-8Day.html\">第八天的笔记-进程</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-9Day.html\">第九天的笔记-修改shell环境</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-10Day.html\">第十天的笔记-vim入门</a></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>今天学习了关于如何自定义shell提示符, 包括修改文本, 修改文本颜色, 修改背景颜色甚至是移动光标。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"自定制shell提示符\"><a href=\"#自定制shell提示符\" class=\"headerlink\" title=\"自定制shell提示符\"></a>自定制shell提示符</h1><p>可以自定义linux命令行的提示符(就是每行命令的开始部分)。shell的提示符是由环境变量<code>PS1</code>来决定显示哪些内容的, 可以通过</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo PS1</span><br></pre></td></tr></table></figure>\n<p>来查看当前提示符中都包含哪些内容, 通过转义字符来显示。</p>\n<blockquote>\n<p>提示符中用到的转义字符</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"left\">序列</th>\n<th align=\"left\">显示值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">\\a</td>\n<td align=\"left\">以ASCII码格式编码的铃声, 当遇到这个转义序列时, 计算机会发出蜂鸣声</td>\n</tr>\n<tr>\n<td align=\"left\">\\d</td>\n<td align=\"left\">以日, 月, 天格式来表示当前日期, 例如: “Mon May 26”</td>\n</tr>\n<tr>\n<td align=\"left\">\\h</td>\n<td align=\"left\">本地的主机名, 但不带末尾的域名</td>\n</tr>\n<tr>\n<td align=\"left\">\\H</td>\n<td align=\"left\">完整的主机名</td>\n</tr>\n<tr>\n<td align=\"left\">\\j</td>\n<td align=\"left\">运行在当前shell会话的工作数</td>\n</tr>\n<tr>\n<td align=\"left\">\\l</td>\n<td align=\"left\">当前终端设备名</td>\n</tr>\n<tr>\n<td align=\"left\">\\n</td>\n<td align=\"left\">一个换行符</td>\n</tr>\n<tr>\n<td align=\"left\">\\r</td>\n<td align=\"left\">回车符</td>\n</tr>\n<tr>\n<td align=\"left\">\\s</td>\n<td align=\"left\">shell程序名</td>\n</tr>\n<tr>\n<td align=\"left\">\\t</td>\n<td align=\"left\">24小时制, hh:mm:ss 的格式表示当前时间</td>\n</tr>\n<tr>\n<td align=\"left\">\\T</td>\n<td align=\"left\">以12小时制表示当前时间</td>\n</tr>\n<tr>\n<td align=\"left\">@</td>\n<td align=\"left\">以12小时制, am&#x2F;pm表示当前时间</td>\n</tr>\n<tr>\n<td align=\"left\">\\u</td>\n<td align=\"left\">当前用户名</td>\n</tr>\n<tr>\n<td align=\"left\">\\v</td>\n<td align=\"left\">shell的version号</td>\n</tr>\n<tr>\n<td align=\"left\">\\V</td>\n<td align=\"left\">shell的version, release号</td>\n</tr>\n<tr>\n<td align=\"left\">\\w</td>\n<td align=\"left\">当前工作目录名</td>\n</tr>\n<tr>\n<td align=\"left\">\\W</td>\n<td align=\"left\">当前工作目录名的最后部分</td>\n</tr>\n<tr>\n<td align=\"left\">!</td>\n<td align=\"left\">当前命令的最大历史行号</td>\n</tr>\n<tr>\n<td align=\"left\">#</td>\n<td align=\"left\">当前shell会话中已经执行的命令数量</td>\n</tr>\n<tr>\n<td align=\"left\">$</td>\n<td align=\"left\">如果拥有超级用户权限, 则会显示一个”$”符, 不然会显示一个”#”</td>\n</tr>\n<tr>\n<td align=\"left\">[</td>\n<td align=\"left\">标志着一系列非打印字符的开始, 这被用来以某种方式来操作终端仿真器, 比如说移动光标或者更改颜色</td>\n</tr>\n<tr>\n<td align=\"left\">]</td>\n<td align=\"left\">标志非打印字符的结束</td>\n</tr>\n</tbody></table>\n<p>可以通过改变<code>PS1</code>的值来改变提示符:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PS1=&quot;\\a&quot;</span><br></pre></td></tr></table></figure>\n\n<p>上面的语句可以将提示符改成蜂鸣声, 每次执行完一个语句计算机会发出声响。</p>\n<h1 id=\"使用转义字符来设置文本颜色\"><a href=\"#使用转义字符来设置文本颜色\" class=\"headerlink\" title=\"使用转义字符来设置文本颜色\"></a>使用转义字符来设置文本颜色</h1><table>\n<thead>\n<tr>\n<th align=\"left\">序列</th>\n<th align=\"left\">文本颜色</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">\\033[0;30m</td>\n<td align=\"left\">黑色</td>\n</tr>\n<tr>\n<td align=\"left\">\\033[0;31m</td>\n<td align=\"left\">红色</td>\n</tr>\n<tr>\n<td align=\"left\">\\033[0;32m</td>\n<td align=\"left\">绿色</td>\n</tr>\n<tr>\n<td align=\"left\">\\033[0;33m</td>\n<td align=\"left\">棕色</td>\n</tr>\n<tr>\n<td align=\"left\">\\033[0;34m</td>\n<td align=\"left\">蓝色</td>\n</tr>\n<tr>\n<td align=\"left\">\\033[0;35m</td>\n<td align=\"left\">粉红</td>\n</tr>\n<tr>\n<td align=\"left\">\\033[0;36m</td>\n<td align=\"left\">青色</td>\n</tr>\n<tr>\n<td align=\"left\">\\033[0;37m</td>\n<td align=\"left\">浅灰色</td>\n</tr>\n<tr>\n<td align=\"left\">\\033[1;30m</td>\n<td align=\"left\">深灰色</td>\n</tr>\n<tr>\n<td align=\"left\">\\033[1;31m</td>\n<td align=\"left\">浅红色</td>\n</tr>\n<tr>\n<td align=\"left\">\\033[1;32m</td>\n<td align=\"left\">浅绿色</td>\n</tr>\n<tr>\n<td align=\"left\">\\033[1;33m</td>\n<td align=\"left\">黄色</td>\n</tr>\n<tr>\n<td align=\"left\">\\033[1;34m</td>\n<td align=\"left\">浅蓝色</td>\n</tr>\n<tr>\n<td align=\"left\">\\033[1;35m</td>\n<td align=\"left\">浅粉色</td>\n</tr>\n<tr>\n<td align=\"left\">\\033[1;36m</td>\n<td align=\"left\">浅青色</td>\n</tr>\n<tr>\n<td align=\"left\">\\033[1;37m</td>\n<td align=\"left\">白色</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>修改提示符为黄色</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PS1=&quot;\\[\\033[1;33m\\]\\u@\\h \\W\\$\\[033[1;37m\\]</span><br></pre></td></tr></table></figure>\n\n<p>上面的命令还会将<code>$</code>符后面的字符y的颜色变成白色。</p>\n<h1 id=\"修改背景颜色\"><a href=\"#修改背景颜色\" class=\"headerlink\" title=\"修改背景颜色\"></a>修改背景颜色</h1><table>\n<thead>\n<tr>\n<th align=\"left\">序列</th>\n<th align=\"left\">文本颜色</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">\\033[0;40m</td>\n<td align=\"left\">蓝色</td>\n</tr>\n<tr>\n<td align=\"left\">\\033[1;44m</td>\n<td align=\"left\">黑色</td>\n</tr>\n<tr>\n<td align=\"left\">\\033[0;41m</td>\n<td align=\"left\">红色</td>\n</tr>\n<tr>\n<td align=\"left\">\\033[1;45m</td>\n<td align=\"left\">紫色</td>\n</tr>\n<tr>\n<td align=\"left\">\\033[0;42m</td>\n<td align=\"left\">绿色</td>\n</tr>\n<tr>\n<td align=\"left\">\\033[1;46m</td>\n<td align=\"left\">青色</td>\n</tr>\n<tr>\n<td align=\"left\">\\033[0;43m</td>\n<td align=\"left\">棕色</td>\n</tr>\n<tr>\n<td align=\"left\">\\033[1;47m</td>\n<td align=\"left\">浅灰色</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>将背景颜色修改为红色</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PS1=&quot;\\[\\033[0;41m\\]\\u@\\h \\W\\$\\[\\033[1;37m\\]&quot;</span><br></pre></td></tr></table></figure>\n<h1 id=\"移动光标\"><a href=\"#移动光标\" class=\"headerlink\" title=\"移动光标\"></a>移动光标</h1><table>\n<thead>\n<tr>\n<th align=\"left\">序列</th>\n<th align=\"left\">行动</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">\\033[l;cH</td>\n<td align=\"left\">把光标移到第一行, 第c列</td>\n</tr>\n<tr>\n<td align=\"left\">\\033[nA</td>\n<td align=\"left\">把光标向上移动n行</td>\n</tr>\n<tr>\n<td align=\"left\">\\033[nB</td>\n<td align=\"left\">把光标向下移动n行</td>\n</tr>\n<tr>\n<td align=\"left\">\\033[nC</td>\n<td align=\"left\">把光标向前移动n个字符</td>\n</tr>\n<tr>\n<td align=\"left\">\\033[nD</td>\n<td align=\"left\">把光标向后移动n个字符</td>\n</tr>\n<tr>\n<td align=\"left\">\\033[2J</td>\n<td align=\"left\">清空屏幕, 把光标移到左上角(第零行, 第零列)</td>\n</tr>\n<tr>\n<td align=\"left\">\\033[K</td>\n<td align=\"left\">清空从光标位置到行末的内容</td>\n</tr>\n<tr>\n<td align=\"left\">\\033[s</td>\n<td align=\"left\">存储当前光标位置</td>\n</tr>\n<tr>\n<td align=\"left\">\\033[u</td>\n<td align=\"left\">唤醒之前存储的光标位置</td>\n</tr>\n</tbody></table>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<p><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-1Day.html\">第一天的笔记-基本的命令和使用方法</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-2Day.html\">第二天的笔记-操作文件</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-3Day.html\">第三天的笔记-查阅命令文档并创建命令别名</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-4Day.html\">第四天的笔记-重定向标准输入和输出以及处理查询结果</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-5Day.html\">第五天的笔记-命令的展开</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-6Day.html\">第六天的笔记-快捷键</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-7Day.html\">第七天的笔记-文件权限</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-8Day.html\">第八天的笔记-进程</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-9Day.html\">第九天的笔记-修改shell环境</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-10Day.html\">第十天的笔记-vim入门</a></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>今天学习了关于如何自定义shell提示符, 包括修改文本, 修改文本颜色, 修改背景颜色甚至是移动光标。</p>","more":"<h1 id=\"自定制shell提示符\"><a href=\"#自定制shell提示符\" class=\"headerlink\" title=\"自定制shell提示符\"></a>自定制shell提示符</h1><p>可以自定义linux命令行的提示符(就是每行命令的开始部分)。shell的提示符是由环境变量<code>PS1</code>来决定显示哪些内容的, 可以通过</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo PS1</span><br></pre></td></tr></table></figure>\n<p>来查看当前提示符中都包含哪些内容, 通过转义字符来显示。</p>\n<blockquote>\n<p>提示符中用到的转义字符</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"left\">序列</th>\n<th align=\"left\">显示值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">\\a</td>\n<td align=\"left\">以ASCII码格式编码的铃声, 当遇到这个转义序列时, 计算机会发出蜂鸣声</td>\n</tr>\n<tr>\n<td align=\"left\">\\d</td>\n<td align=\"left\">以日, 月, 天格式来表示当前日期, 例如: “Mon May 26”</td>\n</tr>\n<tr>\n<td align=\"left\">\\h</td>\n<td align=\"left\">本地的主机名, 但不带末尾的域名</td>\n</tr>\n<tr>\n<td align=\"left\">\\H</td>\n<td align=\"left\">完整的主机名</td>\n</tr>\n<tr>\n<td align=\"left\">\\j</td>\n<td align=\"left\">运行在当前shell会话的工作数</td>\n</tr>\n<tr>\n<td align=\"left\">\\l</td>\n<td align=\"left\">当前终端设备名</td>\n</tr>\n<tr>\n<td align=\"left\">\\n</td>\n<td align=\"left\">一个换行符</td>\n</tr>\n<tr>\n<td align=\"left\">\\r</td>\n<td align=\"left\">回车符</td>\n</tr>\n<tr>\n<td align=\"left\">\\s</td>\n<td align=\"left\">shell程序名</td>\n</tr>\n<tr>\n<td align=\"left\">\\t</td>\n<td align=\"left\">24小时制, hh:mm:ss 的格式表示当前时间</td>\n</tr>\n<tr>\n<td align=\"left\">\\T</td>\n<td align=\"left\">以12小时制表示当前时间</td>\n</tr>\n<tr>\n<td align=\"left\">@</td>\n<td align=\"left\">以12小时制, am&#x2F;pm表示当前时间</td>\n</tr>\n<tr>\n<td align=\"left\">\\u</td>\n<td align=\"left\">当前用户名</td>\n</tr>\n<tr>\n<td align=\"left\">\\v</td>\n<td align=\"left\">shell的version号</td>\n</tr>\n<tr>\n<td align=\"left\">\\V</td>\n<td align=\"left\">shell的version, release号</td>\n</tr>\n<tr>\n<td align=\"left\">\\w</td>\n<td align=\"left\">当前工作目录名</td>\n</tr>\n<tr>\n<td align=\"left\">\\W</td>\n<td align=\"left\">当前工作目录名的最后部分</td>\n</tr>\n<tr>\n<td align=\"left\">!</td>\n<td align=\"left\">当前命令的最大历史行号</td>\n</tr>\n<tr>\n<td align=\"left\">#</td>\n<td align=\"left\">当前shell会话中已经执行的命令数量</td>\n</tr>\n<tr>\n<td align=\"left\">$</td>\n<td align=\"left\">如果拥有超级用户权限, 则会显示一个”$”符, 不然会显示一个”#”</td>\n</tr>\n<tr>\n<td align=\"left\">[</td>\n<td align=\"left\">标志着一系列非打印字符的开始, 这被用来以某种方式来操作终端仿真器, 比如说移动光标或者更改颜色</td>\n</tr>\n<tr>\n<td align=\"left\">]</td>\n<td align=\"left\">标志非打印字符的结束</td>\n</tr>\n</tbody></table>\n<p>可以通过改变<code>PS1</code>的值来改变提示符:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PS1=&quot;\\a&quot;</span><br></pre></td></tr></table></figure>\n\n<p>上面的语句可以将提示符改成蜂鸣声, 每次执行完一个语句计算机会发出声响。</p>\n<h1 id=\"使用转义字符来设置文本颜色\"><a href=\"#使用转义字符来设置文本颜色\" class=\"headerlink\" title=\"使用转义字符来设置文本颜色\"></a>使用转义字符来设置文本颜色</h1><table>\n<thead>\n<tr>\n<th align=\"left\">序列</th>\n<th align=\"left\">文本颜色</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">\\033[0;30m</td>\n<td align=\"left\">黑色</td>\n</tr>\n<tr>\n<td align=\"left\">\\033[0;31m</td>\n<td align=\"left\">红色</td>\n</tr>\n<tr>\n<td align=\"left\">\\033[0;32m</td>\n<td align=\"left\">绿色</td>\n</tr>\n<tr>\n<td align=\"left\">\\033[0;33m</td>\n<td align=\"left\">棕色</td>\n</tr>\n<tr>\n<td align=\"left\">\\033[0;34m</td>\n<td align=\"left\">蓝色</td>\n</tr>\n<tr>\n<td align=\"left\">\\033[0;35m</td>\n<td align=\"left\">粉红</td>\n</tr>\n<tr>\n<td align=\"left\">\\033[0;36m</td>\n<td align=\"left\">青色</td>\n</tr>\n<tr>\n<td align=\"left\">\\033[0;37m</td>\n<td align=\"left\">浅灰色</td>\n</tr>\n<tr>\n<td align=\"left\">\\033[1;30m</td>\n<td align=\"left\">深灰色</td>\n</tr>\n<tr>\n<td align=\"left\">\\033[1;31m</td>\n<td align=\"left\">浅红色</td>\n</tr>\n<tr>\n<td align=\"left\">\\033[1;32m</td>\n<td align=\"left\">浅绿色</td>\n</tr>\n<tr>\n<td align=\"left\">\\033[1;33m</td>\n<td align=\"left\">黄色</td>\n</tr>\n<tr>\n<td align=\"left\">\\033[1;34m</td>\n<td align=\"left\">浅蓝色</td>\n</tr>\n<tr>\n<td align=\"left\">\\033[1;35m</td>\n<td align=\"left\">浅粉色</td>\n</tr>\n<tr>\n<td align=\"left\">\\033[1;36m</td>\n<td align=\"left\">浅青色</td>\n</tr>\n<tr>\n<td align=\"left\">\\033[1;37m</td>\n<td align=\"left\">白色</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>修改提示符为黄色</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PS1=&quot;\\[\\033[1;33m\\]\\u@\\h \\W\\$\\[033[1;37m\\]</span><br></pre></td></tr></table></figure>\n\n<p>上面的命令还会将<code>$</code>符后面的字符y的颜色变成白色。</p>\n<h1 id=\"修改背景颜色\"><a href=\"#修改背景颜色\" class=\"headerlink\" title=\"修改背景颜色\"></a>修改背景颜色</h1><table>\n<thead>\n<tr>\n<th align=\"left\">序列</th>\n<th align=\"left\">文本颜色</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">\\033[0;40m</td>\n<td align=\"left\">蓝色</td>\n</tr>\n<tr>\n<td align=\"left\">\\033[1;44m</td>\n<td align=\"left\">黑色</td>\n</tr>\n<tr>\n<td align=\"left\">\\033[0;41m</td>\n<td align=\"left\">红色</td>\n</tr>\n<tr>\n<td align=\"left\">\\033[1;45m</td>\n<td align=\"left\">紫色</td>\n</tr>\n<tr>\n<td align=\"left\">\\033[0;42m</td>\n<td align=\"left\">绿色</td>\n</tr>\n<tr>\n<td align=\"left\">\\033[1;46m</td>\n<td align=\"left\">青色</td>\n</tr>\n<tr>\n<td align=\"left\">\\033[0;43m</td>\n<td align=\"left\">棕色</td>\n</tr>\n<tr>\n<td align=\"left\">\\033[1;47m</td>\n<td align=\"left\">浅灰色</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>将背景颜色修改为红色</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PS1=&quot;\\[\\033[0;41m\\]\\u@\\h \\W\\$\\[\\033[1;37m\\]&quot;</span><br></pre></td></tr></table></figure>\n<h1 id=\"移动光标\"><a href=\"#移动光标\" class=\"headerlink\" title=\"移动光标\"></a>移动光标</h1><table>\n<thead>\n<tr>\n<th align=\"left\">序列</th>\n<th align=\"left\">行动</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">\\033[l;cH</td>\n<td align=\"left\">把光标移到第一行, 第c列</td>\n</tr>\n<tr>\n<td align=\"left\">\\033[nA</td>\n<td align=\"left\">把光标向上移动n行</td>\n</tr>\n<tr>\n<td align=\"left\">\\033[nB</td>\n<td align=\"left\">把光标向下移动n行</td>\n</tr>\n<tr>\n<td align=\"left\">\\033[nC</td>\n<td align=\"left\">把光标向前移动n个字符</td>\n</tr>\n<tr>\n<td align=\"left\">\\033[nD</td>\n<td align=\"left\">把光标向后移动n个字符</td>\n</tr>\n<tr>\n<td align=\"left\">\\033[2J</td>\n<td align=\"left\">清空屏幕, 把光标移到左上角(第零行, 第零列)</td>\n</tr>\n<tr>\n<td align=\"left\">\\033[K</td>\n<td align=\"left\">清空从光标位置到行末的内容</td>\n</tr>\n<tr>\n<td align=\"left\">\\033[s</td>\n<td align=\"left\">存储当前光标位置</td>\n</tr>\n<tr>\n<td align=\"left\">\\033[u</td>\n<td align=\"left\">唤醒之前存储的光标位置</td>\n</tr>\n</tbody></table>"},{"title":"快乐的Linux命令行笔记-软件包管理系统","date":"2019-02-17T13:28:56.000Z","_content":"\n[第一天的笔记-基本的命令和使用方法](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-1Day.html)\n[第二天的笔记-操作文件](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-2Day.html)\n[第三天的笔记-查阅命令文档并创建命令别名](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-3Day.html)\n[第四天的笔记-重定向标准输入和输出以及处理查询结果](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-4Day.html)\n[第五天的笔记-命令的展开](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-5Day.html)\n[第六天的笔记-快捷键](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-6Day.html)\n[第七天的笔记-文件权限](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-7Day.html)\n[第八天的笔记-进程](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-8Day.html)\n[第九天的笔记-修改shell环境](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-9Day.html)\n[第十天的笔记-vim入门](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-10Day.html)\n[第十一天的笔记-自定义shell提示符](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-11Day.html)\n\n# 总结\n今天主要学习了如何使用包管理系统来进行软件的安装, 下载和更新。\n<!--more-->\n# 软件包管理\n\n> 一般而言, 大多数发行版分别属于两大包管理技术阵营: Debian的\".deb\"和红帽的\".rpm\"。\n\n主要的包管理系统\n\n| 包管理系统 | 发行版(部分列表) |\n| :--------- | :--------------- |\n| Debian Style (.deb) | Debian, Ubuntu, Xandros, Linspire |\n| Red Hat Style (.rpm) | Fedora, CentOS, Red Hat Enterprice Linux, OpenSUSE, Mandriva, PCLinuxOS |\n\n# 软件包管理系统的工作方式\n\n大多数软件由发行商以`包文件`的形式提供, 剩下的则以源码形式存在, 可以手动编译安装。\n\n# 包文件\n\n包文件是一个构成软件包的文件压缩集合。\n\n一个软件包可能由大量程序以及支持这些程序的数据文件组成。除了安装文件之外, 软件包文件也包括关于这个包的源数据。\n\n# 资源库\n\n资源库是一个将专门为这个系统开发的所有的软件包集中的一个位置。\n\n\n而且一个系统有可能维护着不同的几个资源库, 比如通常会有一个\"测试\"资源库, 其中包含刚刚建立的软件包, 供测试人员和一些想要体验最新功能的用户使用和测试。还会有一个\"开发\"资源库, 这个资源库中保存着注定要包含到下一个主要版本中的半成品软件包。\n\n\n另外还会有包含第三方的资源库, 有些软件包有可能会因为法律, 专利或者DRM反规避问题而不能包含到发行版中。如果想使用他们, 需要手动将他们包含到软件包管理系统的配置文件中。\n\n# 依赖性\n\n软件包管理系统会提供一些依赖项解析方法, 确保安装软件包时, 其所有的依赖也被安装。\n\n# 上层和底层软件包工具\n\n软件包工具分为上层和底层, 底层大致分为两种, 上面已经介绍过了。而上层工具会有很多种。\n\n> 包管理工具\n\n| 发行版 | 底层工具 | 上层工具 |\n| :----- | :------: | :------- |\n| Debian-style | dpkg | apt-get, aptitude |\n| fedora, Red Hat Enterprise Linux, CentOS | rpm | yum |\n\n# 软件包查找工具\n\n| 风格 | 命令 |\n| :----- | :------: | :------- |\n| Debian | apt-get update; apt-cache search serarch_string |\n| Red Hat | yum search search_string |\n\n> 使用yum搜索emacs文本编译器\n\n```shell\nyum search emacs\n```\n\n> 使用apt搜索\n\n```shell\napt-get update; apt-cache search emacs\n```\n\n# 从资源库中安装一个软件包\n\n| 风格 | 命令 |\n| :--- | :--- |\n| Debian | apt-get update; apt-get install package_name |\n| Red Hat | yum install package_name |\n\n> 使用apt来安装emacs文本编译器\n```shell\napt-get update; apt-get install emacs\n```\n\n# 通过软件包文件来安装软件\n\n> 使用底层工具来直接安装软件包(没有经过依赖解析)\n\n| 风格 | 命令 |\n| :--- | :--- |\n| Debian | dpkg --install package_file |\n| Ret Hat | rpm -i package_file |\n\n# 卸载软件\n\n| 风格 | 命令 |\n| :--- | :--- |\n| Debian | apt-get remove package_name |\n| Red Hat | yum erase package_name |\n\n# 经过资源库来更新软件包\n\n| 风格 | 命令 |\n| :--- | :--- |\n| Debian | apt-get update; apt-get upgrade |\n| Red Hat | yum update |\n\n# 通过软件包文件来升级软件\n\n| 风格 | 命令 |\n| :--- | :--- |\n| Debian | dpkg --install package_file |\n| Red Hat | rpm -U package_file |\n\n# 软件包的安装列表\n\n| 风格 | 命令 |\n| :--- | :--- |\n| Debian | dpkg --list |\n| Red Hat | rpm -qa |\n\n# 确定是否安装了一个软件包\n\n| 风格 | 命令 |\n| :--- | :--- |\n| Debian | dpkg --status package_name |\n| Red Hat | rpm -q package_name |\n\n# 显示安装软件包的信息\n\n| 风格 | 命令 |\n| :--- | :--- |\n| Debian | apt-cache show package_name |\n| Red Hat | yum info package_name |\n\n# 查看安装了某个文件的软件包\n\n| 风格 | 命令 |\n| :--- | :--- |\n| Debian | dpkg --search file_name |\n| Red Hat | rpm -qf file_name |\n\n> 在Red Hat系统中, 查看那个软件包安装了`/usr/bin/vim`这个文件\n\n```shell\nrpm -qf /usr/bin/vim\n```\n","source":"_posts/note/read_note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-12Day.md","raw":"---\ntitle: 快乐的Linux命令行笔记-软件包管理系统\ndate: 2019-02-17 21:28:56\ncategories:\n- 笔记\n- 读书笔记\n- 快乐的Linux命令行\ntags:\n- 笔记\n- linux\n- 快乐的Linux命令行\n---\n\n[第一天的笔记-基本的命令和使用方法](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-1Day.html)\n[第二天的笔记-操作文件](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-2Day.html)\n[第三天的笔记-查阅命令文档并创建命令别名](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-3Day.html)\n[第四天的笔记-重定向标准输入和输出以及处理查询结果](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-4Day.html)\n[第五天的笔记-命令的展开](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-5Day.html)\n[第六天的笔记-快捷键](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-6Day.html)\n[第七天的笔记-文件权限](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-7Day.html)\n[第八天的笔记-进程](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-8Day.html)\n[第九天的笔记-修改shell环境](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-9Day.html)\n[第十天的笔记-vim入门](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-10Day.html)\n[第十一天的笔记-自定义shell提示符](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-11Day.html)\n\n# 总结\n今天主要学习了如何使用包管理系统来进行软件的安装, 下载和更新。\n<!--more-->\n# 软件包管理\n\n> 一般而言, 大多数发行版分别属于两大包管理技术阵营: Debian的\".deb\"和红帽的\".rpm\"。\n\n主要的包管理系统\n\n| 包管理系统 | 发行版(部分列表) |\n| :--------- | :--------------- |\n| Debian Style (.deb) | Debian, Ubuntu, Xandros, Linspire |\n| Red Hat Style (.rpm) | Fedora, CentOS, Red Hat Enterprice Linux, OpenSUSE, Mandriva, PCLinuxOS |\n\n# 软件包管理系统的工作方式\n\n大多数软件由发行商以`包文件`的形式提供, 剩下的则以源码形式存在, 可以手动编译安装。\n\n# 包文件\n\n包文件是一个构成软件包的文件压缩集合。\n\n一个软件包可能由大量程序以及支持这些程序的数据文件组成。除了安装文件之外, 软件包文件也包括关于这个包的源数据。\n\n# 资源库\n\n资源库是一个将专门为这个系统开发的所有的软件包集中的一个位置。\n\n\n而且一个系统有可能维护着不同的几个资源库, 比如通常会有一个\"测试\"资源库, 其中包含刚刚建立的软件包, 供测试人员和一些想要体验最新功能的用户使用和测试。还会有一个\"开发\"资源库, 这个资源库中保存着注定要包含到下一个主要版本中的半成品软件包。\n\n\n另外还会有包含第三方的资源库, 有些软件包有可能会因为法律, 专利或者DRM反规避问题而不能包含到发行版中。如果想使用他们, 需要手动将他们包含到软件包管理系统的配置文件中。\n\n# 依赖性\n\n软件包管理系统会提供一些依赖项解析方法, 确保安装软件包时, 其所有的依赖也被安装。\n\n# 上层和底层软件包工具\n\n软件包工具分为上层和底层, 底层大致分为两种, 上面已经介绍过了。而上层工具会有很多种。\n\n> 包管理工具\n\n| 发行版 | 底层工具 | 上层工具 |\n| :----- | :------: | :------- |\n| Debian-style | dpkg | apt-get, aptitude |\n| fedora, Red Hat Enterprise Linux, CentOS | rpm | yum |\n\n# 软件包查找工具\n\n| 风格 | 命令 |\n| :----- | :------: | :------- |\n| Debian | apt-get update; apt-cache search serarch_string |\n| Red Hat | yum search search_string |\n\n> 使用yum搜索emacs文本编译器\n\n```shell\nyum search emacs\n```\n\n> 使用apt搜索\n\n```shell\napt-get update; apt-cache search emacs\n```\n\n# 从资源库中安装一个软件包\n\n| 风格 | 命令 |\n| :--- | :--- |\n| Debian | apt-get update; apt-get install package_name |\n| Red Hat | yum install package_name |\n\n> 使用apt来安装emacs文本编译器\n```shell\napt-get update; apt-get install emacs\n```\n\n# 通过软件包文件来安装软件\n\n> 使用底层工具来直接安装软件包(没有经过依赖解析)\n\n| 风格 | 命令 |\n| :--- | :--- |\n| Debian | dpkg --install package_file |\n| Ret Hat | rpm -i package_file |\n\n# 卸载软件\n\n| 风格 | 命令 |\n| :--- | :--- |\n| Debian | apt-get remove package_name |\n| Red Hat | yum erase package_name |\n\n# 经过资源库来更新软件包\n\n| 风格 | 命令 |\n| :--- | :--- |\n| Debian | apt-get update; apt-get upgrade |\n| Red Hat | yum update |\n\n# 通过软件包文件来升级软件\n\n| 风格 | 命令 |\n| :--- | :--- |\n| Debian | dpkg --install package_file |\n| Red Hat | rpm -U package_file |\n\n# 软件包的安装列表\n\n| 风格 | 命令 |\n| :--- | :--- |\n| Debian | dpkg --list |\n| Red Hat | rpm -qa |\n\n# 确定是否安装了一个软件包\n\n| 风格 | 命令 |\n| :--- | :--- |\n| Debian | dpkg --status package_name |\n| Red Hat | rpm -q package_name |\n\n# 显示安装软件包的信息\n\n| 风格 | 命令 |\n| :--- | :--- |\n| Debian | apt-cache show package_name |\n| Red Hat | yum info package_name |\n\n# 查看安装了某个文件的软件包\n\n| 风格 | 命令 |\n| :--- | :--- |\n| Debian | dpkg --search file_name |\n| Red Hat | rpm -qf file_name |\n\n> 在Red Hat系统中, 查看那个软件包安装了`/usr/bin/vim`这个文件\n\n```shell\nrpm -qf /usr/bin/vim\n```\n","slug":"note/read_note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-12Day","published":1,"updated":"2022-10-07T13:03:55.013Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejw9008f3vsb392ucxyj","content":"<p><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-1Day.html\">第一天的笔记-基本的命令和使用方法</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-2Day.html\">第二天的笔记-操作文件</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-3Day.html\">第三天的笔记-查阅命令文档并创建命令别名</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-4Day.html\">第四天的笔记-重定向标准输入和输出以及处理查询结果</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-5Day.html\">第五天的笔记-命令的展开</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-6Day.html\">第六天的笔记-快捷键</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-7Day.html\">第七天的笔记-文件权限</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-8Day.html\">第八天的笔记-进程</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-9Day.html\">第九天的笔记-修改shell环境</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-10Day.html\">第十天的笔记-vim入门</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-11Day.html\">第十一天的笔记-自定义shell提示符</a></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>今天主要学习了如何使用包管理系统来进行软件的安装, 下载和更新。</p>\n<span id=\"more\"></span>\n<h1 id=\"软件包管理\"><a href=\"#软件包管理\" class=\"headerlink\" title=\"软件包管理\"></a>软件包管理</h1><blockquote>\n<p>一般而言, 大多数发行版分别属于两大包管理技术阵营: Debian的”.deb”和红帽的”.rpm”。</p>\n</blockquote>\n<p>主要的包管理系统</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">包管理系统</th>\n<th align=\"left\">发行版(部分列表)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Debian Style (.deb)</td>\n<td align=\"left\">Debian, Ubuntu, Xandros, Linspire</td>\n</tr>\n<tr>\n<td align=\"left\">Red Hat Style (.rpm)</td>\n<td align=\"left\">Fedora, CentOS, Red Hat Enterprice Linux, OpenSUSE, Mandriva, PCLinuxOS</td>\n</tr>\n</tbody></table>\n<h1 id=\"软件包管理系统的工作方式\"><a href=\"#软件包管理系统的工作方式\" class=\"headerlink\" title=\"软件包管理系统的工作方式\"></a>软件包管理系统的工作方式</h1><p>大多数软件由发行商以<code>包文件</code>的形式提供, 剩下的则以源码形式存在, 可以手动编译安装。</p>\n<h1 id=\"包文件\"><a href=\"#包文件\" class=\"headerlink\" title=\"包文件\"></a>包文件</h1><p>包文件是一个构成软件包的文件压缩集合。</p>\n<p>一个软件包可能由大量程序以及支持这些程序的数据文件组成。除了安装文件之外, 软件包文件也包括关于这个包的源数据。</p>\n<h1 id=\"资源库\"><a href=\"#资源库\" class=\"headerlink\" title=\"资源库\"></a>资源库</h1><p>资源库是一个将专门为这个系统开发的所有的软件包集中的一个位置。</p>\n<p>而且一个系统有可能维护着不同的几个资源库, 比如通常会有一个”测试”资源库, 其中包含刚刚建立的软件包, 供测试人员和一些想要体验最新功能的用户使用和测试。还会有一个”开发”资源库, 这个资源库中保存着注定要包含到下一个主要版本中的半成品软件包。</p>\n<p>另外还会有包含第三方的资源库, 有些软件包有可能会因为法律, 专利或者DRM反规避问题而不能包含到发行版中。如果想使用他们, 需要手动将他们包含到软件包管理系统的配置文件中。</p>\n<h1 id=\"依赖性\"><a href=\"#依赖性\" class=\"headerlink\" title=\"依赖性\"></a>依赖性</h1><p>软件包管理系统会提供一些依赖项解析方法, 确保安装软件包时, 其所有的依赖也被安装。</p>\n<h1 id=\"上层和底层软件包工具\"><a href=\"#上层和底层软件包工具\" class=\"headerlink\" title=\"上层和底层软件包工具\"></a>上层和底层软件包工具</h1><p>软件包工具分为上层和底层, 底层大致分为两种, 上面已经介绍过了。而上层工具会有很多种。</p>\n<blockquote>\n<p>包管理工具</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"left\">发行版</th>\n<th align=\"center\">底层工具</th>\n<th align=\"left\">上层工具</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Debian-style</td>\n<td align=\"center\">dpkg</td>\n<td align=\"left\">apt-get, aptitude</td>\n</tr>\n<tr>\n<td align=\"left\">fedora, Red Hat Enterprise Linux, CentOS</td>\n<td align=\"center\">rpm</td>\n<td align=\"left\">yum</td>\n</tr>\n</tbody></table>\n<h1 id=\"软件包查找工具\"><a href=\"#软件包查找工具\" class=\"headerlink\" title=\"软件包查找工具\"></a>软件包查找工具</h1><p>| 风格 | 命令 |<br>| :—– | :——: | :——- |<br>| Debian | apt-get update; apt-cache search serarch_string |<br>| Red Hat | yum search search_string |</p>\n<blockquote>\n<p>使用yum搜索emacs文本编译器</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum search emacs</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>使用apt搜索</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get update; apt-cache search emacs</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"从资源库中安装一个软件包\"><a href=\"#从资源库中安装一个软件包\" class=\"headerlink\" title=\"从资源库中安装一个软件包\"></a>从资源库中安装一个软件包</h1><table>\n<thead>\n<tr>\n<th align=\"left\">风格</th>\n<th align=\"left\">命令</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Debian</td>\n<td align=\"left\">apt-get update; apt-get install package_name</td>\n</tr>\n<tr>\n<td align=\"left\">Red Hat</td>\n<td align=\"left\">yum install package_name</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>使用apt来安装emacs文本编译器</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get update; apt-get install emacs</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"通过软件包文件来安装软件\"><a href=\"#通过软件包文件来安装软件\" class=\"headerlink\" title=\"通过软件包文件来安装软件\"></a>通过软件包文件来安装软件</h1><blockquote>\n<p>使用底层工具来直接安装软件包(没有经过依赖解析)</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"left\">风格</th>\n<th align=\"left\">命令</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Debian</td>\n<td align=\"left\">dpkg –install package_file</td>\n</tr>\n<tr>\n<td align=\"left\">Ret Hat</td>\n<td align=\"left\">rpm -i package_file</td>\n</tr>\n</tbody></table>\n<h1 id=\"卸载软件\"><a href=\"#卸载软件\" class=\"headerlink\" title=\"卸载软件\"></a>卸载软件</h1><table>\n<thead>\n<tr>\n<th align=\"left\">风格</th>\n<th align=\"left\">命令</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Debian</td>\n<td align=\"left\">apt-get remove package_name</td>\n</tr>\n<tr>\n<td align=\"left\">Red Hat</td>\n<td align=\"left\">yum erase package_name</td>\n</tr>\n</tbody></table>\n<h1 id=\"经过资源库来更新软件包\"><a href=\"#经过资源库来更新软件包\" class=\"headerlink\" title=\"经过资源库来更新软件包\"></a>经过资源库来更新软件包</h1><table>\n<thead>\n<tr>\n<th align=\"left\">风格</th>\n<th align=\"left\">命令</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Debian</td>\n<td align=\"left\">apt-get update; apt-get upgrade</td>\n</tr>\n<tr>\n<td align=\"left\">Red Hat</td>\n<td align=\"left\">yum update</td>\n</tr>\n</tbody></table>\n<h1 id=\"通过软件包文件来升级软件\"><a href=\"#通过软件包文件来升级软件\" class=\"headerlink\" title=\"通过软件包文件来升级软件\"></a>通过软件包文件来升级软件</h1><table>\n<thead>\n<tr>\n<th align=\"left\">风格</th>\n<th align=\"left\">命令</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Debian</td>\n<td align=\"left\">dpkg –install package_file</td>\n</tr>\n<tr>\n<td align=\"left\">Red Hat</td>\n<td align=\"left\">rpm -U package_file</td>\n</tr>\n</tbody></table>\n<h1 id=\"软件包的安装列表\"><a href=\"#软件包的安装列表\" class=\"headerlink\" title=\"软件包的安装列表\"></a>软件包的安装列表</h1><table>\n<thead>\n<tr>\n<th align=\"left\">风格</th>\n<th align=\"left\">命令</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Debian</td>\n<td align=\"left\">dpkg –list</td>\n</tr>\n<tr>\n<td align=\"left\">Red Hat</td>\n<td align=\"left\">rpm -qa</td>\n</tr>\n</tbody></table>\n<h1 id=\"确定是否安装了一个软件包\"><a href=\"#确定是否安装了一个软件包\" class=\"headerlink\" title=\"确定是否安装了一个软件包\"></a>确定是否安装了一个软件包</h1><table>\n<thead>\n<tr>\n<th align=\"left\">风格</th>\n<th align=\"left\">命令</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Debian</td>\n<td align=\"left\">dpkg –status package_name</td>\n</tr>\n<tr>\n<td align=\"left\">Red Hat</td>\n<td align=\"left\">rpm -q package_name</td>\n</tr>\n</tbody></table>\n<h1 id=\"显示安装软件包的信息\"><a href=\"#显示安装软件包的信息\" class=\"headerlink\" title=\"显示安装软件包的信息\"></a>显示安装软件包的信息</h1><table>\n<thead>\n<tr>\n<th align=\"left\">风格</th>\n<th align=\"left\">命令</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Debian</td>\n<td align=\"left\">apt-cache show package_name</td>\n</tr>\n<tr>\n<td align=\"left\">Red Hat</td>\n<td align=\"left\">yum info package_name</td>\n</tr>\n</tbody></table>\n<h1 id=\"查看安装了某个文件的软件包\"><a href=\"#查看安装了某个文件的软件包\" class=\"headerlink\" title=\"查看安装了某个文件的软件包\"></a>查看安装了某个文件的软件包</h1><table>\n<thead>\n<tr>\n<th align=\"left\">风格</th>\n<th align=\"left\">命令</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Debian</td>\n<td align=\"left\">dpkg –search file_name</td>\n</tr>\n<tr>\n<td align=\"left\">Red Hat</td>\n<td align=\"left\">rpm -qf file_name</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>在Red Hat系统中, 查看那个软件包安装了<code>/usr/bin/vim</code>这个文件</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -qf /usr/bin/vim</span><br></pre></td></tr></table></figure>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<p><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-1Day.html\">第一天的笔记-基本的命令和使用方法</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-2Day.html\">第二天的笔记-操作文件</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-3Day.html\">第三天的笔记-查阅命令文档并创建命令别名</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-4Day.html\">第四天的笔记-重定向标准输入和输出以及处理查询结果</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-5Day.html\">第五天的笔记-命令的展开</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-6Day.html\">第六天的笔记-快捷键</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-7Day.html\">第七天的笔记-文件权限</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-8Day.html\">第八天的笔记-进程</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-9Day.html\">第九天的笔记-修改shell环境</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-10Day.html\">第十天的笔记-vim入门</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-11Day.html\">第十一天的笔记-自定义shell提示符</a></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>今天主要学习了如何使用包管理系统来进行软件的安装, 下载和更新。</p>","more":"<h1 id=\"软件包管理\"><a href=\"#软件包管理\" class=\"headerlink\" title=\"软件包管理\"></a>软件包管理</h1><blockquote>\n<p>一般而言, 大多数发行版分别属于两大包管理技术阵营: Debian的”.deb”和红帽的”.rpm”。</p>\n</blockquote>\n<p>主要的包管理系统</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">包管理系统</th>\n<th align=\"left\">发行版(部分列表)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Debian Style (.deb)</td>\n<td align=\"left\">Debian, Ubuntu, Xandros, Linspire</td>\n</tr>\n<tr>\n<td align=\"left\">Red Hat Style (.rpm)</td>\n<td align=\"left\">Fedora, CentOS, Red Hat Enterprice Linux, OpenSUSE, Mandriva, PCLinuxOS</td>\n</tr>\n</tbody></table>\n<h1 id=\"软件包管理系统的工作方式\"><a href=\"#软件包管理系统的工作方式\" class=\"headerlink\" title=\"软件包管理系统的工作方式\"></a>软件包管理系统的工作方式</h1><p>大多数软件由发行商以<code>包文件</code>的形式提供, 剩下的则以源码形式存在, 可以手动编译安装。</p>\n<h1 id=\"包文件\"><a href=\"#包文件\" class=\"headerlink\" title=\"包文件\"></a>包文件</h1><p>包文件是一个构成软件包的文件压缩集合。</p>\n<p>一个软件包可能由大量程序以及支持这些程序的数据文件组成。除了安装文件之外, 软件包文件也包括关于这个包的源数据。</p>\n<h1 id=\"资源库\"><a href=\"#资源库\" class=\"headerlink\" title=\"资源库\"></a>资源库</h1><p>资源库是一个将专门为这个系统开发的所有的软件包集中的一个位置。</p>\n<p>而且一个系统有可能维护着不同的几个资源库, 比如通常会有一个”测试”资源库, 其中包含刚刚建立的软件包, 供测试人员和一些想要体验最新功能的用户使用和测试。还会有一个”开发”资源库, 这个资源库中保存着注定要包含到下一个主要版本中的半成品软件包。</p>\n<p>另外还会有包含第三方的资源库, 有些软件包有可能会因为法律, 专利或者DRM反规避问题而不能包含到发行版中。如果想使用他们, 需要手动将他们包含到软件包管理系统的配置文件中。</p>\n<h1 id=\"依赖性\"><a href=\"#依赖性\" class=\"headerlink\" title=\"依赖性\"></a>依赖性</h1><p>软件包管理系统会提供一些依赖项解析方法, 确保安装软件包时, 其所有的依赖也被安装。</p>\n<h1 id=\"上层和底层软件包工具\"><a href=\"#上层和底层软件包工具\" class=\"headerlink\" title=\"上层和底层软件包工具\"></a>上层和底层软件包工具</h1><p>软件包工具分为上层和底层, 底层大致分为两种, 上面已经介绍过了。而上层工具会有很多种。</p>\n<blockquote>\n<p>包管理工具</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"left\">发行版</th>\n<th align=\"center\">底层工具</th>\n<th align=\"left\">上层工具</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Debian-style</td>\n<td align=\"center\">dpkg</td>\n<td align=\"left\">apt-get, aptitude</td>\n</tr>\n<tr>\n<td align=\"left\">fedora, Red Hat Enterprise Linux, CentOS</td>\n<td align=\"center\">rpm</td>\n<td align=\"left\">yum</td>\n</tr>\n</tbody></table>\n<h1 id=\"软件包查找工具\"><a href=\"#软件包查找工具\" class=\"headerlink\" title=\"软件包查找工具\"></a>软件包查找工具</h1><p>| 风格 | 命令 |<br>| :—– | :——: | :——- |<br>| Debian | apt-get update; apt-cache search serarch_string |<br>| Red Hat | yum search search_string |</p>\n<blockquote>\n<p>使用yum搜索emacs文本编译器</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum search emacs</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>使用apt搜索</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get update; apt-cache search emacs</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"从资源库中安装一个软件包\"><a href=\"#从资源库中安装一个软件包\" class=\"headerlink\" title=\"从资源库中安装一个软件包\"></a>从资源库中安装一个软件包</h1><table>\n<thead>\n<tr>\n<th align=\"left\">风格</th>\n<th align=\"left\">命令</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Debian</td>\n<td align=\"left\">apt-get update; apt-get install package_name</td>\n</tr>\n<tr>\n<td align=\"left\">Red Hat</td>\n<td align=\"left\">yum install package_name</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>使用apt来安装emacs文本编译器</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get update; apt-get install emacs</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"通过软件包文件来安装软件\"><a href=\"#通过软件包文件来安装软件\" class=\"headerlink\" title=\"通过软件包文件来安装软件\"></a>通过软件包文件来安装软件</h1><blockquote>\n<p>使用底层工具来直接安装软件包(没有经过依赖解析)</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"left\">风格</th>\n<th align=\"left\">命令</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Debian</td>\n<td align=\"left\">dpkg –install package_file</td>\n</tr>\n<tr>\n<td align=\"left\">Ret Hat</td>\n<td align=\"left\">rpm -i package_file</td>\n</tr>\n</tbody></table>\n<h1 id=\"卸载软件\"><a href=\"#卸载软件\" class=\"headerlink\" title=\"卸载软件\"></a>卸载软件</h1><table>\n<thead>\n<tr>\n<th align=\"left\">风格</th>\n<th align=\"left\">命令</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Debian</td>\n<td align=\"left\">apt-get remove package_name</td>\n</tr>\n<tr>\n<td align=\"left\">Red Hat</td>\n<td align=\"left\">yum erase package_name</td>\n</tr>\n</tbody></table>\n<h1 id=\"经过资源库来更新软件包\"><a href=\"#经过资源库来更新软件包\" class=\"headerlink\" title=\"经过资源库来更新软件包\"></a>经过资源库来更新软件包</h1><table>\n<thead>\n<tr>\n<th align=\"left\">风格</th>\n<th align=\"left\">命令</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Debian</td>\n<td align=\"left\">apt-get update; apt-get upgrade</td>\n</tr>\n<tr>\n<td align=\"left\">Red Hat</td>\n<td align=\"left\">yum update</td>\n</tr>\n</tbody></table>\n<h1 id=\"通过软件包文件来升级软件\"><a href=\"#通过软件包文件来升级软件\" class=\"headerlink\" title=\"通过软件包文件来升级软件\"></a>通过软件包文件来升级软件</h1><table>\n<thead>\n<tr>\n<th align=\"left\">风格</th>\n<th align=\"left\">命令</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Debian</td>\n<td align=\"left\">dpkg –install package_file</td>\n</tr>\n<tr>\n<td align=\"left\">Red Hat</td>\n<td align=\"left\">rpm -U package_file</td>\n</tr>\n</tbody></table>\n<h1 id=\"软件包的安装列表\"><a href=\"#软件包的安装列表\" class=\"headerlink\" title=\"软件包的安装列表\"></a>软件包的安装列表</h1><table>\n<thead>\n<tr>\n<th align=\"left\">风格</th>\n<th align=\"left\">命令</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Debian</td>\n<td align=\"left\">dpkg –list</td>\n</tr>\n<tr>\n<td align=\"left\">Red Hat</td>\n<td align=\"left\">rpm -qa</td>\n</tr>\n</tbody></table>\n<h1 id=\"确定是否安装了一个软件包\"><a href=\"#确定是否安装了一个软件包\" class=\"headerlink\" title=\"确定是否安装了一个软件包\"></a>确定是否安装了一个软件包</h1><table>\n<thead>\n<tr>\n<th align=\"left\">风格</th>\n<th align=\"left\">命令</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Debian</td>\n<td align=\"left\">dpkg –status package_name</td>\n</tr>\n<tr>\n<td align=\"left\">Red Hat</td>\n<td align=\"left\">rpm -q package_name</td>\n</tr>\n</tbody></table>\n<h1 id=\"显示安装软件包的信息\"><a href=\"#显示安装软件包的信息\" class=\"headerlink\" title=\"显示安装软件包的信息\"></a>显示安装软件包的信息</h1><table>\n<thead>\n<tr>\n<th align=\"left\">风格</th>\n<th align=\"left\">命令</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Debian</td>\n<td align=\"left\">apt-cache show package_name</td>\n</tr>\n<tr>\n<td align=\"left\">Red Hat</td>\n<td align=\"left\">yum info package_name</td>\n</tr>\n</tbody></table>\n<h1 id=\"查看安装了某个文件的软件包\"><a href=\"#查看安装了某个文件的软件包\" class=\"headerlink\" title=\"查看安装了某个文件的软件包\"></a>查看安装了某个文件的软件包</h1><table>\n<thead>\n<tr>\n<th align=\"left\">风格</th>\n<th align=\"left\">命令</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Debian</td>\n<td align=\"left\">dpkg –search file_name</td>\n</tr>\n<tr>\n<td align=\"left\">Red Hat</td>\n<td align=\"left\">rpm -qf file_name</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>在Red Hat系统中, 查看那个软件包安装了<code>/usr/bin/vim</code>这个文件</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -qf /usr/bin/vim</span><br></pre></td></tr></table></figure>"},{"title":"快乐的Linux命令行笔记-创建映像","date":"2019-02-18T15:12:32.000Z","_content":"\n[第一天的笔记-基本的命令和使用方法](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-1Day.html)\n[第二天的笔记-操作文件](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-2Day.html)\n[第三天的笔记-查阅命令文档并创建命令别名](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-3Day.html)\n[第四天的笔记-重定向标准输入和输出以及处理查询结果](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-4Day.html)\n[第五天的笔记-命令的展开](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-5Day.html)\n[第六天的笔记-快捷键](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-6Day.html)\n[第七天的笔记-文件权限](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-7Day.html)\n[第八天的笔记-进程](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-8Day.html)\n[第九天的笔记-修改shell环境](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-9Day.html)\n[第十天的笔记-vim入门](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-10Day.html)\n[第十一天的笔记-自定义shell提示符](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-11Day.html)\n[第十二天的笔记-软件包管理系统](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-12Day.html)\n# 总结\n今天学习了如何挂载和卸载设备, 创建映像文件, 将映像文件写入到CD-ROM中, 使用md5检测文件完整性。\n<!--more--> \n# 挂载和卸载存储设备\n\n在`/etc/fstab`中, 列出了系统启动时要挂载的设备, 例如(来自Fedora 7系统的文件实例):\n\n    LABEL=/12       /       ext3        defaults        1       1\n    LABEL=/home     /home   ext3        defaults        1       2\n    LABEL=/boot     /boot   ext3        defaults        1       2\n\n> 字段说明\n\n| 字段 | 内容 | 说明 |\n| :--- | :--- | :--- |\n| 1 | 设备名 | 传统上, 这个字段包含与物理设备相关联的设备文件的实际名字, 比如说/dev/hda1(第一个IDE通道上第一个主设备分区)。然而今天的计算机, 有很多热插拔设备(像USB驱动设备), 许多现代的Linux发行版用一个文本标签和设备相关联。当这个设备连接到系统中时, 这个标签(当储存媒介格式化时, 这个标签会被添加到存储媒介中)会被操作系统读取, 那样的话, 不管赋给实际物理设备哪个设备文件, 这个设备仍能被系统正确地识别。 |\n| 2 | 挂载点 | 设备所连接到的文件系统树的目录 |\n| 3 | 文件系统 | Linux 允许挂在许多文件系统类型。大多数本地的Linux文件系统是ext3, 但是也支持很多其它的, 比如FAT16(msdos), FAT32(vfat), NTFS(ntfs), CD-ROM(iso9660), 等等。 |\n| 4 | 选项 | 文件系统可以通过各种各样的选项来挂载。有可能, 例如, 挂载只读的文件系统, 或者挂载阻止执行任何程序的文件系统(一个有用的安全特性, 避免删除媒介。) |\n| 5 | 频率 | 一位数字, 制定是否和在什么时间用dump命令来备份一个文件系统。 |\n| 6 | 次序 | 一位数字, 指定fsck命令按照什么次序来检查文件系统。 |\n\n## 查看挂载的文件系统列表\n\n使用mount命令来查看当前挂载的文件系统\n\n```shell\nmount\n```\n显示的列表的格式是:设备 on 挂载点(文件路径) type 文件系统类型 (选项), 比如:\n\npstore on /sys/fs/cgroup/perf_event type cgroup (rw,nosuid,modev,noexec,relatime,hugetlb)\n\n## 挂载和卸载设备\n\n首先插入一个移动设备, 系统会自动挂载该设备。\n\n使用`mount`命令来查看刚刚挂载的设备名。\n\n之后卸载这个设备, 重新挂载到另一个位置。\n\n```shell\numount /dev/hdc\n# 创建一个文件夹用来挂载该设备\nmkdir /mnt/cdrom\n# -t 选项用来指定文件系统类型\nmount -t iso9660 /dev/hdc /mnt/cdrom\n```\n> 注意, 卸载需要使用超级用户权限。\n\n然后就可以cd到该文件夹下, 查看该设备中的文件。\n\n```shell\ncd /mnt/cdrom\nls\n```\n> 在早期, 当人们编辑完文档需要打印时, 虽然电脑读取速度很快, 可是打印机的接受速度很慢, 在打印的过程中电脑什么也做不了, 所以加入了缓存。计算机先将文档快速的输入到缓存中去, 之后计算机可以做其他事情, 而缓存中的文档则以打印机可以接受的速度进行输入。\n现在不只是打印机这样做, 计算机中也有缓存。操作系统会尽可能的将数据写入到内存中, 之后在合适的时间进行真正的写入到物理设备中。在执行卸载操作之前, 操作系统会将内存中所有应该被写入到物理设备中的数据写入, 在进行卸载, 而如果不执行卸载操作则会导致文件损坏。\n\n# 确定设备名称\n\n如果遇到了不支持自动挂载的环境, 则需要自己查找设备名称来进行挂载。\n\n> 查看所有设备\n\n```shell\nls /dev\n```\n\nLinux 存储设备名称\n\n| 模式 | 设备 |\n| :--- | :--- |\n| /dev/fd* | 软盘驱动器 |\n| /dev/hd* | 老系统中的 IDE(PATA) 磁盘。典型的主板包含两个IDE连接器或者是通道, 每个连接器带有一根缆线, 每根缆线上有两个硬盘驱动器连接点。缆线上第一个驱动器叫做主设备, 第二个叫做从设备。设备名称这样安排, /dev/hda 是指第一通道上的主设备名; /dev/hdb 是第一通道上的从设备名; /dev/hdc 是第二通道上的主设备名, 等等。末尾的数字表示硬盘驱动器上的分区。例如, /dev/hda1 是指系统中第一硬盘驱动器上的第一个分区, 而 /dev/hda 则是指整个硬盘驱动器。 |\n| /dev/lp* | 打印机 |\n| /dev/sd* | SCSI 磁盘。在最近的Linux 系统中, 内核把所有类似于磁盘的设备(包括 PATA/SATA 硬盘, 闪存, 和USB存储设备, 比如说可移动的音乐播放器和数码相机) 看作 SCSI 磁盘。剩下的命名系统类似于上述所描述的旧的 /dev/hd* 命名方案。 |\n| /dev/sr* | 光盘(CD/DVD 读取器和烧写器) |\n\n> 查看刚刚插入的设备名称的方法\n\n```shell\n# 启动一个实时查看文件\nsudo tail -f /var/log/messages\n# 插入这个设备\n# 当日志停止滚动时, 输入ctrl-c, 查看日志, 有一行日志会显示该设备的名字, 使用这个名字挂载设备\nmkdir /mnt/flash\nmount /dev/sdb1 /mnt/flash\n```\n\n# 创建新的文件系统\n\n即格式化移动设备。\n\n## 使用fdisk来操作分区\n\n```shell\n# 卸载设备, 这里指定的是分区号\nsudo umount /dev/sdb1\n# 调用fdisk, 这里指定的是设备名称\nsudo fdisk /dev/sdb\n```\n\n之后会显示fdisk的命令:\n\n```shell\nCommand (m for help):\n```\n\n输入`p`会打印这个设备的分区表\n\n输入`l`会打印所有可用的**分区类型**列表, 可以看到83是针对Linux系统的ID号\n\n输入`t`来更改分区ID号, 例如:\n\n```shell\nCommand (m for help): t\nSelected partition 1\nHex code (type L to list codes): 83\nChanged system type of partition 1 to 83 (Linux)\n```\n\n输入`w`将修改过的设置从内存写入到物理设备\n\n## 使用mkfs命令创建一个新的文件系统\n\n```shell\nsudo mkfs -t ext3 /dev/sdb1\n```\n\n`-t`来指定文件系统类型, 紧跟着的是需要格式化的分区\n\n[这篇博客](https://www.cnblogs.com/daduryi/p/6619028.html?utm_source=itdadao&utm_medium=referral)介绍了各个文件系统类型。\n\n## 测试和修复文件系统\n\n使用fsck命令检查驱动器(需要先执行卸载)\n\n```shell\nsudo fsck /dev/sdb1\n```\n\n## 格式化软盘\n步骤:\n将软盘进行低级格式化\n创建何使的文件系统\n\n使用fdformat来格式化软盘。\n\n```shell\n# 指定软盘设备名称\nsudo fdformat /dev/fd0\n```\n\n接下来创建一个FAT文件系统\n\n```shell\nsudo mkfs -t msdos /dev/fd0\n```\n\n## 移动或复制整个设备中的所有数据\n\n```shell\ndd if=input_file of=output_file [bs=block_size [count=blocks]]\n```\n\n如果有两个相同容量的USB闪存驱动器, 并且要精确的把第一个驱动器中的内容复制给第二个(/dev/sdb, /dev/sdc)\n\n```shell\ndd if=/dev/sdb of=/dev/sdc\n```\n\n将驱动器中的内容复制到一个普通文件中:\n\n```shell\ndd if=/dev/sdb of=flash_drive.img\n```\n\n## 创建 CD-ROM 映像\n\n步骤:\n\n* 构建一个 ISO映像文件\n* 将这个映像文件写入到CD-ROM媒介中\n\n### 制作ISO映像文件\n\n```shell\ndd if=/dev/cdrom of=ubuntu.iso\n```\n\n> 对于音频CD, 可以使用cdrdao命令\n\n### 使用某一个目录来创建映像文件\n\n```shell\ngenisoimage -o cd-rom.iso -R -J ~/cd-rom-files\n```\n\n* `-R`选项添加元数据为Rock Ridge扩展, 这允许使用长文件名和 `POSIX`风格的文件权限\n* `-J`选项使 Joliet 扩展生效, 这样 Windows中就支持长文件名了\n\n> wodim 和 genisoimage 这两个程序分别替代了 cdrecord 和 mkisofs, 它们是cdrtools 软件包的一部分。\n\n### 将ISO写入CD-ROM中\n\n> 直接挂载一个ISO镜像\n\n```shell\nmkdir /mnt/iso_image\nmount -t iso9660 -o loop image.iso /mnt/iso_image\n```\n\n> 清除一张可重写入的CD-ROM\n\n```shell\nwodim dev=/dev/cdrw black=fast\n```\n\n> 写入镜像\n\n```shell\nwodim dev=/dev/cdrw image.iso\n```\n\n# 使用md5sum校验文件的完整性\n\n每一个文件都有一个独一无二的md5sum, 除非两个文件一摸一样。\n\n可以通过md5sum命令来查看生成的数字, 是否与提供者所提供的数字完全一样。\n\n```shell\nmd5sum image.iso\n```\n\n最后有一个比较复杂的检查文件完整性的命令:\n\n```shell\nmd5sum dvd-image.iso; dd if=/dev/dvd bs=2048 count=$(( $( stat -c \"%s\" dvd-image.iso) /2048 ))\n```\n\n[这里是有关stat命令的介绍](https://blog.csdn.net/paicmis/article/details/60479639)\n","source":"_posts/note/read_note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-13Day.md","raw":"---\ntitle: 快乐的Linux命令行笔记-创建映像\ndate: 2019-02-18 23:12:32\ncategories:\n- 笔记\n- 读书笔记\n- 快乐的Linux命令行\ntags:\n- 笔记\n- 快乐的Linux命令行\n- linux\n---\n\n[第一天的笔记-基本的命令和使用方法](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-1Day.html)\n[第二天的笔记-操作文件](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-2Day.html)\n[第三天的笔记-查阅命令文档并创建命令别名](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-3Day.html)\n[第四天的笔记-重定向标准输入和输出以及处理查询结果](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-4Day.html)\n[第五天的笔记-命令的展开](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-5Day.html)\n[第六天的笔记-快捷键](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-6Day.html)\n[第七天的笔记-文件权限](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-7Day.html)\n[第八天的笔记-进程](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-8Day.html)\n[第九天的笔记-修改shell环境](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-9Day.html)\n[第十天的笔记-vim入门](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-10Day.html)\n[第十一天的笔记-自定义shell提示符](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-11Day.html)\n[第十二天的笔记-软件包管理系统](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-12Day.html)\n# 总结\n今天学习了如何挂载和卸载设备, 创建映像文件, 将映像文件写入到CD-ROM中, 使用md5检测文件完整性。\n<!--more--> \n# 挂载和卸载存储设备\n\n在`/etc/fstab`中, 列出了系统启动时要挂载的设备, 例如(来自Fedora 7系统的文件实例):\n\n    LABEL=/12       /       ext3        defaults        1       1\n    LABEL=/home     /home   ext3        defaults        1       2\n    LABEL=/boot     /boot   ext3        defaults        1       2\n\n> 字段说明\n\n| 字段 | 内容 | 说明 |\n| :--- | :--- | :--- |\n| 1 | 设备名 | 传统上, 这个字段包含与物理设备相关联的设备文件的实际名字, 比如说/dev/hda1(第一个IDE通道上第一个主设备分区)。然而今天的计算机, 有很多热插拔设备(像USB驱动设备), 许多现代的Linux发行版用一个文本标签和设备相关联。当这个设备连接到系统中时, 这个标签(当储存媒介格式化时, 这个标签会被添加到存储媒介中)会被操作系统读取, 那样的话, 不管赋给实际物理设备哪个设备文件, 这个设备仍能被系统正确地识别。 |\n| 2 | 挂载点 | 设备所连接到的文件系统树的目录 |\n| 3 | 文件系统 | Linux 允许挂在许多文件系统类型。大多数本地的Linux文件系统是ext3, 但是也支持很多其它的, 比如FAT16(msdos), FAT32(vfat), NTFS(ntfs), CD-ROM(iso9660), 等等。 |\n| 4 | 选项 | 文件系统可以通过各种各样的选项来挂载。有可能, 例如, 挂载只读的文件系统, 或者挂载阻止执行任何程序的文件系统(一个有用的安全特性, 避免删除媒介。) |\n| 5 | 频率 | 一位数字, 制定是否和在什么时间用dump命令来备份一个文件系统。 |\n| 6 | 次序 | 一位数字, 指定fsck命令按照什么次序来检查文件系统。 |\n\n## 查看挂载的文件系统列表\n\n使用mount命令来查看当前挂载的文件系统\n\n```shell\nmount\n```\n显示的列表的格式是:设备 on 挂载点(文件路径) type 文件系统类型 (选项), 比如:\n\npstore on /sys/fs/cgroup/perf_event type cgroup (rw,nosuid,modev,noexec,relatime,hugetlb)\n\n## 挂载和卸载设备\n\n首先插入一个移动设备, 系统会自动挂载该设备。\n\n使用`mount`命令来查看刚刚挂载的设备名。\n\n之后卸载这个设备, 重新挂载到另一个位置。\n\n```shell\numount /dev/hdc\n# 创建一个文件夹用来挂载该设备\nmkdir /mnt/cdrom\n# -t 选项用来指定文件系统类型\nmount -t iso9660 /dev/hdc /mnt/cdrom\n```\n> 注意, 卸载需要使用超级用户权限。\n\n然后就可以cd到该文件夹下, 查看该设备中的文件。\n\n```shell\ncd /mnt/cdrom\nls\n```\n> 在早期, 当人们编辑完文档需要打印时, 虽然电脑读取速度很快, 可是打印机的接受速度很慢, 在打印的过程中电脑什么也做不了, 所以加入了缓存。计算机先将文档快速的输入到缓存中去, 之后计算机可以做其他事情, 而缓存中的文档则以打印机可以接受的速度进行输入。\n现在不只是打印机这样做, 计算机中也有缓存。操作系统会尽可能的将数据写入到内存中, 之后在合适的时间进行真正的写入到物理设备中。在执行卸载操作之前, 操作系统会将内存中所有应该被写入到物理设备中的数据写入, 在进行卸载, 而如果不执行卸载操作则会导致文件损坏。\n\n# 确定设备名称\n\n如果遇到了不支持自动挂载的环境, 则需要自己查找设备名称来进行挂载。\n\n> 查看所有设备\n\n```shell\nls /dev\n```\n\nLinux 存储设备名称\n\n| 模式 | 设备 |\n| :--- | :--- |\n| /dev/fd* | 软盘驱动器 |\n| /dev/hd* | 老系统中的 IDE(PATA) 磁盘。典型的主板包含两个IDE连接器或者是通道, 每个连接器带有一根缆线, 每根缆线上有两个硬盘驱动器连接点。缆线上第一个驱动器叫做主设备, 第二个叫做从设备。设备名称这样安排, /dev/hda 是指第一通道上的主设备名; /dev/hdb 是第一通道上的从设备名; /dev/hdc 是第二通道上的主设备名, 等等。末尾的数字表示硬盘驱动器上的分区。例如, /dev/hda1 是指系统中第一硬盘驱动器上的第一个分区, 而 /dev/hda 则是指整个硬盘驱动器。 |\n| /dev/lp* | 打印机 |\n| /dev/sd* | SCSI 磁盘。在最近的Linux 系统中, 内核把所有类似于磁盘的设备(包括 PATA/SATA 硬盘, 闪存, 和USB存储设备, 比如说可移动的音乐播放器和数码相机) 看作 SCSI 磁盘。剩下的命名系统类似于上述所描述的旧的 /dev/hd* 命名方案。 |\n| /dev/sr* | 光盘(CD/DVD 读取器和烧写器) |\n\n> 查看刚刚插入的设备名称的方法\n\n```shell\n# 启动一个实时查看文件\nsudo tail -f /var/log/messages\n# 插入这个设备\n# 当日志停止滚动时, 输入ctrl-c, 查看日志, 有一行日志会显示该设备的名字, 使用这个名字挂载设备\nmkdir /mnt/flash\nmount /dev/sdb1 /mnt/flash\n```\n\n# 创建新的文件系统\n\n即格式化移动设备。\n\n## 使用fdisk来操作分区\n\n```shell\n# 卸载设备, 这里指定的是分区号\nsudo umount /dev/sdb1\n# 调用fdisk, 这里指定的是设备名称\nsudo fdisk /dev/sdb\n```\n\n之后会显示fdisk的命令:\n\n```shell\nCommand (m for help):\n```\n\n输入`p`会打印这个设备的分区表\n\n输入`l`会打印所有可用的**分区类型**列表, 可以看到83是针对Linux系统的ID号\n\n输入`t`来更改分区ID号, 例如:\n\n```shell\nCommand (m for help): t\nSelected partition 1\nHex code (type L to list codes): 83\nChanged system type of partition 1 to 83 (Linux)\n```\n\n输入`w`将修改过的设置从内存写入到物理设备\n\n## 使用mkfs命令创建一个新的文件系统\n\n```shell\nsudo mkfs -t ext3 /dev/sdb1\n```\n\n`-t`来指定文件系统类型, 紧跟着的是需要格式化的分区\n\n[这篇博客](https://www.cnblogs.com/daduryi/p/6619028.html?utm_source=itdadao&utm_medium=referral)介绍了各个文件系统类型。\n\n## 测试和修复文件系统\n\n使用fsck命令检查驱动器(需要先执行卸载)\n\n```shell\nsudo fsck /dev/sdb1\n```\n\n## 格式化软盘\n步骤:\n将软盘进行低级格式化\n创建何使的文件系统\n\n使用fdformat来格式化软盘。\n\n```shell\n# 指定软盘设备名称\nsudo fdformat /dev/fd0\n```\n\n接下来创建一个FAT文件系统\n\n```shell\nsudo mkfs -t msdos /dev/fd0\n```\n\n## 移动或复制整个设备中的所有数据\n\n```shell\ndd if=input_file of=output_file [bs=block_size [count=blocks]]\n```\n\n如果有两个相同容量的USB闪存驱动器, 并且要精确的把第一个驱动器中的内容复制给第二个(/dev/sdb, /dev/sdc)\n\n```shell\ndd if=/dev/sdb of=/dev/sdc\n```\n\n将驱动器中的内容复制到一个普通文件中:\n\n```shell\ndd if=/dev/sdb of=flash_drive.img\n```\n\n## 创建 CD-ROM 映像\n\n步骤:\n\n* 构建一个 ISO映像文件\n* 将这个映像文件写入到CD-ROM媒介中\n\n### 制作ISO映像文件\n\n```shell\ndd if=/dev/cdrom of=ubuntu.iso\n```\n\n> 对于音频CD, 可以使用cdrdao命令\n\n### 使用某一个目录来创建映像文件\n\n```shell\ngenisoimage -o cd-rom.iso -R -J ~/cd-rom-files\n```\n\n* `-R`选项添加元数据为Rock Ridge扩展, 这允许使用长文件名和 `POSIX`风格的文件权限\n* `-J`选项使 Joliet 扩展生效, 这样 Windows中就支持长文件名了\n\n> wodim 和 genisoimage 这两个程序分别替代了 cdrecord 和 mkisofs, 它们是cdrtools 软件包的一部分。\n\n### 将ISO写入CD-ROM中\n\n> 直接挂载一个ISO镜像\n\n```shell\nmkdir /mnt/iso_image\nmount -t iso9660 -o loop image.iso /mnt/iso_image\n```\n\n> 清除一张可重写入的CD-ROM\n\n```shell\nwodim dev=/dev/cdrw black=fast\n```\n\n> 写入镜像\n\n```shell\nwodim dev=/dev/cdrw image.iso\n```\n\n# 使用md5sum校验文件的完整性\n\n每一个文件都有一个独一无二的md5sum, 除非两个文件一摸一样。\n\n可以通过md5sum命令来查看生成的数字, 是否与提供者所提供的数字完全一样。\n\n```shell\nmd5sum image.iso\n```\n\n最后有一个比较复杂的检查文件完整性的命令:\n\n```shell\nmd5sum dvd-image.iso; dd if=/dev/dvd bs=2048 count=$(( $( stat -c \"%s\" dvd-image.iso) /2048 ))\n```\n\n[这里是有关stat命令的介绍](https://blog.csdn.net/paicmis/article/details/60479639)\n","slug":"note/read_note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-13Day","published":1,"updated":"2022-10-07T13:04:00.889Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejwe008i3vsb90cka780","content":"<p><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-1Day.html\">第一天的笔记-基本的命令和使用方法</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-2Day.html\">第二天的笔记-操作文件</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-3Day.html\">第三天的笔记-查阅命令文档并创建命令别名</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-4Day.html\">第四天的笔记-重定向标准输入和输出以及处理查询结果</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-5Day.html\">第五天的笔记-命令的展开</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-6Day.html\">第六天的笔记-快捷键</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-7Day.html\">第七天的笔记-文件权限</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-8Day.html\">第八天的笔记-进程</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-9Day.html\">第九天的笔记-修改shell环境</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-10Day.html\">第十天的笔记-vim入门</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-11Day.html\">第十一天的笔记-自定义shell提示符</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-12Day.html\">第十二天的笔记-软件包管理系统</a></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>今天学习了如何挂载和卸载设备, 创建映像文件, 将映像文件写入到CD-ROM中, 使用md5检测文件完整性。</p>\n<span id=\"more\"></span> \n<h1 id=\"挂载和卸载存储设备\"><a href=\"#挂载和卸载存储设备\" class=\"headerlink\" title=\"挂载和卸载存储设备\"></a>挂载和卸载存储设备</h1><p>在<code>/etc/fstab</code>中, 列出了系统启动时要挂载的设备, 例如(来自Fedora 7系统的文件实例):</p>\n<pre><code>LABEL=/12       /       ext3        defaults        1       1\nLABEL=/home     /home   ext3        defaults        1       2\nLABEL=/boot     /boot   ext3        defaults        1       2\n</code></pre>\n<blockquote>\n<p>字段说明</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"left\">字段</th>\n<th align=\"left\">内容</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">设备名</td>\n<td align=\"left\">传统上, 这个字段包含与物理设备相关联的设备文件的实际名字, 比如说&#x2F;dev&#x2F;hda1(第一个IDE通道上第一个主设备分区)。然而今天的计算机, 有很多热插拔设备(像USB驱动设备), 许多现代的Linux发行版用一个文本标签和设备相关联。当这个设备连接到系统中时, 这个标签(当储存媒介格式化时, 这个标签会被添加到存储媒介中)会被操作系统读取, 那样的话, 不管赋给实际物理设备哪个设备文件, 这个设备仍能被系统正确地识别。</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">挂载点</td>\n<td align=\"left\">设备所连接到的文件系统树的目录</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">文件系统</td>\n<td align=\"left\">Linux 允许挂在许多文件系统类型。大多数本地的Linux文件系统是ext3, 但是也支持很多其它的, 比如FAT16(msdos), FAT32(vfat), NTFS(ntfs), CD-ROM(iso9660), 等等。</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">选项</td>\n<td align=\"left\">文件系统可以通过各种各样的选项来挂载。有可能, 例如, 挂载只读的文件系统, 或者挂载阻止执行任何程序的文件系统(一个有用的安全特性, 避免删除媒介。)</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">频率</td>\n<td align=\"left\">一位数字, 制定是否和在什么时间用dump命令来备份一个文件系统。</td>\n</tr>\n<tr>\n<td align=\"left\">6</td>\n<td align=\"left\">次序</td>\n<td align=\"left\">一位数字, 指定fsck命令按照什么次序来检查文件系统。</td>\n</tr>\n</tbody></table>\n<h2 id=\"查看挂载的文件系统列表\"><a href=\"#查看挂载的文件系统列表\" class=\"headerlink\" title=\"查看挂载的文件系统列表\"></a>查看挂载的文件系统列表</h2><p>使用mount命令来查看当前挂载的文件系统</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mount</span><br></pre></td></tr></table></figure>\n<p>显示的列表的格式是:设备 on 挂载点(文件路径) type 文件系统类型 (选项), 比如:</p>\n<p>pstore on &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;perf_event type cgroup (rw,nosuid,modev,noexec,relatime,hugetlb)</p>\n<h2 id=\"挂载和卸载设备\"><a href=\"#挂载和卸载设备\" class=\"headerlink\" title=\"挂载和卸载设备\"></a>挂载和卸载设备</h2><p>首先插入一个移动设备, 系统会自动挂载该设备。</p>\n<p>使用<code>mount</code>命令来查看刚刚挂载的设备名。</p>\n<p>之后卸载这个设备, 重新挂载到另一个位置。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">umount /dev/hdc</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 创建一个文件夹用来挂载该设备</span></span><br><span class=\"line\">mkdir /mnt/cdrom</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> -t 选项用来指定文件系统类型</span></span><br><span class=\"line\">mount -t iso9660 /dev/hdc /mnt/cdrom</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意, 卸载需要使用超级用户权限。</p>\n</blockquote>\n<p>然后就可以cd到该文件夹下, 查看该设备中的文件。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /mnt/cdrom</span><br><span class=\"line\">ls</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在早期, 当人们编辑完文档需要打印时, 虽然电脑读取速度很快, 可是打印机的接受速度很慢, 在打印的过程中电脑什么也做不了, 所以加入了缓存。计算机先将文档快速的输入到缓存中去, 之后计算机可以做其他事情, 而缓存中的文档则以打印机可以接受的速度进行输入。<br>现在不只是打印机这样做, 计算机中也有缓存。操作系统会尽可能的将数据写入到内存中, 之后在合适的时间进行真正的写入到物理设备中。在执行卸载操作之前, 操作系统会将内存中所有应该被写入到物理设备中的数据写入, 在进行卸载, 而如果不执行卸载操作则会导致文件损坏。</p>\n</blockquote>\n<h1 id=\"确定设备名称\"><a href=\"#确定设备名称\" class=\"headerlink\" title=\"确定设备名称\"></a>确定设备名称</h1><p>如果遇到了不支持自动挂载的环境, 则需要自己查找设备名称来进行挂载。</p>\n<blockquote>\n<p>查看所有设备</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls /dev</span><br></pre></td></tr></table></figure>\n\n<p>Linux 存储设备名称</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">模式</th>\n<th align=\"left\">设备</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">&#x2F;dev&#x2F;fd*</td>\n<td align=\"left\">软盘驱动器</td>\n</tr>\n<tr>\n<td align=\"left\">&#x2F;dev&#x2F;hd*</td>\n<td align=\"left\">老系统中的 IDE(PATA) 磁盘。典型的主板包含两个IDE连接器或者是通道, 每个连接器带有一根缆线, 每根缆线上有两个硬盘驱动器连接点。缆线上第一个驱动器叫做主设备, 第二个叫做从设备。设备名称这样安排, &#x2F;dev&#x2F;hda 是指第一通道上的主设备名; &#x2F;dev&#x2F;hdb 是第一通道上的从设备名; &#x2F;dev&#x2F;hdc 是第二通道上的主设备名, 等等。末尾的数字表示硬盘驱动器上的分区。例如, &#x2F;dev&#x2F;hda1 是指系统中第一硬盘驱动器上的第一个分区, 而 &#x2F;dev&#x2F;hda 则是指整个硬盘驱动器。</td>\n</tr>\n<tr>\n<td align=\"left\">&#x2F;dev&#x2F;lp*</td>\n<td align=\"left\">打印机</td>\n</tr>\n<tr>\n<td align=\"left\">&#x2F;dev&#x2F;sd*</td>\n<td align=\"left\">SCSI 磁盘。在最近的Linux 系统中, 内核把所有类似于磁盘的设备(包括 PATA&#x2F;SATA 硬盘, 闪存, 和USB存储设备, 比如说可移动的音乐播放器和数码相机) 看作 SCSI 磁盘。剩下的命名系统类似于上述所描述的旧的 &#x2F;dev&#x2F;hd* 命名方案。</td>\n</tr>\n<tr>\n<td align=\"left\">&#x2F;dev&#x2F;sr*</td>\n<td align=\"left\">光盘(CD&#x2F;DVD 读取器和烧写器)</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>查看刚刚插入的设备名称的方法</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 启动一个实时查看文件</span></span><br><span class=\"line\">sudo tail -f /var/log/messages</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 插入这个设备</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 当日志停止滚动时, 输入ctrl-c, 查看日志, 有一行日志会显示该设备的名字, 使用这个名字挂载设备</span></span><br><span class=\"line\">mkdir /mnt/flash</span><br><span class=\"line\">mount /dev/sdb1 /mnt/flash</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"创建新的文件系统\"><a href=\"#创建新的文件系统\" class=\"headerlink\" title=\"创建新的文件系统\"></a>创建新的文件系统</h1><p>即格式化移动设备。</p>\n<h2 id=\"使用fdisk来操作分区\"><a href=\"#使用fdisk来操作分区\" class=\"headerlink\" title=\"使用fdisk来操作分区\"></a>使用fdisk来操作分区</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 卸载设备, 这里指定的是分区号</span></span><br><span class=\"line\">sudo umount /dev/sdb1</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 调用fdisk, 这里指定的是设备名称</span></span><br><span class=\"line\">sudo fdisk /dev/sdb</span><br></pre></td></tr></table></figure>\n\n<p>之后会显示fdisk的命令:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Command (m for help):</span><br></pre></td></tr></table></figure>\n\n<p>输入<code>p</code>会打印这个设备的分区表</p>\n<p>输入<code>l</code>会打印所有可用的<strong>分区类型</strong>列表, 可以看到83是针对Linux系统的ID号</p>\n<p>输入<code>t</code>来更改分区ID号, 例如:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Command (m for help): t</span><br><span class=\"line\">Selected partition 1</span><br><span class=\"line\">Hex code (type L to list codes): 83</span><br><span class=\"line\">Changed system type of partition 1 to 83 (Linux)</span><br></pre></td></tr></table></figure>\n\n<p>输入<code>w</code>将修改过的设置从内存写入到物理设备</p>\n<h2 id=\"使用mkfs命令创建一个新的文件系统\"><a href=\"#使用mkfs命令创建一个新的文件系统\" class=\"headerlink\" title=\"使用mkfs命令创建一个新的文件系统\"></a>使用mkfs命令创建一个新的文件系统</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkfs -t ext3 /dev/sdb1</span><br></pre></td></tr></table></figure>\n\n<p><code>-t</code>来指定文件系统类型, 紧跟着的是需要格式化的分区</p>\n<p><a href=\"https://www.cnblogs.com/daduryi/p/6619028.html?utm_source=itdadao&utm_medium=referral\">这篇博客</a>介绍了各个文件系统类型。</p>\n<h2 id=\"测试和修复文件系统\"><a href=\"#测试和修复文件系统\" class=\"headerlink\" title=\"测试和修复文件系统\"></a>测试和修复文件系统</h2><p>使用fsck命令检查驱动器(需要先执行卸载)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo fsck /dev/sdb1</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"格式化软盘\"><a href=\"#格式化软盘\" class=\"headerlink\" title=\"格式化软盘\"></a>格式化软盘</h2><p>步骤:<br>将软盘进行低级格式化<br>创建何使的文件系统</p>\n<p>使用fdformat来格式化软盘。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 指定软盘设备名称</span></span><br><span class=\"line\">sudo fdformat /dev/fd0</span><br></pre></td></tr></table></figure>\n\n<p>接下来创建一个FAT文件系统</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkfs -t msdos /dev/fd0</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"移动或复制整个设备中的所有数据\"><a href=\"#移动或复制整个设备中的所有数据\" class=\"headerlink\" title=\"移动或复制整个设备中的所有数据\"></a>移动或复制整个设备中的所有数据</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dd if=input_file of=output_file [bs=block_size [count=blocks]]</span><br></pre></td></tr></table></figure>\n\n<p>如果有两个相同容量的USB闪存驱动器, 并且要精确的把第一个驱动器中的内容复制给第二个(&#x2F;dev&#x2F;sdb, &#x2F;dev&#x2F;sdc)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dd if=/dev/sdb of=/dev/sdc</span><br></pre></td></tr></table></figure>\n\n<p>将驱动器中的内容复制到一个普通文件中:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dd if=/dev/sdb of=flash_drive.img</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"创建-CD-ROM-映像\"><a href=\"#创建-CD-ROM-映像\" class=\"headerlink\" title=\"创建 CD-ROM 映像\"></a>创建 CD-ROM 映像</h2><p>步骤:</p>\n<ul>\n<li>构建一个 ISO映像文件</li>\n<li>将这个映像文件写入到CD-ROM媒介中</li>\n</ul>\n<h3 id=\"制作ISO映像文件\"><a href=\"#制作ISO映像文件\" class=\"headerlink\" title=\"制作ISO映像文件\"></a>制作ISO映像文件</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dd if=/dev/cdrom of=ubuntu.iso</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>对于音频CD, 可以使用cdrdao命令</p>\n</blockquote>\n<h3 id=\"使用某一个目录来创建映像文件\"><a href=\"#使用某一个目录来创建映像文件\" class=\"headerlink\" title=\"使用某一个目录来创建映像文件\"></a>使用某一个目录来创建映像文件</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">genisoimage -o cd-rom.iso -R -J ~/cd-rom-files</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>-R</code>选项添加元数据为Rock Ridge扩展, 这允许使用长文件名和 <code>POSIX</code>风格的文件权限</li>\n<li><code>-J</code>选项使 Joliet 扩展生效, 这样 Windows中就支持长文件名了</li>\n</ul>\n<blockquote>\n<p>wodim 和 genisoimage 这两个程序分别替代了 cdrecord 和 mkisofs, 它们是cdrtools 软件包的一部分。</p>\n</blockquote>\n<h3 id=\"将ISO写入CD-ROM中\"><a href=\"#将ISO写入CD-ROM中\" class=\"headerlink\" title=\"将ISO写入CD-ROM中\"></a>将ISO写入CD-ROM中</h3><blockquote>\n<p>直接挂载一个ISO镜像</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /mnt/iso_image</span><br><span class=\"line\">mount -t iso9660 -o loop image.iso /mnt/iso_image</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>清除一张可重写入的CD-ROM</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wodim dev=/dev/cdrw black=fast</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>写入镜像</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wodim dev=/dev/cdrw image.iso</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"使用md5sum校验文件的完整性\"><a href=\"#使用md5sum校验文件的完整性\" class=\"headerlink\" title=\"使用md5sum校验文件的完整性\"></a>使用md5sum校验文件的完整性</h1><p>每一个文件都有一个独一无二的md5sum, 除非两个文件一摸一样。</p>\n<p>可以通过md5sum命令来查看生成的数字, 是否与提供者所提供的数字完全一样。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">md5sum image.iso</span><br></pre></td></tr></table></figure>\n\n<p>最后有一个比较复杂的检查文件完整性的命令:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">md5sum dvd-image.iso; dd if=/dev/dvd bs=2048 count=$(( $( stat -c &quot;%s&quot; dvd-image.iso) /2048 ))</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://blog.csdn.net/paicmis/article/details/60479639\">这里是有关stat命令的介绍</a></p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<p><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-1Day.html\">第一天的笔记-基本的命令和使用方法</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-2Day.html\">第二天的笔记-操作文件</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-3Day.html\">第三天的笔记-查阅命令文档并创建命令别名</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-4Day.html\">第四天的笔记-重定向标准输入和输出以及处理查询结果</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-5Day.html\">第五天的笔记-命令的展开</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-6Day.html\">第六天的笔记-快捷键</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-7Day.html\">第七天的笔记-文件权限</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-8Day.html\">第八天的笔记-进程</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-9Day.html\">第九天的笔记-修改shell环境</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-10Day.html\">第十天的笔记-vim入门</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-11Day.html\">第十一天的笔记-自定义shell提示符</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-12Day.html\">第十二天的笔记-软件包管理系统</a></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>今天学习了如何挂载和卸载设备, 创建映像文件, 将映像文件写入到CD-ROM中, 使用md5检测文件完整性。</p>","more":"<h1 id=\"挂载和卸载存储设备\"><a href=\"#挂载和卸载存储设备\" class=\"headerlink\" title=\"挂载和卸载存储设备\"></a>挂载和卸载存储设备</h1><p>在<code>/etc/fstab</code>中, 列出了系统启动时要挂载的设备, 例如(来自Fedora 7系统的文件实例):</p>\n<pre><code>LABEL=/12       /       ext3        defaults        1       1\nLABEL=/home     /home   ext3        defaults        1       2\nLABEL=/boot     /boot   ext3        defaults        1       2\n</code></pre>\n<blockquote>\n<p>字段说明</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"left\">字段</th>\n<th align=\"left\">内容</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">设备名</td>\n<td align=\"left\">传统上, 这个字段包含与物理设备相关联的设备文件的实际名字, 比如说&#x2F;dev&#x2F;hda1(第一个IDE通道上第一个主设备分区)。然而今天的计算机, 有很多热插拔设备(像USB驱动设备), 许多现代的Linux发行版用一个文本标签和设备相关联。当这个设备连接到系统中时, 这个标签(当储存媒介格式化时, 这个标签会被添加到存储媒介中)会被操作系统读取, 那样的话, 不管赋给实际物理设备哪个设备文件, 这个设备仍能被系统正确地识别。</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">挂载点</td>\n<td align=\"left\">设备所连接到的文件系统树的目录</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">文件系统</td>\n<td align=\"left\">Linux 允许挂在许多文件系统类型。大多数本地的Linux文件系统是ext3, 但是也支持很多其它的, 比如FAT16(msdos), FAT32(vfat), NTFS(ntfs), CD-ROM(iso9660), 等等。</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">选项</td>\n<td align=\"left\">文件系统可以通过各种各样的选项来挂载。有可能, 例如, 挂载只读的文件系统, 或者挂载阻止执行任何程序的文件系统(一个有用的安全特性, 避免删除媒介。)</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">频率</td>\n<td align=\"left\">一位数字, 制定是否和在什么时间用dump命令来备份一个文件系统。</td>\n</tr>\n<tr>\n<td align=\"left\">6</td>\n<td align=\"left\">次序</td>\n<td align=\"left\">一位数字, 指定fsck命令按照什么次序来检查文件系统。</td>\n</tr>\n</tbody></table>\n<h2 id=\"查看挂载的文件系统列表\"><a href=\"#查看挂载的文件系统列表\" class=\"headerlink\" title=\"查看挂载的文件系统列表\"></a>查看挂载的文件系统列表</h2><p>使用mount命令来查看当前挂载的文件系统</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mount</span><br></pre></td></tr></table></figure>\n<p>显示的列表的格式是:设备 on 挂载点(文件路径) type 文件系统类型 (选项), 比如:</p>\n<p>pstore on &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;perf_event type cgroup (rw,nosuid,modev,noexec,relatime,hugetlb)</p>\n<h2 id=\"挂载和卸载设备\"><a href=\"#挂载和卸载设备\" class=\"headerlink\" title=\"挂载和卸载设备\"></a>挂载和卸载设备</h2><p>首先插入一个移动设备, 系统会自动挂载该设备。</p>\n<p>使用<code>mount</code>命令来查看刚刚挂载的设备名。</p>\n<p>之后卸载这个设备, 重新挂载到另一个位置。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">umount /dev/hdc</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 创建一个文件夹用来挂载该设备</span></span><br><span class=\"line\">mkdir /mnt/cdrom</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> -t 选项用来指定文件系统类型</span></span><br><span class=\"line\">mount -t iso9660 /dev/hdc /mnt/cdrom</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意, 卸载需要使用超级用户权限。</p>\n</blockquote>\n<p>然后就可以cd到该文件夹下, 查看该设备中的文件。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /mnt/cdrom</span><br><span class=\"line\">ls</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在早期, 当人们编辑完文档需要打印时, 虽然电脑读取速度很快, 可是打印机的接受速度很慢, 在打印的过程中电脑什么也做不了, 所以加入了缓存。计算机先将文档快速的输入到缓存中去, 之后计算机可以做其他事情, 而缓存中的文档则以打印机可以接受的速度进行输入。<br>现在不只是打印机这样做, 计算机中也有缓存。操作系统会尽可能的将数据写入到内存中, 之后在合适的时间进行真正的写入到物理设备中。在执行卸载操作之前, 操作系统会将内存中所有应该被写入到物理设备中的数据写入, 在进行卸载, 而如果不执行卸载操作则会导致文件损坏。</p>\n</blockquote>\n<h1 id=\"确定设备名称\"><a href=\"#确定设备名称\" class=\"headerlink\" title=\"确定设备名称\"></a>确定设备名称</h1><p>如果遇到了不支持自动挂载的环境, 则需要自己查找设备名称来进行挂载。</p>\n<blockquote>\n<p>查看所有设备</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls /dev</span><br></pre></td></tr></table></figure>\n\n<p>Linux 存储设备名称</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">模式</th>\n<th align=\"left\">设备</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">&#x2F;dev&#x2F;fd*</td>\n<td align=\"left\">软盘驱动器</td>\n</tr>\n<tr>\n<td align=\"left\">&#x2F;dev&#x2F;hd*</td>\n<td align=\"left\">老系统中的 IDE(PATA) 磁盘。典型的主板包含两个IDE连接器或者是通道, 每个连接器带有一根缆线, 每根缆线上有两个硬盘驱动器连接点。缆线上第一个驱动器叫做主设备, 第二个叫做从设备。设备名称这样安排, &#x2F;dev&#x2F;hda 是指第一通道上的主设备名; &#x2F;dev&#x2F;hdb 是第一通道上的从设备名; &#x2F;dev&#x2F;hdc 是第二通道上的主设备名, 等等。末尾的数字表示硬盘驱动器上的分区。例如, &#x2F;dev&#x2F;hda1 是指系统中第一硬盘驱动器上的第一个分区, 而 &#x2F;dev&#x2F;hda 则是指整个硬盘驱动器。</td>\n</tr>\n<tr>\n<td align=\"left\">&#x2F;dev&#x2F;lp*</td>\n<td align=\"left\">打印机</td>\n</tr>\n<tr>\n<td align=\"left\">&#x2F;dev&#x2F;sd*</td>\n<td align=\"left\">SCSI 磁盘。在最近的Linux 系统中, 内核把所有类似于磁盘的设备(包括 PATA&#x2F;SATA 硬盘, 闪存, 和USB存储设备, 比如说可移动的音乐播放器和数码相机) 看作 SCSI 磁盘。剩下的命名系统类似于上述所描述的旧的 &#x2F;dev&#x2F;hd* 命名方案。</td>\n</tr>\n<tr>\n<td align=\"left\">&#x2F;dev&#x2F;sr*</td>\n<td align=\"left\">光盘(CD&#x2F;DVD 读取器和烧写器)</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>查看刚刚插入的设备名称的方法</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 启动一个实时查看文件</span></span><br><span class=\"line\">sudo tail -f /var/log/messages</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 插入这个设备</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 当日志停止滚动时, 输入ctrl-c, 查看日志, 有一行日志会显示该设备的名字, 使用这个名字挂载设备</span></span><br><span class=\"line\">mkdir /mnt/flash</span><br><span class=\"line\">mount /dev/sdb1 /mnt/flash</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"创建新的文件系统\"><a href=\"#创建新的文件系统\" class=\"headerlink\" title=\"创建新的文件系统\"></a>创建新的文件系统</h1><p>即格式化移动设备。</p>\n<h2 id=\"使用fdisk来操作分区\"><a href=\"#使用fdisk来操作分区\" class=\"headerlink\" title=\"使用fdisk来操作分区\"></a>使用fdisk来操作分区</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 卸载设备, 这里指定的是分区号</span></span><br><span class=\"line\">sudo umount /dev/sdb1</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 调用fdisk, 这里指定的是设备名称</span></span><br><span class=\"line\">sudo fdisk /dev/sdb</span><br></pre></td></tr></table></figure>\n\n<p>之后会显示fdisk的命令:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Command (m for help):</span><br></pre></td></tr></table></figure>\n\n<p>输入<code>p</code>会打印这个设备的分区表</p>\n<p>输入<code>l</code>会打印所有可用的<strong>分区类型</strong>列表, 可以看到83是针对Linux系统的ID号</p>\n<p>输入<code>t</code>来更改分区ID号, 例如:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Command (m for help): t</span><br><span class=\"line\">Selected partition 1</span><br><span class=\"line\">Hex code (type L to list codes): 83</span><br><span class=\"line\">Changed system type of partition 1 to 83 (Linux)</span><br></pre></td></tr></table></figure>\n\n<p>输入<code>w</code>将修改过的设置从内存写入到物理设备</p>\n<h2 id=\"使用mkfs命令创建一个新的文件系统\"><a href=\"#使用mkfs命令创建一个新的文件系统\" class=\"headerlink\" title=\"使用mkfs命令创建一个新的文件系统\"></a>使用mkfs命令创建一个新的文件系统</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkfs -t ext3 /dev/sdb1</span><br></pre></td></tr></table></figure>\n\n<p><code>-t</code>来指定文件系统类型, 紧跟着的是需要格式化的分区</p>\n<p><a href=\"https://www.cnblogs.com/daduryi/p/6619028.html?utm_source=itdadao&utm_medium=referral\">这篇博客</a>介绍了各个文件系统类型。</p>\n<h2 id=\"测试和修复文件系统\"><a href=\"#测试和修复文件系统\" class=\"headerlink\" title=\"测试和修复文件系统\"></a>测试和修复文件系统</h2><p>使用fsck命令检查驱动器(需要先执行卸载)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo fsck /dev/sdb1</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"格式化软盘\"><a href=\"#格式化软盘\" class=\"headerlink\" title=\"格式化软盘\"></a>格式化软盘</h2><p>步骤:<br>将软盘进行低级格式化<br>创建何使的文件系统</p>\n<p>使用fdformat来格式化软盘。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 指定软盘设备名称</span></span><br><span class=\"line\">sudo fdformat /dev/fd0</span><br></pre></td></tr></table></figure>\n\n<p>接下来创建一个FAT文件系统</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkfs -t msdos /dev/fd0</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"移动或复制整个设备中的所有数据\"><a href=\"#移动或复制整个设备中的所有数据\" class=\"headerlink\" title=\"移动或复制整个设备中的所有数据\"></a>移动或复制整个设备中的所有数据</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dd if=input_file of=output_file [bs=block_size [count=blocks]]</span><br></pre></td></tr></table></figure>\n\n<p>如果有两个相同容量的USB闪存驱动器, 并且要精确的把第一个驱动器中的内容复制给第二个(&#x2F;dev&#x2F;sdb, &#x2F;dev&#x2F;sdc)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dd if=/dev/sdb of=/dev/sdc</span><br></pre></td></tr></table></figure>\n\n<p>将驱动器中的内容复制到一个普通文件中:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dd if=/dev/sdb of=flash_drive.img</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"创建-CD-ROM-映像\"><a href=\"#创建-CD-ROM-映像\" class=\"headerlink\" title=\"创建 CD-ROM 映像\"></a>创建 CD-ROM 映像</h2><p>步骤:</p>\n<ul>\n<li>构建一个 ISO映像文件</li>\n<li>将这个映像文件写入到CD-ROM媒介中</li>\n</ul>\n<h3 id=\"制作ISO映像文件\"><a href=\"#制作ISO映像文件\" class=\"headerlink\" title=\"制作ISO映像文件\"></a>制作ISO映像文件</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dd if=/dev/cdrom of=ubuntu.iso</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>对于音频CD, 可以使用cdrdao命令</p>\n</blockquote>\n<h3 id=\"使用某一个目录来创建映像文件\"><a href=\"#使用某一个目录来创建映像文件\" class=\"headerlink\" title=\"使用某一个目录来创建映像文件\"></a>使用某一个目录来创建映像文件</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">genisoimage -o cd-rom.iso -R -J ~/cd-rom-files</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>-R</code>选项添加元数据为Rock Ridge扩展, 这允许使用长文件名和 <code>POSIX</code>风格的文件权限</li>\n<li><code>-J</code>选项使 Joliet 扩展生效, 这样 Windows中就支持长文件名了</li>\n</ul>\n<blockquote>\n<p>wodim 和 genisoimage 这两个程序分别替代了 cdrecord 和 mkisofs, 它们是cdrtools 软件包的一部分。</p>\n</blockquote>\n<h3 id=\"将ISO写入CD-ROM中\"><a href=\"#将ISO写入CD-ROM中\" class=\"headerlink\" title=\"将ISO写入CD-ROM中\"></a>将ISO写入CD-ROM中</h3><blockquote>\n<p>直接挂载一个ISO镜像</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /mnt/iso_image</span><br><span class=\"line\">mount -t iso9660 -o loop image.iso /mnt/iso_image</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>清除一张可重写入的CD-ROM</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wodim dev=/dev/cdrw black=fast</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>写入镜像</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wodim dev=/dev/cdrw image.iso</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"使用md5sum校验文件的完整性\"><a href=\"#使用md5sum校验文件的完整性\" class=\"headerlink\" title=\"使用md5sum校验文件的完整性\"></a>使用md5sum校验文件的完整性</h1><p>每一个文件都有一个独一无二的md5sum, 除非两个文件一摸一样。</p>\n<p>可以通过md5sum命令来查看生成的数字, 是否与提供者所提供的数字完全一样。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">md5sum image.iso</span><br></pre></td></tr></table></figure>\n\n<p>最后有一个比较复杂的检查文件完整性的命令:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">md5sum dvd-image.iso; dd if=/dev/dvd bs=2048 count=$(( $( stat -c &quot;%s&quot; dvd-image.iso) /2048 ))</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://blog.csdn.net/paicmis/article/details/60479639\">这里是有关stat命令的介绍</a></p>"},{"title":"快乐的Linux命令行笔记-网络","date":"2019-02-19T13:45:29.000Z","_content":"\n[第一天的笔记-基本的命令和使用方法](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-1Day.html)\n[第二天的笔记-操作文件](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-2Day.html)\n[第三天的笔记-查阅命令文档并创建命令别名](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-3Day.html)\n[第四天的笔记-重定向标准输入和输出以及处理查询结果](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-4Day.html)\n[第五天的笔记-命令的展开](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-5Day.html)\n[第六天的笔记-快捷键](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-6Day.html)\n[第七天的笔记-文件权限](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-7Day.html)\n[第八天的笔记-进程](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-8Day.html)\n[第九天的笔记-修改shell环境](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-9Day.html)\n[第十天的笔记-vim入门](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-10Day.html)\n[第十一天的笔记-自定义shell提示符](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-11Day.html)\n[第十二天的笔记-软件包管理系统](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-12Day.html)\n[第十三天的笔记-创建映像](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-13Day.html)\n\n# 总结\n今天主要学习了linux如何检查网络情况, 使用ftp, ssh等工具传输文件, 使用ssh工具连接远端系统。\n<!--more-->\n# 检查和检测网络\n\n## ping\n\n```shell\nping www.icecreamzhao.github.io\n```\n\n一个成功执行的\"ping\"命令说明网络的各个部件(网卡, 电缆, 路由, 网关) 都处于正常的工作状态。\n\n## traceroute\n\n使用该命令(一些系统使用相似的tracepath)显示从本地到指定主机要经过的路由:\n\n```shell\ntraceroute icecreamzhao.github.io\n```\n\n## netstat\n\n使用该命令来检查网络设置和统计数据。\n\n```shell\nnetstat -ie\n```\n\n> -ie 选项可以查看系统中的网络接口。\n\n当查看网络接口时, 如果该网络接口信息的第四行开头有`UP`字样, 说明该网络接口已经生效; 如果系统使用DHCP(动态主机配置协议), 第二行中 inet addr 字段有有效的IP地址, 则证明了DHCP工作正常。\n\n```shell\nnetstat -r\n```\n\n> -r 选项可以查看内核的网络路由表\n\n    Destination Geteway     Genmask         Flags   MSS Window  irtt    Iface\n    192.168.1.0 *           255.255.255.0   U       0   0       0       eth0\n    default     192.168.1.1 0.0.0.0         UG      0   0       0       eth0\n\n> 第一行显示了目的地 192.168.1.0。 IP地址以零结尾是指网络, 而不是指某一个主机。下一个字段是网关, 使用网关来连接当前的主机和目的地的网络。若这个字段显示一个星号, 则表明不需要网关。\n\n> 最后一行包含目的地default, 指的是发往任何表上没有列出的目的地网络的流量。\n\n# 网络中传输文件\n\n## ftp\n\nftp 是文件传输协议, 由于它会以明码形式发送账号的姓名和密码, 所以几乎所有ftp服务器都是匿名的, 而匿名服务器允许任何人使用注册名\"anonymous\"和无意义的密码登录系统。\n\n> 使用ftp程序下载一个iso文件\n\n```shell\n# fileserver 是ftp服务器的名字\nftp fileserver\n# 输入登录名\nName (fileserver:me): anonymous\n# 输入密码\nPassword:\n# cd到要下载的文件的路径\ncd pub/cd\\_images/Ubuntu-8.04\nls\n# 指定下载到的地址\nlcd Desktop\n# 下载文件\nget ubuntu-8.04-desktop-1386.iso\nbye\n```\n\n## lftp\n\n工作方式和ftp类似, 但是包括多协议支持(包括HTTP), 若下载失败会自动重新下载, 后台处理, 用tab按键补全路径名等。\n\n## wget\n\n> 使用wget下载某一个网站的首页\n\n```shell\nwget http://read-notecommand.org/index.php\n```\n\n使用命令手册查看关于这个命令的其他说明。\n\n# 与远程主机安全通信\n\n## ssh\n\nssh的认证机制: 首先, 它需要认证远端主机是否为它所知道的那台主机(这样就阻止了所谓的\"中间人\"的攻击), 其次, 它加密了本地与远程主机之间所有的通讯信息。\n\nssh由两部分组成, SSH服务端运行在远端主机上, 在端口22上监听收到的外部链接, 而SSH客户端用在本地系统中, 用来和远端服务器通信。\n\n大多数Linux发行版自带SSH的软件包, 叫做OpenSSH, 有一些只提供客户端, 为了能让系统接收远端的连接, 需要安装OpenSSH-server软件包, 它必须在TCP端口22上接受网络连接。\n\n如果安装了 OpenSSH-server 软件包, 则可以使用localhost作为远端主机的名字, 这样计算机会和自己创建网络连接。\n\n> 使用ssh客户端\n\n```shell\n# 使用ssh连接到名为remote-sys的远端主机\nssh remote-sys\n# 当第一次连接时, 需要接受远端主机的身份验证凭据, 输入yes\nyes\n# 接着输入密码\nme@remote-sys's password:\n# 如果成功建立连接, 会接收到远端系统的shell提示符, 输入exit退出\nexit\n```\n\n> 使用不同的用户名登录远端系统\n\n```shell\nssh bob@remote-sys\n```\n\n如果远端主机不能成功通过验证, 则会提示错误信息, 有两种原因:\n\n* 某个攻击者企图制造\"中间人\"攻击\n* 操作系统或SSH服务器重新安装了\n\n如果是第二种原因, 在文件~/.ssh/known_hosts中删除废弃的钥匙, 可以在错误信息中找到`offending key...`字样, 会提示在文件中的第几行包含废弃的钥匙, 删掉就好。\n\n> 使用ssh执行单个命令\n\n```shell\nssh remote-sys free\n```\n\n> 使用ssh执行单个命令的方式制定ls命令\n\n```shell\n# 将输出结果重定向到本地文件中\nssh remote-sys 'ls *' > dirlist.txt\n# 将输出结果重定向到远端文件中\nssh remote-sys 'ls * > dirlist.txt'\n```\n\n## scp和sftp\n\n* scp\n\n> 被用来复制文件, 可以从远端系统复制到本地系统中。\n\n```shell\nscp remote-sys:document.txt\n# 或者使用不同的用户名\nscp bob@remote-sys:document.txt\n```\n\n* sftp\n\n> 和ftp工作方式类似, 可是使用加密的ssh通道来传递数据, 它不需要远端系统运行FTP服务端, 仅需要SSH服务端\n\n```shell\nsftp remote-sys\nls\nlcd Desktop\nget ubuntu-8.04-desktop-i286.iso\nbye\n```\n\n[关于windows的SSH客户端(PuTTY)](http://www.chiark.greenend.org.uk/~sgtatham/putty/)\n","source":"_posts/note/read_note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-14Day.md","raw":"---\ntitle: 快乐的Linux命令行笔记-网络\ndate: 2019-02-19 21:45:29\ncategories:\n- 笔记\n- 读书笔记\n- 快乐的Linux命令行\ntags:\n- 笔记\n- 快乐的Linux命令行\n- linux\n---\n\n[第一天的笔记-基本的命令和使用方法](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-1Day.html)\n[第二天的笔记-操作文件](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-2Day.html)\n[第三天的笔记-查阅命令文档并创建命令别名](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-3Day.html)\n[第四天的笔记-重定向标准输入和输出以及处理查询结果](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-4Day.html)\n[第五天的笔记-命令的展开](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-5Day.html)\n[第六天的笔记-快捷键](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-6Day.html)\n[第七天的笔记-文件权限](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-7Day.html)\n[第八天的笔记-进程](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-8Day.html)\n[第九天的笔记-修改shell环境](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-9Day.html)\n[第十天的笔记-vim入门](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-10Day.html)\n[第十一天的笔记-自定义shell提示符](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-11Day.html)\n[第十二天的笔记-软件包管理系统](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-12Day.html)\n[第十三天的笔记-创建映像](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-13Day.html)\n\n# 总结\n今天主要学习了linux如何检查网络情况, 使用ftp, ssh等工具传输文件, 使用ssh工具连接远端系统。\n<!--more-->\n# 检查和检测网络\n\n## ping\n\n```shell\nping www.icecreamzhao.github.io\n```\n\n一个成功执行的\"ping\"命令说明网络的各个部件(网卡, 电缆, 路由, 网关) 都处于正常的工作状态。\n\n## traceroute\n\n使用该命令(一些系统使用相似的tracepath)显示从本地到指定主机要经过的路由:\n\n```shell\ntraceroute icecreamzhao.github.io\n```\n\n## netstat\n\n使用该命令来检查网络设置和统计数据。\n\n```shell\nnetstat -ie\n```\n\n> -ie 选项可以查看系统中的网络接口。\n\n当查看网络接口时, 如果该网络接口信息的第四行开头有`UP`字样, 说明该网络接口已经生效; 如果系统使用DHCP(动态主机配置协议), 第二行中 inet addr 字段有有效的IP地址, 则证明了DHCP工作正常。\n\n```shell\nnetstat -r\n```\n\n> -r 选项可以查看内核的网络路由表\n\n    Destination Geteway     Genmask         Flags   MSS Window  irtt    Iface\n    192.168.1.0 *           255.255.255.0   U       0   0       0       eth0\n    default     192.168.1.1 0.0.0.0         UG      0   0       0       eth0\n\n> 第一行显示了目的地 192.168.1.0。 IP地址以零结尾是指网络, 而不是指某一个主机。下一个字段是网关, 使用网关来连接当前的主机和目的地的网络。若这个字段显示一个星号, 则表明不需要网关。\n\n> 最后一行包含目的地default, 指的是发往任何表上没有列出的目的地网络的流量。\n\n# 网络中传输文件\n\n## ftp\n\nftp 是文件传输协议, 由于它会以明码形式发送账号的姓名和密码, 所以几乎所有ftp服务器都是匿名的, 而匿名服务器允许任何人使用注册名\"anonymous\"和无意义的密码登录系统。\n\n> 使用ftp程序下载一个iso文件\n\n```shell\n# fileserver 是ftp服务器的名字\nftp fileserver\n# 输入登录名\nName (fileserver:me): anonymous\n# 输入密码\nPassword:\n# cd到要下载的文件的路径\ncd pub/cd\\_images/Ubuntu-8.04\nls\n# 指定下载到的地址\nlcd Desktop\n# 下载文件\nget ubuntu-8.04-desktop-1386.iso\nbye\n```\n\n## lftp\n\n工作方式和ftp类似, 但是包括多协议支持(包括HTTP), 若下载失败会自动重新下载, 后台处理, 用tab按键补全路径名等。\n\n## wget\n\n> 使用wget下载某一个网站的首页\n\n```shell\nwget http://read-notecommand.org/index.php\n```\n\n使用命令手册查看关于这个命令的其他说明。\n\n# 与远程主机安全通信\n\n## ssh\n\nssh的认证机制: 首先, 它需要认证远端主机是否为它所知道的那台主机(这样就阻止了所谓的\"中间人\"的攻击), 其次, 它加密了本地与远程主机之间所有的通讯信息。\n\nssh由两部分组成, SSH服务端运行在远端主机上, 在端口22上监听收到的外部链接, 而SSH客户端用在本地系统中, 用来和远端服务器通信。\n\n大多数Linux发行版自带SSH的软件包, 叫做OpenSSH, 有一些只提供客户端, 为了能让系统接收远端的连接, 需要安装OpenSSH-server软件包, 它必须在TCP端口22上接受网络连接。\n\n如果安装了 OpenSSH-server 软件包, 则可以使用localhost作为远端主机的名字, 这样计算机会和自己创建网络连接。\n\n> 使用ssh客户端\n\n```shell\n# 使用ssh连接到名为remote-sys的远端主机\nssh remote-sys\n# 当第一次连接时, 需要接受远端主机的身份验证凭据, 输入yes\nyes\n# 接着输入密码\nme@remote-sys's password:\n# 如果成功建立连接, 会接收到远端系统的shell提示符, 输入exit退出\nexit\n```\n\n> 使用不同的用户名登录远端系统\n\n```shell\nssh bob@remote-sys\n```\n\n如果远端主机不能成功通过验证, 则会提示错误信息, 有两种原因:\n\n* 某个攻击者企图制造\"中间人\"攻击\n* 操作系统或SSH服务器重新安装了\n\n如果是第二种原因, 在文件~/.ssh/known_hosts中删除废弃的钥匙, 可以在错误信息中找到`offending key...`字样, 会提示在文件中的第几行包含废弃的钥匙, 删掉就好。\n\n> 使用ssh执行单个命令\n\n```shell\nssh remote-sys free\n```\n\n> 使用ssh执行单个命令的方式制定ls命令\n\n```shell\n# 将输出结果重定向到本地文件中\nssh remote-sys 'ls *' > dirlist.txt\n# 将输出结果重定向到远端文件中\nssh remote-sys 'ls * > dirlist.txt'\n```\n\n## scp和sftp\n\n* scp\n\n> 被用来复制文件, 可以从远端系统复制到本地系统中。\n\n```shell\nscp remote-sys:document.txt\n# 或者使用不同的用户名\nscp bob@remote-sys:document.txt\n```\n\n* sftp\n\n> 和ftp工作方式类似, 可是使用加密的ssh通道来传递数据, 它不需要远端系统运行FTP服务端, 仅需要SSH服务端\n\n```shell\nsftp remote-sys\nls\nlcd Desktop\nget ubuntu-8.04-desktop-i286.iso\nbye\n```\n\n[关于windows的SSH客户端(PuTTY)](http://www.chiark.greenend.org.uk/~sgtatham/putty/)\n","slug":"note/read_note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-14Day","published":1,"updated":"2022-10-07T13:04:09.645Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejwg008j3vsbgxk19n0l","content":"<p><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-1Day.html\">第一天的笔记-基本的命令和使用方法</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-2Day.html\">第二天的笔记-操作文件</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-3Day.html\">第三天的笔记-查阅命令文档并创建命令别名</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-4Day.html\">第四天的笔记-重定向标准输入和输出以及处理查询结果</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-5Day.html\">第五天的笔记-命令的展开</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-6Day.html\">第六天的笔记-快捷键</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-7Day.html\">第七天的笔记-文件权限</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-8Day.html\">第八天的笔记-进程</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-9Day.html\">第九天的笔记-修改shell环境</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-10Day.html\">第十天的笔记-vim入门</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-11Day.html\">第十一天的笔记-自定义shell提示符</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-12Day.html\">第十二天的笔记-软件包管理系统</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-13Day.html\">第十三天的笔记-创建映像</a></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>今天主要学习了linux如何检查网络情况, 使用ftp, ssh等工具传输文件, 使用ssh工具连接远端系统。</p>\n<span id=\"more\"></span>\n<h1 id=\"检查和检测网络\"><a href=\"#检查和检测网络\" class=\"headerlink\" title=\"检查和检测网络\"></a>检查和检测网络</h1><h2 id=\"ping\"><a href=\"#ping\" class=\"headerlink\" title=\"ping\"></a>ping</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ping www.icecreamzhao.github.io</span><br></pre></td></tr></table></figure>\n\n<p>一个成功执行的”ping”命令说明网络的各个部件(网卡, 电缆, 路由, 网关) 都处于正常的工作状态。</p>\n<h2 id=\"traceroute\"><a href=\"#traceroute\" class=\"headerlink\" title=\"traceroute\"></a>traceroute</h2><p>使用该命令(一些系统使用相似的tracepath)显示从本地到指定主机要经过的路由:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">traceroute icecreamzhao.github.io</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"netstat\"><a href=\"#netstat\" class=\"headerlink\" title=\"netstat\"></a>netstat</h2><p>使用该命令来检查网络设置和统计数据。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -ie</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>-ie 选项可以查看系统中的网络接口。</p>\n</blockquote>\n<p>当查看网络接口时, 如果该网络接口信息的第四行开头有<code>UP</code>字样, 说明该网络接口已经生效; 如果系统使用DHCP(动态主机配置协议), 第二行中 inet addr 字段有有效的IP地址, 则证明了DHCP工作正常。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -r</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>-r 选项可以查看内核的网络路由表</p>\n</blockquote>\n<pre><code>Destination Geteway     Genmask         Flags   MSS Window  irtt    Iface\n192.168.1.0 *           255.255.255.0   U       0   0       0       eth0\ndefault     192.168.1.1 0.0.0.0         UG      0   0       0       eth0\n</code></pre>\n<blockquote>\n<p>第一行显示了目的地 192.168.1.0。 IP地址以零结尾是指网络, 而不是指某一个主机。下一个字段是网关, 使用网关来连接当前的主机和目的地的网络。若这个字段显示一个星号, 则表明不需要网关。</p>\n</blockquote>\n<blockquote>\n<p>最后一行包含目的地default, 指的是发往任何表上没有列出的目的地网络的流量。</p>\n</blockquote>\n<h1 id=\"网络中传输文件\"><a href=\"#网络中传输文件\" class=\"headerlink\" title=\"网络中传输文件\"></a>网络中传输文件</h1><h2 id=\"ftp\"><a href=\"#ftp\" class=\"headerlink\" title=\"ftp\"></a>ftp</h2><p>ftp 是文件传输协议, 由于它会以明码形式发送账号的姓名和密码, 所以几乎所有ftp服务器都是匿名的, 而匿名服务器允许任何人使用注册名”anonymous”和无意义的密码登录系统。</p>\n<blockquote>\n<p>使用ftp程序下载一个iso文件</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> fileserver 是ftp服务器的名字</span></span><br><span class=\"line\">ftp fileserver</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 输入登录名</span></span><br><span class=\"line\">Name (fileserver:me): anonymous</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 输入密码</span></span><br><span class=\"line\">Password:</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">cd</span>到要下载的文件的路径</span></span><br><span class=\"line\">cd pub/cd\\_images/Ubuntu-8.04</span><br><span class=\"line\">ls</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 指定下载到的地址</span></span><br><span class=\"line\">lcd Desktop</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 下载文件</span></span><br><span class=\"line\">get ubuntu-8.04-desktop-1386.iso</span><br><span class=\"line\">bye</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"lftp\"><a href=\"#lftp\" class=\"headerlink\" title=\"lftp\"></a>lftp</h2><p>工作方式和ftp类似, 但是包括多协议支持(包括HTTP), 若下载失败会自动重新下载, 后台处理, 用tab按键补全路径名等。</p>\n<h2 id=\"wget\"><a href=\"#wget\" class=\"headerlink\" title=\"wget\"></a>wget</h2><blockquote>\n<p>使用wget下载某一个网站的首页</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://read-notecommand.org/index.php</span><br></pre></td></tr></table></figure>\n\n<p>使用命令手册查看关于这个命令的其他说明。</p>\n<h1 id=\"与远程主机安全通信\"><a href=\"#与远程主机安全通信\" class=\"headerlink\" title=\"与远程主机安全通信\"></a>与远程主机安全通信</h1><h2 id=\"ssh\"><a href=\"#ssh\" class=\"headerlink\" title=\"ssh\"></a>ssh</h2><p>ssh的认证机制: 首先, 它需要认证远端主机是否为它所知道的那台主机(这样就阻止了所谓的”中间人”的攻击), 其次, 它加密了本地与远程主机之间所有的通讯信息。</p>\n<p>ssh由两部分组成, SSH服务端运行在远端主机上, 在端口22上监听收到的外部链接, 而SSH客户端用在本地系统中, 用来和远端服务器通信。</p>\n<p>大多数Linux发行版自带SSH的软件包, 叫做OpenSSH, 有一些只提供客户端, 为了能让系统接收远端的连接, 需要安装OpenSSH-server软件包, 它必须在TCP端口22上接受网络连接。</p>\n<p>如果安装了 OpenSSH-server 软件包, 则可以使用localhost作为远端主机的名字, 这样计算机会和自己创建网络连接。</p>\n<blockquote>\n<p>使用ssh客户端</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 使用ssh连接到名为remote-sys的远端主机</span></span><br><span class=\"line\">ssh remote-sys</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 当第一次连接时, 需要接受远端主机的身份验证凭据, 输入yes</span></span><br><span class=\"line\">yes</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 接着输入密码</span></span><br><span class=\"line\">me@remote-sys&#x27;s password:</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 如果成功建立连接, 会接收到远端系统的shell提示符, 输入<span class=\"built_in\">exit</span>退出</span></span><br><span class=\"line\">exit</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>使用不同的用户名登录远端系统</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh bob@remote-sys</span><br></pre></td></tr></table></figure>\n\n<p>如果远端主机不能成功通过验证, 则会提示错误信息, 有两种原因:</p>\n<ul>\n<li>某个攻击者企图制造”中间人”攻击</li>\n<li>操作系统或SSH服务器重新安装了</li>\n</ul>\n<p>如果是第二种原因, 在文件~&#x2F;.ssh&#x2F;known_hosts中删除废弃的钥匙, 可以在错误信息中找到<code>offending key...</code>字样, 会提示在文件中的第几行包含废弃的钥匙, 删掉就好。</p>\n<blockquote>\n<p>使用ssh执行单个命令</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh remote-sys free</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>使用ssh执行单个命令的方式制定ls命令</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 将输出结果重定向到本地文件中</span></span><br><span class=\"line\">ssh remote-sys &#x27;ls *&#x27; &gt; dirlist.txt</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 将输出结果重定向到远端文件中</span></span><br><span class=\"line\">ssh remote-sys &#x27;ls * &gt; dirlist.txt&#x27;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"scp和sftp\"><a href=\"#scp和sftp\" class=\"headerlink\" title=\"scp和sftp\"></a>scp和sftp</h2><ul>\n<li>scp</li>\n</ul>\n<blockquote>\n<p>被用来复制文件, 可以从远端系统复制到本地系统中。</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp remote-sys:document.txt</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 或者使用不同的用户名</span></span><br><span class=\"line\">scp bob@remote-sys:document.txt</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>sftp</li>\n</ul>\n<blockquote>\n<p>和ftp工作方式类似, 可是使用加密的ssh通道来传递数据, 它不需要远端系统运行FTP服务端, 仅需要SSH服务端</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sftp remote-sys</span><br><span class=\"line\">ls</span><br><span class=\"line\">lcd Desktop</span><br><span class=\"line\">get ubuntu-8.04-desktop-i286.iso</span><br><span class=\"line\">bye</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"http://www.chiark.greenend.org.uk/~sgtatham/putty/\">关于windows的SSH客户端(PuTTY)</a></p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<p><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-1Day.html\">第一天的笔记-基本的命令和使用方法</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-2Day.html\">第二天的笔记-操作文件</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-3Day.html\">第三天的笔记-查阅命令文档并创建命令别名</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-4Day.html\">第四天的笔记-重定向标准输入和输出以及处理查询结果</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-5Day.html\">第五天的笔记-命令的展开</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-6Day.html\">第六天的笔记-快捷键</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-7Day.html\">第七天的笔记-文件权限</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-8Day.html\">第八天的笔记-进程</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-9Day.html\">第九天的笔记-修改shell环境</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-10Day.html\">第十天的笔记-vim入门</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-11Day.html\">第十一天的笔记-自定义shell提示符</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-12Day.html\">第十二天的笔记-软件包管理系统</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-13Day.html\">第十三天的笔记-创建映像</a></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>今天主要学习了linux如何检查网络情况, 使用ftp, ssh等工具传输文件, 使用ssh工具连接远端系统。</p>","more":"<h1 id=\"检查和检测网络\"><a href=\"#检查和检测网络\" class=\"headerlink\" title=\"检查和检测网络\"></a>检查和检测网络</h1><h2 id=\"ping\"><a href=\"#ping\" class=\"headerlink\" title=\"ping\"></a>ping</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ping www.icecreamzhao.github.io</span><br></pre></td></tr></table></figure>\n\n<p>一个成功执行的”ping”命令说明网络的各个部件(网卡, 电缆, 路由, 网关) 都处于正常的工作状态。</p>\n<h2 id=\"traceroute\"><a href=\"#traceroute\" class=\"headerlink\" title=\"traceroute\"></a>traceroute</h2><p>使用该命令(一些系统使用相似的tracepath)显示从本地到指定主机要经过的路由:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">traceroute icecreamzhao.github.io</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"netstat\"><a href=\"#netstat\" class=\"headerlink\" title=\"netstat\"></a>netstat</h2><p>使用该命令来检查网络设置和统计数据。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -ie</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>-ie 选项可以查看系统中的网络接口。</p>\n</blockquote>\n<p>当查看网络接口时, 如果该网络接口信息的第四行开头有<code>UP</code>字样, 说明该网络接口已经生效; 如果系统使用DHCP(动态主机配置协议), 第二行中 inet addr 字段有有效的IP地址, 则证明了DHCP工作正常。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -r</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>-r 选项可以查看内核的网络路由表</p>\n</blockquote>\n<pre><code>Destination Geteway     Genmask         Flags   MSS Window  irtt    Iface\n192.168.1.0 *           255.255.255.0   U       0   0       0       eth0\ndefault     192.168.1.1 0.0.0.0         UG      0   0       0       eth0\n</code></pre>\n<blockquote>\n<p>第一行显示了目的地 192.168.1.0。 IP地址以零结尾是指网络, 而不是指某一个主机。下一个字段是网关, 使用网关来连接当前的主机和目的地的网络。若这个字段显示一个星号, 则表明不需要网关。</p>\n</blockquote>\n<blockquote>\n<p>最后一行包含目的地default, 指的是发往任何表上没有列出的目的地网络的流量。</p>\n</blockquote>\n<h1 id=\"网络中传输文件\"><a href=\"#网络中传输文件\" class=\"headerlink\" title=\"网络中传输文件\"></a>网络中传输文件</h1><h2 id=\"ftp\"><a href=\"#ftp\" class=\"headerlink\" title=\"ftp\"></a>ftp</h2><p>ftp 是文件传输协议, 由于它会以明码形式发送账号的姓名和密码, 所以几乎所有ftp服务器都是匿名的, 而匿名服务器允许任何人使用注册名”anonymous”和无意义的密码登录系统。</p>\n<blockquote>\n<p>使用ftp程序下载一个iso文件</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> fileserver 是ftp服务器的名字</span></span><br><span class=\"line\">ftp fileserver</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 输入登录名</span></span><br><span class=\"line\">Name (fileserver:me): anonymous</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 输入密码</span></span><br><span class=\"line\">Password:</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">cd</span>到要下载的文件的路径</span></span><br><span class=\"line\">cd pub/cd\\_images/Ubuntu-8.04</span><br><span class=\"line\">ls</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 指定下载到的地址</span></span><br><span class=\"line\">lcd Desktop</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 下载文件</span></span><br><span class=\"line\">get ubuntu-8.04-desktop-1386.iso</span><br><span class=\"line\">bye</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"lftp\"><a href=\"#lftp\" class=\"headerlink\" title=\"lftp\"></a>lftp</h2><p>工作方式和ftp类似, 但是包括多协议支持(包括HTTP), 若下载失败会自动重新下载, 后台处理, 用tab按键补全路径名等。</p>\n<h2 id=\"wget\"><a href=\"#wget\" class=\"headerlink\" title=\"wget\"></a>wget</h2><blockquote>\n<p>使用wget下载某一个网站的首页</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://read-notecommand.org/index.php</span><br></pre></td></tr></table></figure>\n\n<p>使用命令手册查看关于这个命令的其他说明。</p>\n<h1 id=\"与远程主机安全通信\"><a href=\"#与远程主机安全通信\" class=\"headerlink\" title=\"与远程主机安全通信\"></a>与远程主机安全通信</h1><h2 id=\"ssh\"><a href=\"#ssh\" class=\"headerlink\" title=\"ssh\"></a>ssh</h2><p>ssh的认证机制: 首先, 它需要认证远端主机是否为它所知道的那台主机(这样就阻止了所谓的”中间人”的攻击), 其次, 它加密了本地与远程主机之间所有的通讯信息。</p>\n<p>ssh由两部分组成, SSH服务端运行在远端主机上, 在端口22上监听收到的外部链接, 而SSH客户端用在本地系统中, 用来和远端服务器通信。</p>\n<p>大多数Linux发行版自带SSH的软件包, 叫做OpenSSH, 有一些只提供客户端, 为了能让系统接收远端的连接, 需要安装OpenSSH-server软件包, 它必须在TCP端口22上接受网络连接。</p>\n<p>如果安装了 OpenSSH-server 软件包, 则可以使用localhost作为远端主机的名字, 这样计算机会和自己创建网络连接。</p>\n<blockquote>\n<p>使用ssh客户端</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 使用ssh连接到名为remote-sys的远端主机</span></span><br><span class=\"line\">ssh remote-sys</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 当第一次连接时, 需要接受远端主机的身份验证凭据, 输入yes</span></span><br><span class=\"line\">yes</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 接着输入密码</span></span><br><span class=\"line\">me@remote-sys&#x27;s password:</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 如果成功建立连接, 会接收到远端系统的shell提示符, 输入<span class=\"built_in\">exit</span>退出</span></span><br><span class=\"line\">exit</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>使用不同的用户名登录远端系统</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh bob@remote-sys</span><br></pre></td></tr></table></figure>\n\n<p>如果远端主机不能成功通过验证, 则会提示错误信息, 有两种原因:</p>\n<ul>\n<li>某个攻击者企图制造”中间人”攻击</li>\n<li>操作系统或SSH服务器重新安装了</li>\n</ul>\n<p>如果是第二种原因, 在文件~&#x2F;.ssh&#x2F;known_hosts中删除废弃的钥匙, 可以在错误信息中找到<code>offending key...</code>字样, 会提示在文件中的第几行包含废弃的钥匙, 删掉就好。</p>\n<blockquote>\n<p>使用ssh执行单个命令</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh remote-sys free</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>使用ssh执行单个命令的方式制定ls命令</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 将输出结果重定向到本地文件中</span></span><br><span class=\"line\">ssh remote-sys &#x27;ls *&#x27; &gt; dirlist.txt</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 将输出结果重定向到远端文件中</span></span><br><span class=\"line\">ssh remote-sys &#x27;ls * &gt; dirlist.txt&#x27;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"scp和sftp\"><a href=\"#scp和sftp\" class=\"headerlink\" title=\"scp和sftp\"></a>scp和sftp</h2><ul>\n<li>scp</li>\n</ul>\n<blockquote>\n<p>被用来复制文件, 可以从远端系统复制到本地系统中。</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp remote-sys:document.txt</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 或者使用不同的用户名</span></span><br><span class=\"line\">scp bob@remote-sys:document.txt</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>sftp</li>\n</ul>\n<blockquote>\n<p>和ftp工作方式类似, 可是使用加密的ssh通道来传递数据, 它不需要远端系统运行FTP服务端, 仅需要SSH服务端</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sftp remote-sys</span><br><span class=\"line\">ls</span><br><span class=\"line\">lcd Desktop</span><br><span class=\"line\">get ubuntu-8.04-desktop-i286.iso</span><br><span class=\"line\">bye</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"http://www.chiark.greenend.org.uk/~sgtatham/putty/\">关于windows的SSH客户端(PuTTY)</a></p>"},{"title":"快乐的Linux命令行笔记-查找文件","date":"2019-02-21T07:29:04.000Z","_content":"\n[第一天的笔记-基本的命令和使用方法](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-1Day.html)\n[第二天的笔记-操作文件](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-2Day.html)\n[第三天的笔记-查阅命令文档并创建命令别名](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-3Day.html)\n[第四天的笔记-重定向标准输入和输出以及处理查询结果](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-4Day.html)\n[第五天的笔记-命令的展开](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-5Day.html)\n[第六天的笔记-快捷键](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-6Day.html)\n[第七天的笔记-文件权限](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-7Day.html)\n[第八天的笔记-进程](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-8Day.html)\n[第九天的笔记-修改shell环境](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-9Day.html)\n[第十天的笔记-vim入门](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-10Day.html)\n[第十一天的笔记-自定义shell提示符](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-11Day.html)\n[第十二天的笔记-软件包管理系统](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-12Day.html)\n[第十三天的笔记-创建映像](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-13Day.html)\n[第十四天的笔记-网络](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-14Day.html)\n\n# 总结\n\n今天主要学习了如何根据条件来查找文件。主要学习的是find命令。\n<!--more-->\n\n# 查找文件\n\n## locate\n\n> 该程序会执行一次快速的路径名数据库搜索, 并输出每个与给定子字符串相匹配的路径名。\n\n```shell\n# 假定包含程序的目录以bin/结尾, 查找所有zip开头的文件\nlocate bin/zip\n# 使用grep命令设计更加复杂的搜索\nlocate zip | grep bin\n```\n\nlocate的数据库由updatedb创建, 这个程序作为一个定时任务周期性运转。可以使用超级用户权限来手动运行updatedb命令来更新数据库。\n\n## find\n\n> locate 只能依据文件名来查找文件, 而find可以根据文件的各种属性来查找文件。\n\n```shell\nfind ~ | wc -l\n```\n\n该命令可以统计 `home` 路径下的所有文件的数量。\n\n### 根据文件属性查找文件\n\n```shell\nfind ~ -type d | wc -l\n```\n\n`-type d` 指定了只统计文件路径。\n\n以下是find命令支持的常见的文件类型条件:\n\n| 文件类型 | 描述 |\n| :------- | :--- |\n| b | 块特殊设备文件 |\n| c | 字符特殊设备文件 |\n| d | 目录 |\n| f | 普通文件 |\n| l | 符号链接 |\n\n还可以加入额外的条件, 比如文件大小和文件名来进行查找文件:\n\n```shell\nfind ~ -type f -name \"*.jpg\" -size +1M | wc -l\n```\n\n该命令统计了 `home` 路径下所有后缀名为 `.jpg` 并且文件大小大于1M的文件数量。\n\n以下是find命令支持的常见文件单位条件:\n\n| 字符 | 单位 |\n| :--- | :--- |\n| b | 512个字节块, 如果没有指定单位, 则这是默认值 |\n| c | 字节 |\n| w | 两个字节的字 |\n| k | 千字节, 1024个字节 |\n| M | 兆字节, 1048576个字节 |\n| G | 千兆字节, 1073741824个字节 |\n\n> 注意, 这里兆字节和千兆字节都是需要大写的\n\n更多的搜索条件可通过find命令手册查看。\n\n### 使用操作符来创建更复杂的条件\n\n```shell\nfind ~ \\( -type f -not -perm 0600 \\) -or \\( -type d -not perm 0700 \\)\n```\n\n上边的表达式会查找出所有权限不是`0600`的文件以及所有权限不是`0700`的文件夹。\n\n预定义的find命令操作\n\n| 操作 | 描述 |\n| :--- | :--- |\n| -delete | 删除当前匹配的文件 |\n| -ls | 对匹配的文件指定 ls -dlis 命令 |\n| -print | 将匹配的文件发送到标准输出 |\n| -quit | 一旦找到一个匹配的文件, 则退出 |\n\n比如, 想要删除文件扩展名为\".bak\"的文件, 可以这样写:\n\n```shell\nfind ~ -type f -name \"*.bak\" -delete\n```\n\n### 自定义行为\n\n使用 `-exec` 命令来进行自定义行为, 比如:\n\n```shell\nfind ~ -type f -name \"*.bak\" -exec rm '{}' ';'\n```\n\n可以将匹配的结果删除, 达到 `-delete` 的效果。\n\n### 提高效率\n\n使用exec命令的时候, 每找到一个匹配的文件, 都会再一次执行自定义的命令, 但是可以通过\n\n```shell\nfind ~ -type f -name \"*.bak\" -exec ls -l '{}' +\n```\n\n的方式, 将所有匹配的文件形成一个列表统一执行后面的自定义命令, 关键在于将 ';' 改为 +\n\n# stat 命令\n\n> 是一款加大马力的 ls 命令版本, 可以查看属性所有信息。\n\n# touch 命令\n\n> 可以设置或更新文件的访问, 更新和修改时间。如果文件名是一个不存在的文件, 则会创建一个新文件。\n\n# 选项\n\nfind 命令选项\n\n| 选项 | 描述 |\n| :--- | :--- |\n| -depth | 指示find先处理文件夹中的文件, 在处理文件夹自身, 当指定 -delete 选项时, 会自动应用这个选项 |\n| -maxdepth levels | 当执行测试条件和行为的时候，设置 find 程序陷入目录树的最大级别数 |\n| -mindepth levels | 在应用测试条件和行为之前，设置 find 程序陷入目录数的最小级别数。 |\n| -mount | 指示 find 程序不要搜索挂载到其它文件系统上的目录。 |\n| -noleaf | 指示 find 程序不要基于自己在搜索 Unix 的文件系统的假设，来优化它的搜索。 在搜索DOS/Windows 文件系统和CD/ROMS的时候，我们需要这个选项 |\n\n\n","source":"_posts/note/read_note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-15Day.md","raw":"---\ntitle: 快乐的Linux命令行笔记-查找文件\ndate: 2019-02-21 15:29:04\ncategories:\n- 笔记\n- 读书笔记\n- 快乐的Linux命令行\ntags:\n- 笔记\n- 快乐的Linux命令行\n- linux\n---\n\n[第一天的笔记-基本的命令和使用方法](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-1Day.html)\n[第二天的笔记-操作文件](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-2Day.html)\n[第三天的笔记-查阅命令文档并创建命令别名](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-3Day.html)\n[第四天的笔记-重定向标准输入和输出以及处理查询结果](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-4Day.html)\n[第五天的笔记-命令的展开](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-5Day.html)\n[第六天的笔记-快捷键](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-6Day.html)\n[第七天的笔记-文件权限](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-7Day.html)\n[第八天的笔记-进程](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-8Day.html)\n[第九天的笔记-修改shell环境](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-9Day.html)\n[第十天的笔记-vim入门](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-10Day.html)\n[第十一天的笔记-自定义shell提示符](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-11Day.html)\n[第十二天的笔记-软件包管理系统](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-12Day.html)\n[第十三天的笔记-创建映像](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-13Day.html)\n[第十四天的笔记-网络](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-14Day.html)\n\n# 总结\n\n今天主要学习了如何根据条件来查找文件。主要学习的是find命令。\n<!--more-->\n\n# 查找文件\n\n## locate\n\n> 该程序会执行一次快速的路径名数据库搜索, 并输出每个与给定子字符串相匹配的路径名。\n\n```shell\n# 假定包含程序的目录以bin/结尾, 查找所有zip开头的文件\nlocate bin/zip\n# 使用grep命令设计更加复杂的搜索\nlocate zip | grep bin\n```\n\nlocate的数据库由updatedb创建, 这个程序作为一个定时任务周期性运转。可以使用超级用户权限来手动运行updatedb命令来更新数据库。\n\n## find\n\n> locate 只能依据文件名来查找文件, 而find可以根据文件的各种属性来查找文件。\n\n```shell\nfind ~ | wc -l\n```\n\n该命令可以统计 `home` 路径下的所有文件的数量。\n\n### 根据文件属性查找文件\n\n```shell\nfind ~ -type d | wc -l\n```\n\n`-type d` 指定了只统计文件路径。\n\n以下是find命令支持的常见的文件类型条件:\n\n| 文件类型 | 描述 |\n| :------- | :--- |\n| b | 块特殊设备文件 |\n| c | 字符特殊设备文件 |\n| d | 目录 |\n| f | 普通文件 |\n| l | 符号链接 |\n\n还可以加入额外的条件, 比如文件大小和文件名来进行查找文件:\n\n```shell\nfind ~ -type f -name \"*.jpg\" -size +1M | wc -l\n```\n\n该命令统计了 `home` 路径下所有后缀名为 `.jpg` 并且文件大小大于1M的文件数量。\n\n以下是find命令支持的常见文件单位条件:\n\n| 字符 | 单位 |\n| :--- | :--- |\n| b | 512个字节块, 如果没有指定单位, 则这是默认值 |\n| c | 字节 |\n| w | 两个字节的字 |\n| k | 千字节, 1024个字节 |\n| M | 兆字节, 1048576个字节 |\n| G | 千兆字节, 1073741824个字节 |\n\n> 注意, 这里兆字节和千兆字节都是需要大写的\n\n更多的搜索条件可通过find命令手册查看。\n\n### 使用操作符来创建更复杂的条件\n\n```shell\nfind ~ \\( -type f -not -perm 0600 \\) -or \\( -type d -not perm 0700 \\)\n```\n\n上边的表达式会查找出所有权限不是`0600`的文件以及所有权限不是`0700`的文件夹。\n\n预定义的find命令操作\n\n| 操作 | 描述 |\n| :--- | :--- |\n| -delete | 删除当前匹配的文件 |\n| -ls | 对匹配的文件指定 ls -dlis 命令 |\n| -print | 将匹配的文件发送到标准输出 |\n| -quit | 一旦找到一个匹配的文件, 则退出 |\n\n比如, 想要删除文件扩展名为\".bak\"的文件, 可以这样写:\n\n```shell\nfind ~ -type f -name \"*.bak\" -delete\n```\n\n### 自定义行为\n\n使用 `-exec` 命令来进行自定义行为, 比如:\n\n```shell\nfind ~ -type f -name \"*.bak\" -exec rm '{}' ';'\n```\n\n可以将匹配的结果删除, 达到 `-delete` 的效果。\n\n### 提高效率\n\n使用exec命令的时候, 每找到一个匹配的文件, 都会再一次执行自定义的命令, 但是可以通过\n\n```shell\nfind ~ -type f -name \"*.bak\" -exec ls -l '{}' +\n```\n\n的方式, 将所有匹配的文件形成一个列表统一执行后面的自定义命令, 关键在于将 ';' 改为 +\n\n# stat 命令\n\n> 是一款加大马力的 ls 命令版本, 可以查看属性所有信息。\n\n# touch 命令\n\n> 可以设置或更新文件的访问, 更新和修改时间。如果文件名是一个不存在的文件, 则会创建一个新文件。\n\n# 选项\n\nfind 命令选项\n\n| 选项 | 描述 |\n| :--- | :--- |\n| -depth | 指示find先处理文件夹中的文件, 在处理文件夹自身, 当指定 -delete 选项时, 会自动应用这个选项 |\n| -maxdepth levels | 当执行测试条件和行为的时候，设置 find 程序陷入目录树的最大级别数 |\n| -mindepth levels | 在应用测试条件和行为之前，设置 find 程序陷入目录数的最小级别数。 |\n| -mount | 指示 find 程序不要搜索挂载到其它文件系统上的目录。 |\n| -noleaf | 指示 find 程序不要基于自己在搜索 Unix 的文件系统的假设，来优化它的搜索。 在搜索DOS/Windows 文件系统和CD/ROMS的时候，我们需要这个选项 |\n\n\n","slug":"note/read_note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-15Day","published":1,"updated":"2022-10-07T13:04:19.709Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejwl008m3vsb6z6xefbg","content":"<p><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-1Day.html\">第一天的笔记-基本的命令和使用方法</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-2Day.html\">第二天的笔记-操作文件</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-3Day.html\">第三天的笔记-查阅命令文档并创建命令别名</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-4Day.html\">第四天的笔记-重定向标准输入和输出以及处理查询结果</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-5Day.html\">第五天的笔记-命令的展开</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-6Day.html\">第六天的笔记-快捷键</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-7Day.html\">第七天的笔记-文件权限</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-8Day.html\">第八天的笔记-进程</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-9Day.html\">第九天的笔记-修改shell环境</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-10Day.html\">第十天的笔记-vim入门</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-11Day.html\">第十一天的笔记-自定义shell提示符</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-12Day.html\">第十二天的笔记-软件包管理系统</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-13Day.html\">第十三天的笔记-创建映像</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-14Day.html\">第十四天的笔记-网络</a></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>今天主要学习了如何根据条件来查找文件。主要学习的是find命令。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"查找文件\"><a href=\"#查找文件\" class=\"headerlink\" title=\"查找文件\"></a>查找文件</h1><h2 id=\"locate\"><a href=\"#locate\" class=\"headerlink\" title=\"locate\"></a>locate</h2><blockquote>\n<p>该程序会执行一次快速的路径名数据库搜索, 并输出每个与给定子字符串相匹配的路径名。</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 假定包含程序的目录以bin/结尾, 查找所有zip开头的文件</span></span><br><span class=\"line\">locate bin/zip</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 使用grep命令设计更加复杂的搜索</span></span><br><span class=\"line\">locate zip | grep bin</span><br></pre></td></tr></table></figure>\n\n<p>locate的数据库由updatedb创建, 这个程序作为一个定时任务周期性运转。可以使用超级用户权限来手动运行updatedb命令来更新数据库。</p>\n<h2 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"find\"></a>find</h2><blockquote>\n<p>locate 只能依据文件名来查找文件, 而find可以根据文件的各种属性来查找文件。</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find ~ | wc -l</span><br></pre></td></tr></table></figure>\n\n<p>该命令可以统计 <code>home</code> 路径下的所有文件的数量。</p>\n<h3 id=\"根据文件属性查找文件\"><a href=\"#根据文件属性查找文件\" class=\"headerlink\" title=\"根据文件属性查找文件\"></a>根据文件属性查找文件</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find ~ -type d | wc -l</span><br></pre></td></tr></table></figure>\n\n<p><code>-type d</code> 指定了只统计文件路径。</p>\n<p>以下是find命令支持的常见的文件类型条件:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">文件类型</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">b</td>\n<td align=\"left\">块特殊设备文件</td>\n</tr>\n<tr>\n<td align=\"left\">c</td>\n<td align=\"left\">字符特殊设备文件</td>\n</tr>\n<tr>\n<td align=\"left\">d</td>\n<td align=\"left\">目录</td>\n</tr>\n<tr>\n<td align=\"left\">f</td>\n<td align=\"left\">普通文件</td>\n</tr>\n<tr>\n<td align=\"left\">l</td>\n<td align=\"left\">符号链接</td>\n</tr>\n</tbody></table>\n<p>还可以加入额外的条件, 比如文件大小和文件名来进行查找文件:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find ~ -type f -name &quot;*.jpg&quot; -size +1M | wc -l</span><br></pre></td></tr></table></figure>\n\n<p>该命令统计了 <code>home</code> 路径下所有后缀名为 <code>.jpg</code> 并且文件大小大于1M的文件数量。</p>\n<p>以下是find命令支持的常见文件单位条件:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">字符</th>\n<th align=\"left\">单位</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">b</td>\n<td align=\"left\">512个字节块, 如果没有指定单位, 则这是默认值</td>\n</tr>\n<tr>\n<td align=\"left\">c</td>\n<td align=\"left\">字节</td>\n</tr>\n<tr>\n<td align=\"left\">w</td>\n<td align=\"left\">两个字节的字</td>\n</tr>\n<tr>\n<td align=\"left\">k</td>\n<td align=\"left\">千字节, 1024个字节</td>\n</tr>\n<tr>\n<td align=\"left\">M</td>\n<td align=\"left\">兆字节, 1048576个字节</td>\n</tr>\n<tr>\n<td align=\"left\">G</td>\n<td align=\"left\">千兆字节, 1073741824个字节</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>注意, 这里兆字节和千兆字节都是需要大写的</p>\n</blockquote>\n<p>更多的搜索条件可通过find命令手册查看。</p>\n<h3 id=\"使用操作符来创建更复杂的条件\"><a href=\"#使用操作符来创建更复杂的条件\" class=\"headerlink\" title=\"使用操作符来创建更复杂的条件\"></a>使用操作符来创建更复杂的条件</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find ~ \\( -type f -not -perm 0600 \\) -or \\( -type d -not perm 0700 \\)</span><br></pre></td></tr></table></figure>\n\n<p>上边的表达式会查找出所有权限不是<code>0600</code>的文件以及所有权限不是<code>0700</code>的文件夹。</p>\n<p>预定义的find命令操作</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">操作</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">-delete</td>\n<td align=\"left\">删除当前匹配的文件</td>\n</tr>\n<tr>\n<td align=\"left\">-ls</td>\n<td align=\"left\">对匹配的文件指定 ls -dlis 命令</td>\n</tr>\n<tr>\n<td align=\"left\">-print</td>\n<td align=\"left\">将匹配的文件发送到标准输出</td>\n</tr>\n<tr>\n<td align=\"left\">-quit</td>\n<td align=\"left\">一旦找到一个匹配的文件, 则退出</td>\n</tr>\n</tbody></table>\n<p>比如, 想要删除文件扩展名为”.bak”的文件, 可以这样写:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find ~ -type f -name &quot;*.bak&quot; -delete</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"自定义行为\"><a href=\"#自定义行为\" class=\"headerlink\" title=\"自定义行为\"></a>自定义行为</h3><p>使用 <code>-exec</code> 命令来进行自定义行为, 比如:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find ~ -type f -name &quot;*.bak&quot; -exec rm &#x27;&#123;&#125;&#x27; &#x27;;&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>可以将匹配的结果删除, 达到 <code>-delete</code> 的效果。</p>\n<h3 id=\"提高效率\"><a href=\"#提高效率\" class=\"headerlink\" title=\"提高效率\"></a>提高效率</h3><p>使用exec命令的时候, 每找到一个匹配的文件, 都会再一次执行自定义的命令, 但是可以通过</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find ~ -type f -name &quot;*.bak&quot; -exec ls -l &#x27;&#123;&#125;&#x27; +</span><br></pre></td></tr></table></figure>\n\n<p>的方式, 将所有匹配的文件形成一个列表统一执行后面的自定义命令, 关键在于将 ‘;’ 改为 +</p>\n<h1 id=\"stat-命令\"><a href=\"#stat-命令\" class=\"headerlink\" title=\"stat 命令\"></a>stat 命令</h1><blockquote>\n<p>是一款加大马力的 ls 命令版本, 可以查看属性所有信息。</p>\n</blockquote>\n<h1 id=\"touch-命令\"><a href=\"#touch-命令\" class=\"headerlink\" title=\"touch 命令\"></a>touch 命令</h1><blockquote>\n<p>可以设置或更新文件的访问, 更新和修改时间。如果文件名是一个不存在的文件, 则会创建一个新文件。</p>\n</blockquote>\n<h1 id=\"选项\"><a href=\"#选项\" class=\"headerlink\" title=\"选项\"></a>选项</h1><p>find 命令选项</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">选项</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">-depth</td>\n<td align=\"left\">指示find先处理文件夹中的文件, 在处理文件夹自身, 当指定 -delete 选项时, 会自动应用这个选项</td>\n</tr>\n<tr>\n<td align=\"left\">-maxdepth levels</td>\n<td align=\"left\">当执行测试条件和行为的时候，设置 find 程序陷入目录树的最大级别数</td>\n</tr>\n<tr>\n<td align=\"left\">-mindepth levels</td>\n<td align=\"left\">在应用测试条件和行为之前，设置 find 程序陷入目录数的最小级别数。</td>\n</tr>\n<tr>\n<td align=\"left\">-mount</td>\n<td align=\"left\">指示 find 程序不要搜索挂载到其它文件系统上的目录。</td>\n</tr>\n<tr>\n<td align=\"left\">-noleaf</td>\n<td align=\"left\">指示 find 程序不要基于自己在搜索 Unix 的文件系统的假设，来优化它的搜索。 在搜索DOS&#x2F;Windows 文件系统和CD&#x2F;ROMS的时候，我们需要这个选项</td>\n</tr>\n</tbody></table>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<p><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-1Day.html\">第一天的笔记-基本的命令和使用方法</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-2Day.html\">第二天的笔记-操作文件</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-3Day.html\">第三天的笔记-查阅命令文档并创建命令别名</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-4Day.html\">第四天的笔记-重定向标准输入和输出以及处理查询结果</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-5Day.html\">第五天的笔记-命令的展开</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-6Day.html\">第六天的笔记-快捷键</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-7Day.html\">第七天的笔记-文件权限</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-8Day.html\">第八天的笔记-进程</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-9Day.html\">第九天的笔记-修改shell环境</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-10Day.html\">第十天的笔记-vim入门</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-11Day.html\">第十一天的笔记-自定义shell提示符</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-12Day.html\">第十二天的笔记-软件包管理系统</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-13Day.html\">第十三天的笔记-创建映像</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-14Day.html\">第十四天的笔记-网络</a></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>今天主要学习了如何根据条件来查找文件。主要学习的是find命令。</p>","more":"<h1 id=\"查找文件\"><a href=\"#查找文件\" class=\"headerlink\" title=\"查找文件\"></a>查找文件</h1><h2 id=\"locate\"><a href=\"#locate\" class=\"headerlink\" title=\"locate\"></a>locate</h2><blockquote>\n<p>该程序会执行一次快速的路径名数据库搜索, 并输出每个与给定子字符串相匹配的路径名。</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 假定包含程序的目录以bin/结尾, 查找所有zip开头的文件</span></span><br><span class=\"line\">locate bin/zip</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 使用grep命令设计更加复杂的搜索</span></span><br><span class=\"line\">locate zip | grep bin</span><br></pre></td></tr></table></figure>\n\n<p>locate的数据库由updatedb创建, 这个程序作为一个定时任务周期性运转。可以使用超级用户权限来手动运行updatedb命令来更新数据库。</p>\n<h2 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"find\"></a>find</h2><blockquote>\n<p>locate 只能依据文件名来查找文件, 而find可以根据文件的各种属性来查找文件。</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find ~ | wc -l</span><br></pre></td></tr></table></figure>\n\n<p>该命令可以统计 <code>home</code> 路径下的所有文件的数量。</p>\n<h3 id=\"根据文件属性查找文件\"><a href=\"#根据文件属性查找文件\" class=\"headerlink\" title=\"根据文件属性查找文件\"></a>根据文件属性查找文件</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find ~ -type d | wc -l</span><br></pre></td></tr></table></figure>\n\n<p><code>-type d</code> 指定了只统计文件路径。</p>\n<p>以下是find命令支持的常见的文件类型条件:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">文件类型</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">b</td>\n<td align=\"left\">块特殊设备文件</td>\n</tr>\n<tr>\n<td align=\"left\">c</td>\n<td align=\"left\">字符特殊设备文件</td>\n</tr>\n<tr>\n<td align=\"left\">d</td>\n<td align=\"left\">目录</td>\n</tr>\n<tr>\n<td align=\"left\">f</td>\n<td align=\"left\">普通文件</td>\n</tr>\n<tr>\n<td align=\"left\">l</td>\n<td align=\"left\">符号链接</td>\n</tr>\n</tbody></table>\n<p>还可以加入额外的条件, 比如文件大小和文件名来进行查找文件:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find ~ -type f -name &quot;*.jpg&quot; -size +1M | wc -l</span><br></pre></td></tr></table></figure>\n\n<p>该命令统计了 <code>home</code> 路径下所有后缀名为 <code>.jpg</code> 并且文件大小大于1M的文件数量。</p>\n<p>以下是find命令支持的常见文件单位条件:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">字符</th>\n<th align=\"left\">单位</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">b</td>\n<td align=\"left\">512个字节块, 如果没有指定单位, 则这是默认值</td>\n</tr>\n<tr>\n<td align=\"left\">c</td>\n<td align=\"left\">字节</td>\n</tr>\n<tr>\n<td align=\"left\">w</td>\n<td align=\"left\">两个字节的字</td>\n</tr>\n<tr>\n<td align=\"left\">k</td>\n<td align=\"left\">千字节, 1024个字节</td>\n</tr>\n<tr>\n<td align=\"left\">M</td>\n<td align=\"left\">兆字节, 1048576个字节</td>\n</tr>\n<tr>\n<td align=\"left\">G</td>\n<td align=\"left\">千兆字节, 1073741824个字节</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>注意, 这里兆字节和千兆字节都是需要大写的</p>\n</blockquote>\n<p>更多的搜索条件可通过find命令手册查看。</p>\n<h3 id=\"使用操作符来创建更复杂的条件\"><a href=\"#使用操作符来创建更复杂的条件\" class=\"headerlink\" title=\"使用操作符来创建更复杂的条件\"></a>使用操作符来创建更复杂的条件</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find ~ \\( -type f -not -perm 0600 \\) -or \\( -type d -not perm 0700 \\)</span><br></pre></td></tr></table></figure>\n\n<p>上边的表达式会查找出所有权限不是<code>0600</code>的文件以及所有权限不是<code>0700</code>的文件夹。</p>\n<p>预定义的find命令操作</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">操作</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">-delete</td>\n<td align=\"left\">删除当前匹配的文件</td>\n</tr>\n<tr>\n<td align=\"left\">-ls</td>\n<td align=\"left\">对匹配的文件指定 ls -dlis 命令</td>\n</tr>\n<tr>\n<td align=\"left\">-print</td>\n<td align=\"left\">将匹配的文件发送到标准输出</td>\n</tr>\n<tr>\n<td align=\"left\">-quit</td>\n<td align=\"left\">一旦找到一个匹配的文件, 则退出</td>\n</tr>\n</tbody></table>\n<p>比如, 想要删除文件扩展名为”.bak”的文件, 可以这样写:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find ~ -type f -name &quot;*.bak&quot; -delete</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"自定义行为\"><a href=\"#自定义行为\" class=\"headerlink\" title=\"自定义行为\"></a>自定义行为</h3><p>使用 <code>-exec</code> 命令来进行自定义行为, 比如:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find ~ -type f -name &quot;*.bak&quot; -exec rm &#x27;&#123;&#125;&#x27; &#x27;;&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>可以将匹配的结果删除, 达到 <code>-delete</code> 的效果。</p>\n<h3 id=\"提高效率\"><a href=\"#提高效率\" class=\"headerlink\" title=\"提高效率\"></a>提高效率</h3><p>使用exec命令的时候, 每找到一个匹配的文件, 都会再一次执行自定义的命令, 但是可以通过</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find ~ -type f -name &quot;*.bak&quot; -exec ls -l &#x27;&#123;&#125;&#x27; +</span><br></pre></td></tr></table></figure>\n\n<p>的方式, 将所有匹配的文件形成一个列表统一执行后面的自定义命令, 关键在于将 ‘;’ 改为 +</p>\n<h1 id=\"stat-命令\"><a href=\"#stat-命令\" class=\"headerlink\" title=\"stat 命令\"></a>stat 命令</h1><blockquote>\n<p>是一款加大马力的 ls 命令版本, 可以查看属性所有信息。</p>\n</blockquote>\n<h1 id=\"touch-命令\"><a href=\"#touch-命令\" class=\"headerlink\" title=\"touch 命令\"></a>touch 命令</h1><blockquote>\n<p>可以设置或更新文件的访问, 更新和修改时间。如果文件名是一个不存在的文件, 则会创建一个新文件。</p>\n</blockquote>\n<h1 id=\"选项\"><a href=\"#选项\" class=\"headerlink\" title=\"选项\"></a>选项</h1><p>find 命令选项</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">选项</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">-depth</td>\n<td align=\"left\">指示find先处理文件夹中的文件, 在处理文件夹自身, 当指定 -delete 选项时, 会自动应用这个选项</td>\n</tr>\n<tr>\n<td align=\"left\">-maxdepth levels</td>\n<td align=\"left\">当执行测试条件和行为的时候，设置 find 程序陷入目录树的最大级别数</td>\n</tr>\n<tr>\n<td align=\"left\">-mindepth levels</td>\n<td align=\"left\">在应用测试条件和行为之前，设置 find 程序陷入目录数的最小级别数。</td>\n</tr>\n<tr>\n<td align=\"left\">-mount</td>\n<td align=\"left\">指示 find 程序不要搜索挂载到其它文件系统上的目录。</td>\n</tr>\n<tr>\n<td align=\"left\">-noleaf</td>\n<td align=\"left\">指示 find 程序不要基于自己在搜索 Unix 的文件系统的假设，来优化它的搜索。 在搜索DOS&#x2F;Windows 文件系统和CD&#x2F;ROMS的时候，我们需要这个选项</td>\n</tr>\n</tbody></table>"},{"title":"快乐的Linux命令行笔记-压缩","date":"2019-03-18T09:01:35.000Z","_content":"\n[第一天的笔记-基本的命令和使用方法](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-1Day.html)\n[第二天的笔记-操作文件](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-2Day.html)\n[第三天的笔记-查阅命令文档并创建命令别名](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-3Day.html)\n[第四天的笔记-重定向标准输入和输出以及处理查询结果](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-4Day.html)\n[第五天的笔记-命令的展开](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-5Day.html)\n[第六天的笔记-快捷键](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-6Day.html)\n[第七天的笔记-文件权限](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-7Day.html)\n[第八天的笔记-进程](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-8Day.html)\n[第九天的笔记-修改shell环境](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-9Day.html)\n[第十天的笔记-vim入门](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-10Day.html)\n[第十一天的笔记-自定义shell提示符](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-11Day.html)\n[第十二天的笔记-软件包管理系统](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-12Day.html)\n[第十三天的笔记-创建映像](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-13Day.html)\n[第十四天的笔记-网络](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-14Day.html)\n[第十五天的笔记-查找文件](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-15Day.html)\n\n# 总结\n\n主要学习了如何使用gzip, bzip2, zip的使用方法, 如何使用tar创建系统归档文件。\n<!--more-->\n\n# 压缩文件\n\n压缩的算法基本遵循一个原则, 就是避免冗余数据。\n\n比如一张纯黑色的100x100像素的图片, 每一个像素都会占用存储空间, 那么我们不必存储每一个像素, 而是用另一种方式表示这张图片, 比如这张图片有三万个黑色像素点, 那么直接存储数字30000, 后跟一个0(表示黑色像素)来表示这张图, 这种数据压缩方案被称为游程编码。\n\n# gzip\n\n```shell\n# 使用gzip压缩\ngzip test.txt\n# 使用gunzip解压缩\ngunzip test.txt.gz\n```\n\ngzip 选项\n\n| 选项 | 说明 |\n| :--- | :--- |\n| -c | 把输出写到标准输出, 并保留原始文件, 也可以用 --stdout 和 --tostdout 选项来指定。 |\n| -d | 解压缩, 和gunzip命令一样, 也可以用 --decompress 或者 --uncompress 选项来指定。 |\n| -f | 强制压缩, 即使原压缩文件存在也要强制执行, 也可用 --force 选项来指定。 |\n| -h | 显示用法信息, 也可用 --help 选项来指定。 |\n| -l | 列出每个被压缩文件的压缩数据, 也可用 --list 选项来指定。 |\n| -r | 若命令的一个或多个参数是目录, 则递归的压缩目录中的文件, 也可用 --recursive 来指定。 |\n| -t | 测试压缩文件的完整性, 也可用 --test 选项来指定。 |\n| -v | 显示压缩过程中的信息, 也可用 --verbose 选项来指定。 |\n| -number | 指定压缩指数, number是一个在1-9之间的整数, 默认值是整数6。 |\n\nzcat 命令\n\n> 等同于`gzip -c`命令\n\nzless 命令\n\n> 等同于`gzip *.gz | less` 命令\n\n# bzip2\n\n舍弃了压缩速度, 实现了更高的压缩级别。由bzip2压缩的文件, 使用后缀名`.bz2`来表示。\n\n工作模式和gzip相同(除了-r选项), 相对应的, 也有`bunzip`和`bzcat`命令来进行解压缩, 还有`bzip2recover`来对受损的文件进行修复。\n\n# 归档文件\n\n归档经常作为系统备份的一部分来使用, 归档就是把很多文件捆绑成一个大文件的过程。\n\n| 选项 | 说明 |\n| :--: | :--: |\n| c | 为文件和/或目录列表创建归档文件 |\n| x | 抽取归档文件 |\n| r | 追加具体的路径到归档文件的末尾 |\n| t | 列出归档文件的内容 |\n\n```sh\n# 使用 tar 将目录归档\ntar cf dir.tar dir\n# 列出归档文件的内容\ntar tf dir.tar\n# 复原tar\ntar xf dir.tar\n```\n\n注意, 如果使用的是普通用户(没用超级用户权限)来对tar进行复原操作, 则复原的所有文件的权限都归当前操作用户所有!\n\n```sh\n# 单独抽取某个文件\ntar xf dir.tar pathname\n# 抽取匹配的文件\ntar xf dir.tar --wildcards 'home/me/playground/dir-\\*/file-A'\n```\n\n还可以使用find命令和tar配合使用:\n\n```sh\n# 含义: 将playground文件夹中符合条件的文件使用 -exec 命令来调用 tar 的追加模式, 将文件追加到已有的归档文件中\nfind playground -name 'file-A' -exec tar rf playground.tar '{}' '+'\n# 含义: 将playground文件夹中符合条件的文件使用管道的方式制作压缩归档文件 (.tgz 或者 .tar.gz)\n# - 代表从管道中读取\nfind playground -name 'file-A' | tar cf - --files-from=- | gzip > playground.tgz\n# 上面命令的简化版 czf 代表用gzip方式压缩, cjf 代表用bzip2方式压缩\nfind playground -name 'file-A' | tar czf playground.tgz -T -\nfind playground -name 'file-A' | tar cjf playground.tbz -T -\n```\n\n还可以配合ssh工具将远端的系统(remote-stuff)中的文件夹复制到本地系统中:\n\n```sh\n[me@linuxbox ~]$ mkdir remote-stuff\n[me@linuxbox ~]$ cd remote-stuff\n[me@linuxbox remote-stuff]$ ssh remote-sys 'tar cf - Documents' | tar xf -\n[me@linuxbox remote-stuff]$ ls\nDocuments\n```\n\n# zip\n\n使用方式:\n\n```sh\n# 将目录打包为zip\nzip -r dirPath.zip dirPath\n# 列出指定zip文件\nzip -l dirPath.zip dir1/dir2\n# 使用管道\nfind playground -name \"files-A\" | zip -@ files-A.zip\n```\n","source":"_posts/note/read_note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-16Day.md","raw":"---\ntitle: 快乐的Linux命令行笔记-压缩 \ndate: 2019-03-18 17:01:35\ncategories:\n- 笔记\n- 读书笔记\n- 快乐的Linux命令行\ntags:\n- 笔记\n- 快乐的Linux命令行\n- linux\n---\n\n[第一天的笔记-基本的命令和使用方法](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-1Day.html)\n[第二天的笔记-操作文件](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-2Day.html)\n[第三天的笔记-查阅命令文档并创建命令别名](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-3Day.html)\n[第四天的笔记-重定向标准输入和输出以及处理查询结果](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-4Day.html)\n[第五天的笔记-命令的展开](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-5Day.html)\n[第六天的笔记-快捷键](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-6Day.html)\n[第七天的笔记-文件权限](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-7Day.html)\n[第八天的笔记-进程](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-8Day.html)\n[第九天的笔记-修改shell环境](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-9Day.html)\n[第十天的笔记-vim入门](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-10Day.html)\n[第十一天的笔记-自定义shell提示符](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-11Day.html)\n[第十二天的笔记-软件包管理系统](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-12Day.html)\n[第十三天的笔记-创建映像](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-13Day.html)\n[第十四天的笔记-网络](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-14Day.html)\n[第十五天的笔记-查找文件](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-15Day.html)\n\n# 总结\n\n主要学习了如何使用gzip, bzip2, zip的使用方法, 如何使用tar创建系统归档文件。\n<!--more-->\n\n# 压缩文件\n\n压缩的算法基本遵循一个原则, 就是避免冗余数据。\n\n比如一张纯黑色的100x100像素的图片, 每一个像素都会占用存储空间, 那么我们不必存储每一个像素, 而是用另一种方式表示这张图片, 比如这张图片有三万个黑色像素点, 那么直接存储数字30000, 后跟一个0(表示黑色像素)来表示这张图, 这种数据压缩方案被称为游程编码。\n\n# gzip\n\n```shell\n# 使用gzip压缩\ngzip test.txt\n# 使用gunzip解压缩\ngunzip test.txt.gz\n```\n\ngzip 选项\n\n| 选项 | 说明 |\n| :--- | :--- |\n| -c | 把输出写到标准输出, 并保留原始文件, 也可以用 --stdout 和 --tostdout 选项来指定。 |\n| -d | 解压缩, 和gunzip命令一样, 也可以用 --decompress 或者 --uncompress 选项来指定。 |\n| -f | 强制压缩, 即使原压缩文件存在也要强制执行, 也可用 --force 选项来指定。 |\n| -h | 显示用法信息, 也可用 --help 选项来指定。 |\n| -l | 列出每个被压缩文件的压缩数据, 也可用 --list 选项来指定。 |\n| -r | 若命令的一个或多个参数是目录, 则递归的压缩目录中的文件, 也可用 --recursive 来指定。 |\n| -t | 测试压缩文件的完整性, 也可用 --test 选项来指定。 |\n| -v | 显示压缩过程中的信息, 也可用 --verbose 选项来指定。 |\n| -number | 指定压缩指数, number是一个在1-9之间的整数, 默认值是整数6。 |\n\nzcat 命令\n\n> 等同于`gzip -c`命令\n\nzless 命令\n\n> 等同于`gzip *.gz | less` 命令\n\n# bzip2\n\n舍弃了压缩速度, 实现了更高的压缩级别。由bzip2压缩的文件, 使用后缀名`.bz2`来表示。\n\n工作模式和gzip相同(除了-r选项), 相对应的, 也有`bunzip`和`bzcat`命令来进行解压缩, 还有`bzip2recover`来对受损的文件进行修复。\n\n# 归档文件\n\n归档经常作为系统备份的一部分来使用, 归档就是把很多文件捆绑成一个大文件的过程。\n\n| 选项 | 说明 |\n| :--: | :--: |\n| c | 为文件和/或目录列表创建归档文件 |\n| x | 抽取归档文件 |\n| r | 追加具体的路径到归档文件的末尾 |\n| t | 列出归档文件的内容 |\n\n```sh\n# 使用 tar 将目录归档\ntar cf dir.tar dir\n# 列出归档文件的内容\ntar tf dir.tar\n# 复原tar\ntar xf dir.tar\n```\n\n注意, 如果使用的是普通用户(没用超级用户权限)来对tar进行复原操作, 则复原的所有文件的权限都归当前操作用户所有!\n\n```sh\n# 单独抽取某个文件\ntar xf dir.tar pathname\n# 抽取匹配的文件\ntar xf dir.tar --wildcards 'home/me/playground/dir-\\*/file-A'\n```\n\n还可以使用find命令和tar配合使用:\n\n```sh\n# 含义: 将playground文件夹中符合条件的文件使用 -exec 命令来调用 tar 的追加模式, 将文件追加到已有的归档文件中\nfind playground -name 'file-A' -exec tar rf playground.tar '{}' '+'\n# 含义: 将playground文件夹中符合条件的文件使用管道的方式制作压缩归档文件 (.tgz 或者 .tar.gz)\n# - 代表从管道中读取\nfind playground -name 'file-A' | tar cf - --files-from=- | gzip > playground.tgz\n# 上面命令的简化版 czf 代表用gzip方式压缩, cjf 代表用bzip2方式压缩\nfind playground -name 'file-A' | tar czf playground.tgz -T -\nfind playground -name 'file-A' | tar cjf playground.tbz -T -\n```\n\n还可以配合ssh工具将远端的系统(remote-stuff)中的文件夹复制到本地系统中:\n\n```sh\n[me@linuxbox ~]$ mkdir remote-stuff\n[me@linuxbox ~]$ cd remote-stuff\n[me@linuxbox remote-stuff]$ ssh remote-sys 'tar cf - Documents' | tar xf -\n[me@linuxbox remote-stuff]$ ls\nDocuments\n```\n\n# zip\n\n使用方式:\n\n```sh\n# 将目录打包为zip\nzip -r dirPath.zip dirPath\n# 列出指定zip文件\nzip -l dirPath.zip dir1/dir2\n# 使用管道\nfind playground -name \"files-A\" | zip -@ files-A.zip\n```\n","slug":"note/read_note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-16Day","published":1,"updated":"2022-10-07T13:04:27.977Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejwq008o3vsbd9cs0nug","content":"<p><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-1Day.html\">第一天的笔记-基本的命令和使用方法</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-2Day.html\">第二天的笔记-操作文件</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-3Day.html\">第三天的笔记-查阅命令文档并创建命令别名</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-4Day.html\">第四天的笔记-重定向标准输入和输出以及处理查询结果</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-5Day.html\">第五天的笔记-命令的展开</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-6Day.html\">第六天的笔记-快捷键</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-7Day.html\">第七天的笔记-文件权限</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-8Day.html\">第八天的笔记-进程</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-9Day.html\">第九天的笔记-修改shell环境</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-10Day.html\">第十天的笔记-vim入门</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-11Day.html\">第十一天的笔记-自定义shell提示符</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-12Day.html\">第十二天的笔记-软件包管理系统</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-13Day.html\">第十三天的笔记-创建映像</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-14Day.html\">第十四天的笔记-网络</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-15Day.html\">第十五天的笔记-查找文件</a></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>主要学习了如何使用gzip, bzip2, zip的使用方法, 如何使用tar创建系统归档文件。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"压缩文件\"><a href=\"#压缩文件\" class=\"headerlink\" title=\"压缩文件\"></a>压缩文件</h1><p>压缩的算法基本遵循一个原则, 就是避免冗余数据。</p>\n<p>比如一张纯黑色的100x100像素的图片, 每一个像素都会占用存储空间, 那么我们不必存储每一个像素, 而是用另一种方式表示这张图片, 比如这张图片有三万个黑色像素点, 那么直接存储数字30000, 后跟一个0(表示黑色像素)来表示这张图, 这种数据压缩方案被称为游程编码。</p>\n<h1 id=\"gzip\"><a href=\"#gzip\" class=\"headerlink\" title=\"gzip\"></a>gzip</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 使用gzip压缩</span></span><br><span class=\"line\">gzip test.txt</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 使用gunzip解压缩</span></span><br><span class=\"line\">gunzip test.txt.gz</span><br></pre></td></tr></table></figure>\n\n<p>gzip 选项</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">选项</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">-c</td>\n<td align=\"left\">把输出写到标准输出, 并保留原始文件, 也可以用 –stdout 和 –tostdout 选项来指定。</td>\n</tr>\n<tr>\n<td align=\"left\">-d</td>\n<td align=\"left\">解压缩, 和gunzip命令一样, 也可以用 –decompress 或者 –uncompress 选项来指定。</td>\n</tr>\n<tr>\n<td align=\"left\">-f</td>\n<td align=\"left\">强制压缩, 即使原压缩文件存在也要强制执行, 也可用 –force 选项来指定。</td>\n</tr>\n<tr>\n<td align=\"left\">-h</td>\n<td align=\"left\">显示用法信息, 也可用 –help 选项来指定。</td>\n</tr>\n<tr>\n<td align=\"left\">-l</td>\n<td align=\"left\">列出每个被压缩文件的压缩数据, 也可用 –list 选项来指定。</td>\n</tr>\n<tr>\n<td align=\"left\">-r</td>\n<td align=\"left\">若命令的一个或多个参数是目录, 则递归的压缩目录中的文件, 也可用 –recursive 来指定。</td>\n</tr>\n<tr>\n<td align=\"left\">-t</td>\n<td align=\"left\">测试压缩文件的完整性, 也可用 –test 选项来指定。</td>\n</tr>\n<tr>\n<td align=\"left\">-v</td>\n<td align=\"left\">显示压缩过程中的信息, 也可用 –verbose 选项来指定。</td>\n</tr>\n<tr>\n<td align=\"left\">-number</td>\n<td align=\"left\">指定压缩指数, number是一个在1-9之间的整数, 默认值是整数6。</td>\n</tr>\n</tbody></table>\n<p>zcat 命令</p>\n<blockquote>\n<p>等同于<code>gzip -c</code>命令</p>\n</blockquote>\n<p>zless 命令</p>\n<blockquote>\n<p>等同于<code>gzip *.gz | less</code> 命令</p>\n</blockquote>\n<h1 id=\"bzip2\"><a href=\"#bzip2\" class=\"headerlink\" title=\"bzip2\"></a>bzip2</h1><p>舍弃了压缩速度, 实现了更高的压缩级别。由bzip2压缩的文件, 使用后缀名<code>.bz2</code>来表示。</p>\n<p>工作模式和gzip相同(除了-r选项), 相对应的, 也有<code>bunzip</code>和<code>bzcat</code>命令来进行解压缩, 还有<code>bzip2recover</code>来对受损的文件进行修复。</p>\n<h1 id=\"归档文件\"><a href=\"#归档文件\" class=\"headerlink\" title=\"归档文件\"></a>归档文件</h1><p>归档经常作为系统备份的一部分来使用, 归档就是把很多文件捆绑成一个大文件的过程。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">选项</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">c</td>\n<td align=\"center\">为文件和&#x2F;或目录列表创建归档文件</td>\n</tr>\n<tr>\n<td align=\"center\">x</td>\n<td align=\"center\">抽取归档文件</td>\n</tr>\n<tr>\n<td align=\"center\">r</td>\n<td align=\"center\">追加具体的路径到归档文件的末尾</td>\n</tr>\n<tr>\n<td align=\"center\">t</td>\n<td align=\"center\">列出归档文件的内容</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用 tar 将目录归档</span></span><br><span class=\"line\">tar cf dir.tar dir</span><br><span class=\"line\"><span class=\"comment\"># 列出归档文件的内容</span></span><br><span class=\"line\">tar tf dir.tar</span><br><span class=\"line\"><span class=\"comment\"># 复原tar</span></span><br><span class=\"line\">tar xf dir.tar</span><br></pre></td></tr></table></figure>\n\n<p>注意, 如果使用的是普通用户(没用超级用户权限)来对tar进行复原操作, 则复原的所有文件的权限都归当前操作用户所有!</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 单独抽取某个文件</span></span><br><span class=\"line\">tar xf dir.tar pathname</span><br><span class=\"line\"><span class=\"comment\"># 抽取匹配的文件</span></span><br><span class=\"line\">tar xf dir.tar --wildcards <span class=\"string\">&#x27;home/me/playground/dir-\\*/file-A&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>还可以使用find命令和tar配合使用:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 含义: 将playground文件夹中符合条件的文件使用 -exec 命令来调用 tar 的追加模式, 将文件追加到已有的归档文件中</span></span><br><span class=\"line\">find playground -name <span class=\"string\">&#x27;file-A&#x27;</span> -<span class=\"built_in\">exec</span> tar rf playground.tar <span class=\"string\">&#x27;&#123;&#125;&#x27;</span> <span class=\"string\">&#x27;+&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 含义: 将playground文件夹中符合条件的文件使用管道的方式制作压缩归档文件 (.tgz 或者 .tar.gz)</span></span><br><span class=\"line\"><span class=\"comment\"># - 代表从管道中读取</span></span><br><span class=\"line\">find playground -name <span class=\"string\">&#x27;file-A&#x27;</span> | tar cf - --files-from=- | gzip &gt; playground.tgz</span><br><span class=\"line\"><span class=\"comment\"># 上面命令的简化版 czf 代表用gzip方式压缩, cjf 代表用bzip2方式压缩</span></span><br><span class=\"line\">find playground -name <span class=\"string\">&#x27;file-A&#x27;</span> | tar czf playground.tgz -T -</span><br><span class=\"line\">find playground -name <span class=\"string\">&#x27;file-A&#x27;</span> | tar cjf playground.tbz -T -</span><br></pre></td></tr></table></figure>\n\n<p>还可以配合ssh工具将远端的系统(remote-stuff)中的文件夹复制到本地系统中:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[me@linuxbox ~]$ mkdir remote-stuff</span><br><span class=\"line\">[me@linuxbox ~]$ <span class=\"built_in\">cd</span> remote-stuff</span><br><span class=\"line\">[me@linuxbox remote-stuff]$ ssh remote-sys <span class=\"string\">&#x27;tar cf - Documents&#x27;</span> | tar xf -</span><br><span class=\"line\">[me@linuxbox remote-stuff]$ ls</span><br><span class=\"line\">Documents</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"zip\"><a href=\"#zip\" class=\"headerlink\" title=\"zip\"></a>zip</h1><p>使用方式:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将目录打包为zip</span></span><br><span class=\"line\">zip -r dirPath.zip dirPath</span><br><span class=\"line\"><span class=\"comment\"># 列出指定zip文件</span></span><br><span class=\"line\">zip -l dirPath.zip dir1/dir2</span><br><span class=\"line\"><span class=\"comment\"># 使用管道</span></span><br><span class=\"line\">find playground -name <span class=\"string\">&quot;files-A&quot;</span> | zip -@ files-A.zip</span><br></pre></td></tr></table></figure>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<p><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-1Day.html\">第一天的笔记-基本的命令和使用方法</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-2Day.html\">第二天的笔记-操作文件</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-3Day.html\">第三天的笔记-查阅命令文档并创建命令别名</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-4Day.html\">第四天的笔记-重定向标准输入和输出以及处理查询结果</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-5Day.html\">第五天的笔记-命令的展开</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-6Day.html\">第六天的笔记-快捷键</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-7Day.html\">第七天的笔记-文件权限</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-8Day.html\">第八天的笔记-进程</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-9Day.html\">第九天的笔记-修改shell环境</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-10Day.html\">第十天的笔记-vim入门</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-11Day.html\">第十一天的笔记-自定义shell提示符</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-12Day.html\">第十二天的笔记-软件包管理系统</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-13Day.html\">第十三天的笔记-创建映像</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-14Day.html\">第十四天的笔记-网络</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-15Day.html\">第十五天的笔记-查找文件</a></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>主要学习了如何使用gzip, bzip2, zip的使用方法, 如何使用tar创建系统归档文件。</p>","more":"<h1 id=\"压缩文件\"><a href=\"#压缩文件\" class=\"headerlink\" title=\"压缩文件\"></a>压缩文件</h1><p>压缩的算法基本遵循一个原则, 就是避免冗余数据。</p>\n<p>比如一张纯黑色的100x100像素的图片, 每一个像素都会占用存储空间, 那么我们不必存储每一个像素, 而是用另一种方式表示这张图片, 比如这张图片有三万个黑色像素点, 那么直接存储数字30000, 后跟一个0(表示黑色像素)来表示这张图, 这种数据压缩方案被称为游程编码。</p>\n<h1 id=\"gzip\"><a href=\"#gzip\" class=\"headerlink\" title=\"gzip\"></a>gzip</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 使用gzip压缩</span></span><br><span class=\"line\">gzip test.txt</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 使用gunzip解压缩</span></span><br><span class=\"line\">gunzip test.txt.gz</span><br></pre></td></tr></table></figure>\n\n<p>gzip 选项</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">选项</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">-c</td>\n<td align=\"left\">把输出写到标准输出, 并保留原始文件, 也可以用 –stdout 和 –tostdout 选项来指定。</td>\n</tr>\n<tr>\n<td align=\"left\">-d</td>\n<td align=\"left\">解压缩, 和gunzip命令一样, 也可以用 –decompress 或者 –uncompress 选项来指定。</td>\n</tr>\n<tr>\n<td align=\"left\">-f</td>\n<td align=\"left\">强制压缩, 即使原压缩文件存在也要强制执行, 也可用 –force 选项来指定。</td>\n</tr>\n<tr>\n<td align=\"left\">-h</td>\n<td align=\"left\">显示用法信息, 也可用 –help 选项来指定。</td>\n</tr>\n<tr>\n<td align=\"left\">-l</td>\n<td align=\"left\">列出每个被压缩文件的压缩数据, 也可用 –list 选项来指定。</td>\n</tr>\n<tr>\n<td align=\"left\">-r</td>\n<td align=\"left\">若命令的一个或多个参数是目录, 则递归的压缩目录中的文件, 也可用 –recursive 来指定。</td>\n</tr>\n<tr>\n<td align=\"left\">-t</td>\n<td align=\"left\">测试压缩文件的完整性, 也可用 –test 选项来指定。</td>\n</tr>\n<tr>\n<td align=\"left\">-v</td>\n<td align=\"left\">显示压缩过程中的信息, 也可用 –verbose 选项来指定。</td>\n</tr>\n<tr>\n<td align=\"left\">-number</td>\n<td align=\"left\">指定压缩指数, number是一个在1-9之间的整数, 默认值是整数6。</td>\n</tr>\n</tbody></table>\n<p>zcat 命令</p>\n<blockquote>\n<p>等同于<code>gzip -c</code>命令</p>\n</blockquote>\n<p>zless 命令</p>\n<blockquote>\n<p>等同于<code>gzip *.gz | less</code> 命令</p>\n</blockquote>\n<h1 id=\"bzip2\"><a href=\"#bzip2\" class=\"headerlink\" title=\"bzip2\"></a>bzip2</h1><p>舍弃了压缩速度, 实现了更高的压缩级别。由bzip2压缩的文件, 使用后缀名<code>.bz2</code>来表示。</p>\n<p>工作模式和gzip相同(除了-r选项), 相对应的, 也有<code>bunzip</code>和<code>bzcat</code>命令来进行解压缩, 还有<code>bzip2recover</code>来对受损的文件进行修复。</p>\n<h1 id=\"归档文件\"><a href=\"#归档文件\" class=\"headerlink\" title=\"归档文件\"></a>归档文件</h1><p>归档经常作为系统备份的一部分来使用, 归档就是把很多文件捆绑成一个大文件的过程。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">选项</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">c</td>\n<td align=\"center\">为文件和&#x2F;或目录列表创建归档文件</td>\n</tr>\n<tr>\n<td align=\"center\">x</td>\n<td align=\"center\">抽取归档文件</td>\n</tr>\n<tr>\n<td align=\"center\">r</td>\n<td align=\"center\">追加具体的路径到归档文件的末尾</td>\n</tr>\n<tr>\n<td align=\"center\">t</td>\n<td align=\"center\">列出归档文件的内容</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用 tar 将目录归档</span></span><br><span class=\"line\">tar cf dir.tar dir</span><br><span class=\"line\"><span class=\"comment\"># 列出归档文件的内容</span></span><br><span class=\"line\">tar tf dir.tar</span><br><span class=\"line\"><span class=\"comment\"># 复原tar</span></span><br><span class=\"line\">tar xf dir.tar</span><br></pre></td></tr></table></figure>\n\n<p>注意, 如果使用的是普通用户(没用超级用户权限)来对tar进行复原操作, 则复原的所有文件的权限都归当前操作用户所有!</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 单独抽取某个文件</span></span><br><span class=\"line\">tar xf dir.tar pathname</span><br><span class=\"line\"><span class=\"comment\"># 抽取匹配的文件</span></span><br><span class=\"line\">tar xf dir.tar --wildcards <span class=\"string\">&#x27;home/me/playground/dir-\\*/file-A&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>还可以使用find命令和tar配合使用:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 含义: 将playground文件夹中符合条件的文件使用 -exec 命令来调用 tar 的追加模式, 将文件追加到已有的归档文件中</span></span><br><span class=\"line\">find playground -name <span class=\"string\">&#x27;file-A&#x27;</span> -<span class=\"built_in\">exec</span> tar rf playground.tar <span class=\"string\">&#x27;&#123;&#125;&#x27;</span> <span class=\"string\">&#x27;+&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 含义: 将playground文件夹中符合条件的文件使用管道的方式制作压缩归档文件 (.tgz 或者 .tar.gz)</span></span><br><span class=\"line\"><span class=\"comment\"># - 代表从管道中读取</span></span><br><span class=\"line\">find playground -name <span class=\"string\">&#x27;file-A&#x27;</span> | tar cf - --files-from=- | gzip &gt; playground.tgz</span><br><span class=\"line\"><span class=\"comment\"># 上面命令的简化版 czf 代表用gzip方式压缩, cjf 代表用bzip2方式压缩</span></span><br><span class=\"line\">find playground -name <span class=\"string\">&#x27;file-A&#x27;</span> | tar czf playground.tgz -T -</span><br><span class=\"line\">find playground -name <span class=\"string\">&#x27;file-A&#x27;</span> | tar cjf playground.tbz -T -</span><br></pre></td></tr></table></figure>\n\n<p>还可以配合ssh工具将远端的系统(remote-stuff)中的文件夹复制到本地系统中:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[me@linuxbox ~]$ mkdir remote-stuff</span><br><span class=\"line\">[me@linuxbox ~]$ <span class=\"built_in\">cd</span> remote-stuff</span><br><span class=\"line\">[me@linuxbox remote-stuff]$ ssh remote-sys <span class=\"string\">&#x27;tar cf - Documents&#x27;</span> | tar xf -</span><br><span class=\"line\">[me@linuxbox remote-stuff]$ ls</span><br><span class=\"line\">Documents</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"zip\"><a href=\"#zip\" class=\"headerlink\" title=\"zip\"></a>zip</h1><p>使用方式:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将目录打包为zip</span></span><br><span class=\"line\">zip -r dirPath.zip dirPath</span><br><span class=\"line\"><span class=\"comment\"># 列出指定zip文件</span></span><br><span class=\"line\">zip -l dirPath.zip dir1/dir2</span><br><span class=\"line\"><span class=\"comment\"># 使用管道</span></span><br><span class=\"line\">find playground -name <span class=\"string\">&quot;files-A&quot;</span> | zip -@ files-A.zip</span><br></pre></td></tr></table></figure>"},{"title":"快乐的Linux命令行笔记-正则表达式","date":"2020-05-31T11:41:08.000Z","_content":"\n[第一天的笔记-基本的命令和使用方法](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-1Day.html)\n[第二天的笔记-操作文件](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-2Day.html)\n[第三天的笔记-查阅命令文档并创建命令别名](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-3Day.html)\n[第四天的笔记-重定向标准输入和输出以及处理查询结果](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-4Day.html)\n[第五天的笔记-命令的展开](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-5Day.html)\n[第六天的笔记-快捷键](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-6Day.html)\n[第七天的笔记-文件权限](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-7Day.html)\n[第八天的笔记-进程](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-8Day.html)\n[第九天的笔记-修改shell环境](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-9Day.html)\n[第十天的笔记-vim入门](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-10Day.html)\n[第十一天的笔记-自定义shell提示符](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-11Day.html)\n[第十二天的笔记-软件包管理系统](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-12Day.html)\n[第十三天的笔记-创建映像](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-13Day.html)\n[第十四天的笔记-网络](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-14Day.html)\n[第十五天的笔记-查找文件](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-15Day.html)\n[第十六天的笔记-压缩](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-16Day.html)\n\n# 总结\n\n本次主要学习了如何在各种命令中使用正则表达式来匹配, 其他的命令如find, 可以使用 -regex, locate 可以使用 --regex\n<!--more-->\n\n## grep中使用正则\n\ngrep选项\n\n| 选项 | 描述 |\n| :---: | :-- |\n| -i | 忽略大小写, 不会区分大小写字符, 也可用 --ignore-case 指定 |\n| -v | 不匹配, 通常 grep 程序会打印包含匹配项的文本行。这个选项导致 grep 只打印不包含匹配项的文本行, 也可用 --invert-match 指定 |\n| -c | 打印匹配数量(或是不匹配数目, 若指定了-v选项), 而不是文本行本身, 也可用 --count 选项来指定 |\n| -l | 打印包含匹配项的文件名, 而不是文本行本身, 也可用 --files-with-matched 选项来指定 |\n| -L | 和-l相反, z打印不匹配的文件名, 也可用 --files-without-match 来指定 |\n| -n | 在每个匹配行之前打印出其位于文件中的相应行号。也可用 --line-number 选项指定 |\n| -h | 应用于多文件搜索, 不输出文件名, 也可用 --no-filename 选项指定 |\n\n使用grep检索文本文档中的内容:\n\n```sh\n# 检索出匹配的文件中包含bzip字样的文本行\ngrep bzip dirlist*.txt\n# 检索出匹配的文件中包含bzip字样的文件\ngrep bzip -l dirlist*.txt\n```\n\n## POSIX 字符集\n\n| 字符集 | 说明 |\n| :---- | :---- |\n| [:alnum:] | 字母数字字符。在ASCII中, 等价于: [a-zA-Z0-9] |\n| [:word:] | 与 [:alnum:] 相同, 但是增加了下划线字符 |\n| [:alpha:] | 字母字符, 在ASCII中等价于 [a-zA-Z] |\n| [:blank:] | 包含空格和tab字符 |\n| [:cntrl:] | ASCII的控制码, 包含了 0-31, 和 127 的ASCII字符 |\n| [:digit:] | 数字0-9 |\n| [:graph:] | 可视字符, 在 ASCII 中包含33到126的字符 |\n| [:lower:] | 小写字母 |\n| [:punct:] | 标点符号字符, 在ASCII中等价于 [-!\"#$%&'()*+,./:;<=>?@[  \\]_\\`{|}~] |\n| [:print:] | 可打印字符, 包含 [:graph:] 中的所有字符, 再加上空格字符 |\n| [:space:] | 空白字符, 包括空格, tab, 回车, 换行, vertical tab 和 form feed, 在 ASCII 中, 等价于: [\\t\\r\\n\\v\\f] |\n| [:upper:] | 大写字母 |\n| [:xdigit:] | 用来表时十六进制数字的字符, 在ASCII中, 等价于: [0-9A-Fa-f] |\n\n使用 `locale` 命令查看所有排序规则, 并通过 `export LANG=POSIX` 命令来更改当前的系统排序规则。\n\n## POSIX基本正则表达式与POSIX扩展正则表达式\n\n基本正则表达式(BRE) 扩展正则表达式(ERE)\n\nBRE可以辨别以下元字符:\n\n```\n^ $ . [ ] *\n```\n\nERE 比 BRE 多了以下元字符:\n\n```\n( ) { } ? + |\n```\n\n然而在 BRE 中, 字符 `(` `)` `{` `}` 用反斜杠转义后, 被看作是元字符, 相反在ERE中, 任意元字符之前加上反斜杠都会被看作是文本字符。\n","source":"_posts/note/read_note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-17Day.md","raw":"---\ntitle: 快乐的Linux命令行笔记-正则表达式\ncategories:\n- 笔记\n- 读书笔记\n- 快乐的Linux命令行\ntags:\n- 笔记\n- 快乐的Linux命令行\n- linux\ndate: 2020-05-31 19:41:08\n---\n\n[第一天的笔记-基本的命令和使用方法](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-1Day.html)\n[第二天的笔记-操作文件](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-2Day.html)\n[第三天的笔记-查阅命令文档并创建命令别名](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-3Day.html)\n[第四天的笔记-重定向标准输入和输出以及处理查询结果](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-4Day.html)\n[第五天的笔记-命令的展开](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-5Day.html)\n[第六天的笔记-快捷键](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-6Day.html)\n[第七天的笔记-文件权限](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-7Day.html)\n[第八天的笔记-进程](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-8Day.html)\n[第九天的笔记-修改shell环境](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-9Day.html)\n[第十天的笔记-vim入门](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-10Day.html)\n[第十一天的笔记-自定义shell提示符](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-11Day.html)\n[第十二天的笔记-软件包管理系统](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-12Day.html)\n[第十三天的笔记-创建映像](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-13Day.html)\n[第十四天的笔记-网络](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-14Day.html)\n[第十五天的笔记-查找文件](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-15Day.html)\n[第十六天的笔记-压缩](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-16Day.html)\n\n# 总结\n\n本次主要学习了如何在各种命令中使用正则表达式来匹配, 其他的命令如find, 可以使用 -regex, locate 可以使用 --regex\n<!--more-->\n\n## grep中使用正则\n\ngrep选项\n\n| 选项 | 描述 |\n| :---: | :-- |\n| -i | 忽略大小写, 不会区分大小写字符, 也可用 --ignore-case 指定 |\n| -v | 不匹配, 通常 grep 程序会打印包含匹配项的文本行。这个选项导致 grep 只打印不包含匹配项的文本行, 也可用 --invert-match 指定 |\n| -c | 打印匹配数量(或是不匹配数目, 若指定了-v选项), 而不是文本行本身, 也可用 --count 选项来指定 |\n| -l | 打印包含匹配项的文件名, 而不是文本行本身, 也可用 --files-with-matched 选项来指定 |\n| -L | 和-l相反, z打印不匹配的文件名, 也可用 --files-without-match 来指定 |\n| -n | 在每个匹配行之前打印出其位于文件中的相应行号。也可用 --line-number 选项指定 |\n| -h | 应用于多文件搜索, 不输出文件名, 也可用 --no-filename 选项指定 |\n\n使用grep检索文本文档中的内容:\n\n```sh\n# 检索出匹配的文件中包含bzip字样的文本行\ngrep bzip dirlist*.txt\n# 检索出匹配的文件中包含bzip字样的文件\ngrep bzip -l dirlist*.txt\n```\n\n## POSIX 字符集\n\n| 字符集 | 说明 |\n| :---- | :---- |\n| [:alnum:] | 字母数字字符。在ASCII中, 等价于: [a-zA-Z0-9] |\n| [:word:] | 与 [:alnum:] 相同, 但是增加了下划线字符 |\n| [:alpha:] | 字母字符, 在ASCII中等价于 [a-zA-Z] |\n| [:blank:] | 包含空格和tab字符 |\n| [:cntrl:] | ASCII的控制码, 包含了 0-31, 和 127 的ASCII字符 |\n| [:digit:] | 数字0-9 |\n| [:graph:] | 可视字符, 在 ASCII 中包含33到126的字符 |\n| [:lower:] | 小写字母 |\n| [:punct:] | 标点符号字符, 在ASCII中等价于 [-!\"#$%&'()*+,./:;<=>?@[  \\]_\\`{|}~] |\n| [:print:] | 可打印字符, 包含 [:graph:] 中的所有字符, 再加上空格字符 |\n| [:space:] | 空白字符, 包括空格, tab, 回车, 换行, vertical tab 和 form feed, 在 ASCII 中, 等价于: [\\t\\r\\n\\v\\f] |\n| [:upper:] | 大写字母 |\n| [:xdigit:] | 用来表时十六进制数字的字符, 在ASCII中, 等价于: [0-9A-Fa-f] |\n\n使用 `locale` 命令查看所有排序规则, 并通过 `export LANG=POSIX` 命令来更改当前的系统排序规则。\n\n## POSIX基本正则表达式与POSIX扩展正则表达式\n\n基本正则表达式(BRE) 扩展正则表达式(ERE)\n\nBRE可以辨别以下元字符:\n\n```\n^ $ . [ ] *\n```\n\nERE 比 BRE 多了以下元字符:\n\n```\n( ) { } ? + |\n```\n\n然而在 BRE 中, 字符 `(` `)` `{` `}` 用反斜杠转义后, 被看作是元字符, 相反在ERE中, 任意元字符之前加上反斜杠都会被看作是文本字符。\n","slug":"note/read_note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-17Day","published":1,"updated":"2022-10-07T13:04:35.685Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejwv008t3vsb07vze968","content":"<p><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-1Day.html\">第一天的笔记-基本的命令和使用方法</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-2Day.html\">第二天的笔记-操作文件</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-3Day.html\">第三天的笔记-查阅命令文档并创建命令别名</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-4Day.html\">第四天的笔记-重定向标准输入和输出以及处理查询结果</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-5Day.html\">第五天的笔记-命令的展开</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-6Day.html\">第六天的笔记-快捷键</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-7Day.html\">第七天的笔记-文件权限</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-8Day.html\">第八天的笔记-进程</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-9Day.html\">第九天的笔记-修改shell环境</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-10Day.html\">第十天的笔记-vim入门</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-11Day.html\">第十一天的笔记-自定义shell提示符</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-12Day.html\">第十二天的笔记-软件包管理系统</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-13Day.html\">第十三天的笔记-创建映像</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-14Day.html\">第十四天的笔记-网络</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-15Day.html\">第十五天的笔记-查找文件</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-16Day.html\">第十六天的笔记-压缩</a></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>本次主要学习了如何在各种命令中使用正则表达式来匹配, 其他的命令如find, 可以使用 -regex, locate 可以使用 –regex</p>\n<span id=\"more\"></span>\n\n<h2 id=\"grep中使用正则\"><a href=\"#grep中使用正则\" class=\"headerlink\" title=\"grep中使用正则\"></a>grep中使用正则</h2><p>grep选项</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">选项</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">-i</td>\n<td align=\"left\">忽略大小写, 不会区分大小写字符, 也可用 –ignore-case 指定</td>\n</tr>\n<tr>\n<td align=\"center\">-v</td>\n<td align=\"left\">不匹配, 通常 grep 程序会打印包含匹配项的文本行。这个选项导致 grep 只打印不包含匹配项的文本行, 也可用 –invert-match 指定</td>\n</tr>\n<tr>\n<td align=\"center\">-c</td>\n<td align=\"left\">打印匹配数量(或是不匹配数目, 若指定了-v选项), 而不是文本行本身, 也可用 –count 选项来指定</td>\n</tr>\n<tr>\n<td align=\"center\">-l</td>\n<td align=\"left\">打印包含匹配项的文件名, 而不是文本行本身, 也可用 –files-with-matched 选项来指定</td>\n</tr>\n<tr>\n<td align=\"center\">-L</td>\n<td align=\"left\">和-l相反, z打印不匹配的文件名, 也可用 –files-without-match 来指定</td>\n</tr>\n<tr>\n<td align=\"center\">-n</td>\n<td align=\"left\">在每个匹配行之前打印出其位于文件中的相应行号。也可用 –line-number 选项指定</td>\n</tr>\n<tr>\n<td align=\"center\">-h</td>\n<td align=\"left\">应用于多文件搜索, 不输出文件名, 也可用 –no-filename 选项指定</td>\n</tr>\n</tbody></table>\n<p>使用grep检索文本文档中的内容:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 检索出匹配的文件中包含bzip字样的文本行</span></span><br><span class=\"line\">grep bzip dirlist*.txt</span><br><span class=\"line\"><span class=\"comment\"># 检索出匹配的文件中包含bzip字样的文件</span></span><br><span class=\"line\">grep bzip -l dirlist*.txt</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"POSIX-字符集\"><a href=\"#POSIX-字符集\" class=\"headerlink\" title=\"POSIX 字符集\"></a>POSIX 字符集</h2><table>\n<thead>\n<tr>\n<th align=\"left\">字符集</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">[:alnum:]</td>\n<td align=\"left\">字母数字字符。在ASCII中, 等价于: [a-zA-Z0-9]</td>\n</tr>\n<tr>\n<td align=\"left\">[:word:]</td>\n<td align=\"left\">与 [:alnum:] 相同, 但是增加了下划线字符</td>\n</tr>\n<tr>\n<td align=\"left\">[:alpha:]</td>\n<td align=\"left\">字母字符, 在ASCII中等价于 [a-zA-Z]</td>\n</tr>\n<tr>\n<td align=\"left\">[:blank:]</td>\n<td align=\"left\">包含空格和tab字符</td>\n</tr>\n<tr>\n<td align=\"left\">[:cntrl:]</td>\n<td align=\"left\">ASCII的控制码, 包含了 0-31, 和 127 的ASCII字符</td>\n</tr>\n<tr>\n<td align=\"left\">[:digit:]</td>\n<td align=\"left\">数字0-9</td>\n</tr>\n<tr>\n<td align=\"left\">[:graph:]</td>\n<td align=\"left\">可视字符, 在 ASCII 中包含33到126的字符</td>\n</tr>\n<tr>\n<td align=\"left\">[:lower:]</td>\n<td align=\"left\">小写字母</td>\n</tr>\n<tr>\n<td align=\"left\">[:punct:]</td>\n<td align=\"left\">标点符号字符, 在ASCII中等价于 [-!”#$%&amp;’()*+,.&#x2F;:;&lt;&#x3D;&gt;?@[  ]_`{</td>\n</tr>\n<tr>\n<td align=\"left\">[:print:]</td>\n<td align=\"left\">可打印字符, 包含 [:graph:] 中的所有字符, 再加上空格字符</td>\n</tr>\n<tr>\n<td align=\"left\">[:space:]</td>\n<td align=\"left\">空白字符, 包括空格, tab, 回车, 换行, vertical tab 和 form feed, 在 ASCII 中, 等价于: [\\t\\r\\n\\v\\f]</td>\n</tr>\n<tr>\n<td align=\"left\">[:upper:]</td>\n<td align=\"left\">大写字母</td>\n</tr>\n<tr>\n<td align=\"left\">[:xdigit:]</td>\n<td align=\"left\">用来表时十六进制数字的字符, 在ASCII中, 等价于: [0-9A-Fa-f]</td>\n</tr>\n</tbody></table>\n<p>使用 <code>locale</code> 命令查看所有排序规则, 并通过 <code>export LANG=POSIX</code> 命令来更改当前的系统排序规则。</p>\n<h2 id=\"POSIX基本正则表达式与POSIX扩展正则表达式\"><a href=\"#POSIX基本正则表达式与POSIX扩展正则表达式\" class=\"headerlink\" title=\"POSIX基本正则表达式与POSIX扩展正则表达式\"></a>POSIX基本正则表达式与POSIX扩展正则表达式</h2><p>基本正则表达式(BRE) 扩展正则表达式(ERE)</p>\n<p>BRE可以辨别以下元字符:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^ $ . [ ] *</span><br></pre></td></tr></table></figure>\n\n<p>ERE 比 BRE 多了以下元字符:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">( ) &#123; &#125; ? + |</span><br></pre></td></tr></table></figure>\n\n<p>然而在 BRE 中, 字符 <code>(</code> <code>)</code> <code>&#123;</code> <code>&#125;</code> 用反斜杠转义后, 被看作是元字符, 相反在ERE中, 任意元字符之前加上反斜杠都会被看作是文本字符。</p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<p><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-1Day.html\">第一天的笔记-基本的命令和使用方法</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-2Day.html\">第二天的笔记-操作文件</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-3Day.html\">第三天的笔记-查阅命令文档并创建命令别名</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-4Day.html\">第四天的笔记-重定向标准输入和输出以及处理查询结果</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-5Day.html\">第五天的笔记-命令的展开</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-6Day.html\">第六天的笔记-快捷键</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-7Day.html\">第七天的笔记-文件权限</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-8Day.html\">第八天的笔记-进程</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-9Day.html\">第九天的笔记-修改shell环境</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-10Day.html\">第十天的笔记-vim入门</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-11Day.html\">第十一天的笔记-自定义shell提示符</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-12Day.html\">第十二天的笔记-软件包管理系统</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-13Day.html\">第十三天的笔记-创建映像</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-14Day.html\">第十四天的笔记-网络</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-15Day.html\">第十五天的笔记-查找文件</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-16Day.html\">第十六天的笔记-压缩</a></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>本次主要学习了如何在各种命令中使用正则表达式来匹配, 其他的命令如find, 可以使用 -regex, locate 可以使用 –regex</p>","more":"<h2 id=\"grep中使用正则\"><a href=\"#grep中使用正则\" class=\"headerlink\" title=\"grep中使用正则\"></a>grep中使用正则</h2><p>grep选项</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">选项</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">-i</td>\n<td align=\"left\">忽略大小写, 不会区分大小写字符, 也可用 –ignore-case 指定</td>\n</tr>\n<tr>\n<td align=\"center\">-v</td>\n<td align=\"left\">不匹配, 通常 grep 程序会打印包含匹配项的文本行。这个选项导致 grep 只打印不包含匹配项的文本行, 也可用 –invert-match 指定</td>\n</tr>\n<tr>\n<td align=\"center\">-c</td>\n<td align=\"left\">打印匹配数量(或是不匹配数目, 若指定了-v选项), 而不是文本行本身, 也可用 –count 选项来指定</td>\n</tr>\n<tr>\n<td align=\"center\">-l</td>\n<td align=\"left\">打印包含匹配项的文件名, 而不是文本行本身, 也可用 –files-with-matched 选项来指定</td>\n</tr>\n<tr>\n<td align=\"center\">-L</td>\n<td align=\"left\">和-l相反, z打印不匹配的文件名, 也可用 –files-without-match 来指定</td>\n</tr>\n<tr>\n<td align=\"center\">-n</td>\n<td align=\"left\">在每个匹配行之前打印出其位于文件中的相应行号。也可用 –line-number 选项指定</td>\n</tr>\n<tr>\n<td align=\"center\">-h</td>\n<td align=\"left\">应用于多文件搜索, 不输出文件名, 也可用 –no-filename 选项指定</td>\n</tr>\n</tbody></table>\n<p>使用grep检索文本文档中的内容:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 检索出匹配的文件中包含bzip字样的文本行</span></span><br><span class=\"line\">grep bzip dirlist*.txt</span><br><span class=\"line\"><span class=\"comment\"># 检索出匹配的文件中包含bzip字样的文件</span></span><br><span class=\"line\">grep bzip -l dirlist*.txt</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"POSIX-字符集\"><a href=\"#POSIX-字符集\" class=\"headerlink\" title=\"POSIX 字符集\"></a>POSIX 字符集</h2><table>\n<thead>\n<tr>\n<th align=\"left\">字符集</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">[:alnum:]</td>\n<td align=\"left\">字母数字字符。在ASCII中, 等价于: [a-zA-Z0-9]</td>\n</tr>\n<tr>\n<td align=\"left\">[:word:]</td>\n<td align=\"left\">与 [:alnum:] 相同, 但是增加了下划线字符</td>\n</tr>\n<tr>\n<td align=\"left\">[:alpha:]</td>\n<td align=\"left\">字母字符, 在ASCII中等价于 [a-zA-Z]</td>\n</tr>\n<tr>\n<td align=\"left\">[:blank:]</td>\n<td align=\"left\">包含空格和tab字符</td>\n</tr>\n<tr>\n<td align=\"left\">[:cntrl:]</td>\n<td align=\"left\">ASCII的控制码, 包含了 0-31, 和 127 的ASCII字符</td>\n</tr>\n<tr>\n<td align=\"left\">[:digit:]</td>\n<td align=\"left\">数字0-9</td>\n</tr>\n<tr>\n<td align=\"left\">[:graph:]</td>\n<td align=\"left\">可视字符, 在 ASCII 中包含33到126的字符</td>\n</tr>\n<tr>\n<td align=\"left\">[:lower:]</td>\n<td align=\"left\">小写字母</td>\n</tr>\n<tr>\n<td align=\"left\">[:punct:]</td>\n<td align=\"left\">标点符号字符, 在ASCII中等价于 [-!”#$%&amp;’()*+,.&#x2F;:;&lt;&#x3D;&gt;?@[  ]_`{</td>\n</tr>\n<tr>\n<td align=\"left\">[:print:]</td>\n<td align=\"left\">可打印字符, 包含 [:graph:] 中的所有字符, 再加上空格字符</td>\n</tr>\n<tr>\n<td align=\"left\">[:space:]</td>\n<td align=\"left\">空白字符, 包括空格, tab, 回车, 换行, vertical tab 和 form feed, 在 ASCII 中, 等价于: [\\t\\r\\n\\v\\f]</td>\n</tr>\n<tr>\n<td align=\"left\">[:upper:]</td>\n<td align=\"left\">大写字母</td>\n</tr>\n<tr>\n<td align=\"left\">[:xdigit:]</td>\n<td align=\"left\">用来表时十六进制数字的字符, 在ASCII中, 等价于: [0-9A-Fa-f]</td>\n</tr>\n</tbody></table>\n<p>使用 <code>locale</code> 命令查看所有排序规则, 并通过 <code>export LANG=POSIX</code> 命令来更改当前的系统排序规则。</p>\n<h2 id=\"POSIX基本正则表达式与POSIX扩展正则表达式\"><a href=\"#POSIX基本正则表达式与POSIX扩展正则表达式\" class=\"headerlink\" title=\"POSIX基本正则表达式与POSIX扩展正则表达式\"></a>POSIX基本正则表达式与POSIX扩展正则表达式</h2><p>基本正则表达式(BRE) 扩展正则表达式(ERE)</p>\n<p>BRE可以辨别以下元字符:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^ $ . [ ] *</span><br></pre></td></tr></table></figure>\n\n<p>ERE 比 BRE 多了以下元字符:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">( ) &#123; &#125; ? + |</span><br></pre></td></tr></table></figure>\n\n<p>然而在 BRE 中, 字符 <code>(</code> <code>)</code> <code>&#123;</code> <code>&#125;</code> 用反斜杠转义后, 被看作是元字符, 相反在ERE中, 任意元字符之前加上反斜杠都会被看作是文本字符。</p>"},{"title":"快乐的Linux命令行笔记-文本处理","date":"2020-06-03T15:52:13.000Z","_content":"\n[第一天的笔记-基本的命令和使用方法](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-1Day.html)\n[第二天的笔记-操作文件](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-2Day.html)\n[第三天的笔记-查阅命令文档并创建命令别名](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-3Day.html)\n[第四天的笔记-重定向标准输入和输出以及处理查询结果](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-4Day.html)\n[第五天的笔记-命令的展开](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-5Day.html)\n[第六天的笔记-快捷键](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-6Day.html)\n[第七天的笔记-文件权限](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-7Day.html)\n[第八天的笔记-进程](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-8Day.html)\n[第九天的笔记-修改shell环境](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-9Day.html)\n[第十天的笔记-vim入门](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-10Day.html)\n[第十一天的笔记-自定义shell提示符](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-11Day.html)\n[第十二天的笔记-软件包管理系统](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-12Day.html)\n[第十三天的笔记-创建映像](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-13Day.html)\n[第十四天的笔记-网络](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-14Day.html)\n[第十五天的笔记-查找文件](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-15Day.html)\n[第十六天的笔记-压缩](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-16Day.html)\n[第十六天的笔记-正则表达式](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-17Day.html)\n\n# 总结\n\n<!--more-->\n\n* 一些文本处理程序\n\n| 程序名 | 说明 |\n| :----- | :--- |\n| cat | 连接文件并且打印到标准输出 |\n| sort | 给文本排序 |\n| uniq | 报告或者省略重复行 |\n| cut | 从每行中删除文本区域 |\n| paste | 合并文件文本行 |\n| join | 基于某个共享字段来联合两个文件的文本行 |\n| comm | 逐行比较两个有序的文件 |\n| diff | 逐行比较文件 |\n| patch | 给原始文件打补丁 |\n| tr | 翻译或删除字符 |\n| sed | 用于筛选和转换文本的流编译器 |\n| aspell | 交互式拼写检查器 |\n\n# 关于换行符\n\nUnix文本和MS-DOS文本的区别在于换行符的不同。\nUnix文本使用ASCII 10作为换行符, MS-DOS使用ASCII 13和换行字符序列作为换行符。\n可以使用 dos2unix 和 unix2dos 程序来转换两种格式的文本。\n\n# 使用cat和sort处理文本\n\n```sh\n# foo.txt content:\n# a b\n# \n# \n# c\ncat -ns foo.txt\n#output:\n# foo.txt content:\n#1 a b\n#\n#3 c\n\n# 使用sort对文本排序:\nsort file1.txt file2.txt file3.txt > file4.txt\n```\n\n常见的sort程序选项:\n\n| 选项 | 长选项 | 描述 |\n| :--- | :----- | :--- |\n| -b | --ignore-leading-blanks | 默认情况下, 对整体的进行排序, 从每行的第一个字符开始。这个选项导致sort程序忽略,每行开头的空格, 从第一个非空白字符开始排序 |\n| -f | --igonre-case | 让排序不区分大小写 |\n| -n | --numeric-sort | 基于字符串的数值来排序。使用此选项允许根据数字值执行排序, 而不是字母值 |\n| -r | --reverse | 按相反顺序排序, 结果按照降序排列, 而不是升序 |\n| -k | --key=field1[,field2] | 对从 field1 到 field2 之间的字符排序, 而不是整个文本行 |\n| -m | --merge | 把每个参数看作是一个预先排好序的文件, 把多个文件合并成一个排好序的文件, 而没有执行额外的排序 |\n| -o | --output=file | 把排好序的输出结果发送到文件, 而不是标准输出 |\n| -t | --field-separator=char | 定义域分割字符, 默认情况下, 域由空格或制表符分割 |\n\n\n| \n","source":"_posts/note/read_note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-18Day.md","raw":"---\ntitle: 快乐的Linux命令行笔记-文本处理\ncategories:\n- 笔记\n- 读书笔记\n- 快乐的Linux命令行\ntags:\n- 笔记\n- 快乐的Linux命令行\n- linux\ndate: 2020-06-03 23:52:13\n---\n\n[第一天的笔记-基本的命令和使用方法](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-1Day.html)\n[第二天的笔记-操作文件](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-2Day.html)\n[第三天的笔记-查阅命令文档并创建命令别名](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-3Day.html)\n[第四天的笔记-重定向标准输入和输出以及处理查询结果](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-4Day.html)\n[第五天的笔记-命令的展开](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-5Day.html)\n[第六天的笔记-快捷键](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-6Day.html)\n[第七天的笔记-文件权限](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-7Day.html)\n[第八天的笔记-进程](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-8Day.html)\n[第九天的笔记-修改shell环境](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-9Day.html)\n[第十天的笔记-vim入门](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-10Day.html)\n[第十一天的笔记-自定义shell提示符](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-11Day.html)\n[第十二天的笔记-软件包管理系统](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-12Day.html)\n[第十三天的笔记-创建映像](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-13Day.html)\n[第十四天的笔记-网络](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-14Day.html)\n[第十五天的笔记-查找文件](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-15Day.html)\n[第十六天的笔记-压缩](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-16Day.html)\n[第十六天的笔记-正则表达式](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-17Day.html)\n\n# 总结\n\n<!--more-->\n\n* 一些文本处理程序\n\n| 程序名 | 说明 |\n| :----- | :--- |\n| cat | 连接文件并且打印到标准输出 |\n| sort | 给文本排序 |\n| uniq | 报告或者省略重复行 |\n| cut | 从每行中删除文本区域 |\n| paste | 合并文件文本行 |\n| join | 基于某个共享字段来联合两个文件的文本行 |\n| comm | 逐行比较两个有序的文件 |\n| diff | 逐行比较文件 |\n| patch | 给原始文件打补丁 |\n| tr | 翻译或删除字符 |\n| sed | 用于筛选和转换文本的流编译器 |\n| aspell | 交互式拼写检查器 |\n\n# 关于换行符\n\nUnix文本和MS-DOS文本的区别在于换行符的不同。\nUnix文本使用ASCII 10作为换行符, MS-DOS使用ASCII 13和换行字符序列作为换行符。\n可以使用 dos2unix 和 unix2dos 程序来转换两种格式的文本。\n\n# 使用cat和sort处理文本\n\n```sh\n# foo.txt content:\n# a b\n# \n# \n# c\ncat -ns foo.txt\n#output:\n# foo.txt content:\n#1 a b\n#\n#3 c\n\n# 使用sort对文本排序:\nsort file1.txt file2.txt file3.txt > file4.txt\n```\n\n常见的sort程序选项:\n\n| 选项 | 长选项 | 描述 |\n| :--- | :----- | :--- |\n| -b | --ignore-leading-blanks | 默认情况下, 对整体的进行排序, 从每行的第一个字符开始。这个选项导致sort程序忽略,每行开头的空格, 从第一个非空白字符开始排序 |\n| -f | --igonre-case | 让排序不区分大小写 |\n| -n | --numeric-sort | 基于字符串的数值来排序。使用此选项允许根据数字值执行排序, 而不是字母值 |\n| -r | --reverse | 按相反顺序排序, 结果按照降序排列, 而不是升序 |\n| -k | --key=field1[,field2] | 对从 field1 到 field2 之间的字符排序, 而不是整个文本行 |\n| -m | --merge | 把每个参数看作是一个预先排好序的文件, 把多个文件合并成一个排好序的文件, 而没有执行额外的排序 |\n| -o | --output=file | 把排好序的输出结果发送到文件, 而不是标准输出 |\n| -t | --field-separator=char | 定义域分割字符, 默认情况下, 域由空格或制表符分割 |\n\n\n| \n","slug":"note/read_note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-18Day","published":1,"updated":"2022-10-07T13:04:45.545Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejwz008w3vsb8a7ee5m7","content":"<p><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-1Day.html\">第一天的笔记-基本的命令和使用方法</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-2Day.html\">第二天的笔记-操作文件</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-3Day.html\">第三天的笔记-查阅命令文档并创建命令别名</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-4Day.html\">第四天的笔记-重定向标准输入和输出以及处理查询结果</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-5Day.html\">第五天的笔记-命令的展开</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-6Day.html\">第六天的笔记-快捷键</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-7Day.html\">第七天的笔记-文件权限</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-8Day.html\">第八天的笔记-进程</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-9Day.html\">第九天的笔记-修改shell环境</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-10Day.html\">第十天的笔记-vim入门</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-11Day.html\">第十一天的笔记-自定义shell提示符</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-12Day.html\">第十二天的笔记-软件包管理系统</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-13Day.html\">第十三天的笔记-创建映像</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-14Day.html\">第十四天的笔记-网络</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-15Day.html\">第十五天的笔记-查找文件</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-16Day.html\">第十六天的笔记-压缩</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-17Day.html\">第十六天的笔记-正则表达式</a></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><span id=\"more\"></span>\n\n<ul>\n<li>一些文本处理程序</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"left\">程序名</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">cat</td>\n<td align=\"left\">连接文件并且打印到标准输出</td>\n</tr>\n<tr>\n<td align=\"left\">sort</td>\n<td align=\"left\">给文本排序</td>\n</tr>\n<tr>\n<td align=\"left\">uniq</td>\n<td align=\"left\">报告或者省略重复行</td>\n</tr>\n<tr>\n<td align=\"left\">cut</td>\n<td align=\"left\">从每行中删除文本区域</td>\n</tr>\n<tr>\n<td align=\"left\">paste</td>\n<td align=\"left\">合并文件文本行</td>\n</tr>\n<tr>\n<td align=\"left\">join</td>\n<td align=\"left\">基于某个共享字段来联合两个文件的文本行</td>\n</tr>\n<tr>\n<td align=\"left\">comm</td>\n<td align=\"left\">逐行比较两个有序的文件</td>\n</tr>\n<tr>\n<td align=\"left\">diff</td>\n<td align=\"left\">逐行比较文件</td>\n</tr>\n<tr>\n<td align=\"left\">patch</td>\n<td align=\"left\">给原始文件打补丁</td>\n</tr>\n<tr>\n<td align=\"left\">tr</td>\n<td align=\"left\">翻译或删除字符</td>\n</tr>\n<tr>\n<td align=\"left\">sed</td>\n<td align=\"left\">用于筛选和转换文本的流编译器</td>\n</tr>\n<tr>\n<td align=\"left\">aspell</td>\n<td align=\"left\">交互式拼写检查器</td>\n</tr>\n</tbody></table>\n<h1 id=\"关于换行符\"><a href=\"#关于换行符\" class=\"headerlink\" title=\"关于换行符\"></a>关于换行符</h1><p>Unix文本和MS-DOS文本的区别在于换行符的不同。<br>Unix文本使用ASCII 10作为换行符, MS-DOS使用ASCII 13和换行字符序列作为换行符。<br>可以使用 dos2unix 和 unix2dos 程序来转换两种格式的文本。</p>\n<h1 id=\"使用cat和sort处理文本\"><a href=\"#使用cat和sort处理文本\" class=\"headerlink\" title=\"使用cat和sort处理文本\"></a>使用cat和sort处理文本</h1><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># foo.txt content:</span></span><br><span class=\"line\"><span class=\"comment\"># a b</span></span><br><span class=\"line\"><span class=\"comment\"># </span></span><br><span class=\"line\"><span class=\"comment\"># </span></span><br><span class=\"line\"><span class=\"comment\"># c</span></span><br><span class=\"line\">cat -ns foo.txt</span><br><span class=\"line\"><span class=\"comment\">#output:</span></span><br><span class=\"line\"><span class=\"comment\"># foo.txt content:</span></span><br><span class=\"line\"><span class=\"comment\">#1 a b</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#3 c</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用sort对文本排序:</span></span><br><span class=\"line\">sort file1.txt file2.txt file3.txt &gt; file4.txt</span><br></pre></td></tr></table></figure>\n\n<p>常见的sort程序选项:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">选项</th>\n<th align=\"left\">长选项</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">-b</td>\n<td align=\"left\">–ignore-leading-blanks</td>\n<td align=\"left\">默认情况下, 对整体的进行排序, 从每行的第一个字符开始。这个选项导致sort程序忽略,每行开头的空格, 从第一个非空白字符开始排序</td>\n</tr>\n<tr>\n<td align=\"left\">-f</td>\n<td align=\"left\">–igonre-case</td>\n<td align=\"left\">让排序不区分大小写</td>\n</tr>\n<tr>\n<td align=\"left\">-n</td>\n<td align=\"left\">–numeric-sort</td>\n<td align=\"left\">基于字符串的数值来排序。使用此选项允许根据数字值执行排序, 而不是字母值</td>\n</tr>\n<tr>\n<td align=\"left\">-r</td>\n<td align=\"left\">–reverse</td>\n<td align=\"left\">按相反顺序排序, 结果按照降序排列, 而不是升序</td>\n</tr>\n<tr>\n<td align=\"left\">-k</td>\n<td align=\"left\">–key&#x3D;field1[,field2]</td>\n<td align=\"left\">对从 field1 到 field2 之间的字符排序, 而不是整个文本行</td>\n</tr>\n<tr>\n<td align=\"left\">-m</td>\n<td align=\"left\">–merge</td>\n<td align=\"left\">把每个参数看作是一个预先排好序的文件, 把多个文件合并成一个排好序的文件, 而没有执行额外的排序</td>\n</tr>\n<tr>\n<td align=\"left\">-o</td>\n<td align=\"left\">–output&#x3D;file</td>\n<td align=\"left\">把排好序的输出结果发送到文件, 而不是标准输出</td>\n</tr>\n<tr>\n<td align=\"left\">-t</td>\n<td align=\"left\">–field-separator&#x3D;char</td>\n<td align=\"left\">定义域分割字符, 默认情况下, 域由空格或制表符分割</td>\n</tr>\n</tbody></table>\n<p>| </p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<p><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-1Day.html\">第一天的笔记-基本的命令和使用方法</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-2Day.html\">第二天的笔记-操作文件</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-3Day.html\">第三天的笔记-查阅命令文档并创建命令别名</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-4Day.html\">第四天的笔记-重定向标准输入和输出以及处理查询结果</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-5Day.html\">第五天的笔记-命令的展开</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-6Day.html\">第六天的笔记-快捷键</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-7Day.html\">第七天的笔记-文件权限</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-8Day.html\">第八天的笔记-进程</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-9Day.html\">第九天的笔记-修改shell环境</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-10Day.html\">第十天的笔记-vim入门</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-11Day.html\">第十一天的笔记-自定义shell提示符</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-12Day.html\">第十二天的笔记-软件包管理系统</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-13Day.html\">第十三天的笔记-创建映像</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-14Day.html\">第十四天的笔记-网络</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-15Day.html\">第十五天的笔记-查找文件</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-16Day.html\">第十六天的笔记-压缩</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-17Day.html\">第十六天的笔记-正则表达式</a></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1>","more":"<ul>\n<li>一些文本处理程序</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"left\">程序名</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">cat</td>\n<td align=\"left\">连接文件并且打印到标准输出</td>\n</tr>\n<tr>\n<td align=\"left\">sort</td>\n<td align=\"left\">给文本排序</td>\n</tr>\n<tr>\n<td align=\"left\">uniq</td>\n<td align=\"left\">报告或者省略重复行</td>\n</tr>\n<tr>\n<td align=\"left\">cut</td>\n<td align=\"left\">从每行中删除文本区域</td>\n</tr>\n<tr>\n<td align=\"left\">paste</td>\n<td align=\"left\">合并文件文本行</td>\n</tr>\n<tr>\n<td align=\"left\">join</td>\n<td align=\"left\">基于某个共享字段来联合两个文件的文本行</td>\n</tr>\n<tr>\n<td align=\"left\">comm</td>\n<td align=\"left\">逐行比较两个有序的文件</td>\n</tr>\n<tr>\n<td align=\"left\">diff</td>\n<td align=\"left\">逐行比较文件</td>\n</tr>\n<tr>\n<td align=\"left\">patch</td>\n<td align=\"left\">给原始文件打补丁</td>\n</tr>\n<tr>\n<td align=\"left\">tr</td>\n<td align=\"left\">翻译或删除字符</td>\n</tr>\n<tr>\n<td align=\"left\">sed</td>\n<td align=\"left\">用于筛选和转换文本的流编译器</td>\n</tr>\n<tr>\n<td align=\"left\">aspell</td>\n<td align=\"left\">交互式拼写检查器</td>\n</tr>\n</tbody></table>\n<h1 id=\"关于换行符\"><a href=\"#关于换行符\" class=\"headerlink\" title=\"关于换行符\"></a>关于换行符</h1><p>Unix文本和MS-DOS文本的区别在于换行符的不同。<br>Unix文本使用ASCII 10作为换行符, MS-DOS使用ASCII 13和换行字符序列作为换行符。<br>可以使用 dos2unix 和 unix2dos 程序来转换两种格式的文本。</p>\n<h1 id=\"使用cat和sort处理文本\"><a href=\"#使用cat和sort处理文本\" class=\"headerlink\" title=\"使用cat和sort处理文本\"></a>使用cat和sort处理文本</h1><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># foo.txt content:</span></span><br><span class=\"line\"><span class=\"comment\"># a b</span></span><br><span class=\"line\"><span class=\"comment\"># </span></span><br><span class=\"line\"><span class=\"comment\"># </span></span><br><span class=\"line\"><span class=\"comment\"># c</span></span><br><span class=\"line\">cat -ns foo.txt</span><br><span class=\"line\"><span class=\"comment\">#output:</span></span><br><span class=\"line\"><span class=\"comment\"># foo.txt content:</span></span><br><span class=\"line\"><span class=\"comment\">#1 a b</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#3 c</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用sort对文本排序:</span></span><br><span class=\"line\">sort file1.txt file2.txt file3.txt &gt; file4.txt</span><br></pre></td></tr></table></figure>\n\n<p>常见的sort程序选项:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">选项</th>\n<th align=\"left\">长选项</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">-b</td>\n<td align=\"left\">–ignore-leading-blanks</td>\n<td align=\"left\">默认情况下, 对整体的进行排序, 从每行的第一个字符开始。这个选项导致sort程序忽略,每行开头的空格, 从第一个非空白字符开始排序</td>\n</tr>\n<tr>\n<td align=\"left\">-f</td>\n<td align=\"left\">–igonre-case</td>\n<td align=\"left\">让排序不区分大小写</td>\n</tr>\n<tr>\n<td align=\"left\">-n</td>\n<td align=\"left\">–numeric-sort</td>\n<td align=\"left\">基于字符串的数值来排序。使用此选项允许根据数字值执行排序, 而不是字母值</td>\n</tr>\n<tr>\n<td align=\"left\">-r</td>\n<td align=\"left\">–reverse</td>\n<td align=\"left\">按相反顺序排序, 结果按照降序排列, 而不是升序</td>\n</tr>\n<tr>\n<td align=\"left\">-k</td>\n<td align=\"left\">–key&#x3D;field1[,field2]</td>\n<td align=\"left\">对从 field1 到 field2 之间的字符排序, 而不是整个文本行</td>\n</tr>\n<tr>\n<td align=\"left\">-m</td>\n<td align=\"left\">–merge</td>\n<td align=\"left\">把每个参数看作是一个预先排好序的文件, 把多个文件合并成一个排好序的文件, 而没有执行额外的排序</td>\n</tr>\n<tr>\n<td align=\"left\">-o</td>\n<td align=\"left\">–output&#x3D;file</td>\n<td align=\"left\">把排好序的输出结果发送到文件, 而不是标准输出</td>\n</tr>\n<tr>\n<td align=\"left\">-t</td>\n<td align=\"left\">–field-separator&#x3D;char</td>\n<td align=\"left\">定义域分割字符, 默认情况下, 域由空格或制表符分割</td>\n</tr>\n</tbody></table>\n<p>| </p>"},{"title":"快乐的Linux命令行笔记-基本的命令和使用方法","date":"2018-11-19T05:15:35.000Z","_content":"\n> [本书中文版](https://github.com/billie66/TLCL/tree/gh-pages/book)\n\n# 总结\n\n今天主要学习了一些基本的命令和使用方法, 大概了解了一下Linux的目录结构\n\n<!--more-->\n\n<br>\n\n# 第二章 什么是shell\n\n1. 查看Linux系统磁盘空间<br>`$ df`\n2. 查看Linux系统剩余容量<br>`$ free`\n\n<br>\n\n# 第三章 文件系统中跳转\n\n## 要点\n\n1. 类Unix系统, 无论有多少个存储设备(比如硬盘之类), 都只有一个单一的文件系统树, 需要负责维护系统的管理员来挂载到目录树的某个节点上\n2. 当首次登陆系统后, 当前工作目录就是 `home` 目录, 每个用户都有 `home` 目录, 当用户为普通用户的权限时, 该目录是唯一允许用户写入文件的地方\n3. `.`是指当前目录, `..`是指当前目录的父目录\n4. Linux系统没有文件扩展名的概念(但有些应用程序会用到扩展名)\n\n### 一些文件操作命令\n\n* 查看当前所在的工作目录\n\n  ```shell\n  $ pwd\n  ```\n\n* 列出一个目录包含的文件以及子目录\n\n  ```shell\n  $ ls\n  $ ls -a # 包含隐藏文件(以'.'字符开头的文件)\n  ```\n\n* 更改当前工作目录\n\n  ```shell\n  $ cd 需要跳转的目录路径\n  $ cd # 更改工作目录到 home\n  $ cd - # 更改工作目录到先前的工作目录\n  $ cd ~user_home # 更改工作目录到指定用户的 home 目录\n  ```\n\n<br>\n\n# 第四章 探究操作系统\n\n## 要点\n\n1. 大多数命令都会带有一个或多个选项或参数\n2. **一切皆文件**\n\n## 查看文件的一些命令\n\n* ls命令\n\n  ```shell\n  $ ls /usr # 列出指定目录下包含的文件以及子目录\n  $ ls ~ /usr # 列出当前用户的 home (使用~代替) 和 usr 目录下包含的文件以及子目录\n  $ ls -l # 结果以长模式输出\n  ```\n\n* file命令\n\n  ```shell\n  $ file /usr/bin/yum\n  ```\n\n* less命令\n\n  ```shell\n  $ less 文件名\n  ```\n\n> ls 命令选项\n\n| 选项   | 长选项              | 描述                                       |\n| ---- | ---------------- | ---------------------------------------- |\n| -a   | --all            | 列出所有文件(包括隐藏文件)                           |\n| -d   | --directory      | 把这个选项与 -l 选项结合使用, 可以看到所指定目录的详细信息 `$ ls -l -d /usr` |\n| -F   | --classify       | 在每个列出的名字后面加一个指示符, 如果是目录, 则会加一个 '/' 字符    |\n| -h   | --human-readable | 当以长格式列出时, 以人们可读的格式, 而不是以字节数来显示文件的大小      |\n| -l   |                  | 以长格式显示结果                                 |\n| -r   | --reverse        | 以相反的顺序显示结果, 正序的排列方式按照字母升序排列              |\n| -S   |                  | 命令输出结果按照文件大小来排序                          |\n| -t   |                  | 按照时间来排序                                  |\n\n> 长格式列表的字段\n\n| 字段         | 含义                                       |\n| ---------- | ---------------------------------------- |\n| -rw-r--r-- | 第一个字符指明文件类型, 开头的'-'说明是一个普通文件, 'd'说明是一个目录, <br>其后三个字符是文件所有者的权限, 在其后的三个字符是文件所属组中成员的访问权限, <br>最后的三个字符是其他所有人的访问权限 |\n| 1          | 文件的硬链接数目                                 |\n| root       | 文件所有者的用户名                                |\n| root       | 文件所属用户组的名字                               |\n| 5453       | 以字节数表示的文件大小                              |\n| Apr 11     | 上次修改文件的时间和日期                             |\n| zipinfo    | 文件名                                      |\n\n> less命令的一些操作\n\n| 命令                 | 行为                           |\n| ------------------ | ---------------------------- |\n| Page UP or b       | 向上翻滚一页                       |\n| Page Down or space | 向下翻滚一页                       |\n| UP Arrow           | 向上翻滚一行                       |\n| Down Arrow         | 向下翻滚一行                       |\n| G                  | 移动到最后一行                      |\n| 1G or g            | 移动到开头一行                      |\n| /charaters         | 向前查找指定的字符串                   |\n| n                  | 向前查找下一个出现的字符串, <br>这个字符串是直线所 |\n| h                  | 显示                           |\n| q                  | 退出 less 程序                   |\n\n","source":"_posts/note/read_note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-1Day.md","raw":"---\ntitle: 快乐的Linux命令行笔记-基本的命令和使用方法\ndate: 2018-11-19 13:15:35\ncategories:\n- 笔记\n- 读书笔记\n- 快乐的Linux命令行\ntags:\n- 笔记\n- 快乐的Linux命令行\n- linux\n---\n\n> [本书中文版](https://github.com/billie66/TLCL/tree/gh-pages/book)\n\n# 总结\n\n今天主要学习了一些基本的命令和使用方法, 大概了解了一下Linux的目录结构\n\n<!--more-->\n\n<br>\n\n# 第二章 什么是shell\n\n1. 查看Linux系统磁盘空间<br>`$ df`\n2. 查看Linux系统剩余容量<br>`$ free`\n\n<br>\n\n# 第三章 文件系统中跳转\n\n## 要点\n\n1. 类Unix系统, 无论有多少个存储设备(比如硬盘之类), 都只有一个单一的文件系统树, 需要负责维护系统的管理员来挂载到目录树的某个节点上\n2. 当首次登陆系统后, 当前工作目录就是 `home` 目录, 每个用户都有 `home` 目录, 当用户为普通用户的权限时, 该目录是唯一允许用户写入文件的地方\n3. `.`是指当前目录, `..`是指当前目录的父目录\n4. Linux系统没有文件扩展名的概念(但有些应用程序会用到扩展名)\n\n### 一些文件操作命令\n\n* 查看当前所在的工作目录\n\n  ```shell\n  $ pwd\n  ```\n\n* 列出一个目录包含的文件以及子目录\n\n  ```shell\n  $ ls\n  $ ls -a # 包含隐藏文件(以'.'字符开头的文件)\n  ```\n\n* 更改当前工作目录\n\n  ```shell\n  $ cd 需要跳转的目录路径\n  $ cd # 更改工作目录到 home\n  $ cd - # 更改工作目录到先前的工作目录\n  $ cd ~user_home # 更改工作目录到指定用户的 home 目录\n  ```\n\n<br>\n\n# 第四章 探究操作系统\n\n## 要点\n\n1. 大多数命令都会带有一个或多个选项或参数\n2. **一切皆文件**\n\n## 查看文件的一些命令\n\n* ls命令\n\n  ```shell\n  $ ls /usr # 列出指定目录下包含的文件以及子目录\n  $ ls ~ /usr # 列出当前用户的 home (使用~代替) 和 usr 目录下包含的文件以及子目录\n  $ ls -l # 结果以长模式输出\n  ```\n\n* file命令\n\n  ```shell\n  $ file /usr/bin/yum\n  ```\n\n* less命令\n\n  ```shell\n  $ less 文件名\n  ```\n\n> ls 命令选项\n\n| 选项   | 长选项              | 描述                                       |\n| ---- | ---------------- | ---------------------------------------- |\n| -a   | --all            | 列出所有文件(包括隐藏文件)                           |\n| -d   | --directory      | 把这个选项与 -l 选项结合使用, 可以看到所指定目录的详细信息 `$ ls -l -d /usr` |\n| -F   | --classify       | 在每个列出的名字后面加一个指示符, 如果是目录, 则会加一个 '/' 字符    |\n| -h   | --human-readable | 当以长格式列出时, 以人们可读的格式, 而不是以字节数来显示文件的大小      |\n| -l   |                  | 以长格式显示结果                                 |\n| -r   | --reverse        | 以相反的顺序显示结果, 正序的排列方式按照字母升序排列              |\n| -S   |                  | 命令输出结果按照文件大小来排序                          |\n| -t   |                  | 按照时间来排序                                  |\n\n> 长格式列表的字段\n\n| 字段         | 含义                                       |\n| ---------- | ---------------------------------------- |\n| -rw-r--r-- | 第一个字符指明文件类型, 开头的'-'说明是一个普通文件, 'd'说明是一个目录, <br>其后三个字符是文件所有者的权限, 在其后的三个字符是文件所属组中成员的访问权限, <br>最后的三个字符是其他所有人的访问权限 |\n| 1          | 文件的硬链接数目                                 |\n| root       | 文件所有者的用户名                                |\n| root       | 文件所属用户组的名字                               |\n| 5453       | 以字节数表示的文件大小                              |\n| Apr 11     | 上次修改文件的时间和日期                             |\n| zipinfo    | 文件名                                      |\n\n> less命令的一些操作\n\n| 命令                 | 行为                           |\n| ------------------ | ---------------------------- |\n| Page UP or b       | 向上翻滚一页                       |\n| Page Down or space | 向下翻滚一页                       |\n| UP Arrow           | 向上翻滚一行                       |\n| Down Arrow         | 向下翻滚一行                       |\n| G                  | 移动到最后一行                      |\n| 1G or g            | 移动到开头一行                      |\n| /charaters         | 向前查找指定的字符串                   |\n| n                  | 向前查找下一个出现的字符串, <br>这个字符串是直线所 |\n| h                  | 显示                           |\n| q                  | 退出 less 程序                   |\n\n","slug":"note/read_note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-1Day","published":1,"updated":"2022-10-07T13:02:11.493Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejx400913vsb3jyv7e8c","content":"<blockquote>\n<p><a href=\"https://github.com/billie66/TLCL/tree/gh-pages/book\">本书中文版</a></p>\n</blockquote>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>今天主要学习了一些基本的命令和使用方法, 大概了解了一下Linux的目录结构</p>\n<span id=\"more\"></span>\n\n<br>\n\n<h1 id=\"第二章-什么是shell\"><a href=\"#第二章-什么是shell\" class=\"headerlink\" title=\"第二章 什么是shell\"></a>第二章 什么是shell</h1><ol>\n<li>查看Linux系统磁盘空间<br><code>$ df</code></li>\n<li>查看Linux系统剩余容量<br><code>$ free</code></li>\n</ol>\n<br>\n\n<h1 id=\"第三章-文件系统中跳转\"><a href=\"#第三章-文件系统中跳转\" class=\"headerlink\" title=\"第三章 文件系统中跳转\"></a>第三章 文件系统中跳转</h1><h2 id=\"要点\"><a href=\"#要点\" class=\"headerlink\" title=\"要点\"></a>要点</h2><ol>\n<li>类Unix系统, 无论有多少个存储设备(比如硬盘之类), 都只有一个单一的文件系统树, 需要负责维护系统的管理员来挂载到目录树的某个节点上</li>\n<li>当首次登陆系统后, 当前工作目录就是 <code>home</code> 目录, 每个用户都有 <code>home</code> 目录, 当用户为普通用户的权限时, 该目录是唯一允许用户写入文件的地方</li>\n<li><code>.</code>是指当前目录, <code>..</code>是指当前目录的父目录</li>\n<li>Linux系统没有文件扩展名的概念(但有些应用程序会用到扩展名)</li>\n</ol>\n<h3 id=\"一些文件操作命令\"><a href=\"#一些文件操作命令\" class=\"headerlink\" title=\"一些文件操作命令\"></a>一些文件操作命令</h3><ul>\n<li><p>查看当前所在的工作目录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">pwd</span></span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>列出一个目录包含的文件以及子目录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ls</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ls -a <span class=\"comment\"># 包含隐藏文件(以&#x27;.&#x27;字符开头的文件)</span></span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>更改当前工作目录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> 需要跳转的目录路径</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> <span class=\"comment\"># 更改工作目录到 home</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> - <span class=\"comment\"># 更改工作目录到先前的工作目录</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> ~user_home <span class=\"comment\"># 更改工作目录到指定用户的 home 目录</span></span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<br>\n\n<h1 id=\"第四章-探究操作系统\"><a href=\"#第四章-探究操作系统\" class=\"headerlink\" title=\"第四章 探究操作系统\"></a>第四章 探究操作系统</h1><h2 id=\"要点-1\"><a href=\"#要点-1\" class=\"headerlink\" title=\"要点\"></a>要点</h2><ol>\n<li>大多数命令都会带有一个或多个选项或参数</li>\n<li><strong>一切皆文件</strong></li>\n</ol>\n<h2 id=\"查看文件的一些命令\"><a href=\"#查看文件的一些命令\" class=\"headerlink\" title=\"查看文件的一些命令\"></a>查看文件的一些命令</h2><ul>\n<li><p>ls命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ls /usr <span class=\"comment\"># 列出指定目录下包含的文件以及子目录</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ls ~ /usr <span class=\"comment\"># 列出当前用户的 home (使用~代替) 和 usr 目录下包含的文件以及子目录</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ls -l <span class=\"comment\"># 结果以长模式输出</span></span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>file命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> file /usr/bin/yum</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>less命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> less 文件名</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<blockquote>\n<p>ls 命令选项</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>长选项</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-a</td>\n<td>–all</td>\n<td>列出所有文件(包括隐藏文件)</td>\n</tr>\n<tr>\n<td>-d</td>\n<td>–directory</td>\n<td>把这个选项与 -l 选项结合使用, 可以看到所指定目录的详细信息 <code>$ ls -l -d /usr</code></td>\n</tr>\n<tr>\n<td>-F</td>\n<td>–classify</td>\n<td>在每个列出的名字后面加一个指示符, 如果是目录, 则会加一个 ‘&#x2F;‘ 字符</td>\n</tr>\n<tr>\n<td>-h</td>\n<td>–human-readable</td>\n<td>当以长格式列出时, 以人们可读的格式, 而不是以字节数来显示文件的大小</td>\n</tr>\n<tr>\n<td>-l</td>\n<td></td>\n<td>以长格式显示结果</td>\n</tr>\n<tr>\n<td>-r</td>\n<td>–reverse</td>\n<td>以相反的顺序显示结果, 正序的排列方式按照字母升序排列</td>\n</tr>\n<tr>\n<td>-S</td>\n<td></td>\n<td>命令输出结果按照文件大小来排序</td>\n</tr>\n<tr>\n<td>-t</td>\n<td></td>\n<td>按照时间来排序</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>长格式列表的字段</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-rw-r–r–</td>\n<td>第一个字符指明文件类型, 开头的’-‘说明是一个普通文件, ‘d’说明是一个目录, <br>其后三个字符是文件所有者的权限, 在其后的三个字符是文件所属组中成员的访问权限, <br>最后的三个字符是其他所有人的访问权限</td>\n</tr>\n<tr>\n<td>1</td>\n<td>文件的硬链接数目</td>\n</tr>\n<tr>\n<td>root</td>\n<td>文件所有者的用户名</td>\n</tr>\n<tr>\n<td>root</td>\n<td>文件所属用户组的名字</td>\n</tr>\n<tr>\n<td>5453</td>\n<td>以字节数表示的文件大小</td>\n</tr>\n<tr>\n<td>Apr 11</td>\n<td>上次修改文件的时间和日期</td>\n</tr>\n<tr>\n<td>zipinfo</td>\n<td>文件名</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>less命令的一些操作</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>行为</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Page UP or b</td>\n<td>向上翻滚一页</td>\n</tr>\n<tr>\n<td>Page Down or space</td>\n<td>向下翻滚一页</td>\n</tr>\n<tr>\n<td>UP Arrow</td>\n<td>向上翻滚一行</td>\n</tr>\n<tr>\n<td>Down Arrow</td>\n<td>向下翻滚一行</td>\n</tr>\n<tr>\n<td>G</td>\n<td>移动到最后一行</td>\n</tr>\n<tr>\n<td>1G or g</td>\n<td>移动到开头一行</td>\n</tr>\n<tr>\n<td>&#x2F;charaters</td>\n<td>向前查找指定的字符串</td>\n</tr>\n<tr>\n<td>n</td>\n<td>向前查找下一个出现的字符串, <br>这个字符串是直线所</td>\n</tr>\n<tr>\n<td>h</td>\n<td>显示</td>\n</tr>\n<tr>\n<td>q</td>\n<td>退出 less 程序</td>\n</tr>\n</tbody></table>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<blockquote>\n<p><a href=\"https://github.com/billie66/TLCL/tree/gh-pages/book\">本书中文版</a></p>\n</blockquote>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>今天主要学习了一些基本的命令和使用方法, 大概了解了一下Linux的目录结构</p>","more":"<br>\n\n<h1 id=\"第二章-什么是shell\"><a href=\"#第二章-什么是shell\" class=\"headerlink\" title=\"第二章 什么是shell\"></a>第二章 什么是shell</h1><ol>\n<li>查看Linux系统磁盘空间<br><code>$ df</code></li>\n<li>查看Linux系统剩余容量<br><code>$ free</code></li>\n</ol>\n<br>\n\n<h1 id=\"第三章-文件系统中跳转\"><a href=\"#第三章-文件系统中跳转\" class=\"headerlink\" title=\"第三章 文件系统中跳转\"></a>第三章 文件系统中跳转</h1><h2 id=\"要点\"><a href=\"#要点\" class=\"headerlink\" title=\"要点\"></a>要点</h2><ol>\n<li>类Unix系统, 无论有多少个存储设备(比如硬盘之类), 都只有一个单一的文件系统树, 需要负责维护系统的管理员来挂载到目录树的某个节点上</li>\n<li>当首次登陆系统后, 当前工作目录就是 <code>home</code> 目录, 每个用户都有 <code>home</code> 目录, 当用户为普通用户的权限时, 该目录是唯一允许用户写入文件的地方</li>\n<li><code>.</code>是指当前目录, <code>..</code>是指当前目录的父目录</li>\n<li>Linux系统没有文件扩展名的概念(但有些应用程序会用到扩展名)</li>\n</ol>\n<h3 id=\"一些文件操作命令\"><a href=\"#一些文件操作命令\" class=\"headerlink\" title=\"一些文件操作命令\"></a>一些文件操作命令</h3><ul>\n<li><p>查看当前所在的工作目录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">pwd</span></span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>列出一个目录包含的文件以及子目录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ls</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ls -a <span class=\"comment\"># 包含隐藏文件(以&#x27;.&#x27;字符开头的文件)</span></span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>更改当前工作目录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> 需要跳转的目录路径</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> <span class=\"comment\"># 更改工作目录到 home</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> - <span class=\"comment\"># 更改工作目录到先前的工作目录</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> ~user_home <span class=\"comment\"># 更改工作目录到指定用户的 home 目录</span></span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<br>\n\n<h1 id=\"第四章-探究操作系统\"><a href=\"#第四章-探究操作系统\" class=\"headerlink\" title=\"第四章 探究操作系统\"></a>第四章 探究操作系统</h1><h2 id=\"要点-1\"><a href=\"#要点-1\" class=\"headerlink\" title=\"要点\"></a>要点</h2><ol>\n<li>大多数命令都会带有一个或多个选项或参数</li>\n<li><strong>一切皆文件</strong></li>\n</ol>\n<h2 id=\"查看文件的一些命令\"><a href=\"#查看文件的一些命令\" class=\"headerlink\" title=\"查看文件的一些命令\"></a>查看文件的一些命令</h2><ul>\n<li><p>ls命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ls /usr <span class=\"comment\"># 列出指定目录下包含的文件以及子目录</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ls ~ /usr <span class=\"comment\"># 列出当前用户的 home (使用~代替) 和 usr 目录下包含的文件以及子目录</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ls -l <span class=\"comment\"># 结果以长模式输出</span></span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>file命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> file /usr/bin/yum</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>less命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> less 文件名</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<blockquote>\n<p>ls 命令选项</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>长选项</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-a</td>\n<td>–all</td>\n<td>列出所有文件(包括隐藏文件)</td>\n</tr>\n<tr>\n<td>-d</td>\n<td>–directory</td>\n<td>把这个选项与 -l 选项结合使用, 可以看到所指定目录的详细信息 <code>$ ls -l -d /usr</code></td>\n</tr>\n<tr>\n<td>-F</td>\n<td>–classify</td>\n<td>在每个列出的名字后面加一个指示符, 如果是目录, 则会加一个 ‘&#x2F;‘ 字符</td>\n</tr>\n<tr>\n<td>-h</td>\n<td>–human-readable</td>\n<td>当以长格式列出时, 以人们可读的格式, 而不是以字节数来显示文件的大小</td>\n</tr>\n<tr>\n<td>-l</td>\n<td></td>\n<td>以长格式显示结果</td>\n</tr>\n<tr>\n<td>-r</td>\n<td>–reverse</td>\n<td>以相反的顺序显示结果, 正序的排列方式按照字母升序排列</td>\n</tr>\n<tr>\n<td>-S</td>\n<td></td>\n<td>命令输出结果按照文件大小来排序</td>\n</tr>\n<tr>\n<td>-t</td>\n<td></td>\n<td>按照时间来排序</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>长格式列表的字段</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-rw-r–r–</td>\n<td>第一个字符指明文件类型, 开头的’-‘说明是一个普通文件, ‘d’说明是一个目录, <br>其后三个字符是文件所有者的权限, 在其后的三个字符是文件所属组中成员的访问权限, <br>最后的三个字符是其他所有人的访问权限</td>\n</tr>\n<tr>\n<td>1</td>\n<td>文件的硬链接数目</td>\n</tr>\n<tr>\n<td>root</td>\n<td>文件所有者的用户名</td>\n</tr>\n<tr>\n<td>root</td>\n<td>文件所属用户组的名字</td>\n</tr>\n<tr>\n<td>5453</td>\n<td>以字节数表示的文件大小</td>\n</tr>\n<tr>\n<td>Apr 11</td>\n<td>上次修改文件的时间和日期</td>\n</tr>\n<tr>\n<td>zipinfo</td>\n<td>文件名</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>less命令的一些操作</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>行为</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Page UP or b</td>\n<td>向上翻滚一页</td>\n</tr>\n<tr>\n<td>Page Down or space</td>\n<td>向下翻滚一页</td>\n</tr>\n<tr>\n<td>UP Arrow</td>\n<td>向上翻滚一行</td>\n</tr>\n<tr>\n<td>Down Arrow</td>\n<td>向下翻滚一行</td>\n</tr>\n<tr>\n<td>G</td>\n<td>移动到最后一行</td>\n</tr>\n<tr>\n<td>1G or g</td>\n<td>移动到开头一行</td>\n</tr>\n<tr>\n<td>&#x2F;charaters</td>\n<td>向前查找指定的字符串</td>\n</tr>\n<tr>\n<td>n</td>\n<td>向前查找下一个出现的字符串, <br>这个字符串是直线所</td>\n</tr>\n<tr>\n<td>h</td>\n<td>显示</td>\n</tr>\n<tr>\n<td>q</td>\n<td>退出 less 程序</td>\n</tr>\n</tbody></table>"},{"title":"快乐的Linux命令行笔记-操作文件","date":"2018-11-21T06:05:06.000Z","_content":"\n[第一天的笔记-基本的命令和使用方法](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-1Day.html)\n\n# 总结\n\n今天主要学习了一些操作文件的命令, 包括创建文件夹, 复制, 删除, 查看文件和文件夹, 还有链接的一些知识, 包括硬链接和符号链接。\n\n硬链接在文件被删掉之后也会留存源文件的数据, 符号链接不会。\n\n硬链接和源文件的文件索引节点号是一样的, 符号链接不同。\n\n每一个硬链接都关系到一个具体的包含文件内容的索引节点。\n\n<!--more-->\n\n<br>\n\n# 符号链接\n\n如果以长格式查看文件列表, 会发现有可能有的文件有两个文件名\n\n用处在于如果一个文件的文件名包含版本号, 那么这个文件如果更新了版本号, 文件名也需要跟着变, 引用这个文件的其他文件也需要跟着更新, 而这个特殊符号 `->` 解决了这个问题。比如一个文件是这样的:\n\n`libc.so.6 -> libc-2.6.so`\n\n那么引用`libc-2.6.so`的文件只需要指向`libc.so.6`就可以了\n\n<br>\n\n# 操作文件\n\n* cp -- 复制文件和目录\n* mv -- 移动/重命名文件和目录\n* mkdir -- 创建目录\n* rm -- 删除文件和目录\n* ln -- 创建硬链接和符号链接\n\n以上命令可以使用通配符来匹配需要操作的文件\n\n| 通配符           | 意义                |\n| ------------- | ----------------- |\n| *             | 匹配任意多个字符(包括零个或一个) |\n| ?             | 匹配任意一个字符(不包括零个)   |\n| [characters]  | 匹配任意一个属于字符集中的字符   |\n| [!characters] | 匹配任意一个不是字符集中的字符   |\n| [[:class:]]   | 匹配任意一个属于指定字符类中的字符 |\n\n> 普遍使用的字符类\n\n| 字符类       | 意义         |\n| --------- | ---------- |\n| [:alnum:] | 匹配任意一个字母或  |\n| [:alpha:] | 匹配任意一个字母   |\n| [:digit:] | 匹配任意一个数字   |\n| [:lower:] | 匹配任意一个小写   |\n| [:upper:] | 匹配任意一个大写字母 |\n\n**接受文件名作为参数的任何命令, 都可以使用通配符**\n\n## 创建目录\n\n```shell\n$ mkdir newDirectory1 newDirectory2 newDirectory3\n```\n\n创建三个目录\n\n## 复制文件和目录(cp命令)\n\n```shell\n$ cp item item1 # 复制item到item1\n$ cp item item2 item1 # 复制item, item2到item1\n```\n\n如果需要复制一个目录, 那么一般情况下, 执行这行命令会出现如下提示\n\n```shell\n$ cp: omitting directory 'item'\n```\n\n这是因为即使是一个新文件夹, 里面也会有两个文件夹, `.` 和 `..` , 代表当前文件夹和父文件夹, 而如果想复制一个文件夹, 包括其所有的文件的话, 那么需要加上 `-r` 选项, 表示递归其下面所有的文件都执行复制操作\n\n> cp 选项\n\n| 选项               | 意义                                       |\n| ---------------- | ---------------------------------------- |\n| -a --archive     | 复制文件和目录, 以及它们的属性, 包括所有权和权限。<br>通常, 副本具有用户所操作文件的默认属性 |\n| -i --interactive | 在覆盖已存在文件之前, 提示用户确认<br>如果不指定该属性, cp命令会默认覆盖已存在文件 |\n| -r --recursive   | 递归的复制目录及目录中的内容。<br>当复制目录时, 通常需要该选项(或-a选项) |\n| -u --update      | 当把文件从一个目录复制到另一个目录时,<br> 仅复制目标目录中不存在的文件, <br>或者是文件内容新于目标目录中已经存在的文件。 |\n| -v --verbose     | 显示翔实的命令操作信息                              |\n\n## 移动和重命名文件(mv命令)\n\n```shell\n$ mv item item1 # 将 item 移动到 item1\n```\n\n> mv选项\n\n| 选项               | 意义                                       |\n| ---------------- | ---------------------------------------- |\n| -i --interactive | 和cp命令中选项意义相同。<br>但是需要注意, **因为是移动命令, 所以这个选项相当重要** |\n| -u --update      | 同上                                       |\n| -v --verbose     | 同上                                       |\n\n## 删除文件和目录(rm命令)\n\n```shell\n$ rm item # 删除文件\n```\n\n> rm选项\n\n| 选项               | 意义                                       |\n| ---------------- | ---------------------------------------- |\n| -i --interactive | 再删除文件之前, 提示用户确认信息<br>如果不指定该文件, rm 会默默的删除文件 |\n| -r --recursive   | 递归删除目录, 如果要删除的是一个目录, 则必须指定该选项            |\n| -f --force       | 忽视不存在的文件, 不显示提示信息<br>该选项优先级高于 --interactive |\n| -v --verbose     | 在执行 rm 命令时, 显示翔实的操作信息                    |\n\n> 因为Linux没有复原选项, 所以, 如果要使用通配符执行 rm 命令的话, 先使用 ls 命令来测试通配符都会匹配哪些文件, 然后使用向上箭头调用刚刚执行的命令, 然后使用 rm 来替换 ls\n\n<br>\n\n# 创建链接\n\n```shell\n$ ln file link # 创建硬链接\n$ ln -s file link # 创建符号链接\n```\n\n## 硬链接\n\n最初Unix创建链接的方式, 每创建一个硬链接, 就是为一个文件创建一个额外的目录项\n\n* 一个硬链接不能关联它所在的文件系统(磁盘分区)之外的文件\n* 不能关联目录\n\n当使用 `ls -l` 命令时, 第二个字段显示的数据表示硬链接的数量, 每一个文件或文件夹都至少有一个硬链接。\n\n当使用 `ls -li` 命令时, 第一个字段显示的数据表示文件索引节点号。\n\n## 符号链接\n\n用来突破硬链接的局限性, 类似于windows的快捷方式\n\n如果往符号链接中写入文件, 指向的文件也会被写入相同的数据, 如果指向的文件被删除, 符号链接就不会被指向任何文件, 变成了一个坏连接。\n\n使用 `ls -l` 查看符号链接, 第一个字段的首字母为l, 文件长度表示的是符号链接的字符串长度\n\n使用相对路径要比使用绝对路径创建符号链接要好, 因为如果重命名了包含符号链接的文件夹会破环符号链接\n","source":"_posts/note/read_note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-2Day.md","raw":"---\ntitle: 快乐的Linux命令行笔记-操作文件\ndate: 2018-11-21 14:05:06\ncategories:\n- 笔记\n- 读书笔记\n- 快乐的Linux命令行\ntags:\n- 笔记\n- 快乐的Linux命令行\n- linux\n---\n\n[第一天的笔记-基本的命令和使用方法](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-1Day.html)\n\n# 总结\n\n今天主要学习了一些操作文件的命令, 包括创建文件夹, 复制, 删除, 查看文件和文件夹, 还有链接的一些知识, 包括硬链接和符号链接。\n\n硬链接在文件被删掉之后也会留存源文件的数据, 符号链接不会。\n\n硬链接和源文件的文件索引节点号是一样的, 符号链接不同。\n\n每一个硬链接都关系到一个具体的包含文件内容的索引节点。\n\n<!--more-->\n\n<br>\n\n# 符号链接\n\n如果以长格式查看文件列表, 会发现有可能有的文件有两个文件名\n\n用处在于如果一个文件的文件名包含版本号, 那么这个文件如果更新了版本号, 文件名也需要跟着变, 引用这个文件的其他文件也需要跟着更新, 而这个特殊符号 `->` 解决了这个问题。比如一个文件是这样的:\n\n`libc.so.6 -> libc-2.6.so`\n\n那么引用`libc-2.6.so`的文件只需要指向`libc.so.6`就可以了\n\n<br>\n\n# 操作文件\n\n* cp -- 复制文件和目录\n* mv -- 移动/重命名文件和目录\n* mkdir -- 创建目录\n* rm -- 删除文件和目录\n* ln -- 创建硬链接和符号链接\n\n以上命令可以使用通配符来匹配需要操作的文件\n\n| 通配符           | 意义                |\n| ------------- | ----------------- |\n| *             | 匹配任意多个字符(包括零个或一个) |\n| ?             | 匹配任意一个字符(不包括零个)   |\n| [characters]  | 匹配任意一个属于字符集中的字符   |\n| [!characters] | 匹配任意一个不是字符集中的字符   |\n| [[:class:]]   | 匹配任意一个属于指定字符类中的字符 |\n\n> 普遍使用的字符类\n\n| 字符类       | 意义         |\n| --------- | ---------- |\n| [:alnum:] | 匹配任意一个字母或  |\n| [:alpha:] | 匹配任意一个字母   |\n| [:digit:] | 匹配任意一个数字   |\n| [:lower:] | 匹配任意一个小写   |\n| [:upper:] | 匹配任意一个大写字母 |\n\n**接受文件名作为参数的任何命令, 都可以使用通配符**\n\n## 创建目录\n\n```shell\n$ mkdir newDirectory1 newDirectory2 newDirectory3\n```\n\n创建三个目录\n\n## 复制文件和目录(cp命令)\n\n```shell\n$ cp item item1 # 复制item到item1\n$ cp item item2 item1 # 复制item, item2到item1\n```\n\n如果需要复制一个目录, 那么一般情况下, 执行这行命令会出现如下提示\n\n```shell\n$ cp: omitting directory 'item'\n```\n\n这是因为即使是一个新文件夹, 里面也会有两个文件夹, `.` 和 `..` , 代表当前文件夹和父文件夹, 而如果想复制一个文件夹, 包括其所有的文件的话, 那么需要加上 `-r` 选项, 表示递归其下面所有的文件都执行复制操作\n\n> cp 选项\n\n| 选项               | 意义                                       |\n| ---------------- | ---------------------------------------- |\n| -a --archive     | 复制文件和目录, 以及它们的属性, 包括所有权和权限。<br>通常, 副本具有用户所操作文件的默认属性 |\n| -i --interactive | 在覆盖已存在文件之前, 提示用户确认<br>如果不指定该属性, cp命令会默认覆盖已存在文件 |\n| -r --recursive   | 递归的复制目录及目录中的内容。<br>当复制目录时, 通常需要该选项(或-a选项) |\n| -u --update      | 当把文件从一个目录复制到另一个目录时,<br> 仅复制目标目录中不存在的文件, <br>或者是文件内容新于目标目录中已经存在的文件。 |\n| -v --verbose     | 显示翔实的命令操作信息                              |\n\n## 移动和重命名文件(mv命令)\n\n```shell\n$ mv item item1 # 将 item 移动到 item1\n```\n\n> mv选项\n\n| 选项               | 意义                                       |\n| ---------------- | ---------------------------------------- |\n| -i --interactive | 和cp命令中选项意义相同。<br>但是需要注意, **因为是移动命令, 所以这个选项相当重要** |\n| -u --update      | 同上                                       |\n| -v --verbose     | 同上                                       |\n\n## 删除文件和目录(rm命令)\n\n```shell\n$ rm item # 删除文件\n```\n\n> rm选项\n\n| 选项               | 意义                                       |\n| ---------------- | ---------------------------------------- |\n| -i --interactive | 再删除文件之前, 提示用户确认信息<br>如果不指定该文件, rm 会默默的删除文件 |\n| -r --recursive   | 递归删除目录, 如果要删除的是一个目录, 则必须指定该选项            |\n| -f --force       | 忽视不存在的文件, 不显示提示信息<br>该选项优先级高于 --interactive |\n| -v --verbose     | 在执行 rm 命令时, 显示翔实的操作信息                    |\n\n> 因为Linux没有复原选项, 所以, 如果要使用通配符执行 rm 命令的话, 先使用 ls 命令来测试通配符都会匹配哪些文件, 然后使用向上箭头调用刚刚执行的命令, 然后使用 rm 来替换 ls\n\n<br>\n\n# 创建链接\n\n```shell\n$ ln file link # 创建硬链接\n$ ln -s file link # 创建符号链接\n```\n\n## 硬链接\n\n最初Unix创建链接的方式, 每创建一个硬链接, 就是为一个文件创建一个额外的目录项\n\n* 一个硬链接不能关联它所在的文件系统(磁盘分区)之外的文件\n* 不能关联目录\n\n当使用 `ls -l` 命令时, 第二个字段显示的数据表示硬链接的数量, 每一个文件或文件夹都至少有一个硬链接。\n\n当使用 `ls -li` 命令时, 第一个字段显示的数据表示文件索引节点号。\n\n## 符号链接\n\n用来突破硬链接的局限性, 类似于windows的快捷方式\n\n如果往符号链接中写入文件, 指向的文件也会被写入相同的数据, 如果指向的文件被删除, 符号链接就不会被指向任何文件, 变成了一个坏连接。\n\n使用 `ls -l` 查看符号链接, 第一个字段的首字母为l, 文件长度表示的是符号链接的字符串长度\n\n使用相对路径要比使用绝对路径创建符号链接要好, 因为如果重命名了包含符号链接的文件夹会破环符号链接\n","slug":"note/read_note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-2Day","published":1,"updated":"2022-10-07T13:02:22.813Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejx800943vsb2jof4r0k","content":"<p><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-1Day.html\">第一天的笔记-基本的命令和使用方法</a></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>今天主要学习了一些操作文件的命令, 包括创建文件夹, 复制, 删除, 查看文件和文件夹, 还有链接的一些知识, 包括硬链接和符号链接。</p>\n<p>硬链接在文件被删掉之后也会留存源文件的数据, 符号链接不会。</p>\n<p>硬链接和源文件的文件索引节点号是一样的, 符号链接不同。</p>\n<p>每一个硬链接都关系到一个具体的包含文件内容的索引节点。</p>\n<span id=\"more\"></span>\n\n<br>\n\n<h1 id=\"符号链接\"><a href=\"#符号链接\" class=\"headerlink\" title=\"符号链接\"></a>符号链接</h1><p>如果以长格式查看文件列表, 会发现有可能有的文件有两个文件名</p>\n<p>用处在于如果一个文件的文件名包含版本号, 那么这个文件如果更新了版本号, 文件名也需要跟着变, 引用这个文件的其他文件也需要跟着更新, 而这个特殊符号 <code>-&gt;</code> 解决了这个问题。比如一个文件是这样的:</p>\n<p><code>libc.so.6 -&gt; libc-2.6.so</code></p>\n<p>那么引用<code>libc-2.6.so</code>的文件只需要指向<code>libc.so.6</code>就可以了</p>\n<br>\n\n<h1 id=\"操作文件\"><a href=\"#操作文件\" class=\"headerlink\" title=\"操作文件\"></a>操作文件</h1><ul>\n<li>cp – 复制文件和目录</li>\n<li>mv – 移动&#x2F;重命名文件和目录</li>\n<li>mkdir – 创建目录</li>\n<li>rm – 删除文件和目录</li>\n<li>ln – 创建硬链接和符号链接</li>\n</ul>\n<p>以上命令可以使用通配符来匹配需要操作的文件</p>\n<table>\n<thead>\n<tr>\n<th>通配符</th>\n<th>意义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>*</td>\n<td>匹配任意多个字符(包括零个或一个)</td>\n</tr>\n<tr>\n<td>?</td>\n<td>匹配任意一个字符(不包括零个)</td>\n</tr>\n<tr>\n<td>[characters]</td>\n<td>匹配任意一个属于字符集中的字符</td>\n</tr>\n<tr>\n<td>[!characters]</td>\n<td>匹配任意一个不是字符集中的字符</td>\n</tr>\n<tr>\n<td>[[:class:]]</td>\n<td>匹配任意一个属于指定字符类中的字符</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>普遍使用的字符类</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>字符类</th>\n<th>意义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>[:alnum:]</td>\n<td>匹配任意一个字母或</td>\n</tr>\n<tr>\n<td>[:alpha:]</td>\n<td>匹配任意一个字母</td>\n</tr>\n<tr>\n<td>[:digit:]</td>\n<td>匹配任意一个数字</td>\n</tr>\n<tr>\n<td>[:lower:]</td>\n<td>匹配任意一个小写</td>\n</tr>\n<tr>\n<td>[:upper:]</td>\n<td>匹配任意一个大写字母</td>\n</tr>\n</tbody></table>\n<p><strong>接受文件名作为参数的任何命令, 都可以使用通配符</strong></p>\n<h2 id=\"创建目录\"><a href=\"#创建目录\" class=\"headerlink\" title=\"创建目录\"></a>创建目录</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> mkdir newDirectory1 newDirectory2 newDirectory3</span></span><br></pre></td></tr></table></figure>\n\n<p>创建三个目录</p>\n<h2 id=\"复制文件和目录-cp命令\"><a href=\"#复制文件和目录-cp命令\" class=\"headerlink\" title=\"复制文件和目录(cp命令)\"></a>复制文件和目录(cp命令)</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> cp item item1 <span class=\"comment\"># 复制item到item1</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> cp item item2 item1 <span class=\"comment\"># 复制item, item2到item1</span></span></span><br></pre></td></tr></table></figure>\n\n<p>如果需要复制一个目录, 那么一般情况下, 执行这行命令会出现如下提示</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> cp: omitting directory <span class=\"string\">&#x27;item&#x27;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>这是因为即使是一个新文件夹, 里面也会有两个文件夹, <code>.</code> 和 <code>..</code> , 代表当前文件夹和父文件夹, 而如果想复制一个文件夹, 包括其所有的文件的话, 那么需要加上 <code>-r</code> 选项, 表示递归其下面所有的文件都执行复制操作</p>\n<blockquote>\n<p>cp 选项</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>意义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-a –archive</td>\n<td>复制文件和目录, 以及它们的属性, 包括所有权和权限。<br>通常, 副本具有用户所操作文件的默认属性</td>\n</tr>\n<tr>\n<td>-i –interactive</td>\n<td>在覆盖已存在文件之前, 提示用户确认<br>如果不指定该属性, cp命令会默认覆盖已存在文件</td>\n</tr>\n<tr>\n<td>-r –recursive</td>\n<td>递归的复制目录及目录中的内容。<br>当复制目录时, 通常需要该选项(或-a选项)</td>\n</tr>\n<tr>\n<td>-u –update</td>\n<td>当把文件从一个目录复制到另一个目录时,<br> 仅复制目标目录中不存在的文件, <br>或者是文件内容新于目标目录中已经存在的文件。</td>\n</tr>\n<tr>\n<td>-v –verbose</td>\n<td>显示翔实的命令操作信息</td>\n</tr>\n</tbody></table>\n<h2 id=\"移动和重命名文件-mv命令\"><a href=\"#移动和重命名文件-mv命令\" class=\"headerlink\" title=\"移动和重命名文件(mv命令)\"></a>移动和重命名文件(mv命令)</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> mv item item1 <span class=\"comment\"># 将 item 移动到 item1</span></span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>mv选项</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>意义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-i –interactive</td>\n<td>和cp命令中选项意义相同。<br>但是需要注意, <strong>因为是移动命令, 所以这个选项相当重要</strong></td>\n</tr>\n<tr>\n<td>-u –update</td>\n<td>同上</td>\n</tr>\n<tr>\n<td>-v –verbose</td>\n<td>同上</td>\n</tr>\n</tbody></table>\n<h2 id=\"删除文件和目录-rm命令\"><a href=\"#删除文件和目录-rm命令\" class=\"headerlink\" title=\"删除文件和目录(rm命令)\"></a>删除文件和目录(rm命令)</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rm item <span class=\"comment\"># 删除文件</span></span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>rm选项</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>意义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-i –interactive</td>\n<td>再删除文件之前, 提示用户确认信息<br>如果不指定该文件, rm 会默默的删除文件</td>\n</tr>\n<tr>\n<td>-r –recursive</td>\n<td>递归删除目录, 如果要删除的是一个目录, 则必须指定该选项</td>\n</tr>\n<tr>\n<td>-f –force</td>\n<td>忽视不存在的文件, 不显示提示信息<br>该选项优先级高于 –interactive</td>\n</tr>\n<tr>\n<td>-v –verbose</td>\n<td>在执行 rm 命令时, 显示翔实的操作信息</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>因为Linux没有复原选项, 所以, 如果要使用通配符执行 rm 命令的话, 先使用 ls 命令来测试通配符都会匹配哪些文件, 然后使用向上箭头调用刚刚执行的命令, 然后使用 rm 来替换 ls</p>\n</blockquote>\n<br>\n\n<h1 id=\"创建链接\"><a href=\"#创建链接\" class=\"headerlink\" title=\"创建链接\"></a>创建链接</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ln file link <span class=\"comment\"># 创建硬链接</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ln -s file link <span class=\"comment\"># 创建符号链接</span></span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"硬链接\"><a href=\"#硬链接\" class=\"headerlink\" title=\"硬链接\"></a>硬链接</h2><p>最初Unix创建链接的方式, 每创建一个硬链接, 就是为一个文件创建一个额外的目录项</p>\n<ul>\n<li>一个硬链接不能关联它所在的文件系统(磁盘分区)之外的文件</li>\n<li>不能关联目录</li>\n</ul>\n<p>当使用 <code>ls -l</code> 命令时, 第二个字段显示的数据表示硬链接的数量, 每一个文件或文件夹都至少有一个硬链接。</p>\n<p>当使用 <code>ls -li</code> 命令时, 第一个字段显示的数据表示文件索引节点号。</p>\n<h2 id=\"符号链接-1\"><a href=\"#符号链接-1\" class=\"headerlink\" title=\"符号链接\"></a>符号链接</h2><p>用来突破硬链接的局限性, 类似于windows的快捷方式</p>\n<p>如果往符号链接中写入文件, 指向的文件也会被写入相同的数据, 如果指向的文件被删除, 符号链接就不会被指向任何文件, 变成了一个坏连接。</p>\n<p>使用 <code>ls -l</code> 查看符号链接, 第一个字段的首字母为l, 文件长度表示的是符号链接的字符串长度</p>\n<p>使用相对路径要比使用绝对路径创建符号链接要好, 因为如果重命名了包含符号链接的文件夹会破环符号链接</p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<p><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-1Day.html\">第一天的笔记-基本的命令和使用方法</a></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>今天主要学习了一些操作文件的命令, 包括创建文件夹, 复制, 删除, 查看文件和文件夹, 还有链接的一些知识, 包括硬链接和符号链接。</p>\n<p>硬链接在文件被删掉之后也会留存源文件的数据, 符号链接不会。</p>\n<p>硬链接和源文件的文件索引节点号是一样的, 符号链接不同。</p>\n<p>每一个硬链接都关系到一个具体的包含文件内容的索引节点。</p>","more":"<br>\n\n<h1 id=\"符号链接\"><a href=\"#符号链接\" class=\"headerlink\" title=\"符号链接\"></a>符号链接</h1><p>如果以长格式查看文件列表, 会发现有可能有的文件有两个文件名</p>\n<p>用处在于如果一个文件的文件名包含版本号, 那么这个文件如果更新了版本号, 文件名也需要跟着变, 引用这个文件的其他文件也需要跟着更新, 而这个特殊符号 <code>-&gt;</code> 解决了这个问题。比如一个文件是这样的:</p>\n<p><code>libc.so.6 -&gt; libc-2.6.so</code></p>\n<p>那么引用<code>libc-2.6.so</code>的文件只需要指向<code>libc.so.6</code>就可以了</p>\n<br>\n\n<h1 id=\"操作文件\"><a href=\"#操作文件\" class=\"headerlink\" title=\"操作文件\"></a>操作文件</h1><ul>\n<li>cp – 复制文件和目录</li>\n<li>mv – 移动&#x2F;重命名文件和目录</li>\n<li>mkdir – 创建目录</li>\n<li>rm – 删除文件和目录</li>\n<li>ln – 创建硬链接和符号链接</li>\n</ul>\n<p>以上命令可以使用通配符来匹配需要操作的文件</p>\n<table>\n<thead>\n<tr>\n<th>通配符</th>\n<th>意义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>*</td>\n<td>匹配任意多个字符(包括零个或一个)</td>\n</tr>\n<tr>\n<td>?</td>\n<td>匹配任意一个字符(不包括零个)</td>\n</tr>\n<tr>\n<td>[characters]</td>\n<td>匹配任意一个属于字符集中的字符</td>\n</tr>\n<tr>\n<td>[!characters]</td>\n<td>匹配任意一个不是字符集中的字符</td>\n</tr>\n<tr>\n<td>[[:class:]]</td>\n<td>匹配任意一个属于指定字符类中的字符</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>普遍使用的字符类</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>字符类</th>\n<th>意义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>[:alnum:]</td>\n<td>匹配任意一个字母或</td>\n</tr>\n<tr>\n<td>[:alpha:]</td>\n<td>匹配任意一个字母</td>\n</tr>\n<tr>\n<td>[:digit:]</td>\n<td>匹配任意一个数字</td>\n</tr>\n<tr>\n<td>[:lower:]</td>\n<td>匹配任意一个小写</td>\n</tr>\n<tr>\n<td>[:upper:]</td>\n<td>匹配任意一个大写字母</td>\n</tr>\n</tbody></table>\n<p><strong>接受文件名作为参数的任何命令, 都可以使用通配符</strong></p>\n<h2 id=\"创建目录\"><a href=\"#创建目录\" class=\"headerlink\" title=\"创建目录\"></a>创建目录</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> mkdir newDirectory1 newDirectory2 newDirectory3</span></span><br></pre></td></tr></table></figure>\n\n<p>创建三个目录</p>\n<h2 id=\"复制文件和目录-cp命令\"><a href=\"#复制文件和目录-cp命令\" class=\"headerlink\" title=\"复制文件和目录(cp命令)\"></a>复制文件和目录(cp命令)</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> cp item item1 <span class=\"comment\"># 复制item到item1</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> cp item item2 item1 <span class=\"comment\"># 复制item, item2到item1</span></span></span><br></pre></td></tr></table></figure>\n\n<p>如果需要复制一个目录, 那么一般情况下, 执行这行命令会出现如下提示</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> cp: omitting directory <span class=\"string\">&#x27;item&#x27;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>这是因为即使是一个新文件夹, 里面也会有两个文件夹, <code>.</code> 和 <code>..</code> , 代表当前文件夹和父文件夹, 而如果想复制一个文件夹, 包括其所有的文件的话, 那么需要加上 <code>-r</code> 选项, 表示递归其下面所有的文件都执行复制操作</p>\n<blockquote>\n<p>cp 选项</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>意义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-a –archive</td>\n<td>复制文件和目录, 以及它们的属性, 包括所有权和权限。<br>通常, 副本具有用户所操作文件的默认属性</td>\n</tr>\n<tr>\n<td>-i –interactive</td>\n<td>在覆盖已存在文件之前, 提示用户确认<br>如果不指定该属性, cp命令会默认覆盖已存在文件</td>\n</tr>\n<tr>\n<td>-r –recursive</td>\n<td>递归的复制目录及目录中的内容。<br>当复制目录时, 通常需要该选项(或-a选项)</td>\n</tr>\n<tr>\n<td>-u –update</td>\n<td>当把文件从一个目录复制到另一个目录时,<br> 仅复制目标目录中不存在的文件, <br>或者是文件内容新于目标目录中已经存在的文件。</td>\n</tr>\n<tr>\n<td>-v –verbose</td>\n<td>显示翔实的命令操作信息</td>\n</tr>\n</tbody></table>\n<h2 id=\"移动和重命名文件-mv命令\"><a href=\"#移动和重命名文件-mv命令\" class=\"headerlink\" title=\"移动和重命名文件(mv命令)\"></a>移动和重命名文件(mv命令)</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> mv item item1 <span class=\"comment\"># 将 item 移动到 item1</span></span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>mv选项</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>意义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-i –interactive</td>\n<td>和cp命令中选项意义相同。<br>但是需要注意, <strong>因为是移动命令, 所以这个选项相当重要</strong></td>\n</tr>\n<tr>\n<td>-u –update</td>\n<td>同上</td>\n</tr>\n<tr>\n<td>-v –verbose</td>\n<td>同上</td>\n</tr>\n</tbody></table>\n<h2 id=\"删除文件和目录-rm命令\"><a href=\"#删除文件和目录-rm命令\" class=\"headerlink\" title=\"删除文件和目录(rm命令)\"></a>删除文件和目录(rm命令)</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rm item <span class=\"comment\"># 删除文件</span></span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>rm选项</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>意义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-i –interactive</td>\n<td>再删除文件之前, 提示用户确认信息<br>如果不指定该文件, rm 会默默的删除文件</td>\n</tr>\n<tr>\n<td>-r –recursive</td>\n<td>递归删除目录, 如果要删除的是一个目录, 则必须指定该选项</td>\n</tr>\n<tr>\n<td>-f –force</td>\n<td>忽视不存在的文件, 不显示提示信息<br>该选项优先级高于 –interactive</td>\n</tr>\n<tr>\n<td>-v –verbose</td>\n<td>在执行 rm 命令时, 显示翔实的操作信息</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>因为Linux没有复原选项, 所以, 如果要使用通配符执行 rm 命令的话, 先使用 ls 命令来测试通配符都会匹配哪些文件, 然后使用向上箭头调用刚刚执行的命令, 然后使用 rm 来替换 ls</p>\n</blockquote>\n<br>\n\n<h1 id=\"创建链接\"><a href=\"#创建链接\" class=\"headerlink\" title=\"创建链接\"></a>创建链接</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ln file link <span class=\"comment\"># 创建硬链接</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ln -s file link <span class=\"comment\"># 创建符号链接</span></span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"硬链接\"><a href=\"#硬链接\" class=\"headerlink\" title=\"硬链接\"></a>硬链接</h2><p>最初Unix创建链接的方式, 每创建一个硬链接, 就是为一个文件创建一个额外的目录项</p>\n<ul>\n<li>一个硬链接不能关联它所在的文件系统(磁盘分区)之外的文件</li>\n<li>不能关联目录</li>\n</ul>\n<p>当使用 <code>ls -l</code> 命令时, 第二个字段显示的数据表示硬链接的数量, 每一个文件或文件夹都至少有一个硬链接。</p>\n<p>当使用 <code>ls -li</code> 命令时, 第一个字段显示的数据表示文件索引节点号。</p>\n<h2 id=\"符号链接-1\"><a href=\"#符号链接-1\" class=\"headerlink\" title=\"符号链接\"></a>符号链接</h2><p>用来突破硬链接的局限性, 类似于windows的快捷方式</p>\n<p>如果往符号链接中写入文件, 指向的文件也会被写入相同的数据, 如果指向的文件被删除, 符号链接就不会被指向任何文件, 变成了一个坏连接。</p>\n<p>使用 <code>ls -l</code> 查看符号链接, 第一个字段的首字母为l, 文件长度表示的是符号链接的字符串长度</p>\n<p>使用相对路径要比使用绝对路径创建符号链接要好, 因为如果重命名了包含符号链接的文件夹会破环符号链接</p>"},{"title":"快乐的Linux命令行笔记-查阅命令文档并创建命令别名","date":"2018-12-01T12:17:10.000Z","_content":"\n[第一天的笔记-基本的命令和使用方法](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-1Day.html)\n[第二天的笔记-操作文件](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-2Day.html)\n\n# 总结\n\n今天学到了有关怎样查阅命令的帮助文档以及怎样创建属于自己的命令别名。\n\n<!--more-->\n\n<br>\n\n# 使用命令\n\n## 定义\n\n* 是一个可执行程序, 可以是用诸如C和C++语言写成的程序编译的二进制文件, 也可以是有shell, perl, python, ruby等脚本语言写成的程序。\n* 是一个内建于shell自身的命令(例如cd)\n* 是一个shell函数\n* 是一个命令别名\n\n## 显示命令的类型\n\n```shell\n$ type command # comman是你要查看的命令\n```\n\n## 显示一个可执行程序的位置\n\n```shell\n$ which command # command是要查看的命令, 只对可执行程序有效, 不包含内建命令和命令别名\n```\n\n## 得到命令文档\n\n```shell\n$ help command # command是要查看的命令\n```\n\n## 显示用法信息\n\n```shell\n$ command --help # command是要查看的命令, 不是所有的命令都支持这一选项\n```\n\n## 显示手册页\n\n```shell\n$ man program # program是要查看的命令\n$ man section program # section是要查看的章节页\n```\n\n## 全局搜索手册\n\n```shell\n$ apropos keyword # keyword是你要搜索的关键字\n```\n\n结果的第一个字段是手册页的名字, 第二个字段是章节\n\n## 显示简洁的命令说明\n\n```shell\n$ whatis program # program是要查看的命令\n```\n\n## 显示程序info条目\n\n```shell\n$ info program # program是要查看的命令\n```\n\n> info 命令\n\n| 命令                | 行为                         |\n| ----------------- | -------------------------- |\n| ?                 | 显示命令帮助                     |\n| PgUp or Bachspace | 显示上一页                      |\n| n                 | 下一个 - 显示下一个节点              |\n| p                 | 上一个 - 显示上一个节点              |\n| u                 | Up - 显示当前所显示节点的父节点, 通常是个菜单 |\n| Enter             | 激活光标位置下的超级链接               |\n| q                 | 退出                         |\n\n## 用别名创建自己的命令\n\n命令和命令之间可以使用`;`来隔开\n\n```shell\n$ command1; command2; command3\n```\n\n创建命令别名的方式:\n\n```shell\n$ alias name='string' # name是你的命令的别名, string是你需要执行的命令\n################## 例子\n$ alias createPG='cd; mkdir playground; cd playground; mkdir dir1; cp /etc/passwd dir1; ln dir1/passwd dir1/passwd-hard; ls dir1 -l'\n```\n\n删除别名:\n\n```shell\n$ unalias createPG\n```\n\n","source":"_posts/note/read_note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-3Day.md","raw":"---\ntitle: 快乐的Linux命令行笔记-查阅命令文档并创建命令别名\ndate: 2018-12-01 20:17:10\ncategories:\n- 笔记\n- 读书笔记\n- 快乐的Linux命令行\ntags:\n- 笔记\n- 快乐的Linux命令行\n- linux\n---\n\n[第一天的笔记-基本的命令和使用方法](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-1Day.html)\n[第二天的笔记-操作文件](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-2Day.html)\n\n# 总结\n\n今天学到了有关怎样查阅命令的帮助文档以及怎样创建属于自己的命令别名。\n\n<!--more-->\n\n<br>\n\n# 使用命令\n\n## 定义\n\n* 是一个可执行程序, 可以是用诸如C和C++语言写成的程序编译的二进制文件, 也可以是有shell, perl, python, ruby等脚本语言写成的程序。\n* 是一个内建于shell自身的命令(例如cd)\n* 是一个shell函数\n* 是一个命令别名\n\n## 显示命令的类型\n\n```shell\n$ type command # comman是你要查看的命令\n```\n\n## 显示一个可执行程序的位置\n\n```shell\n$ which command # command是要查看的命令, 只对可执行程序有效, 不包含内建命令和命令别名\n```\n\n## 得到命令文档\n\n```shell\n$ help command # command是要查看的命令\n```\n\n## 显示用法信息\n\n```shell\n$ command --help # command是要查看的命令, 不是所有的命令都支持这一选项\n```\n\n## 显示手册页\n\n```shell\n$ man program # program是要查看的命令\n$ man section program # section是要查看的章节页\n```\n\n## 全局搜索手册\n\n```shell\n$ apropos keyword # keyword是你要搜索的关键字\n```\n\n结果的第一个字段是手册页的名字, 第二个字段是章节\n\n## 显示简洁的命令说明\n\n```shell\n$ whatis program # program是要查看的命令\n```\n\n## 显示程序info条目\n\n```shell\n$ info program # program是要查看的命令\n```\n\n> info 命令\n\n| 命令                | 行为                         |\n| ----------------- | -------------------------- |\n| ?                 | 显示命令帮助                     |\n| PgUp or Bachspace | 显示上一页                      |\n| n                 | 下一个 - 显示下一个节点              |\n| p                 | 上一个 - 显示上一个节点              |\n| u                 | Up - 显示当前所显示节点的父节点, 通常是个菜单 |\n| Enter             | 激活光标位置下的超级链接               |\n| q                 | 退出                         |\n\n## 用别名创建自己的命令\n\n命令和命令之间可以使用`;`来隔开\n\n```shell\n$ command1; command2; command3\n```\n\n创建命令别名的方式:\n\n```shell\n$ alias name='string' # name是你的命令的别名, string是你需要执行的命令\n################## 例子\n$ alias createPG='cd; mkdir playground; cd playground; mkdir dir1; cp /etc/passwd dir1; ln dir1/passwd dir1/passwd-hard; ls dir1 -l'\n```\n\n删除别名:\n\n```shell\n$ unalias createPG\n```\n\n","slug":"note/read_note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-3Day","published":1,"updated":"2022-10-07T13:02:37.197Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejxc00983vsb0s51bgxk","content":"<p><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-1Day.html\">第一天的笔记-基本的命令和使用方法</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-2Day.html\">第二天的笔记-操作文件</a></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>今天学到了有关怎样查阅命令的帮助文档以及怎样创建属于自己的命令别名。</p>\n<span id=\"more\"></span>\n\n<br>\n\n<h1 id=\"使用命令\"><a href=\"#使用命令\" class=\"headerlink\" title=\"使用命令\"></a>使用命令</h1><h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><ul>\n<li>是一个可执行程序, 可以是用诸如C和C++语言写成的程序编译的二进制文件, 也可以是有shell, perl, python, ruby等脚本语言写成的程序。</li>\n<li>是一个内建于shell自身的命令(例如cd)</li>\n<li>是一个shell函数</li>\n<li>是一个命令别名</li>\n</ul>\n<h2 id=\"显示命令的类型\"><a href=\"#显示命令的类型\" class=\"headerlink\" title=\"显示命令的类型\"></a>显示命令的类型</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">type</span> <span class=\"built_in\">command</span> <span class=\"comment\"># comman是你要查看的命令</span></span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"显示一个可执行程序的位置\"><a href=\"#显示一个可执行程序的位置\" class=\"headerlink\" title=\"显示一个可执行程序的位置\"></a>显示一个可执行程序的位置</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">which</span> <span class=\"built_in\">command</span> <span class=\"comment\"># command是要查看的命令, 只对可执行程序有效, 不包含内建命令和命令别名</span></span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"得到命令文档\"><a href=\"#得到命令文档\" class=\"headerlink\" title=\"得到命令文档\"></a>得到命令文档</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">help</span> <span class=\"built_in\">command</span> <span class=\"comment\"># command是要查看的命令</span></span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"显示用法信息\"><a href=\"#显示用法信息\" class=\"headerlink\" title=\"显示用法信息\"></a>显示用法信息</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">command</span> --<span class=\"built_in\">help</span> <span class=\"comment\"># command是要查看的命令, 不是所有的命令都支持这一选项</span></span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"显示手册页\"><a href=\"#显示手册页\" class=\"headerlink\" title=\"显示手册页\"></a>显示手册页</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> man program <span class=\"comment\"># program是要查看的命令</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> man section program <span class=\"comment\"># section是要查看的章节页</span></span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"全局搜索手册\"><a href=\"#全局搜索手册\" class=\"headerlink\" title=\"全局搜索手册\"></a>全局搜索手册</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> apropos keyword <span class=\"comment\"># keyword是你要搜索的关键字</span></span></span><br></pre></td></tr></table></figure>\n\n<p>结果的第一个字段是手册页的名字, 第二个字段是章节</p>\n<h2 id=\"显示简洁的命令说明\"><a href=\"#显示简洁的命令说明\" class=\"headerlink\" title=\"显示简洁的命令说明\"></a>显示简洁的命令说明</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> whatis program <span class=\"comment\"># program是要查看的命令</span></span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"显示程序info条目\"><a href=\"#显示程序info条目\" class=\"headerlink\" title=\"显示程序info条目\"></a>显示程序info条目</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> info program <span class=\"comment\"># program是要查看的命令</span></span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>info 命令</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>行为</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>?</td>\n<td>显示命令帮助</td>\n</tr>\n<tr>\n<td>PgUp or Bachspace</td>\n<td>显示上一页</td>\n</tr>\n<tr>\n<td>n</td>\n<td>下一个 - 显示下一个节点</td>\n</tr>\n<tr>\n<td>p</td>\n<td>上一个 - 显示上一个节点</td>\n</tr>\n<tr>\n<td>u</td>\n<td>Up - 显示当前所显示节点的父节点, 通常是个菜单</td>\n</tr>\n<tr>\n<td>Enter</td>\n<td>激活光标位置下的超级链接</td>\n</tr>\n<tr>\n<td>q</td>\n<td>退出</td>\n</tr>\n</tbody></table>\n<h2 id=\"用别名创建自己的命令\"><a href=\"#用别名创建自己的命令\" class=\"headerlink\" title=\"用别名创建自己的命令\"></a>用别名创建自己的命令</h2><p>命令和命令之间可以使用<code>;</code>来隔开</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> command1; command2; command3</span></span><br></pre></td></tr></table></figure>\n\n<p>创建命令别名的方式:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">alias</span> name=<span class=\"string\">&#x27;string&#x27;</span> <span class=\"comment\"># name是你的命令的别名, string是你需要执行的命令</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">################# 例子</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">alias</span> createPG=<span class=\"string\">&#x27;cd; mkdir playground; cd playground; mkdir dir1; cp /etc/passwd dir1; ln dir1/passwd dir1/passwd-hard; ls dir1 -l&#x27;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>删除别名:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">unalias</span> createPG</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<p><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-1Day.html\">第一天的笔记-基本的命令和使用方法</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-2Day.html\">第二天的笔记-操作文件</a></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>今天学到了有关怎样查阅命令的帮助文档以及怎样创建属于自己的命令别名。</p>","more":"<br>\n\n<h1 id=\"使用命令\"><a href=\"#使用命令\" class=\"headerlink\" title=\"使用命令\"></a>使用命令</h1><h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><ul>\n<li>是一个可执行程序, 可以是用诸如C和C++语言写成的程序编译的二进制文件, 也可以是有shell, perl, python, ruby等脚本语言写成的程序。</li>\n<li>是一个内建于shell自身的命令(例如cd)</li>\n<li>是一个shell函数</li>\n<li>是一个命令别名</li>\n</ul>\n<h2 id=\"显示命令的类型\"><a href=\"#显示命令的类型\" class=\"headerlink\" title=\"显示命令的类型\"></a>显示命令的类型</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">type</span> <span class=\"built_in\">command</span> <span class=\"comment\"># comman是你要查看的命令</span></span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"显示一个可执行程序的位置\"><a href=\"#显示一个可执行程序的位置\" class=\"headerlink\" title=\"显示一个可执行程序的位置\"></a>显示一个可执行程序的位置</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">which</span> <span class=\"built_in\">command</span> <span class=\"comment\"># command是要查看的命令, 只对可执行程序有效, 不包含内建命令和命令别名</span></span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"得到命令文档\"><a href=\"#得到命令文档\" class=\"headerlink\" title=\"得到命令文档\"></a>得到命令文档</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">help</span> <span class=\"built_in\">command</span> <span class=\"comment\"># command是要查看的命令</span></span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"显示用法信息\"><a href=\"#显示用法信息\" class=\"headerlink\" title=\"显示用法信息\"></a>显示用法信息</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">command</span> --<span class=\"built_in\">help</span> <span class=\"comment\"># command是要查看的命令, 不是所有的命令都支持这一选项</span></span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"显示手册页\"><a href=\"#显示手册页\" class=\"headerlink\" title=\"显示手册页\"></a>显示手册页</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> man program <span class=\"comment\"># program是要查看的命令</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> man section program <span class=\"comment\"># section是要查看的章节页</span></span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"全局搜索手册\"><a href=\"#全局搜索手册\" class=\"headerlink\" title=\"全局搜索手册\"></a>全局搜索手册</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> apropos keyword <span class=\"comment\"># keyword是你要搜索的关键字</span></span></span><br></pre></td></tr></table></figure>\n\n<p>结果的第一个字段是手册页的名字, 第二个字段是章节</p>\n<h2 id=\"显示简洁的命令说明\"><a href=\"#显示简洁的命令说明\" class=\"headerlink\" title=\"显示简洁的命令说明\"></a>显示简洁的命令说明</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> whatis program <span class=\"comment\"># program是要查看的命令</span></span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"显示程序info条目\"><a href=\"#显示程序info条目\" class=\"headerlink\" title=\"显示程序info条目\"></a>显示程序info条目</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> info program <span class=\"comment\"># program是要查看的命令</span></span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>info 命令</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>行为</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>?</td>\n<td>显示命令帮助</td>\n</tr>\n<tr>\n<td>PgUp or Bachspace</td>\n<td>显示上一页</td>\n</tr>\n<tr>\n<td>n</td>\n<td>下一个 - 显示下一个节点</td>\n</tr>\n<tr>\n<td>p</td>\n<td>上一个 - 显示上一个节点</td>\n</tr>\n<tr>\n<td>u</td>\n<td>Up - 显示当前所显示节点的父节点, 通常是个菜单</td>\n</tr>\n<tr>\n<td>Enter</td>\n<td>激活光标位置下的超级链接</td>\n</tr>\n<tr>\n<td>q</td>\n<td>退出</td>\n</tr>\n</tbody></table>\n<h2 id=\"用别名创建自己的命令\"><a href=\"#用别名创建自己的命令\" class=\"headerlink\" title=\"用别名创建自己的命令\"></a>用别名创建自己的命令</h2><p>命令和命令之间可以使用<code>;</code>来隔开</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> command1; command2; command3</span></span><br></pre></td></tr></table></figure>\n\n<p>创建命令别名的方式:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">alias</span> name=<span class=\"string\">&#x27;string&#x27;</span> <span class=\"comment\"># name是你的命令的别名, string是你需要执行的命令</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">################# 例子</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">alias</span> createPG=<span class=\"string\">&#x27;cd; mkdir playground; cd playground; mkdir dir1; cp /etc/passwd dir1; ln dir1/passwd dir1/passwd-hard; ls dir1 -l&#x27;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>删除别名:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">unalias</span> createPG</span></span><br></pre></td></tr></table></figure>"},{"title":"快乐的Linux命令行笔记-重定向标准输入和输出以及处理查询结果","date":"2018-12-02T03:43:17.000Z","_content":"\n[第一天的笔记-基本的命令和使用方法](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-1Day.html)\n[第二天的笔记-操作文件](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-2Day.html)\n[第三天的笔记-查阅命令文档并创建命令别名](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-3Day.html)\n\n# 总结\n\n今天学习了如何将标准输入和标准输出的概念, 并如何重定向到文件中, 以及一些处理结果的技巧, 比如排序, 去重等等。\n\n<!--more-->\n\n<br>\n\n# IO重定向\n\n## 将命令的标准输出/标准错误重定向到文件\n\n> 将ls命令的输出重定向到指定文件\n\n```shell\n$ ls -l /usr/bin > ls-output.txt # 重定向标准输出到指定文件(该文件会被重写)\n$ ls -l /usr/bin >> ls-output.txt # 重定向标准输出到指定文件(将输出添加至文件内容之后)\n```\n\n注意:\n\n1. 只指定了标准输出, 如果在执行命令时出现错误, 则会将标准错误输出到屏幕, 而不是文件\n\n2. 每次重定向输出到文件时, 文件都会被重写, 而如果命令出错, 则该文件会变为空\n\n   ```shell\n   小技巧(清空一个文件): $ > 需要被清空的文件.txt\n   ```\n\n3. 重定向标准错误到指定文件 \n\n   ```shell\n   $ ls -l /bin/usr 2> ls-error.txt # 0 输入 1 输出 2 错误\n   ```\n\n   <br>\n\n\n## 将命令的标准输出和错误重定向到指定文件\n\n两种方式\n\n1. 对于旧版本shell也有效\n\n   ```shell\n   $ ls -l /bin/usr > ls-output.txt 2>&1\n   ```\n\n2. 新版本的方式\n\n   ```shell\n   ls -l /bin/usr &> ls-output.txt\n   ```\n\n<br>\n\n## 处理不需要的输出\n\n```shell\nls -l /bin/usr 2> /dev/null\n```\n\n这样就可以不显示输出, 也不用创建一个文件来存储输出。\n\n<br>\n\n## 标准输入重定向\n\n```shell\ncat [file] # file是需要读取的文件, cat命令会将该文件中的内容读取到屏幕上\n```\n\n<br>\n\n### 连接文件\n\n```shell\n$ cat [file1] [file2] > [allFile] # 会将file1和file2的文件内容全部放到allFile中\n```\n\n#### 创建一个文件并输入文件内容\n\n```shell\n$ cat > test.txt # 将标准输入重定向到指定文件\ntext something... # 输入一些内容, ctrl-d结束\nless test.txt # 查看文件内容\n```\n\n<br>\n\n### 管道线\n\n```shell\n$ ls -l /usr/bin | less\n```\n\n> 使用`|` 符号将一个命令的标准输入输送到另一个命令的标准输出, less命令接受任何命令的标准输入, 如上一例就是将ls命令的运行结果输送到标准输出\n\n<br>\n\n#### 过滤器\n\n##### 排序\n\n```shell\n$ ls -l /usr/bin | sort | less\n```\n\n> 使用sort过滤器将运行结果排序并输送到标准输出中。\n\n##### 去重\n\n```shell\n$ ls -l /usr/bin /bin | uniq | sort | less # 会确保bin目录和/usr/bin目录不包含重复的句子\n$ ls -l /usr/bin /bin | uniq -d | sort | less # 会将bin目录和/usr/bin目录下重复的文件列出来\n```\n\n##### 打印文件字节数\n\n```shell\n$ wc [file] # 结果是三个字段, 分别是行数, 单词数和字节数\n```\n\n> wc命令\n\n| 选项                   | 说明          |\n| -------------------- | ----------- |\n| -c --btyes           | 只打印字节数      |\n| -m --chars           | 只打印字数       |\n| -l --lines           | 只打印行数       |\n| --files0-from=F      | ???         |\n| -L --max-line-length | 只打印最长的一行的宽度 |\n| -w --words           | 打印单词数       |\n\n##### 打印匹配行\n\n```shell\n$ ls -l /usr/bin | grep zip | uniq # 打印带有zip字样的文件\n```\n\n> grep命令\n\n| 选项   | 说明       |\n| ---- | -------- |\n| -i   | 忽略大小写    |\n| -v   | 只打印不匹配的行 |\n\n##### 打印文件开头部分/结尾部分\n\n```shell\n$ head -n output.txt # 打印文件前五行\n$ tail -n output.txt # 打印文件最后五行\n```\n\n> tail命令有一个选项支持实时浏览文件, 如果是log文件, 新写入的内容会立即出现在屏幕上\n\n```shell\n$ tail -f /var/log/messages\n```\n\n##### 从标准输入到标准输出\n\n```shell\nls -l /usr/bin | sort | tee ls.txt | uniq  | grep zip\n```\n\n将结果输出到ls.txt中\n","source":"_posts/note/read_note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-4Day.md","raw":"---\ntitle: 快乐的Linux命令行笔记-重定向标准输入和输出以及处理查询结果\ndate: 2018-12-02 11:43:17\ncategories:\n- 笔记\n- 读书笔记\n- 快乐的Linux命令行\ntags:\n- 笔记\n- 快乐的Linux命令行\n- linux\n---\n\n[第一天的笔记-基本的命令和使用方法](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-1Day.html)\n[第二天的笔记-操作文件](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-2Day.html)\n[第三天的笔记-查阅命令文档并创建命令别名](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-3Day.html)\n\n# 总结\n\n今天学习了如何将标准输入和标准输出的概念, 并如何重定向到文件中, 以及一些处理结果的技巧, 比如排序, 去重等等。\n\n<!--more-->\n\n<br>\n\n# IO重定向\n\n## 将命令的标准输出/标准错误重定向到文件\n\n> 将ls命令的输出重定向到指定文件\n\n```shell\n$ ls -l /usr/bin > ls-output.txt # 重定向标准输出到指定文件(该文件会被重写)\n$ ls -l /usr/bin >> ls-output.txt # 重定向标准输出到指定文件(将输出添加至文件内容之后)\n```\n\n注意:\n\n1. 只指定了标准输出, 如果在执行命令时出现错误, 则会将标准错误输出到屏幕, 而不是文件\n\n2. 每次重定向输出到文件时, 文件都会被重写, 而如果命令出错, 则该文件会变为空\n\n   ```shell\n   小技巧(清空一个文件): $ > 需要被清空的文件.txt\n   ```\n\n3. 重定向标准错误到指定文件 \n\n   ```shell\n   $ ls -l /bin/usr 2> ls-error.txt # 0 输入 1 输出 2 错误\n   ```\n\n   <br>\n\n\n## 将命令的标准输出和错误重定向到指定文件\n\n两种方式\n\n1. 对于旧版本shell也有效\n\n   ```shell\n   $ ls -l /bin/usr > ls-output.txt 2>&1\n   ```\n\n2. 新版本的方式\n\n   ```shell\n   ls -l /bin/usr &> ls-output.txt\n   ```\n\n<br>\n\n## 处理不需要的输出\n\n```shell\nls -l /bin/usr 2> /dev/null\n```\n\n这样就可以不显示输出, 也不用创建一个文件来存储输出。\n\n<br>\n\n## 标准输入重定向\n\n```shell\ncat [file] # file是需要读取的文件, cat命令会将该文件中的内容读取到屏幕上\n```\n\n<br>\n\n### 连接文件\n\n```shell\n$ cat [file1] [file2] > [allFile] # 会将file1和file2的文件内容全部放到allFile中\n```\n\n#### 创建一个文件并输入文件内容\n\n```shell\n$ cat > test.txt # 将标准输入重定向到指定文件\ntext something... # 输入一些内容, ctrl-d结束\nless test.txt # 查看文件内容\n```\n\n<br>\n\n### 管道线\n\n```shell\n$ ls -l /usr/bin | less\n```\n\n> 使用`|` 符号将一个命令的标准输入输送到另一个命令的标准输出, less命令接受任何命令的标准输入, 如上一例就是将ls命令的运行结果输送到标准输出\n\n<br>\n\n#### 过滤器\n\n##### 排序\n\n```shell\n$ ls -l /usr/bin | sort | less\n```\n\n> 使用sort过滤器将运行结果排序并输送到标准输出中。\n\n##### 去重\n\n```shell\n$ ls -l /usr/bin /bin | uniq | sort | less # 会确保bin目录和/usr/bin目录不包含重复的句子\n$ ls -l /usr/bin /bin | uniq -d | sort | less # 会将bin目录和/usr/bin目录下重复的文件列出来\n```\n\n##### 打印文件字节数\n\n```shell\n$ wc [file] # 结果是三个字段, 分别是行数, 单词数和字节数\n```\n\n> wc命令\n\n| 选项                   | 说明          |\n| -------------------- | ----------- |\n| -c --btyes           | 只打印字节数      |\n| -m --chars           | 只打印字数       |\n| -l --lines           | 只打印行数       |\n| --files0-from=F      | ???         |\n| -L --max-line-length | 只打印最长的一行的宽度 |\n| -w --words           | 打印单词数       |\n\n##### 打印匹配行\n\n```shell\n$ ls -l /usr/bin | grep zip | uniq # 打印带有zip字样的文件\n```\n\n> grep命令\n\n| 选项   | 说明       |\n| ---- | -------- |\n| -i   | 忽略大小写    |\n| -v   | 只打印不匹配的行 |\n\n##### 打印文件开头部分/结尾部分\n\n```shell\n$ head -n output.txt # 打印文件前五行\n$ tail -n output.txt # 打印文件最后五行\n```\n\n> tail命令有一个选项支持实时浏览文件, 如果是log文件, 新写入的内容会立即出现在屏幕上\n\n```shell\n$ tail -f /var/log/messages\n```\n\n##### 从标准输入到标准输出\n\n```shell\nls -l /usr/bin | sort | tee ls.txt | uniq  | grep zip\n```\n\n将结果输出到ls.txt中\n","slug":"note/read_note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-4Day","published":1,"updated":"2022-10-07T13:02:48.933Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejxf009a3vsb046rh5hm","content":"<p><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-1Day.html\">第一天的笔记-基本的命令和使用方法</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-2Day.html\">第二天的笔记-操作文件</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-3Day.html\">第三天的笔记-查阅命令文档并创建命令别名</a></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>今天学习了如何将标准输入和标准输出的概念, 并如何重定向到文件中, 以及一些处理结果的技巧, 比如排序, 去重等等。</p>\n<span id=\"more\"></span>\n\n<br>\n\n<h1 id=\"IO重定向\"><a href=\"#IO重定向\" class=\"headerlink\" title=\"IO重定向\"></a>IO重定向</h1><h2 id=\"将命令的标准输出-x2F-标准错误重定向到文件\"><a href=\"#将命令的标准输出-x2F-标准错误重定向到文件\" class=\"headerlink\" title=\"将命令的标准输出&#x2F;标准错误重定向到文件\"></a>将命令的标准输出&#x2F;标准错误重定向到文件</h2><blockquote>\n<p>将ls命令的输出重定向到指定文件</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ls -l /usr/bin &gt; ls-output.txt <span class=\"comment\"># 重定向标准输出到指定文件(该文件会被重写)</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ls -l /usr/bin &gt;&gt; ls-output.txt <span class=\"comment\"># 重定向标准输出到指定文件(将输出添加至文件内容之后)</span></span></span><br></pre></td></tr></table></figure>\n\n<p>注意:</p>\n<ol>\n<li><p>只指定了标准输出, 如果在执行命令时出现错误, 则会将标准错误输出到屏幕, 而不是文件</p>\n</li>\n<li><p>每次重定向输出到文件时, 文件都会被重写, 而如果命令出错, 则该文件会变为空</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">小技巧(清空一个文件): $ &gt; 需要被清空的文件.txt</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重定向标准错误到指定文件 </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ls -l /bin/usr 2&gt; ls-error.txt <span class=\"comment\"># 0 输入 1 输出 2 错误</span></span></span><br></pre></td></tr></table></figure>\n\n<br></li>\n</ol>\n<h2 id=\"将命令的标准输出和错误重定向到指定文件\"><a href=\"#将命令的标准输出和错误重定向到指定文件\" class=\"headerlink\" title=\"将命令的标准输出和错误重定向到指定文件\"></a>将命令的标准输出和错误重定向到指定文件</h2><p>两种方式</p>\n<ol>\n<li><p>对于旧版本shell也有效</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ls -l /bin/usr &gt; ls-output.txt 2&gt;&amp;1</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>新版本的方式</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls -l /bin/usr &amp;&gt; ls-output.txt</span><br></pre></td></tr></table></figure></li>\n</ol>\n<br>\n\n<h2 id=\"处理不需要的输出\"><a href=\"#处理不需要的输出\" class=\"headerlink\" title=\"处理不需要的输出\"></a>处理不需要的输出</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls -l /bin/usr 2&gt; /dev/null</span><br></pre></td></tr></table></figure>\n\n<p>这样就可以不显示输出, 也不用创建一个文件来存储输出。</p>\n<br>\n\n<h2 id=\"标准输入重定向\"><a href=\"#标准输入重定向\" class=\"headerlink\" title=\"标准输入重定向\"></a>标准输入重定向</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat [file] # file是需要读取的文件, cat命令会将该文件中的内容读取到屏幕上</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h3 id=\"连接文件\"><a href=\"#连接文件\" class=\"headerlink\" title=\"连接文件\"></a>连接文件</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> cat [file1] [file2] &gt; [allFile] <span class=\"comment\"># 会将file1和file2的文件内容全部放到allFile中</span></span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"创建一个文件并输入文件内容\"><a href=\"#创建一个文件并输入文件内容\" class=\"headerlink\" title=\"创建一个文件并输入文件内容\"></a>创建一个文件并输入文件内容</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> cat &gt; test.txt <span class=\"comment\"># 将标准输入重定向到指定文件</span></span></span><br><span class=\"line\">text something... # 输入一些内容, ctrl-d结束</span><br><span class=\"line\">less test.txt # 查看文件内容</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h3 id=\"管道线\"><a href=\"#管道线\" class=\"headerlink\" title=\"管道线\"></a>管道线</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ls -l /usr/bin | less</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>使用<code>|</code> 符号将一个命令的标准输入输送到另一个命令的标准输出, less命令接受任何命令的标准输入, 如上一例就是将ls命令的运行结果输送到标准输出</p>\n</blockquote>\n<br>\n\n<h4 id=\"过滤器\"><a href=\"#过滤器\" class=\"headerlink\" title=\"过滤器\"></a>过滤器</h4><h5 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ls -l /usr/bin | sort | less</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>使用sort过滤器将运行结果排序并输送到标准输出中。</p>\n</blockquote>\n<h5 id=\"去重\"><a href=\"#去重\" class=\"headerlink\" title=\"去重\"></a>去重</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ls -l /usr/bin /bin | uniq | sort | less <span class=\"comment\"># 会确保bin目录和/usr/bin目录不包含重复的句子</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ls -l /usr/bin /bin | uniq -d | sort | less <span class=\"comment\"># 会将bin目录和/usr/bin目录下重复的文件列出来</span></span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"打印文件字节数\"><a href=\"#打印文件字节数\" class=\"headerlink\" title=\"打印文件字节数\"></a>打印文件字节数</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> wc [file] <span class=\"comment\"># 结果是三个字段, 分别是行数, 单词数和字节数</span></span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>wc命令</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-c –btyes</td>\n<td>只打印字节数</td>\n</tr>\n<tr>\n<td>-m –chars</td>\n<td>只打印字数</td>\n</tr>\n<tr>\n<td>-l –lines</td>\n<td>只打印行数</td>\n</tr>\n<tr>\n<td>–files0-from&#x3D;F</td>\n<td>???</td>\n</tr>\n<tr>\n<td>-L –max-line-length</td>\n<td>只打印最长的一行的宽度</td>\n</tr>\n<tr>\n<td>-w –words</td>\n<td>打印单词数</td>\n</tr>\n</tbody></table>\n<h5 id=\"打印匹配行\"><a href=\"#打印匹配行\" class=\"headerlink\" title=\"打印匹配行\"></a>打印匹配行</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ls -l /usr/bin | grep zip | uniq <span class=\"comment\"># 打印带有zip字样的文件</span></span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>grep命令</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-i</td>\n<td>忽略大小写</td>\n</tr>\n<tr>\n<td>-v</td>\n<td>只打印不匹配的行</td>\n</tr>\n</tbody></table>\n<h5 id=\"打印文件开头部分-x2F-结尾部分\"><a href=\"#打印文件开头部分-x2F-结尾部分\" class=\"headerlink\" title=\"打印文件开头部分&#x2F;结尾部分\"></a>打印文件开头部分&#x2F;结尾部分</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> head -n output.txt <span class=\"comment\"># 打印文件前五行</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> tail -n output.txt <span class=\"comment\"># 打印文件最后五行</span></span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>tail命令有一个选项支持实时浏览文件, 如果是log文件, 新写入的内容会立即出现在屏幕上</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> tail -f /var/<span class=\"built_in\">log</span>/messages</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"从标准输入到标准输出\"><a href=\"#从标准输入到标准输出\" class=\"headerlink\" title=\"从标准输入到标准输出\"></a>从标准输入到标准输出</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls -l /usr/bin | sort | tee ls.txt | uniq  | grep zip</span><br></pre></td></tr></table></figure>\n\n<p>将结果输出到ls.txt中</p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<p><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-1Day.html\">第一天的笔记-基本的命令和使用方法</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-2Day.html\">第二天的笔记-操作文件</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-3Day.html\">第三天的笔记-查阅命令文档并创建命令别名</a></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>今天学习了如何将标准输入和标准输出的概念, 并如何重定向到文件中, 以及一些处理结果的技巧, 比如排序, 去重等等。</p>","more":"<br>\n\n<h1 id=\"IO重定向\"><a href=\"#IO重定向\" class=\"headerlink\" title=\"IO重定向\"></a>IO重定向</h1><h2 id=\"将命令的标准输出-x2F-标准错误重定向到文件\"><a href=\"#将命令的标准输出-x2F-标准错误重定向到文件\" class=\"headerlink\" title=\"将命令的标准输出&#x2F;标准错误重定向到文件\"></a>将命令的标准输出&#x2F;标准错误重定向到文件</h2><blockquote>\n<p>将ls命令的输出重定向到指定文件</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ls -l /usr/bin &gt; ls-output.txt <span class=\"comment\"># 重定向标准输出到指定文件(该文件会被重写)</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ls -l /usr/bin &gt;&gt; ls-output.txt <span class=\"comment\"># 重定向标准输出到指定文件(将输出添加至文件内容之后)</span></span></span><br></pre></td></tr></table></figure>\n\n<p>注意:</p>\n<ol>\n<li><p>只指定了标准输出, 如果在执行命令时出现错误, 则会将标准错误输出到屏幕, 而不是文件</p>\n</li>\n<li><p>每次重定向输出到文件时, 文件都会被重写, 而如果命令出错, 则该文件会变为空</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">小技巧(清空一个文件): $ &gt; 需要被清空的文件.txt</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重定向标准错误到指定文件 </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ls -l /bin/usr 2&gt; ls-error.txt <span class=\"comment\"># 0 输入 1 输出 2 错误</span></span></span><br></pre></td></tr></table></figure>\n\n<br></li>\n</ol>\n<h2 id=\"将命令的标准输出和错误重定向到指定文件\"><a href=\"#将命令的标准输出和错误重定向到指定文件\" class=\"headerlink\" title=\"将命令的标准输出和错误重定向到指定文件\"></a>将命令的标准输出和错误重定向到指定文件</h2><p>两种方式</p>\n<ol>\n<li><p>对于旧版本shell也有效</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ls -l /bin/usr &gt; ls-output.txt 2&gt;&amp;1</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>新版本的方式</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls -l /bin/usr &amp;&gt; ls-output.txt</span><br></pre></td></tr></table></figure></li>\n</ol>\n<br>\n\n<h2 id=\"处理不需要的输出\"><a href=\"#处理不需要的输出\" class=\"headerlink\" title=\"处理不需要的输出\"></a>处理不需要的输出</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls -l /bin/usr 2&gt; /dev/null</span><br></pre></td></tr></table></figure>\n\n<p>这样就可以不显示输出, 也不用创建一个文件来存储输出。</p>\n<br>\n\n<h2 id=\"标准输入重定向\"><a href=\"#标准输入重定向\" class=\"headerlink\" title=\"标准输入重定向\"></a>标准输入重定向</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat [file] # file是需要读取的文件, cat命令会将该文件中的内容读取到屏幕上</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h3 id=\"连接文件\"><a href=\"#连接文件\" class=\"headerlink\" title=\"连接文件\"></a>连接文件</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> cat [file1] [file2] &gt; [allFile] <span class=\"comment\"># 会将file1和file2的文件内容全部放到allFile中</span></span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"创建一个文件并输入文件内容\"><a href=\"#创建一个文件并输入文件内容\" class=\"headerlink\" title=\"创建一个文件并输入文件内容\"></a>创建一个文件并输入文件内容</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> cat &gt; test.txt <span class=\"comment\"># 将标准输入重定向到指定文件</span></span></span><br><span class=\"line\">text something... # 输入一些内容, ctrl-d结束</span><br><span class=\"line\">less test.txt # 查看文件内容</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h3 id=\"管道线\"><a href=\"#管道线\" class=\"headerlink\" title=\"管道线\"></a>管道线</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ls -l /usr/bin | less</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>使用<code>|</code> 符号将一个命令的标准输入输送到另一个命令的标准输出, less命令接受任何命令的标准输入, 如上一例就是将ls命令的运行结果输送到标准输出</p>\n</blockquote>\n<br>\n\n<h4 id=\"过滤器\"><a href=\"#过滤器\" class=\"headerlink\" title=\"过滤器\"></a>过滤器</h4><h5 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ls -l /usr/bin | sort | less</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>使用sort过滤器将运行结果排序并输送到标准输出中。</p>\n</blockquote>\n<h5 id=\"去重\"><a href=\"#去重\" class=\"headerlink\" title=\"去重\"></a>去重</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ls -l /usr/bin /bin | uniq | sort | less <span class=\"comment\"># 会确保bin目录和/usr/bin目录不包含重复的句子</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ls -l /usr/bin /bin | uniq -d | sort | less <span class=\"comment\"># 会将bin目录和/usr/bin目录下重复的文件列出来</span></span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"打印文件字节数\"><a href=\"#打印文件字节数\" class=\"headerlink\" title=\"打印文件字节数\"></a>打印文件字节数</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> wc [file] <span class=\"comment\"># 结果是三个字段, 分别是行数, 单词数和字节数</span></span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>wc命令</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-c –btyes</td>\n<td>只打印字节数</td>\n</tr>\n<tr>\n<td>-m –chars</td>\n<td>只打印字数</td>\n</tr>\n<tr>\n<td>-l –lines</td>\n<td>只打印行数</td>\n</tr>\n<tr>\n<td>–files0-from&#x3D;F</td>\n<td>???</td>\n</tr>\n<tr>\n<td>-L –max-line-length</td>\n<td>只打印最长的一行的宽度</td>\n</tr>\n<tr>\n<td>-w –words</td>\n<td>打印单词数</td>\n</tr>\n</tbody></table>\n<h5 id=\"打印匹配行\"><a href=\"#打印匹配行\" class=\"headerlink\" title=\"打印匹配行\"></a>打印匹配行</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ls -l /usr/bin | grep zip | uniq <span class=\"comment\"># 打印带有zip字样的文件</span></span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>grep命令</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-i</td>\n<td>忽略大小写</td>\n</tr>\n<tr>\n<td>-v</td>\n<td>只打印不匹配的行</td>\n</tr>\n</tbody></table>\n<h5 id=\"打印文件开头部分-x2F-结尾部分\"><a href=\"#打印文件开头部分-x2F-结尾部分\" class=\"headerlink\" title=\"打印文件开头部分&#x2F;结尾部分\"></a>打印文件开头部分&#x2F;结尾部分</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> head -n output.txt <span class=\"comment\"># 打印文件前五行</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> tail -n output.txt <span class=\"comment\"># 打印文件最后五行</span></span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>tail命令有一个选项支持实时浏览文件, 如果是log文件, 新写入的内容会立即出现在屏幕上</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> tail -f /var/<span class=\"built_in\">log</span>/messages</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"从标准输入到标准输出\"><a href=\"#从标准输入到标准输出\" class=\"headerlink\" title=\"从标准输入到标准输出\"></a>从标准输入到标准输出</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls -l /usr/bin | sort | tee ls.txt | uniq  | grep zip</span><br></pre></td></tr></table></figure>\n\n<p>将结果输出到ls.txt中</p>"},{"title":"快乐的Linux命令行笔记-命令的展开","date":"2018-12-13T13:09:59.000Z","_content":"\n[第一天的笔记-基本的命令和使用方法](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-1Day.html)\n[第二天的笔记-操作文件](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-2Day.html)\n[第三天的笔记-查阅命令文档并创建命令别名](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-3Day.html)\n[第四天的笔记-重定向标准输入和输出以及处理查询结果](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-4Day.html)\n\n# 总结\n\n今天主要学习了展开和引用, 明白了如何使用展开来更有效率的使用shell\n<!--more-->\n# 打印\n\n## 打印匹配通配符的路径\n\n```shell\n$ echo this is a test\n```\n\noutput:\n\n```shell\nthis is a test\n```\n\n该命令可以匹配通配符, 像这样:\n\n```shell\n$ echo *\n```\n\n会将当前目录下的文件名字打印出来, 类似的, 还有这样:\n\n```shell\n$ echo D*\n$ echo [[:Upper:]]*\n$ echo *s\n$ echo /usr/*/share\n```\n\noutput:\n\n```\nDesktop Documents ...\nDesktop Documents Music Pictures ...\nDocuments Pictures ...\n/usr/kerberos/share /usr/local/share ...\n```\n\n所有的输出都符合通配符\n\n<br>\n\n## 算术通配符展开\n\n```shell\n$ echo $((2 + 2))\n```\n\n只支持整数, 支持嵌套\n\n<br>\n\n## 花括号展开\n\n```shell\n$ echo Front-{a,b,c}-Back\n```\n\noutput:\n\n```shell\nFront-a-Back Front-b-Back Front-c-Back\n```\n\n小技巧, 可以按照某种顺序来创建文件夹:\n\n```shell\n$ mkdir {2007..2009}-0{1..9} {2007..2009}{10..12}\n```\n\n上面的例子是按照\"年-月\"的形式来创建文件夹\n\n<br>\n\n## 参数展开\n\n```shell\n$ echo $USER\n```\n\n会将当前用户名展示出来\n\n```shell\n$ printenv | less\n```\n\n将有效的变量列表展示出来\n\n<br>\n\n## 命令替换\n\n含义是将表达式中的命令的输出结果作为一个参数传递给另一个命令\n\n```shell\n$ echo $(ls)\n```\n\n将`ls`命令的输出结果使用echo打印出来\n\n```shell\n$ ls -l $(which cp)\n```\n\n> 提示: `which`命令是用来查看命令所在文件路径, [这篇有写](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-3Day.html)\n\n```\noutput: -rwxr-xr-x 1 root root 71516 2007-12-05 08:58 /bin/cp\n```\n\n旧版`shell`程序中的命令替换的语法:\n\n```shell\n$ ls -l `which cp`\n```\n\n<br>\n\n## 双引号\n\n如果一个文件的文件名中间包含空格, 那么可以使用`\"\"`来阻止单词分割机制\n\n在双引号中, 参数展开, 算术表达式展开和命令替换仍然有效。\n\n<br>\n\n## 单引号\n\n禁止所有的展开\n\n<br>\n\n## 转义字符\n\n在字符前加一个反斜杠\n","source":"_posts/note/read_note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-5Day.md","raw":"---\ntitle: 快乐的Linux命令行笔记-命令的展开\ndate: 2018-12-13 21:09:59\ncategories:\n- 笔记\n- 读书笔记\n- 快乐的Linux命令行\ntags:\n- 笔记\n- 快乐的Linux命令行\n- linux\n---\n\n[第一天的笔记-基本的命令和使用方法](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-1Day.html)\n[第二天的笔记-操作文件](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-2Day.html)\n[第三天的笔记-查阅命令文档并创建命令别名](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-3Day.html)\n[第四天的笔记-重定向标准输入和输出以及处理查询结果](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-4Day.html)\n\n# 总结\n\n今天主要学习了展开和引用, 明白了如何使用展开来更有效率的使用shell\n<!--more-->\n# 打印\n\n## 打印匹配通配符的路径\n\n```shell\n$ echo this is a test\n```\n\noutput:\n\n```shell\nthis is a test\n```\n\n该命令可以匹配通配符, 像这样:\n\n```shell\n$ echo *\n```\n\n会将当前目录下的文件名字打印出来, 类似的, 还有这样:\n\n```shell\n$ echo D*\n$ echo [[:Upper:]]*\n$ echo *s\n$ echo /usr/*/share\n```\n\noutput:\n\n```\nDesktop Documents ...\nDesktop Documents Music Pictures ...\nDocuments Pictures ...\n/usr/kerberos/share /usr/local/share ...\n```\n\n所有的输出都符合通配符\n\n<br>\n\n## 算术通配符展开\n\n```shell\n$ echo $((2 + 2))\n```\n\n只支持整数, 支持嵌套\n\n<br>\n\n## 花括号展开\n\n```shell\n$ echo Front-{a,b,c}-Back\n```\n\noutput:\n\n```shell\nFront-a-Back Front-b-Back Front-c-Back\n```\n\n小技巧, 可以按照某种顺序来创建文件夹:\n\n```shell\n$ mkdir {2007..2009}-0{1..9} {2007..2009}{10..12}\n```\n\n上面的例子是按照\"年-月\"的形式来创建文件夹\n\n<br>\n\n## 参数展开\n\n```shell\n$ echo $USER\n```\n\n会将当前用户名展示出来\n\n```shell\n$ printenv | less\n```\n\n将有效的变量列表展示出来\n\n<br>\n\n## 命令替换\n\n含义是将表达式中的命令的输出结果作为一个参数传递给另一个命令\n\n```shell\n$ echo $(ls)\n```\n\n将`ls`命令的输出结果使用echo打印出来\n\n```shell\n$ ls -l $(which cp)\n```\n\n> 提示: `which`命令是用来查看命令所在文件路径, [这篇有写](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-3Day.html)\n\n```\noutput: -rwxr-xr-x 1 root root 71516 2007-12-05 08:58 /bin/cp\n```\n\n旧版`shell`程序中的命令替换的语法:\n\n```shell\n$ ls -l `which cp`\n```\n\n<br>\n\n## 双引号\n\n如果一个文件的文件名中间包含空格, 那么可以使用`\"\"`来阻止单词分割机制\n\n在双引号中, 参数展开, 算术表达式展开和命令替换仍然有效。\n\n<br>\n\n## 单引号\n\n禁止所有的展开\n\n<br>\n\n## 转义字符\n\n在字符前加一个反斜杠\n","slug":"note/read_note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-5Day","published":1,"updated":"2022-10-07T13:02:55.029Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejxk009e3vsbe3554ebi","content":"<p><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-1Day.html\">第一天的笔记-基本的命令和使用方法</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-2Day.html\">第二天的笔记-操作文件</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-3Day.html\">第三天的笔记-查阅命令文档并创建命令别名</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-4Day.html\">第四天的笔记-重定向标准输入和输出以及处理查询结果</a></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>今天主要学习了展开和引用, 明白了如何使用展开来更有效率的使用shell</p>\n<span id=\"more\"></span>\n<h1 id=\"打印\"><a href=\"#打印\" class=\"headerlink\" title=\"打印\"></a>打印</h1><h2 id=\"打印匹配通配符的路径\"><a href=\"#打印匹配通配符的路径\" class=\"headerlink\" title=\"打印匹配通配符的路径\"></a>打印匹配通配符的路径</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">echo</span> this is a <span class=\"built_in\">test</span></span></span><br></pre></td></tr></table></figure>\n\n<p>output:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this is a test</span><br></pre></td></tr></table></figure>\n\n<p>该命令可以匹配通配符, 像这样:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">echo</span> *</span></span><br></pre></td></tr></table></figure>\n\n<p>会将当前目录下的文件名字打印出来, 类似的, 还有这样:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">echo</span> D*</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">echo</span> [[:Upper:]]*</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">echo</span> *s</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">echo</span> /usr/*/share</span></span><br></pre></td></tr></table></figure>\n\n<p>output:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Desktop Documents ...</span><br><span class=\"line\">Desktop Documents Music Pictures ...</span><br><span class=\"line\">Documents Pictures ...</span><br><span class=\"line\">/usr/kerberos/share /usr/local/share ...</span><br></pre></td></tr></table></figure>\n\n<p>所有的输出都符合通配符</p>\n<br>\n\n<h2 id=\"算术通配符展开\"><a href=\"#算术通配符展开\" class=\"headerlink\" title=\"算术通配符展开\"></a>算术通配符展开</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">echo</span> $((<span class=\"number\">2</span> + <span class=\"number\">2</span>))</span></span><br></pre></td></tr></table></figure>\n\n<p>只支持整数, 支持嵌套</p>\n<br>\n\n<h2 id=\"花括号展开\"><a href=\"#花括号展开\" class=\"headerlink\" title=\"花括号展开\"></a>花括号展开</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">echo</span> Front-&#123;a,b,c&#125;-Back</span></span><br></pre></td></tr></table></figure>\n\n<p>output:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Front-a-Back Front-b-Back Front-c-Back</span><br></pre></td></tr></table></figure>\n\n<p>小技巧, 可以按照某种顺序来创建文件夹:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> mkdir &#123;2007..2009&#125;-0&#123;1..9&#125; &#123;2007..2009&#125;&#123;10..12&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>上面的例子是按照”年-月”的形式来创建文件夹</p>\n<br>\n\n<h2 id=\"参数展开\"><a href=\"#参数展开\" class=\"headerlink\" title=\"参数展开\"></a>参数展开</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">echo</span> <span class=\"variable\">$USER</span></span></span><br></pre></td></tr></table></figure>\n\n<p>会将当前用户名展示出来</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> printenv | less</span></span><br></pre></td></tr></table></figure>\n\n<p>将有效的变量列表展示出来</p>\n<br>\n\n<h2 id=\"命令替换\"><a href=\"#命令替换\" class=\"headerlink\" title=\"命令替换\"></a>命令替换</h2><p>含义是将表达式中的命令的输出结果作为一个参数传递给另一个命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">echo</span> $(ls)</span></span><br></pre></td></tr></table></figure>\n\n<p>将<code>ls</code>命令的输出结果使用echo打印出来</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ls -l $(<span class=\"built_in\">which</span> cp)</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>提示: <code>which</code>命令是用来查看命令所在文件路径, <a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-3Day.html\">这篇有写</a></p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">output: -rwxr-xr-x 1 root root 71516 2007-12-05 08:58 /bin/cp</span><br></pre></td></tr></table></figure>\n\n<p>旧版<code>shell</code>程序中的命令替换的语法:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ls -l `<span class=\"built_in\">which</span> cp`</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h2 id=\"双引号\"><a href=\"#双引号\" class=\"headerlink\" title=\"双引号\"></a>双引号</h2><p>如果一个文件的文件名中间包含空格, 那么可以使用<code>&quot;&quot;</code>来阻止单词分割机制</p>\n<p>在双引号中, 参数展开, 算术表达式展开和命令替换仍然有效。</p>\n<br>\n\n<h2 id=\"单引号\"><a href=\"#单引号\" class=\"headerlink\" title=\"单引号\"></a>单引号</h2><p>禁止所有的展开</p>\n<br>\n\n<h2 id=\"转义字符\"><a href=\"#转义字符\" class=\"headerlink\" title=\"转义字符\"></a>转义字符</h2><p>在字符前加一个反斜杠</p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<p><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-1Day.html\">第一天的笔记-基本的命令和使用方法</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-2Day.html\">第二天的笔记-操作文件</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-3Day.html\">第三天的笔记-查阅命令文档并创建命令别名</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-4Day.html\">第四天的笔记-重定向标准输入和输出以及处理查询结果</a></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>今天主要学习了展开和引用, 明白了如何使用展开来更有效率的使用shell</p>","more":"<h1 id=\"打印\"><a href=\"#打印\" class=\"headerlink\" title=\"打印\"></a>打印</h1><h2 id=\"打印匹配通配符的路径\"><a href=\"#打印匹配通配符的路径\" class=\"headerlink\" title=\"打印匹配通配符的路径\"></a>打印匹配通配符的路径</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">echo</span> this is a <span class=\"built_in\">test</span></span></span><br></pre></td></tr></table></figure>\n\n<p>output:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this is a test</span><br></pre></td></tr></table></figure>\n\n<p>该命令可以匹配通配符, 像这样:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">echo</span> *</span></span><br></pre></td></tr></table></figure>\n\n<p>会将当前目录下的文件名字打印出来, 类似的, 还有这样:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">echo</span> D*</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">echo</span> [[:Upper:]]*</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">echo</span> *s</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">echo</span> /usr/*/share</span></span><br></pre></td></tr></table></figure>\n\n<p>output:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Desktop Documents ...</span><br><span class=\"line\">Desktop Documents Music Pictures ...</span><br><span class=\"line\">Documents Pictures ...</span><br><span class=\"line\">/usr/kerberos/share /usr/local/share ...</span><br></pre></td></tr></table></figure>\n\n<p>所有的输出都符合通配符</p>\n<br>\n\n<h2 id=\"算术通配符展开\"><a href=\"#算术通配符展开\" class=\"headerlink\" title=\"算术通配符展开\"></a>算术通配符展开</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">echo</span> $((<span class=\"number\">2</span> + <span class=\"number\">2</span>))</span></span><br></pre></td></tr></table></figure>\n\n<p>只支持整数, 支持嵌套</p>\n<br>\n\n<h2 id=\"花括号展开\"><a href=\"#花括号展开\" class=\"headerlink\" title=\"花括号展开\"></a>花括号展开</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">echo</span> Front-&#123;a,b,c&#125;-Back</span></span><br></pre></td></tr></table></figure>\n\n<p>output:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Front-a-Back Front-b-Back Front-c-Back</span><br></pre></td></tr></table></figure>\n\n<p>小技巧, 可以按照某种顺序来创建文件夹:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> mkdir &#123;2007..2009&#125;-0&#123;1..9&#125; &#123;2007..2009&#125;&#123;10..12&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>上面的例子是按照”年-月”的形式来创建文件夹</p>\n<br>\n\n<h2 id=\"参数展开\"><a href=\"#参数展开\" class=\"headerlink\" title=\"参数展开\"></a>参数展开</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">echo</span> <span class=\"variable\">$USER</span></span></span><br></pre></td></tr></table></figure>\n\n<p>会将当前用户名展示出来</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> printenv | less</span></span><br></pre></td></tr></table></figure>\n\n<p>将有效的变量列表展示出来</p>\n<br>\n\n<h2 id=\"命令替换\"><a href=\"#命令替换\" class=\"headerlink\" title=\"命令替换\"></a>命令替换</h2><p>含义是将表达式中的命令的输出结果作为一个参数传递给另一个命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">echo</span> $(ls)</span></span><br></pre></td></tr></table></figure>\n\n<p>将<code>ls</code>命令的输出结果使用echo打印出来</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ls -l $(<span class=\"built_in\">which</span> cp)</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>提示: <code>which</code>命令是用来查看命令所在文件路径, <a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-3Day.html\">这篇有写</a></p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">output: -rwxr-xr-x 1 root root 71516 2007-12-05 08:58 /bin/cp</span><br></pre></td></tr></table></figure>\n\n<p>旧版<code>shell</code>程序中的命令替换的语法:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ls -l `<span class=\"built_in\">which</span> cp`</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h2 id=\"双引号\"><a href=\"#双引号\" class=\"headerlink\" title=\"双引号\"></a>双引号</h2><p>如果一个文件的文件名中间包含空格, 那么可以使用<code>&quot;&quot;</code>来阻止单词分割机制</p>\n<p>在双引号中, 参数展开, 算术表达式展开和命令替换仍然有效。</p>\n<br>\n\n<h2 id=\"单引号\"><a href=\"#单引号\" class=\"headerlink\" title=\"单引号\"></a>单引号</h2><p>禁止所有的展开</p>\n<br>\n\n<h2 id=\"转义字符\"><a href=\"#转义字符\" class=\"headerlink\" title=\"转义字符\"></a>转义字符</h2><p>在字符前加一个反斜杠</p>"},{"title":"快乐的Linux命令行笔记-快捷键","date":"2019-01-29T16:55:15.000Z","_content":"\n[第一天的笔记-基本的命令和使用方法](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-1Day.html)\n[第二天的笔记-操作文件](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-2Day.html)\n[第三天的笔记-查阅命令文档并创建命令别名](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-3Day.html)\n[第四天的笔记-重定向标准输入和输出以及处理查询结果](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-4Day.html)\n[第五天的笔记-命令的展开](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-5Day.html)\n\n# 总结\n\n今天学习了关于命令行中的一些快捷键的操作以及使用历史命令来减少敲击键盘的次数。\n<!--more-->\n# 移动光标\n\nbash使用的是一个名为Readline的库, 在命令行编辑的时候可以使用一些快捷键来进行移动光标。\n\n| 按键 | 功能 |\n| -----: | :----- |\n| ctrl-a | 移动光标到行首 |\n| ctrl-e | 移动光标到行尾 |\n| ctrl-f | 光标前移一个字符 |\n| ctrl-b | 光标后移一个字符 |\n| alt-f | 光标前移一个字 |\n| alt-b | 光标后移一个字 |\n| ctrl-l | 清空屏幕 |\n\n# 修改文本\n\n在命令行中修改文本\n\n| 按键 | 功能 |\n| ---: | :--- |\n| ctrl-d | 删除光标位置的字符 |\n| ctrl-t | 光标位置的字符和前面的字符换位置 |\n| alt-t | 光标位置的字和前面的字换位置 |\n| alt-l | 把从光标位置到字尾的字母变成小写 |\n| alt-u | 把从贯标位置到字尾的字母变成大写 |\n\n# 剪切/粘贴文本\n\n剪切/粘贴文本的一些快捷键:\n\n| 按键 | 功能 |\n| ----: | :---- |\n| ctrl-k | 剪切从光标到行尾的文本 |\n| ctrl-u | 剪切从光标到行首的文本 |\n| alt-d | 剪切从光标到词尾的文本 |\n| alt-backspace | 剪切从光标到词头的文本, 如果光标在词头, 剪切前一个词 |\n| ctrl-y | 将剪切板中的文本粘贴到光标位置 |\n\n # 自动补全\n\n自动补全的快捷键:\n\n| 按键 | 功能 |\n| ---: | :-- |\n| alt-? | 相当于按两下tab, 显示所有可能匹配的列表 |\n| alt-* | 插入所有自动补全 |\n\n# 历史命令\n\n使用以下命令来查看最后执行的500条命令:\n\n```shell\nhistory | less\n```\n\n使用以下命令来过滤历史命令:\n\n```shell\nhistory | grep /usr/bin\n```\n\n显示的命令会将包含`/usr/bin`的命令显示出来, 包含她的行号。\n然后可以根据行号来执行该条命令:\n\n```shell\n!88\n```\n\n该命令执行了第八十八行命令。\n\n## 增量搜索历史命令\n\n1. `ctrl-r` 开启增量搜索模式\n2. 接着输入需要搜索的字\n3. 按 `Enter` 直接执行搜索到的命令, 或者按 `ctrl-j` 复制到命令行中\n\n搜索历史命令的快捷键:\n\n| 按键 | 功能 |\n| --: | :-- |\n| ctrl-p | 移动到上一个历史条目, 类似于上箭头按键 |\n| ctrl-n | 移动到下一个历史条目, 类似于下箭头按键 |\n| alt-< | 移动到历史列表的开头 |\n| alt-> | 移动到历史列表的结尾, 即当前命令行 |\n| ctrl-r | 反向增量搜索 |\n| alt-p | 反向搜索(非增量搜索, 输入搜索的字符串, 按Enter来执行搜索) |\n| alt-n | 向前搜索(非增量) |\n| ctrl-o | 执行历史列表中的当前项, 并移到下一个 |\n\n历史命令的展开:\n\n| 按键 | 功能 |\n| --: | :-- |\n| !! | 重复最后一次执行的命令 |\n| !number | 执行历史列表中第number行的命令 |\n| !string | 执行历史列表中以string开头的命令 |\n| !?string | 执行历史列表中包含string的命令 |\n\n# 记录整个shell会话的命令\n\n使用以下命令来存储本次shell中执行的所有命令:\n\n```shell\nscript [file]\n```\n","source":"_posts/note/read_note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-6Day.md","raw":"---\ntitle: 快乐的Linux命令行笔记-快捷键\ndate: 2019-01-30 00:55:15\ncategories:\n- 笔记\n- 读书笔记\n- 快乐的Linux命令行\ntags:\n- 笔记\n- 快乐的Linux命令行\n- linux\n---\n\n[第一天的笔记-基本的命令和使用方法](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-1Day.html)\n[第二天的笔记-操作文件](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-2Day.html)\n[第三天的笔记-查阅命令文档并创建命令别名](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-3Day.html)\n[第四天的笔记-重定向标准输入和输出以及处理查询结果](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-4Day.html)\n[第五天的笔记-命令的展开](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-5Day.html)\n\n# 总结\n\n今天学习了关于命令行中的一些快捷键的操作以及使用历史命令来减少敲击键盘的次数。\n<!--more-->\n# 移动光标\n\nbash使用的是一个名为Readline的库, 在命令行编辑的时候可以使用一些快捷键来进行移动光标。\n\n| 按键 | 功能 |\n| -----: | :----- |\n| ctrl-a | 移动光标到行首 |\n| ctrl-e | 移动光标到行尾 |\n| ctrl-f | 光标前移一个字符 |\n| ctrl-b | 光标后移一个字符 |\n| alt-f | 光标前移一个字 |\n| alt-b | 光标后移一个字 |\n| ctrl-l | 清空屏幕 |\n\n# 修改文本\n\n在命令行中修改文本\n\n| 按键 | 功能 |\n| ---: | :--- |\n| ctrl-d | 删除光标位置的字符 |\n| ctrl-t | 光标位置的字符和前面的字符换位置 |\n| alt-t | 光标位置的字和前面的字换位置 |\n| alt-l | 把从光标位置到字尾的字母变成小写 |\n| alt-u | 把从贯标位置到字尾的字母变成大写 |\n\n# 剪切/粘贴文本\n\n剪切/粘贴文本的一些快捷键:\n\n| 按键 | 功能 |\n| ----: | :---- |\n| ctrl-k | 剪切从光标到行尾的文本 |\n| ctrl-u | 剪切从光标到行首的文本 |\n| alt-d | 剪切从光标到词尾的文本 |\n| alt-backspace | 剪切从光标到词头的文本, 如果光标在词头, 剪切前一个词 |\n| ctrl-y | 将剪切板中的文本粘贴到光标位置 |\n\n # 自动补全\n\n自动补全的快捷键:\n\n| 按键 | 功能 |\n| ---: | :-- |\n| alt-? | 相当于按两下tab, 显示所有可能匹配的列表 |\n| alt-* | 插入所有自动补全 |\n\n# 历史命令\n\n使用以下命令来查看最后执行的500条命令:\n\n```shell\nhistory | less\n```\n\n使用以下命令来过滤历史命令:\n\n```shell\nhistory | grep /usr/bin\n```\n\n显示的命令会将包含`/usr/bin`的命令显示出来, 包含她的行号。\n然后可以根据行号来执行该条命令:\n\n```shell\n!88\n```\n\n该命令执行了第八十八行命令。\n\n## 增量搜索历史命令\n\n1. `ctrl-r` 开启增量搜索模式\n2. 接着输入需要搜索的字\n3. 按 `Enter` 直接执行搜索到的命令, 或者按 `ctrl-j` 复制到命令行中\n\n搜索历史命令的快捷键:\n\n| 按键 | 功能 |\n| --: | :-- |\n| ctrl-p | 移动到上一个历史条目, 类似于上箭头按键 |\n| ctrl-n | 移动到下一个历史条目, 类似于下箭头按键 |\n| alt-< | 移动到历史列表的开头 |\n| alt-> | 移动到历史列表的结尾, 即当前命令行 |\n| ctrl-r | 反向增量搜索 |\n| alt-p | 反向搜索(非增量搜索, 输入搜索的字符串, 按Enter来执行搜索) |\n| alt-n | 向前搜索(非增量) |\n| ctrl-o | 执行历史列表中的当前项, 并移到下一个 |\n\n历史命令的展开:\n\n| 按键 | 功能 |\n| --: | :-- |\n| !! | 重复最后一次执行的命令 |\n| !number | 执行历史列表中第number行的命令 |\n| !string | 执行历史列表中以string开头的命令 |\n| !?string | 执行历史列表中包含string的命令 |\n\n# 记录整个shell会话的命令\n\n使用以下命令来存储本次shell中执行的所有命令:\n\n```shell\nscript [file]\n```\n","slug":"note/read_note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-6Day","published":1,"updated":"2022-10-07T13:03:04.653Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejxq009h3vsb9yn80ulz","content":"<p><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-1Day.html\">第一天的笔记-基本的命令和使用方法</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-2Day.html\">第二天的笔记-操作文件</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-3Day.html\">第三天的笔记-查阅命令文档并创建命令别名</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-4Day.html\">第四天的笔记-重定向标准输入和输出以及处理查询结果</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-5Day.html\">第五天的笔记-命令的展开</a></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>今天学习了关于命令行中的一些快捷键的操作以及使用历史命令来减少敲击键盘的次数。</p>\n<span id=\"more\"></span>\n<h1 id=\"移动光标\"><a href=\"#移动光标\" class=\"headerlink\" title=\"移动光标\"></a>移动光标</h1><p>bash使用的是一个名为Readline的库, 在命令行编辑的时候可以使用一些快捷键来进行移动光标。</p>\n<table>\n<thead>\n<tr>\n<th align=\"right\">按键</th>\n<th align=\"left\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"right\">ctrl-a</td>\n<td align=\"left\">移动光标到行首</td>\n</tr>\n<tr>\n<td align=\"right\">ctrl-e</td>\n<td align=\"left\">移动光标到行尾</td>\n</tr>\n<tr>\n<td align=\"right\">ctrl-f</td>\n<td align=\"left\">光标前移一个字符</td>\n</tr>\n<tr>\n<td align=\"right\">ctrl-b</td>\n<td align=\"left\">光标后移一个字符</td>\n</tr>\n<tr>\n<td align=\"right\">alt-f</td>\n<td align=\"left\">光标前移一个字</td>\n</tr>\n<tr>\n<td align=\"right\">alt-b</td>\n<td align=\"left\">光标后移一个字</td>\n</tr>\n<tr>\n<td align=\"right\">ctrl-l</td>\n<td align=\"left\">清空屏幕</td>\n</tr>\n</tbody></table>\n<h1 id=\"修改文本\"><a href=\"#修改文本\" class=\"headerlink\" title=\"修改文本\"></a>修改文本</h1><p>在命令行中修改文本</p>\n<table>\n<thead>\n<tr>\n<th align=\"right\">按键</th>\n<th align=\"left\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"right\">ctrl-d</td>\n<td align=\"left\">删除光标位置的字符</td>\n</tr>\n<tr>\n<td align=\"right\">ctrl-t</td>\n<td align=\"left\">光标位置的字符和前面的字符换位置</td>\n</tr>\n<tr>\n<td align=\"right\">alt-t</td>\n<td align=\"left\">光标位置的字和前面的字换位置</td>\n</tr>\n<tr>\n<td align=\"right\">alt-l</td>\n<td align=\"left\">把从光标位置到字尾的字母变成小写</td>\n</tr>\n<tr>\n<td align=\"right\">alt-u</td>\n<td align=\"left\">把从贯标位置到字尾的字母变成大写</td>\n</tr>\n</tbody></table>\n<h1 id=\"剪切-x2F-粘贴文本\"><a href=\"#剪切-x2F-粘贴文本\" class=\"headerlink\" title=\"剪切&#x2F;粘贴文本\"></a>剪切&#x2F;粘贴文本</h1><p>剪切&#x2F;粘贴文本的一些快捷键:</p>\n<table>\n<thead>\n<tr>\n<th align=\"right\">按键</th>\n<th align=\"left\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"right\">ctrl-k</td>\n<td align=\"left\">剪切从光标到行尾的文本</td>\n</tr>\n<tr>\n<td align=\"right\">ctrl-u</td>\n<td align=\"left\">剪切从光标到行首的文本</td>\n</tr>\n<tr>\n<td align=\"right\">alt-d</td>\n<td align=\"left\">剪切从光标到词尾的文本</td>\n</tr>\n<tr>\n<td align=\"right\">alt-backspace</td>\n<td align=\"left\">剪切从光标到词头的文本, 如果光标在词头, 剪切前一个词</td>\n</tr>\n<tr>\n<td align=\"right\">ctrl-y</td>\n<td align=\"left\">将剪切板中的文本粘贴到光标位置</td>\n</tr>\n</tbody></table>\n<h1 id=\"自动补全\"><a href=\"#自动补全\" class=\"headerlink\" title=\"自动补全\"></a>自动补全</h1><p>自动补全的快捷键:</p>\n<table>\n<thead>\n<tr>\n<th align=\"right\">按键</th>\n<th align=\"left\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"right\">alt-?</td>\n<td align=\"left\">相当于按两下tab, 显示所有可能匹配的列表</td>\n</tr>\n<tr>\n<td align=\"right\">alt-*</td>\n<td align=\"left\">插入所有自动补全</td>\n</tr>\n</tbody></table>\n<h1 id=\"历史命令\"><a href=\"#历史命令\" class=\"headerlink\" title=\"历史命令\"></a>历史命令</h1><p>使用以下命令来查看最后执行的500条命令:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">history | less</span><br></pre></td></tr></table></figure>\n\n<p>使用以下命令来过滤历史命令:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">history | grep /usr/bin</span><br></pre></td></tr></table></figure>\n\n<p>显示的命令会将包含<code>/usr/bin</code>的命令显示出来, 包含她的行号。<br>然后可以根据行号来执行该条命令:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!88</span><br></pre></td></tr></table></figure>\n\n<p>该命令执行了第八十八行命令。</p>\n<h2 id=\"增量搜索历史命令\"><a href=\"#增量搜索历史命令\" class=\"headerlink\" title=\"增量搜索历史命令\"></a>增量搜索历史命令</h2><ol>\n<li><code>ctrl-r</code> 开启增量搜索模式</li>\n<li>接着输入需要搜索的字</li>\n<li>按 <code>Enter</code> 直接执行搜索到的命令, 或者按 <code>ctrl-j</code> 复制到命令行中</li>\n</ol>\n<p>搜索历史命令的快捷键:</p>\n<table>\n<thead>\n<tr>\n<th align=\"right\">按键</th>\n<th align=\"left\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"right\">ctrl-p</td>\n<td align=\"left\">移动到上一个历史条目, 类似于上箭头按键</td>\n</tr>\n<tr>\n<td align=\"right\">ctrl-n</td>\n<td align=\"left\">移动到下一个历史条目, 类似于下箭头按键</td>\n</tr>\n<tr>\n<td align=\"right\">alt-&lt;</td>\n<td align=\"left\">移动到历史列表的开头</td>\n</tr>\n<tr>\n<td align=\"right\">alt-&gt;</td>\n<td align=\"left\">移动到历史列表的结尾, 即当前命令行</td>\n</tr>\n<tr>\n<td align=\"right\">ctrl-r</td>\n<td align=\"left\">反向增量搜索</td>\n</tr>\n<tr>\n<td align=\"right\">alt-p</td>\n<td align=\"left\">反向搜索(非增量搜索, 输入搜索的字符串, 按Enter来执行搜索)</td>\n</tr>\n<tr>\n<td align=\"right\">alt-n</td>\n<td align=\"left\">向前搜索(非增量)</td>\n</tr>\n<tr>\n<td align=\"right\">ctrl-o</td>\n<td align=\"left\">执行历史列表中的当前项, 并移到下一个</td>\n</tr>\n</tbody></table>\n<p>历史命令的展开:</p>\n<table>\n<thead>\n<tr>\n<th align=\"right\">按键</th>\n<th align=\"left\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"right\">!!</td>\n<td align=\"left\">重复最后一次执行的命令</td>\n</tr>\n<tr>\n<td align=\"right\">!number</td>\n<td align=\"left\">执行历史列表中第number行的命令</td>\n</tr>\n<tr>\n<td align=\"right\">!string</td>\n<td align=\"left\">执行历史列表中以string开头的命令</td>\n</tr>\n<tr>\n<td align=\"right\">!?string</td>\n<td align=\"left\">执行历史列表中包含string的命令</td>\n</tr>\n</tbody></table>\n<h1 id=\"记录整个shell会话的命令\"><a href=\"#记录整个shell会话的命令\" class=\"headerlink\" title=\"记录整个shell会话的命令\"></a>记录整个shell会话的命令</h1><p>使用以下命令来存储本次shell中执行的所有命令:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">script [file]</span><br></pre></td></tr></table></figure>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<p><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-1Day.html\">第一天的笔记-基本的命令和使用方法</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-2Day.html\">第二天的笔记-操作文件</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-3Day.html\">第三天的笔记-查阅命令文档并创建命令别名</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-4Day.html\">第四天的笔记-重定向标准输入和输出以及处理查询结果</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-5Day.html\">第五天的笔记-命令的展开</a></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>今天学习了关于命令行中的一些快捷键的操作以及使用历史命令来减少敲击键盘的次数。</p>","more":"<h1 id=\"移动光标\"><a href=\"#移动光标\" class=\"headerlink\" title=\"移动光标\"></a>移动光标</h1><p>bash使用的是一个名为Readline的库, 在命令行编辑的时候可以使用一些快捷键来进行移动光标。</p>\n<table>\n<thead>\n<tr>\n<th align=\"right\">按键</th>\n<th align=\"left\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"right\">ctrl-a</td>\n<td align=\"left\">移动光标到行首</td>\n</tr>\n<tr>\n<td align=\"right\">ctrl-e</td>\n<td align=\"left\">移动光标到行尾</td>\n</tr>\n<tr>\n<td align=\"right\">ctrl-f</td>\n<td align=\"left\">光标前移一个字符</td>\n</tr>\n<tr>\n<td align=\"right\">ctrl-b</td>\n<td align=\"left\">光标后移一个字符</td>\n</tr>\n<tr>\n<td align=\"right\">alt-f</td>\n<td align=\"left\">光标前移一个字</td>\n</tr>\n<tr>\n<td align=\"right\">alt-b</td>\n<td align=\"left\">光标后移一个字</td>\n</tr>\n<tr>\n<td align=\"right\">ctrl-l</td>\n<td align=\"left\">清空屏幕</td>\n</tr>\n</tbody></table>\n<h1 id=\"修改文本\"><a href=\"#修改文本\" class=\"headerlink\" title=\"修改文本\"></a>修改文本</h1><p>在命令行中修改文本</p>\n<table>\n<thead>\n<tr>\n<th align=\"right\">按键</th>\n<th align=\"left\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"right\">ctrl-d</td>\n<td align=\"left\">删除光标位置的字符</td>\n</tr>\n<tr>\n<td align=\"right\">ctrl-t</td>\n<td align=\"left\">光标位置的字符和前面的字符换位置</td>\n</tr>\n<tr>\n<td align=\"right\">alt-t</td>\n<td align=\"left\">光标位置的字和前面的字换位置</td>\n</tr>\n<tr>\n<td align=\"right\">alt-l</td>\n<td align=\"left\">把从光标位置到字尾的字母变成小写</td>\n</tr>\n<tr>\n<td align=\"right\">alt-u</td>\n<td align=\"left\">把从贯标位置到字尾的字母变成大写</td>\n</tr>\n</tbody></table>\n<h1 id=\"剪切-x2F-粘贴文本\"><a href=\"#剪切-x2F-粘贴文本\" class=\"headerlink\" title=\"剪切&#x2F;粘贴文本\"></a>剪切&#x2F;粘贴文本</h1><p>剪切&#x2F;粘贴文本的一些快捷键:</p>\n<table>\n<thead>\n<tr>\n<th align=\"right\">按键</th>\n<th align=\"left\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"right\">ctrl-k</td>\n<td align=\"left\">剪切从光标到行尾的文本</td>\n</tr>\n<tr>\n<td align=\"right\">ctrl-u</td>\n<td align=\"left\">剪切从光标到行首的文本</td>\n</tr>\n<tr>\n<td align=\"right\">alt-d</td>\n<td align=\"left\">剪切从光标到词尾的文本</td>\n</tr>\n<tr>\n<td align=\"right\">alt-backspace</td>\n<td align=\"left\">剪切从光标到词头的文本, 如果光标在词头, 剪切前一个词</td>\n</tr>\n<tr>\n<td align=\"right\">ctrl-y</td>\n<td align=\"left\">将剪切板中的文本粘贴到光标位置</td>\n</tr>\n</tbody></table>\n<h1 id=\"自动补全\"><a href=\"#自动补全\" class=\"headerlink\" title=\"自动补全\"></a>自动补全</h1><p>自动补全的快捷键:</p>\n<table>\n<thead>\n<tr>\n<th align=\"right\">按键</th>\n<th align=\"left\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"right\">alt-?</td>\n<td align=\"left\">相当于按两下tab, 显示所有可能匹配的列表</td>\n</tr>\n<tr>\n<td align=\"right\">alt-*</td>\n<td align=\"left\">插入所有自动补全</td>\n</tr>\n</tbody></table>\n<h1 id=\"历史命令\"><a href=\"#历史命令\" class=\"headerlink\" title=\"历史命令\"></a>历史命令</h1><p>使用以下命令来查看最后执行的500条命令:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">history | less</span><br></pre></td></tr></table></figure>\n\n<p>使用以下命令来过滤历史命令:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">history | grep /usr/bin</span><br></pre></td></tr></table></figure>\n\n<p>显示的命令会将包含<code>/usr/bin</code>的命令显示出来, 包含她的行号。<br>然后可以根据行号来执行该条命令:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!88</span><br></pre></td></tr></table></figure>\n\n<p>该命令执行了第八十八行命令。</p>\n<h2 id=\"增量搜索历史命令\"><a href=\"#增量搜索历史命令\" class=\"headerlink\" title=\"增量搜索历史命令\"></a>增量搜索历史命令</h2><ol>\n<li><code>ctrl-r</code> 开启增量搜索模式</li>\n<li>接着输入需要搜索的字</li>\n<li>按 <code>Enter</code> 直接执行搜索到的命令, 或者按 <code>ctrl-j</code> 复制到命令行中</li>\n</ol>\n<p>搜索历史命令的快捷键:</p>\n<table>\n<thead>\n<tr>\n<th align=\"right\">按键</th>\n<th align=\"left\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"right\">ctrl-p</td>\n<td align=\"left\">移动到上一个历史条目, 类似于上箭头按键</td>\n</tr>\n<tr>\n<td align=\"right\">ctrl-n</td>\n<td align=\"left\">移动到下一个历史条目, 类似于下箭头按键</td>\n</tr>\n<tr>\n<td align=\"right\">alt-&lt;</td>\n<td align=\"left\">移动到历史列表的开头</td>\n</tr>\n<tr>\n<td align=\"right\">alt-&gt;</td>\n<td align=\"left\">移动到历史列表的结尾, 即当前命令行</td>\n</tr>\n<tr>\n<td align=\"right\">ctrl-r</td>\n<td align=\"left\">反向增量搜索</td>\n</tr>\n<tr>\n<td align=\"right\">alt-p</td>\n<td align=\"left\">反向搜索(非增量搜索, 输入搜索的字符串, 按Enter来执行搜索)</td>\n</tr>\n<tr>\n<td align=\"right\">alt-n</td>\n<td align=\"left\">向前搜索(非增量)</td>\n</tr>\n<tr>\n<td align=\"right\">ctrl-o</td>\n<td align=\"left\">执行历史列表中的当前项, 并移到下一个</td>\n</tr>\n</tbody></table>\n<p>历史命令的展开:</p>\n<table>\n<thead>\n<tr>\n<th align=\"right\">按键</th>\n<th align=\"left\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"right\">!!</td>\n<td align=\"left\">重复最后一次执行的命令</td>\n</tr>\n<tr>\n<td align=\"right\">!number</td>\n<td align=\"left\">执行历史列表中第number行的命令</td>\n</tr>\n<tr>\n<td align=\"right\">!string</td>\n<td align=\"left\">执行历史列表中以string开头的命令</td>\n</tr>\n<tr>\n<td align=\"right\">!?string</td>\n<td align=\"left\">执行历史列表中包含string的命令</td>\n</tr>\n</tbody></table>\n<h1 id=\"记录整个shell会话的命令\"><a href=\"#记录整个shell会话的命令\" class=\"headerlink\" title=\"记录整个shell会话的命令\"></a>记录整个shell会话的命令</h1><p>使用以下命令来存储本次shell中执行的所有命令:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">script [file]</span><br></pre></td></tr></table></figure>"},{"title":"快乐的Linux命令行笔记-文件权限","date":"2019-01-29T17:03:17.000Z","_content":"\n[第一天的笔记-基本的命令和使用方法](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-1Day.html)\n[第二天的笔记-操作文件](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-2Day.html)\n[第三天的笔记-查阅命令文档并创建命令别名](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-3Day.html)\n[第四天的笔记-重定向标准输入和输出以及处理查询结果](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-4Day.html)\n[第五天的笔记-命令的展开](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-5Day.html)\n[第六天的笔记-快捷键](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-6Day.html)\n\n# 总结\n今天学习了文件权限的意义, 如何修改文件权限, 修改掩码值以及如何添加用户和用户组。\n<!--more-->\n# 身份信息\n\n使用以下命令来查看关于当前登陆用户的身份信息:\n\n```shell\nid\n```\n\n结果:\n```shell\nuid=1000(littleboy) gid=1000(littleboy) groups=1000(littleboy),10(wheel) context=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023\n```\n\n不同的系统的输出看起来不一样。\n\n所有的用户和用户组被定义在 `/etc/passwd` 和 `etc/group` 这两个文件中。\n\n# 文件读写权限\n\n使用\n```shell\nls -l\n```\n来显示文件的权限,结果有可能是这样的:\n\n```shell\n-rw-rw-r--. 1 littleboy littleboy 0 Jan 29 13:04 foo.txt\n```\n\n结果中的第一个字符表示文件的类型, 还有以下其他的类型:\n\n| 属性 | 文件类型 |\n| --: | :-- |\n| - | 一个普通文件 |\n| d | 一个目录 |\n| l | 一个符号链接, 所有的符号链接的剩余的属性总是 `rwxrwxrwx`, 真正的属性需要查看源文件\n| c | 一个字符设备文件, 表示按照字节流来处理数据的设备, 比如终端机或者调制解调器 |\n| b | 一个块设备文件, 表示按照数据块处理数据的设备, 比如一个硬盘或者一个CD-ROM盘 |\n\n\n剩下的属性代表着文件读写的权限:\n\n| Owner | Group | World |\n| -----: | :---: | :---- |\n| rwx | rwx | rwx |\n\n\n权限属性:\n\n| 属性 | 文件 | 目录|\n| --: | :--: | :-- |\n| r | 允许读取文件内容 | 允许列出目录中的文件,前提是目录中设置了x属性 |\n| w | 允许写入内容或截断文件, 但是不允许对文件执行重命名或删除, 重命名或删除是由目录的属性决定的 | 允许在目录下新建, 删除或重命名文件, 前提是目录中设置了x属性 |\n| x | 允许将文件作为程序来执行, 使用脚本语言编写的文件必须设为可读才能被执行 | 允许进入目录(cd) |\n\n# 更改文件或目录权限\n\n使用chmod命令来更改文件权限\n\n| 八进制 | 二进制 | 文件权限 |\n| -----: | :---: | :------ |\n| 0 | 000 | --- |\n| 1 | 001 | --x |\n| 2 | 010 | -w- |\n| 3 | 011 | -wx |\n| 4 | 100 | r-- |\n| 5 | 101 | r-x |\n| 6 | 110 | rw- |\n| 7 | 111 | rwx |\n\n将一个文件的权限修改为只有拥有者可读可写:\n```shell\nchmod 600 foo.txt\n```\n## 符号表示法\n\n使用符号来修改文件权限\n\n| 缩写 | 意义 |\n| --: | :-- |\n| u | \"user\"的缩写 |\n| g | \"group\"的缩写 |\n| o | \"other\"的缩写 |\n| a | \"all\"的缩写 |\n\n> 这里other代表拥有者和拥有者的用户组之外的其他人。\n\n如果想指定拥有者对该文件的权限是可读可写, 那么可以这样: \n\n```shell\nchmod u+r+x foo.txt\n```\n\n如果想指定所有人对该文件的权限, 可以直接这样写:\n\n```shell\nchmod +r+x foo.txt\n```\n\n下面这行命令代表赋予用户组和其他人读写的权限, 如果已经有该权限, 则移除\n\n```shell\nchmod go=rw foo.txt\n```\n\n## 修改默认权限\n\n使用 `umask` 命令修改默认权限(掩码值), 比如:\n\n```shell\numask 0022\n> foo.txt\nls -l\n```\n\n此时, foo.txt的权限为`rw-r-r`。\n`umask`使用八进制表示权限\n0022表示`000 000 010 010`, 出现1的位置, 删除原来的权限, 0则保留。\n\n# 更改身份\n\n## su命令\n\n可以指定用户运行一个shell\n\n```shell\nsu -\n```\n如果不指定用户名, 则默认是超级用户, 输入好超级用户的密码之后就可以以超级用户身份下运行shell了, 退出输入`exit`\n\n也可以只使用超级用户身份运行一行命令:\n```shell\nsu -c 'command'\n```\n\n## sudo命令\n\nsudo和su命令的差异:\n\n1. 管理员可以配置sudo命令\n2. sudo命令需要的密码是当前用户的密码, 而su命令是管理员的密码\n\n# 更改文件所有者和用户组\n\n语法:\n\n```shell\nchown [ower][:[group]] file\n```\n\n| 参数 | 结果 |\n| --: | :-- |\n| bob | 更改文件拥有者为bob |\n| bob:users | 更改文件拥有者为bob, 文件用户组为users |\n| :admins | 文件用户组更改为admins, 拥有者不变 |\n| bob: | 文件拥有者为bob, 用户组改为bob所在的用户组 |\n\nchgrp\n\n> 在旧版的unix系统中, chown不能更改用户组所有权, 可以使用chgrp命令来更改用户组所有权\n\n# 添加一个用户\n\n```shell\nmkdir /home/bill\nadduser -d /home/bill bill\npasswd bill\n# 或者\nuseradd bill\npasswd bill\n```\n\n添加一个名为bill的用户并为bill设置密码\n\n# 添加一个用户组\n\n```shell\ngroupadd test\n```\n\n添加一个名为test用户组\n\n# 将已有的用户放到其他用户组\n\n```shell\nuseradd -G [groupname] [username]\n```\n","source":"_posts/note/read_note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-7Day.md","raw":"---\ntitle: 快乐的Linux命令行笔记-文件权限\ndate: 2019-01-30 01:03:17\ncategories:\n- 笔记\n- 读书笔记\n- 快乐的Linux命令行\ntags:\n- 笔记\n- 快乐的Linux命令行\n- linux\n---\n\n[第一天的笔记-基本的命令和使用方法](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-1Day.html)\n[第二天的笔记-操作文件](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-2Day.html)\n[第三天的笔记-查阅命令文档并创建命令别名](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-3Day.html)\n[第四天的笔记-重定向标准输入和输出以及处理查询结果](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-4Day.html)\n[第五天的笔记-命令的展开](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-5Day.html)\n[第六天的笔记-快捷键](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-6Day.html)\n\n# 总结\n今天学习了文件权限的意义, 如何修改文件权限, 修改掩码值以及如何添加用户和用户组。\n<!--more-->\n# 身份信息\n\n使用以下命令来查看关于当前登陆用户的身份信息:\n\n```shell\nid\n```\n\n结果:\n```shell\nuid=1000(littleboy) gid=1000(littleboy) groups=1000(littleboy),10(wheel) context=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023\n```\n\n不同的系统的输出看起来不一样。\n\n所有的用户和用户组被定义在 `/etc/passwd` 和 `etc/group` 这两个文件中。\n\n# 文件读写权限\n\n使用\n```shell\nls -l\n```\n来显示文件的权限,结果有可能是这样的:\n\n```shell\n-rw-rw-r--. 1 littleboy littleboy 0 Jan 29 13:04 foo.txt\n```\n\n结果中的第一个字符表示文件的类型, 还有以下其他的类型:\n\n| 属性 | 文件类型 |\n| --: | :-- |\n| - | 一个普通文件 |\n| d | 一个目录 |\n| l | 一个符号链接, 所有的符号链接的剩余的属性总是 `rwxrwxrwx`, 真正的属性需要查看源文件\n| c | 一个字符设备文件, 表示按照字节流来处理数据的设备, 比如终端机或者调制解调器 |\n| b | 一个块设备文件, 表示按照数据块处理数据的设备, 比如一个硬盘或者一个CD-ROM盘 |\n\n\n剩下的属性代表着文件读写的权限:\n\n| Owner | Group | World |\n| -----: | :---: | :---- |\n| rwx | rwx | rwx |\n\n\n权限属性:\n\n| 属性 | 文件 | 目录|\n| --: | :--: | :-- |\n| r | 允许读取文件内容 | 允许列出目录中的文件,前提是目录中设置了x属性 |\n| w | 允许写入内容或截断文件, 但是不允许对文件执行重命名或删除, 重命名或删除是由目录的属性决定的 | 允许在目录下新建, 删除或重命名文件, 前提是目录中设置了x属性 |\n| x | 允许将文件作为程序来执行, 使用脚本语言编写的文件必须设为可读才能被执行 | 允许进入目录(cd) |\n\n# 更改文件或目录权限\n\n使用chmod命令来更改文件权限\n\n| 八进制 | 二进制 | 文件权限 |\n| -----: | :---: | :------ |\n| 0 | 000 | --- |\n| 1 | 001 | --x |\n| 2 | 010 | -w- |\n| 3 | 011 | -wx |\n| 4 | 100 | r-- |\n| 5 | 101 | r-x |\n| 6 | 110 | rw- |\n| 7 | 111 | rwx |\n\n将一个文件的权限修改为只有拥有者可读可写:\n```shell\nchmod 600 foo.txt\n```\n## 符号表示法\n\n使用符号来修改文件权限\n\n| 缩写 | 意义 |\n| --: | :-- |\n| u | \"user\"的缩写 |\n| g | \"group\"的缩写 |\n| o | \"other\"的缩写 |\n| a | \"all\"的缩写 |\n\n> 这里other代表拥有者和拥有者的用户组之外的其他人。\n\n如果想指定拥有者对该文件的权限是可读可写, 那么可以这样: \n\n```shell\nchmod u+r+x foo.txt\n```\n\n如果想指定所有人对该文件的权限, 可以直接这样写:\n\n```shell\nchmod +r+x foo.txt\n```\n\n下面这行命令代表赋予用户组和其他人读写的权限, 如果已经有该权限, 则移除\n\n```shell\nchmod go=rw foo.txt\n```\n\n## 修改默认权限\n\n使用 `umask` 命令修改默认权限(掩码值), 比如:\n\n```shell\numask 0022\n> foo.txt\nls -l\n```\n\n此时, foo.txt的权限为`rw-r-r`。\n`umask`使用八进制表示权限\n0022表示`000 000 010 010`, 出现1的位置, 删除原来的权限, 0则保留。\n\n# 更改身份\n\n## su命令\n\n可以指定用户运行一个shell\n\n```shell\nsu -\n```\n如果不指定用户名, 则默认是超级用户, 输入好超级用户的密码之后就可以以超级用户身份下运行shell了, 退出输入`exit`\n\n也可以只使用超级用户身份运行一行命令:\n```shell\nsu -c 'command'\n```\n\n## sudo命令\n\nsudo和su命令的差异:\n\n1. 管理员可以配置sudo命令\n2. sudo命令需要的密码是当前用户的密码, 而su命令是管理员的密码\n\n# 更改文件所有者和用户组\n\n语法:\n\n```shell\nchown [ower][:[group]] file\n```\n\n| 参数 | 结果 |\n| --: | :-- |\n| bob | 更改文件拥有者为bob |\n| bob:users | 更改文件拥有者为bob, 文件用户组为users |\n| :admins | 文件用户组更改为admins, 拥有者不变 |\n| bob: | 文件拥有者为bob, 用户组改为bob所在的用户组 |\n\nchgrp\n\n> 在旧版的unix系统中, chown不能更改用户组所有权, 可以使用chgrp命令来更改用户组所有权\n\n# 添加一个用户\n\n```shell\nmkdir /home/bill\nadduser -d /home/bill bill\npasswd bill\n# 或者\nuseradd bill\npasswd bill\n```\n\n添加一个名为bill的用户并为bill设置密码\n\n# 添加一个用户组\n\n```shell\ngroupadd test\n```\n\n添加一个名为test用户组\n\n# 将已有的用户放到其他用户组\n\n```shell\nuseradd -G [groupname] [username]\n```\n","slug":"note/read_note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-7Day","published":1,"updated":"2022-10-07T13:03:12.017Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejxu009k3vsbb3hy2h1s","content":"<p><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-1Day.html\">第一天的笔记-基本的命令和使用方法</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-2Day.html\">第二天的笔记-操作文件</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-3Day.html\">第三天的笔记-查阅命令文档并创建命令别名</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-4Day.html\">第四天的笔记-重定向标准输入和输出以及处理查询结果</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-5Day.html\">第五天的笔记-命令的展开</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-6Day.html\">第六天的笔记-快捷键</a></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>今天学习了文件权限的意义, 如何修改文件权限, 修改掩码值以及如何添加用户和用户组。</p>\n<span id=\"more\"></span>\n<h1 id=\"身份信息\"><a href=\"#身份信息\" class=\"headerlink\" title=\"身份信息\"></a>身份信息</h1><p>使用以下命令来查看关于当前登陆用户的身份信息:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id</span><br></pre></td></tr></table></figure>\n\n<p>结果:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uid=1000(littleboy) gid=1000(littleboy) groups=1000(littleboy),10(wheel) context=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023</span><br></pre></td></tr></table></figure>\n\n<p>不同的系统的输出看起来不一样。</p>\n<p>所有的用户和用户组被定义在 <code>/etc/passwd</code> 和 <code>etc/group</code> 这两个文件中。</p>\n<h1 id=\"文件读写权限\"><a href=\"#文件读写权限\" class=\"headerlink\" title=\"文件读写权限\"></a>文件读写权限</h1><p>使用</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls -l</span><br></pre></td></tr></table></figure>\n<p>来显示文件的权限,结果有可能是这样的:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-rw-rw-r--. 1 littleboy littleboy 0 Jan 29 13:04 foo.txt</span><br></pre></td></tr></table></figure>\n\n<p>结果中的第一个字符表示文件的类型, 还有以下其他的类型:</p>\n<table>\n<thead>\n<tr>\n<th align=\"right\">属性</th>\n<th align=\"left\">文件类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"right\">-</td>\n<td align=\"left\">一个普通文件</td>\n</tr>\n<tr>\n<td align=\"right\">d</td>\n<td align=\"left\">一个目录</td>\n</tr>\n<tr>\n<td align=\"right\">l</td>\n<td align=\"left\">一个符号链接, 所有的符号链接的剩余的属性总是 <code>rwxrwxrwx</code>, 真正的属性需要查看源文件</td>\n</tr>\n<tr>\n<td align=\"right\">c</td>\n<td align=\"left\">一个字符设备文件, 表示按照字节流来处理数据的设备, 比如终端机或者调制解调器</td>\n</tr>\n<tr>\n<td align=\"right\">b</td>\n<td align=\"left\">一个块设备文件, 表示按照数据块处理数据的设备, 比如一个硬盘或者一个CD-ROM盘</td>\n</tr>\n</tbody></table>\n<p>剩下的属性代表着文件读写的权限:</p>\n<table>\n<thead>\n<tr>\n<th align=\"right\">Owner</th>\n<th align=\"center\">Group</th>\n<th align=\"left\">World</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"right\">rwx</td>\n<td align=\"center\">rwx</td>\n<td align=\"left\">rwx</td>\n</tr>\n</tbody></table>\n<p>权限属性:</p>\n<table>\n<thead>\n<tr>\n<th align=\"right\">属性</th>\n<th align=\"center\">文件</th>\n<th align=\"left\">目录</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"right\">r</td>\n<td align=\"center\">允许读取文件内容</td>\n<td align=\"left\">允许列出目录中的文件,前提是目录中设置了x属性</td>\n</tr>\n<tr>\n<td align=\"right\">w</td>\n<td align=\"center\">允许写入内容或截断文件, 但是不允许对文件执行重命名或删除, 重命名或删除是由目录的属性决定的</td>\n<td align=\"left\">允许在目录下新建, 删除或重命名文件, 前提是目录中设置了x属性</td>\n</tr>\n<tr>\n<td align=\"right\">x</td>\n<td align=\"center\">允许将文件作为程序来执行, 使用脚本语言编写的文件必须设为可读才能被执行</td>\n<td align=\"left\">允许进入目录(cd)</td>\n</tr>\n</tbody></table>\n<h1 id=\"更改文件或目录权限\"><a href=\"#更改文件或目录权限\" class=\"headerlink\" title=\"更改文件或目录权限\"></a>更改文件或目录权限</h1><p>使用chmod命令来更改文件权限</p>\n<table>\n<thead>\n<tr>\n<th align=\"right\">八进制</th>\n<th align=\"center\">二进制</th>\n<th align=\"left\">文件权限</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"right\">0</td>\n<td align=\"center\">000</td>\n<td align=\"left\">—</td>\n</tr>\n<tr>\n<td align=\"right\">1</td>\n<td align=\"center\">001</td>\n<td align=\"left\">–x</td>\n</tr>\n<tr>\n<td align=\"right\">2</td>\n<td align=\"center\">010</td>\n<td align=\"left\">-w-</td>\n</tr>\n<tr>\n<td align=\"right\">3</td>\n<td align=\"center\">011</td>\n<td align=\"left\">-wx</td>\n</tr>\n<tr>\n<td align=\"right\">4</td>\n<td align=\"center\">100</td>\n<td align=\"left\">r–</td>\n</tr>\n<tr>\n<td align=\"right\">5</td>\n<td align=\"center\">101</td>\n<td align=\"left\">r-x</td>\n</tr>\n<tr>\n<td align=\"right\">6</td>\n<td align=\"center\">110</td>\n<td align=\"left\">rw-</td>\n</tr>\n<tr>\n<td align=\"right\">7</td>\n<td align=\"center\">111</td>\n<td align=\"left\">rwx</td>\n</tr>\n</tbody></table>\n<p>将一个文件的权限修改为只有拥有者可读可写:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod 600 foo.txt</span><br></pre></td></tr></table></figure>\n<h2 id=\"符号表示法\"><a href=\"#符号表示法\" class=\"headerlink\" title=\"符号表示法\"></a>符号表示法</h2><p>使用符号来修改文件权限</p>\n<table>\n<thead>\n<tr>\n<th align=\"right\">缩写</th>\n<th align=\"left\">意义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"right\">u</td>\n<td align=\"left\">“user”的缩写</td>\n</tr>\n<tr>\n<td align=\"right\">g</td>\n<td align=\"left\">“group”的缩写</td>\n</tr>\n<tr>\n<td align=\"right\">o</td>\n<td align=\"left\">“other”的缩写</td>\n</tr>\n<tr>\n<td align=\"right\">a</td>\n<td align=\"left\">“all”的缩写</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>这里other代表拥有者和拥有者的用户组之外的其他人。</p>\n</blockquote>\n<p>如果想指定拥有者对该文件的权限是可读可写, 那么可以这样: </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod u+r+x foo.txt</span><br></pre></td></tr></table></figure>\n\n<p>如果想指定所有人对该文件的权限, 可以直接这样写:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +r+x foo.txt</span><br></pre></td></tr></table></figure>\n\n<p>下面这行命令代表赋予用户组和其他人读写的权限, 如果已经有该权限, 则移除</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod go=rw foo.txt</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"修改默认权限\"><a href=\"#修改默认权限\" class=\"headerlink\" title=\"修改默认权限\"></a>修改默认权限</h2><p>使用 <code>umask</code> 命令修改默认权限(掩码值), 比如:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">umask 0022</span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> foo.txt</span></span><br><span class=\"line\">ls -l</span><br></pre></td></tr></table></figure>\n\n<p>此时, foo.txt的权限为<code>rw-r-r</code>。<br><code>umask</code>使用八进制表示权限<br>0022表示<code>000 000 010 010</code>, 出现1的位置, 删除原来的权限, 0则保留。</p>\n<h1 id=\"更改身份\"><a href=\"#更改身份\" class=\"headerlink\" title=\"更改身份\"></a>更改身份</h1><h2 id=\"su命令\"><a href=\"#su命令\" class=\"headerlink\" title=\"su命令\"></a>su命令</h2><p>可以指定用户运行一个shell</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su -</span><br></pre></td></tr></table></figure>\n<p>如果不指定用户名, 则默认是超级用户, 输入好超级用户的密码之后就可以以超级用户身份下运行shell了, 退出输入<code>exit</code></p>\n<p>也可以只使用超级用户身份运行一行命令:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su -c &#x27;command&#x27;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"sudo命令\"><a href=\"#sudo命令\" class=\"headerlink\" title=\"sudo命令\"></a>sudo命令</h2><p>sudo和su命令的差异:</p>\n<ol>\n<li>管理员可以配置sudo命令</li>\n<li>sudo命令需要的密码是当前用户的密码, 而su命令是管理员的密码</li>\n</ol>\n<h1 id=\"更改文件所有者和用户组\"><a href=\"#更改文件所有者和用户组\" class=\"headerlink\" title=\"更改文件所有者和用户组\"></a>更改文件所有者和用户组</h1><p>语法:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chown [ower][:[group]] file</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"right\">参数</th>\n<th align=\"left\">结果</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"right\">bob</td>\n<td align=\"left\">更改文件拥有者为bob</td>\n</tr>\n<tr>\n<td align=\"right\">bob:users</td>\n<td align=\"left\">更改文件拥有者为bob, 文件用户组为users</td>\n</tr>\n<tr>\n<td align=\"right\">:admins</td>\n<td align=\"left\">文件用户组更改为admins, 拥有者不变</td>\n</tr>\n<tr>\n<td align=\"right\">bob:</td>\n<td align=\"left\">文件拥有者为bob, 用户组改为bob所在的用户组</td>\n</tr>\n</tbody></table>\n<p>chgrp</p>\n<blockquote>\n<p>在旧版的unix系统中, chown不能更改用户组所有权, 可以使用chgrp命令来更改用户组所有权</p>\n</blockquote>\n<h1 id=\"添加一个用户\"><a href=\"#添加一个用户\" class=\"headerlink\" title=\"添加一个用户\"></a>添加一个用户</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /home/bill</span><br><span class=\"line\">adduser -d /home/bill bill</span><br><span class=\"line\">passwd bill</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 或者</span></span><br><span class=\"line\">useradd bill</span><br><span class=\"line\">passwd bill</span><br></pre></td></tr></table></figure>\n\n<p>添加一个名为bill的用户并为bill设置密码</p>\n<h1 id=\"添加一个用户组\"><a href=\"#添加一个用户组\" class=\"headerlink\" title=\"添加一个用户组\"></a>添加一个用户组</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">groupadd test</span><br></pre></td></tr></table></figure>\n\n<p>添加一个名为test用户组</p>\n<h1 id=\"将已有的用户放到其他用户组\"><a href=\"#将已有的用户放到其他用户组\" class=\"headerlink\" title=\"将已有的用户放到其他用户组\"></a>将已有的用户放到其他用户组</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useradd -G [groupname] [username]</span><br></pre></td></tr></table></figure>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<p><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-1Day.html\">第一天的笔记-基本的命令和使用方法</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-2Day.html\">第二天的笔记-操作文件</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-3Day.html\">第三天的笔记-查阅命令文档并创建命令别名</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-4Day.html\">第四天的笔记-重定向标准输入和输出以及处理查询结果</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-5Day.html\">第五天的笔记-命令的展开</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-6Day.html\">第六天的笔记-快捷键</a></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>今天学习了文件权限的意义, 如何修改文件权限, 修改掩码值以及如何添加用户和用户组。</p>","more":"<h1 id=\"身份信息\"><a href=\"#身份信息\" class=\"headerlink\" title=\"身份信息\"></a>身份信息</h1><p>使用以下命令来查看关于当前登陆用户的身份信息:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id</span><br></pre></td></tr></table></figure>\n\n<p>结果:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uid=1000(littleboy) gid=1000(littleboy) groups=1000(littleboy),10(wheel) context=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023</span><br></pre></td></tr></table></figure>\n\n<p>不同的系统的输出看起来不一样。</p>\n<p>所有的用户和用户组被定义在 <code>/etc/passwd</code> 和 <code>etc/group</code> 这两个文件中。</p>\n<h1 id=\"文件读写权限\"><a href=\"#文件读写权限\" class=\"headerlink\" title=\"文件读写权限\"></a>文件读写权限</h1><p>使用</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls -l</span><br></pre></td></tr></table></figure>\n<p>来显示文件的权限,结果有可能是这样的:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-rw-rw-r--. 1 littleboy littleboy 0 Jan 29 13:04 foo.txt</span><br></pre></td></tr></table></figure>\n\n<p>结果中的第一个字符表示文件的类型, 还有以下其他的类型:</p>\n<table>\n<thead>\n<tr>\n<th align=\"right\">属性</th>\n<th align=\"left\">文件类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"right\">-</td>\n<td align=\"left\">一个普通文件</td>\n</tr>\n<tr>\n<td align=\"right\">d</td>\n<td align=\"left\">一个目录</td>\n</tr>\n<tr>\n<td align=\"right\">l</td>\n<td align=\"left\">一个符号链接, 所有的符号链接的剩余的属性总是 <code>rwxrwxrwx</code>, 真正的属性需要查看源文件</td>\n</tr>\n<tr>\n<td align=\"right\">c</td>\n<td align=\"left\">一个字符设备文件, 表示按照字节流来处理数据的设备, 比如终端机或者调制解调器</td>\n</tr>\n<tr>\n<td align=\"right\">b</td>\n<td align=\"left\">一个块设备文件, 表示按照数据块处理数据的设备, 比如一个硬盘或者一个CD-ROM盘</td>\n</tr>\n</tbody></table>\n<p>剩下的属性代表着文件读写的权限:</p>\n<table>\n<thead>\n<tr>\n<th align=\"right\">Owner</th>\n<th align=\"center\">Group</th>\n<th align=\"left\">World</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"right\">rwx</td>\n<td align=\"center\">rwx</td>\n<td align=\"left\">rwx</td>\n</tr>\n</tbody></table>\n<p>权限属性:</p>\n<table>\n<thead>\n<tr>\n<th align=\"right\">属性</th>\n<th align=\"center\">文件</th>\n<th align=\"left\">目录</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"right\">r</td>\n<td align=\"center\">允许读取文件内容</td>\n<td align=\"left\">允许列出目录中的文件,前提是目录中设置了x属性</td>\n</tr>\n<tr>\n<td align=\"right\">w</td>\n<td align=\"center\">允许写入内容或截断文件, 但是不允许对文件执行重命名或删除, 重命名或删除是由目录的属性决定的</td>\n<td align=\"left\">允许在目录下新建, 删除或重命名文件, 前提是目录中设置了x属性</td>\n</tr>\n<tr>\n<td align=\"right\">x</td>\n<td align=\"center\">允许将文件作为程序来执行, 使用脚本语言编写的文件必须设为可读才能被执行</td>\n<td align=\"left\">允许进入目录(cd)</td>\n</tr>\n</tbody></table>\n<h1 id=\"更改文件或目录权限\"><a href=\"#更改文件或目录权限\" class=\"headerlink\" title=\"更改文件或目录权限\"></a>更改文件或目录权限</h1><p>使用chmod命令来更改文件权限</p>\n<table>\n<thead>\n<tr>\n<th align=\"right\">八进制</th>\n<th align=\"center\">二进制</th>\n<th align=\"left\">文件权限</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"right\">0</td>\n<td align=\"center\">000</td>\n<td align=\"left\">—</td>\n</tr>\n<tr>\n<td align=\"right\">1</td>\n<td align=\"center\">001</td>\n<td align=\"left\">–x</td>\n</tr>\n<tr>\n<td align=\"right\">2</td>\n<td align=\"center\">010</td>\n<td align=\"left\">-w-</td>\n</tr>\n<tr>\n<td align=\"right\">3</td>\n<td align=\"center\">011</td>\n<td align=\"left\">-wx</td>\n</tr>\n<tr>\n<td align=\"right\">4</td>\n<td align=\"center\">100</td>\n<td align=\"left\">r–</td>\n</tr>\n<tr>\n<td align=\"right\">5</td>\n<td align=\"center\">101</td>\n<td align=\"left\">r-x</td>\n</tr>\n<tr>\n<td align=\"right\">6</td>\n<td align=\"center\">110</td>\n<td align=\"left\">rw-</td>\n</tr>\n<tr>\n<td align=\"right\">7</td>\n<td align=\"center\">111</td>\n<td align=\"left\">rwx</td>\n</tr>\n</tbody></table>\n<p>将一个文件的权限修改为只有拥有者可读可写:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod 600 foo.txt</span><br></pre></td></tr></table></figure>\n<h2 id=\"符号表示法\"><a href=\"#符号表示法\" class=\"headerlink\" title=\"符号表示法\"></a>符号表示法</h2><p>使用符号来修改文件权限</p>\n<table>\n<thead>\n<tr>\n<th align=\"right\">缩写</th>\n<th align=\"left\">意义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"right\">u</td>\n<td align=\"left\">“user”的缩写</td>\n</tr>\n<tr>\n<td align=\"right\">g</td>\n<td align=\"left\">“group”的缩写</td>\n</tr>\n<tr>\n<td align=\"right\">o</td>\n<td align=\"left\">“other”的缩写</td>\n</tr>\n<tr>\n<td align=\"right\">a</td>\n<td align=\"left\">“all”的缩写</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>这里other代表拥有者和拥有者的用户组之外的其他人。</p>\n</blockquote>\n<p>如果想指定拥有者对该文件的权限是可读可写, 那么可以这样: </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod u+r+x foo.txt</span><br></pre></td></tr></table></figure>\n\n<p>如果想指定所有人对该文件的权限, 可以直接这样写:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +r+x foo.txt</span><br></pre></td></tr></table></figure>\n\n<p>下面这行命令代表赋予用户组和其他人读写的权限, 如果已经有该权限, 则移除</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod go=rw foo.txt</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"修改默认权限\"><a href=\"#修改默认权限\" class=\"headerlink\" title=\"修改默认权限\"></a>修改默认权限</h2><p>使用 <code>umask</code> 命令修改默认权限(掩码值), 比如:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">umask 0022</span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> foo.txt</span></span><br><span class=\"line\">ls -l</span><br></pre></td></tr></table></figure>\n\n<p>此时, foo.txt的权限为<code>rw-r-r</code>。<br><code>umask</code>使用八进制表示权限<br>0022表示<code>000 000 010 010</code>, 出现1的位置, 删除原来的权限, 0则保留。</p>\n<h1 id=\"更改身份\"><a href=\"#更改身份\" class=\"headerlink\" title=\"更改身份\"></a>更改身份</h1><h2 id=\"su命令\"><a href=\"#su命令\" class=\"headerlink\" title=\"su命令\"></a>su命令</h2><p>可以指定用户运行一个shell</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su -</span><br></pre></td></tr></table></figure>\n<p>如果不指定用户名, 则默认是超级用户, 输入好超级用户的密码之后就可以以超级用户身份下运行shell了, 退出输入<code>exit</code></p>\n<p>也可以只使用超级用户身份运行一行命令:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su -c &#x27;command&#x27;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"sudo命令\"><a href=\"#sudo命令\" class=\"headerlink\" title=\"sudo命令\"></a>sudo命令</h2><p>sudo和su命令的差异:</p>\n<ol>\n<li>管理员可以配置sudo命令</li>\n<li>sudo命令需要的密码是当前用户的密码, 而su命令是管理员的密码</li>\n</ol>\n<h1 id=\"更改文件所有者和用户组\"><a href=\"#更改文件所有者和用户组\" class=\"headerlink\" title=\"更改文件所有者和用户组\"></a>更改文件所有者和用户组</h1><p>语法:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chown [ower][:[group]] file</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"right\">参数</th>\n<th align=\"left\">结果</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"right\">bob</td>\n<td align=\"left\">更改文件拥有者为bob</td>\n</tr>\n<tr>\n<td align=\"right\">bob:users</td>\n<td align=\"left\">更改文件拥有者为bob, 文件用户组为users</td>\n</tr>\n<tr>\n<td align=\"right\">:admins</td>\n<td align=\"left\">文件用户组更改为admins, 拥有者不变</td>\n</tr>\n<tr>\n<td align=\"right\">bob:</td>\n<td align=\"left\">文件拥有者为bob, 用户组改为bob所在的用户组</td>\n</tr>\n</tbody></table>\n<p>chgrp</p>\n<blockquote>\n<p>在旧版的unix系统中, chown不能更改用户组所有权, 可以使用chgrp命令来更改用户组所有权</p>\n</blockquote>\n<h1 id=\"添加一个用户\"><a href=\"#添加一个用户\" class=\"headerlink\" title=\"添加一个用户\"></a>添加一个用户</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /home/bill</span><br><span class=\"line\">adduser -d /home/bill bill</span><br><span class=\"line\">passwd bill</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 或者</span></span><br><span class=\"line\">useradd bill</span><br><span class=\"line\">passwd bill</span><br></pre></td></tr></table></figure>\n\n<p>添加一个名为bill的用户并为bill设置密码</p>\n<h1 id=\"添加一个用户组\"><a href=\"#添加一个用户组\" class=\"headerlink\" title=\"添加一个用户组\"></a>添加一个用户组</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">groupadd test</span><br></pre></td></tr></table></figure>\n\n<p>添加一个名为test用户组</p>\n<h1 id=\"将已有的用户放到其他用户组\"><a href=\"#将已有的用户放到其他用户组\" class=\"headerlink\" title=\"将已有的用户放到其他用户组\"></a>将已有的用户放到其他用户组</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useradd -G [groupname] [username]</span><br></pre></td></tr></table></figure>"},{"title":"快乐的Linux命令行笔记-进程","date":"2019-02-06T14:11:47.000Z","_content":"\n[第一天的笔记-基本的命令和使用方法](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-1Day.html)\n[第二天的笔记-操作文件](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-2Day.html)\n[第三天的笔记-查阅命令文档并创建命令别名](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-3Day.html)\n[第四天的笔记-重定向标准输入和输出以及处理查询结果](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-4Day.html)\n[第五天的笔记-命令的展开](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-5Day.html)\n[第六天的笔记-快捷键](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-6Day.html)\n[第七天的笔记-文件权限](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-7Day.html)\n\n# 总结\n今天学习了如何查看进程, 将进程切换前后台, 向进程发送信号等。\n<!--more-->\n# 进程\n\n查看对于当前终端的所有进程:\n\n```shell\nps\n```\n\n查看所有进程, 不管是不是属于当前终端:\n\n```shell\nps x\n```\n\n在查看所有进程时, `STAT` 那一列表示了进程状态。\n\n| 状态 | 含义 |\n| ---: | :--- |\n| R | 运行中, 进程正在运行或准备运行 |\n| S | 正在睡眠, 没有运行, 在等待着一个事件 |\n| D | 不可中断睡眠, 进程正在等待者I/O, 比如说一个磁盘驱动器的I/O |\n| T | 已停止, 已经指示进程停止运行 |\n| Z | 一个死进程, 已经被终止的子进程, 但它的父进程还没有清空它 |\n| < | 一个高优先级进程, 可能会给它更多重要的资源 |\n| N | 低优先级进程, 当其他高优先级进程被服务了之后, 才会得到处理 |\n\n显示属于每个用户的进程信息\n\n```shell\nps aux\n```\n\nBSD风格的ps命令列标题\n\n| 标题 | 含义 |\n| ---: | :--- |\n| USER | 用户ID.进程的所有者 |\n| %CPU | 以百分比表示的CPU使用率 |\n| %MEM | 以百分比表示的内存使用率 |\n| VSZ | 虚拟内存大小 |\n| RSS | 进程占用的物理内存的大小, 以千字节为单位 |\n| START | 进程启动的时间, 若它的值超过24小时, 则用天表示 |\n\n## 动态查看进程\n\n```shell\ntop\n```\n\n下表是对该命令运行结果的说明:\n\n| 行号 | 字段 | 意义 |\n| :--: | :-- | :--- |\n| 1 | top | 程序名 |\n| | 22:43:00 | 当前时间 |\n| | up 1:10 | 系统运行时间 |\n| | 1 user | 有一个用户登录系统 |\n| | load average: | 指等待运行的进程数目, 处于可以运行状态并共享CPU的进程个数, 第一个是最后60秒的平均值, 第二个是前5分钟的平均值, 最后一个是前15分钟的平均值。若平均值低于1.0, 则表示计算机不忙碌 |\n| 2 | tasks: | 总结了进程数目和进程的状态 |\n| 3 | %Cpu(s) | 描述了CPU正在进行的活动的特性 |\n| | 0.0%us | 0.0%的CPU被用于用户进程, 这意味着进程在内核之外 |\n| | 0.1%sy | 0.1%的CPU时间被用于系统进程 |\n| | 0.0%ni | 0.0%的CPU时间被用于低优先级(nice)的进程 |\n| | 100.0%id | 100%的CPU时间是空闲的 |\n| | 0.0%wa | 0.0%的CPU时间来等待I/O |\n| 4 | Mem: | 展示物理内存的使用情况 |\n| 5 | Swap: | 展示交换分区(虚拟内存)的使用情况。|\n\n在运行top程序时, h 显示程序的帮助屏幕, q 退出top程序\n\n# 后台执行一个进程\n\n```shell\nxlogo &\n```\n\n在需要执行的命令后加`&`, shell会返回执行的进程的任务序号和id\n\n```shell\njobs\n```\n\n该命令会列出从终端启动的任务列表, 包含了该任务的序号, 运行状态和id。\n\n# 后台执行的进程切换到前台\n\n```shell\nfg %1\n```\n\n一个百分号跟随需要切换的任务的序号, 该程序会由后台切换到前台, 可以使用`ctrl-c`终止。\n\n# 停止一个进程\n\n使用ctrl-z停止一个进程, 使用fg命令恢复该进程, 或者使用bg命令将该进程切换到后台运行。\n\n# 杀死一个进程\n\n```shell\nkill [pid]\n# 或者\nkill [jobspec] # 任务序号\n```\n\n使用kill命令或者特定的按键组合之后, 程序会收到操作系统发送给程序的一个信号, 信号是操作系统和程序之间的几种通信方式中的一种。程序可以对于监听的信号触发事件, 比如当程序接收到终止信号时, 可以做一些保存的工作。\n\n## 通过kill命令给进程发送信号\n\n如果命令没有指定信号, 那么默认情况下, 发送TERM(终止)信号。\n\n> kill的一些常用信号\n\n| 编号 | 名字 | 含义 |\n| :--: | :--: | :-- |\n| 1 | HUP | \t挂起（Hangup）。这是美好往昔的残留部分，那时候终端机通过电话线和调制解调器连接到 远端的计算机。这个信号被用来告诉程序，控制的终端机已经“挂断”。 通过关闭一个终端会话，可以展示这个信号的作用。在当前终端运行的前台程序将会收到这个信号并终止。<br>许多守护进程也使用这个信号，来重新初始化。这意味着，当一个守护进程收到这个信号后， 这个进程会重新启动，并且重新读取它的配置文件。Apache 网络服务器守护进程就是一个例子。 |\n| 2 | INT | \t中断。实现和 Ctrl-c 一样的功能，由终端发送。通常，它会终止一个程序。 |\n| 9 | KILL | \t杀死。这个信号很特别。尽管程序可能会选择不同的方式来处理发送给它的 信号，其中也包含忽略信号，但是 KILL 信号从不被发送到目标程序。而是内核立即终止 这个进程。当一个进程以这种方式终止的时候，它没有机会去做些“清理”工作，或者是保存工作。 因为这个原因，把 KILL 信号看作最后一招，当其它终止信号失败后，再使用它。 |\n| 15 | TREM | 终止。这是 kill 命令发送的默认信号。如果程序仍然“活着”，可以接受信号，那么 这个它会终止。 |\n| 18 | CONT | 继续。在一个停止信号后，这个信号会恢复进程的运行。 |\n| 19 | STOP | 停止。这个信号导致进程停止运行，而不是终止。像 KILL 信号，它不被 发送到目标进程，因此它不能被忽略。 |\n\n> 其他的系统常用信号\n\n| 编号 | 名字 | 含义 |\n| :--: | :--: | :-- |\n| 3 | QUIT | 退出 |\n| 11 | SEGV | 段错误(Segmentation Violation)。如果一个程序非法使用内存，就会发送这个信号。也就是说， 程序试图写入内存，而这个内存空间是不允许此程序写入的。 |\n| 20 | TSTP | 终端停止(Terminal Stop)。当按下 Ctrl-z 组合键后，终端发送这个信号。不像 STOP 信号， TSTP 信号由目标进程接收，且可能被忽略。 |\n| 28 | WINCH | \t改变窗口大小(Window Change)。当改变窗口大小时，系统会发送这个信号。 一些程序，像 top 和 less 程序会响应这个信号，按照新窗口的尺寸，刷新显示的内容。 |\n\n使用 `kill -l` 得到完整的信号列表。\n\n## 通过kill命令给多个进程发送信号\n\n语法:\n```shell\nkillall [-u user] [-signal] name\n```\n\n## 其他和进程相关的命令\n\n| 命令名 | 命令描述 |\n| :----: | :----- |\n|pstree | 输出一个树型结构的进程列表(processtree)，这个列表展示了进程间父/子关系。|\n| vmstat | 输出一个系统资源使用快照，包括内存，交换分区和磁盘 I/O。 为了看到连续的显示结果，则在命令名后加上更新操作延时的时间（以秒为单位）。例如，“vmstat 5”。 ，按下 Ctrl-c 组合键, 终止输出。 |\n| xload |\t一个图形界面程序，可以画出系统负载随时间变化的图形。 |\n| tload | terminal load与 xload 程序相似，但是在终端中画出图形。使用 Ctrl-c，来终止输出。 |\n","source":"_posts/note/read_note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-8Day.md","raw":"---\ntitle: 快乐的Linux命令行笔记-进程\ndate: 2019-02-06 22:11:47\ncategories:\n- 笔记\n- 读书笔记\n- 快乐的Linux命令行\ntags:\n- 笔记\n- 快乐的Linux命令行\n- linux\n---\n\n[第一天的笔记-基本的命令和使用方法](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-1Day.html)\n[第二天的笔记-操作文件](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-2Day.html)\n[第三天的笔记-查阅命令文档并创建命令别名](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-3Day.html)\n[第四天的笔记-重定向标准输入和输出以及处理查询结果](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-4Day.html)\n[第五天的笔记-命令的展开](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-5Day.html)\n[第六天的笔记-快捷键](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-6Day.html)\n[第七天的笔记-文件权限](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-7Day.html)\n\n# 总结\n今天学习了如何查看进程, 将进程切换前后台, 向进程发送信号等。\n<!--more-->\n# 进程\n\n查看对于当前终端的所有进程:\n\n```shell\nps\n```\n\n查看所有进程, 不管是不是属于当前终端:\n\n```shell\nps x\n```\n\n在查看所有进程时, `STAT` 那一列表示了进程状态。\n\n| 状态 | 含义 |\n| ---: | :--- |\n| R | 运行中, 进程正在运行或准备运行 |\n| S | 正在睡眠, 没有运行, 在等待着一个事件 |\n| D | 不可中断睡眠, 进程正在等待者I/O, 比如说一个磁盘驱动器的I/O |\n| T | 已停止, 已经指示进程停止运行 |\n| Z | 一个死进程, 已经被终止的子进程, 但它的父进程还没有清空它 |\n| < | 一个高优先级进程, 可能会给它更多重要的资源 |\n| N | 低优先级进程, 当其他高优先级进程被服务了之后, 才会得到处理 |\n\n显示属于每个用户的进程信息\n\n```shell\nps aux\n```\n\nBSD风格的ps命令列标题\n\n| 标题 | 含义 |\n| ---: | :--- |\n| USER | 用户ID.进程的所有者 |\n| %CPU | 以百分比表示的CPU使用率 |\n| %MEM | 以百分比表示的内存使用率 |\n| VSZ | 虚拟内存大小 |\n| RSS | 进程占用的物理内存的大小, 以千字节为单位 |\n| START | 进程启动的时间, 若它的值超过24小时, 则用天表示 |\n\n## 动态查看进程\n\n```shell\ntop\n```\n\n下表是对该命令运行结果的说明:\n\n| 行号 | 字段 | 意义 |\n| :--: | :-- | :--- |\n| 1 | top | 程序名 |\n| | 22:43:00 | 当前时间 |\n| | up 1:10 | 系统运行时间 |\n| | 1 user | 有一个用户登录系统 |\n| | load average: | 指等待运行的进程数目, 处于可以运行状态并共享CPU的进程个数, 第一个是最后60秒的平均值, 第二个是前5分钟的平均值, 最后一个是前15分钟的平均值。若平均值低于1.0, 则表示计算机不忙碌 |\n| 2 | tasks: | 总结了进程数目和进程的状态 |\n| 3 | %Cpu(s) | 描述了CPU正在进行的活动的特性 |\n| | 0.0%us | 0.0%的CPU被用于用户进程, 这意味着进程在内核之外 |\n| | 0.1%sy | 0.1%的CPU时间被用于系统进程 |\n| | 0.0%ni | 0.0%的CPU时间被用于低优先级(nice)的进程 |\n| | 100.0%id | 100%的CPU时间是空闲的 |\n| | 0.0%wa | 0.0%的CPU时间来等待I/O |\n| 4 | Mem: | 展示物理内存的使用情况 |\n| 5 | Swap: | 展示交换分区(虚拟内存)的使用情况。|\n\n在运行top程序时, h 显示程序的帮助屏幕, q 退出top程序\n\n# 后台执行一个进程\n\n```shell\nxlogo &\n```\n\n在需要执行的命令后加`&`, shell会返回执行的进程的任务序号和id\n\n```shell\njobs\n```\n\n该命令会列出从终端启动的任务列表, 包含了该任务的序号, 运行状态和id。\n\n# 后台执行的进程切换到前台\n\n```shell\nfg %1\n```\n\n一个百分号跟随需要切换的任务的序号, 该程序会由后台切换到前台, 可以使用`ctrl-c`终止。\n\n# 停止一个进程\n\n使用ctrl-z停止一个进程, 使用fg命令恢复该进程, 或者使用bg命令将该进程切换到后台运行。\n\n# 杀死一个进程\n\n```shell\nkill [pid]\n# 或者\nkill [jobspec] # 任务序号\n```\n\n使用kill命令或者特定的按键组合之后, 程序会收到操作系统发送给程序的一个信号, 信号是操作系统和程序之间的几种通信方式中的一种。程序可以对于监听的信号触发事件, 比如当程序接收到终止信号时, 可以做一些保存的工作。\n\n## 通过kill命令给进程发送信号\n\n如果命令没有指定信号, 那么默认情况下, 发送TERM(终止)信号。\n\n> kill的一些常用信号\n\n| 编号 | 名字 | 含义 |\n| :--: | :--: | :-- |\n| 1 | HUP | \t挂起（Hangup）。这是美好往昔的残留部分，那时候终端机通过电话线和调制解调器连接到 远端的计算机。这个信号被用来告诉程序，控制的终端机已经“挂断”。 通过关闭一个终端会话，可以展示这个信号的作用。在当前终端运行的前台程序将会收到这个信号并终止。<br>许多守护进程也使用这个信号，来重新初始化。这意味着，当一个守护进程收到这个信号后， 这个进程会重新启动，并且重新读取它的配置文件。Apache 网络服务器守护进程就是一个例子。 |\n| 2 | INT | \t中断。实现和 Ctrl-c 一样的功能，由终端发送。通常，它会终止一个程序。 |\n| 9 | KILL | \t杀死。这个信号很特别。尽管程序可能会选择不同的方式来处理发送给它的 信号，其中也包含忽略信号，但是 KILL 信号从不被发送到目标程序。而是内核立即终止 这个进程。当一个进程以这种方式终止的时候，它没有机会去做些“清理”工作，或者是保存工作。 因为这个原因，把 KILL 信号看作最后一招，当其它终止信号失败后，再使用它。 |\n| 15 | TREM | 终止。这是 kill 命令发送的默认信号。如果程序仍然“活着”，可以接受信号，那么 这个它会终止。 |\n| 18 | CONT | 继续。在一个停止信号后，这个信号会恢复进程的运行。 |\n| 19 | STOP | 停止。这个信号导致进程停止运行，而不是终止。像 KILL 信号，它不被 发送到目标进程，因此它不能被忽略。 |\n\n> 其他的系统常用信号\n\n| 编号 | 名字 | 含义 |\n| :--: | :--: | :-- |\n| 3 | QUIT | 退出 |\n| 11 | SEGV | 段错误(Segmentation Violation)。如果一个程序非法使用内存，就会发送这个信号。也就是说， 程序试图写入内存，而这个内存空间是不允许此程序写入的。 |\n| 20 | TSTP | 终端停止(Terminal Stop)。当按下 Ctrl-z 组合键后，终端发送这个信号。不像 STOP 信号， TSTP 信号由目标进程接收，且可能被忽略。 |\n| 28 | WINCH | \t改变窗口大小(Window Change)。当改变窗口大小时，系统会发送这个信号。 一些程序，像 top 和 less 程序会响应这个信号，按照新窗口的尺寸，刷新显示的内容。 |\n\n使用 `kill -l` 得到完整的信号列表。\n\n## 通过kill命令给多个进程发送信号\n\n语法:\n```shell\nkillall [-u user] [-signal] name\n```\n\n## 其他和进程相关的命令\n\n| 命令名 | 命令描述 |\n| :----: | :----- |\n|pstree | 输出一个树型结构的进程列表(processtree)，这个列表展示了进程间父/子关系。|\n| vmstat | 输出一个系统资源使用快照，包括内存，交换分区和磁盘 I/O。 为了看到连续的显示结果，则在命令名后加上更新操作延时的时间（以秒为单位）。例如，“vmstat 5”。 ，按下 Ctrl-c 组合键, 终止输出。 |\n| xload |\t一个图形界面程序，可以画出系统负载随时间变化的图形。 |\n| tload | terminal load与 xload 程序相似，但是在终端中画出图形。使用 Ctrl-c，来终止输出。 |\n","slug":"note/read_note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-8Day","published":1,"updated":"2022-10-07T13:03:21.929Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejxz009o3vsb686d0jek","content":"<p><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-1Day.html\">第一天的笔记-基本的命令和使用方法</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-2Day.html\">第二天的笔记-操作文件</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-3Day.html\">第三天的笔记-查阅命令文档并创建命令别名</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-4Day.html\">第四天的笔记-重定向标准输入和输出以及处理查询结果</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-5Day.html\">第五天的笔记-命令的展开</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-6Day.html\">第六天的笔记-快捷键</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-7Day.html\">第七天的笔记-文件权限</a></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>今天学习了如何查看进程, 将进程切换前后台, 向进程发送信号等。</p>\n<span id=\"more\"></span>\n<h1 id=\"进程\"><a href=\"#进程\" class=\"headerlink\" title=\"进程\"></a>进程</h1><p>查看对于当前终端的所有进程:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps</span><br></pre></td></tr></table></figure>\n\n<p>查看所有进程, 不管是不是属于当前终端:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps x</span><br></pre></td></tr></table></figure>\n\n<p>在查看所有进程时, <code>STAT</code> 那一列表示了进程状态。</p>\n<table>\n<thead>\n<tr>\n<th align=\"right\">状态</th>\n<th align=\"left\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"right\">R</td>\n<td align=\"left\">运行中, 进程正在运行或准备运行</td>\n</tr>\n<tr>\n<td align=\"right\">S</td>\n<td align=\"left\">正在睡眠, 没有运行, 在等待着一个事件</td>\n</tr>\n<tr>\n<td align=\"right\">D</td>\n<td align=\"left\">不可中断睡眠, 进程正在等待者I&#x2F;O, 比如说一个磁盘驱动器的I&#x2F;O</td>\n</tr>\n<tr>\n<td align=\"right\">T</td>\n<td align=\"left\">已停止, 已经指示进程停止运行</td>\n</tr>\n<tr>\n<td align=\"right\">Z</td>\n<td align=\"left\">一个死进程, 已经被终止的子进程, 但它的父进程还没有清空它</td>\n</tr>\n<tr>\n<td align=\"right\">&lt;</td>\n<td align=\"left\">一个高优先级进程, 可能会给它更多重要的资源</td>\n</tr>\n<tr>\n<td align=\"right\">N</td>\n<td align=\"left\">低优先级进程, 当其他高优先级进程被服务了之后, 才会得到处理</td>\n</tr>\n</tbody></table>\n<p>显示属于每个用户的进程信息</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps aux</span><br></pre></td></tr></table></figure>\n\n<p>BSD风格的ps命令列标题</p>\n<table>\n<thead>\n<tr>\n<th align=\"right\">标题</th>\n<th align=\"left\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"right\">USER</td>\n<td align=\"left\">用户ID.进程的所有者</td>\n</tr>\n<tr>\n<td align=\"right\">%CPU</td>\n<td align=\"left\">以百分比表示的CPU使用率</td>\n</tr>\n<tr>\n<td align=\"right\">%MEM</td>\n<td align=\"left\">以百分比表示的内存使用率</td>\n</tr>\n<tr>\n<td align=\"right\">VSZ</td>\n<td align=\"left\">虚拟内存大小</td>\n</tr>\n<tr>\n<td align=\"right\">RSS</td>\n<td align=\"left\">进程占用的物理内存的大小, 以千字节为单位</td>\n</tr>\n<tr>\n<td align=\"right\">START</td>\n<td align=\"left\">进程启动的时间, 若它的值超过24小时, 则用天表示</td>\n</tr>\n</tbody></table>\n<h2 id=\"动态查看进程\"><a href=\"#动态查看进程\" class=\"headerlink\" title=\"动态查看进程\"></a>动态查看进程</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">top</span><br></pre></td></tr></table></figure>\n\n<p>下表是对该命令运行结果的说明:</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">行号</th>\n<th align=\"left\">字段</th>\n<th align=\"left\">意义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">1</td>\n<td align=\"left\">top</td>\n<td align=\"left\">程序名</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"left\">22:43:00</td>\n<td align=\"left\">当前时间</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"left\">up 1:10</td>\n<td align=\"left\">系统运行时间</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"left\">1 user</td>\n<td align=\"left\">有一个用户登录系统</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"left\">load average:</td>\n<td align=\"left\">指等待运行的进程数目, 处于可以运行状态并共享CPU的进程个数, 第一个是最后60秒的平均值, 第二个是前5分钟的平均值, 最后一个是前15分钟的平均值。若平均值低于1.0, 则表示计算机不忙碌</td>\n</tr>\n<tr>\n<td align=\"center\">2</td>\n<td align=\"left\">tasks:</td>\n<td align=\"left\">总结了进程数目和进程的状态</td>\n</tr>\n<tr>\n<td align=\"center\">3</td>\n<td align=\"left\">%Cpu(s)</td>\n<td align=\"left\">描述了CPU正在进行的活动的特性</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"left\">0.0%us</td>\n<td align=\"left\">0.0%的CPU被用于用户进程, 这意味着进程在内核之外</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"left\">0.1%sy</td>\n<td align=\"left\">0.1%的CPU时间被用于系统进程</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"left\">0.0%ni</td>\n<td align=\"left\">0.0%的CPU时间被用于低优先级(nice)的进程</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"left\">100.0%id</td>\n<td align=\"left\">100%的CPU时间是空闲的</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"left\">0.0%wa</td>\n<td align=\"left\">0.0%的CPU时间来等待I&#x2F;O</td>\n</tr>\n<tr>\n<td align=\"center\">4</td>\n<td align=\"left\">Mem:</td>\n<td align=\"left\">展示物理内存的使用情况</td>\n</tr>\n<tr>\n<td align=\"center\">5</td>\n<td align=\"left\">Swap:</td>\n<td align=\"left\">展示交换分区(虚拟内存)的使用情况。</td>\n</tr>\n</tbody></table>\n<p>在运行top程序时, h 显示程序的帮助屏幕, q 退出top程序</p>\n<h1 id=\"后台执行一个进程\"><a href=\"#后台执行一个进程\" class=\"headerlink\" title=\"后台执行一个进程\"></a>后台执行一个进程</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xlogo &amp;</span><br></pre></td></tr></table></figure>\n\n<p>在需要执行的命令后加<code>&amp;</code>, shell会返回执行的进程的任务序号和id</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jobs</span><br></pre></td></tr></table></figure>\n\n<p>该命令会列出从终端启动的任务列表, 包含了该任务的序号, 运行状态和id。</p>\n<h1 id=\"后台执行的进程切换到前台\"><a href=\"#后台执行的进程切换到前台\" class=\"headerlink\" title=\"后台执行的进程切换到前台\"></a>后台执行的进程切换到前台</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fg %1</span><br></pre></td></tr></table></figure>\n\n<p>一个百分号跟随需要切换的任务的序号, 该程序会由后台切换到前台, 可以使用<code>ctrl-c</code>终止。</p>\n<h1 id=\"停止一个进程\"><a href=\"#停止一个进程\" class=\"headerlink\" title=\"停止一个进程\"></a>停止一个进程</h1><p>使用ctrl-z停止一个进程, 使用fg命令恢复该进程, 或者使用bg命令将该进程切换到后台运行。</p>\n<h1 id=\"杀死一个进程\"><a href=\"#杀死一个进程\" class=\"headerlink\" title=\"杀死一个进程\"></a>杀死一个进程</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kill [pid]</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 或者</span></span><br><span class=\"line\">kill [jobspec] # 任务序号</span><br></pre></td></tr></table></figure>\n\n<p>使用kill命令或者特定的按键组合之后, 程序会收到操作系统发送给程序的一个信号, 信号是操作系统和程序之间的几种通信方式中的一种。程序可以对于监听的信号触发事件, 比如当程序接收到终止信号时, 可以做一些保存的工作。</p>\n<h2 id=\"通过kill命令给进程发送信号\"><a href=\"#通过kill命令给进程发送信号\" class=\"headerlink\" title=\"通过kill命令给进程发送信号\"></a>通过kill命令给进程发送信号</h2><p>如果命令没有指定信号, 那么默认情况下, 发送TERM(终止)信号。</p>\n<blockquote>\n<p>kill的一些常用信号</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"center\">编号</th>\n<th align=\"center\">名字</th>\n<th align=\"left\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">1</td>\n<td align=\"center\">HUP</td>\n<td align=\"left\">挂起（Hangup）。这是美好往昔的残留部分，那时候终端机通过电话线和调制解调器连接到 远端的计算机。这个信号被用来告诉程序，控制的终端机已经“挂断”。 通过关闭一个终端会话，可以展示这个信号的作用。在当前终端运行的前台程序将会收到这个信号并终止。<br>许多守护进程也使用这个信号，来重新初始化。这意味着，当一个守护进程收到这个信号后， 这个进程会重新启动，并且重新读取它的配置文件。Apache 网络服务器守护进程就是一个例子。</td>\n</tr>\n<tr>\n<td align=\"center\">2</td>\n<td align=\"center\">INT</td>\n<td align=\"left\">中断。实现和 Ctrl-c 一样的功能，由终端发送。通常，它会终止一个程序。</td>\n</tr>\n<tr>\n<td align=\"center\">9</td>\n<td align=\"center\">KILL</td>\n<td align=\"left\">杀死。这个信号很特别。尽管程序可能会选择不同的方式来处理发送给它的 信号，其中也包含忽略信号，但是 KILL 信号从不被发送到目标程序。而是内核立即终止 这个进程。当一个进程以这种方式终止的时候，它没有机会去做些“清理”工作，或者是保存工作。 因为这个原因，把 KILL 信号看作最后一招，当其它终止信号失败后，再使用它。</td>\n</tr>\n<tr>\n<td align=\"center\">15</td>\n<td align=\"center\">TREM</td>\n<td align=\"left\">终止。这是 kill 命令发送的默认信号。如果程序仍然“活着”，可以接受信号，那么 这个它会终止。</td>\n</tr>\n<tr>\n<td align=\"center\">18</td>\n<td align=\"center\">CONT</td>\n<td align=\"left\">继续。在一个停止信号后，这个信号会恢复进程的运行。</td>\n</tr>\n<tr>\n<td align=\"center\">19</td>\n<td align=\"center\">STOP</td>\n<td align=\"left\">停止。这个信号导致进程停止运行，而不是终止。像 KILL 信号，它不被 发送到目标进程，因此它不能被忽略。</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>其他的系统常用信号</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"center\">编号</th>\n<th align=\"center\">名字</th>\n<th align=\"left\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">3</td>\n<td align=\"center\">QUIT</td>\n<td align=\"left\">退出</td>\n</tr>\n<tr>\n<td align=\"center\">11</td>\n<td align=\"center\">SEGV</td>\n<td align=\"left\">段错误(Segmentation Violation)。如果一个程序非法使用内存，就会发送这个信号。也就是说， 程序试图写入内存，而这个内存空间是不允许此程序写入的。</td>\n</tr>\n<tr>\n<td align=\"center\">20</td>\n<td align=\"center\">TSTP</td>\n<td align=\"left\">终端停止(Terminal Stop)。当按下 Ctrl-z 组合键后，终端发送这个信号。不像 STOP 信号， TSTP 信号由目标进程接收，且可能被忽略。</td>\n</tr>\n<tr>\n<td align=\"center\">28</td>\n<td align=\"center\">WINCH</td>\n<td align=\"left\">改变窗口大小(Window Change)。当改变窗口大小时，系统会发送这个信号。 一些程序，像 top 和 less 程序会响应这个信号，按照新窗口的尺寸，刷新显示的内容。</td>\n</tr>\n</tbody></table>\n<p>使用 <code>kill -l</code> 得到完整的信号列表。</p>\n<h2 id=\"通过kill命令给多个进程发送信号\"><a href=\"#通过kill命令给多个进程发送信号\" class=\"headerlink\" title=\"通过kill命令给多个进程发送信号\"></a>通过kill命令给多个进程发送信号</h2><p>语法:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">killall [-u user] [-signal] name</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"其他和进程相关的命令\"><a href=\"#其他和进程相关的命令\" class=\"headerlink\" title=\"其他和进程相关的命令\"></a>其他和进程相关的命令</h2><table>\n<thead>\n<tr>\n<th align=\"center\">命令名</th>\n<th align=\"left\">命令描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">pstree</td>\n<td align=\"left\">输出一个树型结构的进程列表(processtree)，这个列表展示了进程间父&#x2F;子关系。</td>\n</tr>\n<tr>\n<td align=\"center\">vmstat</td>\n<td align=\"left\">输出一个系统资源使用快照，包括内存，交换分区和磁盘 I&#x2F;O。 为了看到连续的显示结果，则在命令名后加上更新操作延时的时间（以秒为单位）。例如，“vmstat 5”。 ，按下 Ctrl-c 组合键, 终止输出。</td>\n</tr>\n<tr>\n<td align=\"center\">xload</td>\n<td align=\"left\">一个图形界面程序，可以画出系统负载随时间变化的图形。</td>\n</tr>\n<tr>\n<td align=\"center\">tload</td>\n<td align=\"left\">terminal load与 xload 程序相似，但是在终端中画出图形。使用 Ctrl-c，来终止输出。</td>\n</tr>\n</tbody></table>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<p><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-1Day.html\">第一天的笔记-基本的命令和使用方法</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-2Day.html\">第二天的笔记-操作文件</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-3Day.html\">第三天的笔记-查阅命令文档并创建命令别名</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-4Day.html\">第四天的笔记-重定向标准输入和输出以及处理查询结果</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-5Day.html\">第五天的笔记-命令的展开</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-6Day.html\">第六天的笔记-快捷键</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-7Day.html\">第七天的笔记-文件权限</a></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>今天学习了如何查看进程, 将进程切换前后台, 向进程发送信号等。</p>","more":"<h1 id=\"进程\"><a href=\"#进程\" class=\"headerlink\" title=\"进程\"></a>进程</h1><p>查看对于当前终端的所有进程:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps</span><br></pre></td></tr></table></figure>\n\n<p>查看所有进程, 不管是不是属于当前终端:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps x</span><br></pre></td></tr></table></figure>\n\n<p>在查看所有进程时, <code>STAT</code> 那一列表示了进程状态。</p>\n<table>\n<thead>\n<tr>\n<th align=\"right\">状态</th>\n<th align=\"left\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"right\">R</td>\n<td align=\"left\">运行中, 进程正在运行或准备运行</td>\n</tr>\n<tr>\n<td align=\"right\">S</td>\n<td align=\"left\">正在睡眠, 没有运行, 在等待着一个事件</td>\n</tr>\n<tr>\n<td align=\"right\">D</td>\n<td align=\"left\">不可中断睡眠, 进程正在等待者I&#x2F;O, 比如说一个磁盘驱动器的I&#x2F;O</td>\n</tr>\n<tr>\n<td align=\"right\">T</td>\n<td align=\"left\">已停止, 已经指示进程停止运行</td>\n</tr>\n<tr>\n<td align=\"right\">Z</td>\n<td align=\"left\">一个死进程, 已经被终止的子进程, 但它的父进程还没有清空它</td>\n</tr>\n<tr>\n<td align=\"right\">&lt;</td>\n<td align=\"left\">一个高优先级进程, 可能会给它更多重要的资源</td>\n</tr>\n<tr>\n<td align=\"right\">N</td>\n<td align=\"left\">低优先级进程, 当其他高优先级进程被服务了之后, 才会得到处理</td>\n</tr>\n</tbody></table>\n<p>显示属于每个用户的进程信息</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps aux</span><br></pre></td></tr></table></figure>\n\n<p>BSD风格的ps命令列标题</p>\n<table>\n<thead>\n<tr>\n<th align=\"right\">标题</th>\n<th align=\"left\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"right\">USER</td>\n<td align=\"left\">用户ID.进程的所有者</td>\n</tr>\n<tr>\n<td align=\"right\">%CPU</td>\n<td align=\"left\">以百分比表示的CPU使用率</td>\n</tr>\n<tr>\n<td align=\"right\">%MEM</td>\n<td align=\"left\">以百分比表示的内存使用率</td>\n</tr>\n<tr>\n<td align=\"right\">VSZ</td>\n<td align=\"left\">虚拟内存大小</td>\n</tr>\n<tr>\n<td align=\"right\">RSS</td>\n<td align=\"left\">进程占用的物理内存的大小, 以千字节为单位</td>\n</tr>\n<tr>\n<td align=\"right\">START</td>\n<td align=\"left\">进程启动的时间, 若它的值超过24小时, 则用天表示</td>\n</tr>\n</tbody></table>\n<h2 id=\"动态查看进程\"><a href=\"#动态查看进程\" class=\"headerlink\" title=\"动态查看进程\"></a>动态查看进程</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">top</span><br></pre></td></tr></table></figure>\n\n<p>下表是对该命令运行结果的说明:</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">行号</th>\n<th align=\"left\">字段</th>\n<th align=\"left\">意义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">1</td>\n<td align=\"left\">top</td>\n<td align=\"left\">程序名</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"left\">22:43:00</td>\n<td align=\"left\">当前时间</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"left\">up 1:10</td>\n<td align=\"left\">系统运行时间</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"left\">1 user</td>\n<td align=\"left\">有一个用户登录系统</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"left\">load average:</td>\n<td align=\"left\">指等待运行的进程数目, 处于可以运行状态并共享CPU的进程个数, 第一个是最后60秒的平均值, 第二个是前5分钟的平均值, 最后一个是前15分钟的平均值。若平均值低于1.0, 则表示计算机不忙碌</td>\n</tr>\n<tr>\n<td align=\"center\">2</td>\n<td align=\"left\">tasks:</td>\n<td align=\"left\">总结了进程数目和进程的状态</td>\n</tr>\n<tr>\n<td align=\"center\">3</td>\n<td align=\"left\">%Cpu(s)</td>\n<td align=\"left\">描述了CPU正在进行的活动的特性</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"left\">0.0%us</td>\n<td align=\"left\">0.0%的CPU被用于用户进程, 这意味着进程在内核之外</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"left\">0.1%sy</td>\n<td align=\"left\">0.1%的CPU时间被用于系统进程</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"left\">0.0%ni</td>\n<td align=\"left\">0.0%的CPU时间被用于低优先级(nice)的进程</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"left\">100.0%id</td>\n<td align=\"left\">100%的CPU时间是空闲的</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"left\">0.0%wa</td>\n<td align=\"left\">0.0%的CPU时间来等待I&#x2F;O</td>\n</tr>\n<tr>\n<td align=\"center\">4</td>\n<td align=\"left\">Mem:</td>\n<td align=\"left\">展示物理内存的使用情况</td>\n</tr>\n<tr>\n<td align=\"center\">5</td>\n<td align=\"left\">Swap:</td>\n<td align=\"left\">展示交换分区(虚拟内存)的使用情况。</td>\n</tr>\n</tbody></table>\n<p>在运行top程序时, h 显示程序的帮助屏幕, q 退出top程序</p>\n<h1 id=\"后台执行一个进程\"><a href=\"#后台执行一个进程\" class=\"headerlink\" title=\"后台执行一个进程\"></a>后台执行一个进程</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xlogo &amp;</span><br></pre></td></tr></table></figure>\n\n<p>在需要执行的命令后加<code>&amp;</code>, shell会返回执行的进程的任务序号和id</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jobs</span><br></pre></td></tr></table></figure>\n\n<p>该命令会列出从终端启动的任务列表, 包含了该任务的序号, 运行状态和id。</p>\n<h1 id=\"后台执行的进程切换到前台\"><a href=\"#后台执行的进程切换到前台\" class=\"headerlink\" title=\"后台执行的进程切换到前台\"></a>后台执行的进程切换到前台</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fg %1</span><br></pre></td></tr></table></figure>\n\n<p>一个百分号跟随需要切换的任务的序号, 该程序会由后台切换到前台, 可以使用<code>ctrl-c</code>终止。</p>\n<h1 id=\"停止一个进程\"><a href=\"#停止一个进程\" class=\"headerlink\" title=\"停止一个进程\"></a>停止一个进程</h1><p>使用ctrl-z停止一个进程, 使用fg命令恢复该进程, 或者使用bg命令将该进程切换到后台运行。</p>\n<h1 id=\"杀死一个进程\"><a href=\"#杀死一个进程\" class=\"headerlink\" title=\"杀死一个进程\"></a>杀死一个进程</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kill [pid]</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 或者</span></span><br><span class=\"line\">kill [jobspec] # 任务序号</span><br></pre></td></tr></table></figure>\n\n<p>使用kill命令或者特定的按键组合之后, 程序会收到操作系统发送给程序的一个信号, 信号是操作系统和程序之间的几种通信方式中的一种。程序可以对于监听的信号触发事件, 比如当程序接收到终止信号时, 可以做一些保存的工作。</p>\n<h2 id=\"通过kill命令给进程发送信号\"><a href=\"#通过kill命令给进程发送信号\" class=\"headerlink\" title=\"通过kill命令给进程发送信号\"></a>通过kill命令给进程发送信号</h2><p>如果命令没有指定信号, 那么默认情况下, 发送TERM(终止)信号。</p>\n<blockquote>\n<p>kill的一些常用信号</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"center\">编号</th>\n<th align=\"center\">名字</th>\n<th align=\"left\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">1</td>\n<td align=\"center\">HUP</td>\n<td align=\"left\">挂起（Hangup）。这是美好往昔的残留部分，那时候终端机通过电话线和调制解调器连接到 远端的计算机。这个信号被用来告诉程序，控制的终端机已经“挂断”。 通过关闭一个终端会话，可以展示这个信号的作用。在当前终端运行的前台程序将会收到这个信号并终止。<br>许多守护进程也使用这个信号，来重新初始化。这意味着，当一个守护进程收到这个信号后， 这个进程会重新启动，并且重新读取它的配置文件。Apache 网络服务器守护进程就是一个例子。</td>\n</tr>\n<tr>\n<td align=\"center\">2</td>\n<td align=\"center\">INT</td>\n<td align=\"left\">中断。实现和 Ctrl-c 一样的功能，由终端发送。通常，它会终止一个程序。</td>\n</tr>\n<tr>\n<td align=\"center\">9</td>\n<td align=\"center\">KILL</td>\n<td align=\"left\">杀死。这个信号很特别。尽管程序可能会选择不同的方式来处理发送给它的 信号，其中也包含忽略信号，但是 KILL 信号从不被发送到目标程序。而是内核立即终止 这个进程。当一个进程以这种方式终止的时候，它没有机会去做些“清理”工作，或者是保存工作。 因为这个原因，把 KILL 信号看作最后一招，当其它终止信号失败后，再使用它。</td>\n</tr>\n<tr>\n<td align=\"center\">15</td>\n<td align=\"center\">TREM</td>\n<td align=\"left\">终止。这是 kill 命令发送的默认信号。如果程序仍然“活着”，可以接受信号，那么 这个它会终止。</td>\n</tr>\n<tr>\n<td align=\"center\">18</td>\n<td align=\"center\">CONT</td>\n<td align=\"left\">继续。在一个停止信号后，这个信号会恢复进程的运行。</td>\n</tr>\n<tr>\n<td align=\"center\">19</td>\n<td align=\"center\">STOP</td>\n<td align=\"left\">停止。这个信号导致进程停止运行，而不是终止。像 KILL 信号，它不被 发送到目标进程，因此它不能被忽略。</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>其他的系统常用信号</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"center\">编号</th>\n<th align=\"center\">名字</th>\n<th align=\"left\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">3</td>\n<td align=\"center\">QUIT</td>\n<td align=\"left\">退出</td>\n</tr>\n<tr>\n<td align=\"center\">11</td>\n<td align=\"center\">SEGV</td>\n<td align=\"left\">段错误(Segmentation Violation)。如果一个程序非法使用内存，就会发送这个信号。也就是说， 程序试图写入内存，而这个内存空间是不允许此程序写入的。</td>\n</tr>\n<tr>\n<td align=\"center\">20</td>\n<td align=\"center\">TSTP</td>\n<td align=\"left\">终端停止(Terminal Stop)。当按下 Ctrl-z 组合键后，终端发送这个信号。不像 STOP 信号， TSTP 信号由目标进程接收，且可能被忽略。</td>\n</tr>\n<tr>\n<td align=\"center\">28</td>\n<td align=\"center\">WINCH</td>\n<td align=\"left\">改变窗口大小(Window Change)。当改变窗口大小时，系统会发送这个信号。 一些程序，像 top 和 less 程序会响应这个信号，按照新窗口的尺寸，刷新显示的内容。</td>\n</tr>\n</tbody></table>\n<p>使用 <code>kill -l</code> 得到完整的信号列表。</p>\n<h2 id=\"通过kill命令给多个进程发送信号\"><a href=\"#通过kill命令给多个进程发送信号\" class=\"headerlink\" title=\"通过kill命令给多个进程发送信号\"></a>通过kill命令给多个进程发送信号</h2><p>语法:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">killall [-u user] [-signal] name</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"其他和进程相关的命令\"><a href=\"#其他和进程相关的命令\" class=\"headerlink\" title=\"其他和进程相关的命令\"></a>其他和进程相关的命令</h2><table>\n<thead>\n<tr>\n<th align=\"center\">命令名</th>\n<th align=\"left\">命令描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">pstree</td>\n<td align=\"left\">输出一个树型结构的进程列表(processtree)，这个列表展示了进程间父&#x2F;子关系。</td>\n</tr>\n<tr>\n<td align=\"center\">vmstat</td>\n<td align=\"left\">输出一个系统资源使用快照，包括内存，交换分区和磁盘 I&#x2F;O。 为了看到连续的显示结果，则在命令名后加上更新操作延时的时间（以秒为单位）。例如，“vmstat 5”。 ，按下 Ctrl-c 组合键, 终止输出。</td>\n</tr>\n<tr>\n<td align=\"center\">xload</td>\n<td align=\"left\">一个图形界面程序，可以画出系统负载随时间变化的图形。</td>\n</tr>\n<tr>\n<td align=\"center\">tload</td>\n<td align=\"left\">terminal load与 xload 程序相似，但是在终端中画出图形。使用 Ctrl-c，来终止输出。</td>\n</tr>\n</tbody></table>"},{"title":"快乐的Linux命令行笔记-修改shell环境","date":"2019-02-07T15:39:25.000Z","_content":"\n[第一天的笔记-基本的命令和使用方法](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-1Day.html)\n[第二天的笔记-操作文件](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-2Day.html)\n[第三天的笔记-查阅命令文档并创建命令别名](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-3Day.html)\n[第四天的笔记-重定向标准输入和输出以及处理查询结果](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-4Day.html)\n[第五天的笔记-命令的展开](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-5Day.html)\n[第六天的笔记-快捷键](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-6Day.html)\n[第七天的笔记-文件权限](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-7Day.html)\n[第八天的笔记-进程](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-8Day.html)\n\n# 总结\n今天学习了如何修改shell环境, 如何添加环境变量。\n<!--more-->\n# 环境变量\n\n使用下列命令来查看环境变量\n\n```shell\nprintenv\n```\n也可以查看单独的某一个环境变量:\n\n```shell\nprintenv UESR\n```\n\n使用下列命令来查看shell变量(和环境变量)\n\n```shell\nset\n```\n\n可以通过`echo`命令l来查看一个变量的内容\n\n```shell\necho $HOME\n```\n\n通过`alias`来查看别名\n\n```shell\nalias\n```\n\n一部分shell变量的含义:\n\n| 变量 | 内容 |\n| :--: | :-- |\n| DISPLAY | \t如果你正在运行图形界面环境，那么这个变量就是你显示器的名字。通常，它是 \":0\"， 意思是由 X 产生的第一个显示器。 |\n| EDITOR | 文本编辑器的名字。 |\n| SHELL | shell程序的名字。 |\n| HOME | 用户的家目录。 |\n| LANG | 定义了字符集以及语言编码方式。 |\n| OLD_PWD | 以前的工作目录。 |\n| PAGER | 页输出程序的名字。这经常设置为/usr/bin/less。 |\n| PATH | 由冒号分开的目录列表，当你输入可执行程序名后，会搜索这个目录列表。|\n| PS1 | Prompt String 1. 这个定义了你的 shell 提示符的内容。随后我们可以看到，这个变量 内容可以全面地定制。 |\n| PWD | 当前工作目录。 |\n| TERM | 终端类型名。类 Unix 的系统支持许多终端协议；这个变量设置你的终端仿真器所用的协议。 |\n| TZ | 指定你所在的时区。大多数类 Unix 的系统按照协调时间时 (UTC) 来维护计算机内部的时钟 ，然后应用一个由这个变量指定的偏差来显示本地时间。 |\n| USER | 你的用户名。 |\n\n## shell启动后读取的配置\n\n* 登录shell会话的启动文件\n\n| 文件 | 内容 |\n| :---: | :-- |\n| /etc/profile | 应用于所有用户的全局配置脚本 |\n| ~/.bash_profile | 用户个人的启动文件, 用来扩展或重写全局脚本中的设置 |\n| ~/.bash_login | 如果文件 ~/.bash_profile 没有找到，bash 会尝试读取这个脚本 |\n| ~/.profile | 如果文件 ~/.bash_profile 或文件 ~/.bash_login 都没有找到，bash 会试图读取这个文件。 这是基于 Debian 发行版的默认设置，比方说 Ubuntu |\n\n* 非登录shell会话的启动文件\n\n| 文件 | 内容 |\n| :--: | :-- |\n| /etc/bash.bashrc | 应用于所有用户的全局配置文件 |\n| ~/.bashrc | 用户个人的启动文件。可以用来扩展或重写全局配置脚本中的设置 |\n\n> 除了读取以上启动文件之外, 非登录shell会话也会继承他们的父进程环境设置, 通常是一个登录shell\n\n# 修改shell环境\n\n当我们需要定制shell环境时, 可以修改`bash_profile`文件, 对于其他的更改, 可以放到`bashrc`文件中, 而如果需要为系统中所有用户修改默认配置, 则需要更改`/etc/profile`文件。\n\n## 文本编译器\n\n在centOS7系统中, 可以使用`nano`编译器来编译文件, `ctrl-o` 是保存文件, `ctrl-x` 是退出编译器。\n\n```shell\nsource bashrc\n```\n\n重新读取修改之后的文件。\n","source":"_posts/note/read_note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-9Day.md","raw":"---\ntitle: 快乐的Linux命令行笔记-修改shell环境\ndate: 2019-02-07 23:39:25\ncategories:\n- 笔记\n- 读书笔记\n- 快乐的Linux命令行\ntags:\n- 笔记\n- 快乐的Linux命令行\n- linux\n---\n\n[第一天的笔记-基本的命令和使用方法](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-1Day.html)\n[第二天的笔记-操作文件](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-2Day.html)\n[第三天的笔记-查阅命令文档并创建命令别名](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-3Day.html)\n[第四天的笔记-重定向标准输入和输出以及处理查询结果](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-4Day.html)\n[第五天的笔记-命令的展开](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-5Day.html)\n[第六天的笔记-快捷键](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-6Day.html)\n[第七天的笔记-文件权限](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-7Day.html)\n[第八天的笔记-进程](/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-8Day.html)\n\n# 总结\n今天学习了如何修改shell环境, 如何添加环境变量。\n<!--more-->\n# 环境变量\n\n使用下列命令来查看环境变量\n\n```shell\nprintenv\n```\n也可以查看单独的某一个环境变量:\n\n```shell\nprintenv UESR\n```\n\n使用下列命令来查看shell变量(和环境变量)\n\n```shell\nset\n```\n\n可以通过`echo`命令l来查看一个变量的内容\n\n```shell\necho $HOME\n```\n\n通过`alias`来查看别名\n\n```shell\nalias\n```\n\n一部分shell变量的含义:\n\n| 变量 | 内容 |\n| :--: | :-- |\n| DISPLAY | \t如果你正在运行图形界面环境，那么这个变量就是你显示器的名字。通常，它是 \":0\"， 意思是由 X 产生的第一个显示器。 |\n| EDITOR | 文本编辑器的名字。 |\n| SHELL | shell程序的名字。 |\n| HOME | 用户的家目录。 |\n| LANG | 定义了字符集以及语言编码方式。 |\n| OLD_PWD | 以前的工作目录。 |\n| PAGER | 页输出程序的名字。这经常设置为/usr/bin/less。 |\n| PATH | 由冒号分开的目录列表，当你输入可执行程序名后，会搜索这个目录列表。|\n| PS1 | Prompt String 1. 这个定义了你的 shell 提示符的内容。随后我们可以看到，这个变量 内容可以全面地定制。 |\n| PWD | 当前工作目录。 |\n| TERM | 终端类型名。类 Unix 的系统支持许多终端协议；这个变量设置你的终端仿真器所用的协议。 |\n| TZ | 指定你所在的时区。大多数类 Unix 的系统按照协调时间时 (UTC) 来维护计算机内部的时钟 ，然后应用一个由这个变量指定的偏差来显示本地时间。 |\n| USER | 你的用户名。 |\n\n## shell启动后读取的配置\n\n* 登录shell会话的启动文件\n\n| 文件 | 内容 |\n| :---: | :-- |\n| /etc/profile | 应用于所有用户的全局配置脚本 |\n| ~/.bash_profile | 用户个人的启动文件, 用来扩展或重写全局脚本中的设置 |\n| ~/.bash_login | 如果文件 ~/.bash_profile 没有找到，bash 会尝试读取这个脚本 |\n| ~/.profile | 如果文件 ~/.bash_profile 或文件 ~/.bash_login 都没有找到，bash 会试图读取这个文件。 这是基于 Debian 发行版的默认设置，比方说 Ubuntu |\n\n* 非登录shell会话的启动文件\n\n| 文件 | 内容 |\n| :--: | :-- |\n| /etc/bash.bashrc | 应用于所有用户的全局配置文件 |\n| ~/.bashrc | 用户个人的启动文件。可以用来扩展或重写全局配置脚本中的设置 |\n\n> 除了读取以上启动文件之外, 非登录shell会话也会继承他们的父进程环境设置, 通常是一个登录shell\n\n# 修改shell环境\n\n当我们需要定制shell环境时, 可以修改`bash_profile`文件, 对于其他的更改, 可以放到`bashrc`文件中, 而如果需要为系统中所有用户修改默认配置, 则需要更改`/etc/profile`文件。\n\n## 文本编译器\n\n在centOS7系统中, 可以使用`nano`编译器来编译文件, `ctrl-o` 是保存文件, `ctrl-x` 是退出编译器。\n\n```shell\nsource bashrc\n```\n\n重新读取修改之后的文件。\n","slug":"note/read_note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-9Day","published":1,"updated":"2022-10-07T13:03:28.473Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejy2009q3vsbgtq251oc","content":"<p><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-1Day.html\">第一天的笔记-基本的命令和使用方法</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-2Day.html\">第二天的笔记-操作文件</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-3Day.html\">第三天的笔记-查阅命令文档并创建命令别名</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-4Day.html\">第四天的笔记-重定向标准输入和输出以及处理查询结果</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-5Day.html\">第五天的笔记-命令的展开</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-6Day.html\">第六天的笔记-快捷键</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-7Day.html\">第七天的笔记-文件权限</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-8Day.html\">第八天的笔记-进程</a></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>今天学习了如何修改shell环境, 如何添加环境变量。</p>\n<span id=\"more\"></span>\n<h1 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h1><p>使用下列命令来查看环境变量</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">printenv</span><br></pre></td></tr></table></figure>\n<p>也可以查看单独的某一个环境变量:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">printenv UESR</span><br></pre></td></tr></table></figure>\n\n<p>使用下列命令来查看shell变量(和环境变量)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set</span><br></pre></td></tr></table></figure>\n\n<p>可以通过<code>echo</code>命令l来查看一个变量的内容</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo $HOME</span><br></pre></td></tr></table></figure>\n\n<p>通过<code>alias</code>来查看别名</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alias</span><br></pre></td></tr></table></figure>\n\n<p>一部分shell变量的含义:</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">变量</th>\n<th align=\"left\">内容</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">DISPLAY</td>\n<td align=\"left\">如果你正在运行图形界面环境，那么这个变量就是你显示器的名字。通常，它是 “:0”， 意思是由 X 产生的第一个显示器。</td>\n</tr>\n<tr>\n<td align=\"center\">EDITOR</td>\n<td align=\"left\">文本编辑器的名字。</td>\n</tr>\n<tr>\n<td align=\"center\">SHELL</td>\n<td align=\"left\">shell程序的名字。</td>\n</tr>\n<tr>\n<td align=\"center\">HOME</td>\n<td align=\"left\">用户的家目录。</td>\n</tr>\n<tr>\n<td align=\"center\">LANG</td>\n<td align=\"left\">定义了字符集以及语言编码方式。</td>\n</tr>\n<tr>\n<td align=\"center\">OLD_PWD</td>\n<td align=\"left\">以前的工作目录。</td>\n</tr>\n<tr>\n<td align=\"center\">PAGER</td>\n<td align=\"left\">页输出程序的名字。这经常设置为&#x2F;usr&#x2F;bin&#x2F;less。</td>\n</tr>\n<tr>\n<td align=\"center\">PATH</td>\n<td align=\"left\">由冒号分开的目录列表，当你输入可执行程序名后，会搜索这个目录列表。</td>\n</tr>\n<tr>\n<td align=\"center\">PS1</td>\n<td align=\"left\">Prompt String 1. 这个定义了你的 shell 提示符的内容。随后我们可以看到，这个变量 内容可以全面地定制。</td>\n</tr>\n<tr>\n<td align=\"center\">PWD</td>\n<td align=\"left\">当前工作目录。</td>\n</tr>\n<tr>\n<td align=\"center\">TERM</td>\n<td align=\"left\">终端类型名。类 Unix 的系统支持许多终端协议；这个变量设置你的终端仿真器所用的协议。</td>\n</tr>\n<tr>\n<td align=\"center\">TZ</td>\n<td align=\"left\">指定你所在的时区。大多数类 Unix 的系统按照协调时间时 (UTC) 来维护计算机内部的时钟 ，然后应用一个由这个变量指定的偏差来显示本地时间。</td>\n</tr>\n<tr>\n<td align=\"center\">USER</td>\n<td align=\"left\">你的用户名。</td>\n</tr>\n</tbody></table>\n<h2 id=\"shell启动后读取的配置\"><a href=\"#shell启动后读取的配置\" class=\"headerlink\" title=\"shell启动后读取的配置\"></a>shell启动后读取的配置</h2><ul>\n<li>登录shell会话的启动文件</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">文件</th>\n<th align=\"left\">内容</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">&#x2F;etc&#x2F;profile</td>\n<td align=\"left\">应用于所有用户的全局配置脚本</td>\n</tr>\n<tr>\n<td align=\"center\">~&#x2F;.bash_profile</td>\n<td align=\"left\">用户个人的启动文件, 用来扩展或重写全局脚本中的设置</td>\n</tr>\n<tr>\n<td align=\"center\">~&#x2F;.bash_login</td>\n<td align=\"left\">如果文件 ~&#x2F;.bash_profile 没有找到，bash 会尝试读取这个脚本</td>\n</tr>\n<tr>\n<td align=\"center\">~&#x2F;.profile</td>\n<td align=\"left\">如果文件 ~&#x2F;.bash_profile 或文件 ~&#x2F;.bash_login 都没有找到，bash 会试图读取这个文件。 这是基于 Debian 发行版的默认设置，比方说 Ubuntu</td>\n</tr>\n</tbody></table>\n<ul>\n<li>非登录shell会话的启动文件</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">文件</th>\n<th align=\"left\">内容</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">&#x2F;etc&#x2F;bash.bashrc</td>\n<td align=\"left\">应用于所有用户的全局配置文件</td>\n</tr>\n<tr>\n<td align=\"center\">~&#x2F;.bashrc</td>\n<td align=\"left\">用户个人的启动文件。可以用来扩展或重写全局配置脚本中的设置</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>除了读取以上启动文件之外, 非登录shell会话也会继承他们的父进程环境设置, 通常是一个登录shell</p>\n</blockquote>\n<h1 id=\"修改shell环境\"><a href=\"#修改shell环境\" class=\"headerlink\" title=\"修改shell环境\"></a>修改shell环境</h1><p>当我们需要定制shell环境时, 可以修改<code>bash_profile</code>文件, 对于其他的更改, 可以放到<code>bashrc</code>文件中, 而如果需要为系统中所有用户修改默认配置, 则需要更改<code>/etc/profile</code>文件。</p>\n<h2 id=\"文本编译器\"><a href=\"#文本编译器\" class=\"headerlink\" title=\"文本编译器\"></a>文本编译器</h2><p>在centOS7系统中, 可以使用<code>nano</code>编译器来编译文件, <code>ctrl-o</code> 是保存文件, <code>ctrl-x</code> 是退出编译器。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source bashrc</span><br></pre></td></tr></table></figure>\n\n<p>重新读取修改之后的文件。</p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<p><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-1Day.html\">第一天的笔记-基本的命令和使用方法</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-2Day.html\">第二天的笔记-操作文件</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-3Day.html\">第三天的笔记-查阅命令文档并创建命令别名</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-4Day.html\">第四天的笔记-重定向标准输入和输出以及处理查询结果</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-5Day.html\">第五天的笔记-命令的展开</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-6Day.html\">第六天的笔记-快捷键</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-7Day.html\">第七天的笔记-文件权限</a><br><a href=\"/read-note/The_Linux_Command_Line/The-Linux-Command-Line-read-note-8Day.html\">第八天的笔记-进程</a></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>今天学习了如何修改shell环境, 如何添加环境变量。</p>","more":"<h1 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h1><p>使用下列命令来查看环境变量</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">printenv</span><br></pre></td></tr></table></figure>\n<p>也可以查看单独的某一个环境变量:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">printenv UESR</span><br></pre></td></tr></table></figure>\n\n<p>使用下列命令来查看shell变量(和环境变量)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set</span><br></pre></td></tr></table></figure>\n\n<p>可以通过<code>echo</code>命令l来查看一个变量的内容</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo $HOME</span><br></pre></td></tr></table></figure>\n\n<p>通过<code>alias</code>来查看别名</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alias</span><br></pre></td></tr></table></figure>\n\n<p>一部分shell变量的含义:</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">变量</th>\n<th align=\"left\">内容</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">DISPLAY</td>\n<td align=\"left\">如果你正在运行图形界面环境，那么这个变量就是你显示器的名字。通常，它是 “:0”， 意思是由 X 产生的第一个显示器。</td>\n</tr>\n<tr>\n<td align=\"center\">EDITOR</td>\n<td align=\"left\">文本编辑器的名字。</td>\n</tr>\n<tr>\n<td align=\"center\">SHELL</td>\n<td align=\"left\">shell程序的名字。</td>\n</tr>\n<tr>\n<td align=\"center\">HOME</td>\n<td align=\"left\">用户的家目录。</td>\n</tr>\n<tr>\n<td align=\"center\">LANG</td>\n<td align=\"left\">定义了字符集以及语言编码方式。</td>\n</tr>\n<tr>\n<td align=\"center\">OLD_PWD</td>\n<td align=\"left\">以前的工作目录。</td>\n</tr>\n<tr>\n<td align=\"center\">PAGER</td>\n<td align=\"left\">页输出程序的名字。这经常设置为&#x2F;usr&#x2F;bin&#x2F;less。</td>\n</tr>\n<tr>\n<td align=\"center\">PATH</td>\n<td align=\"left\">由冒号分开的目录列表，当你输入可执行程序名后，会搜索这个目录列表。</td>\n</tr>\n<tr>\n<td align=\"center\">PS1</td>\n<td align=\"left\">Prompt String 1. 这个定义了你的 shell 提示符的内容。随后我们可以看到，这个变量 内容可以全面地定制。</td>\n</tr>\n<tr>\n<td align=\"center\">PWD</td>\n<td align=\"left\">当前工作目录。</td>\n</tr>\n<tr>\n<td align=\"center\">TERM</td>\n<td align=\"left\">终端类型名。类 Unix 的系统支持许多终端协议；这个变量设置你的终端仿真器所用的协议。</td>\n</tr>\n<tr>\n<td align=\"center\">TZ</td>\n<td align=\"left\">指定你所在的时区。大多数类 Unix 的系统按照协调时间时 (UTC) 来维护计算机内部的时钟 ，然后应用一个由这个变量指定的偏差来显示本地时间。</td>\n</tr>\n<tr>\n<td align=\"center\">USER</td>\n<td align=\"left\">你的用户名。</td>\n</tr>\n</tbody></table>\n<h2 id=\"shell启动后读取的配置\"><a href=\"#shell启动后读取的配置\" class=\"headerlink\" title=\"shell启动后读取的配置\"></a>shell启动后读取的配置</h2><ul>\n<li>登录shell会话的启动文件</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">文件</th>\n<th align=\"left\">内容</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">&#x2F;etc&#x2F;profile</td>\n<td align=\"left\">应用于所有用户的全局配置脚本</td>\n</tr>\n<tr>\n<td align=\"center\">~&#x2F;.bash_profile</td>\n<td align=\"left\">用户个人的启动文件, 用来扩展或重写全局脚本中的设置</td>\n</tr>\n<tr>\n<td align=\"center\">~&#x2F;.bash_login</td>\n<td align=\"left\">如果文件 ~&#x2F;.bash_profile 没有找到，bash 会尝试读取这个脚本</td>\n</tr>\n<tr>\n<td align=\"center\">~&#x2F;.profile</td>\n<td align=\"left\">如果文件 ~&#x2F;.bash_profile 或文件 ~&#x2F;.bash_login 都没有找到，bash 会试图读取这个文件。 这是基于 Debian 发行版的默认设置，比方说 Ubuntu</td>\n</tr>\n</tbody></table>\n<ul>\n<li>非登录shell会话的启动文件</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">文件</th>\n<th align=\"left\">内容</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">&#x2F;etc&#x2F;bash.bashrc</td>\n<td align=\"left\">应用于所有用户的全局配置文件</td>\n</tr>\n<tr>\n<td align=\"center\">~&#x2F;.bashrc</td>\n<td align=\"left\">用户个人的启动文件。可以用来扩展或重写全局配置脚本中的设置</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>除了读取以上启动文件之外, 非登录shell会话也会继承他们的父进程环境设置, 通常是一个登录shell</p>\n</blockquote>\n<h1 id=\"修改shell环境\"><a href=\"#修改shell环境\" class=\"headerlink\" title=\"修改shell环境\"></a>修改shell环境</h1><p>当我们需要定制shell环境时, 可以修改<code>bash_profile</code>文件, 对于其他的更改, 可以放到<code>bashrc</code>文件中, 而如果需要为系统中所有用户修改默认配置, 则需要更改<code>/etc/profile</code>文件。</p>\n<h2 id=\"文本编译器\"><a href=\"#文本编译器\" class=\"headerlink\" title=\"文本编译器\"></a>文本编译器</h2><p>在centOS7系统中, 可以使用<code>nano</code>编译器来编译文件, <code>ctrl-o</code> 是保存文件, <code>ctrl-x</code> 是退出编译器。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source bashrc</span><br></pre></td></tr></table></figure>\n\n<p>重新读取修改之后的文件。</p>"},{"title":"计算机中的单位","date":"2020-07-01T22:08:46.000Z","_content":"\n# 单位\n\n记录一下计算机中的单位:\n\n1 GB = 2的8次方 MB = 2的16次方 KB = 2的32次方 byte = 8 x 2的32次方 bit\n\n一个存储单元可以存放1个byte(也就是一个字节), 8个bit, 一个存储器有128个存储单元\n\n<!--more-->\n\n# 控制总线\n\n地址总线的寻址情况:\n\n一根地址总线可以传输1bit的内容(0或1, 0表示低电平, 1表示高电平), 可以寻址两个内存单元, 10根地址总线可以传输10bit的内容, 也就是10位二进制数据, 也就是1023个数据。这里的地址总线传输的数据是用来访问地址为该数据的内存单元。\n\n数据总线的传输情况:\n\n一根总线可以传输一位, 8根一次可以传输8位(也就是一个字节)的数据。\n\n# 寄存器\n\n老一代的cpu(8086之前的cpu)采用的都是8位寄存器, 8086采用的是16位寄存器, 为了兼容性, 8086cpu可以一次性处理两种尺寸的数据:\n\n* 字节, 一个字节由8bit组成, 可以存在8位寄存器中。\n* 字, 记为word, 由两个字节组成, 分别为这个字的高位字节和低位字节。\n\n\n","source":"_posts/note/read_note/assembly_language/assembly-unit.md","raw":"---\ntitle: 计算机中的单位\ndate: 2020-07-02 06:08:46\ncategories:\n- 笔记\n- 读书笔记\n- 汇编语言\ntags:\n- 汇编\n- 读书笔记\n---\n\n# 单位\n\n记录一下计算机中的单位:\n\n1 GB = 2的8次方 MB = 2的16次方 KB = 2的32次方 byte = 8 x 2的32次方 bit\n\n一个存储单元可以存放1个byte(也就是一个字节), 8个bit, 一个存储器有128个存储单元\n\n<!--more-->\n\n# 控制总线\n\n地址总线的寻址情况:\n\n一根地址总线可以传输1bit的内容(0或1, 0表示低电平, 1表示高电平), 可以寻址两个内存单元, 10根地址总线可以传输10bit的内容, 也就是10位二进制数据, 也就是1023个数据。这里的地址总线传输的数据是用来访问地址为该数据的内存单元。\n\n数据总线的传输情况:\n\n一根总线可以传输一位, 8根一次可以传输8位(也就是一个字节)的数据。\n\n# 寄存器\n\n老一代的cpu(8086之前的cpu)采用的都是8位寄存器, 8086采用的是16位寄存器, 为了兼容性, 8086cpu可以一次性处理两种尺寸的数据:\n\n* 字节, 一个字节由8bit组成, 可以存在8位寄存器中。\n* 字, 记为word, 由两个字节组成, 分别为这个字的高位字节和低位字节。\n\n\n","slug":"note/read_note/assembly_language/assembly-unit","published":1,"updated":"2022-10-07T13:01:20.237Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejy8009u3vsbgjxfcbre","content":"<h1 id=\"单位\"><a href=\"#单位\" class=\"headerlink\" title=\"单位\"></a>单位</h1><p>记录一下计算机中的单位:</p>\n<p>1 GB &#x3D; 2的8次方 MB &#x3D; 2的16次方 KB &#x3D; 2的32次方 byte &#x3D; 8 x 2的32次方 bit</p>\n<p>一个存储单元可以存放1个byte(也就是一个字节), 8个bit, 一个存储器有128个存储单元</p>\n<span id=\"more\"></span>\n\n<h1 id=\"控制总线\"><a href=\"#控制总线\" class=\"headerlink\" title=\"控制总线\"></a>控制总线</h1><p>地址总线的寻址情况:</p>\n<p>一根地址总线可以传输1bit的内容(0或1, 0表示低电平, 1表示高电平), 可以寻址两个内存单元, 10根地址总线可以传输10bit的内容, 也就是10位二进制数据, 也就是1023个数据。这里的地址总线传输的数据是用来访问地址为该数据的内存单元。</p>\n<p>数据总线的传输情况:</p>\n<p>一根总线可以传输一位, 8根一次可以传输8位(也就是一个字节)的数据。</p>\n<h1 id=\"寄存器\"><a href=\"#寄存器\" class=\"headerlink\" title=\"寄存器\"></a>寄存器</h1><p>老一代的cpu(8086之前的cpu)采用的都是8位寄存器, 8086采用的是16位寄存器, 为了兼容性, 8086cpu可以一次性处理两种尺寸的数据:</p>\n<ul>\n<li>字节, 一个字节由8bit组成, 可以存在8位寄存器中。</li>\n<li>字, 记为word, 由两个字节组成, 分别为这个字的高位字节和低位字节。</li>\n</ul>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"单位\"><a href=\"#单位\" class=\"headerlink\" title=\"单位\"></a>单位</h1><p>记录一下计算机中的单位:</p>\n<p>1 GB &#x3D; 2的8次方 MB &#x3D; 2的16次方 KB &#x3D; 2的32次方 byte &#x3D; 8 x 2的32次方 bit</p>\n<p>一个存储单元可以存放1个byte(也就是一个字节), 8个bit, 一个存储器有128个存储单元</p>","more":"<h1 id=\"控制总线\"><a href=\"#控制总线\" class=\"headerlink\" title=\"控制总线\"></a>控制总线</h1><p>地址总线的寻址情况:</p>\n<p>一根地址总线可以传输1bit的内容(0或1, 0表示低电平, 1表示高电平), 可以寻址两个内存单元, 10根地址总线可以传输10bit的内容, 也就是10位二进制数据, 也就是1023个数据。这里的地址总线传输的数据是用来访问地址为该数据的内存单元。</p>\n<p>数据总线的传输情况:</p>\n<p>一根总线可以传输一位, 8根一次可以传输8位(也就是一个字节)的数据。</p>\n<h1 id=\"寄存器\"><a href=\"#寄存器\" class=\"headerlink\" title=\"寄存器\"></a>寄存器</h1><p>老一代的cpu(8086之前的cpu)采用的都是8位寄存器, 8086采用的是16位寄存器, 为了兼容性, 8086cpu可以一次性处理两种尺寸的数据:</p>\n<ul>\n<li>字节, 一个字节由8bit组成, 可以存在8位寄存器中。</li>\n<li>字, 记为word, 由两个字节组成, 分别为这个字的高位字节和低位字节。</li>\n</ul>"},{"title":"javascript权威指南读书笔记-第一天","date":"2018-12-13T13:01:45.000Z","_content":"\n# null和undefined\n\nnull 的类型是Object(可用typeof来得到结果), 而undefined的类型就是undefined\n\nundefined是一个预定义的全局属性, 而null是一个关键字\n\n通常如果想要给一个变量传入空值的话, 最佳选择是null\n\n# 包装对象\n\n```js\nvar s = \"test\";\ns.len = 4;\nconsole.log(s.len);\n```\n\noutput:\n\n```js\nundefined\n```\n\n在声明一个字符串类型的值时, JavaScript会这样做:\n\n```js\nvar s = new String(\"test\");\n```\n\n而之后就会销毁这个对象, 所以给它定义属性也会被忽略, 同理, 数字和布尔值也是这样的做法。\n\n","source":"_posts/note/read_note/javascript-The-Definitive-Guide/javascript-The-Definitive-Guide-read-note-firstDay.md","raw":"---\ntitle: javascript权威指南读书笔记-第一天\ndate: 2018-12-13 21:01:45\ncategories:\n- 笔记\n- 读书笔记\n- JavaScript权威指南\ntags:\n- js\n---\n\n# null和undefined\n\nnull 的类型是Object(可用typeof来得到结果), 而undefined的类型就是undefined\n\nundefined是一个预定义的全局属性, 而null是一个关键字\n\n通常如果想要给一个变量传入空值的话, 最佳选择是null\n\n# 包装对象\n\n```js\nvar s = \"test\";\ns.len = 4;\nconsole.log(s.len);\n```\n\noutput:\n\n```js\nundefined\n```\n\n在声明一个字符串类型的值时, JavaScript会这样做:\n\n```js\nvar s = new String(\"test\");\n```\n\n而之后就会销毁这个对象, 所以给它定义属性也会被忽略, 同理, 数字和布尔值也是这样的做法。\n\n","slug":"note/read_note/javascript-The-Definitive-Guide/javascript-The-Definitive-Guide-read-note-firstDay","published":1,"updated":"2022-10-07T13:01:41.749Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejyb009x3vsb8443f7h7","content":"<h1 id=\"null和undefined\"><a href=\"#null和undefined\" class=\"headerlink\" title=\"null和undefined\"></a>null和undefined</h1><p>null 的类型是Object(可用typeof来得到结果), 而undefined的类型就是undefined</p>\n<p>undefined是一个预定义的全局属性, 而null是一个关键字</p>\n<p>通常如果想要给一个变量传入空值的话, 最佳选择是null</p>\n<h1 id=\"包装对象\"><a href=\"#包装对象\" class=\"headerlink\" title=\"包装对象\"></a>包装对象</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">&quot;test&quot;</span>;</span><br><span class=\"line\">s.len = <span class=\"number\">4</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s.len);</span><br></pre></td></tr></table></figure>\n\n<p>output:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">undefined</span></span><br></pre></td></tr></table></figure>\n\n<p>在声明一个字符串类型的值时, JavaScript会这样做:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">&quot;test&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>而之后就会销毁这个对象, 所以给它定义属性也会被忽略, 同理, 数字和布尔值也是这样的做法。</p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"","more":"<h1 id=\"null和undefined\"><a href=\"#null和undefined\" class=\"headerlink\" title=\"null和undefined\"></a>null和undefined</h1><p>null 的类型是Object(可用typeof来得到结果), 而undefined的类型就是undefined</p>\n<p>undefined是一个预定义的全局属性, 而null是一个关键字</p>\n<p>通常如果想要给一个变量传入空值的话, 最佳选择是null</p>\n<h1 id=\"包装对象\"><a href=\"#包装对象\" class=\"headerlink\" title=\"包装对象\"></a>包装对象</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">&quot;test&quot;</span>;</span><br><span class=\"line\">s.len = <span class=\"number\">4</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s.len);</span><br></pre></td></tr></table></figure>\n\n<p>output:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">undefined</span></span><br></pre></td></tr></table></figure>\n\n<p>在声明一个字符串类型的值时, JavaScript会这样做:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">&quot;test&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>而之后就会销毁这个对象, 所以给它定义属性也会被忽略, 同理, 数字和布尔值也是这样的做法。</p>\n"},{"title":"阅读《C程序设计语言（第二版）》第一天","date":"2019-01-20T11:49:16.000Z","_content":"# 总结\n\n学到了一些关于C的基础知识。\n<!--more-->\n\n# 在linux上编写c\n首先声明本人使用的linux版本为centos7\n1. 使用`cat`或者其他命令来新建一个文件, 后缀名是`.c`\n2. 使用`vim`命令来编写这个文件\n3. 使用`cc 文件名.c`来编译该文件\n4. 使用`./a.out`来运行该文件\n\n<br>\n\n# 在visual studio 2017 上编写c\n1. 新建一个项目\n!['新建一个项目'](/images/c-programming-language/firstDay/vs1.jpg)\n\n2. 创建文件\n!['创建文件'](/images/c-programming-language/firstDay/vs2.jpg)\n\n3. 修改文件属性\n!['创建文件'](/images/c-programming-language/firstDay/vs3.jpg)\n!['创建文件'](/images/c-programming-language/firstDay/vs4.jpg)\nvs有一个预编译头的功能, 将需要导入的库放入预编译头指定的文件, 直接引入这个文件就可以了, 但是我们现在不需要这个功能, 所以先取消掉\n\n4. 编写程序\n5. 生成项目\n!['创建文件'](/images/c-programming-language/firstDay/vs5.jpg)\n\n6. 运行项目(ctrl-f5)\n!['创建文件'](/images/c-programming-language/firstDay/vs6.jpg)\n\n<br/>\n\n# `#define`关键字\n语法:\n```c\n#define KEY \"word\"\n```\n该关键字定义了符号常量, 在程序中可直接使用定义的键来替代相应的值。\n\n<br>\n\n# `getchar()` 和 `putchar()`\n\n* getchar()\n可以从输入中读一个字符并返回\n\n* putchar(obj)\n可以将参数以字符的形式打印出来","source":"_posts/note/read_note/the_c_programming_language/the-c-programming-language-first-day.md","raw":"---\ntitle: 阅读《C程序设计语言（第二版）》第一天\ndate: 2019-01-20 19:49:16\ncategories:\n- 笔记\n- 读书笔记\n- C程序设计语言\ntags:\n- 笔记\n- C\n---\n# 总结\n\n学到了一些关于C的基础知识。\n<!--more-->\n\n# 在linux上编写c\n首先声明本人使用的linux版本为centos7\n1. 使用`cat`或者其他命令来新建一个文件, 后缀名是`.c`\n2. 使用`vim`命令来编写这个文件\n3. 使用`cc 文件名.c`来编译该文件\n4. 使用`./a.out`来运行该文件\n\n<br>\n\n# 在visual studio 2017 上编写c\n1. 新建一个项目\n!['新建一个项目'](/images/c-programming-language/firstDay/vs1.jpg)\n\n2. 创建文件\n!['创建文件'](/images/c-programming-language/firstDay/vs2.jpg)\n\n3. 修改文件属性\n!['创建文件'](/images/c-programming-language/firstDay/vs3.jpg)\n!['创建文件'](/images/c-programming-language/firstDay/vs4.jpg)\nvs有一个预编译头的功能, 将需要导入的库放入预编译头指定的文件, 直接引入这个文件就可以了, 但是我们现在不需要这个功能, 所以先取消掉\n\n4. 编写程序\n5. 生成项目\n!['创建文件'](/images/c-programming-language/firstDay/vs5.jpg)\n\n6. 运行项目(ctrl-f5)\n!['创建文件'](/images/c-programming-language/firstDay/vs6.jpg)\n\n<br/>\n\n# `#define`关键字\n语法:\n```c\n#define KEY \"word\"\n```\n该关键字定义了符号常量, 在程序中可直接使用定义的键来替代相应的值。\n\n<br>\n\n# `getchar()` 和 `putchar()`\n\n* getchar()\n可以从输入中读一个字符并返回\n\n* putchar(obj)\n可以将参数以字符的形式打印出来","slug":"note/read_note/the_c_programming_language/the-c-programming-language-first-day","published":1,"updated":"2022-10-07T13:01:53.321Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejyj00a13vsbccba8ev8","content":"<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>学到了一些关于C的基础知识。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"在linux上编写c\"><a href=\"#在linux上编写c\" class=\"headerlink\" title=\"在linux上编写c\"></a>在linux上编写c</h1><p>首先声明本人使用的linux版本为centos7</p>\n<ol>\n<li>使用<code>cat</code>或者其他命令来新建一个文件, 后缀名是<code>.c</code></li>\n<li>使用<code>vim</code>命令来编写这个文件</li>\n<li>使用<code>cc 文件名.c</code>来编译该文件</li>\n<li>使用<code>./a.out</code>来运行该文件</li>\n</ol>\n<br>\n\n<h1 id=\"在visual-studio-2017-上编写c\"><a href=\"#在visual-studio-2017-上编写c\" class=\"headerlink\" title=\"在visual studio 2017 上编写c\"></a>在visual studio 2017 上编写c</h1><ol>\n<li><p>新建一个项目<br><img src=\"/images/c-programming-language/firstDay/vs1.jpg\" alt=\"&#39;新建一个项目&#39;\"></p>\n</li>\n<li><p>创建文件<br><img src=\"/images/c-programming-language/firstDay/vs2.jpg\" alt=\"&#39;创建文件&#39;\"></p>\n</li>\n<li><p>修改文件属性<br><img src=\"/images/c-programming-language/firstDay/vs3.jpg\" alt=\"&#39;创建文件&#39;\"><br><img src=\"/images/c-programming-language/firstDay/vs4.jpg\" alt=\"&#39;创建文件&#39;\"><br>vs有一个预编译头的功能, 将需要导入的库放入预编译头指定的文件, 直接引入这个文件就可以了, 但是我们现在不需要这个功能, 所以先取消掉</p>\n</li>\n<li><p>编写程序</p>\n</li>\n<li><p>生成项目<br><img src=\"/images/c-programming-language/firstDay/vs5.jpg\" alt=\"&#39;创建文件&#39;\"></p>\n</li>\n<li><p>运行项目(ctrl-f5)<br><img src=\"/images/c-programming-language/firstDay/vs6.jpg\" alt=\"&#39;创建文件&#39;\"></p>\n</li>\n</ol>\n<br/>\n\n<h1 id=\"define关键字\"><a href=\"#define关键字\" class=\"headerlink\" title=\"#define关键字\"></a><code>#define</code>关键字</h1><p>语法:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> KEY <span class=\"meta-string\">&quot;word&quot;</span></span></span><br></pre></td></tr></table></figure>\n<p>该关键字定义了符号常量, 在程序中可直接使用定义的键来替代相应的值。</p>\n<br>\n\n<h1 id=\"getchar-和-putchar\"><a href=\"#getchar-和-putchar\" class=\"headerlink\" title=\"getchar() 和 putchar()\"></a><code>getchar()</code> 和 <code>putchar()</code></h1><ul>\n<li><p>getchar()<br>可以从输入中读一个字符并返回</p>\n</li>\n<li><p>putchar(obj)<br>可以将参数以字符的形式打印出来</p>\n</li>\n</ul>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>学到了一些关于C的基础知识。</p>","more":"<h1 id=\"在linux上编写c\"><a href=\"#在linux上编写c\" class=\"headerlink\" title=\"在linux上编写c\"></a>在linux上编写c</h1><p>首先声明本人使用的linux版本为centos7</p>\n<ol>\n<li>使用<code>cat</code>或者其他命令来新建一个文件, 后缀名是<code>.c</code></li>\n<li>使用<code>vim</code>命令来编写这个文件</li>\n<li>使用<code>cc 文件名.c</code>来编译该文件</li>\n<li>使用<code>./a.out</code>来运行该文件</li>\n</ol>\n<br>\n\n<h1 id=\"在visual-studio-2017-上编写c\"><a href=\"#在visual-studio-2017-上编写c\" class=\"headerlink\" title=\"在visual studio 2017 上编写c\"></a>在visual studio 2017 上编写c</h1><ol>\n<li><p>新建一个项目<br><img src=\"/images/c-programming-language/firstDay/vs1.jpg\" alt=\"&#39;新建一个项目&#39;\"></p>\n</li>\n<li><p>创建文件<br><img src=\"/images/c-programming-language/firstDay/vs2.jpg\" alt=\"&#39;创建文件&#39;\"></p>\n</li>\n<li><p>修改文件属性<br><img src=\"/images/c-programming-language/firstDay/vs3.jpg\" alt=\"&#39;创建文件&#39;\"><br><img src=\"/images/c-programming-language/firstDay/vs4.jpg\" alt=\"&#39;创建文件&#39;\"><br>vs有一个预编译头的功能, 将需要导入的库放入预编译头指定的文件, 直接引入这个文件就可以了, 但是我们现在不需要这个功能, 所以先取消掉</p>\n</li>\n<li><p>编写程序</p>\n</li>\n<li><p>生成项目<br><img src=\"/images/c-programming-language/firstDay/vs5.jpg\" alt=\"&#39;创建文件&#39;\"></p>\n</li>\n<li><p>运行项目(ctrl-f5)<br><img src=\"/images/c-programming-language/firstDay/vs6.jpg\" alt=\"&#39;创建文件&#39;\"></p>\n</li>\n</ol>\n<br/>\n\n<h1 id=\"define关键字\"><a href=\"#define关键字\" class=\"headerlink\" title=\"#define关键字\"></a><code>#define</code>关键字</h1><p>语法:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> KEY <span class=\"meta-string\">&quot;word&quot;</span></span></span><br></pre></td></tr></table></figure>\n<p>该关键字定义了符号常量, 在程序中可直接使用定义的键来替代相应的值。</p>\n<br>\n\n<h1 id=\"getchar-和-putchar\"><a href=\"#getchar-和-putchar\" class=\"headerlink\" title=\"getchar() 和 putchar()\"></a><code>getchar()</code> 和 <code>putchar()</code></h1><ul>\n<li><p>getchar()<br>可以从输入中读一个字符并返回</p>\n</li>\n<li><p>putchar(obj)<br>可以将参数以字符的形式打印出来</p>\n</li>\n</ul>"},{"title":"阅读《C程序设计语言（第二版）》第二天","date":"2019-01-29T23:17:10.000Z","_content":"\n# 总结\n<!--more-->\n# 函数\n\n## 函数的声明\n\n需要在文件开头声明函数的返回类型, 函数名以及形参, 不需要方法体, 这一点c++和c差不多。\n比如:\n\n```c\nint power(int m, int n);\n\n/**\n * 计算幂\n * @param m 基数\n * @param n 幂方\n */\nint power(int m, int n)\n{\n  int p = 1;\n  for (int i = 0; i != n; ++i)\n  {\n    p *= m;\n  }\n  return p;\n}\n```\n\n## 形式参数\n\n所有的函数参数都是通过值传递的, 如果需要在函数中改变主函数的变量, 可以向函数传递指针。\n**数组函数传递的是数组起始元素的位置或地址。**\n\n## 字符数组\n\n当在c中出现类似于\n\n> hello\\0\n\n这样的字符串常量时, 它将以字符数组存储\n","source":"_posts/note/read_note/the_c_programming_language/the-c-programming-language-second-day.md","raw":"---\ntitle: 阅读《C程序设计语言（第二版）》第二天\ndate: 2019-01-30 07:17:10\ncategories:\n- 笔记\n- 读书笔记\n- C程序设计语言\ntags:\n- 笔记\n- C\n---\n\n# 总结\n<!--more-->\n# 函数\n\n## 函数的声明\n\n需要在文件开头声明函数的返回类型, 函数名以及形参, 不需要方法体, 这一点c++和c差不多。\n比如:\n\n```c\nint power(int m, int n);\n\n/**\n * 计算幂\n * @param m 基数\n * @param n 幂方\n */\nint power(int m, int n)\n{\n  int p = 1;\n  for (int i = 0; i != n; ++i)\n  {\n    p *= m;\n  }\n  return p;\n}\n```\n\n## 形式参数\n\n所有的函数参数都是通过值传递的, 如果需要在函数中改变主函数的变量, 可以向函数传递指针。\n**数组函数传递的是数组起始元素的位置或地址。**\n\n## 字符数组\n\n当在c中出现类似于\n\n> hello\\0\n\n这样的字符串常量时, 它将以字符数组存储\n","slug":"note/read_note/the_c_programming_language/the-c-programming-language-second-day","published":1,"updated":"2022-10-07T13:02:02.641Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejym00a33vsbetxpboh3","content":"<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><span id=\"more\"></span>\n<h1 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h1><h2 id=\"函数的声明\"><a href=\"#函数的声明\" class=\"headerlink\" title=\"函数的声明\"></a>函数的声明</h2><p>需要在文件开头声明函数的返回类型, 函数名以及形参, 不需要方法体, 这一点c++和c差不多。<br>比如:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">power</span><span class=\"params\">(<span class=\"keyword\">int</span> m, <span class=\"keyword\">int</span> n)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 计算幂</span></span><br><span class=\"line\"><span class=\"comment\"> * @param m 基数</span></span><br><span class=\"line\"><span class=\"comment\"> * @param n 幂方</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">power</span><span class=\"params\">(<span class=\"keyword\">int</span> m, <span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> p = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i != n; ++i)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    p *= m;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"形式参数\"><a href=\"#形式参数\" class=\"headerlink\" title=\"形式参数\"></a>形式参数</h2><p>所有的函数参数都是通过值传递的, 如果需要在函数中改变主函数的变量, 可以向函数传递指针。<br><strong>数组函数传递的是数组起始元素的位置或地址。</strong></p>\n<h2 id=\"字符数组\"><a href=\"#字符数组\" class=\"headerlink\" title=\"字符数组\"></a>字符数组</h2><p>当在c中出现类似于</p>\n<blockquote>\n<p>hello\\0</p>\n</blockquote>\n<p>这样的字符串常量时, 它将以字符数组存储</p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1>","more":"<h1 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h1><h2 id=\"函数的声明\"><a href=\"#函数的声明\" class=\"headerlink\" title=\"函数的声明\"></a>函数的声明</h2><p>需要在文件开头声明函数的返回类型, 函数名以及形参, 不需要方法体, 这一点c++和c差不多。<br>比如:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">power</span><span class=\"params\">(<span class=\"keyword\">int</span> m, <span class=\"keyword\">int</span> n)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 计算幂</span></span><br><span class=\"line\"><span class=\"comment\"> * @param m 基数</span></span><br><span class=\"line\"><span class=\"comment\"> * @param n 幂方</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">power</span><span class=\"params\">(<span class=\"keyword\">int</span> m, <span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> p = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i != n; ++i)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    p *= m;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"形式参数\"><a href=\"#形式参数\" class=\"headerlink\" title=\"形式参数\"></a>形式参数</h2><p>所有的函数参数都是通过值传递的, 如果需要在函数中改变主函数的变量, 可以向函数传递指针。<br><strong>数组函数传递的是数组起始元素的位置或地址。</strong></p>\n<h2 id=\"字符数组\"><a href=\"#字符数组\" class=\"headerlink\" title=\"字符数组\"></a>字符数组</h2><p>当在c中出现类似于</p>\n<blockquote>\n<p>hello\\0</p>\n</blockquote>\n<p>这样的字符串常量时, 它将以字符数组存储</p>"},{"title":"读《大型网站技术架构》笔记 - 自动化发布及运维","date":"2019-12-14T08:23:21.000Z","_content":"\n# 摘抄:\n\n在无人值守的情况下, 一切都可以自动化是网站的理想状态。目前大型网站的自动化架构设计主要集中在发布运维方面。\n\n发布对于网站来说是头等大事, 许多网站故障出在发布环节, 网站工程师经常加班也是因为发布不顺利。通过减少人为干预, 使发布过程自动化可有效减少故障。发布过程包括诸多环节。自动化代码管理, 代码版本控制, 代码分支创建合并等过程自动化, 开发工程师只要提交自己参与开发的产品代号, 系统就会自动为其创建开发分支。后期会自动进行代码合并。自动化测试, 代码开发完成, 提交测试后, 系统自动将代码部署到测试环境, 启动自动化测试用例进行测试, 向相关人员发送测试报告, 像系统反馈测试结果。自动化安全检测, 安全检测工具通过对代码进行静态安全扫描及部署到安全测试环境进行安全测试, 评估其安全性。最后进行自动化部署, 将工程代码自动部署到线上生产环境。\n\n<!--more-->\n\n此外, 网站在运行过程中可能会遇到各种问题: 服务器宕机, 程序bug, 存储空间不足, 突然爆发的访问高峰。网站需要对线上生产环境进行自动监控, 对服务器进行心跳检测, 并监控其各项性能指标和应用程序的关键数据指标。如果发现异常, 超出预设的阈值, 就进行自动报警, 向相关人员发送报警信息, 警告故障可能会发生。在检测到故障发生之后, 系统会进行自动化失效转移, 将失效的服务器从集群中隔离出去, 不在处理系统中的应用请求。待故障消除后, 系统进行自动化失效恢复, 重新启动服务, 同步数据保证数据的一致性。在网站遇到访问高峰, 超出网站最大处理能力时, 为了保证整个网站的安全可用, 还会进行自动化降级, 通过拒绝部分请求及关闭部分不重要的服务将系统负载降至一个安全的水平, 必要时, 还需要自动化分配资源, 将空闲资源分配给重要的服务, 扩大其部署规模。\n\n# 说明\n\n以上两段是我对原文的摘抄, 文章中也说明了是理想状态, 那么我就来说说我的看法:\n\n我的工作时间不长, 但是就我的经历而言, 部署和运维的确经常成为加班的一个重要原因。最重要的是, 这些步骤可以通过脚本的方式实现自动化。就如文章中提到的那样, 代码的管理, 测试, 部署, 出问题之后的解决等等, 都可以自动化, 那么我的问题是, 应该从哪方面入手? 再写自动化处理错误的脚本时, 应该将自己想象成什么角色? 将该脚本的行为模拟成一个用户? 这个用户不停的对网站的所有服务进行访问(心跳检测), 想到这里我想明白了, 就是应该这样做, 将几个角色分别以脚本的形式对网站进行维护: 用户, 对网站的所有服务进行测试; 运维, 当用户测试出了问题时, 应当及时对出问题的服务器进行应急处理; 报警人员: 出问题时, 及时通知相关人员处理问题等等, 这样, 就可以让机器代替人类来做这些麻烦而且容易出错的事情了。\n","source":"_posts/note/read_note/web-site-framework/auto-deploy-hot-update.md","raw":"---\ntitle: 读《大型网站技术架构》笔记 - 自动化发布及运维\ndate: 2019-12-14 16:23:21\ncategories:\n- 笔记\n- 读书笔记\n- 大型网站技术架构\ntags:\n- 架构\n---\n\n# 摘抄:\n\n在无人值守的情况下, 一切都可以自动化是网站的理想状态。目前大型网站的自动化架构设计主要集中在发布运维方面。\n\n发布对于网站来说是头等大事, 许多网站故障出在发布环节, 网站工程师经常加班也是因为发布不顺利。通过减少人为干预, 使发布过程自动化可有效减少故障。发布过程包括诸多环节。自动化代码管理, 代码版本控制, 代码分支创建合并等过程自动化, 开发工程师只要提交自己参与开发的产品代号, 系统就会自动为其创建开发分支。后期会自动进行代码合并。自动化测试, 代码开发完成, 提交测试后, 系统自动将代码部署到测试环境, 启动自动化测试用例进行测试, 向相关人员发送测试报告, 像系统反馈测试结果。自动化安全检测, 安全检测工具通过对代码进行静态安全扫描及部署到安全测试环境进行安全测试, 评估其安全性。最后进行自动化部署, 将工程代码自动部署到线上生产环境。\n\n<!--more-->\n\n此外, 网站在运行过程中可能会遇到各种问题: 服务器宕机, 程序bug, 存储空间不足, 突然爆发的访问高峰。网站需要对线上生产环境进行自动监控, 对服务器进行心跳检测, 并监控其各项性能指标和应用程序的关键数据指标。如果发现异常, 超出预设的阈值, 就进行自动报警, 向相关人员发送报警信息, 警告故障可能会发生。在检测到故障发生之后, 系统会进行自动化失效转移, 将失效的服务器从集群中隔离出去, 不在处理系统中的应用请求。待故障消除后, 系统进行自动化失效恢复, 重新启动服务, 同步数据保证数据的一致性。在网站遇到访问高峰, 超出网站最大处理能力时, 为了保证整个网站的安全可用, 还会进行自动化降级, 通过拒绝部分请求及关闭部分不重要的服务将系统负载降至一个安全的水平, 必要时, 还需要自动化分配资源, 将空闲资源分配给重要的服务, 扩大其部署规模。\n\n# 说明\n\n以上两段是我对原文的摘抄, 文章中也说明了是理想状态, 那么我就来说说我的看法:\n\n我的工作时间不长, 但是就我的经历而言, 部署和运维的确经常成为加班的一个重要原因。最重要的是, 这些步骤可以通过脚本的方式实现自动化。就如文章中提到的那样, 代码的管理, 测试, 部署, 出问题之后的解决等等, 都可以自动化, 那么我的问题是, 应该从哪方面入手? 再写自动化处理错误的脚本时, 应该将自己想象成什么角色? 将该脚本的行为模拟成一个用户? 这个用户不停的对网站的所有服务进行访问(心跳检测), 想到这里我想明白了, 就是应该这样做, 将几个角色分别以脚本的形式对网站进行维护: 用户, 对网站的所有服务进行测试; 运维, 当用户测试出了问题时, 应当及时对出问题的服务器进行应急处理; 报警人员: 出问题时, 及时通知相关人员处理问题等等, 这样, 就可以让机器代替人类来做这些麻烦而且容易出错的事情了。\n","slug":"note/read_note/web-site-framework/auto-deploy-hot-update","published":1,"updated":"2022-10-07T13:04:53.157Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejyw00a63vsbhovd2h1r","content":"<h1 id=\"摘抄\"><a href=\"#摘抄\" class=\"headerlink\" title=\"摘抄:\"></a>摘抄:</h1><p>在无人值守的情况下, 一切都可以自动化是网站的理想状态。目前大型网站的自动化架构设计主要集中在发布运维方面。</p>\n<p>发布对于网站来说是头等大事, 许多网站故障出在发布环节, 网站工程师经常加班也是因为发布不顺利。通过减少人为干预, 使发布过程自动化可有效减少故障。发布过程包括诸多环节。自动化代码管理, 代码版本控制, 代码分支创建合并等过程自动化, 开发工程师只要提交自己参与开发的产品代号, 系统就会自动为其创建开发分支。后期会自动进行代码合并。自动化测试, 代码开发完成, 提交测试后, 系统自动将代码部署到测试环境, 启动自动化测试用例进行测试, 向相关人员发送测试报告, 像系统反馈测试结果。自动化安全检测, 安全检测工具通过对代码进行静态安全扫描及部署到安全测试环境进行安全测试, 评估其安全性。最后进行自动化部署, 将工程代码自动部署到线上生产环境。</p>\n<span id=\"more\"></span>\n\n<p>此外, 网站在运行过程中可能会遇到各种问题: 服务器宕机, 程序bug, 存储空间不足, 突然爆发的访问高峰。网站需要对线上生产环境进行自动监控, 对服务器进行心跳检测, 并监控其各项性能指标和应用程序的关键数据指标。如果发现异常, 超出预设的阈值, 就进行自动报警, 向相关人员发送报警信息, 警告故障可能会发生。在检测到故障发生之后, 系统会进行自动化失效转移, 将失效的服务器从集群中隔离出去, 不在处理系统中的应用请求。待故障消除后, 系统进行自动化失效恢复, 重新启动服务, 同步数据保证数据的一致性。在网站遇到访问高峰, 超出网站最大处理能力时, 为了保证整个网站的安全可用, 还会进行自动化降级, 通过拒绝部分请求及关闭部分不重要的服务将系统负载降至一个安全的水平, 必要时, 还需要自动化分配资源, 将空闲资源分配给重要的服务, 扩大其部署规模。</p>\n<h1 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h1><p>以上两段是我对原文的摘抄, 文章中也说明了是理想状态, 那么我就来说说我的看法:</p>\n<p>我的工作时间不长, 但是就我的经历而言, 部署和运维的确经常成为加班的一个重要原因。最重要的是, 这些步骤可以通过脚本的方式实现自动化。就如文章中提到的那样, 代码的管理, 测试, 部署, 出问题之后的解决等等, 都可以自动化, 那么我的问题是, 应该从哪方面入手? 再写自动化处理错误的脚本时, 应该将自己想象成什么角色? 将该脚本的行为模拟成一个用户? 这个用户不停的对网站的所有服务进行访问(心跳检测), 想到这里我想明白了, 就是应该这样做, 将几个角色分别以脚本的形式对网站进行维护: 用户, 对网站的所有服务进行测试; 运维, 当用户测试出了问题时, 应当及时对出问题的服务器进行应急处理; 报警人员: 出问题时, 及时通知相关人员处理问题等等, 这样, 就可以让机器代替人类来做这些麻烦而且容易出错的事情了。</p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"摘抄\"><a href=\"#摘抄\" class=\"headerlink\" title=\"摘抄:\"></a>摘抄:</h1><p>在无人值守的情况下, 一切都可以自动化是网站的理想状态。目前大型网站的自动化架构设计主要集中在发布运维方面。</p>\n<p>发布对于网站来说是头等大事, 许多网站故障出在发布环节, 网站工程师经常加班也是因为发布不顺利。通过减少人为干预, 使发布过程自动化可有效减少故障。发布过程包括诸多环节。自动化代码管理, 代码版本控制, 代码分支创建合并等过程自动化, 开发工程师只要提交自己参与开发的产品代号, 系统就会自动为其创建开发分支。后期会自动进行代码合并。自动化测试, 代码开发完成, 提交测试后, 系统自动将代码部署到测试环境, 启动自动化测试用例进行测试, 向相关人员发送测试报告, 像系统反馈测试结果。自动化安全检测, 安全检测工具通过对代码进行静态安全扫描及部署到安全测试环境进行安全测试, 评估其安全性。最后进行自动化部署, 将工程代码自动部署到线上生产环境。</p>","more":"<p>此外, 网站在运行过程中可能会遇到各种问题: 服务器宕机, 程序bug, 存储空间不足, 突然爆发的访问高峰。网站需要对线上生产环境进行自动监控, 对服务器进行心跳检测, 并监控其各项性能指标和应用程序的关键数据指标。如果发现异常, 超出预设的阈值, 就进行自动报警, 向相关人员发送报警信息, 警告故障可能会发生。在检测到故障发生之后, 系统会进行自动化失效转移, 将失效的服务器从集群中隔离出去, 不在处理系统中的应用请求。待故障消除后, 系统进行自动化失效恢复, 重新启动服务, 同步数据保证数据的一致性。在网站遇到访问高峰, 超出网站最大处理能力时, 为了保证整个网站的安全可用, 还会进行自动化降级, 通过拒绝部分请求及关闭部分不重要的服务将系统负载降至一个安全的水平, 必要时, 还需要自动化分配资源, 将空闲资源分配给重要的服务, 扩大其部署规模。</p>\n<h1 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h1><p>以上两段是我对原文的摘抄, 文章中也说明了是理想状态, 那么我就来说说我的看法:</p>\n<p>我的工作时间不长, 但是就我的经历而言, 部署和运维的确经常成为加班的一个重要原因。最重要的是, 这些步骤可以通过脚本的方式实现自动化。就如文章中提到的那样, 代码的管理, 测试, 部署, 出问题之后的解决等等, 都可以自动化, 那么我的问题是, 应该从哪方面入手? 再写自动化处理错误的脚本时, 应该将自己想象成什么角色? 将该脚本的行为模拟成一个用户? 这个用户不停的对网站的所有服务进行访问(心跳检测), 想到这里我想明白了, 就是应该这样做, 将几个角色分别以脚本的形式对网站进行维护: 用户, 对网站的所有服务进行测试; 运维, 当用户测试出了问题时, 应当及时对出问题的服务器进行应急处理; 报警人员: 出问题时, 及时通知相关人员处理问题等等, 这样, 就可以让机器代替人类来做这些麻烦而且容易出错的事情了。</p>"},{"title":"性能测试指标介绍","date":"2019-12-14T18:38:46.000Z","_content":"\n# 摘抄\n\n性能测试指标\n\n不同视角下有不同的性能标准, 不同的标准有不同的性能测试指标, 从开发到测试人员的视角, 网站性能测试的主要指标有响应时间, 并发数, 吞吐量, 性能计数器等。\n\n* 响应时间\n\n指应用执行一个操作需要的时间, 包括从发出请求开始到收到最后响应数据结束所需要的时间。响应时间是系统最重要的性能指标, 直观的反映了系统的\"快慢\"。下面列出了一些常用的系统操作需要的响应时间。\n\n<!--more-->\n\n常用系统操作响应时间表\n\n| 操作 | 响应时间 |\n| :--- | :------: |\n| 打开一个网站 | 几秒 |\n| 在数据库中查询一条记录(有索引) | 十几毫秒 |\n| 机械磁盘一次寻址定位 | 4毫秒 |\n| 从机械磁盘顺序读取1MB数据 | 2毫秒 |\n| 从 SSD 磁盘读取1MB数据 | 0.3毫秒 |\n| 从远程分布式缓存 Redis 读取一个数据 | 0.5毫秒 |\n| 从内存中读取1MB数据 | 十几微秒 |\n| Java程序本地方法调用 | 几微秒 |\n| 网络传输2KB数据 | 1微秒 |\n\n测试程序通过模拟应用程序, 记录收到响应和发出请求之间的时间差来计算系统响应时间。但是记录及获取系统时间这个操作也需要花费一定的时间, 如果测试目标操作本身需要花费的时间极少, 比如几微秒, 那么测试程序就无法测试得到系统的响应时间。\n实践中通常采用的办法是重复请求, 比如一个请求操作重复执行一万次, 测试一万次执行需要的总响应时间之和, 然后除以一万, 得到单次请求的响应时间。\n\n# 思考\n\n可以编写测试程序(并不非得将测试用例放入网站代码中, 可以直接以爬虫或其他形式来测试网站响应的时间。可以编写不同类型的爬虫, 用来测试不同情况的响应时间。)\n\n# 摘抄\n\n* 并发数\n\n指系统能够同时处理请求的数目, 这个数字也反映了系统的负载特性。对于网站而言, 并发数即网站并发用户数, 指同时提交请求的用户数目。\n\n与网站并发用户数相对应的还有网站在线用户数(当前登录网站的用户总数)和网站系统用户数(可能访问系统的总用户数, 对多数网站而言就是注册用户数)。其数量比较关系为:\n\n> 网站系统用户数 > 网站在线用户数 > 网站并发用户数\n\n测试程序通过多线程模拟并发用户的办法来测试系统的并发处理能力, 为了真实模拟用户行为, 测试程序并不是启动多线程然后不停的发送请求, 而是在两次请求之间加入一个随机等待时间, 这个时间被称为思考时间。\n\n# 思考\n\n我觉得在技术准备方面, 应该总要比运营人员预估的并发用户数多一倍做准备, 在测试也应如此。\n\n# 摘抄\n\n* 吞吐量\n\n指单位时间内系统处理的请求数量, 体现系统的整体处理能力。对于网站, 可以用\"请求数/秒\"或是\"页面数/秒\"来衡量, 也可以用\"访问人数/天\"或是\"处理的业务数/小时\"等来衡量。TPS(每秒事务数)是吞吐量的一个常用量化指标, 此外还有HPS(每秒HTTP请求数), QPS(每秒查询数)等。\n\n系统吞吐量和系统并发数, 以及响应时间的关系可以形象地理解为高速公路的通行状况: 吞吐量是每天通过收费站的车辆数目(可以换算成收费站收取的高速费), 并发数是高速公路上正在行驶的车辆数目, 响应时间是车速。车辆很少时, 车速很快, 但是收到的高速费也相应较少; 随着高速公路上车辆数目的增多, 车速略受影响, 但是收到的高速费增加很快; 随着车辆的继续增加, 车速变得越来越慢, 高速公路越来越堵, 收费不增反降; 如果车流量继续增加, 超过某个极限, 任何偶然因素都会导致高速公路全部瘫痪, 车走不动, 费当然收不到, 而高速公路成了停车场(资源耗尽)。\n\n# 思考\n\n收费站的比喻虽然形象, 但是略微有些不恰当。应用在处理并发问题时, 几乎是来者不拒, 而收费站则是队列模式, 所以在处理该问题时, 应当使用队列规范请求。\n\n# 摘抄\n\n性能计数器\n\n它是描述服务器或操作系统性能的一些数据指标。包括 System Load, 对象与线程数, 内存使用, CPU 使用, 磁盘与网络 I/O 等指标。这些指标也是系统监控的重要参数, 对这些指标设置报警阈值, 当监控系统发现性能计数器超过阈值时, 就向运维和开发人员报警, 及时发现处理异常。\n\nSystem Load 即系统负载, 指当前正在被 CPU 执行和等待被 CPU 执行的进程数目综合, 是反映系统忙闲程度的重要指标。多核 CPU 的情况下, 完美情况时所有 CPU 都在使用, 没有进程等待处理, 所以 Load 的理想值是 CPU 的数目。当 Load 值低于 CPU 数目的时候, 表示有 CPU 空闲, 资源存在浪费; 当 Load值高于 CPU 数目的时候, 表示进程在排队等待 CPU 调度, 表示系统资源不足, 影响应用程序的执行性能。在 Linux 系统中使用 top 命令查看, 该值是三个浮点数, 表示最近 1 分钟, 10分钟, 15分钟的运行队列平均进程数。\n\n> top -xx:xx:xx up 1 day, x:xx x users, load overage: 0.14, 0.20, 0.16\n\n# 思考\n\n本段介绍了系统负载, 当在评估当前服务器的配置是否符合网站所需时, 该指标是一个重要的参考。\n\n","source":"_posts/note/read_note/web-site-framework/profermence-test-example.md","raw":"---\ntitle: 性能测试指标介绍\ndate: 2019-12-15 02:38:46\ncategories:\n- 笔记\n- 读书笔记\n- 大型网站技术架构\ntags:\n- 性能\n---\n\n# 摘抄\n\n性能测试指标\n\n不同视角下有不同的性能标准, 不同的标准有不同的性能测试指标, 从开发到测试人员的视角, 网站性能测试的主要指标有响应时间, 并发数, 吞吐量, 性能计数器等。\n\n* 响应时间\n\n指应用执行一个操作需要的时间, 包括从发出请求开始到收到最后响应数据结束所需要的时间。响应时间是系统最重要的性能指标, 直观的反映了系统的\"快慢\"。下面列出了一些常用的系统操作需要的响应时间。\n\n<!--more-->\n\n常用系统操作响应时间表\n\n| 操作 | 响应时间 |\n| :--- | :------: |\n| 打开一个网站 | 几秒 |\n| 在数据库中查询一条记录(有索引) | 十几毫秒 |\n| 机械磁盘一次寻址定位 | 4毫秒 |\n| 从机械磁盘顺序读取1MB数据 | 2毫秒 |\n| 从 SSD 磁盘读取1MB数据 | 0.3毫秒 |\n| 从远程分布式缓存 Redis 读取一个数据 | 0.5毫秒 |\n| 从内存中读取1MB数据 | 十几微秒 |\n| Java程序本地方法调用 | 几微秒 |\n| 网络传输2KB数据 | 1微秒 |\n\n测试程序通过模拟应用程序, 记录收到响应和发出请求之间的时间差来计算系统响应时间。但是记录及获取系统时间这个操作也需要花费一定的时间, 如果测试目标操作本身需要花费的时间极少, 比如几微秒, 那么测试程序就无法测试得到系统的响应时间。\n实践中通常采用的办法是重复请求, 比如一个请求操作重复执行一万次, 测试一万次执行需要的总响应时间之和, 然后除以一万, 得到单次请求的响应时间。\n\n# 思考\n\n可以编写测试程序(并不非得将测试用例放入网站代码中, 可以直接以爬虫或其他形式来测试网站响应的时间。可以编写不同类型的爬虫, 用来测试不同情况的响应时间。)\n\n# 摘抄\n\n* 并发数\n\n指系统能够同时处理请求的数目, 这个数字也反映了系统的负载特性。对于网站而言, 并发数即网站并发用户数, 指同时提交请求的用户数目。\n\n与网站并发用户数相对应的还有网站在线用户数(当前登录网站的用户总数)和网站系统用户数(可能访问系统的总用户数, 对多数网站而言就是注册用户数)。其数量比较关系为:\n\n> 网站系统用户数 > 网站在线用户数 > 网站并发用户数\n\n测试程序通过多线程模拟并发用户的办法来测试系统的并发处理能力, 为了真实模拟用户行为, 测试程序并不是启动多线程然后不停的发送请求, 而是在两次请求之间加入一个随机等待时间, 这个时间被称为思考时间。\n\n# 思考\n\n我觉得在技术准备方面, 应该总要比运营人员预估的并发用户数多一倍做准备, 在测试也应如此。\n\n# 摘抄\n\n* 吞吐量\n\n指单位时间内系统处理的请求数量, 体现系统的整体处理能力。对于网站, 可以用\"请求数/秒\"或是\"页面数/秒\"来衡量, 也可以用\"访问人数/天\"或是\"处理的业务数/小时\"等来衡量。TPS(每秒事务数)是吞吐量的一个常用量化指标, 此外还有HPS(每秒HTTP请求数), QPS(每秒查询数)等。\n\n系统吞吐量和系统并发数, 以及响应时间的关系可以形象地理解为高速公路的通行状况: 吞吐量是每天通过收费站的车辆数目(可以换算成收费站收取的高速费), 并发数是高速公路上正在行驶的车辆数目, 响应时间是车速。车辆很少时, 车速很快, 但是收到的高速费也相应较少; 随着高速公路上车辆数目的增多, 车速略受影响, 但是收到的高速费增加很快; 随着车辆的继续增加, 车速变得越来越慢, 高速公路越来越堵, 收费不增反降; 如果车流量继续增加, 超过某个极限, 任何偶然因素都会导致高速公路全部瘫痪, 车走不动, 费当然收不到, 而高速公路成了停车场(资源耗尽)。\n\n# 思考\n\n收费站的比喻虽然形象, 但是略微有些不恰当。应用在处理并发问题时, 几乎是来者不拒, 而收费站则是队列模式, 所以在处理该问题时, 应当使用队列规范请求。\n\n# 摘抄\n\n性能计数器\n\n它是描述服务器或操作系统性能的一些数据指标。包括 System Load, 对象与线程数, 内存使用, CPU 使用, 磁盘与网络 I/O 等指标。这些指标也是系统监控的重要参数, 对这些指标设置报警阈值, 当监控系统发现性能计数器超过阈值时, 就向运维和开发人员报警, 及时发现处理异常。\n\nSystem Load 即系统负载, 指当前正在被 CPU 执行和等待被 CPU 执行的进程数目综合, 是反映系统忙闲程度的重要指标。多核 CPU 的情况下, 完美情况时所有 CPU 都在使用, 没有进程等待处理, 所以 Load 的理想值是 CPU 的数目。当 Load 值低于 CPU 数目的时候, 表示有 CPU 空闲, 资源存在浪费; 当 Load值高于 CPU 数目的时候, 表示进程在排队等待 CPU 调度, 表示系统资源不足, 影响应用程序的执行性能。在 Linux 系统中使用 top 命令查看, 该值是三个浮点数, 表示最近 1 分钟, 10分钟, 15分钟的运行队列平均进程数。\n\n> top -xx:xx:xx up 1 day, x:xx x users, load overage: 0.14, 0.20, 0.16\n\n# 思考\n\n本段介绍了系统负载, 当在评估当前服务器的配置是否符合网站所需时, 该指标是一个重要的参考。\n\n","slug":"note/read_note/web-site-framework/profermence-test-example","published":1,"updated":"2022-10-07T13:05:00.921Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejyz00a73vsb6nhka7ry","content":"<h1 id=\"摘抄\"><a href=\"#摘抄\" class=\"headerlink\" title=\"摘抄\"></a>摘抄</h1><p>性能测试指标</p>\n<p>不同视角下有不同的性能标准, 不同的标准有不同的性能测试指标, 从开发到测试人员的视角, 网站性能测试的主要指标有响应时间, 并发数, 吞吐量, 性能计数器等。</p>\n<ul>\n<li>响应时间</li>\n</ul>\n<p>指应用执行一个操作需要的时间, 包括从发出请求开始到收到最后响应数据结束所需要的时间。响应时间是系统最重要的性能指标, 直观的反映了系统的”快慢”。下面列出了一些常用的系统操作需要的响应时间。</p>\n<span id=\"more\"></span>\n\n<p>常用系统操作响应时间表</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">操作</th>\n<th align=\"center\">响应时间</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">打开一个网站</td>\n<td align=\"center\">几秒</td>\n</tr>\n<tr>\n<td align=\"left\">在数据库中查询一条记录(有索引)</td>\n<td align=\"center\">十几毫秒</td>\n</tr>\n<tr>\n<td align=\"left\">机械磁盘一次寻址定位</td>\n<td align=\"center\">4毫秒</td>\n</tr>\n<tr>\n<td align=\"left\">从机械磁盘顺序读取1MB数据</td>\n<td align=\"center\">2毫秒</td>\n</tr>\n<tr>\n<td align=\"left\">从 SSD 磁盘读取1MB数据</td>\n<td align=\"center\">0.3毫秒</td>\n</tr>\n<tr>\n<td align=\"left\">从远程分布式缓存 Redis 读取一个数据</td>\n<td align=\"center\">0.5毫秒</td>\n</tr>\n<tr>\n<td align=\"left\">从内存中读取1MB数据</td>\n<td align=\"center\">十几微秒</td>\n</tr>\n<tr>\n<td align=\"left\">Java程序本地方法调用</td>\n<td align=\"center\">几微秒</td>\n</tr>\n<tr>\n<td align=\"left\">网络传输2KB数据</td>\n<td align=\"center\">1微秒</td>\n</tr>\n</tbody></table>\n<p>测试程序通过模拟应用程序, 记录收到响应和发出请求之间的时间差来计算系统响应时间。但是记录及获取系统时间这个操作也需要花费一定的时间, 如果测试目标操作本身需要花费的时间极少, 比如几微秒, 那么测试程序就无法测试得到系统的响应时间。<br>实践中通常采用的办法是重复请求, 比如一个请求操作重复执行一万次, 测试一万次执行需要的总响应时间之和, 然后除以一万, 得到单次请求的响应时间。</p>\n<h1 id=\"思考\"><a href=\"#思考\" class=\"headerlink\" title=\"思考\"></a>思考</h1><p>可以编写测试程序(并不非得将测试用例放入网站代码中, 可以直接以爬虫或其他形式来测试网站响应的时间。可以编写不同类型的爬虫, 用来测试不同情况的响应时间。)</p>\n<h1 id=\"摘抄-1\"><a href=\"#摘抄-1\" class=\"headerlink\" title=\"摘抄\"></a>摘抄</h1><ul>\n<li>并发数</li>\n</ul>\n<p>指系统能够同时处理请求的数目, 这个数字也反映了系统的负载特性。对于网站而言, 并发数即网站并发用户数, 指同时提交请求的用户数目。</p>\n<p>与网站并发用户数相对应的还有网站在线用户数(当前登录网站的用户总数)和网站系统用户数(可能访问系统的总用户数, 对多数网站而言就是注册用户数)。其数量比较关系为:</p>\n<blockquote>\n<p>网站系统用户数 &gt; 网站在线用户数 &gt; 网站并发用户数</p>\n</blockquote>\n<p>测试程序通过多线程模拟并发用户的办法来测试系统的并发处理能力, 为了真实模拟用户行为, 测试程序并不是启动多线程然后不停的发送请求, 而是在两次请求之间加入一个随机等待时间, 这个时间被称为思考时间。</p>\n<h1 id=\"思考-1\"><a href=\"#思考-1\" class=\"headerlink\" title=\"思考\"></a>思考</h1><p>我觉得在技术准备方面, 应该总要比运营人员预估的并发用户数多一倍做准备, 在测试也应如此。</p>\n<h1 id=\"摘抄-2\"><a href=\"#摘抄-2\" class=\"headerlink\" title=\"摘抄\"></a>摘抄</h1><ul>\n<li>吞吐量</li>\n</ul>\n<p>指单位时间内系统处理的请求数量, 体现系统的整体处理能力。对于网站, 可以用”请求数&#x2F;秒”或是”页面数&#x2F;秒”来衡量, 也可以用”访问人数&#x2F;天”或是”处理的业务数&#x2F;小时”等来衡量。TPS(每秒事务数)是吞吐量的一个常用量化指标, 此外还有HPS(每秒HTTP请求数), QPS(每秒查询数)等。</p>\n<p>系统吞吐量和系统并发数, 以及响应时间的关系可以形象地理解为高速公路的通行状况: 吞吐量是每天通过收费站的车辆数目(可以换算成收费站收取的高速费), 并发数是高速公路上正在行驶的车辆数目, 响应时间是车速。车辆很少时, 车速很快, 但是收到的高速费也相应较少; 随着高速公路上车辆数目的增多, 车速略受影响, 但是收到的高速费增加很快; 随着车辆的继续增加, 车速变得越来越慢, 高速公路越来越堵, 收费不增反降; 如果车流量继续增加, 超过某个极限, 任何偶然因素都会导致高速公路全部瘫痪, 车走不动, 费当然收不到, 而高速公路成了停车场(资源耗尽)。</p>\n<h1 id=\"思考-2\"><a href=\"#思考-2\" class=\"headerlink\" title=\"思考\"></a>思考</h1><p>收费站的比喻虽然形象, 但是略微有些不恰当。应用在处理并发问题时, 几乎是来者不拒, 而收费站则是队列模式, 所以在处理该问题时, 应当使用队列规范请求。</p>\n<h1 id=\"摘抄-3\"><a href=\"#摘抄-3\" class=\"headerlink\" title=\"摘抄\"></a>摘抄</h1><p>性能计数器</p>\n<p>它是描述服务器或操作系统性能的一些数据指标。包括 System Load, 对象与线程数, 内存使用, CPU 使用, 磁盘与网络 I&#x2F;O 等指标。这些指标也是系统监控的重要参数, 对这些指标设置报警阈值, 当监控系统发现性能计数器超过阈值时, 就向运维和开发人员报警, 及时发现处理异常。</p>\n<p>System Load 即系统负载, 指当前正在被 CPU 执行和等待被 CPU 执行的进程数目综合, 是反映系统忙闲程度的重要指标。多核 CPU 的情况下, 完美情况时所有 CPU 都在使用, 没有进程等待处理, 所以 Load 的理想值是 CPU 的数目。当 Load 值低于 CPU 数目的时候, 表示有 CPU 空闲, 资源存在浪费; 当 Load值高于 CPU 数目的时候, 表示进程在排队等待 CPU 调度, 表示系统资源不足, 影响应用程序的执行性能。在 Linux 系统中使用 top 命令查看, 该值是三个浮点数, 表示最近 1 分钟, 10分钟, 15分钟的运行队列平均进程数。</p>\n<blockquote>\n<p>top -xx:xx:xx up 1 day, x:xx x users, load overage: 0.14, 0.20, 0.16</p>\n</blockquote>\n<h1 id=\"思考-3\"><a href=\"#思考-3\" class=\"headerlink\" title=\"思考\"></a>思考</h1><p>本段介绍了系统负载, 当在评估当前服务器的配置是否符合网站所需时, 该指标是一个重要的参考。</p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"摘抄\"><a href=\"#摘抄\" class=\"headerlink\" title=\"摘抄\"></a>摘抄</h1><p>性能测试指标</p>\n<p>不同视角下有不同的性能标准, 不同的标准有不同的性能测试指标, 从开发到测试人员的视角, 网站性能测试的主要指标有响应时间, 并发数, 吞吐量, 性能计数器等。</p>\n<ul>\n<li>响应时间</li>\n</ul>\n<p>指应用执行一个操作需要的时间, 包括从发出请求开始到收到最后响应数据结束所需要的时间。响应时间是系统最重要的性能指标, 直观的反映了系统的”快慢”。下面列出了一些常用的系统操作需要的响应时间。</p>","more":"<p>常用系统操作响应时间表</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">操作</th>\n<th align=\"center\">响应时间</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">打开一个网站</td>\n<td align=\"center\">几秒</td>\n</tr>\n<tr>\n<td align=\"left\">在数据库中查询一条记录(有索引)</td>\n<td align=\"center\">十几毫秒</td>\n</tr>\n<tr>\n<td align=\"left\">机械磁盘一次寻址定位</td>\n<td align=\"center\">4毫秒</td>\n</tr>\n<tr>\n<td align=\"left\">从机械磁盘顺序读取1MB数据</td>\n<td align=\"center\">2毫秒</td>\n</tr>\n<tr>\n<td align=\"left\">从 SSD 磁盘读取1MB数据</td>\n<td align=\"center\">0.3毫秒</td>\n</tr>\n<tr>\n<td align=\"left\">从远程分布式缓存 Redis 读取一个数据</td>\n<td align=\"center\">0.5毫秒</td>\n</tr>\n<tr>\n<td align=\"left\">从内存中读取1MB数据</td>\n<td align=\"center\">十几微秒</td>\n</tr>\n<tr>\n<td align=\"left\">Java程序本地方法调用</td>\n<td align=\"center\">几微秒</td>\n</tr>\n<tr>\n<td align=\"left\">网络传输2KB数据</td>\n<td align=\"center\">1微秒</td>\n</tr>\n</tbody></table>\n<p>测试程序通过模拟应用程序, 记录收到响应和发出请求之间的时间差来计算系统响应时间。但是记录及获取系统时间这个操作也需要花费一定的时间, 如果测试目标操作本身需要花费的时间极少, 比如几微秒, 那么测试程序就无法测试得到系统的响应时间。<br>实践中通常采用的办法是重复请求, 比如一个请求操作重复执行一万次, 测试一万次执行需要的总响应时间之和, 然后除以一万, 得到单次请求的响应时间。</p>\n<h1 id=\"思考\"><a href=\"#思考\" class=\"headerlink\" title=\"思考\"></a>思考</h1><p>可以编写测试程序(并不非得将测试用例放入网站代码中, 可以直接以爬虫或其他形式来测试网站响应的时间。可以编写不同类型的爬虫, 用来测试不同情况的响应时间。)</p>\n<h1 id=\"摘抄-1\"><a href=\"#摘抄-1\" class=\"headerlink\" title=\"摘抄\"></a>摘抄</h1><ul>\n<li>并发数</li>\n</ul>\n<p>指系统能够同时处理请求的数目, 这个数字也反映了系统的负载特性。对于网站而言, 并发数即网站并发用户数, 指同时提交请求的用户数目。</p>\n<p>与网站并发用户数相对应的还有网站在线用户数(当前登录网站的用户总数)和网站系统用户数(可能访问系统的总用户数, 对多数网站而言就是注册用户数)。其数量比较关系为:</p>\n<blockquote>\n<p>网站系统用户数 &gt; 网站在线用户数 &gt; 网站并发用户数</p>\n</blockquote>\n<p>测试程序通过多线程模拟并发用户的办法来测试系统的并发处理能力, 为了真实模拟用户行为, 测试程序并不是启动多线程然后不停的发送请求, 而是在两次请求之间加入一个随机等待时间, 这个时间被称为思考时间。</p>\n<h1 id=\"思考-1\"><a href=\"#思考-1\" class=\"headerlink\" title=\"思考\"></a>思考</h1><p>我觉得在技术准备方面, 应该总要比运营人员预估的并发用户数多一倍做准备, 在测试也应如此。</p>\n<h1 id=\"摘抄-2\"><a href=\"#摘抄-2\" class=\"headerlink\" title=\"摘抄\"></a>摘抄</h1><ul>\n<li>吞吐量</li>\n</ul>\n<p>指单位时间内系统处理的请求数量, 体现系统的整体处理能力。对于网站, 可以用”请求数&#x2F;秒”或是”页面数&#x2F;秒”来衡量, 也可以用”访问人数&#x2F;天”或是”处理的业务数&#x2F;小时”等来衡量。TPS(每秒事务数)是吞吐量的一个常用量化指标, 此外还有HPS(每秒HTTP请求数), QPS(每秒查询数)等。</p>\n<p>系统吞吐量和系统并发数, 以及响应时间的关系可以形象地理解为高速公路的通行状况: 吞吐量是每天通过收费站的车辆数目(可以换算成收费站收取的高速费), 并发数是高速公路上正在行驶的车辆数目, 响应时间是车速。车辆很少时, 车速很快, 但是收到的高速费也相应较少; 随着高速公路上车辆数目的增多, 车速略受影响, 但是收到的高速费增加很快; 随着车辆的继续增加, 车速变得越来越慢, 高速公路越来越堵, 收费不增反降; 如果车流量继续增加, 超过某个极限, 任何偶然因素都会导致高速公路全部瘫痪, 车走不动, 费当然收不到, 而高速公路成了停车场(资源耗尽)。</p>\n<h1 id=\"思考-2\"><a href=\"#思考-2\" class=\"headerlink\" title=\"思考\"></a>思考</h1><p>收费站的比喻虽然形象, 但是略微有些不恰当。应用在处理并发问题时, 几乎是来者不拒, 而收费站则是队列模式, 所以在处理该问题时, 应当使用队列规范请求。</p>\n<h1 id=\"摘抄-3\"><a href=\"#摘抄-3\" class=\"headerlink\" title=\"摘抄\"></a>摘抄</h1><p>性能计数器</p>\n<p>它是描述服务器或操作系统性能的一些数据指标。包括 System Load, 对象与线程数, 内存使用, CPU 使用, 磁盘与网络 I&#x2F;O 等指标。这些指标也是系统监控的重要参数, 对这些指标设置报警阈值, 当监控系统发现性能计数器超过阈值时, 就向运维和开发人员报警, 及时发现处理异常。</p>\n<p>System Load 即系统负载, 指当前正在被 CPU 执行和等待被 CPU 执行的进程数目综合, 是反映系统忙闲程度的重要指标。多核 CPU 的情况下, 完美情况时所有 CPU 都在使用, 没有进程等待处理, 所以 Load 的理想值是 CPU 的数目。当 Load 值低于 CPU 数目的时候, 表示有 CPU 空闲, 资源存在浪费; 当 Load值高于 CPU 数目的时候, 表示进程在排队等待 CPU 调度, 表示系统资源不足, 影响应用程序的执行性能。在 Linux 系统中使用 top 命令查看, 该值是三个浮点数, 表示最近 1 分钟, 10分钟, 15分钟的运行队列平均进程数。</p>\n<blockquote>\n<p>top -xx:xx:xx up 1 day, x:xx x users, load overage: 0.14, 0.20, 0.16</p>\n</blockquote>\n<h1 id=\"思考-3\"><a href=\"#思考-3\" class=\"headerlink\" title=\"思考\"></a>思考</h1><p>本段介绍了系统负载, 当在评估当前服务器的配置是否符合网站所需时, 该指标是一个重要的参考。</p>"},{"title":"性能测试方法和报告","date":"2019-12-15T11:38:46.000Z","_content":"\n# 摘抄\n\n性能测试方法\n\n具体可分为性能测试, 负载测试, 压力测试, 稳定性测试。\n\n* 性能测试\n\n以系统设计初期规划的性能指标为预期目标, 对系统不断施加压力, 验证系统在资源可接受范围内, 是否能达到性能预期。\n\n* 负载测试\n\n对系统不断地增加并发请求以增加系统压力, 知道系统的某项或多项性能指标达到安全临界值, 如某种资源已经呈现饱和状态, 这时继续对系统施加压力, 系统的处理能力不但不能提高, 反而会下降。\n\n* 压力测试\n\n超过安全负载的情况下, 对系统继续施加压力, 直到系统崩溃或不能再处理任何请求, 以此来获得系统最大压力承受能力。\n\n* 稳定性测试\n\n被测试系统在特定硬件, 软件, 网络环境条件下, 给系统加载一定业务压力, 使系统运行一段较长时间, 以此检测系统是否稳定。在不同的生产环境, 不同时间点的请求压力是不均匀的, 呈波浪特性, 因此为了更好的模拟生产环境, 稳定性测试也应不均匀地对系统施加压力。\n\n# 思考\n\n如何编写测试用例, 还是一个问题, 因为如果要实现测试自动化, 那么测试用例到底是由开发/测试人员编写, 还是系统自动生成? 如果由开发/测试人员编写, 那会是一个很大的工作量; 如果系统生成, 那么测试用例肯定和业务有关, 如何实现? 还是一个问题。\n\n# 摘抄\n\n性能测试报告\n\n| 并发数 | 响应时间(ms) | TPS | 错误率(%) | Load | 内存(GB) | 备注 |\n| :----- | :----------: | :-: | :-------: | ---: | -------: | :--: |\n| 10 | 500 | 20 | 0 | 5 | 8 | 性能测试 |\n| 20 | 800 | 30 | 0 | 10 | 10 | 性能测试 |\n| 30 | 1000 | 40 | 2 | 15 | 14 | 性能测试 |\n| 40 | 1200 | 45 | 20 | 30 | 16 | 负载测试 |\n| 50 | 2000 | 30 | 40 | 50 | 16 | 压力测试 |\n| 60 | 超时 | 0 | 100 | 不详 | 不祥 | 压力测试 |\n","source":"_posts/note/read_note/web-site-framework/profermence-test-way-method.md","raw":"---\ntitle: 性能测试方法和报告\ndate: 2019-12-15 19:38:46\ncategories:\n- 笔记\n- 读书笔记\n- 大型网站技术架构\ntags:\n- 性能\n---\n\n# 摘抄\n\n性能测试方法\n\n具体可分为性能测试, 负载测试, 压力测试, 稳定性测试。\n\n* 性能测试\n\n以系统设计初期规划的性能指标为预期目标, 对系统不断施加压力, 验证系统在资源可接受范围内, 是否能达到性能预期。\n\n* 负载测试\n\n对系统不断地增加并发请求以增加系统压力, 知道系统的某项或多项性能指标达到安全临界值, 如某种资源已经呈现饱和状态, 这时继续对系统施加压力, 系统的处理能力不但不能提高, 反而会下降。\n\n* 压力测试\n\n超过安全负载的情况下, 对系统继续施加压力, 直到系统崩溃或不能再处理任何请求, 以此来获得系统最大压力承受能力。\n\n* 稳定性测试\n\n被测试系统在特定硬件, 软件, 网络环境条件下, 给系统加载一定业务压力, 使系统运行一段较长时间, 以此检测系统是否稳定。在不同的生产环境, 不同时间点的请求压力是不均匀的, 呈波浪特性, 因此为了更好的模拟生产环境, 稳定性测试也应不均匀地对系统施加压力。\n\n# 思考\n\n如何编写测试用例, 还是一个问题, 因为如果要实现测试自动化, 那么测试用例到底是由开发/测试人员编写, 还是系统自动生成? 如果由开发/测试人员编写, 那会是一个很大的工作量; 如果系统生成, 那么测试用例肯定和业务有关, 如何实现? 还是一个问题。\n\n# 摘抄\n\n性能测试报告\n\n| 并发数 | 响应时间(ms) | TPS | 错误率(%) | Load | 内存(GB) | 备注 |\n| :----- | :----------: | :-: | :-------: | ---: | -------: | :--: |\n| 10 | 500 | 20 | 0 | 5 | 8 | 性能测试 |\n| 20 | 800 | 30 | 0 | 10 | 10 | 性能测试 |\n| 30 | 1000 | 40 | 2 | 15 | 14 | 性能测试 |\n| 40 | 1200 | 45 | 20 | 30 | 16 | 负载测试 |\n| 50 | 2000 | 30 | 40 | 50 | 16 | 压力测试 |\n| 60 | 超时 | 0 | 100 | 不详 | 不祥 | 压力测试 |\n","slug":"note/read_note/web-site-framework/profermence-test-way-method","published":1,"updated":"2022-10-07T13:05:07.649Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejz500aa3vsb0fjcellf","content":"<h1 id=\"摘抄\"><a href=\"#摘抄\" class=\"headerlink\" title=\"摘抄\"></a>摘抄</h1><p>性能测试方法</p>\n<p>具体可分为性能测试, 负载测试, 压力测试, 稳定性测试。</p>\n<ul>\n<li>性能测试</li>\n</ul>\n<p>以系统设计初期规划的性能指标为预期目标, 对系统不断施加压力, 验证系统在资源可接受范围内, 是否能达到性能预期。</p>\n<ul>\n<li>负载测试</li>\n</ul>\n<p>对系统不断地增加并发请求以增加系统压力, 知道系统的某项或多项性能指标达到安全临界值, 如某种资源已经呈现饱和状态, 这时继续对系统施加压力, 系统的处理能力不但不能提高, 反而会下降。</p>\n<ul>\n<li>压力测试</li>\n</ul>\n<p>超过安全负载的情况下, 对系统继续施加压力, 直到系统崩溃或不能再处理任何请求, 以此来获得系统最大压力承受能力。</p>\n<ul>\n<li>稳定性测试</li>\n</ul>\n<p>被测试系统在特定硬件, 软件, 网络环境条件下, 给系统加载一定业务压力, 使系统运行一段较长时间, 以此检测系统是否稳定。在不同的生产环境, 不同时间点的请求压力是不均匀的, 呈波浪特性, 因此为了更好的模拟生产环境, 稳定性测试也应不均匀地对系统施加压力。</p>\n<h1 id=\"思考\"><a href=\"#思考\" class=\"headerlink\" title=\"思考\"></a>思考</h1><p>如何编写测试用例, 还是一个问题, 因为如果要实现测试自动化, 那么测试用例到底是由开发&#x2F;测试人员编写, 还是系统自动生成? 如果由开发&#x2F;测试人员编写, 那会是一个很大的工作量; 如果系统生成, 那么测试用例肯定和业务有关, 如何实现? 还是一个问题。</p>\n<h1 id=\"摘抄-1\"><a href=\"#摘抄-1\" class=\"headerlink\" title=\"摘抄\"></a>摘抄</h1><p>性能测试报告</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">并发数</th>\n<th align=\"center\">响应时间(ms)</th>\n<th align=\"center\">TPS</th>\n<th align=\"center\">错误率(%)</th>\n<th align=\"right\">Load</th>\n<th align=\"right\">内存(GB)</th>\n<th align=\"center\">备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">10</td>\n<td align=\"center\">500</td>\n<td align=\"center\">20</td>\n<td align=\"center\">0</td>\n<td align=\"right\">5</td>\n<td align=\"right\">8</td>\n<td align=\"center\">性能测试</td>\n</tr>\n<tr>\n<td align=\"left\">20</td>\n<td align=\"center\">800</td>\n<td align=\"center\">30</td>\n<td align=\"center\">0</td>\n<td align=\"right\">10</td>\n<td align=\"right\">10</td>\n<td align=\"center\">性能测试</td>\n</tr>\n<tr>\n<td align=\"left\">30</td>\n<td align=\"center\">1000</td>\n<td align=\"center\">40</td>\n<td align=\"center\">2</td>\n<td align=\"right\">15</td>\n<td align=\"right\">14</td>\n<td align=\"center\">性能测试</td>\n</tr>\n<tr>\n<td align=\"left\">40</td>\n<td align=\"center\">1200</td>\n<td align=\"center\">45</td>\n<td align=\"center\">20</td>\n<td align=\"right\">30</td>\n<td align=\"right\">16</td>\n<td align=\"center\">负载测试</td>\n</tr>\n<tr>\n<td align=\"left\">50</td>\n<td align=\"center\">2000</td>\n<td align=\"center\">30</td>\n<td align=\"center\">40</td>\n<td align=\"right\">50</td>\n<td align=\"right\">16</td>\n<td align=\"center\">压力测试</td>\n</tr>\n<tr>\n<td align=\"left\">60</td>\n<td align=\"center\">超时</td>\n<td align=\"center\">0</td>\n<td align=\"center\">100</td>\n<td align=\"right\">不详</td>\n<td align=\"right\">不祥</td>\n<td align=\"center\">压力测试</td>\n</tr>\n</tbody></table>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"","more":"<h1 id=\"摘抄\"><a href=\"#摘抄\" class=\"headerlink\" title=\"摘抄\"></a>摘抄</h1><p>性能测试方法</p>\n<p>具体可分为性能测试, 负载测试, 压力测试, 稳定性测试。</p>\n<ul>\n<li>性能测试</li>\n</ul>\n<p>以系统设计初期规划的性能指标为预期目标, 对系统不断施加压力, 验证系统在资源可接受范围内, 是否能达到性能预期。</p>\n<ul>\n<li>负载测试</li>\n</ul>\n<p>对系统不断地增加并发请求以增加系统压力, 知道系统的某项或多项性能指标达到安全临界值, 如某种资源已经呈现饱和状态, 这时继续对系统施加压力, 系统的处理能力不但不能提高, 反而会下降。</p>\n<ul>\n<li>压力测试</li>\n</ul>\n<p>超过安全负载的情况下, 对系统继续施加压力, 直到系统崩溃或不能再处理任何请求, 以此来获得系统最大压力承受能力。</p>\n<ul>\n<li>稳定性测试</li>\n</ul>\n<p>被测试系统在特定硬件, 软件, 网络环境条件下, 给系统加载一定业务压力, 使系统运行一段较长时间, 以此检测系统是否稳定。在不同的生产环境, 不同时间点的请求压力是不均匀的, 呈波浪特性, 因此为了更好的模拟生产环境, 稳定性测试也应不均匀地对系统施加压力。</p>\n<h1 id=\"思考\"><a href=\"#思考\" class=\"headerlink\" title=\"思考\"></a>思考</h1><p>如何编写测试用例, 还是一个问题, 因为如果要实现测试自动化, 那么测试用例到底是由开发&#x2F;测试人员编写, 还是系统自动生成? 如果由开发&#x2F;测试人员编写, 那会是一个很大的工作量; 如果系统生成, 那么测试用例肯定和业务有关, 如何实现? 还是一个问题。</p>\n<h1 id=\"摘抄-1\"><a href=\"#摘抄-1\" class=\"headerlink\" title=\"摘抄\"></a>摘抄</h1><p>性能测试报告</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">并发数</th>\n<th align=\"center\">响应时间(ms)</th>\n<th align=\"center\">TPS</th>\n<th align=\"center\">错误率(%)</th>\n<th align=\"right\">Load</th>\n<th align=\"right\">内存(GB)</th>\n<th align=\"center\">备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">10</td>\n<td align=\"center\">500</td>\n<td align=\"center\">20</td>\n<td align=\"center\">0</td>\n<td align=\"right\">5</td>\n<td align=\"right\">8</td>\n<td align=\"center\">性能测试</td>\n</tr>\n<tr>\n<td align=\"left\">20</td>\n<td align=\"center\">800</td>\n<td align=\"center\">30</td>\n<td align=\"center\">0</td>\n<td align=\"right\">10</td>\n<td align=\"right\">10</td>\n<td align=\"center\">性能测试</td>\n</tr>\n<tr>\n<td align=\"left\">30</td>\n<td align=\"center\">1000</td>\n<td align=\"center\">40</td>\n<td align=\"center\">2</td>\n<td align=\"right\">15</td>\n<td align=\"right\">14</td>\n<td align=\"center\">性能测试</td>\n</tr>\n<tr>\n<td align=\"left\">40</td>\n<td align=\"center\">1200</td>\n<td align=\"center\">45</td>\n<td align=\"center\">20</td>\n<td align=\"right\">30</td>\n<td align=\"right\">16</td>\n<td align=\"center\">负载测试</td>\n</tr>\n<tr>\n<td align=\"left\">50</td>\n<td align=\"center\">2000</td>\n<td align=\"center\">30</td>\n<td align=\"center\">40</td>\n<td align=\"right\">50</td>\n<td align=\"right\">16</td>\n<td align=\"center\">压力测试</td>\n</tr>\n<tr>\n<td align=\"left\">60</td>\n<td align=\"center\">超时</td>\n<td align=\"center\">0</td>\n<td align=\"center\">100</td>\n<td align=\"right\">不详</td>\n<td align=\"right\">不祥</td>\n<td align=\"center\">压力测试</td>\n</tr>\n</tbody></table>\n"},{"title":"使用缓存来解决性能问题","date":"2019-12-15T05:04:38.000Z","_content":"\n# 摘抄\n\n网站数据访问通常遵循二八定律, 即80%的访问落在20%的数据上, 因此利用 Hash 表和内存的高速访问特性, 将20%的数据缓存起来。\n\n不要将频繁修改的数据放到缓存中\n\n遵守二八定律, 将80%的请求访问的数据放到缓存中\n\n数据不一致与脏读\n\n<!--more-->\n\n**一般会对缓存的数据设置失效时间, 一旦超过失效时间, 就要从数据库中重新加载。因此应用要容忍一定时间的数据不一致, 如卖家已经编辑了商品属性, 但是需要过一段时间才能被买家看到。**\n\n缓存可用性\n\n当缓存服务器崩溃时, 数据库会因为完全不能承受如此大的压力而宕机, 进而导致整个网站不可用。这种情况被称作缓存雪崩。\n解决方案是, 通过分布式缓存服务器集群, 将缓存数据库分布到多台服务器上, 当一台缓存服务器宕机的时候, 只有部分缓存数据丢失, 重新从数据库中加载这部分数据不会对数据库产生很大影响。\n\n## 分布式缓存架构\n\n两种架构方式:\n一种以 JBoss Cache 为代表的需要更新同步的分布式缓存, 一种是以 Memcached 为代表的不互相通信的分布式缓存。\n\nJBoss Cache 的分布式缓存在集群中所有服务器中保存相同的缓存数据, 当某台服务器有缓存数据更新的时候, 会通知其他服务器更新缓存数据。这种方案更多见于企业应用系统中, 很少在大型网站上使用。。\n\nMemcached 采用集中式缓存集群管理, 应用程序通过一致性 Hash 等路由算法选择缓存服务器远程访问缓存数据, 缓存服务器之间不通信。\nMemcached 服务端通信模块基于 Libevent, 一个支持事件触发的网络通信程序库。\nMemcached 的内存管理采用了固定空间分配的方式, Memcached 将内存空间分为一组 slab, 每个 slab 包含一组 chunk, 每个 chunk 的大小是固定的, 拥有相同大小 chunk 的 slab 被组织在一起, 叫做 slab class, 存储数据时根据数据的 size 大小, 寻找一个大于 size 的最小 chunk 将数据写入。\n\n# 思考\n\n这里可以去了解一下 Libevent, \n","source":"_posts/note/read_note/web-site-framework/use-cache.md","raw":"---\ntitle: 使用缓存来解决性能问题\ndate: 2019-12-15 13:04:38\ncategories:\n- 笔记\n- 读书笔记\n- 大型网站技术架构\ntags:\n- 缓存\n---\n\n# 摘抄\n\n网站数据访问通常遵循二八定律, 即80%的访问落在20%的数据上, 因此利用 Hash 表和内存的高速访问特性, 将20%的数据缓存起来。\n\n不要将频繁修改的数据放到缓存中\n\n遵守二八定律, 将80%的请求访问的数据放到缓存中\n\n数据不一致与脏读\n\n<!--more-->\n\n**一般会对缓存的数据设置失效时间, 一旦超过失效时间, 就要从数据库中重新加载。因此应用要容忍一定时间的数据不一致, 如卖家已经编辑了商品属性, 但是需要过一段时间才能被买家看到。**\n\n缓存可用性\n\n当缓存服务器崩溃时, 数据库会因为完全不能承受如此大的压力而宕机, 进而导致整个网站不可用。这种情况被称作缓存雪崩。\n解决方案是, 通过分布式缓存服务器集群, 将缓存数据库分布到多台服务器上, 当一台缓存服务器宕机的时候, 只有部分缓存数据丢失, 重新从数据库中加载这部分数据不会对数据库产生很大影响。\n\n## 分布式缓存架构\n\n两种架构方式:\n一种以 JBoss Cache 为代表的需要更新同步的分布式缓存, 一种是以 Memcached 为代表的不互相通信的分布式缓存。\n\nJBoss Cache 的分布式缓存在集群中所有服务器中保存相同的缓存数据, 当某台服务器有缓存数据更新的时候, 会通知其他服务器更新缓存数据。这种方案更多见于企业应用系统中, 很少在大型网站上使用。。\n\nMemcached 采用集中式缓存集群管理, 应用程序通过一致性 Hash 等路由算法选择缓存服务器远程访问缓存数据, 缓存服务器之间不通信。\nMemcached 服务端通信模块基于 Libevent, 一个支持事件触发的网络通信程序库。\nMemcached 的内存管理采用了固定空间分配的方式, Memcached 将内存空间分为一组 slab, 每个 slab 包含一组 chunk, 每个 chunk 的大小是固定的, 拥有相同大小 chunk 的 slab 被组织在一起, 叫做 slab class, 存储数据时根据数据的 size 大小, 寻找一个大于 size 的最小 chunk 将数据写入。\n\n# 思考\n\n这里可以去了解一下 Libevent, \n","slug":"note/read_note/web-site-framework/use-cache","published":1,"updated":"2022-10-07T13:05:13.165Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejz900ac3vsb3crdc6nz","content":"<h1 id=\"摘抄\"><a href=\"#摘抄\" class=\"headerlink\" title=\"摘抄\"></a>摘抄</h1><p>网站数据访问通常遵循二八定律, 即80%的访问落在20%的数据上, 因此利用 Hash 表和内存的高速访问特性, 将20%的数据缓存起来。</p>\n<p>不要将频繁修改的数据放到缓存中</p>\n<p>遵守二八定律, 将80%的请求访问的数据放到缓存中</p>\n<p>数据不一致与脏读</p>\n<span id=\"more\"></span>\n\n<p><strong>一般会对缓存的数据设置失效时间, 一旦超过失效时间, 就要从数据库中重新加载。因此应用要容忍一定时间的数据不一致, 如卖家已经编辑了商品属性, 但是需要过一段时间才能被买家看到。</strong></p>\n<p>缓存可用性</p>\n<p>当缓存服务器崩溃时, 数据库会因为完全不能承受如此大的压力而宕机, 进而导致整个网站不可用。这种情况被称作缓存雪崩。<br>解决方案是, 通过分布式缓存服务器集群, 将缓存数据库分布到多台服务器上, 当一台缓存服务器宕机的时候, 只有部分缓存数据丢失, 重新从数据库中加载这部分数据不会对数据库产生很大影响。</p>\n<h2 id=\"分布式缓存架构\"><a href=\"#分布式缓存架构\" class=\"headerlink\" title=\"分布式缓存架构\"></a>分布式缓存架构</h2><p>两种架构方式:<br>一种以 JBoss Cache 为代表的需要更新同步的分布式缓存, 一种是以 Memcached 为代表的不互相通信的分布式缓存。</p>\n<p>JBoss Cache 的分布式缓存在集群中所有服务器中保存相同的缓存数据, 当某台服务器有缓存数据更新的时候, 会通知其他服务器更新缓存数据。这种方案更多见于企业应用系统中, 很少在大型网站上使用。。</p>\n<p>Memcached 采用集中式缓存集群管理, 应用程序通过一致性 Hash 等路由算法选择缓存服务器远程访问缓存数据, 缓存服务器之间不通信。<br>Memcached 服务端通信模块基于 Libevent, 一个支持事件触发的网络通信程序库。<br>Memcached 的内存管理采用了固定空间分配的方式, Memcached 将内存空间分为一组 slab, 每个 slab 包含一组 chunk, 每个 chunk 的大小是固定的, 拥有相同大小 chunk 的 slab 被组织在一起, 叫做 slab class, 存储数据时根据数据的 size 大小, 寻找一个大于 size 的最小 chunk 将数据写入。</p>\n<h1 id=\"思考\"><a href=\"#思考\" class=\"headerlink\" title=\"思考\"></a>思考</h1><p>这里可以去了解一下 Libevent, </p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"摘抄\"><a href=\"#摘抄\" class=\"headerlink\" title=\"摘抄\"></a>摘抄</h1><p>网站数据访问通常遵循二八定律, 即80%的访问落在20%的数据上, 因此利用 Hash 表和内存的高速访问特性, 将20%的数据缓存起来。</p>\n<p>不要将频繁修改的数据放到缓存中</p>\n<p>遵守二八定律, 将80%的请求访问的数据放到缓存中</p>\n<p>数据不一致与脏读</p>","more":"<p><strong>一般会对缓存的数据设置失效时间, 一旦超过失效时间, 就要从数据库中重新加载。因此应用要容忍一定时间的数据不一致, 如卖家已经编辑了商品属性, 但是需要过一段时间才能被买家看到。</strong></p>\n<p>缓存可用性</p>\n<p>当缓存服务器崩溃时, 数据库会因为完全不能承受如此大的压力而宕机, 进而导致整个网站不可用。这种情况被称作缓存雪崩。<br>解决方案是, 通过分布式缓存服务器集群, 将缓存数据库分布到多台服务器上, 当一台缓存服务器宕机的时候, 只有部分缓存数据丢失, 重新从数据库中加载这部分数据不会对数据库产生很大影响。</p>\n<h2 id=\"分布式缓存架构\"><a href=\"#分布式缓存架构\" class=\"headerlink\" title=\"分布式缓存架构\"></a>分布式缓存架构</h2><p>两种架构方式:<br>一种以 JBoss Cache 为代表的需要更新同步的分布式缓存, 一种是以 Memcached 为代表的不互相通信的分布式缓存。</p>\n<p>JBoss Cache 的分布式缓存在集群中所有服务器中保存相同的缓存数据, 当某台服务器有缓存数据更新的时候, 会通知其他服务器更新缓存数据。这种方案更多见于企业应用系统中, 很少在大型网站上使用。。</p>\n<p>Memcached 采用集中式缓存集群管理, 应用程序通过一致性 Hash 等路由算法选择缓存服务器远程访问缓存数据, 缓存服务器之间不通信。<br>Memcached 服务端通信模块基于 Libevent, 一个支持事件触发的网络通信程序库。<br>Memcached 的内存管理采用了固定空间分配的方式, Memcached 将内存空间分为一组 slab, 每个 slab 包含一组 chunk, 每个 chunk 的大小是固定的, 拥有相同大小 chunk 的 slab 被组织在一起, 叫做 slab class, 存储数据时根据数据的 size 大小, 寻找一个大于 size 的最小 chunk 将数据写入。</p>\n<h1 id=\"思考\"><a href=\"#思考\" class=\"headerlink\" title=\"思考\"></a>思考</h1><p>这里可以去了解一下 Libevent, </p>"},{"title":"mybatis-enhance 的 ClassTools","date":"2019-01-12T06:58:16.000Z","_content":"\n# 前言\n\n本篇博客专门就`mybatis-enhance`的ClassTools类进行分析, 请先移步[读mybatis-enhance开源项目](/java/read-open-source-java-version-project/read-mybatis-enhance.html)。\n\n<!--more-->\n\n# 分析\n\n## getClasses方法\n\n```java\npublic static Set<Class<?>> getClasses(String pack){\n\t// 第一个class类的集合\n\tSet<Class<?>> classes = new LinkedHashSet<Class<?>>();\n\t// 是否循环迭代\n\tboolean recursive = true;\n\t// 获取包的名字 并进行替换\n\tString packageName = pack;\n\tString packageDirName = packageName.replace('.', '/');\n\t// 定义一个枚举的集合 并进行循环来处理这个目录下的things\n\tEnumeration<URL> dirs;\n\ttry{\n\t\tdirs = Thread.currentThread().getContextClassLoader().getResources(packageDirName);\n\t\t// 循环迭代下去\n\t\twhile (dirs.hasMoreElements()){\n\t\t\t// 获取下一个元素\n\t\t\tURL url = dirs.nextElement();\n\t\t\t// 得到协议的名称\n\t\t\tString protocol = url.getProtocol();\n\t\t\t// 如果是以文件的形式保存在服务器上\n\t\t\tif (\"file\".equals(protocol)) {\n\t\t\t\tSystem.err.println(\"file类型的扫描\");\n\t\t\t\t// 获取包的物理路径\n\t\t\t\tString filePath = URLDecoder.decode(url.getFile(), \"UTF-8\");\n\t\t\t\t// 以文件的方式扫描整个包下的文件 并添加到集合中\n\t\t\t\tfindAndAddClassesInPackageByFile(packageName, filePath, recursive, classes);\n\n\t\t\t}else if (\"jar\".equals(protocol)) {\n\t\t\t\t// 如果是jar包文件\n\t\t\t\t// 定义一个JarFile\n\t\t\t\tSystem.err.println(\"jar类型的扫描\");\n\t\t\t\tJarFile jar;\n\t\t\t\ttry{\n\t\t\t\t\t// 获取jar\n\t\t\t\t\tjar = ((JarURLConnection) url.openConnection()).getJarFile();\n\t\t\t\t\t// 从此jar包 得到一个枚举类\n\t\t\t\t\tEnumeration<JarEntry> entries = jar.entries();\n\t\t\t\t\t// 同样的进行循环迭代\n\t\t\t\t\twhile (entries.hasMoreElements()){\n\t\t\t\t\t\t// 获取jar里的一个实体 可以是目录 和一些jar包里的其他文件 如META-INF等文件\n\t\t\t\t\t\tJarEntry entry = entries.nextElement();\n\t\t\t\t\t\tString name = entry.getName();\n\t\t\t\t\t\t// 如果是以/开头的\n\t\t\t\t\t\tif (name.charAt(0) == '/') {\n\t\t\t\t\t\t\t// 获取后面的字符串\n\t\t\t\t\t\t\tname = name.substring(1);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// 如果前半部分和定义的包名相同\n\t\t\t\t\t\tif (name.startsWith(packageDirName)) {\n\t\t\t\t\t\t\tint idx = name.lastIndexOf('/');\n\t\t\t\t\t\t\t// 如果以\"/\"结尾 是一个包\n\t\t\t\t\t\t\tif (idx != -1) {\n\t\t\t\t\t\t\t\t// 获取包名 把\"/\"替换成\".\"\n\t\t\t\t\t\t\t\tpackageName = name.substring(0, idx).replace('/', '.');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// 如果可以迭代下去 并且是一个包\n\t\t\t\t\t\t\tif ((idx != -1) || recursive) {\n\t\t\t\t\t\t\t\t// 如果是一个.class文件 而且不是目录\n\t\t\t\t\t\t\t\tif (name.endsWith(\".class\") && !entry.isDirectory()) {\n\t\t\t\t\t\t\t\t\t// 去掉后面的\".class\" 获取真正的类名\n\t\t\t\t\t\t\t\t\tString className = name.substring(packageName.length() + 1, name.length() - 6);\n\t\t\t\t\t\t\t\t\ttry{\n\t\t\t\t\t\t\t\t\t\t// 添加到classes\n\t\t\t\t\t\t\t\t\t\tclasses.add(Class.forName(packageName + '.' + className));\n\t\t\t\t\t\t\t\t\t}catch (ClassNotFoundException e){\n\t\t\t\t\t\t\t\t\t\t// log\n\t\t\t\t\t\t\t\t\t\t// .error(\"添加用户自定义视图类错误 找不到此类的.class文件\");\n\t\t\t\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}catch (IOException e){\n\t\t\t\t\t// log.error(\"在扫描用户定义视图时从jar包获取文件出错\");\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}catch (IOException e){\n\t\te.printStackTrace();\n\t}\n\n\treturn classes;\n}\n```\n\n注释已经将逻辑解释的很清楚, 首先使用`ClassLoader`的`getResources()`根据包名获取到`URL`的一个枚举集合, 然后根据URL协议来判断当前元素是一个文件还是一个jar包。\n\n如果是一个文件, 那么根据`url`地址来获取到文件的绝对路径, 然后根据路径获取到类名, 添加到Set集合中。\n\n如果是一个jar包, 那么Java有一个专门的`JarURLConnection`来搞定这个事情。\n\n值得注意的是当协议为`File`时, 有一个单独的方法来添加集合:\n```java\npublic static void findAndAddClassesInPackageByFile(\n\t\tString packageName,\n\t\tString packagePath,\n\t\tfinal boolean recursive,\n\t\tSet<Class<?>> classes){\n\t// 获取此包的目录 建立一个File\n\tFile dir = new File(packagePath);\n\t// 如果不存在或者 也不是目录就直接返回\n\tif (!dir.exists() || !dir.isDirectory()) {\n\t\t// log.warn(\"用户定义包名 \" + packageName + \" 下没有任何文件\");\n\t\treturn;\n\t}\n\t// 如果存在 就获取包下的所有文件 包括目录\n\tFile[] dirfiles = dir.listFiles(new FileFilter(){\n\n\t\t// 自定义过滤规则 如果可以循环(包含子目录) 或则是以.class结尾的文件(编译好的java类文件)\n\t\tpublic boolean accept(File file){\n\t\t\treturn (recursive && file.isDirectory()) || (file.getName().endsWith(\".class\"));\n\t\t}\n\t});\n\t// 循环所有文件\n\tfor (File file : dirfiles){\n\t\t// 如果是目录 则继续扫描\n\t\tif (file.isDirectory()) {\n\t\t\tfindAndAddClassesInPackageByFile(packageName + \".\" + file.getName(), file.getAbsolutePath(), recursive, classes);\n\t\t}else{\n\t\t\t// 如果是java类文件 去掉后面的.class 只留下类名\n\t\t\tString className = file.getName().substring(0, file.getName().length() - 6);\n\t\t\ttry{\n\t\t\t\t// 添加到集合中去\n\t\t\t\t// classes.add(Class.forName(packageName + '.' +\n\t\t\t\t// className));\n\t\t\t\t// 经过回复同学的提醒，这里用forName有一些不好，会触发static方法，没有使用classLoader的load干净\n\t\t\t\tclasses.add(Thread.currentThread().getContextClassLoader().loadClass(packageName + '.' + className));\n\t\t\t}catch (ClassNotFoundException e){\n\t\t\t\t// log.error(\"添加用户自定义视图类错误 找不到此类的.class文件\");\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n具体的思路是: 先获取到目录下的所有的file, 接下来有一个递归, 可以将子目录下的文件检测到, 并使用`ClassLoader`的`loadClass()`获取到class实例, 添加进集合中。\n\n嗯, `ClassTools`就分析到这里。\n","source":"_posts/note/source_note/mybatis-enhance/read-mybatis-enhance-ClassTools.md","raw":"---\ntitle: mybatis-enhance 的 ClassTools\ndate: 2019-01-12 14:58:16\ncategories:\n- 笔记\n- 解读源码笔记\n- mybatis-enhance\ntags:\n- mybatis\n- 开源项目\n- mybatis-enhance\n---\n\n# 前言\n\n本篇博客专门就`mybatis-enhance`的ClassTools类进行分析, 请先移步[读mybatis-enhance开源项目](/java/read-open-source-java-version-project/read-mybatis-enhance.html)。\n\n<!--more-->\n\n# 分析\n\n## getClasses方法\n\n```java\npublic static Set<Class<?>> getClasses(String pack){\n\t// 第一个class类的集合\n\tSet<Class<?>> classes = new LinkedHashSet<Class<?>>();\n\t// 是否循环迭代\n\tboolean recursive = true;\n\t// 获取包的名字 并进行替换\n\tString packageName = pack;\n\tString packageDirName = packageName.replace('.', '/');\n\t// 定义一个枚举的集合 并进行循环来处理这个目录下的things\n\tEnumeration<URL> dirs;\n\ttry{\n\t\tdirs = Thread.currentThread().getContextClassLoader().getResources(packageDirName);\n\t\t// 循环迭代下去\n\t\twhile (dirs.hasMoreElements()){\n\t\t\t// 获取下一个元素\n\t\t\tURL url = dirs.nextElement();\n\t\t\t// 得到协议的名称\n\t\t\tString protocol = url.getProtocol();\n\t\t\t// 如果是以文件的形式保存在服务器上\n\t\t\tif (\"file\".equals(protocol)) {\n\t\t\t\tSystem.err.println(\"file类型的扫描\");\n\t\t\t\t// 获取包的物理路径\n\t\t\t\tString filePath = URLDecoder.decode(url.getFile(), \"UTF-8\");\n\t\t\t\t// 以文件的方式扫描整个包下的文件 并添加到集合中\n\t\t\t\tfindAndAddClassesInPackageByFile(packageName, filePath, recursive, classes);\n\n\t\t\t}else if (\"jar\".equals(protocol)) {\n\t\t\t\t// 如果是jar包文件\n\t\t\t\t// 定义一个JarFile\n\t\t\t\tSystem.err.println(\"jar类型的扫描\");\n\t\t\t\tJarFile jar;\n\t\t\t\ttry{\n\t\t\t\t\t// 获取jar\n\t\t\t\t\tjar = ((JarURLConnection) url.openConnection()).getJarFile();\n\t\t\t\t\t// 从此jar包 得到一个枚举类\n\t\t\t\t\tEnumeration<JarEntry> entries = jar.entries();\n\t\t\t\t\t// 同样的进行循环迭代\n\t\t\t\t\twhile (entries.hasMoreElements()){\n\t\t\t\t\t\t// 获取jar里的一个实体 可以是目录 和一些jar包里的其他文件 如META-INF等文件\n\t\t\t\t\t\tJarEntry entry = entries.nextElement();\n\t\t\t\t\t\tString name = entry.getName();\n\t\t\t\t\t\t// 如果是以/开头的\n\t\t\t\t\t\tif (name.charAt(0) == '/') {\n\t\t\t\t\t\t\t// 获取后面的字符串\n\t\t\t\t\t\t\tname = name.substring(1);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// 如果前半部分和定义的包名相同\n\t\t\t\t\t\tif (name.startsWith(packageDirName)) {\n\t\t\t\t\t\t\tint idx = name.lastIndexOf('/');\n\t\t\t\t\t\t\t// 如果以\"/\"结尾 是一个包\n\t\t\t\t\t\t\tif (idx != -1) {\n\t\t\t\t\t\t\t\t// 获取包名 把\"/\"替换成\".\"\n\t\t\t\t\t\t\t\tpackageName = name.substring(0, idx).replace('/', '.');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// 如果可以迭代下去 并且是一个包\n\t\t\t\t\t\t\tif ((idx != -1) || recursive) {\n\t\t\t\t\t\t\t\t// 如果是一个.class文件 而且不是目录\n\t\t\t\t\t\t\t\tif (name.endsWith(\".class\") && !entry.isDirectory()) {\n\t\t\t\t\t\t\t\t\t// 去掉后面的\".class\" 获取真正的类名\n\t\t\t\t\t\t\t\t\tString className = name.substring(packageName.length() + 1, name.length() - 6);\n\t\t\t\t\t\t\t\t\ttry{\n\t\t\t\t\t\t\t\t\t\t// 添加到classes\n\t\t\t\t\t\t\t\t\t\tclasses.add(Class.forName(packageName + '.' + className));\n\t\t\t\t\t\t\t\t\t}catch (ClassNotFoundException e){\n\t\t\t\t\t\t\t\t\t\t// log\n\t\t\t\t\t\t\t\t\t\t// .error(\"添加用户自定义视图类错误 找不到此类的.class文件\");\n\t\t\t\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}catch (IOException e){\n\t\t\t\t\t// log.error(\"在扫描用户定义视图时从jar包获取文件出错\");\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}catch (IOException e){\n\t\te.printStackTrace();\n\t}\n\n\treturn classes;\n}\n```\n\n注释已经将逻辑解释的很清楚, 首先使用`ClassLoader`的`getResources()`根据包名获取到`URL`的一个枚举集合, 然后根据URL协议来判断当前元素是一个文件还是一个jar包。\n\n如果是一个文件, 那么根据`url`地址来获取到文件的绝对路径, 然后根据路径获取到类名, 添加到Set集合中。\n\n如果是一个jar包, 那么Java有一个专门的`JarURLConnection`来搞定这个事情。\n\n值得注意的是当协议为`File`时, 有一个单独的方法来添加集合:\n```java\npublic static void findAndAddClassesInPackageByFile(\n\t\tString packageName,\n\t\tString packagePath,\n\t\tfinal boolean recursive,\n\t\tSet<Class<?>> classes){\n\t// 获取此包的目录 建立一个File\n\tFile dir = new File(packagePath);\n\t// 如果不存在或者 也不是目录就直接返回\n\tif (!dir.exists() || !dir.isDirectory()) {\n\t\t// log.warn(\"用户定义包名 \" + packageName + \" 下没有任何文件\");\n\t\treturn;\n\t}\n\t// 如果存在 就获取包下的所有文件 包括目录\n\tFile[] dirfiles = dir.listFiles(new FileFilter(){\n\n\t\t// 自定义过滤规则 如果可以循环(包含子目录) 或则是以.class结尾的文件(编译好的java类文件)\n\t\tpublic boolean accept(File file){\n\t\t\treturn (recursive && file.isDirectory()) || (file.getName().endsWith(\".class\"));\n\t\t}\n\t});\n\t// 循环所有文件\n\tfor (File file : dirfiles){\n\t\t// 如果是目录 则继续扫描\n\t\tif (file.isDirectory()) {\n\t\t\tfindAndAddClassesInPackageByFile(packageName + \".\" + file.getName(), file.getAbsolutePath(), recursive, classes);\n\t\t}else{\n\t\t\t// 如果是java类文件 去掉后面的.class 只留下类名\n\t\t\tString className = file.getName().substring(0, file.getName().length() - 6);\n\t\t\ttry{\n\t\t\t\t// 添加到集合中去\n\t\t\t\t// classes.add(Class.forName(packageName + '.' +\n\t\t\t\t// className));\n\t\t\t\t// 经过回复同学的提醒，这里用forName有一些不好，会触发static方法，没有使用classLoader的load干净\n\t\t\t\tclasses.add(Thread.currentThread().getContextClassLoader().loadClass(packageName + '.' + className));\n\t\t\t}catch (ClassNotFoundException e){\n\t\t\t\t// log.error(\"添加用户自定义视图类错误 找不到此类的.class文件\");\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n具体的思路是: 先获取到目录下的所有的file, 接下来有一个递归, 可以将子目录下的文件检测到, 并使用`ClassLoader`的`loadClass()`获取到class实例, 添加进集合中。\n\n嗯, `ClassTools`就分析到这里。\n","slug":"note/source_note/mybatis-enhance/read-mybatis-enhance-ClassTools","published":1,"updated":"2022-10-03T02:21:54.103Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejze00ag3vsb1hj75oio","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>本篇博客专门就<code>mybatis-enhance</code>的ClassTools类进行分析, 请先移步<a href=\"/java/read-open-source-java-version-project/read-mybatis-enhance.html\">读mybatis-enhance开源项目</a>。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h1><h2 id=\"getClasses方法\"><a href=\"#getClasses方法\" class=\"headerlink\" title=\"getClasses方法\"></a>getClasses方法</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Set&lt;Class&lt;?&gt;&gt; getClasses(String pack)&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 第一个class类的集合</span></span><br><span class=\"line\">\tSet&lt;Class&lt;?&gt;&gt; classes = <span class=\"keyword\">new</span> LinkedHashSet&lt;Class&lt;?&gt;&gt;();</span><br><span class=\"line\">\t<span class=\"comment\">// 是否循环迭代</span></span><br><span class=\"line\">\t<span class=\"keyword\">boolean</span> recursive = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// 获取包的名字 并进行替换</span></span><br><span class=\"line\">\tString packageName = pack;</span><br><span class=\"line\">\tString packageDirName = packageName.replace(<span class=\"string\">&#x27;.&#x27;</span>, <span class=\"string\">&#x27;/&#x27;</span>);</span><br><span class=\"line\">\t<span class=\"comment\">// 定义一个枚举的集合 并进行循环来处理这个目录下的things</span></span><br><span class=\"line\">\tEnumeration&lt;URL&gt; dirs;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">\t\tdirs = Thread.currentThread().getContextClassLoader().getResources(packageDirName);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 循环迭代下去</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (dirs.hasMoreElements())&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 获取下一个元素</span></span><br><span class=\"line\">\t\t\tURL url = dirs.nextElement();</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 得到协议的名称</span></span><br><span class=\"line\">\t\t\tString protocol = url.getProtocol();</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 如果是以文件的形式保存在服务器上</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"string\">&quot;file&quot;</span>.equals(protocol)) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.err.println(<span class=\"string\">&quot;file类型的扫描&quot;</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 获取包的物理路径</span></span><br><span class=\"line\">\t\t\t\tString filePath = URLDecoder.decode(url.getFile(), <span class=\"string\">&quot;UTF-8&quot;</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 以文件的方式扫描整个包下的文件 并添加到集合中</span></span><br><span class=\"line\">\t\t\t\tfindAndAddClassesInPackageByFile(packageName, filePath, recursive, classes);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">&quot;jar&quot;</span>.equals(protocol)) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 如果是jar包文件</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 定义一个JarFile</span></span><br><span class=\"line\">\t\t\t\tSystem.err.println(<span class=\"string\">&quot;jar类型的扫描&quot;</span>);</span><br><span class=\"line\">\t\t\t\tJarFile jar;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// 获取jar</span></span><br><span class=\"line\">\t\t\t\t\tjar = ((JarURLConnection) url.openConnection()).getJarFile();</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// 从此jar包 得到一个枚举类</span></span><br><span class=\"line\">\t\t\t\t\tEnumeration&lt;JarEntry&gt; entries = jar.entries();</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// 同样的进行循环迭代</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">while</span> (entries.hasMoreElements())&#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">// 获取jar里的一个实体 可以是目录 和一些jar包里的其他文件 如META-INF等文件</span></span><br><span class=\"line\">\t\t\t\t\t\tJarEntry entry = entries.nextElement();</span><br><span class=\"line\">\t\t\t\t\t\tString name = entry.getName();</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">// 如果是以/开头的</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span> (name.charAt(<span class=\"number\">0</span>) == <span class=\"string\">&#x27;/&#x27;</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"comment\">// 获取后面的字符串</span></span><br><span class=\"line\">\t\t\t\t\t\t\tname = name.substring(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">// 如果前半部分和定义的包名相同</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span> (name.startsWith(packageDirName)) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">int</span> idx = name.lastIndexOf(<span class=\"string\">&#x27;/&#x27;</span>);</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"comment\">// 如果以&quot;/&quot;结尾 是一个包</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">if</span> (idx != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t<span class=\"comment\">// 获取包名 把&quot;/&quot;替换成&quot;.&quot;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\tpackageName = name.substring(<span class=\"number\">0</span>, idx).replace(<span class=\"string\">&#x27;/&#x27;</span>, <span class=\"string\">&#x27;.&#x27;</span>);</span><br><span class=\"line\">\t\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"comment\">// 如果可以迭代下去 并且是一个包</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">if</span> ((idx != -<span class=\"number\">1</span>) || recursive) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t<span class=\"comment\">// 如果是一个.class文件 而且不是目录</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t<span class=\"keyword\">if</span> (name.endsWith(<span class=\"string\">&quot;.class&quot;</span>) &amp;&amp; !entry.isDirectory()) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t<span class=\"comment\">// 去掉后面的&quot;.class&quot; 获取真正的类名</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\tString className = name.substring(packageName.length() + <span class=\"number\">1</span>, name.length() - <span class=\"number\">6</span>);</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t<span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// 添加到classes</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\tclasses.add(Class.forName(packageName + <span class=\"string\">&#x27;.&#x27;</span> + className));</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t&#125;<span class=\"keyword\">catch</span> (ClassNotFoundException e)&#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// log</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// .error(&quot;添加用户自定义视图类错误 找不到此类的.class文件&quot;);</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;<span class=\"keyword\">catch</span> (IOException e)&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// log.error(&quot;在扫描用户定义视图时从jar包获取文件出错&quot;);</span></span><br><span class=\"line\">\t\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">catch</span> (IOException e)&#123;</span><br><span class=\"line\">\t\te.printStackTrace();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> classes;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注释已经将逻辑解释的很清楚, 首先使用<code>ClassLoader</code>的<code>getResources()</code>根据包名获取到<code>URL</code>的一个枚举集合, 然后根据URL协议来判断当前元素是一个文件还是一个jar包。</p>\n<p>如果是一个文件, 那么根据<code>url</code>地址来获取到文件的绝对路径, 然后根据路径获取到类名, 添加到Set集合中。</p>\n<p>如果是一个jar包, 那么Java有一个专门的<code>JarURLConnection</code>来搞定这个事情。</p>\n<p>值得注意的是当协议为<code>File</code>时, 有一个单独的方法来添加集合:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">findAndAddClassesInPackageByFile</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\t\tString packageName,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\t\tString packagePath,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\t\t<span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> recursive,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\t\tSet&lt;Class&lt;?&gt;&gt; classes)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 获取此包的目录 建立一个File</span></span><br><span class=\"line\">\tFile dir = <span class=\"keyword\">new</span> File(packagePath);</span><br><span class=\"line\">\t<span class=\"comment\">// 如果不存在或者 也不是目录就直接返回</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!dir.exists() || !dir.isDirectory()) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// log.warn(&quot;用户定义包名 &quot; + packageName + &quot; 下没有任何文件&quot;);</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 如果存在 就获取包下的所有文件 包括目录</span></span><br><span class=\"line\">\tFile[] dirfiles = dir.listFiles(<span class=\"keyword\">new</span> FileFilter()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 自定义过滤规则 如果可以循环(包含子目录) 或则是以.class结尾的文件(编译好的java类文件)</span></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">accept</span><span class=\"params\">(File file)</span></span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> (recursive &amp;&amp; file.isDirectory()) || (file.getName().endsWith(<span class=\"string\">&quot;.class&quot;</span>));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">\t<span class=\"comment\">// 循环所有文件</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (File file : dirfiles)&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 如果是目录 则继续扫描</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (file.isDirectory()) &#123;</span><br><span class=\"line\">\t\t\tfindAndAddClassesInPackageByFile(packageName + <span class=\"string\">&quot;.&quot;</span> + file.getName(), file.getAbsolutePath(), recursive, classes);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 如果是java类文件 去掉后面的.class 只留下类名</span></span><br><span class=\"line\">\t\t\tString className = file.getName().substring(<span class=\"number\">0</span>, file.getName().length() - <span class=\"number\">6</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 添加到集合中去</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// classes.add(Class.forName(packageName + &#x27;.&#x27; +</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// className));</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 经过回复同学的提醒，这里用forName有一些不好，会触发static方法，没有使用classLoader的load干净</span></span><br><span class=\"line\">\t\t\t\tclasses.add(Thread.currentThread().getContextClassLoader().loadClass(packageName + <span class=\"string\">&#x27;.&#x27;</span> + className));</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">catch</span> (ClassNotFoundException e)&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// log.error(&quot;添加用户自定义视图类错误 找不到此类的.class文件&quot;);</span></span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>具体的思路是: 先获取到目录下的所有的file, 接下来有一个递归, 可以将子目录下的文件检测到, 并使用<code>ClassLoader</code>的<code>loadClass()</code>获取到class实例, 添加进集合中。</p>\n<p>嗯, <code>ClassTools</code>就分析到这里。</p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>本篇博客专门就<code>mybatis-enhance</code>的ClassTools类进行分析, 请先移步<a href=\"/java/read-open-source-java-version-project/read-mybatis-enhance.html\">读mybatis-enhance开源项目</a>。</p>","more":"<h1 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h1><h2 id=\"getClasses方法\"><a href=\"#getClasses方法\" class=\"headerlink\" title=\"getClasses方法\"></a>getClasses方法</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Set&lt;Class&lt;?&gt;&gt; getClasses(String pack)&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 第一个class类的集合</span></span><br><span class=\"line\">\tSet&lt;Class&lt;?&gt;&gt; classes = <span class=\"keyword\">new</span> LinkedHashSet&lt;Class&lt;?&gt;&gt;();</span><br><span class=\"line\">\t<span class=\"comment\">// 是否循环迭代</span></span><br><span class=\"line\">\t<span class=\"keyword\">boolean</span> recursive = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// 获取包的名字 并进行替换</span></span><br><span class=\"line\">\tString packageName = pack;</span><br><span class=\"line\">\tString packageDirName = packageName.replace(<span class=\"string\">&#x27;.&#x27;</span>, <span class=\"string\">&#x27;/&#x27;</span>);</span><br><span class=\"line\">\t<span class=\"comment\">// 定义一个枚举的集合 并进行循环来处理这个目录下的things</span></span><br><span class=\"line\">\tEnumeration&lt;URL&gt; dirs;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">\t\tdirs = Thread.currentThread().getContextClassLoader().getResources(packageDirName);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 循环迭代下去</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (dirs.hasMoreElements())&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 获取下一个元素</span></span><br><span class=\"line\">\t\t\tURL url = dirs.nextElement();</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 得到协议的名称</span></span><br><span class=\"line\">\t\t\tString protocol = url.getProtocol();</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 如果是以文件的形式保存在服务器上</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"string\">&quot;file&quot;</span>.equals(protocol)) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.err.println(<span class=\"string\">&quot;file类型的扫描&quot;</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 获取包的物理路径</span></span><br><span class=\"line\">\t\t\t\tString filePath = URLDecoder.decode(url.getFile(), <span class=\"string\">&quot;UTF-8&quot;</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 以文件的方式扫描整个包下的文件 并添加到集合中</span></span><br><span class=\"line\">\t\t\t\tfindAndAddClassesInPackageByFile(packageName, filePath, recursive, classes);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">&quot;jar&quot;</span>.equals(protocol)) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 如果是jar包文件</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 定义一个JarFile</span></span><br><span class=\"line\">\t\t\t\tSystem.err.println(<span class=\"string\">&quot;jar类型的扫描&quot;</span>);</span><br><span class=\"line\">\t\t\t\tJarFile jar;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// 获取jar</span></span><br><span class=\"line\">\t\t\t\t\tjar = ((JarURLConnection) url.openConnection()).getJarFile();</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// 从此jar包 得到一个枚举类</span></span><br><span class=\"line\">\t\t\t\t\tEnumeration&lt;JarEntry&gt; entries = jar.entries();</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// 同样的进行循环迭代</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">while</span> (entries.hasMoreElements())&#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">// 获取jar里的一个实体 可以是目录 和一些jar包里的其他文件 如META-INF等文件</span></span><br><span class=\"line\">\t\t\t\t\t\tJarEntry entry = entries.nextElement();</span><br><span class=\"line\">\t\t\t\t\t\tString name = entry.getName();</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">// 如果是以/开头的</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span> (name.charAt(<span class=\"number\">0</span>) == <span class=\"string\">&#x27;/&#x27;</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"comment\">// 获取后面的字符串</span></span><br><span class=\"line\">\t\t\t\t\t\t\tname = name.substring(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">// 如果前半部分和定义的包名相同</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span> (name.startsWith(packageDirName)) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">int</span> idx = name.lastIndexOf(<span class=\"string\">&#x27;/&#x27;</span>);</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"comment\">// 如果以&quot;/&quot;结尾 是一个包</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">if</span> (idx != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t<span class=\"comment\">// 获取包名 把&quot;/&quot;替换成&quot;.&quot;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\tpackageName = name.substring(<span class=\"number\">0</span>, idx).replace(<span class=\"string\">&#x27;/&#x27;</span>, <span class=\"string\">&#x27;.&#x27;</span>);</span><br><span class=\"line\">\t\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"comment\">// 如果可以迭代下去 并且是一个包</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">if</span> ((idx != -<span class=\"number\">1</span>) || recursive) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t<span class=\"comment\">// 如果是一个.class文件 而且不是目录</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t<span class=\"keyword\">if</span> (name.endsWith(<span class=\"string\">&quot;.class&quot;</span>) &amp;&amp; !entry.isDirectory()) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t<span class=\"comment\">// 去掉后面的&quot;.class&quot; 获取真正的类名</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\tString className = name.substring(packageName.length() + <span class=\"number\">1</span>, name.length() - <span class=\"number\">6</span>);</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t<span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// 添加到classes</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\tclasses.add(Class.forName(packageName + <span class=\"string\">&#x27;.&#x27;</span> + className));</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t&#125;<span class=\"keyword\">catch</span> (ClassNotFoundException e)&#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// log</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// .error(&quot;添加用户自定义视图类错误 找不到此类的.class文件&quot;);</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;<span class=\"keyword\">catch</span> (IOException e)&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// log.error(&quot;在扫描用户定义视图时从jar包获取文件出错&quot;);</span></span><br><span class=\"line\">\t\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">catch</span> (IOException e)&#123;</span><br><span class=\"line\">\t\te.printStackTrace();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> classes;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注释已经将逻辑解释的很清楚, 首先使用<code>ClassLoader</code>的<code>getResources()</code>根据包名获取到<code>URL</code>的一个枚举集合, 然后根据URL协议来判断当前元素是一个文件还是一个jar包。</p>\n<p>如果是一个文件, 那么根据<code>url</code>地址来获取到文件的绝对路径, 然后根据路径获取到类名, 添加到Set集合中。</p>\n<p>如果是一个jar包, 那么Java有一个专门的<code>JarURLConnection</code>来搞定这个事情。</p>\n<p>值得注意的是当协议为<code>File</code>时, 有一个单独的方法来添加集合:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">findAndAddClassesInPackageByFile</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\t\tString packageName,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\t\tString packagePath,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\t\t<span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> recursive,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\t\tSet&lt;Class&lt;?&gt;&gt; classes)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 获取此包的目录 建立一个File</span></span><br><span class=\"line\">\tFile dir = <span class=\"keyword\">new</span> File(packagePath);</span><br><span class=\"line\">\t<span class=\"comment\">// 如果不存在或者 也不是目录就直接返回</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!dir.exists() || !dir.isDirectory()) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// log.warn(&quot;用户定义包名 &quot; + packageName + &quot; 下没有任何文件&quot;);</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 如果存在 就获取包下的所有文件 包括目录</span></span><br><span class=\"line\">\tFile[] dirfiles = dir.listFiles(<span class=\"keyword\">new</span> FileFilter()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 自定义过滤规则 如果可以循环(包含子目录) 或则是以.class结尾的文件(编译好的java类文件)</span></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">accept</span><span class=\"params\">(File file)</span></span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> (recursive &amp;&amp; file.isDirectory()) || (file.getName().endsWith(<span class=\"string\">&quot;.class&quot;</span>));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">\t<span class=\"comment\">// 循环所有文件</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (File file : dirfiles)&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 如果是目录 则继续扫描</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (file.isDirectory()) &#123;</span><br><span class=\"line\">\t\t\tfindAndAddClassesInPackageByFile(packageName + <span class=\"string\">&quot;.&quot;</span> + file.getName(), file.getAbsolutePath(), recursive, classes);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 如果是java类文件 去掉后面的.class 只留下类名</span></span><br><span class=\"line\">\t\t\tString className = file.getName().substring(<span class=\"number\">0</span>, file.getName().length() - <span class=\"number\">6</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 添加到集合中去</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// classes.add(Class.forName(packageName + &#x27;.&#x27; +</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// className));</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 经过回复同学的提醒，这里用forName有一些不好，会触发static方法，没有使用classLoader的load干净</span></span><br><span class=\"line\">\t\t\t\tclasses.add(Thread.currentThread().getContextClassLoader().loadClass(packageName + <span class=\"string\">&#x27;.&#x27;</span> + className));</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">catch</span> (ClassNotFoundException e)&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// log.error(&quot;添加用户自定义视图类错误 找不到此类的.class文件&quot;);</span></span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>具体的思路是: 先获取到目录下的所有的file, 接下来有一个递归, 可以将子目录下的文件检测到, 并使用<code>ClassLoader</code>的<code>loadClass()</code>获取到class实例, 添加进集合中。</p>\n<p>嗯, <code>ClassTools</code>就分析到这里。</p>"},{"title":"mybatis-enhance的tableFieldsConstruct方法","date":"2019-01-15T16:15:51.000Z","_content":"# 前言\n","source":"_posts/note/source_note/mybatis-enhance/read-mybatis-enhance-tableFieldsConstruct.md","raw":"---\ntitle: mybatis-enhance的tableFieldsConstruct方法\ndate: 2019-01-16 00:15:51\ncategories:\n- 笔记\n- 解读源码笔记\n- mybatis-enhance\ntags:\n- mybatis\n- 开源项目\n- mybatis-enhance\n---\n# 前言\n","slug":"note/source_note/mybatis-enhance/read-mybatis-enhance-tableFieldsConstruct","published":1,"updated":"2022-10-03T02:22:07.812Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejzh00ah3vsb4st79p3w","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1>","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1>"},{"title":"读mybatis-enhance开源项目","date":"2019-01-12T06:12:43.000Z","_content":"\n# 前言\n\nmybatis 和 hibernate 是最受欢迎的orm框架之二, 但是我一直觉得hibernate这个框架对于我来说还是太重了, 而且稍有不注意性能上就会损失巨大, 所以mybatis成为了我的首选。\n但是hibernate有一个功能我非常喜欢, 就是可以根据实体类自动建表, 那我就想mybatis可不可以也做到这一点呢? 那么就让我来介绍一下[ACTable](http://git.oschina.net/sunchenbin/mybatis-enhance)这个开源工具, 他可以让mybatis实现自动建表的功能, 具体的使用方法大家可以通过上面的链接查看, 这篇博客主要是来记录一下这个工具的实现思路。\n\n<!--more-->\n\n# 实现思路\n\n## 注解层\n\n这个工具有三个注解, 分别是 `Column`, `LengthCount` 和 `Table`\n\n* Column 是注解到字段上的, 用来指定字段的名字, 类型, 长度等\n* LengthCount 是用来标记数据库类型的长度\n* Table 用来指定表名\n\n## 入口\n\n在`manager.handler.StartUpHandler` 中定义了入口方法 `startHandler()`, 该方法使用了`@PostConstruct`注解, 该注解是Spring的注解, 使用了该注解的方法会在依赖注入(`@Autowired`)之后自动执行。\n```java\npublic void startHandler() {\n\n\t// 执行mysql的处理方法\n\tif (MYSQL.equals(databaseType)) {\n\t\t\n\t\tlog.info(\"databaseType=mysql，开始执行mysql的处理方法\");\n\t\t\n\t\tsysMysqlCreateTableManager.createMysqlTable();\n\t}else{\n\t\t\n\t\tlog.info(\"没有找到符合条件的处理方法！\");\n\t}\n}\n```\n\n可以看到该方法调用了`SysMysqlCreateTableManager`这个类的`createMysqlTable()`方法:\n\n```java\npublic void createMysqlTable() {\n\n\t// 不做任何事情\n\tif (\"none\".equals(tableAuto)) {\n\t\tlog.info(\"配置mybatis.table.auto=none，不需要做任何事情\");\n\t\treturn;\n\t}\n\n\t// 获取Mysql的类型，以及类型需要设置几个长度\n\tMap<String, Object> mySqlTypeAndLengthMap = mySqlTypeAndLengthMap();\n\n\t// 从包package中获取所有的Class\n\tSet<Class<?>> classes = ClassTools.getClasses(pack);\n\n\t// 用于存需要创建的表名+结构\n\tMap<String, List<Object>> newTableMap = new HashMap<String, List<Object>>();\n\n\t// 用于存需要更新字段类型等的表名+结构\n\tMap<String, List<Object>> modifyTableMap = new HashMap<String, List<Object>>();\n\n\t// 用于存需要增加字段的表名+结构\n\tMap<String, List<Object>> addTableMap = new HashMap<String, List<Object>>();\n\n\t// 用于存需要删除字段的表名+结构\n\tMap<String, List<Object>> removeTableMap = new HashMap<String, List<Object>>();\n\n\t// 用于存需要删除主键的表名+结构\n\tMap<String, List<Object>> dropKeyTableMap = new HashMap<String, List<Object>>();\n\n\t// 用于存需要删除唯一约束的表名+结构\n\tMap<String, List<Object>> dropUniqueTableMap = new HashMap<String, List<Object>>();\n\n\t// 构建出全部表的增删改的map\n\tallTableMapConstruct(mySqlTypeAndLengthMap, classes, newTableMap, modifyTableMap, addTableMap, removeTableMap,\n\t\t\tdropKeyTableMap, dropUniqueTableMap);\n\n\t// 根据传入的map，分别去创建或修改表结构\n\tcreateOrModifyTableConstruct(newTableMap, modifyTableMap, addTableMap, removeTableMap, dropKeyTableMap,\n\t\t\tdropUniqueTableMap);\n}\n\t```\n嗯, 注释写的已经非常清楚了, 首先检测用户配置的状态是什么, 然后构建操作表的sql, 最后进行实际操作。\n值得注意的是, 这里有一个操作可以根据用户配置的包名来获取到所有实体类的Class, [这篇博文](/java/read-open-source-java-version-project/read-mybatis-enhance-ClassTools.html)对这里进行了分析。\n\n## 构建出全部表的增删改的map\n\n看完了大体的思路, 接下来就来看看是怎么具体实现的。\n首先来看看他是怎么构建出全部表的增删改的map的。\n```java\n/**\n* 构建出全部表的增删改的map\n* \n* @param mySqlTypeAndLengthMap\n*            获取Mysql的类型，以及类型需要设置几个长度\n* @param classes\n*            从包package中获取所有的Class\n* @param newTableMap\n*            用于存需要创建的表名+结构\n* @param modifyTableMap\n*            用于存需要更新字段类型等的表名+结构\n* @param addTableMap\n*            用于存需要增加字段的表名+结构\n* @param removeTableMap\n*            用于存需要删除字段的表名+结构\n* @param dropKeyTableMap\n*            用于存需要删除主键的表名+结构\n* @param dropUniqueTableMap\n*            用于存需要删除唯一约束的表名+结构\n*/\nprivate void allTableMapConstruct(Map<String, Object> mySqlTypeAndLengthMap, Set<Class<?>> classes,\n\t\tMap<String, List<Object>> newTableMap, Map<String, List<Object>> modifyTableMap,\n\t\tMap<String, List<Object>> addTableMap, Map<String, List<Object>> removeTableMap,\n\t\tMap<String, List<Object>> dropKeyTableMap, Map<String, List<Object>> dropUniqueTableMap) {\n\tfor (Class<?> clas : classes) {\n\n\t\tTable table = clas.getAnnotation(Table.class);\n\t\t// 没有打注解不需要创建变量\n\t\tif (null == table) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// 用于存新增表的字段\n\t\tList<Object> newFieldList = new ArrayList<Object>();\n\t\t// 用于存删除的字段\n\t\tList<Object> removeFieldList = new ArrayList<Object>();\n\t\t// 用于存新增的字段\n\t\tList<Object> addFieldList = new ArrayList<Object>();\n\t\t// 用于存修改的字段\n\t\tList<Object> modifyFieldList = new ArrayList<Object>();\n\t\t// 用于存删除主键的字段\n\t\tList<Object> dropKeyFieldList = new ArrayList<Object>();\n\t\t// 用于存删除唯一约束的字段\n\t\tList<Object> dropUniqueFieldList = new ArrayList<Object>();\n\n\t\t// 迭代出所有model的所有fields存到newFieldList中\n\t\ttableFieldsConstruct(mySqlTypeAndLengthMap, clas, newFieldList);\n\n\t\t// 如果配置文件配置的是create，表示将所有的表删掉重新创建\n\t\tif (\"create\".equals(tableAuto)) {\n\t\t\tcreateMysqlTablesMapper.dorpTableByName(table.name());\n\t\t}\n\n\t\t// 先查该表是否以存在\n\t\tint exist = createMysqlTablesMapper.findTableCountByTableName(table.name());\n\n\t\t// 不存在时\n\t\tif (exist == 0) {\n\t\t\tnewTableMap.put(table.name(), newFieldList);\n\t\t} else {\n\t\t\t// 已存在时理论上做修改的操作，这里查出该表的结构\n\t\t\tList<SysMysqlColumns> tableColumnList = createMysqlTablesMapper\n\t\t\t\t\t.findTableEnsembleByTableName(table.name());\n\n\t\t\t// 从sysColumns中取出我们需要比较的列的List\n\t\t\t// 先取出name用来筛选出增加和删除的字段\n\t\t\tList<String> columnNames = ClassTools.getPropertyValueList(tableColumnList,\n\t\t\t\t\tSysMysqlColumns.COLUMN_NAME_KEY);\n\n\t\t\t// 验证对比从model中解析的fieldList与从数据库查出来的columnList\n\t\t\t// 1. 找出增加的字段\n\t\t\t// 2. 找出删除的字段\n\t\t\t// 3. 找出更新的字段\n\t\t\tbuildAddAndRemoveAndModifyFields(mySqlTypeAndLengthMap, modifyTableMap, addTableMap, removeTableMap,\n\t\t\t\tdropKeyTableMap, dropUniqueTableMap, table, newFieldList, removeFieldList, addFieldList,\n\t\t\t\tmodifyFieldList, dropKeyFieldList, dropUniqueFieldList, tableColumnList, columnNames);\n\n\t\t}\n\t}\n}\n```\n首先遍历实体类class集合, 检测是否声明了`@Table`注解, 这里利用了反射机制, 使用了Class类的`getAnnotation(Class<?>)`方法, 检测该类是否声明了参数中传入的注解。\n接着声明了一些集合, 分别用来存储新增表的字段, 删除的字段, 修改的字段, 新增的字段, 删除主键的字段以及删除唯一约束的字段。\n然后将所有的实体类的字段获取到, [这篇博文](/)对这里进行了分析。\n接着如果用户声明的策略是create, 则删除所有的表重新创建。\n接着判断表是否存在, 当表不存在时, 直接使用所有的字段和表名初始化集合。当表已经存在时, 将已经存在的表的结构和实体类中声明的表的结构进行对比, 将所有需要修改的字段初始化到集合中。\n","source":"_posts/note/source_note/mybatis-enhance/read-mybatis-enhance.md","raw":"---\ntitle: 读mybatis-enhance开源项目\ndate: 2019-01-12 14:12:43\ncategories:\n- 笔记\n- 解读源码笔记\n- mybatis-enhance\ntags:\n- mybatis\n- 开源项目\n- mybatis-enhance\n---\n\n# 前言\n\nmybatis 和 hibernate 是最受欢迎的orm框架之二, 但是我一直觉得hibernate这个框架对于我来说还是太重了, 而且稍有不注意性能上就会损失巨大, 所以mybatis成为了我的首选。\n但是hibernate有一个功能我非常喜欢, 就是可以根据实体类自动建表, 那我就想mybatis可不可以也做到这一点呢? 那么就让我来介绍一下[ACTable](http://git.oschina.net/sunchenbin/mybatis-enhance)这个开源工具, 他可以让mybatis实现自动建表的功能, 具体的使用方法大家可以通过上面的链接查看, 这篇博客主要是来记录一下这个工具的实现思路。\n\n<!--more-->\n\n# 实现思路\n\n## 注解层\n\n这个工具有三个注解, 分别是 `Column`, `LengthCount` 和 `Table`\n\n* Column 是注解到字段上的, 用来指定字段的名字, 类型, 长度等\n* LengthCount 是用来标记数据库类型的长度\n* Table 用来指定表名\n\n## 入口\n\n在`manager.handler.StartUpHandler` 中定义了入口方法 `startHandler()`, 该方法使用了`@PostConstruct`注解, 该注解是Spring的注解, 使用了该注解的方法会在依赖注入(`@Autowired`)之后自动执行。\n```java\npublic void startHandler() {\n\n\t// 执行mysql的处理方法\n\tif (MYSQL.equals(databaseType)) {\n\t\t\n\t\tlog.info(\"databaseType=mysql，开始执行mysql的处理方法\");\n\t\t\n\t\tsysMysqlCreateTableManager.createMysqlTable();\n\t}else{\n\t\t\n\t\tlog.info(\"没有找到符合条件的处理方法！\");\n\t}\n}\n```\n\n可以看到该方法调用了`SysMysqlCreateTableManager`这个类的`createMysqlTable()`方法:\n\n```java\npublic void createMysqlTable() {\n\n\t// 不做任何事情\n\tif (\"none\".equals(tableAuto)) {\n\t\tlog.info(\"配置mybatis.table.auto=none，不需要做任何事情\");\n\t\treturn;\n\t}\n\n\t// 获取Mysql的类型，以及类型需要设置几个长度\n\tMap<String, Object> mySqlTypeAndLengthMap = mySqlTypeAndLengthMap();\n\n\t// 从包package中获取所有的Class\n\tSet<Class<?>> classes = ClassTools.getClasses(pack);\n\n\t// 用于存需要创建的表名+结构\n\tMap<String, List<Object>> newTableMap = new HashMap<String, List<Object>>();\n\n\t// 用于存需要更新字段类型等的表名+结构\n\tMap<String, List<Object>> modifyTableMap = new HashMap<String, List<Object>>();\n\n\t// 用于存需要增加字段的表名+结构\n\tMap<String, List<Object>> addTableMap = new HashMap<String, List<Object>>();\n\n\t// 用于存需要删除字段的表名+结构\n\tMap<String, List<Object>> removeTableMap = new HashMap<String, List<Object>>();\n\n\t// 用于存需要删除主键的表名+结构\n\tMap<String, List<Object>> dropKeyTableMap = new HashMap<String, List<Object>>();\n\n\t// 用于存需要删除唯一约束的表名+结构\n\tMap<String, List<Object>> dropUniqueTableMap = new HashMap<String, List<Object>>();\n\n\t// 构建出全部表的增删改的map\n\tallTableMapConstruct(mySqlTypeAndLengthMap, classes, newTableMap, modifyTableMap, addTableMap, removeTableMap,\n\t\t\tdropKeyTableMap, dropUniqueTableMap);\n\n\t// 根据传入的map，分别去创建或修改表结构\n\tcreateOrModifyTableConstruct(newTableMap, modifyTableMap, addTableMap, removeTableMap, dropKeyTableMap,\n\t\t\tdropUniqueTableMap);\n}\n\t```\n嗯, 注释写的已经非常清楚了, 首先检测用户配置的状态是什么, 然后构建操作表的sql, 最后进行实际操作。\n值得注意的是, 这里有一个操作可以根据用户配置的包名来获取到所有实体类的Class, [这篇博文](/java/read-open-source-java-version-project/read-mybatis-enhance-ClassTools.html)对这里进行了分析。\n\n## 构建出全部表的增删改的map\n\n看完了大体的思路, 接下来就来看看是怎么具体实现的。\n首先来看看他是怎么构建出全部表的增删改的map的。\n```java\n/**\n* 构建出全部表的增删改的map\n* \n* @param mySqlTypeAndLengthMap\n*            获取Mysql的类型，以及类型需要设置几个长度\n* @param classes\n*            从包package中获取所有的Class\n* @param newTableMap\n*            用于存需要创建的表名+结构\n* @param modifyTableMap\n*            用于存需要更新字段类型等的表名+结构\n* @param addTableMap\n*            用于存需要增加字段的表名+结构\n* @param removeTableMap\n*            用于存需要删除字段的表名+结构\n* @param dropKeyTableMap\n*            用于存需要删除主键的表名+结构\n* @param dropUniqueTableMap\n*            用于存需要删除唯一约束的表名+结构\n*/\nprivate void allTableMapConstruct(Map<String, Object> mySqlTypeAndLengthMap, Set<Class<?>> classes,\n\t\tMap<String, List<Object>> newTableMap, Map<String, List<Object>> modifyTableMap,\n\t\tMap<String, List<Object>> addTableMap, Map<String, List<Object>> removeTableMap,\n\t\tMap<String, List<Object>> dropKeyTableMap, Map<String, List<Object>> dropUniqueTableMap) {\n\tfor (Class<?> clas : classes) {\n\n\t\tTable table = clas.getAnnotation(Table.class);\n\t\t// 没有打注解不需要创建变量\n\t\tif (null == table) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// 用于存新增表的字段\n\t\tList<Object> newFieldList = new ArrayList<Object>();\n\t\t// 用于存删除的字段\n\t\tList<Object> removeFieldList = new ArrayList<Object>();\n\t\t// 用于存新增的字段\n\t\tList<Object> addFieldList = new ArrayList<Object>();\n\t\t// 用于存修改的字段\n\t\tList<Object> modifyFieldList = new ArrayList<Object>();\n\t\t// 用于存删除主键的字段\n\t\tList<Object> dropKeyFieldList = new ArrayList<Object>();\n\t\t// 用于存删除唯一约束的字段\n\t\tList<Object> dropUniqueFieldList = new ArrayList<Object>();\n\n\t\t// 迭代出所有model的所有fields存到newFieldList中\n\t\ttableFieldsConstruct(mySqlTypeAndLengthMap, clas, newFieldList);\n\n\t\t// 如果配置文件配置的是create，表示将所有的表删掉重新创建\n\t\tif (\"create\".equals(tableAuto)) {\n\t\t\tcreateMysqlTablesMapper.dorpTableByName(table.name());\n\t\t}\n\n\t\t// 先查该表是否以存在\n\t\tint exist = createMysqlTablesMapper.findTableCountByTableName(table.name());\n\n\t\t// 不存在时\n\t\tif (exist == 0) {\n\t\t\tnewTableMap.put(table.name(), newFieldList);\n\t\t} else {\n\t\t\t// 已存在时理论上做修改的操作，这里查出该表的结构\n\t\t\tList<SysMysqlColumns> tableColumnList = createMysqlTablesMapper\n\t\t\t\t\t.findTableEnsembleByTableName(table.name());\n\n\t\t\t// 从sysColumns中取出我们需要比较的列的List\n\t\t\t// 先取出name用来筛选出增加和删除的字段\n\t\t\tList<String> columnNames = ClassTools.getPropertyValueList(tableColumnList,\n\t\t\t\t\tSysMysqlColumns.COLUMN_NAME_KEY);\n\n\t\t\t// 验证对比从model中解析的fieldList与从数据库查出来的columnList\n\t\t\t// 1. 找出增加的字段\n\t\t\t// 2. 找出删除的字段\n\t\t\t// 3. 找出更新的字段\n\t\t\tbuildAddAndRemoveAndModifyFields(mySqlTypeAndLengthMap, modifyTableMap, addTableMap, removeTableMap,\n\t\t\t\tdropKeyTableMap, dropUniqueTableMap, table, newFieldList, removeFieldList, addFieldList,\n\t\t\t\tmodifyFieldList, dropKeyFieldList, dropUniqueFieldList, tableColumnList, columnNames);\n\n\t\t}\n\t}\n}\n```\n首先遍历实体类class集合, 检测是否声明了`@Table`注解, 这里利用了反射机制, 使用了Class类的`getAnnotation(Class<?>)`方法, 检测该类是否声明了参数中传入的注解。\n接着声明了一些集合, 分别用来存储新增表的字段, 删除的字段, 修改的字段, 新增的字段, 删除主键的字段以及删除唯一约束的字段。\n然后将所有的实体类的字段获取到, [这篇博文](/)对这里进行了分析。\n接着如果用户声明的策略是create, 则删除所有的表重新创建。\n接着判断表是否存在, 当表不存在时, 直接使用所有的字段和表名初始化集合。当表已经存在时, 将已经存在的表的结构和实体类中声明的表的结构进行对比, 将所有需要修改的字段初始化到集合中。\n","slug":"note/source_note/mybatis-enhance/read-mybatis-enhance","published":1,"updated":"2022-10-03T02:21:26.558Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejzr00al3vsbfzr64wp9","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>mybatis 和 hibernate 是最受欢迎的orm框架之二, 但是我一直觉得hibernate这个框架对于我来说还是太重了, 而且稍有不注意性能上就会损失巨大, 所以mybatis成为了我的首选。<br>但是hibernate有一个功能我非常喜欢, 就是可以根据实体类自动建表, 那我就想mybatis可不可以也做到这一点呢? 那么就让我来介绍一下<a href=\"http://git.oschina.net/sunchenbin/mybatis-enhance\">ACTable</a>这个开源工具, 他可以让mybatis实现自动建表的功能, 具体的使用方法大家可以通过上面的链接查看, 这篇博客主要是来记录一下这个工具的实现思路。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"实现思路\"><a href=\"#实现思路\" class=\"headerlink\" title=\"实现思路\"></a>实现思路</h1><h2 id=\"注解层\"><a href=\"#注解层\" class=\"headerlink\" title=\"注解层\"></a>注解层</h2><p>这个工具有三个注解, 分别是 <code>Column</code>, <code>LengthCount</code> 和 <code>Table</code></p>\n<ul>\n<li>Column 是注解到字段上的, 用来指定字段的名字, 类型, 长度等</li>\n<li>LengthCount 是用来标记数据库类型的长度</li>\n<li>Table 用来指定表名</li>\n</ul>\n<h2 id=\"入口\"><a href=\"#入口\" class=\"headerlink\" title=\"入口\"></a>入口</h2><p>在<code>manager.handler.StartUpHandler</code> 中定义了入口方法 <code>startHandler()</code>, 该方法使用了<code>@PostConstruct</code>注解, 该注解是Spring的注解, 使用了该注解的方法会在依赖注入(<code>@Autowired</code>)之后自动执行。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startHandler</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 执行mysql的处理方法</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (MYSQL.equals(databaseType)) &#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tlog.info(<span class=\"string\">&quot;databaseType=mysql，开始执行mysql的处理方法&quot;</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tsysMysqlCreateTableManager.createMysqlTable();</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tlog.info(<span class=\"string\">&quot;没有找到符合条件的处理方法！&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到该方法调用了<code>SysMysqlCreateTableManager</code>这个类的<code>createMysqlTable()</code>方法:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">createMysqlTable</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 不做任何事情</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"string\">&quot;none&quot;</span>.equals(tableAuto)) &#123;</span><br><span class=\"line\">\t\tlog.info(<span class=\"string\">&quot;配置mybatis.table.auto=none，不需要做任何事情&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 获取Mysql的类型，以及类型需要设置几个长度</span></span><br><span class=\"line\">\tMap&lt;String, Object&gt; mySqlTypeAndLengthMap = mySqlTypeAndLengthMap();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 从包package中获取所有的Class</span></span><br><span class=\"line\">\tSet&lt;Class&lt;?&gt;&gt; classes = ClassTools.getClasses(pack);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 用于存需要创建的表名+结构</span></span><br><span class=\"line\">\tMap&lt;String, List&lt;Object&gt;&gt; newTableMap = <span class=\"keyword\">new</span> HashMap&lt;String, List&lt;Object&gt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 用于存需要更新字段类型等的表名+结构</span></span><br><span class=\"line\">\tMap&lt;String, List&lt;Object&gt;&gt; modifyTableMap = <span class=\"keyword\">new</span> HashMap&lt;String, List&lt;Object&gt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 用于存需要增加字段的表名+结构</span></span><br><span class=\"line\">\tMap&lt;String, List&lt;Object&gt;&gt; addTableMap = <span class=\"keyword\">new</span> HashMap&lt;String, List&lt;Object&gt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 用于存需要删除字段的表名+结构</span></span><br><span class=\"line\">\tMap&lt;String, List&lt;Object&gt;&gt; removeTableMap = <span class=\"keyword\">new</span> HashMap&lt;String, List&lt;Object&gt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 用于存需要删除主键的表名+结构</span></span><br><span class=\"line\">\tMap&lt;String, List&lt;Object&gt;&gt; dropKeyTableMap = <span class=\"keyword\">new</span> HashMap&lt;String, List&lt;Object&gt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 用于存需要删除唯一约束的表名+结构</span></span><br><span class=\"line\">\tMap&lt;String, List&lt;Object&gt;&gt; dropUniqueTableMap = <span class=\"keyword\">new</span> HashMap&lt;String, List&lt;Object&gt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 构建出全部表的增删改的map</span></span><br><span class=\"line\">\tallTableMapConstruct(mySqlTypeAndLengthMap, classes, newTableMap, modifyTableMap, addTableMap, removeTableMap,</span><br><span class=\"line\">\t\t\tdropKeyTableMap, dropUniqueTableMap);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 根据传入的map，分别去创建或修改表结构</span></span><br><span class=\"line\">\tcreateOrModifyTableConstruct(newTableMap, modifyTableMap, addTableMap, removeTableMap, dropKeyTableMap,</span><br><span class=\"line\">\t\t\tdropUniqueTableMap);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>嗯, 注释写的已经非常清楚了, 首先检测用户配置的状态是什么, 然后构建操作表的sql, 最后进行实际操作。<br>值得注意的是, 这里有一个操作可以根据用户配置的包名来获取到所有实体类的Class, <a href=\"/java/read-open-source-java-version-project/read-mybatis-enhance-ClassTools.html\">这篇博文</a>对这里进行了分析。</p>\n<h2 id=\"构建出全部表的增删改的map\"><a href=\"#构建出全部表的增删改的map\" class=\"headerlink\" title=\"构建出全部表的增删改的map\"></a>构建出全部表的增删改的map</h2><p>看完了大体的思路, 接下来就来看看是怎么具体实现的。<br>首先来看看他是怎么构建出全部表的增删改的map的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 构建出全部表的增删改的map</span></span><br><span class=\"line\"><span class=\"comment\">* </span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@param</span> mySqlTypeAndLengthMap</span></span><br><span class=\"line\"><span class=\"comment\">*            获取Mysql的类型，以及类型需要设置几个长度</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@param</span> classes</span></span><br><span class=\"line\"><span class=\"comment\">*            从包package中获取所有的Class</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@param</span> newTableMap</span></span><br><span class=\"line\"><span class=\"comment\">*            用于存需要创建的表名+结构</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@param</span> modifyTableMap</span></span><br><span class=\"line\"><span class=\"comment\">*            用于存需要更新字段类型等的表名+结构</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@param</span> addTableMap</span></span><br><span class=\"line\"><span class=\"comment\">*            用于存需要增加字段的表名+结构</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@param</span> removeTableMap</span></span><br><span class=\"line\"><span class=\"comment\">*            用于存需要删除字段的表名+结构</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@param</span> dropKeyTableMap</span></span><br><span class=\"line\"><span class=\"comment\">*            用于存需要删除主键的表名+结构</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@param</span> dropUniqueTableMap</span></span><br><span class=\"line\"><span class=\"comment\">*            用于存需要删除唯一约束的表名+结构</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">allTableMapConstruct</span><span class=\"params\">(Map&lt;String, Object&gt; mySqlTypeAndLengthMap, Set&lt;Class&lt;?&gt;&gt; classes,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\t\tMap&lt;String, List&lt;Object&gt;&gt; newTableMap, Map&lt;String, List&lt;Object&gt;&gt; modifyTableMap,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\t\tMap&lt;String, List&lt;Object&gt;&gt; addTableMap, Map&lt;String, List&lt;Object&gt;&gt; removeTableMap,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\t\tMap&lt;String, List&lt;Object&gt;&gt; dropKeyTableMap, Map&lt;String, List&lt;Object&gt;&gt; dropUniqueTableMap)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (Class&lt;?&gt; clas : classes) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tTable table = clas.getAnnotation(Table.class);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 没有打注解不需要创建变量</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == table) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 用于存新增表的字段</span></span><br><span class=\"line\">\t\tList&lt;Object&gt; newFieldList = <span class=\"keyword\">new</span> ArrayList&lt;Object&gt;();</span><br><span class=\"line\">\t\t<span class=\"comment\">// 用于存删除的字段</span></span><br><span class=\"line\">\t\tList&lt;Object&gt; removeFieldList = <span class=\"keyword\">new</span> ArrayList&lt;Object&gt;();</span><br><span class=\"line\">\t\t<span class=\"comment\">// 用于存新增的字段</span></span><br><span class=\"line\">\t\tList&lt;Object&gt; addFieldList = <span class=\"keyword\">new</span> ArrayList&lt;Object&gt;();</span><br><span class=\"line\">\t\t<span class=\"comment\">// 用于存修改的字段</span></span><br><span class=\"line\">\t\tList&lt;Object&gt; modifyFieldList = <span class=\"keyword\">new</span> ArrayList&lt;Object&gt;();</span><br><span class=\"line\">\t\t<span class=\"comment\">// 用于存删除主键的字段</span></span><br><span class=\"line\">\t\tList&lt;Object&gt; dropKeyFieldList = <span class=\"keyword\">new</span> ArrayList&lt;Object&gt;();</span><br><span class=\"line\">\t\t<span class=\"comment\">// 用于存删除唯一约束的字段</span></span><br><span class=\"line\">\t\tList&lt;Object&gt; dropUniqueFieldList = <span class=\"keyword\">new</span> ArrayList&lt;Object&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 迭代出所有model的所有fields存到newFieldList中</span></span><br><span class=\"line\">\t\ttableFieldsConstruct(mySqlTypeAndLengthMap, clas, newFieldList);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 如果配置文件配置的是create，表示将所有的表删掉重新创建</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"string\">&quot;create&quot;</span>.equals(tableAuto)) &#123;</span><br><span class=\"line\">\t\t\tcreateMysqlTablesMapper.dorpTableByName(table.name());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 先查该表是否以存在</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> exist = createMysqlTablesMapper.findTableCountByTableName(table.name());</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 不存在时</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (exist == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\tnewTableMap.put(table.name(), newFieldList);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 已存在时理论上做修改的操作，这里查出该表的结构</span></span><br><span class=\"line\">\t\t\tList&lt;SysMysqlColumns&gt; tableColumnList = createMysqlTablesMapper</span><br><span class=\"line\">\t\t\t\t\t.findTableEnsembleByTableName(table.name());</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 从sysColumns中取出我们需要比较的列的List</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 先取出name用来筛选出增加和删除的字段</span></span><br><span class=\"line\">\t\t\tList&lt;String&gt; columnNames = ClassTools.getPropertyValueList(tableColumnList,</span><br><span class=\"line\">\t\t\t\t\tSysMysqlColumns.COLUMN_NAME_KEY);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 验证对比从model中解析的fieldList与从数据库查出来的columnList</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 1. 找出增加的字段</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 2. 找出删除的字段</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 3. 找出更新的字段</span></span><br><span class=\"line\">\t\t\tbuildAddAndRemoveAndModifyFields(mySqlTypeAndLengthMap, modifyTableMap, addTableMap, removeTableMap,</span><br><span class=\"line\">\t\t\t\tdropKeyTableMap, dropUniqueTableMap, table, newFieldList, removeFieldList, addFieldList,</span><br><span class=\"line\">\t\t\t\tmodifyFieldList, dropKeyFieldList, dropUniqueFieldList, tableColumnList, columnNames);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>首先遍历实体类class集合, 检测是否声明了<code>@Table</code>注解, 这里利用了反射机制, 使用了Class类的<code>getAnnotation(Class&lt;?&gt;)</code>方法, 检测该类是否声明了参数中传入的注解。<br>接着声明了一些集合, 分别用来存储新增表的字段, 删除的字段, 修改的字段, 新增的字段, 删除主键的字段以及删除唯一约束的字段。<br>然后将所有的实体类的字段获取到, <a href=\"/\">这篇博文</a>对这里进行了分析。<br>接着如果用户声明的策略是create, 则删除所有的表重新创建。<br>接着判断表是否存在, 当表不存在时, 直接使用所有的字段和表名初始化集合。当表已经存在时, 将已经存在的表的结构和实体类中声明的表的结构进行对比, 将所有需要修改的字段初始化到集合中。</p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>mybatis 和 hibernate 是最受欢迎的orm框架之二, 但是我一直觉得hibernate这个框架对于我来说还是太重了, 而且稍有不注意性能上就会损失巨大, 所以mybatis成为了我的首选。<br>但是hibernate有一个功能我非常喜欢, 就是可以根据实体类自动建表, 那我就想mybatis可不可以也做到这一点呢? 那么就让我来介绍一下<a href=\"http://git.oschina.net/sunchenbin/mybatis-enhance\">ACTable</a>这个开源工具, 他可以让mybatis实现自动建表的功能, 具体的使用方法大家可以通过上面的链接查看, 这篇博客主要是来记录一下这个工具的实现思路。</p>","more":"<h1 id=\"实现思路\"><a href=\"#实现思路\" class=\"headerlink\" title=\"实现思路\"></a>实现思路</h1><h2 id=\"注解层\"><a href=\"#注解层\" class=\"headerlink\" title=\"注解层\"></a>注解层</h2><p>这个工具有三个注解, 分别是 <code>Column</code>, <code>LengthCount</code> 和 <code>Table</code></p>\n<ul>\n<li>Column 是注解到字段上的, 用来指定字段的名字, 类型, 长度等</li>\n<li>LengthCount 是用来标记数据库类型的长度</li>\n<li>Table 用来指定表名</li>\n</ul>\n<h2 id=\"入口\"><a href=\"#入口\" class=\"headerlink\" title=\"入口\"></a>入口</h2><p>在<code>manager.handler.StartUpHandler</code> 中定义了入口方法 <code>startHandler()</code>, 该方法使用了<code>@PostConstruct</code>注解, 该注解是Spring的注解, 使用了该注解的方法会在依赖注入(<code>@Autowired</code>)之后自动执行。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startHandler</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 执行mysql的处理方法</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (MYSQL.equals(databaseType)) &#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tlog.info(<span class=\"string\">&quot;databaseType=mysql，开始执行mysql的处理方法&quot;</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tsysMysqlCreateTableManager.createMysqlTable();</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tlog.info(<span class=\"string\">&quot;没有找到符合条件的处理方法！&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到该方法调用了<code>SysMysqlCreateTableManager</code>这个类的<code>createMysqlTable()</code>方法:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">createMysqlTable</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 不做任何事情</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"string\">&quot;none&quot;</span>.equals(tableAuto)) &#123;</span><br><span class=\"line\">\t\tlog.info(<span class=\"string\">&quot;配置mybatis.table.auto=none，不需要做任何事情&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 获取Mysql的类型，以及类型需要设置几个长度</span></span><br><span class=\"line\">\tMap&lt;String, Object&gt; mySqlTypeAndLengthMap = mySqlTypeAndLengthMap();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 从包package中获取所有的Class</span></span><br><span class=\"line\">\tSet&lt;Class&lt;?&gt;&gt; classes = ClassTools.getClasses(pack);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 用于存需要创建的表名+结构</span></span><br><span class=\"line\">\tMap&lt;String, List&lt;Object&gt;&gt; newTableMap = <span class=\"keyword\">new</span> HashMap&lt;String, List&lt;Object&gt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 用于存需要更新字段类型等的表名+结构</span></span><br><span class=\"line\">\tMap&lt;String, List&lt;Object&gt;&gt; modifyTableMap = <span class=\"keyword\">new</span> HashMap&lt;String, List&lt;Object&gt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 用于存需要增加字段的表名+结构</span></span><br><span class=\"line\">\tMap&lt;String, List&lt;Object&gt;&gt; addTableMap = <span class=\"keyword\">new</span> HashMap&lt;String, List&lt;Object&gt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 用于存需要删除字段的表名+结构</span></span><br><span class=\"line\">\tMap&lt;String, List&lt;Object&gt;&gt; removeTableMap = <span class=\"keyword\">new</span> HashMap&lt;String, List&lt;Object&gt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 用于存需要删除主键的表名+结构</span></span><br><span class=\"line\">\tMap&lt;String, List&lt;Object&gt;&gt; dropKeyTableMap = <span class=\"keyword\">new</span> HashMap&lt;String, List&lt;Object&gt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 用于存需要删除唯一约束的表名+结构</span></span><br><span class=\"line\">\tMap&lt;String, List&lt;Object&gt;&gt; dropUniqueTableMap = <span class=\"keyword\">new</span> HashMap&lt;String, List&lt;Object&gt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 构建出全部表的增删改的map</span></span><br><span class=\"line\">\tallTableMapConstruct(mySqlTypeAndLengthMap, classes, newTableMap, modifyTableMap, addTableMap, removeTableMap,</span><br><span class=\"line\">\t\t\tdropKeyTableMap, dropUniqueTableMap);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 根据传入的map，分别去创建或修改表结构</span></span><br><span class=\"line\">\tcreateOrModifyTableConstruct(newTableMap, modifyTableMap, addTableMap, removeTableMap, dropKeyTableMap,</span><br><span class=\"line\">\t\t\tdropUniqueTableMap);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>嗯, 注释写的已经非常清楚了, 首先检测用户配置的状态是什么, 然后构建操作表的sql, 最后进行实际操作。<br>值得注意的是, 这里有一个操作可以根据用户配置的包名来获取到所有实体类的Class, <a href=\"/java/read-open-source-java-version-project/read-mybatis-enhance-ClassTools.html\">这篇博文</a>对这里进行了分析。</p>\n<h2 id=\"构建出全部表的增删改的map\"><a href=\"#构建出全部表的增删改的map\" class=\"headerlink\" title=\"构建出全部表的增删改的map\"></a>构建出全部表的增删改的map</h2><p>看完了大体的思路, 接下来就来看看是怎么具体实现的。<br>首先来看看他是怎么构建出全部表的增删改的map的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 构建出全部表的增删改的map</span></span><br><span class=\"line\"><span class=\"comment\">* </span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@param</span> mySqlTypeAndLengthMap</span></span><br><span class=\"line\"><span class=\"comment\">*            获取Mysql的类型，以及类型需要设置几个长度</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@param</span> classes</span></span><br><span class=\"line\"><span class=\"comment\">*            从包package中获取所有的Class</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@param</span> newTableMap</span></span><br><span class=\"line\"><span class=\"comment\">*            用于存需要创建的表名+结构</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@param</span> modifyTableMap</span></span><br><span class=\"line\"><span class=\"comment\">*            用于存需要更新字段类型等的表名+结构</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@param</span> addTableMap</span></span><br><span class=\"line\"><span class=\"comment\">*            用于存需要增加字段的表名+结构</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@param</span> removeTableMap</span></span><br><span class=\"line\"><span class=\"comment\">*            用于存需要删除字段的表名+结构</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@param</span> dropKeyTableMap</span></span><br><span class=\"line\"><span class=\"comment\">*            用于存需要删除主键的表名+结构</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@param</span> dropUniqueTableMap</span></span><br><span class=\"line\"><span class=\"comment\">*            用于存需要删除唯一约束的表名+结构</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">allTableMapConstruct</span><span class=\"params\">(Map&lt;String, Object&gt; mySqlTypeAndLengthMap, Set&lt;Class&lt;?&gt;&gt; classes,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\t\tMap&lt;String, List&lt;Object&gt;&gt; newTableMap, Map&lt;String, List&lt;Object&gt;&gt; modifyTableMap,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\t\tMap&lt;String, List&lt;Object&gt;&gt; addTableMap, Map&lt;String, List&lt;Object&gt;&gt; removeTableMap,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\t\tMap&lt;String, List&lt;Object&gt;&gt; dropKeyTableMap, Map&lt;String, List&lt;Object&gt;&gt; dropUniqueTableMap)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (Class&lt;?&gt; clas : classes) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tTable table = clas.getAnnotation(Table.class);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 没有打注解不需要创建变量</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == table) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 用于存新增表的字段</span></span><br><span class=\"line\">\t\tList&lt;Object&gt; newFieldList = <span class=\"keyword\">new</span> ArrayList&lt;Object&gt;();</span><br><span class=\"line\">\t\t<span class=\"comment\">// 用于存删除的字段</span></span><br><span class=\"line\">\t\tList&lt;Object&gt; removeFieldList = <span class=\"keyword\">new</span> ArrayList&lt;Object&gt;();</span><br><span class=\"line\">\t\t<span class=\"comment\">// 用于存新增的字段</span></span><br><span class=\"line\">\t\tList&lt;Object&gt; addFieldList = <span class=\"keyword\">new</span> ArrayList&lt;Object&gt;();</span><br><span class=\"line\">\t\t<span class=\"comment\">// 用于存修改的字段</span></span><br><span class=\"line\">\t\tList&lt;Object&gt; modifyFieldList = <span class=\"keyword\">new</span> ArrayList&lt;Object&gt;();</span><br><span class=\"line\">\t\t<span class=\"comment\">// 用于存删除主键的字段</span></span><br><span class=\"line\">\t\tList&lt;Object&gt; dropKeyFieldList = <span class=\"keyword\">new</span> ArrayList&lt;Object&gt;();</span><br><span class=\"line\">\t\t<span class=\"comment\">// 用于存删除唯一约束的字段</span></span><br><span class=\"line\">\t\tList&lt;Object&gt; dropUniqueFieldList = <span class=\"keyword\">new</span> ArrayList&lt;Object&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 迭代出所有model的所有fields存到newFieldList中</span></span><br><span class=\"line\">\t\ttableFieldsConstruct(mySqlTypeAndLengthMap, clas, newFieldList);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 如果配置文件配置的是create，表示将所有的表删掉重新创建</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"string\">&quot;create&quot;</span>.equals(tableAuto)) &#123;</span><br><span class=\"line\">\t\t\tcreateMysqlTablesMapper.dorpTableByName(table.name());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 先查该表是否以存在</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> exist = createMysqlTablesMapper.findTableCountByTableName(table.name());</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 不存在时</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (exist == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\tnewTableMap.put(table.name(), newFieldList);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 已存在时理论上做修改的操作，这里查出该表的结构</span></span><br><span class=\"line\">\t\t\tList&lt;SysMysqlColumns&gt; tableColumnList = createMysqlTablesMapper</span><br><span class=\"line\">\t\t\t\t\t.findTableEnsembleByTableName(table.name());</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 从sysColumns中取出我们需要比较的列的List</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 先取出name用来筛选出增加和删除的字段</span></span><br><span class=\"line\">\t\t\tList&lt;String&gt; columnNames = ClassTools.getPropertyValueList(tableColumnList,</span><br><span class=\"line\">\t\t\t\t\tSysMysqlColumns.COLUMN_NAME_KEY);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 验证对比从model中解析的fieldList与从数据库查出来的columnList</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 1. 找出增加的字段</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 2. 找出删除的字段</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 3. 找出更新的字段</span></span><br><span class=\"line\">\t\t\tbuildAddAndRemoveAndModifyFields(mySqlTypeAndLengthMap, modifyTableMap, addTableMap, removeTableMap,</span><br><span class=\"line\">\t\t\t\tdropKeyTableMap, dropUniqueTableMap, table, newFieldList, removeFieldList, addFieldList,</span><br><span class=\"line\">\t\t\t\tmodifyFieldList, dropKeyFieldList, dropUniqueFieldList, tableColumnList, columnNames);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>首先遍历实体类class集合, 检测是否声明了<code>@Table</code>注解, 这里利用了反射机制, 使用了Class类的<code>getAnnotation(Class&lt;?&gt;)</code>方法, 检测该类是否声明了参数中传入的注解。<br>接着声明了一些集合, 分别用来存储新增表的字段, 删除的字段, 修改的字段, 新增的字段, 删除主键的字段以及删除唯一约束的字段。<br>然后将所有的实体类的字段获取到, <a href=\"/\">这篇博文</a>对这里进行了分析。<br>接着如果用户声明的策略是create, 则删除所有的表重新创建。<br>接着判断表是否存在, 当表不存在时, 直接使用所有的字段和表名初始化集合。当表已经存在时, 将已经存在的表的结构和实体类中声明的表的结构进行对比, 将所有需要修改的字段初始化到集合中。</p>"},{"title":"使用maven插件创建一个servlet项目","date":"2020-01-09T08:16:28.000Z","_content":"\n# 依赖\n\n使用 idea 新创建一个 maven 项目, 不要选择任何模板, 在 `pom.xml` 中添加下列依赖:\n\n<!--more-->\n\n```xml\n<packaging>war</packaging>\n\n<properties>\n    <jsp-version>2.3.3</jsp-version>\n    <servlet-version>4.0.1</servlet-version>\n</properties>\n\n<dependencies>\n    <dependency>\n        <groupId>javax.servlet.jsp</groupId>\n        <artifactId>javax.servlet.jsp-api</artifactId>\n\t\t<version>${jsp-version}</version>\n\t\t<scope>provided</scope>\n    </dependency>\n\n    <dependency>\n        <groupId>javax.servlet</groupId>\n        <artifactId>javax.servlet-api</artifactId>\n\t\t<version>${servlet-version}</version>\n        <scope>provided</scope>\n    </dependency>\n</dependencies>\n\n<build>\n    <plugins>\n        <plugin>\n            <groupId>org.apache.tomcat.maven</groupId>\n            <artifactId>tomcat7-maven-plugin</artifactId>\n            <version>2.2</version>\n            <configuration>\n                <path>/</path>\n                <port>8090</port>\n                <server>tomcat7</server>\n            </configuration>\n            <executions>\n                <execution>\n                    <phase>package</phase>\n                    <goals>\n                        <goal>run</goal>\n                    </goals>\n                </execution>\n            </executions>\n        </plugin>\n    </plugins>\n</build>\n```\n\n> 注意, 这里一定要把 packaging 改成 war\n\n# 目录路径\n\n在 `src/main` 目录下新建一个 `webapp/WEB-INF` 文件夹, 新建一个 `web.xml`, 内容是:\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<web-app xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd\"\n         version=\"4.0\">\n\n    <servlet>\n        <servlet-name>hello</servlet-name>\n        <servlet-class>Hello</servlet-class>\n    </servlet>\n\n    <servlet-mapping>\n        <servlet-name>hello</servlet-name>\n        <url-pattern>/hello</url-pattern>\n    </servlet-mapping>\n</web-app>\n```\n\n# 新建一个servlet\n\n在 `src/main/java` 路径下新建一个 `Hello.java`, 内容是:\n\n```java\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.io.PrintWriter;\n\n/**\n * @author littleboy\n */\n\npublic class Hello extends HttpServlet {\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        PrintWriter printWriter = resp.getWriter();\n        printWriter.println(\"hello\");\n    }\n}\n```\n\n# 测试\n\n访问 `http://localhost:8090/hello`, 就可以看到 `hello` 字样了。\n","source":"_posts/back_skill_experience/java/maven/servlet/servlet-inline-tomcat.md","raw":"---\ntitle: 使用maven插件创建一个servlet项目\ndate: 2020-01-09 16:16:28\ncategories:\n- 后端技巧/经验\n- java\ntags:\n- maven\n- servlet\n---\n\n# 依赖\n\n使用 idea 新创建一个 maven 项目, 不要选择任何模板, 在 `pom.xml` 中添加下列依赖:\n\n<!--more-->\n\n```xml\n<packaging>war</packaging>\n\n<properties>\n    <jsp-version>2.3.3</jsp-version>\n    <servlet-version>4.0.1</servlet-version>\n</properties>\n\n<dependencies>\n    <dependency>\n        <groupId>javax.servlet.jsp</groupId>\n        <artifactId>javax.servlet.jsp-api</artifactId>\n\t\t<version>${jsp-version}</version>\n\t\t<scope>provided</scope>\n    </dependency>\n\n    <dependency>\n        <groupId>javax.servlet</groupId>\n        <artifactId>javax.servlet-api</artifactId>\n\t\t<version>${servlet-version}</version>\n        <scope>provided</scope>\n    </dependency>\n</dependencies>\n\n<build>\n    <plugins>\n        <plugin>\n            <groupId>org.apache.tomcat.maven</groupId>\n            <artifactId>tomcat7-maven-plugin</artifactId>\n            <version>2.2</version>\n            <configuration>\n                <path>/</path>\n                <port>8090</port>\n                <server>tomcat7</server>\n            </configuration>\n            <executions>\n                <execution>\n                    <phase>package</phase>\n                    <goals>\n                        <goal>run</goal>\n                    </goals>\n                </execution>\n            </executions>\n        </plugin>\n    </plugins>\n</build>\n```\n\n> 注意, 这里一定要把 packaging 改成 war\n\n# 目录路径\n\n在 `src/main` 目录下新建一个 `webapp/WEB-INF` 文件夹, 新建一个 `web.xml`, 内容是:\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<web-app xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd\"\n         version=\"4.0\">\n\n    <servlet>\n        <servlet-name>hello</servlet-name>\n        <servlet-class>Hello</servlet-class>\n    </servlet>\n\n    <servlet-mapping>\n        <servlet-name>hello</servlet-name>\n        <url-pattern>/hello</url-pattern>\n    </servlet-mapping>\n</web-app>\n```\n\n# 新建一个servlet\n\n在 `src/main/java` 路径下新建一个 `Hello.java`, 内容是:\n\n```java\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.io.PrintWriter;\n\n/**\n * @author littleboy\n */\n\npublic class Hello extends HttpServlet {\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        PrintWriter printWriter = resp.getWriter();\n        printWriter.println(\"hello\");\n    }\n}\n```\n\n# 测试\n\n访问 `http://localhost:8090/hello`, 就可以看到 `hello` 字样了。\n","slug":"back_skill_experience/java/maven/servlet/servlet-inline-tomcat","published":1,"updated":"2022-10-02T16:42:14.251Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylejzv00ao3vsb53gf17om","content":"<h1 id=\"依赖\"><a href=\"#依赖\" class=\"headerlink\" title=\"依赖\"></a>依赖</h1><p>使用 idea 新创建一个 maven 项目, 不要选择任何模板, 在 <code>pom.xml</code> 中添加下列依赖:</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>war<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">jsp-version</span>&gt;</span>2.3.3<span class=\"tag\">&lt;/<span class=\"name\">jsp-version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-version</span>&gt;</span>4.0.1<span class=\"tag\">&lt;/<span class=\"name\">servlet-version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet.jsp<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>javax.servlet.jsp-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;jsp-version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>provided<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>javax.servlet-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;servlet-version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>provided<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.tomcat.maven<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">path</span>&gt;</span>/<span class=\"tag\">&lt;/<span class=\"name\">path</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">port</span>&gt;</span>8090<span class=\"tag\">&lt;/<span class=\"name\">port</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">server</span>&gt;</span>tomcat7<span class=\"tag\">&lt;/<span class=\"name\">server</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">phase</span>&gt;</span>package<span class=\"tag\">&lt;/<span class=\"name\">phase</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>run<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意, 这里一定要把 packaging 改成 war</p>\n</blockquote>\n<h1 id=\"目录路径\"><a href=\"#目录路径\" class=\"headerlink\" title=\"目录路径\"></a>目录路径</h1><p>在 <code>src/main</code> 目录下新建一个 <code>webapp/WEB-INF</code> 文件夹, 新建一个 <code>web.xml</code>, 内容是:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">web-app</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">version</span>=<span class=\"string\">&quot;4.0&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>Hello<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/hello<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"新建一个servlet\"><a href=\"#新建一个servlet\" class=\"headerlink\" title=\"新建一个servlet\"></a>新建一个servlet</h1><p>在 <code>src/main/java</code> 路径下新建一个 <code>Hello.java</code>, 内容是:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServlet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.PrintWriter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> littleboy</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hello</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        PrintWriter printWriter = resp.getWriter();</span><br><span class=\"line\">        printWriter.println(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h1><p>访问 <code>http://localhost:8090/hello</code>, 就可以看到 <code>hello</code> 字样了。</p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"依赖\"><a href=\"#依赖\" class=\"headerlink\" title=\"依赖\"></a>依赖</h1><p>使用 idea 新创建一个 maven 项目, 不要选择任何模板, 在 <code>pom.xml</code> 中添加下列依赖:</p>","more":"<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>war<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">jsp-version</span>&gt;</span>2.3.3<span class=\"tag\">&lt;/<span class=\"name\">jsp-version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-version</span>&gt;</span>4.0.1<span class=\"tag\">&lt;/<span class=\"name\">servlet-version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet.jsp<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>javax.servlet.jsp-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;jsp-version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>provided<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>javax.servlet-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;servlet-version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>provided<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.tomcat.maven<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">path</span>&gt;</span>/<span class=\"tag\">&lt;/<span class=\"name\">path</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">port</span>&gt;</span>8090<span class=\"tag\">&lt;/<span class=\"name\">port</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">server</span>&gt;</span>tomcat7<span class=\"tag\">&lt;/<span class=\"name\">server</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">phase</span>&gt;</span>package<span class=\"tag\">&lt;/<span class=\"name\">phase</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>run<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意, 这里一定要把 packaging 改成 war</p>\n</blockquote>\n<h1 id=\"目录路径\"><a href=\"#目录路径\" class=\"headerlink\" title=\"目录路径\"></a>目录路径</h1><p>在 <code>src/main</code> 目录下新建一个 <code>webapp/WEB-INF</code> 文件夹, 新建一个 <code>web.xml</code>, 内容是:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">web-app</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">version</span>=<span class=\"string\">&quot;4.0&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>Hello<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/hello<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"新建一个servlet\"><a href=\"#新建一个servlet\" class=\"headerlink\" title=\"新建一个servlet\"></a>新建一个servlet</h1><p>在 <code>src/main/java</code> 路径下新建一个 <code>Hello.java</code>, 内容是:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServlet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.PrintWriter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> littleboy</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hello</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        PrintWriter printWriter = resp.getWriter();</span><br><span class=\"line\">        printWriter.println(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h1><p>访问 <code>http://localhost:8090/hello</code>, 就可以看到 <code>hello</code> 字样了。</p>"},{"title":"springboot自定义数据库异常","date":"2019-05-21T03:33:40.000Z","_content":"\n# 前言\n\n有的时候可能会需要自定义数据库的异常并且在某种希望的情况抛出, 比如如果在程序中加入了数据层的代理, 这个代理有可能会抛出自己的的一些错误码, 那么就需要自己定义异常然后根据错误码抛出。\n\n<!--more-->\n\n# 数据库异常\n\n所有的异常都继承自`DataAccessException`, 如果我们要定义自己的异常可以直接继承自这个类。\n\n如果我们需要根据特定的错误码来抛出自定义的异常, 可以将错误码定义到`resources/sql-error-codes.xml`这个文件中, 这样就会覆盖掉官方的默认的错误码, 这有个例子:\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE beans PUBLIC \"-//SPRING//DTD BEAN 2.0//EN\" \"https://www.springframework.org/dtd/spring-beans-2.0.dtd\">\n<beans>\n    <bean id=\"MySQL\" class=\"org.springframework.jdbc.support.SQLErrorCodes\">\n        <property name=\"databaseProductNames\">\n            <list>\n                <value>MySQL</value>\n                <value>MariaDB</value>\n            </list>\n        </property>\n        <property name=\"badSqlGrammarCodes\">\n            <value>1054,1064,1146</value>\n        </property>\n        <property name=\"duplicateKeyCodes\">\n            <value>1062</value>\n        </property>\n        <property name=\"dataIntegrityViolationCodes\">\n            <value>630,839,840,893,1169,1215,1216,1217,1364,1451,1452,1557</value>\n        </property>\n        <property name=\"dataAccessResourceFailureCodes\">\n            <value>1</value>\n        </property>\n        <property name=\"cannotAcquireLockCodes\">\n            <value>1205</value>\n        </property>\n        <property name=\"deadlockLoserCodes\">\n            <value>1213</value>\n        </property>\n        <property name=\"customTranslations\">\n            <bean class=\"org.springframework.jdbc.support.CustomSQLErrorCodesTranslation\">\n                <property name=\"errorCodes\" value=\"1062\" />\n                <property name=\"exceptionClass\"\n                          value=\"com.littleboy.exception.CustomDuplicateException\" />\n            </bean>\n        </property>\n    </bean>\n</beans>\n```\n\n这里我将`1062`这个错误码(也就是mysql的重复主键)定义为当出现这个错误的时候抛出我自己定义的异常`CustomDuplicateException`。\n\nCustomDuplicateException:\n\n```java\npublic class CustomDuplicateException extends DuplicateKeyException {\n    public CustomDuplicateException(String msg) {\n        super(msg);\n    }\n\n    public CustomDuplicateException(String msg, Throwable cause) {\n        super(msg, cause);\n    }\n}\n```\n\n下面我们来测试一下:\n\n```java\n@RunWith(SpringRunner.class)\n@SpringBootTest\npublic class Chapter12ApplicationTests {\n    @Autowired\n    private JdbcTemplate mJdbcTemplate;\n\n    @Test(expected = CustomDuplicateException.class)\n    public void contextLoads() {\n        mJdbcTemplate.execute(\"insert into Foo(id, bar) values(1, 'a')\");\n    }\n\n}\n```\n\n这里我们指定如果这个单元测试抛出了`CustDuplicateException`则通过。\n","source":"_posts/back_skill_experience/java/spring/spring-family-meals/springboot-custom-datasource-exception.md","raw":"---\ntitle: springboot自定义数据库异常\ndate: 2019-05-21 11:33:40\ncategories:\n- 后端技巧/经验\n- java\n- spring\ntags:\n- java\n- spring\n---\n\n# 前言\n\n有的时候可能会需要自定义数据库的异常并且在某种希望的情况抛出, 比如如果在程序中加入了数据层的代理, 这个代理有可能会抛出自己的的一些错误码, 那么就需要自己定义异常然后根据错误码抛出。\n\n<!--more-->\n\n# 数据库异常\n\n所有的异常都继承自`DataAccessException`, 如果我们要定义自己的异常可以直接继承自这个类。\n\n如果我们需要根据特定的错误码来抛出自定义的异常, 可以将错误码定义到`resources/sql-error-codes.xml`这个文件中, 这样就会覆盖掉官方的默认的错误码, 这有个例子:\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE beans PUBLIC \"-//SPRING//DTD BEAN 2.0//EN\" \"https://www.springframework.org/dtd/spring-beans-2.0.dtd\">\n<beans>\n    <bean id=\"MySQL\" class=\"org.springframework.jdbc.support.SQLErrorCodes\">\n        <property name=\"databaseProductNames\">\n            <list>\n                <value>MySQL</value>\n                <value>MariaDB</value>\n            </list>\n        </property>\n        <property name=\"badSqlGrammarCodes\">\n            <value>1054,1064,1146</value>\n        </property>\n        <property name=\"duplicateKeyCodes\">\n            <value>1062</value>\n        </property>\n        <property name=\"dataIntegrityViolationCodes\">\n            <value>630,839,840,893,1169,1215,1216,1217,1364,1451,1452,1557</value>\n        </property>\n        <property name=\"dataAccessResourceFailureCodes\">\n            <value>1</value>\n        </property>\n        <property name=\"cannotAcquireLockCodes\">\n            <value>1205</value>\n        </property>\n        <property name=\"deadlockLoserCodes\">\n            <value>1213</value>\n        </property>\n        <property name=\"customTranslations\">\n            <bean class=\"org.springframework.jdbc.support.CustomSQLErrorCodesTranslation\">\n                <property name=\"errorCodes\" value=\"1062\" />\n                <property name=\"exceptionClass\"\n                          value=\"com.littleboy.exception.CustomDuplicateException\" />\n            </bean>\n        </property>\n    </bean>\n</beans>\n```\n\n这里我将`1062`这个错误码(也就是mysql的重复主键)定义为当出现这个错误的时候抛出我自己定义的异常`CustomDuplicateException`。\n\nCustomDuplicateException:\n\n```java\npublic class CustomDuplicateException extends DuplicateKeyException {\n    public CustomDuplicateException(String msg) {\n        super(msg);\n    }\n\n    public CustomDuplicateException(String msg, Throwable cause) {\n        super(msg, cause);\n    }\n}\n```\n\n下面我们来测试一下:\n\n```java\n@RunWith(SpringRunner.class)\n@SpringBootTest\npublic class Chapter12ApplicationTests {\n    @Autowired\n    private JdbcTemplate mJdbcTemplate;\n\n    @Test(expected = CustomDuplicateException.class)\n    public void contextLoads() {\n        mJdbcTemplate.execute(\"insert into Foo(id, bar) values(1, 'a')\");\n    }\n\n}\n```\n\n这里我们指定如果这个单元测试抛出了`CustDuplicateException`则通过。\n","slug":"back_skill_experience/java/spring/spring-family-meals/springboot-custom-datasource-exception","published":1,"updated":"2022-10-07T13:22:00.926Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylek0200ar3vsb4hj98gqe","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>有的时候可能会需要自定义数据库的异常并且在某种希望的情况抛出, 比如如果在程序中加入了数据层的代理, 这个代理有可能会抛出自己的的一些错误码, 那么就需要自己定义异常然后根据错误码抛出。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"数据库异常\"><a href=\"#数据库异常\" class=\"headerlink\" title=\"数据库异常\"></a>数据库异常</h1><p>所有的异常都继承自<code>DataAccessException</code>, 如果我们要定义自己的异常可以直接继承自这个类。</p>\n<p>如果我们需要根据特定的错误码来抛出自定义的异常, 可以将错误码定义到<code>resources/sql-error-codes.xml</code>这个文件中, 这样就会覆盖掉官方的默认的错误码, 这有个例子:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">beans</span> <span class=\"meta-keyword\">PUBLIC</span> <span class=\"meta-string\">&quot;-//SPRING//DTD BEAN 2.0//EN&quot;</span> <span class=\"meta-string\">&quot;https://www.springframework.org/dtd/spring-beans-2.0.dtd&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;MySQL&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.jdbc.support.SQLErrorCodes&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;databaseProductNames&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>MySQL<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>MariaDB<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;badSqlGrammarCodes&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>1054,1064,1146<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;duplicateKeyCodes&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>1062<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;dataIntegrityViolationCodes&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>630,839,840,893,1169,1215,1216,1217,1364,1451,1452,1557<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;dataAccessResourceFailureCodes&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;cannotAcquireLockCodes&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>1205<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;deadlockLoserCodes&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>1213<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;customTranslations&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.jdbc.support.CustomSQLErrorCodesTranslation&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;errorCodes&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;1062&quot;</span> /&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;exceptionClass&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                          <span class=\"attr\">value</span>=<span class=\"string\">&quot;com.littleboy.exception.CustomDuplicateException&quot;</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这里我将<code>1062</code>这个错误码(也就是mysql的重复主键)定义为当出现这个错误的时候抛出我自己定义的异常<code>CustomDuplicateException</code>。</p>\n<p>CustomDuplicateException:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CustomDuplicateException</span> <span class=\"keyword\">extends</span> <span class=\"title\">DuplicateKeyException</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CustomDuplicateException</span><span class=\"params\">(String msg)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CustomDuplicateException</span><span class=\"params\">(String msg, Throwable cause)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(msg, cause);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面我们来测试一下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RunWith(SpringRunner.class)</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Chapter12ApplicationTests</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> JdbcTemplate mJdbcTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test(expected = CustomDuplicateException.class)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">contextLoads</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        mJdbcTemplate.execute(<span class=\"string\">&quot;insert into Foo(id, bar) values(1, &#x27;a&#x27;)&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里我们指定如果这个单元测试抛出了<code>CustDuplicateException</code>则通过。</p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>有的时候可能会需要自定义数据库的异常并且在某种希望的情况抛出, 比如如果在程序中加入了数据层的代理, 这个代理有可能会抛出自己的的一些错误码, 那么就需要自己定义异常然后根据错误码抛出。</p>","more":"<h1 id=\"数据库异常\"><a href=\"#数据库异常\" class=\"headerlink\" title=\"数据库异常\"></a>数据库异常</h1><p>所有的异常都继承自<code>DataAccessException</code>, 如果我们要定义自己的异常可以直接继承自这个类。</p>\n<p>如果我们需要根据特定的错误码来抛出自定义的异常, 可以将错误码定义到<code>resources/sql-error-codes.xml</code>这个文件中, 这样就会覆盖掉官方的默认的错误码, 这有个例子:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">beans</span> <span class=\"meta-keyword\">PUBLIC</span> <span class=\"meta-string\">&quot;-//SPRING//DTD BEAN 2.0//EN&quot;</span> <span class=\"meta-string\">&quot;https://www.springframework.org/dtd/spring-beans-2.0.dtd&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;MySQL&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.jdbc.support.SQLErrorCodes&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;databaseProductNames&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>MySQL<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>MariaDB<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;badSqlGrammarCodes&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>1054,1064,1146<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;duplicateKeyCodes&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>1062<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;dataIntegrityViolationCodes&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>630,839,840,893,1169,1215,1216,1217,1364,1451,1452,1557<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;dataAccessResourceFailureCodes&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;cannotAcquireLockCodes&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>1205<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;deadlockLoserCodes&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>1213<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;customTranslations&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.jdbc.support.CustomSQLErrorCodesTranslation&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;errorCodes&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;1062&quot;</span> /&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;exceptionClass&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                          <span class=\"attr\">value</span>=<span class=\"string\">&quot;com.littleboy.exception.CustomDuplicateException&quot;</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这里我将<code>1062</code>这个错误码(也就是mysql的重复主键)定义为当出现这个错误的时候抛出我自己定义的异常<code>CustomDuplicateException</code>。</p>\n<p>CustomDuplicateException:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CustomDuplicateException</span> <span class=\"keyword\">extends</span> <span class=\"title\">DuplicateKeyException</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CustomDuplicateException</span><span class=\"params\">(String msg)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CustomDuplicateException</span><span class=\"params\">(String msg, Throwable cause)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(msg, cause);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面我们来测试一下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RunWith(SpringRunner.class)</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Chapter12ApplicationTests</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> JdbcTemplate mJdbcTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test(expected = CustomDuplicateException.class)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">contextLoads</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        mJdbcTemplate.execute(<span class=\"string\">&quot;insert into Foo(id, bar) values(1, &#x27;a&#x27;)&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里我们指定如果这个单元测试抛出了<code>CustDuplicateException</code>则通过。</p>"},{"title":"连接池介绍","date":"2019-05-19T09:46:41.000Z","_content":"\n# 前言\n\n本编博客介绍了两个SpringBoot的数据源。\n\nSpringBoot各个版本使用的数据源:\n\n* 1.0 使用的是tomcat的dataSource\n* 2.0 使用的是HikariCP\n\n<!--more-->\n\n# HikariCP\n\n常用配置:\n\n* spring.datasource.hikari.maximumPoolSize=10\n* spring.datasource.hikari.minimumIdle=10\n* spring.datasource.hikari.idleTimeout=6000000\n* spring.datasource.hikari.connectiontimeout=30000\n* spring.datasource.hikari.maxLifetime=18000000\n\n这里是它的[官网](http://brettwooldridge.github.io/HikariCP/)\n\n这里是关于它的性能优化的一些[文章](https://github.com/brettwooldridge/HikariCP/wiki)\n\n# Druid\n\n有两种方式:\n\n* 直接配置一个dataSource bean\n* 使用springBoot的`druid-spring-boot-starter`实现自动配置\n\n## 自动配置方式\n\n引入依赖:\n\n```xml\n<dependency>\n    <groupId>com.alibaba</groupId>\n    <artifactId>druid-spring-boot-starter</artifactId>\n    <version>1.1.16</version>\n</dependency>\n```\n\n排除默认的数据源hikari:\n\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-jdbc</artifactId>\n    <exclusions>\n        <exclusion>\n            <groupId>com.zaxxer</groupId>\n            <artifactId>HikariCP</artifactId>\n        </exclusion>\n    </exclusions>\n</dependency>\n```\n\n配置文件可以上[druid的github](https://github.com/alibaba/druid/blob/master/druid-spring-boot-starter/README.md)上查找详细的配置信息。\n","source":"_posts/back_skill_experience/java/spring/spring-family-meals/springboot-datasource-introduction.md","raw":"---\ntitle: 连接池介绍\ndate: 2019-05-19 17:46:41\ncategories:\n- 后端技巧/经验\n- java\n- spring\ntags:\n- java\n- spring\n---\n\n# 前言\n\n本编博客介绍了两个SpringBoot的数据源。\n\nSpringBoot各个版本使用的数据源:\n\n* 1.0 使用的是tomcat的dataSource\n* 2.0 使用的是HikariCP\n\n<!--more-->\n\n# HikariCP\n\n常用配置:\n\n* spring.datasource.hikari.maximumPoolSize=10\n* spring.datasource.hikari.minimumIdle=10\n* spring.datasource.hikari.idleTimeout=6000000\n* spring.datasource.hikari.connectiontimeout=30000\n* spring.datasource.hikari.maxLifetime=18000000\n\n这里是它的[官网](http://brettwooldridge.github.io/HikariCP/)\n\n这里是关于它的性能优化的一些[文章](https://github.com/brettwooldridge/HikariCP/wiki)\n\n# Druid\n\n有两种方式:\n\n* 直接配置一个dataSource bean\n* 使用springBoot的`druid-spring-boot-starter`实现自动配置\n\n## 自动配置方式\n\n引入依赖:\n\n```xml\n<dependency>\n    <groupId>com.alibaba</groupId>\n    <artifactId>druid-spring-boot-starter</artifactId>\n    <version>1.1.16</version>\n</dependency>\n```\n\n排除默认的数据源hikari:\n\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-jdbc</artifactId>\n    <exclusions>\n        <exclusion>\n            <groupId>com.zaxxer</groupId>\n            <artifactId>HikariCP</artifactId>\n        </exclusion>\n    </exclusions>\n</dependency>\n```\n\n配置文件可以上[druid的github](https://github.com/alibaba/druid/blob/master/druid-spring-boot-starter/README.md)上查找详细的配置信息。\n","slug":"back_skill_experience/java/spring/spring-family-meals/springboot-datasource-introduction","published":1,"updated":"2022-10-07T13:22:12.012Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylek0600au3vsb7zgsgexh","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>本编博客介绍了两个SpringBoot的数据源。</p>\n<p>SpringBoot各个版本使用的数据源:</p>\n<ul>\n<li>1.0 使用的是tomcat的dataSource</li>\n<li>2.0 使用的是HikariCP</li>\n</ul>\n<span id=\"more\"></span>\n\n<h1 id=\"HikariCP\"><a href=\"#HikariCP\" class=\"headerlink\" title=\"HikariCP\"></a>HikariCP</h1><p>常用配置:</p>\n<ul>\n<li>spring.datasource.hikari.maximumPoolSize&#x3D;10</li>\n<li>spring.datasource.hikari.minimumIdle&#x3D;10</li>\n<li>spring.datasource.hikari.idleTimeout&#x3D;6000000</li>\n<li>spring.datasource.hikari.connectiontimeout&#x3D;30000</li>\n<li>spring.datasource.hikari.maxLifetime&#x3D;18000000</li>\n</ul>\n<p>这里是它的<a href=\"http://brettwooldridge.github.io/HikariCP/\">官网</a></p>\n<p>这里是关于它的性能优化的一些<a href=\"https://github.com/brettwooldridge/HikariCP/wiki\">文章</a></p>\n<h1 id=\"Druid\"><a href=\"#Druid\" class=\"headerlink\" title=\"Druid\"></a>Druid</h1><p>有两种方式:</p>\n<ul>\n<li>直接配置一个dataSource bean</li>\n<li>使用springBoot的<code>druid-spring-boot-starter</code>实现自动配置</li>\n</ul>\n<h2 id=\"自动配置方式\"><a href=\"#自动配置方式\" class=\"headerlink\" title=\"自动配置方式\"></a>自动配置方式</h2><p>引入依赖:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>druid-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.16<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>排除默认的数据源hikari:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.zaxxer<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>HikariCP<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>配置文件可以上<a href=\"https://github.com/alibaba/druid/blob/master/druid-spring-boot-starter/README.md\">druid的github</a>上查找详细的配置信息。</p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>本编博客介绍了两个SpringBoot的数据源。</p>\n<p>SpringBoot各个版本使用的数据源:</p>\n<ul>\n<li>1.0 使用的是tomcat的dataSource</li>\n<li>2.0 使用的是HikariCP</li>\n</ul>","more":"<h1 id=\"HikariCP\"><a href=\"#HikariCP\" class=\"headerlink\" title=\"HikariCP\"></a>HikariCP</h1><p>常用配置:</p>\n<ul>\n<li>spring.datasource.hikari.maximumPoolSize&#x3D;10</li>\n<li>spring.datasource.hikari.minimumIdle&#x3D;10</li>\n<li>spring.datasource.hikari.idleTimeout&#x3D;6000000</li>\n<li>spring.datasource.hikari.connectiontimeout&#x3D;30000</li>\n<li>spring.datasource.hikari.maxLifetime&#x3D;18000000</li>\n</ul>\n<p>这里是它的<a href=\"http://brettwooldridge.github.io/HikariCP/\">官网</a></p>\n<p>这里是关于它的性能优化的一些<a href=\"https://github.com/brettwooldridge/HikariCP/wiki\">文章</a></p>\n<h1 id=\"Druid\"><a href=\"#Druid\" class=\"headerlink\" title=\"Druid\"></a>Druid</h1><p>有两种方式:</p>\n<ul>\n<li>直接配置一个dataSource bean</li>\n<li>使用springBoot的<code>druid-spring-boot-starter</code>实现自动配置</li>\n</ul>\n<h2 id=\"自动配置方式\"><a href=\"#自动配置方式\" class=\"headerlink\" title=\"自动配置方式\"></a>自动配置方式</h2><p>引入依赖:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>druid-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.16<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>排除默认的数据源hikari:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.zaxxer<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>HikariCP<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>配置文件可以上<a href=\"https://github.com/alibaba/druid/blob/master/druid-spring-boot-starter/README.md\">druid的github</a>上查找详细的配置信息。</p>"},{"title":"springboot配置多数据源","date":"2019-05-19T09:05:15.000Z","_content":"\n# 前言\n\n[上一篇](/java/spring/spring-family-meals/springboot-datasource-single.html)博客讨论了如何配置单数据源, 这一篇博客接着讨论如何配置多数据源。\n<!--more-->\n\n# 配置文件\n\n首先需要将数据源的连接字符串写到配置文件中:\n\n```properties\nspringtestdb.datasource.url=jdbc:mysql://127.0.0.1:3306/springboottestdb?serverTimezone=UTC\nspringtestdb.datasource.username=root\nspringtestdb.datasource.password=password\n\nprinter.datasource.url=jdbc:mysql://127.0.0.1:3306/printer?serverTimezone=UTC\nprinter.datasource.username=root\nprinter.datasource.password=password\n```\n\n# 配置类\n\n接着写配置类:\n\n```java\n@Configuration\n@EnableTransactionManagement\n@Slf4j\npublic class PrinterDataSource {\n    @Bean\n    @ConfigurationProperties(\"printer.datasource\")\n    public DataSourceProperties printerDataSourceProperties() {\n        return new DataSourceProperties();\n    }\n\n    @Bean(name = \"printer\")\n    public DataSource printerDataSource() {\n        DataSourceProperties dataSourceProperties = printerDataSourceProperties();\n        log.info(dataSourceProperties.getUrl());\n        return dataSourceProperties.initializeDataSourceBuilder().build();\n    }\n\n    @Bean\n    public PlatformTransactionManager printerTransactionManager(DataSource printer) {\n        return new DataSourceTransactionManager(printer);\n    }\n}\n```\n\n这里使用了DataSourceProperties将配置文件中的配置设置到了DataSource中, 这样配置了之后, 其他的数据源的配置也可以像这样配置。\n","source":"_posts/back_skill_experience/java/spring/spring-family-meals/springboot-datasource-multi.md","raw":"---\ntitle: springboot配置多数据源\ndate: 2019-05-19 17:05:15\ncategories:\n- 后端技巧/经验\n- java\n- spring\ntags:\n- java\n- spring\n---\n\n# 前言\n\n[上一篇](/java/spring/spring-family-meals/springboot-datasource-single.html)博客讨论了如何配置单数据源, 这一篇博客接着讨论如何配置多数据源。\n<!--more-->\n\n# 配置文件\n\n首先需要将数据源的连接字符串写到配置文件中:\n\n```properties\nspringtestdb.datasource.url=jdbc:mysql://127.0.0.1:3306/springboottestdb?serverTimezone=UTC\nspringtestdb.datasource.username=root\nspringtestdb.datasource.password=password\n\nprinter.datasource.url=jdbc:mysql://127.0.0.1:3306/printer?serverTimezone=UTC\nprinter.datasource.username=root\nprinter.datasource.password=password\n```\n\n# 配置类\n\n接着写配置类:\n\n```java\n@Configuration\n@EnableTransactionManagement\n@Slf4j\npublic class PrinterDataSource {\n    @Bean\n    @ConfigurationProperties(\"printer.datasource\")\n    public DataSourceProperties printerDataSourceProperties() {\n        return new DataSourceProperties();\n    }\n\n    @Bean(name = \"printer\")\n    public DataSource printerDataSource() {\n        DataSourceProperties dataSourceProperties = printerDataSourceProperties();\n        log.info(dataSourceProperties.getUrl());\n        return dataSourceProperties.initializeDataSourceBuilder().build();\n    }\n\n    @Bean\n    public PlatformTransactionManager printerTransactionManager(DataSource printer) {\n        return new DataSourceTransactionManager(printer);\n    }\n}\n```\n\n这里使用了DataSourceProperties将配置文件中的配置设置到了DataSource中, 这样配置了之后, 其他的数据源的配置也可以像这样配置。\n","slug":"back_skill_experience/java/spring/spring-family-meals/springboot-datasource-multi","published":1,"updated":"2022-10-07T13:22:19.051Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylek0f00aw3vsb8rx3ha15","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p><a href=\"/java/spring/spring-family-meals/springboot-datasource-single.html\">上一篇</a>博客讨论了如何配置单数据源, 这一篇博客接着讨论如何配置多数据源。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h1><p>首先需要将数据源的连接字符串写到配置文件中:</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">springtestdb.datasource.url</span>=<span class=\"string\">jdbc:mysql://127.0.0.1:3306/springboottestdb?serverTimezone=UTC</span></span><br><span class=\"line\"><span class=\"meta\">springtestdb.datasource.username</span>=<span class=\"string\">root</span></span><br><span class=\"line\"><span class=\"meta\">springtestdb.datasource.password</span>=<span class=\"string\">password</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">printer.datasource.url</span>=<span class=\"string\">jdbc:mysql://127.0.0.1:3306/printer?serverTimezone=UTC</span></span><br><span class=\"line\"><span class=\"meta\">printer.datasource.username</span>=<span class=\"string\">root</span></span><br><span class=\"line\"><span class=\"meta\">printer.datasource.password</span>=<span class=\"string\">password</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"配置类\"><a href=\"#配置类\" class=\"headerlink\" title=\"配置类\"></a>配置类</h1><p>接着写配置类:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableTransactionManagement</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrinterDataSource</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@ConfigurationProperties(&quot;printer.datasource&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DataSourceProperties <span class=\"title\">printerDataSourceProperties</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DataSourceProperties();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean(name = &quot;printer&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DataSource <span class=\"title\">printerDataSource</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        DataSourceProperties dataSourceProperties = printerDataSourceProperties();</span><br><span class=\"line\">        log.info(dataSourceProperties.getUrl());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dataSourceProperties.initializeDataSourceBuilder().build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> PlatformTransactionManager <span class=\"title\">printerTransactionManager</span><span class=\"params\">(DataSource printer)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DataSourceTransactionManager(printer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里使用了DataSourceProperties将配置文件中的配置设置到了DataSource中, 这样配置了之后, 其他的数据源的配置也可以像这样配置。</p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p><a href=\"/java/spring/spring-family-meals/springboot-datasource-single.html\">上一篇</a>博客讨论了如何配置单数据源, 这一篇博客接着讨论如何配置多数据源。</p>","more":"<h1 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h1><p>首先需要将数据源的连接字符串写到配置文件中:</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">springtestdb.datasource.url</span>=<span class=\"string\">jdbc:mysql://127.0.0.1:3306/springboottestdb?serverTimezone=UTC</span></span><br><span class=\"line\"><span class=\"meta\">springtestdb.datasource.username</span>=<span class=\"string\">root</span></span><br><span class=\"line\"><span class=\"meta\">springtestdb.datasource.password</span>=<span class=\"string\">password</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">printer.datasource.url</span>=<span class=\"string\">jdbc:mysql://127.0.0.1:3306/printer?serverTimezone=UTC</span></span><br><span class=\"line\"><span class=\"meta\">printer.datasource.username</span>=<span class=\"string\">root</span></span><br><span class=\"line\"><span class=\"meta\">printer.datasource.password</span>=<span class=\"string\">password</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"配置类\"><a href=\"#配置类\" class=\"headerlink\" title=\"配置类\"></a>配置类</h1><p>接着写配置类:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableTransactionManagement</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrinterDataSource</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@ConfigurationProperties(&quot;printer.datasource&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DataSourceProperties <span class=\"title\">printerDataSourceProperties</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DataSourceProperties();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean(name = &quot;printer&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DataSource <span class=\"title\">printerDataSource</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        DataSourceProperties dataSourceProperties = printerDataSourceProperties();</span><br><span class=\"line\">        log.info(dataSourceProperties.getUrl());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dataSourceProperties.initializeDataSourceBuilder().build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> PlatformTransactionManager <span class=\"title\">printerTransactionManager</span><span class=\"params\">(DataSource printer)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DataSourceTransactionManager(printer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里使用了DataSourceProperties将配置文件中的配置设置到了DataSource中, 这样配置了之后, 其他的数据源的配置也可以像这样配置。</p>"},{"title":"SpringBoot配置单数据源","date":"2019-03-20T23:46:23.000Z","_content":"\n# 前言\n\n上一篇博客讨论了如何快速构建SpringBoot项目, 这一篇博客接着讨论如何在SpringBoot中配置单数据源。\n<!--more-->\n\n# 配置h2数据源\n\n由于h2是内存数据库, 相对来说比较容易配置, 所以先从h2开始。\n\n首先将依赖选择好, 要包括h2, jdbc。\n\n接着在main所在的类中, 配置数据源:\n\n```java\n@Autowired\nprivate java.sql.DataSource dataSource;\n```\n\n对, SpringBoot会自动装配好数据源, 接着我们将数据库的连接字符串打印出来, 所以完整的代码是这样的:\n\n```java\n/**\n * 这里实现CommandLineRunner是为了\n * 实现在SpringBoot项目启动的时候\n * 做一些工作, 我们这里需要打印连接字符串\n */\n@SpringBootApplication\n@Slf4j\npublic class Application implements CommandLineRunner {\n    @Autowired\n    private DataSource dataSource;\n\n    public static void main(String[] args) {\n        Application.run(Application.class, args);\n    }\n\n    /**\n     * 我们需要在启动的时候做的工作就写在这里 \n     */\n    @Override\n    public void run(String ...args) Throws Excetpion {\n        showConnection();\n    }\n\n    private void showConnection() throws SQLException {\n        log.info(dataSource.toString());\n        Connection conn = dataSource.getConnection();\n        log.info(conn.toString());\n        conn.close();\n    }\n}\n```\n\n# 配置dbcp2数据源\n\n也相对比较简单, 需要我们在`properties`文件中指定driverClassName, url等信息:\n\napplication.properties:\n```properties\n# 开放actuator的所有节点\nmanagement.endpoints.web.exposure.include=*\n\n# 这里修改spring的默认数据源\nspring.datasource.type=org.apache.commons.dbcp2.BasicDataSource\n\nspring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver\nspring.datasource.url=jdbc:mysql://127.0.0.1:3306/springboottestdb?serverTimezone=UTC\nspring.datasource.username=root\nspring.datasource.password=password\n\nspring.datasource.dbcp2.max-wait-millis=10000\nspring.datasource.dbcp2.min-idle=5\nspring.datasource.dbcp2.initial-size=5\n```\n\n这里修改了spring的默认数据源之后, 就可以将指定的数据源自动装配了。\n\n# 不使用自动配置的方式来配置数据源\n\n我们还可以自己去手写bean来配置我们的数据源:\n\n配置类:\n```java\n@Configuration\n@EnableTransactionManagement\npublic class ConDataSource {\n\n    @Autowired\n    private Environment mEnvironment;\n\n    @Bean(name = \"ownDataSource\")\n    public DataSource dataSource() throws Exception {\n        Properties properties = new Properties();\n        properties.setProperty(\"driverClassName\", mEnvironment.getProperty(\"spring.datasource.driver-class-name\"));\n        properties.setProperty(\"url\", mEnvironment.getProperty(\"spring.datasource.url\"));\n        properties.setProperty(\"username\", mEnvironment.getProperty(\"spring.datasource.username\"));\n        properties.setProperty(\"password\", mEnvironment.getProperty(\"spring.datasource.password\"));\n        return BasicDataSourceFactory.createDataSource(properties);\n    }\n\n    @Bean\n    public PlatformTransactionManager transactionManager() throws Exception {\n        return new DataSourceTransactionManager(dataSource());\n    }\n}\n```\n\n再修改一下`application`中的dataSource的变量名为`ownDataSource`, 就可以了。\n\n# springboot的自动配置注解\n\n我们在第一次和第二次配置数据源的时候并没有声明bean提供给spring, 那么spring是怎么找到这个数据源的呢?\n\n是通过如下注解来实现自动装配数据源的:\n\n    @DataSourceAutoConfiguration\n    配置DataSource\n    @DataSourceTransactionManagerAutoConfiguration\n    配置DataSourceTransactionManager\n    @JdbcTemplateAutoConfiguration\n    配置JdbcTemplate\n\n## 数据源相关配置属性\n\n通用:\n\n* spring.datasource.url=jdbc:mysql://127.0.0.1/test\n* spring.datasource.username=dbuser\n* spring.datasource.password=dbpassword\n* spring.datasource.driver-class-name=com.mysql.jdbc.Driver(可选)\n\n最后一个是可选的, springboot会根据url自动选择相对应的driver。\n","source":"_posts/back_skill_experience/java/spring/spring-family-meals/springboot-datasource-single.md","raw":"---\ntitle: SpringBoot配置单数据源\ndate: 2019-03-21 07:46:23\ncategories:\n- 后端技巧/经验\n- java\n- spring\ntags:\n- java\n- spring\n---\n\n# 前言\n\n上一篇博客讨论了如何快速构建SpringBoot项目, 这一篇博客接着讨论如何在SpringBoot中配置单数据源。\n<!--more-->\n\n# 配置h2数据源\n\n由于h2是内存数据库, 相对来说比较容易配置, 所以先从h2开始。\n\n首先将依赖选择好, 要包括h2, jdbc。\n\n接着在main所在的类中, 配置数据源:\n\n```java\n@Autowired\nprivate java.sql.DataSource dataSource;\n```\n\n对, SpringBoot会自动装配好数据源, 接着我们将数据库的连接字符串打印出来, 所以完整的代码是这样的:\n\n```java\n/**\n * 这里实现CommandLineRunner是为了\n * 实现在SpringBoot项目启动的时候\n * 做一些工作, 我们这里需要打印连接字符串\n */\n@SpringBootApplication\n@Slf4j\npublic class Application implements CommandLineRunner {\n    @Autowired\n    private DataSource dataSource;\n\n    public static void main(String[] args) {\n        Application.run(Application.class, args);\n    }\n\n    /**\n     * 我们需要在启动的时候做的工作就写在这里 \n     */\n    @Override\n    public void run(String ...args) Throws Excetpion {\n        showConnection();\n    }\n\n    private void showConnection() throws SQLException {\n        log.info(dataSource.toString());\n        Connection conn = dataSource.getConnection();\n        log.info(conn.toString());\n        conn.close();\n    }\n}\n```\n\n# 配置dbcp2数据源\n\n也相对比较简单, 需要我们在`properties`文件中指定driverClassName, url等信息:\n\napplication.properties:\n```properties\n# 开放actuator的所有节点\nmanagement.endpoints.web.exposure.include=*\n\n# 这里修改spring的默认数据源\nspring.datasource.type=org.apache.commons.dbcp2.BasicDataSource\n\nspring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver\nspring.datasource.url=jdbc:mysql://127.0.0.1:3306/springboottestdb?serverTimezone=UTC\nspring.datasource.username=root\nspring.datasource.password=password\n\nspring.datasource.dbcp2.max-wait-millis=10000\nspring.datasource.dbcp2.min-idle=5\nspring.datasource.dbcp2.initial-size=5\n```\n\n这里修改了spring的默认数据源之后, 就可以将指定的数据源自动装配了。\n\n# 不使用自动配置的方式来配置数据源\n\n我们还可以自己去手写bean来配置我们的数据源:\n\n配置类:\n```java\n@Configuration\n@EnableTransactionManagement\npublic class ConDataSource {\n\n    @Autowired\n    private Environment mEnvironment;\n\n    @Bean(name = \"ownDataSource\")\n    public DataSource dataSource() throws Exception {\n        Properties properties = new Properties();\n        properties.setProperty(\"driverClassName\", mEnvironment.getProperty(\"spring.datasource.driver-class-name\"));\n        properties.setProperty(\"url\", mEnvironment.getProperty(\"spring.datasource.url\"));\n        properties.setProperty(\"username\", mEnvironment.getProperty(\"spring.datasource.username\"));\n        properties.setProperty(\"password\", mEnvironment.getProperty(\"spring.datasource.password\"));\n        return BasicDataSourceFactory.createDataSource(properties);\n    }\n\n    @Bean\n    public PlatformTransactionManager transactionManager() throws Exception {\n        return new DataSourceTransactionManager(dataSource());\n    }\n}\n```\n\n再修改一下`application`中的dataSource的变量名为`ownDataSource`, 就可以了。\n\n# springboot的自动配置注解\n\n我们在第一次和第二次配置数据源的时候并没有声明bean提供给spring, 那么spring是怎么找到这个数据源的呢?\n\n是通过如下注解来实现自动装配数据源的:\n\n    @DataSourceAutoConfiguration\n    配置DataSource\n    @DataSourceTransactionManagerAutoConfiguration\n    配置DataSourceTransactionManager\n    @JdbcTemplateAutoConfiguration\n    配置JdbcTemplate\n\n## 数据源相关配置属性\n\n通用:\n\n* spring.datasource.url=jdbc:mysql://127.0.0.1/test\n* spring.datasource.username=dbuser\n* spring.datasource.password=dbpassword\n* spring.datasource.driver-class-name=com.mysql.jdbc.Driver(可选)\n\n最后一个是可选的, springboot会根据url自动选择相对应的driver。\n","slug":"back_skill_experience/java/spring/spring-family-meals/springboot-datasource-single","published":1,"updated":"2022-10-07T13:22:27.530Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylek0k00az3vsbc1a96pp9","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>上一篇博客讨论了如何快速构建SpringBoot项目, 这一篇博客接着讨论如何在SpringBoot中配置单数据源。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"配置h2数据源\"><a href=\"#配置h2数据源\" class=\"headerlink\" title=\"配置h2数据源\"></a>配置h2数据源</h1><p>由于h2是内存数据库, 相对来说比较容易配置, 所以先从h2开始。</p>\n<p>首先将依赖选择好, 要包括h2, jdbc。</p>\n<p>接着在main所在的类中, 配置数据源:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> java.sql.DataSource dataSource;</span><br></pre></td></tr></table></figure>\n\n<p>对, SpringBoot会自动装配好数据源, 接着我们将数据库的连接字符串打印出来, 所以完整的代码是这样的:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 这里实现CommandLineRunner是为了</span></span><br><span class=\"line\"><span class=\"comment\"> * 实现在SpringBoot项目启动的时候</span></span><br><span class=\"line\"><span class=\"comment\"> * 做一些工作, 我们这里需要打印连接字符串</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Application</span> <span class=\"keyword\">implements</span> <span class=\"title\">CommandLineRunner</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> DataSource dataSource;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Application.run(Application.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 我们需要在启动的时候做的工作就写在这里 </span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">(String ...args)</span> Throws Excetpion </span>&#123;</span><br><span class=\"line\">        showConnection();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">showConnection</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">        log.info(dataSource.toString());</span><br><span class=\"line\">        Connection conn = dataSource.getConnection();</span><br><span class=\"line\">        log.info(conn.toString());</span><br><span class=\"line\">        conn.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"配置dbcp2数据源\"><a href=\"#配置dbcp2数据源\" class=\"headerlink\" title=\"配置dbcp2数据源\"></a>配置dbcp2数据源</h1><p>也相对比较简单, 需要我们在<code>properties</code>文件中指定driverClassName, url等信息:</p>\n<p>application.properties:</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 开放actuator的所有节点</span></span><br><span class=\"line\"><span class=\"meta\">management.endpoints.web.exposure.include</span>=<span class=\"string\">*</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"># 这里修改spring的默认数据源</span></span><br><span class=\"line\"><span class=\"meta\">spring.datasource.type</span>=<span class=\"string\">org.apache.commons.dbcp2.BasicDataSource</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">spring.datasource.driver-class-name</span>=<span class=\"string\">com.mysql.cj.jdbc.Driver</span></span><br><span class=\"line\"><span class=\"meta\">spring.datasource.url</span>=<span class=\"string\">jdbc:mysql://127.0.0.1:3306/springboottestdb?serverTimezone=UTC</span></span><br><span class=\"line\"><span class=\"meta\">spring.datasource.username</span>=<span class=\"string\">root</span></span><br><span class=\"line\"><span class=\"meta\">spring.datasource.password</span>=<span class=\"string\">password</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">spring.datasource.dbcp2.max-wait-millis</span>=<span class=\"string\">10000</span></span><br><span class=\"line\"><span class=\"meta\">spring.datasource.dbcp2.min-idle</span>=<span class=\"string\">5</span></span><br><span class=\"line\"><span class=\"meta\">spring.datasource.dbcp2.initial-size</span>=<span class=\"string\">5</span></span><br></pre></td></tr></table></figure>\n\n<p>这里修改了spring的默认数据源之后, 就可以将指定的数据源自动装配了。</p>\n<h1 id=\"不使用自动配置的方式来配置数据源\"><a href=\"#不使用自动配置的方式来配置数据源\" class=\"headerlink\" title=\"不使用自动配置的方式来配置数据源\"></a>不使用自动配置的方式来配置数据源</h1><p>我们还可以自己去手写bean来配置我们的数据源:</p>\n<p>配置类:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableTransactionManagement</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConDataSource</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Environment mEnvironment;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean(name = &quot;ownDataSource&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DataSource <span class=\"title\">dataSource</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        Properties properties = <span class=\"keyword\">new</span> Properties();</span><br><span class=\"line\">        properties.setProperty(<span class=\"string\">&quot;driverClassName&quot;</span>, mEnvironment.getProperty(<span class=\"string\">&quot;spring.datasource.driver-class-name&quot;</span>));</span><br><span class=\"line\">        properties.setProperty(<span class=\"string\">&quot;url&quot;</span>, mEnvironment.getProperty(<span class=\"string\">&quot;spring.datasource.url&quot;</span>));</span><br><span class=\"line\">        properties.setProperty(<span class=\"string\">&quot;username&quot;</span>, mEnvironment.getProperty(<span class=\"string\">&quot;spring.datasource.username&quot;</span>));</span><br><span class=\"line\">        properties.setProperty(<span class=\"string\">&quot;password&quot;</span>, mEnvironment.getProperty(<span class=\"string\">&quot;spring.datasource.password&quot;</span>));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BasicDataSourceFactory.createDataSource(properties);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> PlatformTransactionManager <span class=\"title\">transactionManager</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DataSourceTransactionManager(dataSource());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>再修改一下<code>application</code>中的dataSource的变量名为<code>ownDataSource</code>, 就可以了。</p>\n<h1 id=\"springboot的自动配置注解\"><a href=\"#springboot的自动配置注解\" class=\"headerlink\" title=\"springboot的自动配置注解\"></a>springboot的自动配置注解</h1><p>我们在第一次和第二次配置数据源的时候并没有声明bean提供给spring, 那么spring是怎么找到这个数据源的呢?</p>\n<p>是通过如下注解来实现自动装配数据源的:</p>\n<pre><code>@DataSourceAutoConfiguration\n配置DataSource\n@DataSourceTransactionManagerAutoConfiguration\n配置DataSourceTransactionManager\n@JdbcTemplateAutoConfiguration\n配置JdbcTemplate\n</code></pre>\n<h2 id=\"数据源相关配置属性\"><a href=\"#数据源相关配置属性\" class=\"headerlink\" title=\"数据源相关配置属性\"></a>数据源相关配置属性</h2><p>通用:</p>\n<ul>\n<li>spring.datasource.url&#x3D;jdbc:mysql:&#x2F;&#x2F;127.0.0.1&#x2F;test</li>\n<li>spring.datasource.username&#x3D;dbuser</li>\n<li>spring.datasource.password&#x3D;dbpassword</li>\n<li>spring.datasource.driver-class-name&#x3D;com.mysql.jdbc.Driver(可选)</li>\n</ul>\n<p>最后一个是可选的, springboot会根据url自动选择相对应的driver。</p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>上一篇博客讨论了如何快速构建SpringBoot项目, 这一篇博客接着讨论如何在SpringBoot中配置单数据源。</p>","more":"<h1 id=\"配置h2数据源\"><a href=\"#配置h2数据源\" class=\"headerlink\" title=\"配置h2数据源\"></a>配置h2数据源</h1><p>由于h2是内存数据库, 相对来说比较容易配置, 所以先从h2开始。</p>\n<p>首先将依赖选择好, 要包括h2, jdbc。</p>\n<p>接着在main所在的类中, 配置数据源:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> java.sql.DataSource dataSource;</span><br></pre></td></tr></table></figure>\n\n<p>对, SpringBoot会自动装配好数据源, 接着我们将数据库的连接字符串打印出来, 所以完整的代码是这样的:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 这里实现CommandLineRunner是为了</span></span><br><span class=\"line\"><span class=\"comment\"> * 实现在SpringBoot项目启动的时候</span></span><br><span class=\"line\"><span class=\"comment\"> * 做一些工作, 我们这里需要打印连接字符串</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Application</span> <span class=\"keyword\">implements</span> <span class=\"title\">CommandLineRunner</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> DataSource dataSource;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Application.run(Application.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 我们需要在启动的时候做的工作就写在这里 </span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">(String ...args)</span> Throws Excetpion </span>&#123;</span><br><span class=\"line\">        showConnection();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">showConnection</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">        log.info(dataSource.toString());</span><br><span class=\"line\">        Connection conn = dataSource.getConnection();</span><br><span class=\"line\">        log.info(conn.toString());</span><br><span class=\"line\">        conn.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"配置dbcp2数据源\"><a href=\"#配置dbcp2数据源\" class=\"headerlink\" title=\"配置dbcp2数据源\"></a>配置dbcp2数据源</h1><p>也相对比较简单, 需要我们在<code>properties</code>文件中指定driverClassName, url等信息:</p>\n<p>application.properties:</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 开放actuator的所有节点</span></span><br><span class=\"line\"><span class=\"meta\">management.endpoints.web.exposure.include</span>=<span class=\"string\">*</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"># 这里修改spring的默认数据源</span></span><br><span class=\"line\"><span class=\"meta\">spring.datasource.type</span>=<span class=\"string\">org.apache.commons.dbcp2.BasicDataSource</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">spring.datasource.driver-class-name</span>=<span class=\"string\">com.mysql.cj.jdbc.Driver</span></span><br><span class=\"line\"><span class=\"meta\">spring.datasource.url</span>=<span class=\"string\">jdbc:mysql://127.0.0.1:3306/springboottestdb?serverTimezone=UTC</span></span><br><span class=\"line\"><span class=\"meta\">spring.datasource.username</span>=<span class=\"string\">root</span></span><br><span class=\"line\"><span class=\"meta\">spring.datasource.password</span>=<span class=\"string\">password</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">spring.datasource.dbcp2.max-wait-millis</span>=<span class=\"string\">10000</span></span><br><span class=\"line\"><span class=\"meta\">spring.datasource.dbcp2.min-idle</span>=<span class=\"string\">5</span></span><br><span class=\"line\"><span class=\"meta\">spring.datasource.dbcp2.initial-size</span>=<span class=\"string\">5</span></span><br></pre></td></tr></table></figure>\n\n<p>这里修改了spring的默认数据源之后, 就可以将指定的数据源自动装配了。</p>\n<h1 id=\"不使用自动配置的方式来配置数据源\"><a href=\"#不使用自动配置的方式来配置数据源\" class=\"headerlink\" title=\"不使用自动配置的方式来配置数据源\"></a>不使用自动配置的方式来配置数据源</h1><p>我们还可以自己去手写bean来配置我们的数据源:</p>\n<p>配置类:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableTransactionManagement</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConDataSource</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Environment mEnvironment;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean(name = &quot;ownDataSource&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DataSource <span class=\"title\">dataSource</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        Properties properties = <span class=\"keyword\">new</span> Properties();</span><br><span class=\"line\">        properties.setProperty(<span class=\"string\">&quot;driverClassName&quot;</span>, mEnvironment.getProperty(<span class=\"string\">&quot;spring.datasource.driver-class-name&quot;</span>));</span><br><span class=\"line\">        properties.setProperty(<span class=\"string\">&quot;url&quot;</span>, mEnvironment.getProperty(<span class=\"string\">&quot;spring.datasource.url&quot;</span>));</span><br><span class=\"line\">        properties.setProperty(<span class=\"string\">&quot;username&quot;</span>, mEnvironment.getProperty(<span class=\"string\">&quot;spring.datasource.username&quot;</span>));</span><br><span class=\"line\">        properties.setProperty(<span class=\"string\">&quot;password&quot;</span>, mEnvironment.getProperty(<span class=\"string\">&quot;spring.datasource.password&quot;</span>));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BasicDataSourceFactory.createDataSource(properties);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> PlatformTransactionManager <span class=\"title\">transactionManager</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DataSourceTransactionManager(dataSource());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>再修改一下<code>application</code>中的dataSource的变量名为<code>ownDataSource</code>, 就可以了。</p>\n<h1 id=\"springboot的自动配置注解\"><a href=\"#springboot的自动配置注解\" class=\"headerlink\" title=\"springboot的自动配置注解\"></a>springboot的自动配置注解</h1><p>我们在第一次和第二次配置数据源的时候并没有声明bean提供给spring, 那么spring是怎么找到这个数据源的呢?</p>\n<p>是通过如下注解来实现自动装配数据源的:</p>\n<pre><code>@DataSourceAutoConfiguration\n配置DataSource\n@DataSourceTransactionManagerAutoConfiguration\n配置DataSourceTransactionManager\n@JdbcTemplateAutoConfiguration\n配置JdbcTemplate\n</code></pre>\n<h2 id=\"数据源相关配置属性\"><a href=\"#数据源相关配置属性\" class=\"headerlink\" title=\"数据源相关配置属性\"></a>数据源相关配置属性</h2><p>通用:</p>\n<ul>\n<li>spring.datasource.url&#x3D;jdbc:mysql:&#x2F;&#x2F;127.0.0.1&#x2F;test</li>\n<li>spring.datasource.username&#x3D;dbuser</li>\n<li>spring.datasource.password&#x3D;dbpassword</li>\n<li>spring.datasource.driver-class-name&#x3D;com.mysql.jdbc.Driver(可选)</li>\n</ul>\n<p>最后一个是可选的, springboot会根据url自动选择相对应的driver。</p>"},{"title":"快速构建SpringBoot项目","date":"2019-03-20T13:41:44.000Z","_content":"\n# 前言\n\n接触Spring也有一段时间了, 今天来系统的记录一下Spring的学习过程。\n<!--more-->\n# 构建\n\nSpringBoot项目的构建非常简单, 只需要在[这里](start.spring.io)选择自己所需要的依赖, 并指定构建工具, 具体如下图:\n\n![SpringBoot构建](/images/spring/spring-family-meals/first-step/spring-family-meals-first-step-1.jpg)\n\n接着会将你构建的项目以压缩包的形式下载下来。我们的项目就构建完成了, 非常简单。\n\n# Spring之HelloWorld\n\n将我们的项目使用ide打开之后, 编写我们的第一个controller, 让它返回一个`HelloWorld`字符串。\n\n先看一下我们的项目的目录结构:\n\n![Spring项目目录结构](/images/spring/spring-family-meals/first-step/spring-family-meals-first-step-2.jpg)\n\n为了方便起见, 我们就在名为`HelloSpringApplication`的文件中进行编写:\n\n```java\n@SpringBootApplication\n@RestController\npublic class HelloSpringApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(HelloSpringApplication.class, args);\n    }\n\n    @RequestMapping(\"/hello\")\n    public String hello() {\n       return \"HelloWorld\";\n    }\n}\n```\n\nOK, 注意, `@RestController`注解和`hello`方法是我们自己编写的, 现在打开一个Terminal来测试我们的Controller:\n\n```shell\ncurl http://localhost:8080/hello\n```\n\n如果结果是`HelloWorld`字符串, 则说明我们成功啦!\n\n# 依赖\n\n接下来我们看一下pom文件:\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.1.3.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n    <groupId>com.littleboy</groupId>\n    <artifactId>hello-spring</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>hello-spring</name>\n    <description>Demo project for Spring Boot</description>\n\n    <properties>\n        <java.version>1.8</java.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-actuator</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n```\n\n通过这个pom我们可以看出这个项目直接将springframework.boot作为父项目来继承, 所以在声明依赖时不需要指定版本。\n\n接下来我们可以看到声明了一个插件, 这是一个maven打包插件, 可以通过这个插件将整个项目打包为一个jar包, 并且这个jar包是一个可执行的jar包, 那么我们来试一下:\n\n```shell\nmvn clean package -Dmaven.test.skip\n```\n\n执行完之后, 会在target文件夹下生成, 可以直接通过`java -jar`的命令来执行。\n\n## 不通过继承父项目的方式来使用SpringBoot的依赖\n\n如果我们的项目需要继承其他的项目, 不能继承SpringBoot, 那么可以通过:\n\n```xml\n<!-- 其他代码... -->\n\n<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-dependencies</artifactId>\n            <version>2.1.3RELEASE</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n\n<dependencies>\n<!-- 其他依赖... -->\n</dependencies>\n\n<build>\n    <plugins>\n        <plugin>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-maven-plugin</artifactId>\n            <version>2.1.3RELEASE</version>\n            <executions>\n                <execution>\n                    <goals>\n                        <goal>repackage</goal>\n                        </goals>\n                </execution>\n            </executions>\n        </plugin>\n    </plugins>\n</build>\n```\n\n的方式, 将整个SpringBoot的pom全部import进来, SpringBoot的插件声明为repackage的时候会执行打包动作, 以这样的方式可以实现和parent的方式一样的效果。\n\n这里要注意, 如果使用了这种方式将springboot引入进来, 就需要声明springboot的maven插件的版本号, 不然在打包的时候会报`jar中没有主清单属性`。\n","source":"_posts/back_skill_experience/java/spring/spring-family-meals/springboot-first-step.md","raw":"---\ntitle: 快速构建SpringBoot项目\ndate: 2019-03-20 21:41:44\ncategories:\n- 后端技巧/经验\n- java\n- spring\ntags:\n- java\n- spring\n---\n\n# 前言\n\n接触Spring也有一段时间了, 今天来系统的记录一下Spring的学习过程。\n<!--more-->\n# 构建\n\nSpringBoot项目的构建非常简单, 只需要在[这里](start.spring.io)选择自己所需要的依赖, 并指定构建工具, 具体如下图:\n\n![SpringBoot构建](/images/spring/spring-family-meals/first-step/spring-family-meals-first-step-1.jpg)\n\n接着会将你构建的项目以压缩包的形式下载下来。我们的项目就构建完成了, 非常简单。\n\n# Spring之HelloWorld\n\n将我们的项目使用ide打开之后, 编写我们的第一个controller, 让它返回一个`HelloWorld`字符串。\n\n先看一下我们的项目的目录结构:\n\n![Spring项目目录结构](/images/spring/spring-family-meals/first-step/spring-family-meals-first-step-2.jpg)\n\n为了方便起见, 我们就在名为`HelloSpringApplication`的文件中进行编写:\n\n```java\n@SpringBootApplication\n@RestController\npublic class HelloSpringApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(HelloSpringApplication.class, args);\n    }\n\n    @RequestMapping(\"/hello\")\n    public String hello() {\n       return \"HelloWorld\";\n    }\n}\n```\n\nOK, 注意, `@RestController`注解和`hello`方法是我们自己编写的, 现在打开一个Terminal来测试我们的Controller:\n\n```shell\ncurl http://localhost:8080/hello\n```\n\n如果结果是`HelloWorld`字符串, 则说明我们成功啦!\n\n# 依赖\n\n接下来我们看一下pom文件:\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.1.3.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n    <groupId>com.littleboy</groupId>\n    <artifactId>hello-spring</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>hello-spring</name>\n    <description>Demo project for Spring Boot</description>\n\n    <properties>\n        <java.version>1.8</java.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-actuator</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n```\n\n通过这个pom我们可以看出这个项目直接将springframework.boot作为父项目来继承, 所以在声明依赖时不需要指定版本。\n\n接下来我们可以看到声明了一个插件, 这是一个maven打包插件, 可以通过这个插件将整个项目打包为一个jar包, 并且这个jar包是一个可执行的jar包, 那么我们来试一下:\n\n```shell\nmvn clean package -Dmaven.test.skip\n```\n\n执行完之后, 会在target文件夹下生成, 可以直接通过`java -jar`的命令来执行。\n\n## 不通过继承父项目的方式来使用SpringBoot的依赖\n\n如果我们的项目需要继承其他的项目, 不能继承SpringBoot, 那么可以通过:\n\n```xml\n<!-- 其他代码... -->\n\n<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-dependencies</artifactId>\n            <version>2.1.3RELEASE</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n\n<dependencies>\n<!-- 其他依赖... -->\n</dependencies>\n\n<build>\n    <plugins>\n        <plugin>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-maven-plugin</artifactId>\n            <version>2.1.3RELEASE</version>\n            <executions>\n                <execution>\n                    <goals>\n                        <goal>repackage</goal>\n                        </goals>\n                </execution>\n            </executions>\n        </plugin>\n    </plugins>\n</build>\n```\n\n的方式, 将整个SpringBoot的pom全部import进来, SpringBoot的插件声明为repackage的时候会执行打包动作, 以这样的方式可以实现和parent的方式一样的效果。\n\n这里要注意, 如果使用了这种方式将springboot引入进来, 就需要声明springboot的maven插件的版本号, 不然在打包的时候会报`jar中没有主清单属性`。\n","slug":"back_skill_experience/java/spring/spring-family-meals/springboot-first-step","published":1,"updated":"2022-10-07T13:22:32.882Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylek0o00b23vsb4reg6wpg","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>接触Spring也有一段时间了, 今天来系统的记录一下Spring的学习过程。</p>\n<span id=\"more\"></span>\n<h1 id=\"构建\"><a href=\"#构建\" class=\"headerlink\" title=\"构建\"></a>构建</h1><p>SpringBoot项目的构建非常简单, 只需要在<a href=\"start.spring.io\">这里</a>选择自己所需要的依赖, 并指定构建工具, 具体如下图:</p>\n<p><img src=\"/images/spring/spring-family-meals/first-step/spring-family-meals-first-step-1.jpg\" alt=\"SpringBoot构建\"></p>\n<p>接着会将你构建的项目以压缩包的形式下载下来。我们的项目就构建完成了, 非常简单。</p>\n<h1 id=\"Spring之HelloWorld\"><a href=\"#Spring之HelloWorld\" class=\"headerlink\" title=\"Spring之HelloWorld\"></a>Spring之HelloWorld</h1><p>将我们的项目使用ide打开之后, 编写我们的第一个controller, 让它返回一个<code>HelloWorld</code>字符串。</p>\n<p>先看一下我们的项目的目录结构:</p>\n<p><img src=\"/images/spring/spring-family-meals/first-step/spring-family-meals-first-step-2.jpg\" alt=\"Spring项目目录结构\"></p>\n<p>为了方便起见, 我们就在名为<code>HelloSpringApplication</code>的文件中进行编写:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloSpringApplication</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(HelloSpringApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">hello</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"string\">&quot;HelloWorld&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>OK, 注意, <code>@RestController</code>注解和<code>hello</code>方法是我们自己编写的, 现在打开一个Terminal来测试我们的Controller:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl http://localhost:8080/hello</span><br></pre></td></tr></table></figure>\n\n<p>如果结果是<code>HelloWorld</code>字符串, 则说明我们成功啦!</p>\n<h1 id=\"依赖\"><a href=\"#依赖\" class=\"headerlink\" title=\"依赖\"></a>依赖</h1><p>接下来我们看一下pom文件:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.1.3.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">relativePath</span>/&gt;</span> <span class=\"comment\">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.littleboy<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hello-spring<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>hello-spring<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>Demo project for Spring Boot<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>通过这个pom我们可以看出这个项目直接将springframework.boot作为父项目来继承, 所以在声明依赖时不需要指定版本。</p>\n<p>接下来我们可以看到声明了一个插件, 这是一个maven打包插件, 可以通过这个插件将整个项目打包为一个jar包, 并且这个jar包是一个可执行的jar包, 那么我们来试一下:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn clean package -Dmaven.test.skip</span><br></pre></td></tr></table></figure>\n\n<p>执行完之后, 会在target文件夹下生成, 可以直接通过<code>java -jar</code>的命令来执行。</p>\n<h2 id=\"不通过继承父项目的方式来使用SpringBoot的依赖\"><a href=\"#不通过继承父项目的方式来使用SpringBoot的依赖\" class=\"headerlink\" title=\"不通过继承父项目的方式来使用SpringBoot的依赖\"></a>不通过继承父项目的方式来使用SpringBoot的依赖</h2><p>如果我们的项目需要继承其他的项目, 不能继承SpringBoot, 那么可以通过:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 其他代码... --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-dependencies<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.1.3RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">type</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>import<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 其他依赖... --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.1.3RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>repackage<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>的方式, 将整个SpringBoot的pom全部import进来, SpringBoot的插件声明为repackage的时候会执行打包动作, 以这样的方式可以实现和parent的方式一样的效果。</p>\n<p>这里要注意, 如果使用了这种方式将springboot引入进来, 就需要声明springboot的maven插件的版本号, 不然在打包的时候会报<code>jar中没有主清单属性</code>。</p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>接触Spring也有一段时间了, 今天来系统的记录一下Spring的学习过程。</p>","more":"<h1 id=\"构建\"><a href=\"#构建\" class=\"headerlink\" title=\"构建\"></a>构建</h1><p>SpringBoot项目的构建非常简单, 只需要在<a href=\"start.spring.io\">这里</a>选择自己所需要的依赖, 并指定构建工具, 具体如下图:</p>\n<p><img src=\"/images/spring/spring-family-meals/first-step/spring-family-meals-first-step-1.jpg\" alt=\"SpringBoot构建\"></p>\n<p>接着会将你构建的项目以压缩包的形式下载下来。我们的项目就构建完成了, 非常简单。</p>\n<h1 id=\"Spring之HelloWorld\"><a href=\"#Spring之HelloWorld\" class=\"headerlink\" title=\"Spring之HelloWorld\"></a>Spring之HelloWorld</h1><p>将我们的项目使用ide打开之后, 编写我们的第一个controller, 让它返回一个<code>HelloWorld</code>字符串。</p>\n<p>先看一下我们的项目的目录结构:</p>\n<p><img src=\"/images/spring/spring-family-meals/first-step/spring-family-meals-first-step-2.jpg\" alt=\"Spring项目目录结构\"></p>\n<p>为了方便起见, 我们就在名为<code>HelloSpringApplication</code>的文件中进行编写:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloSpringApplication</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(HelloSpringApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">hello</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"string\">&quot;HelloWorld&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>OK, 注意, <code>@RestController</code>注解和<code>hello</code>方法是我们自己编写的, 现在打开一个Terminal来测试我们的Controller:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl http://localhost:8080/hello</span><br></pre></td></tr></table></figure>\n\n<p>如果结果是<code>HelloWorld</code>字符串, 则说明我们成功啦!</p>\n<h1 id=\"依赖\"><a href=\"#依赖\" class=\"headerlink\" title=\"依赖\"></a>依赖</h1><p>接下来我们看一下pom文件:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.1.3.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">relativePath</span>/&gt;</span> <span class=\"comment\">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.littleboy<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hello-spring<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>hello-spring<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>Demo project for Spring Boot<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>通过这个pom我们可以看出这个项目直接将springframework.boot作为父项目来继承, 所以在声明依赖时不需要指定版本。</p>\n<p>接下来我们可以看到声明了一个插件, 这是一个maven打包插件, 可以通过这个插件将整个项目打包为一个jar包, 并且这个jar包是一个可执行的jar包, 那么我们来试一下:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn clean package -Dmaven.test.skip</span><br></pre></td></tr></table></figure>\n\n<p>执行完之后, 会在target文件夹下生成, 可以直接通过<code>java -jar</code>的命令来执行。</p>\n<h2 id=\"不通过继承父项目的方式来使用SpringBoot的依赖\"><a href=\"#不通过继承父项目的方式来使用SpringBoot的依赖\" class=\"headerlink\" title=\"不通过继承父项目的方式来使用SpringBoot的依赖\"></a>不通过继承父项目的方式来使用SpringBoot的依赖</h2><p>如果我们的项目需要继承其他的项目, 不能继承SpringBoot, 那么可以通过:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 其他代码... --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-dependencies<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.1.3RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">type</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>import<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 其他依赖... --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.1.3RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>repackage<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>的方式, 将整个SpringBoot的pom全部import进来, SpringBoot的插件声明为repackage的时候会执行打包动作, 以这样的方式可以实现和parent的方式一样的效果。</p>\n<p>这里要注意, 如果使用了这种方式将springboot引入进来, 就需要声明springboot的maven插件的版本号, 不然在打包的时候会报<code>jar中没有主清单属性</code>。</p>"},{"title":"springboot jdbcTemplate介绍","date":"2019-05-20T09:48:06.000Z","_content":"\n# 前言\n\n本片博客主要介绍了JdbcTemplate的一些常用的方法。\n\n<!--more-->\n\n# 增加, 修改和删除\n\n对数据库中的数据进行修改的操作统一使用一个update()方法, 下面我们来看一个增加数据的例子:\n\n```java\n@Autowired\nprivate JdbcTemplate mJdbcTemplate;\n\npublic void insertData() {\n    Arrays.asList(\"a\", \"b\").forEach(bar -> {\n        mJdbcTemplate.update(\"insert into Foo(bar) values(?)\", bar);\n    });\n}\n```\n\n## SimpleJdbcInsert\n\n还有一个对数据库进行简单插入的辅助类: `SimpleJdbcInsert`, 下面我们来看一个例子:\n\n首先声明一个SimpleJdbcInsert类的bean:\n\n```java\n// configuration类\n\n@Bean\npublic SimpleJdbcInsert mSimpleJdbcInsert(JdbcTemplate jdbcTemplate) {\n    return new SimpleJdbcInsert(jdbcTemplate)\n            .withTableName(\"Foo\").usingGeneratedKeyColumns(\"id\");\n}\n```\n\n这里直接定义了表名和主键的名字, 接下来执行数据库的操作:\n\n```java\n@Autowired\nprivate SimpleJdbcInsert mSimpleJdbcInsert;\n\npublic void insertData() {\n    HashMap<String, String> row = new HashMap<>();\n    row.put(\"bar\", \"b\");\n    Number id = mSimpleJdbcInsert.executeAndReturnKey(row);\n    log.info(\"ID of d: {}\", id.intValue());\n}\n```\n\n这里直接使用`executeAndReturnKey()`方法, 将刚刚插入的数据的主键返回。\n\n# 查询\n\n查询有三个方法:`queryForObject()`, `queryForList()`, `query()`\n\n## queryForObject\n\n```java\npublic void listData() {\n    // queryForObject\n    log.info(\"Count: {}\", mJdbcTemplate.queryForObject(\"select count(*) from Foo\", Long.class));\n}\n```\n> 这里由于查询的结果是数字, 所以可以直接传入Long.class, 下面的也是一样的道理。\n\n## queryForList\n\n```java\npublic void listData() {\n    // queryForList\n    List<String> list = mJdbcTemplate.queryForList(\"select bar from Foo\", String.class);\n}\n```\n\n## query\n\n```java\npublic void listData() {\n    // query\n    List<Foo> fooList = mJdbcTemplate.query(\"select * from Foo\", new RowMapper<Foo>() {\n        @Override\n        public Foo mapRow(ResultSet resultSet, int i) throws SQLException {\n            Foo foo = new Foo();\n            foo.setId(resultSet.getInt(1));\n            foo.setBar(resultSet.getString(2));\n            return foo;\n        }\n    });\n\n    fooList.forEach(f -> log.info(\"Foo: {}\", f));\n}\n```\n\n> 这里由于查出的是一个对象, 则可以使用RowMapper来对这个对象的属性进行对应。\n\n# 批量操作\n\n可以使用jdbcTemplate的batchUpdate()方法。\n\n```java\npublic void batchInsertData() {\n    mJdbcTemplate.batchUpdate(\"insert into Foo(bar) values (?)\", new BatchPreparedStatementSetter() {\n        // 这里用来设置sql中的?对应的值\n        @Override\n        public void setValues(PreparedStatement preparedStatement, int i) throws SQLException {\n            preparedStatement.setString(1, \"b-\" + i);\n        }\n\n        // 这里设置批量操作的次数\n        @Override\n        public int getBatchSize() {\n            return 2;\n        }\n    });\n}\n```\n","source":"_posts/back_skill_experience/java/spring/spring-family-meals/springboot-jdbcTemplate.md","raw":"---\ntitle: springboot jdbcTemplate介绍\ndate: 2019-05-20 17:48:06\ncategories:\n- 后端技巧/经验\n- java\n- spring\ntags:\n- java\n- spring\n---\n\n# 前言\n\n本片博客主要介绍了JdbcTemplate的一些常用的方法。\n\n<!--more-->\n\n# 增加, 修改和删除\n\n对数据库中的数据进行修改的操作统一使用一个update()方法, 下面我们来看一个增加数据的例子:\n\n```java\n@Autowired\nprivate JdbcTemplate mJdbcTemplate;\n\npublic void insertData() {\n    Arrays.asList(\"a\", \"b\").forEach(bar -> {\n        mJdbcTemplate.update(\"insert into Foo(bar) values(?)\", bar);\n    });\n}\n```\n\n## SimpleJdbcInsert\n\n还有一个对数据库进行简单插入的辅助类: `SimpleJdbcInsert`, 下面我们来看一个例子:\n\n首先声明一个SimpleJdbcInsert类的bean:\n\n```java\n// configuration类\n\n@Bean\npublic SimpleJdbcInsert mSimpleJdbcInsert(JdbcTemplate jdbcTemplate) {\n    return new SimpleJdbcInsert(jdbcTemplate)\n            .withTableName(\"Foo\").usingGeneratedKeyColumns(\"id\");\n}\n```\n\n这里直接定义了表名和主键的名字, 接下来执行数据库的操作:\n\n```java\n@Autowired\nprivate SimpleJdbcInsert mSimpleJdbcInsert;\n\npublic void insertData() {\n    HashMap<String, String> row = new HashMap<>();\n    row.put(\"bar\", \"b\");\n    Number id = mSimpleJdbcInsert.executeAndReturnKey(row);\n    log.info(\"ID of d: {}\", id.intValue());\n}\n```\n\n这里直接使用`executeAndReturnKey()`方法, 将刚刚插入的数据的主键返回。\n\n# 查询\n\n查询有三个方法:`queryForObject()`, `queryForList()`, `query()`\n\n## queryForObject\n\n```java\npublic void listData() {\n    // queryForObject\n    log.info(\"Count: {}\", mJdbcTemplate.queryForObject(\"select count(*) from Foo\", Long.class));\n}\n```\n> 这里由于查询的结果是数字, 所以可以直接传入Long.class, 下面的也是一样的道理。\n\n## queryForList\n\n```java\npublic void listData() {\n    // queryForList\n    List<String> list = mJdbcTemplate.queryForList(\"select bar from Foo\", String.class);\n}\n```\n\n## query\n\n```java\npublic void listData() {\n    // query\n    List<Foo> fooList = mJdbcTemplate.query(\"select * from Foo\", new RowMapper<Foo>() {\n        @Override\n        public Foo mapRow(ResultSet resultSet, int i) throws SQLException {\n            Foo foo = new Foo();\n            foo.setId(resultSet.getInt(1));\n            foo.setBar(resultSet.getString(2));\n            return foo;\n        }\n    });\n\n    fooList.forEach(f -> log.info(\"Foo: {}\", f));\n}\n```\n\n> 这里由于查出的是一个对象, 则可以使用RowMapper来对这个对象的属性进行对应。\n\n# 批量操作\n\n可以使用jdbcTemplate的batchUpdate()方法。\n\n```java\npublic void batchInsertData() {\n    mJdbcTemplate.batchUpdate(\"insert into Foo(bar) values (?)\", new BatchPreparedStatementSetter() {\n        // 这里用来设置sql中的?对应的值\n        @Override\n        public void setValues(PreparedStatement preparedStatement, int i) throws SQLException {\n            preparedStatement.setString(1, \"b-\" + i);\n        }\n\n        // 这里设置批量操作的次数\n        @Override\n        public int getBatchSize() {\n            return 2;\n        }\n    });\n}\n```\n","slug":"back_skill_experience/java/spring/spring-family-meals/springboot-jdbcTemplate","published":1,"updated":"2022-10-07T13:22:41.852Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylek0s00b53vsbe1st7v32","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>本片博客主要介绍了JdbcTemplate的一些常用的方法。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"增加-修改和删除\"><a href=\"#增加-修改和删除\" class=\"headerlink\" title=\"增加, 修改和删除\"></a>增加, 修改和删除</h1><p>对数据库中的数据进行修改的操作统一使用一个update()方法, 下面我们来看一个增加数据的例子:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> JdbcTemplate mJdbcTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">insertData</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Arrays.asList(<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>).forEach(bar -&gt; &#123;</span><br><span class=\"line\">        mJdbcTemplate.update(<span class=\"string\">&quot;insert into Foo(bar) values(?)&quot;</span>, bar);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SimpleJdbcInsert\"><a href=\"#SimpleJdbcInsert\" class=\"headerlink\" title=\"SimpleJdbcInsert\"></a>SimpleJdbcInsert</h2><p>还有一个对数据库进行简单插入的辅助类: <code>SimpleJdbcInsert</code>, 下面我们来看一个例子:</p>\n<p>首先声明一个SimpleJdbcInsert类的bean:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// configuration类</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> SimpleJdbcInsert <span class=\"title\">mSimpleJdbcInsert</span><span class=\"params\">(JdbcTemplate jdbcTemplate)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SimpleJdbcInsert(jdbcTemplate)</span><br><span class=\"line\">            .withTableName(<span class=\"string\">&quot;Foo&quot;</span>).usingGeneratedKeyColumns(<span class=\"string\">&quot;id&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里直接定义了表名和主键的名字, 接下来执行数据库的操作:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> SimpleJdbcInsert mSimpleJdbcInsert;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">insertData</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    HashMap&lt;String, String&gt; row = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    row.put(<span class=\"string\">&quot;bar&quot;</span>, <span class=\"string\">&quot;b&quot;</span>);</span><br><span class=\"line\">    Number id = mSimpleJdbcInsert.executeAndReturnKey(row);</span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;ID of d: &#123;&#125;&quot;</span>, id.intValue());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里直接使用<code>executeAndReturnKey()</code>方法, 将刚刚插入的数据的主键返回。</p>\n<h1 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a>查询</h1><p>查询有三个方法:<code>queryForObject()</code>, <code>queryForList()</code>, <code>query()</code></p>\n<h2 id=\"queryForObject\"><a href=\"#queryForObject\" class=\"headerlink\" title=\"queryForObject\"></a>queryForObject</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">listData</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// queryForObject</span></span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;Count: &#123;&#125;&quot;</span>, mJdbcTemplate.queryForObject(<span class=\"string\">&quot;select count(*) from Foo&quot;</span>, Long.class));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这里由于查询的结果是数字, 所以可以直接传入Long.class, 下面的也是一样的道理。</p>\n</blockquote>\n<h2 id=\"queryForList\"><a href=\"#queryForList\" class=\"headerlink\" title=\"queryForList\"></a>queryForList</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">listData</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// queryForList</span></span><br><span class=\"line\">    List&lt;String&gt; list = mJdbcTemplate.queryForList(<span class=\"string\">&quot;select bar from Foo&quot;</span>, String.class);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"query\"><a href=\"#query\" class=\"headerlink\" title=\"query\"></a>query</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">listData</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// query</span></span><br><span class=\"line\">    List&lt;Foo&gt; fooList = mJdbcTemplate.query(<span class=\"string\">&quot;select * from Foo&quot;</span>, <span class=\"keyword\">new</span> RowMapper&lt;Foo&gt;() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Foo <span class=\"title\">mapRow</span><span class=\"params\">(ResultSet resultSet, <span class=\"keyword\">int</span> i)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">            Foo foo = <span class=\"keyword\">new</span> Foo();</span><br><span class=\"line\">            foo.setId(resultSet.getInt(<span class=\"number\">1</span>));</span><br><span class=\"line\">            foo.setBar(resultSet.getString(<span class=\"number\">2</span>));</span><br><span class=\"line\">            <span class=\"keyword\">return</span> foo;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    fooList.forEach(f -&gt; log.info(<span class=\"string\">&quot;Foo: &#123;&#125;&quot;</span>, f));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这里由于查出的是一个对象, 则可以使用RowMapper来对这个对象的属性进行对应。</p>\n</blockquote>\n<h1 id=\"批量操作\"><a href=\"#批量操作\" class=\"headerlink\" title=\"批量操作\"></a>批量操作</h1><p>可以使用jdbcTemplate的batchUpdate()方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">batchInsertData</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    mJdbcTemplate.batchUpdate(<span class=\"string\">&quot;insert into Foo(bar) values (?)&quot;</span>, <span class=\"keyword\">new</span> BatchPreparedStatementSetter() &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这里用来设置sql中的?对应的值</span></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setValues</span><span class=\"params\">(PreparedStatement preparedStatement, <span class=\"keyword\">int</span> i)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">            preparedStatement.setString(<span class=\"number\">1</span>, <span class=\"string\">&quot;b-&quot;</span> + i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 这里设置批量操作的次数</span></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getBatchSize</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>本片博客主要介绍了JdbcTemplate的一些常用的方法。</p>","more":"<h1 id=\"增加-修改和删除\"><a href=\"#增加-修改和删除\" class=\"headerlink\" title=\"增加, 修改和删除\"></a>增加, 修改和删除</h1><p>对数据库中的数据进行修改的操作统一使用一个update()方法, 下面我们来看一个增加数据的例子:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> JdbcTemplate mJdbcTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">insertData</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Arrays.asList(<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>).forEach(bar -&gt; &#123;</span><br><span class=\"line\">        mJdbcTemplate.update(<span class=\"string\">&quot;insert into Foo(bar) values(?)&quot;</span>, bar);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SimpleJdbcInsert\"><a href=\"#SimpleJdbcInsert\" class=\"headerlink\" title=\"SimpleJdbcInsert\"></a>SimpleJdbcInsert</h2><p>还有一个对数据库进行简单插入的辅助类: <code>SimpleJdbcInsert</code>, 下面我们来看一个例子:</p>\n<p>首先声明一个SimpleJdbcInsert类的bean:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// configuration类</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> SimpleJdbcInsert <span class=\"title\">mSimpleJdbcInsert</span><span class=\"params\">(JdbcTemplate jdbcTemplate)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SimpleJdbcInsert(jdbcTemplate)</span><br><span class=\"line\">            .withTableName(<span class=\"string\">&quot;Foo&quot;</span>).usingGeneratedKeyColumns(<span class=\"string\">&quot;id&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里直接定义了表名和主键的名字, 接下来执行数据库的操作:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> SimpleJdbcInsert mSimpleJdbcInsert;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">insertData</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    HashMap&lt;String, String&gt; row = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    row.put(<span class=\"string\">&quot;bar&quot;</span>, <span class=\"string\">&quot;b&quot;</span>);</span><br><span class=\"line\">    Number id = mSimpleJdbcInsert.executeAndReturnKey(row);</span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;ID of d: &#123;&#125;&quot;</span>, id.intValue());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里直接使用<code>executeAndReturnKey()</code>方法, 将刚刚插入的数据的主键返回。</p>\n<h1 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a>查询</h1><p>查询有三个方法:<code>queryForObject()</code>, <code>queryForList()</code>, <code>query()</code></p>\n<h2 id=\"queryForObject\"><a href=\"#queryForObject\" class=\"headerlink\" title=\"queryForObject\"></a>queryForObject</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">listData</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// queryForObject</span></span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;Count: &#123;&#125;&quot;</span>, mJdbcTemplate.queryForObject(<span class=\"string\">&quot;select count(*) from Foo&quot;</span>, Long.class));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这里由于查询的结果是数字, 所以可以直接传入Long.class, 下面的也是一样的道理。</p>\n</blockquote>\n<h2 id=\"queryForList\"><a href=\"#queryForList\" class=\"headerlink\" title=\"queryForList\"></a>queryForList</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">listData</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// queryForList</span></span><br><span class=\"line\">    List&lt;String&gt; list = mJdbcTemplate.queryForList(<span class=\"string\">&quot;select bar from Foo&quot;</span>, String.class);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"query\"><a href=\"#query\" class=\"headerlink\" title=\"query\"></a>query</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">listData</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// query</span></span><br><span class=\"line\">    List&lt;Foo&gt; fooList = mJdbcTemplate.query(<span class=\"string\">&quot;select * from Foo&quot;</span>, <span class=\"keyword\">new</span> RowMapper&lt;Foo&gt;() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Foo <span class=\"title\">mapRow</span><span class=\"params\">(ResultSet resultSet, <span class=\"keyword\">int</span> i)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">            Foo foo = <span class=\"keyword\">new</span> Foo();</span><br><span class=\"line\">            foo.setId(resultSet.getInt(<span class=\"number\">1</span>));</span><br><span class=\"line\">            foo.setBar(resultSet.getString(<span class=\"number\">2</span>));</span><br><span class=\"line\">            <span class=\"keyword\">return</span> foo;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    fooList.forEach(f -&gt; log.info(<span class=\"string\">&quot;Foo: &#123;&#125;&quot;</span>, f));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这里由于查出的是一个对象, 则可以使用RowMapper来对这个对象的属性进行对应。</p>\n</blockquote>\n<h1 id=\"批量操作\"><a href=\"#批量操作\" class=\"headerlink\" title=\"批量操作\"></a>批量操作</h1><p>可以使用jdbcTemplate的batchUpdate()方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">batchInsertData</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    mJdbcTemplate.batchUpdate(<span class=\"string\">&quot;insert into Foo(bar) values (?)&quot;</span>, <span class=\"keyword\">new</span> BatchPreparedStatementSetter() &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这里用来设置sql中的?对应的值</span></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setValues</span><span class=\"params\">(PreparedStatement preparedStatement, <span class=\"keyword\">int</span> i)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">            preparedStatement.setString(<span class=\"number\">1</span>, <span class=\"string\">&quot;b-&quot;</span> + i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 这里设置批量操作的次数</span></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getBatchSize</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"springboot jpa","date":"2019-05-21T12:18:44.000Z","_content":"\n# 前言\n\n今天让我们来接触一下SpringBoot的JPA。\n\n<!--more-->\n\n# 介绍\n\nJPA, 全称 Java Persistence API, Hibernate是它的实现。\n\n# 使用\n\n如果使用的是SpringBoot的话, 可以直接使用:\n\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-data-jpa</artifactId>\n</dependency>\n```\n\n来添加依赖。\n\n# 实体类注解\n\n有很多注解可以帮助我们省去很多繁杂的代码, 比如getter setter, 构造器等, 下面我们将会介绍几个常用的注解。\n\n## `@Entity`, `@Table`\n\n这两个注解用来说明这是一个实体类, 可以直接根据这个实体类的属性构建数据库的表结构, 比如:\n\n```java\n@Entity\n@Table(name = \"Foo\")\npublic class Foo {\n}\n```\n\n`@Table`的name属性对应表名。\n\n## `@MappedSuperclass`, `@Id`, `@GeneratedValue`, `@Column`, `@ManyToMany`等\n\n这些都是`javax.persistence`里的包, 分别用来对应表结构中的各种关系和约束, 这里说一下`@MappedSuperclass`, 很多表都有相同的列, 这样就可以定义一个基类, 包含所有表都会有的一些字段。\n\n## `@CreationTimestamp`, `@UpdateTimestamp`\n\n这两个是hibernate的注解, 可以在创建时间和修改时间字段上加入这两个注解。\n\n## `@Builder`, `@ToString`, `@NoArgsConstructor`, `@AllArgsConstructor`, `@Data`\n\n这些都是lombok包中的一些注解, 都是用来减少我们实体类中的代码的, 可以见名知意。\n","source":"_posts/back_skill_experience/java/spring/spring-family-meals/springboot-jpa-intruduction.md","raw":"---\ntitle: springboot jpa\ndate: 2019-05-21 20:18:44\ncategories:\n- 后端技巧/经验\n- java\n- spring\ntags:\n- java\n- spring\n---\n\n# 前言\n\n今天让我们来接触一下SpringBoot的JPA。\n\n<!--more-->\n\n# 介绍\n\nJPA, 全称 Java Persistence API, Hibernate是它的实现。\n\n# 使用\n\n如果使用的是SpringBoot的话, 可以直接使用:\n\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-data-jpa</artifactId>\n</dependency>\n```\n\n来添加依赖。\n\n# 实体类注解\n\n有很多注解可以帮助我们省去很多繁杂的代码, 比如getter setter, 构造器等, 下面我们将会介绍几个常用的注解。\n\n## `@Entity`, `@Table`\n\n这两个注解用来说明这是一个实体类, 可以直接根据这个实体类的属性构建数据库的表结构, 比如:\n\n```java\n@Entity\n@Table(name = \"Foo\")\npublic class Foo {\n}\n```\n\n`@Table`的name属性对应表名。\n\n## `@MappedSuperclass`, `@Id`, `@GeneratedValue`, `@Column`, `@ManyToMany`等\n\n这些都是`javax.persistence`里的包, 分别用来对应表结构中的各种关系和约束, 这里说一下`@MappedSuperclass`, 很多表都有相同的列, 这样就可以定义一个基类, 包含所有表都会有的一些字段。\n\n## `@CreationTimestamp`, `@UpdateTimestamp`\n\n这两个是hibernate的注解, 可以在创建时间和修改时间字段上加入这两个注解。\n\n## `@Builder`, `@ToString`, `@NoArgsConstructor`, `@AllArgsConstructor`, `@Data`\n\n这些都是lombok包中的一些注解, 都是用来减少我们实体类中的代码的, 可以见名知意。\n","slug":"back_skill_experience/java/spring/spring-family-meals/springboot-jpa-intruduction","published":1,"updated":"2022-10-07T13:22:47.788Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylek0x00b93vsb02b42uos","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>今天让我们来接触一下SpringBoot的JPA。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>JPA, 全称 Java Persistence API, Hibernate是它的实现。</p>\n<h1 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h1><p>如果使用的是SpringBoot的话, 可以直接使用:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>来添加依赖。</p>\n<h1 id=\"实体类注解\"><a href=\"#实体类注解\" class=\"headerlink\" title=\"实体类注解\"></a>实体类注解</h1><p>有很多注解可以帮助我们省去很多繁杂的代码, 比如getter setter, 构造器等, 下面我们将会介绍几个常用的注解。</p>\n<h2 id=\"Entity-Table\"><a href=\"#Entity-Table\" class=\"headerlink\" title=\"@Entity, @Table\"></a><code>@Entity</code>, <code>@Table</code></h2><p>这两个注解用来说明这是一个实体类, 可以直接根据这个实体类的属性构建数据库的表结构, 比如:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"meta\">@Table(name = &quot;Foo&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>@Table</code>的name属性对应表名。</p>\n<h2 id=\"MappedSuperclass-Id-GeneratedValue-Column-ManyToMany等\"><a href=\"#MappedSuperclass-Id-GeneratedValue-Column-ManyToMany等\" class=\"headerlink\" title=\"@MappedSuperclass, @Id, @GeneratedValue, @Column, @ManyToMany等\"></a><code>@MappedSuperclass</code>, <code>@Id</code>, <code>@GeneratedValue</code>, <code>@Column</code>, <code>@ManyToMany</code>等</h2><p>这些都是<code>javax.persistence</code>里的包, 分别用来对应表结构中的各种关系和约束, 这里说一下<code>@MappedSuperclass</code>, 很多表都有相同的列, 这样就可以定义一个基类, 包含所有表都会有的一些字段。</p>\n<h2 id=\"CreationTimestamp-UpdateTimestamp\"><a href=\"#CreationTimestamp-UpdateTimestamp\" class=\"headerlink\" title=\"@CreationTimestamp, @UpdateTimestamp\"></a><code>@CreationTimestamp</code>, <code>@UpdateTimestamp</code></h2><p>这两个是hibernate的注解, 可以在创建时间和修改时间字段上加入这两个注解。</p>\n<h2 id=\"Builder-ToString-NoArgsConstructor-AllArgsConstructor-Data\"><a href=\"#Builder-ToString-NoArgsConstructor-AllArgsConstructor-Data\" class=\"headerlink\" title=\"@Builder, @ToString, @NoArgsConstructor, @AllArgsConstructor, @Data\"></a><code>@Builder</code>, <code>@ToString</code>, <code>@NoArgsConstructor</code>, <code>@AllArgsConstructor</code>, <code>@Data</code></h2><p>这些都是lombok包中的一些注解, 都是用来减少我们实体类中的代码的, 可以见名知意。</p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>今天让我们来接触一下SpringBoot的JPA。</p>","more":"<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>JPA, 全称 Java Persistence API, Hibernate是它的实现。</p>\n<h1 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h1><p>如果使用的是SpringBoot的话, 可以直接使用:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>来添加依赖。</p>\n<h1 id=\"实体类注解\"><a href=\"#实体类注解\" class=\"headerlink\" title=\"实体类注解\"></a>实体类注解</h1><p>有很多注解可以帮助我们省去很多繁杂的代码, 比如getter setter, 构造器等, 下面我们将会介绍几个常用的注解。</p>\n<h2 id=\"Entity-Table\"><a href=\"#Entity-Table\" class=\"headerlink\" title=\"@Entity, @Table\"></a><code>@Entity</code>, <code>@Table</code></h2><p>这两个注解用来说明这是一个实体类, 可以直接根据这个实体类的属性构建数据库的表结构, 比如:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"meta\">@Table(name = &quot;Foo&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>@Table</code>的name属性对应表名。</p>\n<h2 id=\"MappedSuperclass-Id-GeneratedValue-Column-ManyToMany等\"><a href=\"#MappedSuperclass-Id-GeneratedValue-Column-ManyToMany等\" class=\"headerlink\" title=\"@MappedSuperclass, @Id, @GeneratedValue, @Column, @ManyToMany等\"></a><code>@MappedSuperclass</code>, <code>@Id</code>, <code>@GeneratedValue</code>, <code>@Column</code>, <code>@ManyToMany</code>等</h2><p>这些都是<code>javax.persistence</code>里的包, 分别用来对应表结构中的各种关系和约束, 这里说一下<code>@MappedSuperclass</code>, 很多表都有相同的列, 这样就可以定义一个基类, 包含所有表都会有的一些字段。</p>\n<h2 id=\"CreationTimestamp-UpdateTimestamp\"><a href=\"#CreationTimestamp-UpdateTimestamp\" class=\"headerlink\" title=\"@CreationTimestamp, @UpdateTimestamp\"></a><code>@CreationTimestamp</code>, <code>@UpdateTimestamp</code></h2><p>这两个是hibernate的注解, 可以在创建时间和修改时间字段上加入这两个注解。</p>\n<h2 id=\"Builder-ToString-NoArgsConstructor-AllArgsConstructor-Data\"><a href=\"#Builder-ToString-NoArgsConstructor-AllArgsConstructor-Data\" class=\"headerlink\" title=\"@Builder, @ToString, @NoArgsConstructor, @AllArgsConstructor, @Data\"></a><code>@Builder</code>, <code>@ToString</code>, <code>@NoArgsConstructor</code>, <code>@AllArgsConstructor</code>, <code>@Data</code></h2><p>这些都是lombok包中的一些注解, 都是用来减少我们实体类中的代码的, 可以见名知意。</p>"},{"title":"springboot事务介绍","date":"2019-05-20T14:13:25.000Z","_content":"\n# 前言\n\n这一篇博客主要介绍了spring的事务。\n\n<!--more-->\n\n# 事务抽象的核心接口\n\n不同的数据源事务都实现了PlatformTransactionManager, 比如:\n\n| 数据库类型 | 数据库事务接口 |\n| :--------: | :------------: |\n| jdbc | DataSourceTransactionManager |\n| hibernate | HibernateTransactionManager |\n| jta | JtaTransactionManager |\n\n# 事务的相关设置\n\n通过TransactionDefinition接口来设置:\n\n* Propagation 传播性\n* Isolation 隔离性\n* Timeout 超时\n* Read-only status 只读状态\n\n# 事物的传播特性\n\n| 传播性 | 值 | 描述 |\n| :----: | :-:| :--: |\n| PROPAGATION_REQUIRED | 0 | 当前有事务就用当前的, 没有就用新的 |\n| PROPAGATION_SUPOORTS | 1 | 事务可有可无, 不是必须的 |\n| PROPAGATION_MANATORY | 2 | 当前一定要有事务, 不然就抛异常 |\n| PROPAGATION_REQUIRES_NEW | 3 | 无论是否有事务, 都起个新的事务 |\n| PROPAGATION_NOT_SUPPORTED | 4 | 不支持事务, 按非事务方式运行 |\n| PROPAGATION_NEVER | 5 | 不支持事务, 如果有事务则抛异常 |\n| PROPAGATION_NESTED | 6 | 当前有事务就在当前事务里再起一个新的事务 |\n\n# 事务类型\n\n* 编程式事务\n* 声明式事务\n\n## 编程式事务\n\n通过代码的方式执行事务:\n\n```java\n@Autowird\nprivate TransactionTemplate mTransactionTemplate;\nprivate void executeTransaction() {\n    mTransactionTemplate.execute(new TransactionCallbackWithoutResult() {\n        @Override\n        protected void doInTransactionWithoutResult(TransactionStatus transactionStatus) {\n            mJdbcTemplate.execute(\"insert into Foo(bar) values('bbb')\");\n            transactionStatus.setRollbackOnly();\n        }\n    });\n}\n```\n\n> 这里使用了TransactionTemplate的execute()方法, 接着我们在这个方法中执行了对数据库操作的代码, 并将事务的状态设置为只能回滚, 那么这个事务在执行之后依然不会对数据库进行操作。\n\n## 声明式事务\n\n通过注解或者xml的方式声明事务:\n\n```java\n@Autowired\nprivate JdbcTemplate mJdbcTemplate;\n\n@Transactional\npublic void insertData() {\n    mJdbcTemplate.execute(\"insert into Foo(bar) values('AAA')\");\n}\n\n@Transactional(rollbackFor = Exception.class)\npublic void insertThenRollBack() throws Exception {\n    insertData();\n    throw new Exception();\n}\n\n@Transactional\npublic void invokeInsertThenRollBack() throws Exception {\n    insertThenRollBack();\n}\n```\n\n> 这里有三个方法都启动了事务, 其中第二个方法指定了如果抛出指定异常则回滚, 第三个方法虽然调用了第二方法, 但是并没有指定抛出异常后回滚, 所以还是会对数据库进行操作。\n","source":"_posts/back_skill_experience/java/spring/spring-family-meals/springboot-service-translation.md","raw":"---\ntitle: springboot事务介绍\ndate: 2019-05-20 22:13:25\ncategories:\n- 后端技巧/经验\n- java\n- spring\ntags:\n- java\n- spring\n---\n\n# 前言\n\n这一篇博客主要介绍了spring的事务。\n\n<!--more-->\n\n# 事务抽象的核心接口\n\n不同的数据源事务都实现了PlatformTransactionManager, 比如:\n\n| 数据库类型 | 数据库事务接口 |\n| :--------: | :------------: |\n| jdbc | DataSourceTransactionManager |\n| hibernate | HibernateTransactionManager |\n| jta | JtaTransactionManager |\n\n# 事务的相关设置\n\n通过TransactionDefinition接口来设置:\n\n* Propagation 传播性\n* Isolation 隔离性\n* Timeout 超时\n* Read-only status 只读状态\n\n# 事物的传播特性\n\n| 传播性 | 值 | 描述 |\n| :----: | :-:| :--: |\n| PROPAGATION_REQUIRED | 0 | 当前有事务就用当前的, 没有就用新的 |\n| PROPAGATION_SUPOORTS | 1 | 事务可有可无, 不是必须的 |\n| PROPAGATION_MANATORY | 2 | 当前一定要有事务, 不然就抛异常 |\n| PROPAGATION_REQUIRES_NEW | 3 | 无论是否有事务, 都起个新的事务 |\n| PROPAGATION_NOT_SUPPORTED | 4 | 不支持事务, 按非事务方式运行 |\n| PROPAGATION_NEVER | 5 | 不支持事务, 如果有事务则抛异常 |\n| PROPAGATION_NESTED | 6 | 当前有事务就在当前事务里再起一个新的事务 |\n\n# 事务类型\n\n* 编程式事务\n* 声明式事务\n\n## 编程式事务\n\n通过代码的方式执行事务:\n\n```java\n@Autowird\nprivate TransactionTemplate mTransactionTemplate;\nprivate void executeTransaction() {\n    mTransactionTemplate.execute(new TransactionCallbackWithoutResult() {\n        @Override\n        protected void doInTransactionWithoutResult(TransactionStatus transactionStatus) {\n            mJdbcTemplate.execute(\"insert into Foo(bar) values('bbb')\");\n            transactionStatus.setRollbackOnly();\n        }\n    });\n}\n```\n\n> 这里使用了TransactionTemplate的execute()方法, 接着我们在这个方法中执行了对数据库操作的代码, 并将事务的状态设置为只能回滚, 那么这个事务在执行之后依然不会对数据库进行操作。\n\n## 声明式事务\n\n通过注解或者xml的方式声明事务:\n\n```java\n@Autowired\nprivate JdbcTemplate mJdbcTemplate;\n\n@Transactional\npublic void insertData() {\n    mJdbcTemplate.execute(\"insert into Foo(bar) values('AAA')\");\n}\n\n@Transactional(rollbackFor = Exception.class)\npublic void insertThenRollBack() throws Exception {\n    insertData();\n    throw new Exception();\n}\n\n@Transactional\npublic void invokeInsertThenRollBack() throws Exception {\n    insertThenRollBack();\n}\n```\n\n> 这里有三个方法都启动了事务, 其中第二个方法指定了如果抛出指定异常则回滚, 第三个方法虽然调用了第二方法, 但是并没有指定抛出异常后回滚, 所以还是会对数据库进行操作。\n","slug":"back_skill_experience/java/spring/spring-family-meals/springboot-service-translation","published":1,"updated":"2022-10-07T13:22:55.951Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylek1000bc3vsbfalmcvz7","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>这一篇博客主要介绍了spring的事务。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"事务抽象的核心接口\"><a href=\"#事务抽象的核心接口\" class=\"headerlink\" title=\"事务抽象的核心接口\"></a>事务抽象的核心接口</h1><p>不同的数据源事务都实现了PlatformTransactionManager, 比如:</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">数据库类型</th>\n<th align=\"center\">数据库事务接口</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">jdbc</td>\n<td align=\"center\">DataSourceTransactionManager</td>\n</tr>\n<tr>\n<td align=\"center\">hibernate</td>\n<td align=\"center\">HibernateTransactionManager</td>\n</tr>\n<tr>\n<td align=\"center\">jta</td>\n<td align=\"center\">JtaTransactionManager</td>\n</tr>\n</tbody></table>\n<h1 id=\"事务的相关设置\"><a href=\"#事务的相关设置\" class=\"headerlink\" title=\"事务的相关设置\"></a>事务的相关设置</h1><p>通过TransactionDefinition接口来设置:</p>\n<ul>\n<li>Propagation 传播性</li>\n<li>Isolation 隔离性</li>\n<li>Timeout 超时</li>\n<li>Read-only status 只读状态</li>\n</ul>\n<h1 id=\"事物的传播特性\"><a href=\"#事物的传播特性\" class=\"headerlink\" title=\"事物的传播特性\"></a>事物的传播特性</h1><table>\n<thead>\n<tr>\n<th align=\"center\">传播性</th>\n<th align=\"center\">值</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">PROPAGATION_REQUIRED</td>\n<td align=\"center\">0</td>\n<td align=\"center\">当前有事务就用当前的, 没有就用新的</td>\n</tr>\n<tr>\n<td align=\"center\">PROPAGATION_SUPOORTS</td>\n<td align=\"center\">1</td>\n<td align=\"center\">事务可有可无, 不是必须的</td>\n</tr>\n<tr>\n<td align=\"center\">PROPAGATION_MANATORY</td>\n<td align=\"center\">2</td>\n<td align=\"center\">当前一定要有事务, 不然就抛异常</td>\n</tr>\n<tr>\n<td align=\"center\">PROPAGATION_REQUIRES_NEW</td>\n<td align=\"center\">3</td>\n<td align=\"center\">无论是否有事务, 都起个新的事务</td>\n</tr>\n<tr>\n<td align=\"center\">PROPAGATION_NOT_SUPPORTED</td>\n<td align=\"center\">4</td>\n<td align=\"center\">不支持事务, 按非事务方式运行</td>\n</tr>\n<tr>\n<td align=\"center\">PROPAGATION_NEVER</td>\n<td align=\"center\">5</td>\n<td align=\"center\">不支持事务, 如果有事务则抛异常</td>\n</tr>\n<tr>\n<td align=\"center\">PROPAGATION_NESTED</td>\n<td align=\"center\">6</td>\n<td align=\"center\">当前有事务就在当前事务里再起一个新的事务</td>\n</tr>\n</tbody></table>\n<h1 id=\"事务类型\"><a href=\"#事务类型\" class=\"headerlink\" title=\"事务类型\"></a>事务类型</h1><ul>\n<li>编程式事务</li>\n<li>声明式事务</li>\n</ul>\n<h2 id=\"编程式事务\"><a href=\"#编程式事务\" class=\"headerlink\" title=\"编程式事务\"></a>编程式事务</h2><p>通过代码的方式执行事务:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowird</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> TransactionTemplate mTransactionTemplate;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">executeTransaction</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    mTransactionTemplate.execute(<span class=\"keyword\">new</span> TransactionCallbackWithoutResult() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doInTransactionWithoutResult</span><span class=\"params\">(TransactionStatus transactionStatus)</span> </span>&#123;</span><br><span class=\"line\">            mJdbcTemplate.execute(<span class=\"string\">&quot;insert into Foo(bar) values(&#x27;bbb&#x27;)&quot;</span>);</span><br><span class=\"line\">            transactionStatus.setRollbackOnly();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这里使用了TransactionTemplate的execute()方法, 接着我们在这个方法中执行了对数据库操作的代码, 并将事务的状态设置为只能回滚, 那么这个事务在执行之后依然不会对数据库进行操作。</p>\n</blockquote>\n<h2 id=\"声明式事务\"><a href=\"#声明式事务\" class=\"headerlink\" title=\"声明式事务\"></a>声明式事务</h2><p>通过注解或者xml的方式声明事务:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> JdbcTemplate mJdbcTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Transactional</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">insertData</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    mJdbcTemplate.execute(<span class=\"string\">&quot;insert into Foo(bar) values(&#x27;AAA&#x27;)&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Transactional(rollbackFor = Exception.class)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">insertThenRollBack</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    insertData();</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Transactional</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">invokeInsertThenRollBack</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    insertThenRollBack();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这里有三个方法都启动了事务, 其中第二个方法指定了如果抛出指定异常则回滚, 第三个方法虽然调用了第二方法, 但是并没有指定抛出异常后回滚, 所以还是会对数据库进行操作。</p>\n</blockquote>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>这一篇博客主要介绍了spring的事务。</p>","more":"<h1 id=\"事务抽象的核心接口\"><a href=\"#事务抽象的核心接口\" class=\"headerlink\" title=\"事务抽象的核心接口\"></a>事务抽象的核心接口</h1><p>不同的数据源事务都实现了PlatformTransactionManager, 比如:</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">数据库类型</th>\n<th align=\"center\">数据库事务接口</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">jdbc</td>\n<td align=\"center\">DataSourceTransactionManager</td>\n</tr>\n<tr>\n<td align=\"center\">hibernate</td>\n<td align=\"center\">HibernateTransactionManager</td>\n</tr>\n<tr>\n<td align=\"center\">jta</td>\n<td align=\"center\">JtaTransactionManager</td>\n</tr>\n</tbody></table>\n<h1 id=\"事务的相关设置\"><a href=\"#事务的相关设置\" class=\"headerlink\" title=\"事务的相关设置\"></a>事务的相关设置</h1><p>通过TransactionDefinition接口来设置:</p>\n<ul>\n<li>Propagation 传播性</li>\n<li>Isolation 隔离性</li>\n<li>Timeout 超时</li>\n<li>Read-only status 只读状态</li>\n</ul>\n<h1 id=\"事物的传播特性\"><a href=\"#事物的传播特性\" class=\"headerlink\" title=\"事物的传播特性\"></a>事物的传播特性</h1><table>\n<thead>\n<tr>\n<th align=\"center\">传播性</th>\n<th align=\"center\">值</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">PROPAGATION_REQUIRED</td>\n<td align=\"center\">0</td>\n<td align=\"center\">当前有事务就用当前的, 没有就用新的</td>\n</tr>\n<tr>\n<td align=\"center\">PROPAGATION_SUPOORTS</td>\n<td align=\"center\">1</td>\n<td align=\"center\">事务可有可无, 不是必须的</td>\n</tr>\n<tr>\n<td align=\"center\">PROPAGATION_MANATORY</td>\n<td align=\"center\">2</td>\n<td align=\"center\">当前一定要有事务, 不然就抛异常</td>\n</tr>\n<tr>\n<td align=\"center\">PROPAGATION_REQUIRES_NEW</td>\n<td align=\"center\">3</td>\n<td align=\"center\">无论是否有事务, 都起个新的事务</td>\n</tr>\n<tr>\n<td align=\"center\">PROPAGATION_NOT_SUPPORTED</td>\n<td align=\"center\">4</td>\n<td align=\"center\">不支持事务, 按非事务方式运行</td>\n</tr>\n<tr>\n<td align=\"center\">PROPAGATION_NEVER</td>\n<td align=\"center\">5</td>\n<td align=\"center\">不支持事务, 如果有事务则抛异常</td>\n</tr>\n<tr>\n<td align=\"center\">PROPAGATION_NESTED</td>\n<td align=\"center\">6</td>\n<td align=\"center\">当前有事务就在当前事务里再起一个新的事务</td>\n</tr>\n</tbody></table>\n<h1 id=\"事务类型\"><a href=\"#事务类型\" class=\"headerlink\" title=\"事务类型\"></a>事务类型</h1><ul>\n<li>编程式事务</li>\n<li>声明式事务</li>\n</ul>\n<h2 id=\"编程式事务\"><a href=\"#编程式事务\" class=\"headerlink\" title=\"编程式事务\"></a>编程式事务</h2><p>通过代码的方式执行事务:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowird</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> TransactionTemplate mTransactionTemplate;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">executeTransaction</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    mTransactionTemplate.execute(<span class=\"keyword\">new</span> TransactionCallbackWithoutResult() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doInTransactionWithoutResult</span><span class=\"params\">(TransactionStatus transactionStatus)</span> </span>&#123;</span><br><span class=\"line\">            mJdbcTemplate.execute(<span class=\"string\">&quot;insert into Foo(bar) values(&#x27;bbb&#x27;)&quot;</span>);</span><br><span class=\"line\">            transactionStatus.setRollbackOnly();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这里使用了TransactionTemplate的execute()方法, 接着我们在这个方法中执行了对数据库操作的代码, 并将事务的状态设置为只能回滚, 那么这个事务在执行之后依然不会对数据库进行操作。</p>\n</blockquote>\n<h2 id=\"声明式事务\"><a href=\"#声明式事务\" class=\"headerlink\" title=\"声明式事务\"></a>声明式事务</h2><p>通过注解或者xml的方式声明事务:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> JdbcTemplate mJdbcTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Transactional</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">insertData</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    mJdbcTemplate.execute(<span class=\"string\">&quot;insert into Foo(bar) values(&#x27;AAA&#x27;)&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Transactional(rollbackFor = Exception.class)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">insertThenRollBack</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    insertData();</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Transactional</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">invokeInsertThenRollBack</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    insertThenRollBack();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这里有三个方法都启动了事务, 其中第二个方法指定了如果抛出指定异常则回滚, 第三个方法虽然调用了第二方法, 但是并没有指定抛出异常后回滚, 所以还是会对数据库进行操作。</p>\n</blockquote>"},{"title":"在centos下安装llvm和vim的ycm插件","date":"2019-04-28T14:31:44.000Z","_content":"\n# 前言\n\n原本只是想在vim上装几个插件玩玩, 然后发现了YCM这款插件, 之后, 就有了今天的这篇博客。\n经历了连续一个星期的战斗, 终于还是被我安装上了llvm, 更新了gcc的版本和vim的版本, 特此记录一下战斗的过程。\n<!--more-->\n\n# 安装YCM\n\nYCM插件可以对代码进行事实上的语义分析, 实现了真正的智能提示和补全插件。\n\n## Vundle\n\n在安装YCM插件之前, 需要先安装一下vim的插件管理器: Vundle。\n\n安装步骤:\n\n### 下载插件\n\n```shell\ngit clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim\n```\n\n### 配置插件\n\n打开~/.vimrc, 在文件头加入以下内容:\n\n```shell\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\" Vundle\nset nocompatible              \" be iMproved, required\nfiletype off                  \" required\n\n\" set the runtime path to include Vundle and initialize\nset rtp+=~/.vim/bundle/Vundle.vim\ncall vundle#begin()\n\" alternatively, pass a path where Vundle should install plugins\n\"call vundle#begin('~/some/path/here')\n\n\" let Vundle manage Vundle, required\nPlugin 'VundleVim/Vundle.vim'\n\n\" The following are examples of different formats supported.\n\" Keep Plugin commands between vundle#begin/end.\n\" plugin on GitHub repo\n\"Plugin 'tpope/vim-fugitive'\n\" plugin from http://vim-scripts.org/vim/scripts.html\n\"Plugin 'L9'\n\" Git plugin not hosted on GitHub\n\"Plugin 'git://git.wincent.com/command-t.git'\n\" git repos on your local machine (i.e. when working on your own plugin)\n\"Plugin 'file:///home/gmarik/path/to/plugin'\n\" The sparkup vim script is in a subdirectory of this repo called vim.\n\" Pass the path to set the runtimepath properly.\n\"Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}\n\" Avoid a name conflict with L9\n\"Plugin 'user/L9', {'name': 'newL9'}\n\n\" All of your Plugins must be added before the following line\ncall vundle#end()            \" required\nfiletype plugin indent on    \" required\n\" To ignore plugin indent changes, instead use:\n\"filetype plugin on\n\"\n\" Brief help\n\" :PluginList       - lists configured plugins\n\" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate\n\" :PluginSearch foo - searches for foo; append `!` to refresh local cache\n\" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal\n\"\n\" see :h vundle for more details or wiki for FAQ\n\" Put your non-Plugin stuff after this line\n\n\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n```\n\n可以看出, Vundle支持多种形式的插件源, 包括github上的插件, http://vim-srcipts.org/vim/scripts.html 上的插件, 非github上的git插件, 本地硬盘上的插件等。\n\n### 安装插件\n\n打开vim, 运行`:PluginInstall`命令来自动安装插件。\n\n**注意, 这里如果不能翻墙的话, 建议还是使用git安装!!!**\n\n> 感谢写[这篇博客](https://www.cnblogs.com/YMaster/p/11209813.html)的老铁, 非常感谢!\n\ngit安装方式如下:\n\n```shell\ncd ~/.vim/bundle\ngit clone https://github.com/ycm-core/YouCompleteMe.git\ncd YouCompleteMe\ngit submodule update --init --recursive\n# 这里安装子模块会出现\n# fatal: unable to access 'https://go.googlesource.com/tools/': Failed to connect to go.googlesource.com port 443: 连接超时\n# 解决办法:\ncd ~/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/go/src/golang.org/x\ngit clone https://github.com/golang/tools.git\ncd ~/.vim/bundle/YouCompleteMe\ngit submodule update --init --recursive\n```\n\n![llvm](/images/linux/computer-operation/llvm.jpg)\n\n我在安装完之后, 再次打开vim, 提示我vim版本低, 最低版本为7.4.143, 好了, 这就是我遇到的第一个坑。\n\n怎么办, 更新vim呗。\n\n## 更新vim\n\n我直接将vim7升级到了vim8, 升级步骤:\n\n### 删除旧版本的vim\n\n```shell\nyum remove vim -y\n```\n\n### 安装ncurses\n\n这里是它的[简介](https://www.invisible-island.net/ncurses/announce.html)\n\n```shell\n* yum install ncurses-devel -y\n```\n\n> 如果没有vpn, 八成会下载失败, 可以手工安装:\n```shell\nwget http://mirror.centos.org/centos/7/os/x86_64/Packages/ncurses-devel-5.9-13.20130511.el7.x86_64.rpm\nyum install ncurses-devel-5.9-13.20130511.el7.x86_64.rpm\n```\n\n### 下载vim\n\n```shell\ngit clone https://github.com/vim/vim.git\ncd vim/src\nmake install\n```\n\n### 配置环境变量\n\n编辑文件: `/usr/local/bin/bim /etc/profile.d/path.sh`\n\n```sh\n#!/bin/bash\nexport PATH=$PATH:/usr/local/bin/vim\n```\nsource /etc/profile.d/path.sh\n\nok, vim更新成功, 接下来打开vim的时候发现还是有错误信息:\n\n```shell\nYouCompleteMe unavailable: requires Vim compiled with Python (2.7.1+ or 3.4+) support.\nPress ENTER or type command to continue\n```\n\n这是由于vim不支持python导致的, 可以通过:\n\n```shell\nvim --version | grep python\n```\n\n来查看是否支持。ok, 这是我遇到的第二个坑, 怎么办, 安装Python呗。\n\n## 安装Python3\n\n### 1. 准备安装环境\n\n```shell\nsudo yum install -y zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gcc make gdbm-devel\n```\n\n### 2. 编译安装Python 3\n\n[源码下载地址](https://www.python.org/downloads/source)\n\n### 2.1 获取源码\n\n```shell\n~$ wget https://www.python.org/ftp/python/3.6.2/Python-3.6.2.tgz\n~$ tar -zxvf Python-3.6.2.tgz\n```\n\n### 2.2 编译安装\n\n```shell\n~$ cd Python-3.6.2\n~$ ./configure prefix=/usr/local/python3\n~$ make\n~$ sudo make install\n~$ sudo ln -s /usr/local/python3/bin/python3 /usr/bin/python3\n~$ sudo ln -s /usr/local/python3/bin/pip3 /usr/bin/pip3\n```\n\n安装好Python了之后, 在vim源码的根目录下使用\n\n```shell\n./configure ./configure --enable-multibyte --enable-rubyinterp=yes --enable-pythoninterp=yes --enable-python3interp=yes\nmake\nsudo make install\n```\n\nok, 现在我们的vim已经支持python3了, 那么接着安装YCM。\n\nYCM的vim插件已经安装好了, 接下来安装clang和llvm。\n\n## 安装llvm\n\n### 下载源码\n\n安装svn, 用于下载llvm的源码\n\ncentos:\n\n```shell\nyum install svn -y\n```\n\ndebian:\n\n```shell\nsudo apt-get install subversion\n```\n\n下载llvm源码\n\n```shell\nmkdir llvm_source_build\ncd llvm_source_build\nsvn co http://llvm.org/svn/llvm-project/llvm/trunk llvm\n```\n\n下载clang源码\n\n```shell\ncd llvm/tools\nsvn co http://llvm.org/svn/llvm-project/cfe/trunk clang\n```\n\n下载clang工具源码(可选)\n\n```shell\ncd llvm/tools/clang/tools\nsvn co http://llvm.org/svn/llvm-project/clang-tools-extra/trunk extra\n```\n\n下载Complier-RT源码(可选)\n\n```shell\ncd llvm/projects\nsvn co http://llvm.org/svn/llvm-project/compiler-rt/trunk compiler-rt\n```\n\n### 配置和安装llvm和clang\n\n下载好之后, 就可以编译了。\n\n首先返回到llvm_source_build目录下, 新建一个build目录。\n\n```shell\ncd ../../\nmkdir build\n```\n\ncmake一下:\n\n```shell\ncd /build\ncmake -G \"Unix Makefiles\" -DCMAKE_BUILD_TYPE=Release -DLLVM_TARGETS_TO_BUILD=\"X86\" -DCMAKE_INSTALL_PREFIX=/opt/llvm ../llvm\n```\n\n上面的-CMAKE_INSTALL_PREDIX=/opt/llvm 表示要安装的目录。\n\n然后我惊讶的发现, cmake的版本太低, 这是我遇到的第三个坑, 怎么办, 升级cmake呗。\n\n### 升级cmake\n\n#### 下载cmake\n\n```shell\nwget https://cmake.org/files/v3.6/cmake-3.6.2.tar.gz\n```\n\n#### 解压\n\n```shell\ntar xvf cmake-3.6.2.tar.gz && cd cmake-3.6.2/\n```\n\n#### 编译安装\n\n注意: 这里如果是debian系统, 是没有gmake的, 那么接下来需要这些操作:\n\n这里参考了[这篇帖子](http://cmake.3232098.n2.nabble.com/v3-7-0-archive-cryptor-private-h-compile-error-td7594660.html#a7594664)。\n\n```shell\nmkdir build\ncd build\nsudo apt-get install librhash-dev\nsudo apt-get install libcurl4-openssl-dev\nsudo apt-get install libbz2-dev\nsudo apt-get install liblzma-dev\nsudo apt-get install libarchive-dev\nsudo apt-get install libjsoncpp-dev\n../bootstrap --system-libs\nmake\nmake install\n```\n\n> centos 版本的操作:\n```shell\nmkdir build\ncd build\n../bootstrap\ngmake\ngmake install\n```\n\n#### 查看编译之后的版本\n\n```shell\n/usr/local/bin/cmake --version\n```\n\n#### 移除旧版本\n\n```shell\nyum remove cmake -y\n```\n\n#### 新建软连接\n\n```shell\nln -s /usr/local/bin/cmake /usr/bin/\n```\n\n#### 查看版本\n\n```shell\ncmake --version\n```\n\n在编译安装这一步的时候, 我遇到了gcc的版本太低的问题, 这是我遇到的第四个坑。怎么办, 升级gcc呗。\n\n### 升级gcc\n\n#### 下载gcc\n\n```shell\nwget http://ftp.tsukuba.wide.ad.jp/software/gcc/releases/gcc-5.4.0/gcc-5.4.0.tar.gz\ntar xvf gcc-5.4.0.tar.gz\ncd gcc-5.4.0\n```\n\n#### 下载依赖包\n\n```shell\n./contrib/download_prerequisites\n```\n\n#### 配置编译参数\n\n```shell\ncd ..\nmkdir gcc-build-5.4.0\n# 这里如果没有下载gcc和g++的话, 需要先通过包管理器安装一下, 要不然编译不了\nsudo apt-get install gcc g++\n# redhat系:\nyum install gcc gcc-c++\ncd gcc-build-5.4.0\n../gcc-5.4.0/configure --enable-checking=release --enable-languages=c,c++ --disable-multilib\n```\n\n#### 编译安装\n\n```shell\nmake -j4  #允许4个编译命令同时执行，加速编译过程\nmake install\n```\n\n#### 配置环境变量\n\n编译~.bashrc\n\n```shell\nexport LD_LIBRARY_PATH=/usr/local/gcc-4.9.2/lib64:/usr/local/lib:$LD_LIBRARY_PATH\nexport PATH=/usr/local/gcc-4.9.2/bin:/usr/local/bin:$PATH\n```\n\n#### 查看gcc版本\n\n```shell\ngcc -v\ng++ -v\n```\n\n升级了cmake之后, 让我们来继续编译llvm。\n\n### 编译llvm\n\n```shell\ncd llvm_source_build/build\nexport CC=/usr/local/bin/gcc\nexport CXX=/usr/local/bin/g++\ncmake -G \"Unix Makefiles\" -DCMAKE_BUILD_TYPE=Release -DLLVM_TARGETS_TO_BUILD=\"X86\" -DCMAKE_INSTALL_PREFIX=/opt/llvm ../llvm\nmake\nsudo make install\n```\n\n### 配置环境变量\n\n```shell\n#配置一下环境变量\nvim /etc/profile\n#在末尾添加\nexport PATH=$PATH:/opt/llvm/bin\n```\n\n这里我整整编译了一晚上才编译好, 期间遇到了 `- version GLIBCXX_3.4.20' not found` 的问题, 就是gcc的版本太低, 或者是和配置的gcc的版本不一致。\n\n### 编译ycm_core\n\n现在准备工作算是完成了, 现在开始正式开始编译ycm_core\n\n生成makefile文件\n\n```shell\nmkdir ycm_build\ncd ycm_build\n# 这里PATH_TO_LLVM_ROOT的路径应该是你的llvm的build的路径\ncmake -G \"Unix Makefiles\" -DPATH_TO_LLVM_ROOT=~/ycm_temp/llvm_root_dir . ~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp\n```\n\n这里我遇到了无法找到Boost路径的问题, 直接安装一下就好了:\n\n```shell\nsudo apt-get install libboost-all-dev\n```\n\n编译makefile\n\n```shell\n# 将clang-c复制到ycm插件中\ncp -r  ~/programmingTools/llvm/llvm/tools/clang/include/clang-c ~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/ClangCompleter/\ncmake --build . --target ycm_core --config Release\n```\n\n### 编辑ycm的配置文件\n\n```shell\n cp ~/.vim/bundle/YouCompleteMe/third_party/ycmd/examples/.ycm_extra_conf.py ~/\n```\n\n# 配置 ycm 的补全库\n\n编写vimrc中指定的.ycm_extra_conf.py, 添加需要显示的库:\n\n```\nflags = [\n`-isystem`,\n`/usr/include/c++/8`\n]\n```\n`-isystem`代表自己添加的库。\n\n# 2021.03.27更新\n\n今天重新在archlinux上安装了ycm插件, 这次直接使用plug-vim插件管理工具来安装\n\nvimrc:\n```\ncall plug#begin ('~/.vim/plugged')\nPlug 'Valloric/YouCompleteMe'\ncall plug#end ()\n```\n\n在vim中执行 `:PlugInstall`, 安装插件。\n\n使用pacman安装所需要的工具:\n\n```\nsudo pacman -S gcc python3\n```\n\n在 `~/.vim/plugged` 中找到 `YouCompleteMe` 文件, 执行`./install.sh --all` 来对ycm插件编译, 在使用的时候遇到了无法`libtinfo.so.5 not found`, google了一天, 解决方案是安装 `ncurses5-compat-libs`(这个是arch的解决方案, 其他的linux发行版本应该是ncurses5)\n\n```\nmkdir ~/pkg && cd ~/pkg\ngit clone https://aur.archlinux.org/ncurses5-compat-libs.git\ncd ncurses5-compat-libs\nmakepkg -s -A\nsudo pacman -U ncurses5-compat-libs-6.2-1-armv7h.pkg.tar.xz\n```\n\nok, libtinfo.so.5 这个问题解决了, 还有一个问题是java不能自动补全。原因是因为`eclipse.jdt.ls`只支持jdk11, 甚至jdk12都不行, 所以需要安装:\n\n```\nsudo pacman -S jdk-openjdk11\n# 切换jdk\nsudo archlinux-java java-11-openjdk\n# 在目录/usr/lib/jvm/下放着所有通过pacman安装的jdk版本\n```\n\nok, 现在在`~/.vim/plugged/YouCompleteMe`目录下执行`./install.sh --all`, 应该就什么问题都没有了。\n\n# 以下是我参考的所有博客和帖子:\n\n[【vim】插件管理及代码智能提示与补全环境的配置](https://www.cnblogs.com/zzqcn/p/4660615.html)\n[CentOS 7 + vim + ycm (clang) + NERDTree](https://www.zybuluo.com/searcher2xiao/note/136156)\n[VIM、YouCompleteMe折腾配置以及clang+llvm编译安装](https://www.jianshu.com/p/c24f919097b3)\n[centos升级vim](https://www.cnblogs.com/lavezhang/p/7227777.html)\n[CentOS7解决YouCompleteMe对Python的依赖](https://blog.csdn.net/uu203/article/details/82621523)\n[安装LLVM+Clang教程](https://blog.csdn.net/l2563898960/article/details/82871826)\n[Centos7安装高版本Cmake](https://blog.csdn.net/jiang_xinxing/article/details/77945478)\n[Centos升级gcc至5.4.0](https://www.jianshu.com/p/8ac4e50d182d)\n[centOS系统gcc升级步骤(亲自测试成功)](https://blog.csdn.net/zhaojianting/article/details/81095120)\n[CentOS下gcc4.9编译安装教程](https://www.jianshu.com/p/f0b28fb4661d)\n[How to set path for sudo commands](https://superuser.com/questions/927512/how-to-set-path-for-sudo-commands)\n[CMake 指定gcc编译版本](https://blog.csdn.net/haohaibo031113/article/details/72833327)\n[关于在centos下安装python3.7.0以上版本时报错ModuleNotFoundError: No module named '_ctypes'的解决办法](https://blog.csdn.net/qq_36416904/article/details/79316972)\n[Vim智能补全插件YouCompleteMe安装](https://blog.csdn.net/leaf5022/article/details/21290509#comments)\n[llvm之旅第一站 － 编译及简单使用](http://www.nagain.com/activity/article/4/)\n[Getting Started with the LLVM System](https://blog.csdn.net/zhang14916/article/details/89288196)\n[gRPC编译- version `GLIBCXX_3.4.20' not found 问题](https://blog.csdn.net/weixin_34365417/article/details/86870934)\n[CentOS 6.4(64位)上安装错误libstdc++.so.6(GLIBCXX_3.4.14)解决办法](https://blog.csdn.net/lqzixi/article/details/24738337)\n[linux下提示/usr/lib64/libstdc++.so.6: version `GLIBCXX_3.4.14' not found 解决办法](https://www.cnblogs.com/wx7217242/articles/4684530.html)\n[Linux C/C++程序员CentOS 6.5安装YouCompleteMe使用vim语法自动补全](http://www.bubuko.com/infodetail-1978493.html) 这个比较全!\n[10款优秀Vim插件帮你打造完美IDE](https://www.cnblogs.com/linuxprobe/p/5926821.html)\n\n","source":"_posts/config_skill_experience/system_config/linux/vim/llvm.md","raw":"---\ntitle: 在centos下安装llvm和vim的ycm插件\ndate: 2019-04-28 22:31:44\ncategories:\n- 配置技巧/经验\n- 系统配置\n- linux\ntags:\n- linux\n- llvm\n- gcc\n- ycm\n---\n\n# 前言\n\n原本只是想在vim上装几个插件玩玩, 然后发现了YCM这款插件, 之后, 就有了今天的这篇博客。\n经历了连续一个星期的战斗, 终于还是被我安装上了llvm, 更新了gcc的版本和vim的版本, 特此记录一下战斗的过程。\n<!--more-->\n\n# 安装YCM\n\nYCM插件可以对代码进行事实上的语义分析, 实现了真正的智能提示和补全插件。\n\n## Vundle\n\n在安装YCM插件之前, 需要先安装一下vim的插件管理器: Vundle。\n\n安装步骤:\n\n### 下载插件\n\n```shell\ngit clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim\n```\n\n### 配置插件\n\n打开~/.vimrc, 在文件头加入以下内容:\n\n```shell\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\" Vundle\nset nocompatible              \" be iMproved, required\nfiletype off                  \" required\n\n\" set the runtime path to include Vundle and initialize\nset rtp+=~/.vim/bundle/Vundle.vim\ncall vundle#begin()\n\" alternatively, pass a path where Vundle should install plugins\n\"call vundle#begin('~/some/path/here')\n\n\" let Vundle manage Vundle, required\nPlugin 'VundleVim/Vundle.vim'\n\n\" The following are examples of different formats supported.\n\" Keep Plugin commands between vundle#begin/end.\n\" plugin on GitHub repo\n\"Plugin 'tpope/vim-fugitive'\n\" plugin from http://vim-scripts.org/vim/scripts.html\n\"Plugin 'L9'\n\" Git plugin not hosted on GitHub\n\"Plugin 'git://git.wincent.com/command-t.git'\n\" git repos on your local machine (i.e. when working on your own plugin)\n\"Plugin 'file:///home/gmarik/path/to/plugin'\n\" The sparkup vim script is in a subdirectory of this repo called vim.\n\" Pass the path to set the runtimepath properly.\n\"Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}\n\" Avoid a name conflict with L9\n\"Plugin 'user/L9', {'name': 'newL9'}\n\n\" All of your Plugins must be added before the following line\ncall vundle#end()            \" required\nfiletype plugin indent on    \" required\n\" To ignore plugin indent changes, instead use:\n\"filetype plugin on\n\"\n\" Brief help\n\" :PluginList       - lists configured plugins\n\" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate\n\" :PluginSearch foo - searches for foo; append `!` to refresh local cache\n\" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal\n\"\n\" see :h vundle for more details or wiki for FAQ\n\" Put your non-Plugin stuff after this line\n\n\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n```\n\n可以看出, Vundle支持多种形式的插件源, 包括github上的插件, http://vim-srcipts.org/vim/scripts.html 上的插件, 非github上的git插件, 本地硬盘上的插件等。\n\n### 安装插件\n\n打开vim, 运行`:PluginInstall`命令来自动安装插件。\n\n**注意, 这里如果不能翻墙的话, 建议还是使用git安装!!!**\n\n> 感谢写[这篇博客](https://www.cnblogs.com/YMaster/p/11209813.html)的老铁, 非常感谢!\n\ngit安装方式如下:\n\n```shell\ncd ~/.vim/bundle\ngit clone https://github.com/ycm-core/YouCompleteMe.git\ncd YouCompleteMe\ngit submodule update --init --recursive\n# 这里安装子模块会出现\n# fatal: unable to access 'https://go.googlesource.com/tools/': Failed to connect to go.googlesource.com port 443: 连接超时\n# 解决办法:\ncd ~/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/go/src/golang.org/x\ngit clone https://github.com/golang/tools.git\ncd ~/.vim/bundle/YouCompleteMe\ngit submodule update --init --recursive\n```\n\n![llvm](/images/linux/computer-operation/llvm.jpg)\n\n我在安装完之后, 再次打开vim, 提示我vim版本低, 最低版本为7.4.143, 好了, 这就是我遇到的第一个坑。\n\n怎么办, 更新vim呗。\n\n## 更新vim\n\n我直接将vim7升级到了vim8, 升级步骤:\n\n### 删除旧版本的vim\n\n```shell\nyum remove vim -y\n```\n\n### 安装ncurses\n\n这里是它的[简介](https://www.invisible-island.net/ncurses/announce.html)\n\n```shell\n* yum install ncurses-devel -y\n```\n\n> 如果没有vpn, 八成会下载失败, 可以手工安装:\n```shell\nwget http://mirror.centos.org/centos/7/os/x86_64/Packages/ncurses-devel-5.9-13.20130511.el7.x86_64.rpm\nyum install ncurses-devel-5.9-13.20130511.el7.x86_64.rpm\n```\n\n### 下载vim\n\n```shell\ngit clone https://github.com/vim/vim.git\ncd vim/src\nmake install\n```\n\n### 配置环境变量\n\n编辑文件: `/usr/local/bin/bim /etc/profile.d/path.sh`\n\n```sh\n#!/bin/bash\nexport PATH=$PATH:/usr/local/bin/vim\n```\nsource /etc/profile.d/path.sh\n\nok, vim更新成功, 接下来打开vim的时候发现还是有错误信息:\n\n```shell\nYouCompleteMe unavailable: requires Vim compiled with Python (2.7.1+ or 3.4+) support.\nPress ENTER or type command to continue\n```\n\n这是由于vim不支持python导致的, 可以通过:\n\n```shell\nvim --version | grep python\n```\n\n来查看是否支持。ok, 这是我遇到的第二个坑, 怎么办, 安装Python呗。\n\n## 安装Python3\n\n### 1. 准备安装环境\n\n```shell\nsudo yum install -y zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gcc make gdbm-devel\n```\n\n### 2. 编译安装Python 3\n\n[源码下载地址](https://www.python.org/downloads/source)\n\n### 2.1 获取源码\n\n```shell\n~$ wget https://www.python.org/ftp/python/3.6.2/Python-3.6.2.tgz\n~$ tar -zxvf Python-3.6.2.tgz\n```\n\n### 2.2 编译安装\n\n```shell\n~$ cd Python-3.6.2\n~$ ./configure prefix=/usr/local/python3\n~$ make\n~$ sudo make install\n~$ sudo ln -s /usr/local/python3/bin/python3 /usr/bin/python3\n~$ sudo ln -s /usr/local/python3/bin/pip3 /usr/bin/pip3\n```\n\n安装好Python了之后, 在vim源码的根目录下使用\n\n```shell\n./configure ./configure --enable-multibyte --enable-rubyinterp=yes --enable-pythoninterp=yes --enable-python3interp=yes\nmake\nsudo make install\n```\n\nok, 现在我们的vim已经支持python3了, 那么接着安装YCM。\n\nYCM的vim插件已经安装好了, 接下来安装clang和llvm。\n\n## 安装llvm\n\n### 下载源码\n\n安装svn, 用于下载llvm的源码\n\ncentos:\n\n```shell\nyum install svn -y\n```\n\ndebian:\n\n```shell\nsudo apt-get install subversion\n```\n\n下载llvm源码\n\n```shell\nmkdir llvm_source_build\ncd llvm_source_build\nsvn co http://llvm.org/svn/llvm-project/llvm/trunk llvm\n```\n\n下载clang源码\n\n```shell\ncd llvm/tools\nsvn co http://llvm.org/svn/llvm-project/cfe/trunk clang\n```\n\n下载clang工具源码(可选)\n\n```shell\ncd llvm/tools/clang/tools\nsvn co http://llvm.org/svn/llvm-project/clang-tools-extra/trunk extra\n```\n\n下载Complier-RT源码(可选)\n\n```shell\ncd llvm/projects\nsvn co http://llvm.org/svn/llvm-project/compiler-rt/trunk compiler-rt\n```\n\n### 配置和安装llvm和clang\n\n下载好之后, 就可以编译了。\n\n首先返回到llvm_source_build目录下, 新建一个build目录。\n\n```shell\ncd ../../\nmkdir build\n```\n\ncmake一下:\n\n```shell\ncd /build\ncmake -G \"Unix Makefiles\" -DCMAKE_BUILD_TYPE=Release -DLLVM_TARGETS_TO_BUILD=\"X86\" -DCMAKE_INSTALL_PREFIX=/opt/llvm ../llvm\n```\n\n上面的-CMAKE_INSTALL_PREDIX=/opt/llvm 表示要安装的目录。\n\n然后我惊讶的发现, cmake的版本太低, 这是我遇到的第三个坑, 怎么办, 升级cmake呗。\n\n### 升级cmake\n\n#### 下载cmake\n\n```shell\nwget https://cmake.org/files/v3.6/cmake-3.6.2.tar.gz\n```\n\n#### 解压\n\n```shell\ntar xvf cmake-3.6.2.tar.gz && cd cmake-3.6.2/\n```\n\n#### 编译安装\n\n注意: 这里如果是debian系统, 是没有gmake的, 那么接下来需要这些操作:\n\n这里参考了[这篇帖子](http://cmake.3232098.n2.nabble.com/v3-7-0-archive-cryptor-private-h-compile-error-td7594660.html#a7594664)。\n\n```shell\nmkdir build\ncd build\nsudo apt-get install librhash-dev\nsudo apt-get install libcurl4-openssl-dev\nsudo apt-get install libbz2-dev\nsudo apt-get install liblzma-dev\nsudo apt-get install libarchive-dev\nsudo apt-get install libjsoncpp-dev\n../bootstrap --system-libs\nmake\nmake install\n```\n\n> centos 版本的操作:\n```shell\nmkdir build\ncd build\n../bootstrap\ngmake\ngmake install\n```\n\n#### 查看编译之后的版本\n\n```shell\n/usr/local/bin/cmake --version\n```\n\n#### 移除旧版本\n\n```shell\nyum remove cmake -y\n```\n\n#### 新建软连接\n\n```shell\nln -s /usr/local/bin/cmake /usr/bin/\n```\n\n#### 查看版本\n\n```shell\ncmake --version\n```\n\n在编译安装这一步的时候, 我遇到了gcc的版本太低的问题, 这是我遇到的第四个坑。怎么办, 升级gcc呗。\n\n### 升级gcc\n\n#### 下载gcc\n\n```shell\nwget http://ftp.tsukuba.wide.ad.jp/software/gcc/releases/gcc-5.4.0/gcc-5.4.0.tar.gz\ntar xvf gcc-5.4.0.tar.gz\ncd gcc-5.4.0\n```\n\n#### 下载依赖包\n\n```shell\n./contrib/download_prerequisites\n```\n\n#### 配置编译参数\n\n```shell\ncd ..\nmkdir gcc-build-5.4.0\n# 这里如果没有下载gcc和g++的话, 需要先通过包管理器安装一下, 要不然编译不了\nsudo apt-get install gcc g++\n# redhat系:\nyum install gcc gcc-c++\ncd gcc-build-5.4.0\n../gcc-5.4.0/configure --enable-checking=release --enable-languages=c,c++ --disable-multilib\n```\n\n#### 编译安装\n\n```shell\nmake -j4  #允许4个编译命令同时执行，加速编译过程\nmake install\n```\n\n#### 配置环境变量\n\n编译~.bashrc\n\n```shell\nexport LD_LIBRARY_PATH=/usr/local/gcc-4.9.2/lib64:/usr/local/lib:$LD_LIBRARY_PATH\nexport PATH=/usr/local/gcc-4.9.2/bin:/usr/local/bin:$PATH\n```\n\n#### 查看gcc版本\n\n```shell\ngcc -v\ng++ -v\n```\n\n升级了cmake之后, 让我们来继续编译llvm。\n\n### 编译llvm\n\n```shell\ncd llvm_source_build/build\nexport CC=/usr/local/bin/gcc\nexport CXX=/usr/local/bin/g++\ncmake -G \"Unix Makefiles\" -DCMAKE_BUILD_TYPE=Release -DLLVM_TARGETS_TO_BUILD=\"X86\" -DCMAKE_INSTALL_PREFIX=/opt/llvm ../llvm\nmake\nsudo make install\n```\n\n### 配置环境变量\n\n```shell\n#配置一下环境变量\nvim /etc/profile\n#在末尾添加\nexport PATH=$PATH:/opt/llvm/bin\n```\n\n这里我整整编译了一晚上才编译好, 期间遇到了 `- version GLIBCXX_3.4.20' not found` 的问题, 就是gcc的版本太低, 或者是和配置的gcc的版本不一致。\n\n### 编译ycm_core\n\n现在准备工作算是完成了, 现在开始正式开始编译ycm_core\n\n生成makefile文件\n\n```shell\nmkdir ycm_build\ncd ycm_build\n# 这里PATH_TO_LLVM_ROOT的路径应该是你的llvm的build的路径\ncmake -G \"Unix Makefiles\" -DPATH_TO_LLVM_ROOT=~/ycm_temp/llvm_root_dir . ~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp\n```\n\n这里我遇到了无法找到Boost路径的问题, 直接安装一下就好了:\n\n```shell\nsudo apt-get install libboost-all-dev\n```\n\n编译makefile\n\n```shell\n# 将clang-c复制到ycm插件中\ncp -r  ~/programmingTools/llvm/llvm/tools/clang/include/clang-c ~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/ClangCompleter/\ncmake --build . --target ycm_core --config Release\n```\n\n### 编辑ycm的配置文件\n\n```shell\n cp ~/.vim/bundle/YouCompleteMe/third_party/ycmd/examples/.ycm_extra_conf.py ~/\n```\n\n# 配置 ycm 的补全库\n\n编写vimrc中指定的.ycm_extra_conf.py, 添加需要显示的库:\n\n```\nflags = [\n`-isystem`,\n`/usr/include/c++/8`\n]\n```\n`-isystem`代表自己添加的库。\n\n# 2021.03.27更新\n\n今天重新在archlinux上安装了ycm插件, 这次直接使用plug-vim插件管理工具来安装\n\nvimrc:\n```\ncall plug#begin ('~/.vim/plugged')\nPlug 'Valloric/YouCompleteMe'\ncall plug#end ()\n```\n\n在vim中执行 `:PlugInstall`, 安装插件。\n\n使用pacman安装所需要的工具:\n\n```\nsudo pacman -S gcc python3\n```\n\n在 `~/.vim/plugged` 中找到 `YouCompleteMe` 文件, 执行`./install.sh --all` 来对ycm插件编译, 在使用的时候遇到了无法`libtinfo.so.5 not found`, google了一天, 解决方案是安装 `ncurses5-compat-libs`(这个是arch的解决方案, 其他的linux发行版本应该是ncurses5)\n\n```\nmkdir ~/pkg && cd ~/pkg\ngit clone https://aur.archlinux.org/ncurses5-compat-libs.git\ncd ncurses5-compat-libs\nmakepkg -s -A\nsudo pacman -U ncurses5-compat-libs-6.2-1-armv7h.pkg.tar.xz\n```\n\nok, libtinfo.so.5 这个问题解决了, 还有一个问题是java不能自动补全。原因是因为`eclipse.jdt.ls`只支持jdk11, 甚至jdk12都不行, 所以需要安装:\n\n```\nsudo pacman -S jdk-openjdk11\n# 切换jdk\nsudo archlinux-java java-11-openjdk\n# 在目录/usr/lib/jvm/下放着所有通过pacman安装的jdk版本\n```\n\nok, 现在在`~/.vim/plugged/YouCompleteMe`目录下执行`./install.sh --all`, 应该就什么问题都没有了。\n\n# 以下是我参考的所有博客和帖子:\n\n[【vim】插件管理及代码智能提示与补全环境的配置](https://www.cnblogs.com/zzqcn/p/4660615.html)\n[CentOS 7 + vim + ycm (clang) + NERDTree](https://www.zybuluo.com/searcher2xiao/note/136156)\n[VIM、YouCompleteMe折腾配置以及clang+llvm编译安装](https://www.jianshu.com/p/c24f919097b3)\n[centos升级vim](https://www.cnblogs.com/lavezhang/p/7227777.html)\n[CentOS7解决YouCompleteMe对Python的依赖](https://blog.csdn.net/uu203/article/details/82621523)\n[安装LLVM+Clang教程](https://blog.csdn.net/l2563898960/article/details/82871826)\n[Centos7安装高版本Cmake](https://blog.csdn.net/jiang_xinxing/article/details/77945478)\n[Centos升级gcc至5.4.0](https://www.jianshu.com/p/8ac4e50d182d)\n[centOS系统gcc升级步骤(亲自测试成功)](https://blog.csdn.net/zhaojianting/article/details/81095120)\n[CentOS下gcc4.9编译安装教程](https://www.jianshu.com/p/f0b28fb4661d)\n[How to set path for sudo commands](https://superuser.com/questions/927512/how-to-set-path-for-sudo-commands)\n[CMake 指定gcc编译版本](https://blog.csdn.net/haohaibo031113/article/details/72833327)\n[关于在centos下安装python3.7.0以上版本时报错ModuleNotFoundError: No module named '_ctypes'的解决办法](https://blog.csdn.net/qq_36416904/article/details/79316972)\n[Vim智能补全插件YouCompleteMe安装](https://blog.csdn.net/leaf5022/article/details/21290509#comments)\n[llvm之旅第一站 － 编译及简单使用](http://www.nagain.com/activity/article/4/)\n[Getting Started with the LLVM System](https://blog.csdn.net/zhang14916/article/details/89288196)\n[gRPC编译- version `GLIBCXX_3.4.20' not found 问题](https://blog.csdn.net/weixin_34365417/article/details/86870934)\n[CentOS 6.4(64位)上安装错误libstdc++.so.6(GLIBCXX_3.4.14)解决办法](https://blog.csdn.net/lqzixi/article/details/24738337)\n[linux下提示/usr/lib64/libstdc++.so.6: version `GLIBCXX_3.4.14' not found 解决办法](https://www.cnblogs.com/wx7217242/articles/4684530.html)\n[Linux C/C++程序员CentOS 6.5安装YouCompleteMe使用vim语法自动补全](http://www.bubuko.com/infodetail-1978493.html) 这个比较全!\n[10款优秀Vim插件帮你打造完美IDE](https://www.cnblogs.com/linuxprobe/p/5926821.html)\n\n","slug":"config_skill_experience/system_config/linux/vim/llvm","published":1,"updated":"2022-10-07T12:45:27.693Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylek1500bf3vsbal7jdmnq","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>原本只是想在vim上装几个插件玩玩, 然后发现了YCM这款插件, 之后, 就有了今天的这篇博客。<br>经历了连续一个星期的战斗, 终于还是被我安装上了llvm, 更新了gcc的版本和vim的版本, 特此记录一下战斗的过程。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"安装YCM\"><a href=\"#安装YCM\" class=\"headerlink\" title=\"安装YCM\"></a>安装YCM</h1><p>YCM插件可以对代码进行事实上的语义分析, 实现了真正的智能提示和补全插件。</p>\n<h2 id=\"Vundle\"><a href=\"#Vundle\" class=\"headerlink\" title=\"Vundle\"></a>Vundle</h2><p>在安装YCM插件之前, 需要先安装一下vim的插件管理器: Vundle。</p>\n<p>安装步骤:</p>\n<h3 id=\"下载插件\"><a href=\"#下载插件\" class=\"headerlink\" title=\"下载插件\"></a>下载插件</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置插件\"><a href=\"#配置插件\" class=\"headerlink\" title=\"配置插件\"></a>配置插件</h3><p>打开~&#x2F;.vimrc, 在文件头加入以下内容:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;</span><br><span class=\"line\">&quot; Vundle</span><br><span class=\"line\">set nocompatible              &quot; be iMproved, required</span><br><span class=\"line\">filetype off                  &quot; required</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; set the runtime path to include Vundle and initialize</span><br><span class=\"line\">set rtp+=~/.vim/bundle/Vundle.vim</span><br><span class=\"line\">call vundle#begin()</span><br><span class=\"line\">&quot; alternatively, pass a path where Vundle should install plugins</span><br><span class=\"line\">&quot;call vundle#begin(&#x27;~/some/path/here&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; let Vundle manage Vundle, required</span><br><span class=\"line\">Plugin &#x27;VundleVim/Vundle.vim&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; The following are examples of different formats supported.</span><br><span class=\"line\">&quot; Keep Plugin commands between vundle#begin/end.</span><br><span class=\"line\">&quot; plugin on GitHub repo</span><br><span class=\"line\">&quot;Plugin &#x27;tpope/vim-fugitive&#x27;</span><br><span class=\"line\">&quot; plugin from http://vim-scripts.org/vim/scripts.html</span><br><span class=\"line\">&quot;Plugin &#x27;L9&#x27;</span><br><span class=\"line\">&quot; Git plugin not hosted on GitHub</span><br><span class=\"line\">&quot;Plugin &#x27;git://git.wincent.com/command-t.git&#x27;</span><br><span class=\"line\">&quot; git repos on your local machine (i.e. when working on your own plugin)</span><br><span class=\"line\">&quot;Plugin &#x27;file:///home/gmarik/path/to/plugin&#x27;</span><br><span class=\"line\">&quot; The sparkup vim script is in a subdirectory of this repo called vim.</span><br><span class=\"line\">&quot; Pass the path to set the runtimepath properly.</span><br><span class=\"line\">&quot;Plugin &#x27;rstacruz/sparkup&#x27;, &#123;&#x27;rtp&#x27;: &#x27;vim/&#x27;&#125;</span><br><span class=\"line\">&quot; Avoid a name conflict with L9</span><br><span class=\"line\">&quot;Plugin &#x27;user/L9&#x27;, &#123;&#x27;name&#x27;: &#x27;newL9&#x27;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; All of your Plugins must be added before the following line</span><br><span class=\"line\">call vundle#end()            &quot; required</span><br><span class=\"line\">filetype plugin indent on    &quot; required</span><br><span class=\"line\">&quot; To ignore plugin indent changes, instead use:</span><br><span class=\"line\">&quot;filetype plugin on</span><br><span class=\"line\">&quot;</span><br><span class=\"line\">&quot; Brief help</span><br><span class=\"line\">&quot; :PluginList       - lists configured plugins</span><br><span class=\"line\">&quot; :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate</span><br><span class=\"line\">&quot; :PluginSearch foo - searches for foo; append `!` to refresh local cache</span><br><span class=\"line\">&quot; :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal</span><br><span class=\"line\">&quot;</span><br><span class=\"line\">&quot; see :h vundle for more details or wiki for FAQ</span><br><span class=\"line\">&quot; Put your non-Plugin stuff after this line</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>\n\n<p>可以看出, Vundle支持多种形式的插件源, 包括github上的插件, <a href=\"http://vim-srcipts.org/vim/scripts.html\">http://vim-srcipts.org/vim/scripts.html</a> 上的插件, 非github上的git插件, 本地硬盘上的插件等。</p>\n<h3 id=\"安装插件\"><a href=\"#安装插件\" class=\"headerlink\" title=\"安装插件\"></a>安装插件</h3><p>打开vim, 运行<code>:PluginInstall</code>命令来自动安装插件。</p>\n<p><strong>注意, 这里如果不能翻墙的话, 建议还是使用git安装!!!</strong></p>\n<blockquote>\n<p>感谢写<a href=\"https://www.cnblogs.com/YMaster/p/11209813.html\">这篇博客</a>的老铁, 非常感谢!</p>\n</blockquote>\n<p>git安装方式如下:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~/.vim/bundle</span><br><span class=\"line\">git clone https://github.com/ycm-core/YouCompleteMe.git</span><br><span class=\"line\">cd YouCompleteMe</span><br><span class=\"line\">git submodule update --init --recursive</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 这里安装子模块会出现</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> fatal: unable to access <span class=\"string\">&#x27;https://go.googlesource.com/tools/&#x27;</span>: Failed to connect to go.googlesource.com port 443: 连接超时</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 解决办法:</span></span><br><span class=\"line\">cd ~/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/go/src/golang.org/x</span><br><span class=\"line\">git clone https://github.com/golang/tools.git</span><br><span class=\"line\">cd ~/.vim/bundle/YouCompleteMe</span><br><span class=\"line\">git submodule update --init --recursive</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/linux/computer-operation/llvm.jpg\" alt=\"llvm\"></p>\n<p>我在安装完之后, 再次打开vim, 提示我vim版本低, 最低版本为7.4.143, 好了, 这就是我遇到的第一个坑。</p>\n<p>怎么办, 更新vim呗。</p>\n<h2 id=\"更新vim\"><a href=\"#更新vim\" class=\"headerlink\" title=\"更新vim\"></a>更新vim</h2><p>我直接将vim7升级到了vim8, 升级步骤:</p>\n<h3 id=\"删除旧版本的vim\"><a href=\"#删除旧版本的vim\" class=\"headerlink\" title=\"删除旧版本的vim\"></a>删除旧版本的vim</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum remove vim -y</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装ncurses\"><a href=\"#安装ncurses\" class=\"headerlink\" title=\"安装ncurses\"></a>安装ncurses</h3><p>这里是它的<a href=\"https://www.invisible-island.net/ncurses/announce.html\">简介</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* yum install ncurses-devel -y</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>如果没有vpn, 八成会下载失败, 可以手工安装:</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://mirror.centos.org/centos/7/os/x86_64/Packages/ncurses-devel-5.9-13.20130511.el7.x86_64.rpm</span><br><span class=\"line\">yum install ncurses-devel-5.9-13.20130511.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"下载vim\"><a href=\"#下载vim\" class=\"headerlink\" title=\"下载vim\"></a>下载vim</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/vim/vim.git</span><br><span class=\"line\">cd vim/src</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置环境变量\"><a href=\"#配置环境变量\" class=\"headerlink\" title=\"配置环境变量\"></a>配置环境变量</h3><p>编辑文件: <code>/usr/local/bin/bim /etc/profile.d/path.sh</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:/usr/<span class=\"built_in\">local</span>/bin/vim</span><br></pre></td></tr></table></figure>\n<p>source &#x2F;etc&#x2F;profile.d&#x2F;path.sh</p>\n<p>ok, vim更新成功, 接下来打开vim的时候发现还是有错误信息:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">YouCompleteMe unavailable: requires Vim compiled with Python (2.7.1+ or 3.4+) support.</span><br><span class=\"line\">Press ENTER or type command to continue</span><br></pre></td></tr></table></figure>\n\n<p>这是由于vim不支持python导致的, 可以通过:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim --version | grep python</span><br></pre></td></tr></table></figure>\n\n<p>来查看是否支持。ok, 这是我遇到的第二个坑, 怎么办, 安装Python呗。</p>\n<h2 id=\"安装Python3\"><a href=\"#安装Python3\" class=\"headerlink\" title=\"安装Python3\"></a>安装Python3</h2><h3 id=\"1-准备安装环境\"><a href=\"#1-准备安装环境\" class=\"headerlink\" title=\"1. 准备安装环境\"></a>1. 准备安装环境</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install -y zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gcc make gdbm-devel</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-编译安装Python-3\"><a href=\"#2-编译安装Python-3\" class=\"headerlink\" title=\"2. 编译安装Python 3\"></a>2. 编译安装Python 3</h3><p><a href=\"https://www.python.org/downloads/source\">源码下载地址</a></p>\n<h3 id=\"2-1-获取源码\"><a href=\"#2-1-获取源码\" class=\"headerlink\" title=\"2.1 获取源码\"></a>2.1 获取源码</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">~$</span><span class=\"bash\"> wget https://www.python.org/ftp/python/3.6.2/Python-3.6.2.tgz</span></span><br><span class=\"line\"><span class=\"meta\">~$</span><span class=\"bash\"> tar -zxvf Python-3.6.2.tgz</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-编译安装\"><a href=\"#2-2-编译安装\" class=\"headerlink\" title=\"2.2 编译安装\"></a>2.2 编译安装</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">~$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> Python-3.6.2</span></span><br><span class=\"line\"><span class=\"meta\">~$</span><span class=\"bash\"> ./configure prefix=/usr/<span class=\"built_in\">local</span>/python3</span></span><br><span class=\"line\"><span class=\"meta\">~$</span><span class=\"bash\"> make</span></span><br><span class=\"line\"><span class=\"meta\">~$</span><span class=\"bash\"> sudo make install</span></span><br><span class=\"line\"><span class=\"meta\">~$</span><span class=\"bash\"> sudo ln -s /usr/<span class=\"built_in\">local</span>/python3/bin/python3 /usr/bin/python3</span></span><br><span class=\"line\"><span class=\"meta\">~$</span><span class=\"bash\"> sudo ln -s /usr/<span class=\"built_in\">local</span>/python3/bin/pip3 /usr/bin/pip3</span></span><br></pre></td></tr></table></figure>\n\n<p>安装好Python了之后, 在vim源码的根目录下使用</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure ./configure --enable-multibyte --enable-rubyinterp=yes --enable-pythoninterp=yes --enable-python3interp=yes</span><br><span class=\"line\">make</span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\n\n<p>ok, 现在我们的vim已经支持python3了, 那么接着安装YCM。</p>\n<p>YCM的vim插件已经安装好了, 接下来安装clang和llvm。</p>\n<h2 id=\"安装llvm\"><a href=\"#安装llvm\" class=\"headerlink\" title=\"安装llvm\"></a>安装llvm</h2><h3 id=\"下载源码\"><a href=\"#下载源码\" class=\"headerlink\" title=\"下载源码\"></a>下载源码</h3><p>安装svn, 用于下载llvm的源码</p>\n<p>centos:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install svn -y</span><br></pre></td></tr></table></figure>\n\n<p>debian:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install subversion</span><br></pre></td></tr></table></figure>\n\n<p>下载llvm源码</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir llvm_source_build</span><br><span class=\"line\">cd llvm_source_build</span><br><span class=\"line\">svn co http://llvm.org/svn/llvm-project/llvm/trunk llvm</span><br></pre></td></tr></table></figure>\n\n<p>下载clang源码</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd llvm/tools</span><br><span class=\"line\">svn co http://llvm.org/svn/llvm-project/cfe/trunk clang</span><br></pre></td></tr></table></figure>\n\n<p>下载clang工具源码(可选)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd llvm/tools/clang/tools</span><br><span class=\"line\">svn co http://llvm.org/svn/llvm-project/clang-tools-extra/trunk extra</span><br></pre></td></tr></table></figure>\n\n<p>下载Complier-RT源码(可选)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd llvm/projects</span><br><span class=\"line\">svn co http://llvm.org/svn/llvm-project/compiler-rt/trunk compiler-rt</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置和安装llvm和clang\"><a href=\"#配置和安装llvm和clang\" class=\"headerlink\" title=\"配置和安装llvm和clang\"></a>配置和安装llvm和clang</h3><p>下载好之后, 就可以编译了。</p>\n<p>首先返回到llvm_source_build目录下, 新建一个build目录。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ../../</span><br><span class=\"line\">mkdir build</span><br></pre></td></tr></table></figure>\n\n<p>cmake一下:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /build</span><br><span class=\"line\">cmake -G &quot;Unix Makefiles&quot; -DCMAKE_BUILD_TYPE=Release -DLLVM_TARGETS_TO_BUILD=&quot;X86&quot; -DCMAKE_INSTALL_PREFIX=/opt/llvm ../llvm</span><br></pre></td></tr></table></figure>\n\n<p>上面的-CMAKE_INSTALL_PREDIX&#x3D;&#x2F;opt&#x2F;llvm 表示要安装的目录。</p>\n<p>然后我惊讶的发现, cmake的版本太低, 这是我遇到的第三个坑, 怎么办, 升级cmake呗。</p>\n<h3 id=\"升级cmake\"><a href=\"#升级cmake\" class=\"headerlink\" title=\"升级cmake\"></a>升级cmake</h3><h4 id=\"下载cmake\"><a href=\"#下载cmake\" class=\"headerlink\" title=\"下载cmake\"></a>下载cmake</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://cmake.org/files/v3.6/cmake-3.6.2.tar.gz</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"解压\"><a href=\"#解压\" class=\"headerlink\" title=\"解压\"></a>解压</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xvf cmake-3.6.2.tar.gz &amp;&amp; cd cmake-3.6.2/</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"编译安装\"><a href=\"#编译安装\" class=\"headerlink\" title=\"编译安装\"></a>编译安装</h4><p>注意: 这里如果是debian系统, 是没有gmake的, 那么接下来需要这些操作:</p>\n<p>这里参考了<a href=\"http://cmake.3232098.n2.nabble.com/v3-7-0-archive-cryptor-private-h-compile-error-td7594660.html#a7594664\">这篇帖子</a>。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir build</span><br><span class=\"line\">cd build</span><br><span class=\"line\">sudo apt-get install librhash-dev</span><br><span class=\"line\">sudo apt-get install libcurl4-openssl-dev</span><br><span class=\"line\">sudo apt-get install libbz2-dev</span><br><span class=\"line\">sudo apt-get install liblzma-dev</span><br><span class=\"line\">sudo apt-get install libarchive-dev</span><br><span class=\"line\">sudo apt-get install libjsoncpp-dev</span><br><span class=\"line\">../bootstrap --system-libs</span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>centos 版本的操作:</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir build</span><br><span class=\"line\">cd build</span><br><span class=\"line\">../bootstrap</span><br><span class=\"line\">gmake</span><br><span class=\"line\">gmake install</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看编译之后的版本\"><a href=\"#查看编译之后的版本\" class=\"headerlink\" title=\"查看编译之后的版本\"></a>查看编译之后的版本</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/bin/cmake --version</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"移除旧版本\"><a href=\"#移除旧版本\" class=\"headerlink\" title=\"移除旧版本\"></a>移除旧版本</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum remove cmake -y</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"新建软连接\"><a href=\"#新建软连接\" class=\"headerlink\" title=\"新建软连接\"></a>新建软连接</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /usr/local/bin/cmake /usr/bin/</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看版本\"><a href=\"#查看版本\" class=\"headerlink\" title=\"查看版本\"></a>查看版本</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake --version</span><br></pre></td></tr></table></figure>\n\n<p>在编译安装这一步的时候, 我遇到了gcc的版本太低的问题, 这是我遇到的第四个坑。怎么办, 升级gcc呗。</p>\n<h3 id=\"升级gcc\"><a href=\"#升级gcc\" class=\"headerlink\" title=\"升级gcc\"></a>升级gcc</h3><h4 id=\"下载gcc\"><a href=\"#下载gcc\" class=\"headerlink\" title=\"下载gcc\"></a>下载gcc</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://ftp.tsukuba.wide.ad.jp/software/gcc/releases/gcc-5.4.0/gcc-5.4.0.tar.gz</span><br><span class=\"line\">tar xvf gcc-5.4.0.tar.gz</span><br><span class=\"line\">cd gcc-5.4.0</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"下载依赖包\"><a href=\"#下载依赖包\" class=\"headerlink\" title=\"下载依赖包\"></a>下载依赖包</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./contrib/download_prerequisites</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"配置编译参数\"><a href=\"#配置编译参数\" class=\"headerlink\" title=\"配置编译参数\"></a>配置编译参数</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ..</span><br><span class=\"line\">mkdir gcc-build-5.4.0</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 这里如果没有下载gcc和g++的话, 需要先通过包管理器安装一下, 要不然编译不了</span></span><br><span class=\"line\">sudo apt-get install gcc g++</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> redhat系:</span></span><br><span class=\"line\">yum install gcc gcc-c++</span><br><span class=\"line\">cd gcc-build-5.4.0</span><br><span class=\"line\">../gcc-5.4.0/configure --enable-checking=release --enable-languages=c,c++ --disable-multilib</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"编译安装-1\"><a href=\"#编译安装-1\" class=\"headerlink\" title=\"编译安装\"></a>编译安装</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make -j4  #允许4个编译命令同时执行，加速编译过程</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"配置环境变量-1\"><a href=\"#配置环境变量-1\" class=\"headerlink\" title=\"配置环境变量\"></a>配置环境变量</h4><p>编译~.bashrc</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export LD_LIBRARY_PATH=/usr/local/gcc-4.9.2/lib64:/usr/local/lib:$LD_LIBRARY_PATH</span><br><span class=\"line\">export PATH=/usr/local/gcc-4.9.2/bin:/usr/local/bin:$PATH</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看gcc版本\"><a href=\"#查看gcc版本\" class=\"headerlink\" title=\"查看gcc版本\"></a>查看gcc版本</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc -v</span><br><span class=\"line\">g++ -v</span><br></pre></td></tr></table></figure>\n\n<p>升级了cmake之后, 让我们来继续编译llvm。</p>\n<h3 id=\"编译llvm\"><a href=\"#编译llvm\" class=\"headerlink\" title=\"编译llvm\"></a>编译llvm</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd llvm_source_build/build</span><br><span class=\"line\">export CC=/usr/local/bin/gcc</span><br><span class=\"line\">export CXX=/usr/local/bin/g++</span><br><span class=\"line\">cmake -G &quot;Unix Makefiles&quot; -DCMAKE_BUILD_TYPE=Release -DLLVM_TARGETS_TO_BUILD=&quot;X86&quot; -DCMAKE_INSTALL_PREFIX=/opt/llvm ../llvm</span><br><span class=\"line\">make</span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置环境变量-2\"><a href=\"#配置环境变量-2\" class=\"headerlink\" title=\"配置环境变量\"></a>配置环境变量</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">配置一下环境变量</span></span><br><span class=\"line\">vim /etc/profile</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">在末尾添加</span></span><br><span class=\"line\">export PATH=$PATH:/opt/llvm/bin</span><br></pre></td></tr></table></figure>\n\n<p>这里我整整编译了一晚上才编译好, 期间遇到了 <code>- version GLIBCXX_3.4.20&#39; not found</code> 的问题, 就是gcc的版本太低, 或者是和配置的gcc的版本不一致。</p>\n<h3 id=\"编译ycm-core\"><a href=\"#编译ycm-core\" class=\"headerlink\" title=\"编译ycm_core\"></a>编译ycm_core</h3><p>现在准备工作算是完成了, 现在开始正式开始编译ycm_core</p>\n<p>生成makefile文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir ycm_build</span><br><span class=\"line\">cd ycm_build</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 这里PATH_TO_LLVM_ROOT的路径应该是你的llvm的build的路径</span></span><br><span class=\"line\">cmake -G &quot;Unix Makefiles&quot; -DPATH_TO_LLVM_ROOT=~/ycm_temp/llvm_root_dir . ~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp</span><br></pre></td></tr></table></figure>\n\n<p>这里我遇到了无法找到Boost路径的问题, 直接安装一下就好了:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install libboost-all-dev</span><br></pre></td></tr></table></figure>\n\n<p>编译makefile</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 将clang-c复制到ycm插件中</span></span><br><span class=\"line\">cp -r  ~/programmingTools/llvm/llvm/tools/clang/include/clang-c ~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/ClangCompleter/</span><br><span class=\"line\">cmake --build . --target ycm_core --config Release</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"编辑ycm的配置文件\"><a href=\"#编辑ycm的配置文件\" class=\"headerlink\" title=\"编辑ycm的配置文件\"></a>编辑ycm的配置文件</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp ~/.vim/bundle/YouCompleteMe/third_party/ycmd/examples/.ycm_extra_conf.py ~/</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"配置-ycm-的补全库\"><a href=\"#配置-ycm-的补全库\" class=\"headerlink\" title=\"配置 ycm 的补全库\"></a>配置 ycm 的补全库</h1><p>编写vimrc中指定的.ycm_extra_conf.py, 添加需要显示的库:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flags = [</span><br><span class=\"line\">`-isystem`,</span><br><span class=\"line\">`/usr/include/c++/8`</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p><code>-isystem</code>代表自己添加的库。</p>\n<h1 id=\"2021-03-27更新\"><a href=\"#2021-03-27更新\" class=\"headerlink\" title=\"2021.03.27更新\"></a>2021.03.27更新</h1><p>今天重新在archlinux上安装了ycm插件, 这次直接使用plug-vim插件管理工具来安装</p>\n<p>vimrc:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">call plug#begin (&#x27;~/.vim/plugged&#x27;)</span><br><span class=\"line\">Plug &#x27;Valloric/YouCompleteMe&#x27;</span><br><span class=\"line\">call plug#end ()</span><br></pre></td></tr></table></figure>\n\n<p>在vim中执行 <code>:PlugInstall</code>, 安装插件。</p>\n<p>使用pacman安装所需要的工具:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S gcc python3</span><br></pre></td></tr></table></figure>\n\n<p>在 <code>~/.vim/plugged</code> 中找到 <code>YouCompleteMe</code> 文件, 执行<code>./install.sh --all</code> 来对ycm插件编译, 在使用的时候遇到了无法<code>libtinfo.so.5 not found</code>, google了一天, 解决方案是安装 <code>ncurses5-compat-libs</code>(这个是arch的解决方案, 其他的linux发行版本应该是ncurses5)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir ~/pkg &amp;&amp; cd ~/pkg</span><br><span class=\"line\">git clone https://aur.archlinux.org/ncurses5-compat-libs.git</span><br><span class=\"line\">cd ncurses5-compat-libs</span><br><span class=\"line\">makepkg -s -A</span><br><span class=\"line\">sudo pacman -U ncurses5-compat-libs-6.2-1-armv7h.pkg.tar.xz</span><br></pre></td></tr></table></figure>\n\n<p>ok, libtinfo.so.5 这个问题解决了, 还有一个问题是java不能自动补全。原因是因为<code>eclipse.jdt.ls</code>只支持jdk11, 甚至jdk12都不行, 所以需要安装:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S jdk-openjdk11</span><br><span class=\"line\"># 切换jdk</span><br><span class=\"line\">sudo archlinux-java java-11-openjdk</span><br><span class=\"line\"># 在目录/usr/lib/jvm/下放着所有通过pacman安装的jdk版本</span><br></pre></td></tr></table></figure>\n\n<p>ok, 现在在<code>~/.vim/plugged/YouCompleteMe</code>目录下执行<code>./install.sh --all</code>, 应该就什么问题都没有了。</p>\n<h1 id=\"以下是我参考的所有博客和帖子\"><a href=\"#以下是我参考的所有博客和帖子\" class=\"headerlink\" title=\"以下是我参考的所有博客和帖子:\"></a>以下是我参考的所有博客和帖子:</h1><p><a href=\"https://www.cnblogs.com/zzqcn/p/4660615.html\">【vim】插件管理及代码智能提示与补全环境的配置</a><br><a href=\"https://www.zybuluo.com/searcher2xiao/note/136156\">CentOS 7 + vim + ycm (clang) + NERDTree</a><br><a href=\"https://www.jianshu.com/p/c24f919097b3\">VIM、YouCompleteMe折腾配置以及clang+llvm编译安装</a><br><a href=\"https://www.cnblogs.com/lavezhang/p/7227777.html\">centos升级vim</a><br><a href=\"https://blog.csdn.net/uu203/article/details/82621523\">CentOS7解决YouCompleteMe对Python的依赖</a><br><a href=\"https://blog.csdn.net/l2563898960/article/details/82871826\">安装LLVM+Clang教程</a><br><a href=\"https://blog.csdn.net/jiang_xinxing/article/details/77945478\">Centos7安装高版本Cmake</a><br><a href=\"https://www.jianshu.com/p/8ac4e50d182d\">Centos升级gcc至5.4.0</a><br><a href=\"https://blog.csdn.net/zhaojianting/article/details/81095120\">centOS系统gcc升级步骤(亲自测试成功)</a><br><a href=\"https://www.jianshu.com/p/f0b28fb4661d\">CentOS下gcc4.9编译安装教程</a><br><a href=\"https://superuser.com/questions/927512/how-to-set-path-for-sudo-commands\">How to set path for sudo commands</a><br><a href=\"https://blog.csdn.net/haohaibo031113/article/details/72833327\">CMake 指定gcc编译版本</a><br><a href=\"https://blog.csdn.net/qq_36416904/article/details/79316972\">关于在centos下安装python3.7.0以上版本时报错ModuleNotFoundError: No module named ‘_ctypes’的解决办法</a><br><a href=\"https://blog.csdn.net/leaf5022/article/details/21290509#comments\">Vim智能补全插件YouCompleteMe安装</a><br><a href=\"http://www.nagain.com/activity/article/4/\">llvm之旅第一站 － 编译及简单使用</a><br><a href=\"https://blog.csdn.net/zhang14916/article/details/89288196\">Getting Started with the LLVM System</a><br><a href=\"https://www.cnblogs.com/wx7217242/articles/4684530.html\">gRPC编译- version <code>GLIBCXX_3.4.20&#39; not found 问题](https://blog.csdn.net/weixin_34365417/article/details/86870934) [CentOS 6.4(64位)上安装错误libstdc++.so.6(GLIBCXX_3.4.14)解决办法](https://blog.csdn.net/lqzixi/article/details/24738337) [linux下提示/usr/lib64/libstdc++.so.6: version </code>GLIBCXX_3.4.14’ not found 解决办法</a><br><a href=\"http://www.bubuko.com/infodetail-1978493.html\">Linux C&#x2F;C++程序员CentOS 6.5安装YouCompleteMe使用vim语法自动补全</a> 这个比较全!<br><a href=\"https://www.cnblogs.com/linuxprobe/p/5926821.html\">10款优秀Vim插件帮你打造完美IDE</a></p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>原本只是想在vim上装几个插件玩玩, 然后发现了YCM这款插件, 之后, 就有了今天的这篇博客。<br>经历了连续一个星期的战斗, 终于还是被我安装上了llvm, 更新了gcc的版本和vim的版本, 特此记录一下战斗的过程。</p>","more":"<h1 id=\"安装YCM\"><a href=\"#安装YCM\" class=\"headerlink\" title=\"安装YCM\"></a>安装YCM</h1><p>YCM插件可以对代码进行事实上的语义分析, 实现了真正的智能提示和补全插件。</p>\n<h2 id=\"Vundle\"><a href=\"#Vundle\" class=\"headerlink\" title=\"Vundle\"></a>Vundle</h2><p>在安装YCM插件之前, 需要先安装一下vim的插件管理器: Vundle。</p>\n<p>安装步骤:</p>\n<h3 id=\"下载插件\"><a href=\"#下载插件\" class=\"headerlink\" title=\"下载插件\"></a>下载插件</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置插件\"><a href=\"#配置插件\" class=\"headerlink\" title=\"配置插件\"></a>配置插件</h3><p>打开~&#x2F;.vimrc, 在文件头加入以下内容:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;</span><br><span class=\"line\">&quot; Vundle</span><br><span class=\"line\">set nocompatible              &quot; be iMproved, required</span><br><span class=\"line\">filetype off                  &quot; required</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; set the runtime path to include Vundle and initialize</span><br><span class=\"line\">set rtp+=~/.vim/bundle/Vundle.vim</span><br><span class=\"line\">call vundle#begin()</span><br><span class=\"line\">&quot; alternatively, pass a path where Vundle should install plugins</span><br><span class=\"line\">&quot;call vundle#begin(&#x27;~/some/path/here&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; let Vundle manage Vundle, required</span><br><span class=\"line\">Plugin &#x27;VundleVim/Vundle.vim&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; The following are examples of different formats supported.</span><br><span class=\"line\">&quot; Keep Plugin commands between vundle#begin/end.</span><br><span class=\"line\">&quot; plugin on GitHub repo</span><br><span class=\"line\">&quot;Plugin &#x27;tpope/vim-fugitive&#x27;</span><br><span class=\"line\">&quot; plugin from http://vim-scripts.org/vim/scripts.html</span><br><span class=\"line\">&quot;Plugin &#x27;L9&#x27;</span><br><span class=\"line\">&quot; Git plugin not hosted on GitHub</span><br><span class=\"line\">&quot;Plugin &#x27;git://git.wincent.com/command-t.git&#x27;</span><br><span class=\"line\">&quot; git repos on your local machine (i.e. when working on your own plugin)</span><br><span class=\"line\">&quot;Plugin &#x27;file:///home/gmarik/path/to/plugin&#x27;</span><br><span class=\"line\">&quot; The sparkup vim script is in a subdirectory of this repo called vim.</span><br><span class=\"line\">&quot; Pass the path to set the runtimepath properly.</span><br><span class=\"line\">&quot;Plugin &#x27;rstacruz/sparkup&#x27;, &#123;&#x27;rtp&#x27;: &#x27;vim/&#x27;&#125;</span><br><span class=\"line\">&quot; Avoid a name conflict with L9</span><br><span class=\"line\">&quot;Plugin &#x27;user/L9&#x27;, &#123;&#x27;name&#x27;: &#x27;newL9&#x27;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; All of your Plugins must be added before the following line</span><br><span class=\"line\">call vundle#end()            &quot; required</span><br><span class=\"line\">filetype plugin indent on    &quot; required</span><br><span class=\"line\">&quot; To ignore plugin indent changes, instead use:</span><br><span class=\"line\">&quot;filetype plugin on</span><br><span class=\"line\">&quot;</span><br><span class=\"line\">&quot; Brief help</span><br><span class=\"line\">&quot; :PluginList       - lists configured plugins</span><br><span class=\"line\">&quot; :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate</span><br><span class=\"line\">&quot; :PluginSearch foo - searches for foo; append `!` to refresh local cache</span><br><span class=\"line\">&quot; :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal</span><br><span class=\"line\">&quot;</span><br><span class=\"line\">&quot; see :h vundle for more details or wiki for FAQ</span><br><span class=\"line\">&quot; Put your non-Plugin stuff after this line</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>\n\n<p>可以看出, Vundle支持多种形式的插件源, 包括github上的插件, <a href=\"http://vim-srcipts.org/vim/scripts.html\">http://vim-srcipts.org/vim/scripts.html</a> 上的插件, 非github上的git插件, 本地硬盘上的插件等。</p>\n<h3 id=\"安装插件\"><a href=\"#安装插件\" class=\"headerlink\" title=\"安装插件\"></a>安装插件</h3><p>打开vim, 运行<code>:PluginInstall</code>命令来自动安装插件。</p>\n<p><strong>注意, 这里如果不能翻墙的话, 建议还是使用git安装!!!</strong></p>\n<blockquote>\n<p>感谢写<a href=\"https://www.cnblogs.com/YMaster/p/11209813.html\">这篇博客</a>的老铁, 非常感谢!</p>\n</blockquote>\n<p>git安装方式如下:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~/.vim/bundle</span><br><span class=\"line\">git clone https://github.com/ycm-core/YouCompleteMe.git</span><br><span class=\"line\">cd YouCompleteMe</span><br><span class=\"line\">git submodule update --init --recursive</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 这里安装子模块会出现</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> fatal: unable to access <span class=\"string\">&#x27;https://go.googlesource.com/tools/&#x27;</span>: Failed to connect to go.googlesource.com port 443: 连接超时</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 解决办法:</span></span><br><span class=\"line\">cd ~/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/go/src/golang.org/x</span><br><span class=\"line\">git clone https://github.com/golang/tools.git</span><br><span class=\"line\">cd ~/.vim/bundle/YouCompleteMe</span><br><span class=\"line\">git submodule update --init --recursive</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/linux/computer-operation/llvm.jpg\" alt=\"llvm\"></p>\n<p>我在安装完之后, 再次打开vim, 提示我vim版本低, 最低版本为7.4.143, 好了, 这就是我遇到的第一个坑。</p>\n<p>怎么办, 更新vim呗。</p>\n<h2 id=\"更新vim\"><a href=\"#更新vim\" class=\"headerlink\" title=\"更新vim\"></a>更新vim</h2><p>我直接将vim7升级到了vim8, 升级步骤:</p>\n<h3 id=\"删除旧版本的vim\"><a href=\"#删除旧版本的vim\" class=\"headerlink\" title=\"删除旧版本的vim\"></a>删除旧版本的vim</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum remove vim -y</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装ncurses\"><a href=\"#安装ncurses\" class=\"headerlink\" title=\"安装ncurses\"></a>安装ncurses</h3><p>这里是它的<a href=\"https://www.invisible-island.net/ncurses/announce.html\">简介</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* yum install ncurses-devel -y</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>如果没有vpn, 八成会下载失败, 可以手工安装:</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://mirror.centos.org/centos/7/os/x86_64/Packages/ncurses-devel-5.9-13.20130511.el7.x86_64.rpm</span><br><span class=\"line\">yum install ncurses-devel-5.9-13.20130511.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"下载vim\"><a href=\"#下载vim\" class=\"headerlink\" title=\"下载vim\"></a>下载vim</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/vim/vim.git</span><br><span class=\"line\">cd vim/src</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置环境变量\"><a href=\"#配置环境变量\" class=\"headerlink\" title=\"配置环境变量\"></a>配置环境变量</h3><p>编辑文件: <code>/usr/local/bin/bim /etc/profile.d/path.sh</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:/usr/<span class=\"built_in\">local</span>/bin/vim</span><br></pre></td></tr></table></figure>\n<p>source &#x2F;etc&#x2F;profile.d&#x2F;path.sh</p>\n<p>ok, vim更新成功, 接下来打开vim的时候发现还是有错误信息:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">YouCompleteMe unavailable: requires Vim compiled with Python (2.7.1+ or 3.4+) support.</span><br><span class=\"line\">Press ENTER or type command to continue</span><br></pre></td></tr></table></figure>\n\n<p>这是由于vim不支持python导致的, 可以通过:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim --version | grep python</span><br></pre></td></tr></table></figure>\n\n<p>来查看是否支持。ok, 这是我遇到的第二个坑, 怎么办, 安装Python呗。</p>\n<h2 id=\"安装Python3\"><a href=\"#安装Python3\" class=\"headerlink\" title=\"安装Python3\"></a>安装Python3</h2><h3 id=\"1-准备安装环境\"><a href=\"#1-准备安装环境\" class=\"headerlink\" title=\"1. 准备安装环境\"></a>1. 准备安装环境</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install -y zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gcc make gdbm-devel</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-编译安装Python-3\"><a href=\"#2-编译安装Python-3\" class=\"headerlink\" title=\"2. 编译安装Python 3\"></a>2. 编译安装Python 3</h3><p><a href=\"https://www.python.org/downloads/source\">源码下载地址</a></p>\n<h3 id=\"2-1-获取源码\"><a href=\"#2-1-获取源码\" class=\"headerlink\" title=\"2.1 获取源码\"></a>2.1 获取源码</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">~$</span><span class=\"bash\"> wget https://www.python.org/ftp/python/3.6.2/Python-3.6.2.tgz</span></span><br><span class=\"line\"><span class=\"meta\">~$</span><span class=\"bash\"> tar -zxvf Python-3.6.2.tgz</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-编译安装\"><a href=\"#2-2-编译安装\" class=\"headerlink\" title=\"2.2 编译安装\"></a>2.2 编译安装</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">~$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> Python-3.6.2</span></span><br><span class=\"line\"><span class=\"meta\">~$</span><span class=\"bash\"> ./configure prefix=/usr/<span class=\"built_in\">local</span>/python3</span></span><br><span class=\"line\"><span class=\"meta\">~$</span><span class=\"bash\"> make</span></span><br><span class=\"line\"><span class=\"meta\">~$</span><span class=\"bash\"> sudo make install</span></span><br><span class=\"line\"><span class=\"meta\">~$</span><span class=\"bash\"> sudo ln -s /usr/<span class=\"built_in\">local</span>/python3/bin/python3 /usr/bin/python3</span></span><br><span class=\"line\"><span class=\"meta\">~$</span><span class=\"bash\"> sudo ln -s /usr/<span class=\"built_in\">local</span>/python3/bin/pip3 /usr/bin/pip3</span></span><br></pre></td></tr></table></figure>\n\n<p>安装好Python了之后, 在vim源码的根目录下使用</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure ./configure --enable-multibyte --enable-rubyinterp=yes --enable-pythoninterp=yes --enable-python3interp=yes</span><br><span class=\"line\">make</span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\n\n<p>ok, 现在我们的vim已经支持python3了, 那么接着安装YCM。</p>\n<p>YCM的vim插件已经安装好了, 接下来安装clang和llvm。</p>\n<h2 id=\"安装llvm\"><a href=\"#安装llvm\" class=\"headerlink\" title=\"安装llvm\"></a>安装llvm</h2><h3 id=\"下载源码\"><a href=\"#下载源码\" class=\"headerlink\" title=\"下载源码\"></a>下载源码</h3><p>安装svn, 用于下载llvm的源码</p>\n<p>centos:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install svn -y</span><br></pre></td></tr></table></figure>\n\n<p>debian:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install subversion</span><br></pre></td></tr></table></figure>\n\n<p>下载llvm源码</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir llvm_source_build</span><br><span class=\"line\">cd llvm_source_build</span><br><span class=\"line\">svn co http://llvm.org/svn/llvm-project/llvm/trunk llvm</span><br></pre></td></tr></table></figure>\n\n<p>下载clang源码</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd llvm/tools</span><br><span class=\"line\">svn co http://llvm.org/svn/llvm-project/cfe/trunk clang</span><br></pre></td></tr></table></figure>\n\n<p>下载clang工具源码(可选)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd llvm/tools/clang/tools</span><br><span class=\"line\">svn co http://llvm.org/svn/llvm-project/clang-tools-extra/trunk extra</span><br></pre></td></tr></table></figure>\n\n<p>下载Complier-RT源码(可选)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd llvm/projects</span><br><span class=\"line\">svn co http://llvm.org/svn/llvm-project/compiler-rt/trunk compiler-rt</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置和安装llvm和clang\"><a href=\"#配置和安装llvm和clang\" class=\"headerlink\" title=\"配置和安装llvm和clang\"></a>配置和安装llvm和clang</h3><p>下载好之后, 就可以编译了。</p>\n<p>首先返回到llvm_source_build目录下, 新建一个build目录。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ../../</span><br><span class=\"line\">mkdir build</span><br></pre></td></tr></table></figure>\n\n<p>cmake一下:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /build</span><br><span class=\"line\">cmake -G &quot;Unix Makefiles&quot; -DCMAKE_BUILD_TYPE=Release -DLLVM_TARGETS_TO_BUILD=&quot;X86&quot; -DCMAKE_INSTALL_PREFIX=/opt/llvm ../llvm</span><br></pre></td></tr></table></figure>\n\n<p>上面的-CMAKE_INSTALL_PREDIX&#x3D;&#x2F;opt&#x2F;llvm 表示要安装的目录。</p>\n<p>然后我惊讶的发现, cmake的版本太低, 这是我遇到的第三个坑, 怎么办, 升级cmake呗。</p>\n<h3 id=\"升级cmake\"><a href=\"#升级cmake\" class=\"headerlink\" title=\"升级cmake\"></a>升级cmake</h3><h4 id=\"下载cmake\"><a href=\"#下载cmake\" class=\"headerlink\" title=\"下载cmake\"></a>下载cmake</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://cmake.org/files/v3.6/cmake-3.6.2.tar.gz</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"解压\"><a href=\"#解压\" class=\"headerlink\" title=\"解压\"></a>解压</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xvf cmake-3.6.2.tar.gz &amp;&amp; cd cmake-3.6.2/</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"编译安装\"><a href=\"#编译安装\" class=\"headerlink\" title=\"编译安装\"></a>编译安装</h4><p>注意: 这里如果是debian系统, 是没有gmake的, 那么接下来需要这些操作:</p>\n<p>这里参考了<a href=\"http://cmake.3232098.n2.nabble.com/v3-7-0-archive-cryptor-private-h-compile-error-td7594660.html#a7594664\">这篇帖子</a>。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir build</span><br><span class=\"line\">cd build</span><br><span class=\"line\">sudo apt-get install librhash-dev</span><br><span class=\"line\">sudo apt-get install libcurl4-openssl-dev</span><br><span class=\"line\">sudo apt-get install libbz2-dev</span><br><span class=\"line\">sudo apt-get install liblzma-dev</span><br><span class=\"line\">sudo apt-get install libarchive-dev</span><br><span class=\"line\">sudo apt-get install libjsoncpp-dev</span><br><span class=\"line\">../bootstrap --system-libs</span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>centos 版本的操作:</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir build</span><br><span class=\"line\">cd build</span><br><span class=\"line\">../bootstrap</span><br><span class=\"line\">gmake</span><br><span class=\"line\">gmake install</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看编译之后的版本\"><a href=\"#查看编译之后的版本\" class=\"headerlink\" title=\"查看编译之后的版本\"></a>查看编译之后的版本</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/bin/cmake --version</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"移除旧版本\"><a href=\"#移除旧版本\" class=\"headerlink\" title=\"移除旧版本\"></a>移除旧版本</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum remove cmake -y</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"新建软连接\"><a href=\"#新建软连接\" class=\"headerlink\" title=\"新建软连接\"></a>新建软连接</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /usr/local/bin/cmake /usr/bin/</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看版本\"><a href=\"#查看版本\" class=\"headerlink\" title=\"查看版本\"></a>查看版本</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake --version</span><br></pre></td></tr></table></figure>\n\n<p>在编译安装这一步的时候, 我遇到了gcc的版本太低的问题, 这是我遇到的第四个坑。怎么办, 升级gcc呗。</p>\n<h3 id=\"升级gcc\"><a href=\"#升级gcc\" class=\"headerlink\" title=\"升级gcc\"></a>升级gcc</h3><h4 id=\"下载gcc\"><a href=\"#下载gcc\" class=\"headerlink\" title=\"下载gcc\"></a>下载gcc</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://ftp.tsukuba.wide.ad.jp/software/gcc/releases/gcc-5.4.0/gcc-5.4.0.tar.gz</span><br><span class=\"line\">tar xvf gcc-5.4.0.tar.gz</span><br><span class=\"line\">cd gcc-5.4.0</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"下载依赖包\"><a href=\"#下载依赖包\" class=\"headerlink\" title=\"下载依赖包\"></a>下载依赖包</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./contrib/download_prerequisites</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"配置编译参数\"><a href=\"#配置编译参数\" class=\"headerlink\" title=\"配置编译参数\"></a>配置编译参数</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ..</span><br><span class=\"line\">mkdir gcc-build-5.4.0</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 这里如果没有下载gcc和g++的话, 需要先通过包管理器安装一下, 要不然编译不了</span></span><br><span class=\"line\">sudo apt-get install gcc g++</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> redhat系:</span></span><br><span class=\"line\">yum install gcc gcc-c++</span><br><span class=\"line\">cd gcc-build-5.4.0</span><br><span class=\"line\">../gcc-5.4.0/configure --enable-checking=release --enable-languages=c,c++ --disable-multilib</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"编译安装-1\"><a href=\"#编译安装-1\" class=\"headerlink\" title=\"编译安装\"></a>编译安装</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make -j4  #允许4个编译命令同时执行，加速编译过程</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"配置环境变量-1\"><a href=\"#配置环境变量-1\" class=\"headerlink\" title=\"配置环境变量\"></a>配置环境变量</h4><p>编译~.bashrc</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export LD_LIBRARY_PATH=/usr/local/gcc-4.9.2/lib64:/usr/local/lib:$LD_LIBRARY_PATH</span><br><span class=\"line\">export PATH=/usr/local/gcc-4.9.2/bin:/usr/local/bin:$PATH</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看gcc版本\"><a href=\"#查看gcc版本\" class=\"headerlink\" title=\"查看gcc版本\"></a>查看gcc版本</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc -v</span><br><span class=\"line\">g++ -v</span><br></pre></td></tr></table></figure>\n\n<p>升级了cmake之后, 让我们来继续编译llvm。</p>\n<h3 id=\"编译llvm\"><a href=\"#编译llvm\" class=\"headerlink\" title=\"编译llvm\"></a>编译llvm</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd llvm_source_build/build</span><br><span class=\"line\">export CC=/usr/local/bin/gcc</span><br><span class=\"line\">export CXX=/usr/local/bin/g++</span><br><span class=\"line\">cmake -G &quot;Unix Makefiles&quot; -DCMAKE_BUILD_TYPE=Release -DLLVM_TARGETS_TO_BUILD=&quot;X86&quot; -DCMAKE_INSTALL_PREFIX=/opt/llvm ../llvm</span><br><span class=\"line\">make</span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置环境变量-2\"><a href=\"#配置环境变量-2\" class=\"headerlink\" title=\"配置环境变量\"></a>配置环境变量</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">配置一下环境变量</span></span><br><span class=\"line\">vim /etc/profile</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">在末尾添加</span></span><br><span class=\"line\">export PATH=$PATH:/opt/llvm/bin</span><br></pre></td></tr></table></figure>\n\n<p>这里我整整编译了一晚上才编译好, 期间遇到了 <code>- version GLIBCXX_3.4.20&#39; not found</code> 的问题, 就是gcc的版本太低, 或者是和配置的gcc的版本不一致。</p>\n<h3 id=\"编译ycm-core\"><a href=\"#编译ycm-core\" class=\"headerlink\" title=\"编译ycm_core\"></a>编译ycm_core</h3><p>现在准备工作算是完成了, 现在开始正式开始编译ycm_core</p>\n<p>生成makefile文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir ycm_build</span><br><span class=\"line\">cd ycm_build</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 这里PATH_TO_LLVM_ROOT的路径应该是你的llvm的build的路径</span></span><br><span class=\"line\">cmake -G &quot;Unix Makefiles&quot; -DPATH_TO_LLVM_ROOT=~/ycm_temp/llvm_root_dir . ~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp</span><br></pre></td></tr></table></figure>\n\n<p>这里我遇到了无法找到Boost路径的问题, 直接安装一下就好了:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install libboost-all-dev</span><br></pre></td></tr></table></figure>\n\n<p>编译makefile</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 将clang-c复制到ycm插件中</span></span><br><span class=\"line\">cp -r  ~/programmingTools/llvm/llvm/tools/clang/include/clang-c ~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/ClangCompleter/</span><br><span class=\"line\">cmake --build . --target ycm_core --config Release</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"编辑ycm的配置文件\"><a href=\"#编辑ycm的配置文件\" class=\"headerlink\" title=\"编辑ycm的配置文件\"></a>编辑ycm的配置文件</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp ~/.vim/bundle/YouCompleteMe/third_party/ycmd/examples/.ycm_extra_conf.py ~/</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"配置-ycm-的补全库\"><a href=\"#配置-ycm-的补全库\" class=\"headerlink\" title=\"配置 ycm 的补全库\"></a>配置 ycm 的补全库</h1><p>编写vimrc中指定的.ycm_extra_conf.py, 添加需要显示的库:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flags = [</span><br><span class=\"line\">`-isystem`,</span><br><span class=\"line\">`/usr/include/c++/8`</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p><code>-isystem</code>代表自己添加的库。</p>\n<h1 id=\"2021-03-27更新\"><a href=\"#2021-03-27更新\" class=\"headerlink\" title=\"2021.03.27更新\"></a>2021.03.27更新</h1><p>今天重新在archlinux上安装了ycm插件, 这次直接使用plug-vim插件管理工具来安装</p>\n<p>vimrc:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">call plug#begin (&#x27;~/.vim/plugged&#x27;)</span><br><span class=\"line\">Plug &#x27;Valloric/YouCompleteMe&#x27;</span><br><span class=\"line\">call plug#end ()</span><br></pre></td></tr></table></figure>\n\n<p>在vim中执行 <code>:PlugInstall</code>, 安装插件。</p>\n<p>使用pacman安装所需要的工具:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S gcc python3</span><br></pre></td></tr></table></figure>\n\n<p>在 <code>~/.vim/plugged</code> 中找到 <code>YouCompleteMe</code> 文件, 执行<code>./install.sh --all</code> 来对ycm插件编译, 在使用的时候遇到了无法<code>libtinfo.so.5 not found</code>, google了一天, 解决方案是安装 <code>ncurses5-compat-libs</code>(这个是arch的解决方案, 其他的linux发行版本应该是ncurses5)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir ~/pkg &amp;&amp; cd ~/pkg</span><br><span class=\"line\">git clone https://aur.archlinux.org/ncurses5-compat-libs.git</span><br><span class=\"line\">cd ncurses5-compat-libs</span><br><span class=\"line\">makepkg -s -A</span><br><span class=\"line\">sudo pacman -U ncurses5-compat-libs-6.2-1-armv7h.pkg.tar.xz</span><br></pre></td></tr></table></figure>\n\n<p>ok, libtinfo.so.5 这个问题解决了, 还有一个问题是java不能自动补全。原因是因为<code>eclipse.jdt.ls</code>只支持jdk11, 甚至jdk12都不行, 所以需要安装:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S jdk-openjdk11</span><br><span class=\"line\"># 切换jdk</span><br><span class=\"line\">sudo archlinux-java java-11-openjdk</span><br><span class=\"line\"># 在目录/usr/lib/jvm/下放着所有通过pacman安装的jdk版本</span><br></pre></td></tr></table></figure>\n\n<p>ok, 现在在<code>~/.vim/plugged/YouCompleteMe</code>目录下执行<code>./install.sh --all</code>, 应该就什么问题都没有了。</p>\n<h1 id=\"以下是我参考的所有博客和帖子\"><a href=\"#以下是我参考的所有博客和帖子\" class=\"headerlink\" title=\"以下是我参考的所有博客和帖子:\"></a>以下是我参考的所有博客和帖子:</h1><p><a href=\"https://www.cnblogs.com/zzqcn/p/4660615.html\">【vim】插件管理及代码智能提示与补全环境的配置</a><br><a href=\"https://www.zybuluo.com/searcher2xiao/note/136156\">CentOS 7 + vim + ycm (clang) + NERDTree</a><br><a href=\"https://www.jianshu.com/p/c24f919097b3\">VIM、YouCompleteMe折腾配置以及clang+llvm编译安装</a><br><a href=\"https://www.cnblogs.com/lavezhang/p/7227777.html\">centos升级vim</a><br><a href=\"https://blog.csdn.net/uu203/article/details/82621523\">CentOS7解决YouCompleteMe对Python的依赖</a><br><a href=\"https://blog.csdn.net/l2563898960/article/details/82871826\">安装LLVM+Clang教程</a><br><a href=\"https://blog.csdn.net/jiang_xinxing/article/details/77945478\">Centos7安装高版本Cmake</a><br><a href=\"https://www.jianshu.com/p/8ac4e50d182d\">Centos升级gcc至5.4.0</a><br><a href=\"https://blog.csdn.net/zhaojianting/article/details/81095120\">centOS系统gcc升级步骤(亲自测试成功)</a><br><a href=\"https://www.jianshu.com/p/f0b28fb4661d\">CentOS下gcc4.9编译安装教程</a><br><a href=\"https://superuser.com/questions/927512/how-to-set-path-for-sudo-commands\">How to set path for sudo commands</a><br><a href=\"https://blog.csdn.net/haohaibo031113/article/details/72833327\">CMake 指定gcc编译版本</a><br><a href=\"https://blog.csdn.net/qq_36416904/article/details/79316972\">关于在centos下安装python3.7.0以上版本时报错ModuleNotFoundError: No module named ‘_ctypes’的解决办法</a><br><a href=\"https://blog.csdn.net/leaf5022/article/details/21290509#comments\">Vim智能补全插件YouCompleteMe安装</a><br><a href=\"http://www.nagain.com/activity/article/4/\">llvm之旅第一站 － 编译及简单使用</a><br><a href=\"https://blog.csdn.net/zhang14916/article/details/89288196\">Getting Started with the LLVM System</a><br><a href=\"https://www.cnblogs.com/wx7217242/articles/4684530.html\">gRPC编译- version <code>GLIBCXX_3.4.20&#39; not found 问题](https://blog.csdn.net/weixin_34365417/article/details/86870934) [CentOS 6.4(64位)上安装错误libstdc++.so.6(GLIBCXX_3.4.14)解决办法](https://blog.csdn.net/lqzixi/article/details/24738337) [linux下提示/usr/lib64/libstdc++.so.6: version </code>GLIBCXX_3.4.14’ not found 解决办法</a><br><a href=\"http://www.bubuko.com/infodetail-1978493.html\">Linux C&#x2F;C++程序员CentOS 6.5安装YouCompleteMe使用vim语法自动补全</a> 这个比较全!<br><a href=\"https://www.cnblogs.com/linuxprobe/p/5926821.html\">10款优秀Vim插件帮你打造完美IDE</a></p>"},{"title":"springboot jpa update操作时报 Not supported for DML operations","date":"2019-05-16T15:27:08.000Z","_content":"\n# 问题\n\n在使用jpa进行update操作时, 报Not supported for DML operations 错误\n<!--more-->\n\n# 解决办法\n\n在`@query`注解上再加一个`@Modifying`注解和`@Transactional`注解。\n","source":"_posts/back_skill_experience/java/spring/springboot/jpa/springboot-jpa-update-Not-supported-for-DML-operations.md","raw":"---\ntitle: springboot jpa update操作时报 Not supported for DML operations\ndate: 2019-05-16 23:27:08\ncategories:\n- 后端技巧/经验\n- java\ntags:\n- 踩坑\n- java\n- jpa\n---\n\n# 问题\n\n在使用jpa进行update操作时, 报Not supported for DML operations 错误\n<!--more-->\n\n# 解决办法\n\n在`@query`注解上再加一个`@Modifying`注解和`@Transactional`注解。\n","slug":"back_skill_experience/java/spring/springboot/jpa/springboot-jpa-update-Not-supported-for-DML-operations","published":1,"updated":"2022-10-03T02:24:32.529Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ylek1800bg3vsbaqhv3dv2","content":"<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>在使用jpa进行update操作时, 报Not supported for DML operations 错误</p>\n<span id=\"more\"></span>\n\n<h1 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h1><p>在<code>@query</code>注解上再加一个<code>@Modifying</code>注解和<code>@Transactional</code>注解。</p>\n","site":{"data":{"styles":".content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\nbody {\n  background: url(\"/images/yourbackground.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n"}},"excerpt":"<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>在使用jpa进行update操作时, 报Not supported for DML operations 错误</p>","more":"<h1 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h1><p>在<code>@query</code>注解上再加一个<code>@Modifying</code>注解和<code>@Transactional</code>注解。</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cl8ylejhq00023vsb6q5le0a4","category_id":"cl8yleji500053vsbei1o265j","_id":"cl8ylejis000f3vsbf5se6iua"},{"post_id":"cl8yleji100043vsbg8ea2qzb","category_id":"cl8ylejii000b3vsbgnwv90nc","_id":"cl8ylejj3000k3vsbf2y4b90o"},{"post_id":"cl8yleji700063vsbadgs888z","category_id":"cl8ylejit000g3vsb530zd6sh","_id":"cl8ylejjj000s3vsb4v452j6w"},{"post_id":"cl8ylejia00073vsbg3x9hn1p","category_id":"cl8ylejit000g3vsb530zd6sh","_id":"cl8ylejjr000x3vsb1u2h1996"},{"post_id":"cl8ylejil000c3vsb7oblgkau","category_id":"cl8ylejji000r3vsb6pd71p8l","_id":"cl8ylejnh002s3vsb4rxuhbtq"},{"post_id":"cl8ylejil000c3vsb7oblgkau","category_id":"cl8ylejmy002h3vsb6rxm592p","_id":"cl8ylejnm002v3vsb2inq9uhg"},{"post_id":"cl8ylejne002q3vsb3d5natiq","category_id":"cl8ylejji000r3vsb6pd71p8l","_id":"cl8ylejnt002z3vsbfqzbb1ac"},{"post_id":"cl8ylejne002q3vsb3d5natiq","category_id":"cl8ylejmy002h3vsb6rxm592p","_id":"cl8ylejnx00323vsb5jnj7lh9"},{"post_id":"cl8ylejnh002t3vsb4g7zfogv","category_id":"cl8ylejji000r3vsb6pd71p8l","_id":"cl8ylejo000353vsb5bax7ndf"},{"post_id":"cl8ylejnh002t3vsb4g7zfogv","category_id":"cl8ylejmy002h3vsb6rxm592p","_id":"cl8ylejo500383vsbh5z7besu"},{"post_id":"cl8ylejnm002w3vsb6e332q46","category_id":"cl8ylejji000r3vsb6pd71p8l","_id":"cl8ylejo9003c3vsb4fqt1aqp"},{"post_id":"cl8ylejnm002w3vsb6e332q46","category_id":"cl8ylejmy002h3vsb6rxm592p","_id":"cl8ylejoe003g3vsb5z65fuhn"},{"post_id":"cl8ylejnq002y3vsbh4wf3it5","category_id":"cl8ylejji000r3vsb6pd71p8l","_id":"cl8ylejok003k3vsb7wg021dx"},{"post_id":"cl8ylejnq002y3vsbh4wf3it5","category_id":"cl8ylejmy002h3vsb6rxm592p","_id":"cl8ylejop003o3vsb9t8p9pd2"},{"post_id":"cl8ylejny00333vsb0gzsfas8","category_id":"cl8ylejji000r3vsb6pd71p8l","_id":"cl8ylejot003q3vsbe1ag7q7w"},{"post_id":"cl8ylejny00333vsb0gzsfas8","category_id":"cl8ylejmy002h3vsb6rxm592p","_id":"cl8ylejox003t3vsbet0mdtal"},{"post_id":"cl8ylejo300373vsbbd5vdg4m","category_id":"cl8ylejji000r3vsb6pd71p8l","_id":"cl8ylejp2003x3vsb3nhgbabk"},{"post_id":"cl8ylejo300373vsbbd5vdg4m","category_id":"cl8ylejmy002h3vsb6rxm592p","_id":"cl8ylejp600413vsb9sh35i0t"},{"post_id":"cl8ylejo6003a3vsb1bf72w5t","category_id":"cl8ylejji000r3vsb6pd71p8l","_id":"cl8ylejpb00453vsbc5xy47hc"},{"post_id":"cl8ylejo6003a3vsb1bf72w5t","category_id":"cl8ylejmy002h3vsb6rxm592p","_id":"cl8ylejpf00483vsbeih6bldu"},{"post_id":"cl8ylejob003e3vsbdaae3sm0","category_id":"cl8ylejji000r3vsb6pd71p8l","_id":"cl8ylejpk004c3vsbc1mh47jh"},{"post_id":"cl8ylejob003e3vsbdaae3sm0","category_id":"cl8ylejmy002h3vsb6rxm592p","_id":"cl8ylejpq004g3vsb1pqyava0"},{"post_id":"cl8ylejiu000h3vsbb2yk6oyo","category_id":"cl8ylejk000123vsb9c8a4vai","_id":"cl8ylejpu004j3vsbbekcfdoz"},{"post_id":"cl8ylejiu000h3vsbb2yk6oyo","category_id":"cl8ylejoi003j3vsb182t7ef1","_id":"cl8ylejpy004n3vsbb3oianj5"},{"post_id":"cl8ylejiz000j3vsb8imofln6","category_id":"cl8ylejk000123vsb9c8a4vai","_id":"cl8ylejq3004q3vsbfpp11lx7"},{"post_id":"cl8ylejiz000j3vsb8imofln6","category_id":"cl8ylejoi003j3vsb182t7ef1","_id":"cl8ylejq7004u3vsbcshq0xq0"},{"post_id":"cl8ylejj9000n3vsb1wrx2wr7","category_id":"cl8ylejk000123vsb9c8a4vai","_id":"cl8ylejql00523vsb0qik0jmd"},{"post_id":"cl8ylejj9000n3vsb1wrx2wr7","category_id":"cl8ylejoi003j3vsb182t7ef1","_id":"cl8ylejqq00563vsb8g9rfnkv"},{"post_id":"cl8ylejjf000q3vsb9io2au6i","category_id":"cl8ylejk000123vsb9c8a4vai","_id":"cl8ylejrm005j3vsbdo0whwnm"},{"post_id":"cl8ylejjf000q3vsb9io2au6i","category_id":"cl8ylejoi003j3vsb182t7ef1","_id":"cl8ylejrs005n3vsb4gyw4rr9"},{"post_id":"cl8ylejjk000u3vsbbgfy2syh","category_id":"cl8ylejk000123vsb9c8a4vai","_id":"cl8ylejsr00603vsbd4l86edm"},{"post_id":"cl8ylejjk000u3vsbbgfy2syh","category_id":"cl8ylejoi003j3vsb182t7ef1","_id":"cl8ylejsv00633vsbdya24lnl"},{"post_id":"cl8ylejjn000v3vsb8iz80v8j","category_id":"cl8ylejlx001w3vsb1onxe1mg","_id":"cl8ylejtg006i3vsb3in36vtv"},{"post_id":"cl8ylejjn000v3vsb8iz80v8j","category_id":"cl8ylejsy00663vsb37s3587o","_id":"cl8ylejtl006m3vsb5mgrhvh5"},{"post_id":"cl8ylejig000a3vsbeervht6a","category_id":"cl8ylejji000r3vsb6pd71p8l","_id":"cl8yleju500703vsb2jw8cz5i"},{"post_id":"cl8ylejig000a3vsbeervht6a","category_id":"cl8ylejm800213vsb5d1p72rh","_id":"cl8ylejub00733vsb2nsh5hs3"},{"post_id":"cl8ylejig000a3vsbeervht6a","category_id":"cl8ylejtn006o3vsbfs58856r","_id":"cl8ylejuf00773vsbfwcldb63"},{"post_id":"cl8ylejjs000z3vsbe2n5hnku","category_id":"cl8ylejlx001w3vsb1onxe1mg","_id":"cl8ylejuy007i3vsb2dx03z5e"},{"post_id":"cl8ylejjs000z3vsbe2n5hnku","category_id":"cl8ylejue00763vsb08x4dio0","_id":"cl8ylejv2007k3vsb4jk32cbs"},{"post_id":"cl8ylejjw00103vsb3vv6aayc","category_id":"cl8ylejlx001w3vsb1onxe1mg","_id":"cl8ylejvn007z3vsbf92k05rn"},{"post_id":"cl8ylejjw00103vsb3vv6aayc","category_id":"cl8ylejue00763vsb08x4dio0","_id":"cl8ylejvq00823vsb3tcbcptt"},{"post_id":"cl8ylejn0002i3vsbawa2ag6w","category_id":"cl8ylejii000b3vsbgnwv90nc","_id":"cl8ylejw100893vsb2xab2xe3"},{"post_id":"cl8ylejn0002i3vsbawa2ag6w","category_id":"cl8ylejvm007y3vsbdhkucajd","_id":"cl8ylejw6008d3vsbdijxdq81"},{"post_id":"cl8ylejk100133vsba8w5b5ck","category_id":"cl8ylejlx001w3vsb1onxe1mg","_id":"cl8ylejwt008q3vsbg4fp7z10"},{"post_id":"cl8ylejk100133vsba8w5b5ck","category_id":"cl8ylejue00763vsb08x4dio0","_id":"cl8ylejwx008u3vsb5kua6edk"},{"post_id":"cl8ylejk500153vsbhs6yb3y5","category_id":"cl8ylejlx001w3vsb1onxe1mg","_id":"cl8ylejx1008x3vsbc4x2hpji"},{"post_id":"cl8ylejk500153vsbhs6yb3y5","category_id":"cl8ylejue00763vsb08x4dio0","_id":"cl8ylejx600923vsb2xdz579y"},{"post_id":"cl8ylejnu00313vsbbqow6wpe","category_id":"cl8ylejji000r3vsb6pd71p8l","_id":"cl8ylejxa00953vsbctqi9ml9"},{"post_id":"cl8ylejnu00313vsbbqow6wpe","category_id":"cl8ylejws008p3vsb90noah39","_id":"cl8ylejxf00993vsbe1wlfslm"},{"post_id":"cl8ylejip000e3vsb2rnqa7n3","category_id":"cl8ylejk000123vsb9c8a4vai","_id":"cl8ylejxi009b3vsbdjg4c9i3"},{"post_id":"cl8ylejip000e3vsb2rnqa7n3","category_id":"cl8ylejnp002x3vsb6mybepsb","_id":"cl8ylejxn009f3vsb7fwv3cd4"},{"post_id":"cl8ylejip000e3vsb2rnqa7n3","category_id":"cl8ylejx1008z3vsb8qk28m8q","_id":"cl8ylejxt009i3vsbbj7893g2"},{"post_id":"cl8ylejk900183vsbd8ue3guq","category_id":"cl8ylejlx001w3vsb1onxe1mg","_id":"cl8ylejxz009n3vsb44akcq6q"},{"post_id":"cl8ylejk900183vsbd8ue3guq","category_id":"cl8ylejxa00963vsb2hc00d4z","_id":"cl8ylejy2009p3vsbedfu7j0c"},{"post_id":"cl8ylejkg001a3vsbckwza62a","category_id":"cl8ylejlx001w3vsb1onxe1mg","_id":"cl8ylejy6009t3vsb76177d45"},{"post_id":"cl8ylejkg001a3vsbckwza62a","category_id":"cl8ylejxi009c3vsbbr105po3","_id":"cl8ylejya009w3vsb2lfabkac"},{"post_id":"cl8ylejkl001c3vsbd1915zck","category_id":"cl8ylejlx001w3vsb1onxe1mg","_id":"cl8ylejzo00aj3vsb564tc0rr"},{"post_id":"cl8ylejkl001c3vsbd1915zck","category_id":"cl8ylejxi009c3vsbbr105po3","_id":"cl8ylejzu00am3vsb91eafd4j"},{"post_id":"cl8ylejzv00ao3vsb53gf17om","category_id":"cl8ylejji000r3vsb6pd71p8l","_id":"cl8ylek0i00ax3vsbhihp4fbn"},{"post_id":"cl8ylejzv00ao3vsb53gf17om","category_id":"cl8ylejmy002h3vsb6rxm592p","_id":"cl8ylek0m00b03vsb2hgz8wh6"},{"post_id":"cl8ylejkq001f3vsbgysv8asx","category_id":"cl8ylejlx001w3vsb1onxe1mg","_id":"cl8ylek0r00b33vsbfc350avu"},{"post_id":"cl8ylejkq001f3vsbgysv8asx","category_id":"cl8ylejxi009c3vsbbr105po3","_id":"cl8ylek0v00b63vsb9q0sfgre"},{"post_id":"cl8ylejku001h3vsb802ee0ll","category_id":"cl8ylejlx001w3vsb1onxe1mg","_id":"cl8ylek1f00bm3vsb52ovbrj0"},{"post_id":"cl8ylejku001h3vsb802ee0ll","category_id":"cl8ylejxi009c3vsbbr105po3","_id":"cl8ylek1g00bn3vsbb9o994ky"},{"post_id":"cl8ylek1800bg3vsbaqhv3dv2","category_id":"cl8ylejji000r3vsb6pd71p8l","_id":"cl8ylek1h00bp3vsb3lf7hbls"},{"post_id":"cl8ylek1800bg3vsbaqhv3dv2","category_id":"cl8ylejmy002h3vsb6rxm592p","_id":"cl8ylek1k00bs3vsbcq6b188a"},{"post_id":"cl8ylejl6001l3vsbhqmlfxgw","category_id":"cl8ylejlx001w3vsb1onxe1mg","_id":"cl8ylek1n00bx3vsb698d5s8g"},{"post_id":"cl8ylejl6001l3vsbhqmlfxgw","category_id":"cl8ylejxi009c3vsbbr105po3","_id":"cl8ylek1p00c03vsbb1aidshh"},{"post_id":"cl8ylejl9001m3vsb3gvl146e","category_id":"cl8ylejqc004x3vsbgjzu4409","_id":"cl8ylek2100cf3vsb5rkggzbb"},{"post_id":"cl8ylejl9001m3vsb3gvl146e","category_id":"cl8ylek1v00c83vsbb9ar2yah","_id":"cl8ylek2600ch3vsb603acnpx"},{"post_id":"cl8ylejlg001p3vsbhjm99gui","category_id":"cl8ylejqc004x3vsbgjzu4409","_id":"cl8ylek2f00cq3vsbafs801hw"},{"post_id":"cl8ylejlg001p3vsbhjm99gui","category_id":"cl8ylek1v00c83vsbb9ar2yah","_id":"cl8ylek2i00cs3vsb6a002rw6"},{"post_id":"cl8ylejlk001r3vsb8qc0boxg","category_id":"cl8ylejrb005e3vsb5n6m80rx","_id":"cl8ylek2u00d53vsb50zv3r4o"},{"post_id":"cl8ylejlk001r3vsb8qc0boxg","category_id":"cl8ylek2p00cz3vsbhe2d6l8n","_id":"cl8ylek2w00d73vsb0j6502kw"},{"post_id":"cl8ylejlr001u3vsbevk8g3dv","category_id":"cl8ylejrb005e3vsb5n6m80rx","_id":"cl8ylek3400dh3vsb52pdebh4"},{"post_id":"cl8ylejlr001u3vsbevk8g3dv","category_id":"cl8ylek2p00cz3vsbhe2d6l8n","_id":"cl8ylek3500dj3vsb9ym2d1vd"},{"post_id":"cl8ylejlu001v3vsbcgxi7nms","category_id":"cl8ylejrb005e3vsb5n6m80rx","_id":"cl8ylek3j00dz3vsb4sgy9kyf"},{"post_id":"cl8ylejlu001v3vsbcgxi7nms","category_id":"cl8ylek3d00dr3vsbe85a53g0","_id":"cl8ylek3k00e13vsb4sps26vf"},{"post_id":"cl8ylejm3001y3vsb7b0e1ip8","category_id":"cl8ylejrb005e3vsb5n6m80rx","_id":"cl8ylek3s00ea3vsb4lcifjv8"},{"post_id":"cl8ylejm3001y3vsb7b0e1ip8","category_id":"cl8ylek3d00dr3vsbe85a53g0","_id":"cl8ylek3u00ec3vsb1dw88twc"},{"post_id":"cl8ylejm600203vsb626scbdf","category_id":"cl8ylejrb005e3vsb5n6m80rx","_id":"cl8ylek4300en3vsb9w8o1gl7"},{"post_id":"cl8ylejm600203vsb626scbdf","category_id":"cl8ylek3d00dr3vsbe85a53g0","_id":"cl8ylek4500eo3vsb5q95dpep"},{"post_id":"cl8ylejma00233vsb6wlu7on4","category_id":"cl8ylejrb005e3vsb5n6m80rx","_id":"cl8ylek4i00ey3vsb552s5y5u"},{"post_id":"cl8ylejma00233vsb6wlu7on4","category_id":"cl8ylek3d00dr3vsbe85a53g0","_id":"cl8ylek4l00f03vsb3niz0s5u"},{"post_id":"cl8ylejmf00263vsbdgbub892","category_id":"cl8ylejrb005e3vsb5n6m80rx","_id":"cl8ylek5100ff3vsbfvq098ta"},{"post_id":"cl8ylejmf00263vsbdgbub892","category_id":"cl8ylek3d00dr3vsbe85a53g0","_id":"cl8ylek5300fh3vsbbawlc5z0"},{"post_id":"cl8ylejmj00283vsbgpwi7gwn","category_id":"cl8ylejrb005e3vsb5n6m80rx","_id":"cl8ylek5b00fq3vsbcuyq3hzq"},{"post_id":"cl8ylejmj00283vsbgpwi7gwn","category_id":"cl8ylek3d00dr3vsbe85a53g0","_id":"cl8ylek5d00fs3vsbbz0f6av3"},{"post_id":"cl8ylejmn002b3vsbd72d10k9","category_id":"cl8ylejrb005e3vsb5n6m80rx","_id":"cl8ylek5r00g63vsb067k56wb"},{"post_id":"cl8ylejmn002b3vsbd72d10k9","category_id":"cl8ylek3d00dr3vsbe85a53g0","_id":"cl8ylek5s00g83vsb2cuvhnw8"},{"post_id":"cl8ylejmr002d3vsb00tf0uxo","category_id":"cl8ylejrb005e3vsb5n6m80rx","_id":"cl8ylek6000gh3vsb5dq01m87"},{"post_id":"cl8ylejmr002d3vsb00tf0uxo","category_id":"cl8ylek3d00dr3vsbe85a53g0","_id":"cl8ylek6200gk3vsbe6vnfxvp"},{"post_id":"cl8ylejmw002g3vsb4k12ce0s","category_id":"cl8ylejrb005e3vsb5n6m80rx","_id":"cl8ylek6j00h03vsbgzuh00vp"},{"post_id":"cl8ylejmw002g3vsb4k12ce0s","category_id":"cl8ylek3d00dr3vsbe85a53g0","_id":"cl8ylek6k00h13vsbch58gtee"},{"post_id":"cl8ylejn4002l3vsb5ddt572r","category_id":"cl8ylejvu00853vsbcsjc1ew3","_id":"cl8ylek6z00hj3vsb1idhcbni"},{"post_id":"cl8ylejn4002l3vsb5ddt572r","category_id":"cl8ylek6u00hc3vsbf0vvavpj","_id":"cl8ylek7000hk3vsbfg91h1il"},{"post_id":"cl8ylejn7002n3vsb93yb6oy3","category_id":"cl8ylejvu00853vsbcsjc1ew3","_id":"cl8ylek7800hs3vsbbgw53bjb"},{"post_id":"cl8ylejn7002n3vsb93yb6oy3","category_id":"cl8ylek6u00hc3vsbf0vvavpj","_id":"cl8ylek7b00hv3vsbb3j69hs7"},{"post_id":"cl8ylek0200ar3vsb4hj98gqe","category_id":"cl8ylejji000r3vsb6pd71p8l","_id":"cl8ylekan00kn3vsbdkboce9b"},{"post_id":"cl8ylek0200ar3vsb4hj98gqe","category_id":"cl8ylejmy002h3vsb6rxm592p","_id":"cl8ylekap00kp3vsb8syz7c2j"},{"post_id":"cl8ylek0200ar3vsb4hj98gqe","category_id":"cl8yleka600kg3vsbfx6m1zr9","_id":"cl8ylekar00ks3vsbh5ie26hs"},{"post_id":"cl8ylek0600au3vsb7zgsgexh","category_id":"cl8ylejji000r3vsb6pd71p8l","_id":"cl8ylekat00kv3vsba1o20gtt"},{"post_id":"cl8ylek0600au3vsb7zgsgexh","category_id":"cl8ylejmy002h3vsb6rxm592p","_id":"cl8ylekav00ky3vsb8q1ydoye"},{"post_id":"cl8ylek0600au3vsb7zgsgexh","category_id":"cl8yleka600kg3vsbfx6m1zr9","_id":"cl8ylekax00l03vsbat655eqe"},{"post_id":"cl8ylek0f00aw3vsb8rx3ha15","category_id":"cl8ylejji000r3vsb6pd71p8l","_id":"cl8ylekaz00l23vsb6c8s28ax"},{"post_id":"cl8ylek0f00aw3vsb8rx3ha15","category_id":"cl8ylejmy002h3vsb6rxm592p","_id":"cl8ylekb100l43vsbgodf8ens"},{"post_id":"cl8ylek0f00aw3vsb8rx3ha15","category_id":"cl8yleka600kg3vsbfx6m1zr9","_id":"cl8ylekb300l73vsb7g0u3u8u"},{"post_id":"cl8ylejp800433vsb66i926ji","category_id":"cl8ylejxw009l3vsb4u862s7y","_id":"cl8ylekb400la3vsb24xu8va1"},{"post_id":"cl8ylejp800433vsb66i926ji","category_id":"cl8ylek8j00iy3vsbb9esfdbi","_id":"cl8ylekb500lc3vsb79tj80ey"},{"post_id":"cl8ylek0k00az3vsbc1a96pp9","category_id":"cl8ylejji000r3vsb6pd71p8l","_id":"cl8ylekb800lf3vsb5gid9md1"},{"post_id":"cl8ylek0k00az3vsbc1a96pp9","category_id":"cl8ylejmy002h3vsb6rxm592p","_id":"cl8ylekb800lg3vsbf2f5486j"},{"post_id":"cl8ylek0k00az3vsbc1a96pp9","category_id":"cl8yleka600kg3vsbfx6m1zr9","_id":"cl8ylekbb00lj3vsb14vi9tm4"},{"post_id":"cl8ylek0o00b23vsb4reg6wpg","category_id":"cl8ylejji000r3vsb6pd71p8l","_id":"cl8ylekbc00ll3vsbe5gkd6r3"},{"post_id":"cl8ylek0o00b23vsb4reg6wpg","category_id":"cl8ylejmy002h3vsb6rxm592p","_id":"cl8ylekbf00lp3vsb0ipcfxcv"},{"post_id":"cl8ylek0o00b23vsb4reg6wpg","category_id":"cl8yleka600kg3vsbfx6m1zr9","_id":"cl8ylekbf00lr3vsb5789225i"},{"post_id":"cl8ylejpd00473vsb4pxu8hga","category_id":"cl8ylejxw009l3vsb4u862s7y","_id":"cl8ylekbi00lu3vsb334iauwv"},{"post_id":"cl8ylejpd00473vsb4pxu8hga","category_id":"cl8ylekb200l63vsb1pfp76pq","_id":"cl8ylekbj00lv3vsb2i6qbv9m"},{"post_id":"cl8ylek0s00b53vsbe1st7v32","category_id":"cl8ylejji000r3vsb6pd71p8l","_id":"cl8ylekbl00ly3vsb9wmy3s72"},{"post_id":"cl8ylek0s00b53vsbe1st7v32","category_id":"cl8ylejmy002h3vsb6rxm592p","_id":"cl8ylekbm00m03vsb7yctfbnj"},{"post_id":"cl8ylek0s00b53vsbe1st7v32","category_id":"cl8yleka600kg3vsbfx6m1zr9","_id":"cl8ylekbp00m43vsba6947nhh"},{"post_id":"cl8ylek0x00b93vsb02b42uos","category_id":"cl8ylejji000r3vsb6pd71p8l","_id":"cl8ylekbp00m63vsb1lr732ee"},{"post_id":"cl8ylek0x00b93vsb02b42uos","category_id":"cl8ylejmy002h3vsb6rxm592p","_id":"cl8ylekbs00m93vsba49p1j21"},{"post_id":"cl8ylek0x00b93vsb02b42uos","category_id":"cl8yleka600kg3vsbfx6m1zr9","_id":"cl8ylekbs00ma3vsb6ug32ldd"},{"post_id":"cl8ylejpn004f3vsb7v7d63q8","category_id":"cl8ylejxw009l3vsb4u862s7y","_id":"cl8ylekbv00md3vsb5v73f9yc"},{"post_id":"cl8ylejpn004f3vsb7v7d63q8","category_id":"cl8ylekb200l63vsb1pfp76pq","_id":"cl8ylekbw00mf3vsb30etc7rd"},{"post_id":"cl8ylek1000bc3vsbfalmcvz7","category_id":"cl8ylejji000r3vsb6pd71p8l","_id":"cl8ylekbz00mj3vsb9yc14whw"},{"post_id":"cl8ylek1000bc3vsbfalmcvz7","category_id":"cl8ylejmy002h3vsb6rxm592p","_id":"cl8ylekbz00ml3vsb68z38e8t"},{"post_id":"cl8ylek1000bc3vsbfalmcvz7","category_id":"cl8yleka600kg3vsbfx6m1zr9","_id":"cl8ylekc200mo3vsbcztg1v0j"},{"post_id":"cl8ylejpr004i3vsb39kt32hi","category_id":"cl8ylejxw009l3vsb4u862s7y","_id":"cl8ylekc200mp3vsb5hk49pj6"},{"post_id":"cl8ylejpr004i3vsb39kt32hi","category_id":"cl8ylekb200l63vsb1pfp76pq","_id":"cl8ylekc500ms3vsb32f73cor"},{"post_id":"cl8ylejsr00613vsb83y46oc9","category_id":"cl8ylejxw009l3vsb4u862s7y","_id":"cl8ylekdf00o23vsb2abi8n7m"},{"post_id":"cl8ylejsr00613vsb83y46oc9","category_id":"cl8ylekd800nw3vsbh8xqg8de","_id":"cl8ylekdg00o43vsb0q0hh7bt"},{"post_id":"cl8ylejvy00883vsb01r68rrg","category_id":"cl8ylek5x00ge3vsbh51g2xmw","_id":"cl8ylekfz00qd3vsbgv8k578x"},{"post_id":"cl8ylejvy00883vsb01r68rrg","category_id":"cl8ylekfp00q63vsb2nkb6oh8","_id":"cl8ylekg100qg3vsb8bzdgyyn"},{"post_id":"cl8ylejog003i3vsbbcxq0avj","category_id":"cl8ylejxw009l3vsb4u862s7y","_id":"cl8ylekho00s43vsbd5lfcw43"},{"post_id":"cl8ylejog003i3vsbbcxq0avj","category_id":"cl8ylek8j00iy3vsbb9esfdbi","_id":"cl8ylekhp00s63vsb5vqf7g3i"},{"post_id":"cl8ylejog003i3vsbbcxq0avj","category_id":"cl8ylekhi00rz3vsb908kf8xr","_id":"cl8ylekhr00s93vsb8yvtflfc"},{"post_id":"cl8ylejom003m3vsbgke45yht","category_id":"cl8ylejxw009l3vsb4u862s7y","_id":"cl8ylekhv00sh3vsb92fe7ed3"},{"post_id":"cl8ylejom003m3vsbgke45yht","category_id":"cl8ylek8j00iy3vsbb9esfdbi","_id":"cl8ylekhw00si3vsb195sdl78"},{"post_id":"cl8ylejom003m3vsbgke45yht","category_id":"cl8ylekhq00s83vsb2itb17r2","_id":"cl8ylekhx00sk3vsb226gamrv"},{"post_id":"cl8ylejoq003p3vsb18qu9u7f","category_id":"cl8ylejxw009l3vsb4u862s7y","_id":"cl8yleki000sn3vsb8btb03zt"},{"post_id":"cl8ylejoq003p3vsb18qu9u7f","category_id":"cl8ylek8j00iy3vsbb9esfdbi","_id":"cl8yleki100so3vsb00bi5hva"},{"post_id":"cl8ylejoq003p3vsb18qu9u7f","category_id":"cl8ylekhw00sj3vsb2swx4vus","_id":"cl8yleki400sq3vsbfx1ecvq2"},{"post_id":"cl8ylejov003s3vsbh52x7aae","category_id":"cl8ylejxw009l3vsb4u862s7y","_id":"cl8yleki800st3vsb5lmvfxzn"},{"post_id":"cl8ylejov003s3vsbh52x7aae","category_id":"cl8ylek8j00iy3vsbb9esfdbi","_id":"cl8yleki900su3vsb5y3lgqdy"},{"post_id":"cl8ylejov003s3vsbh52x7aae","category_id":"cl8ylekhw00sj3vsb2swx4vus","_id":"cl8ylekia00sw3vsbdwfx0oi9"},{"post_id":"cl8ylejoz003v3vsbbh6q8xaa","category_id":"cl8ylejxw009l3vsb4u862s7y","_id":"cl8ylekii00t13vsb91ofhvrd"},{"post_id":"cl8ylejoz003v3vsbbh6q8xaa","category_id":"cl8ylek8j00iy3vsbb9esfdbi","_id":"cl8ylekij00t23vsb89b44k8q"},{"post_id":"cl8ylejoz003v3vsbbh6q8xaa","category_id":"cl8ylekhw00sj3vsb2swx4vus","_id":"cl8ylekik00t43vsb2lepbn20"},{"post_id":"cl8ylejp4003z3vsbff644u6z","category_id":"cl8ylejxw009l3vsb4u862s7y","_id":"cl8ylekim00t63vsbh1r5epoj"},{"post_id":"cl8ylejp4003z3vsbff644u6z","category_id":"cl8ylek8j00iy3vsbb9esfdbi","_id":"cl8ylekin00t83vsb4ksne6ls"},{"post_id":"cl8ylejp4003z3vsbff644u6z","category_id":"cl8ylekhw00sj3vsb2swx4vus","_id":"cl8ylekio00t93vsbbpabdhvl"},{"post_id":"cl8ylek1500bf3vsbal7jdmnq","category_id":"cl8ylejxw009l3vsb4u862s7y","_id":"cl8ylekip00tb3vsb0f1g805b"},{"post_id":"cl8ylek1500bf3vsbal7jdmnq","category_id":"cl8ylekbj00lw3vsbhk3b11z8","_id":"cl8ylekiq00tc3vsbe33kajqh"},{"post_id":"cl8ylek1500bf3vsbal7jdmnq","category_id":"cl8ylekil00t53vsb5p27ghs9","_id":"cl8ylekir00te3vsbcn039raj"},{"post_id":"cl8ylejpw004m3vsb8ktbdouk","category_id":"cl8ylejxw009l3vsb4u862s7y","_id":"cl8ylekir00tf3vsbaic2ghkn"},{"post_id":"cl8ylejpw004m3vsb8ktbdouk","category_id":"cl8ylekb200l63vsb1pfp76pq","_id":"cl8ylekit00th3vsb532u7h98"},{"post_id":"cl8ylejpw004m3vsb8ktbdouk","category_id":"cl8ylekin00t73vsb0zy3d6em","_id":"cl8ylekiu00ti3vsb4ah8a16x"},{"post_id":"cl8ylejpz004p3vsb4sx2ckp7","category_id":"cl8ylejxw009l3vsb4u862s7y","_id":"cl8ylekiw00tk3vsb70vh9l0f"},{"post_id":"cl8ylejpz004p3vsb4sx2ckp7","category_id":"cl8ylekbt00mc3vsbhqnph7vg","_id":"cl8ylekiw00tl3vsbdomg09lx"},{"post_id":"cl8ylejpz004p3vsb4sx2ckp7","category_id":"cl8ylekio00ta3vsbcgkw88c7","_id":"cl8ylekiy00tn3vsb617436bj"},{"post_id":"cl8ylejq5004t3vsb7g8q0ocb","category_id":"cl8ylejxw009l3vsb4u862s7y","_id":"cl8ylekiy00to3vsbcuncgzvh"},{"post_id":"cl8ylejq5004t3vsb7g8q0ocb","category_id":"cl8ylekbj00lw3vsbhk3b11z8","_id":"cl8ylekj300tq3vsb152bdygf"},{"post_id":"cl8ylejq5004t3vsb7g8q0ocb","category_id":"cl8ylekil00t53vsb5p27ghs9","_id":"cl8ylekj300tr3vsb7zvhgb0g"},{"post_id":"cl8ylejq9004w3vsbalx96toq","category_id":"cl8ylejxw009l3vsb4u862s7y","_id":"cl8ylekj600tt3vsbd4jkdwp2"},{"post_id":"cl8ylejq9004w3vsbalx96toq","category_id":"cl8ylekbj00lw3vsbhk3b11z8","_id":"cl8ylekj600tu3vsbbxdp3d92"},{"post_id":"cl8ylejq9004w3vsbalx96toq","category_id":"cl8ylekil00t53vsb5p27ghs9","_id":"cl8ylekj900tw3vsbhb413i73"},{"post_id":"cl8ylejqe004z3vsba842drl4","category_id":"cl8ylejxw009l3vsb4u862s7y","_id":"cl8ylekj900tx3vsbb2eo3rwz"},{"post_id":"cl8ylejqe004z3vsba842drl4","category_id":"cl8ylekbj00lw3vsbhk3b11z8","_id":"cl8ylekjb00tz3vsb53dk24c1"},{"post_id":"cl8ylejqe004z3vsba842drl4","category_id":"cl8ylekil00t53vsb5p27ghs9","_id":"cl8ylekjc00u03vsbh5zhfxtx"},{"post_id":"cl8ylejqi00513vsb7mi51h9m","category_id":"cl8ylejxw009l3vsb4u862s7y","_id":"cl8ylekje00u23vsb2vg2eeux"},{"post_id":"cl8ylejqi00513vsb7mi51h9m","category_id":"cl8ylekbj00lw3vsbhk3b11z8","_id":"cl8ylekjf00u33vsbcybmaxtw"},{"post_id":"cl8ylejqi00513vsb7mi51h9m","category_id":"cl8ylekil00t53vsb5p27ghs9","_id":"cl8ylekjh00u53vsb6gv14e8v"},{"post_id":"cl8ylejqn00553vsb7hcr5zeg","category_id":"cl8ylejxw009l3vsb4u862s7y","_id":"cl8ylekji00u63vsb1pbpebp2"},{"post_id":"cl8ylejqn00553vsb7hcr5zeg","category_id":"cl8ylekbj00lw3vsbhk3b11z8","_id":"cl8ylekjk00u83vsb1cs6gyby"},{"post_id":"cl8ylejqn00553vsb7hcr5zeg","category_id":"cl8ylekil00t53vsb5p27ghs9","_id":"cl8ylekjl00u93vsbcvbbaq9y"},{"post_id":"cl8ylejqv00583vsb04ea6rw8","category_id":"cl8ylejxw009l3vsb4u862s7y","_id":"cl8ylekjn00ub3vsb1xw4ea47"},{"post_id":"cl8ylejqv00583vsb04ea6rw8","category_id":"cl8ylekbj00lw3vsbhk3b11z8","_id":"cl8ylekjo00uc3vsbclm50g56"},{"post_id":"cl8ylejqv00583vsb04ea6rw8","category_id":"cl8ylekil00t53vsb5p27ghs9","_id":"cl8ylekjq00ue3vsbcp3d4ahb"},{"post_id":"cl8ylejr8005d3vsb0ddn4xrq","category_id":"cl8ylejxw009l3vsb4u862s7y","_id":"cl8ylekjq00uf3vsb8ct62lni"},{"post_id":"cl8ylejr8005d3vsb0ddn4xrq","category_id":"cl8ylekbj00lw3vsbhk3b11z8","_id":"cl8ylekjs00uh3vsbcufd30ta"},{"post_id":"cl8ylejr8005d3vsb0ddn4xrq","category_id":"cl8ylekil00t53vsb5p27ghs9","_id":"cl8ylekjs00ui3vsbdtwiaxc5"},{"post_id":"cl8ylejrd005g3vsbe49090y2","category_id":"cl8ylejxw009l3vsb4u862s7y","_id":"cl8ylekju00uk3vsb7jjv6vvs"},{"post_id":"cl8ylejrd005g3vsbe49090y2","category_id":"cl8ylekbj00lw3vsbhk3b11z8","_id":"cl8ylekju00ul3vsb2gv6hfq9"},{"post_id":"cl8ylejrd005g3vsbe49090y2","category_id":"cl8ylekil00t53vsb5p27ghs9","_id":"cl8ylekjw00un3vsbh4kw2o91"},{"post_id":"cl8ylejrh005h3vsb1edd6s42","category_id":"cl8ylejxw009l3vsb4u862s7y","_id":"cl8ylekjw00uo3vsb9i4wd6jt"},{"post_id":"cl8ylejrh005h3vsb1edd6s42","category_id":"cl8ylekbj00lw3vsbhk3b11z8","_id":"cl8ylekjy00uq3vsb237t8c2j"},{"post_id":"cl8ylejrh005h3vsb1edd6s42","category_id":"cl8ylekil00t53vsb5p27ghs9","_id":"cl8ylekjy00ur3vsbgi9ehb7u"},{"post_id":"cl8ylejro005m3vsb6qij014f","category_id":"cl8ylejxw009l3vsb4u862s7y","_id":"cl8ylekjz00us3vsb9abu013k"},{"post_id":"cl8ylejro005m3vsb6qij014f","category_id":"cl8ylekbj00lw3vsbhk3b11z8","_id":"cl8ylekk000uu3vsbafcu1iw5"},{"post_id":"cl8ylejro005m3vsb6qij014f","category_id":"cl8ylekil00t53vsb5p27ghs9","_id":"cl8ylekk100uv3vsb08zr181d"},{"post_id":"cl8ylejrt005o3vsb69lx35m0","category_id":"cl8ylejxw009l3vsb4u862s7y","_id":"cl8ylekk200ux3vsbgojw9vk2"},{"post_id":"cl8ylejrt005o3vsb69lx35m0","category_id":"cl8ylekbj00lw3vsbhk3b11z8","_id":"cl8ylekk300uy3vsb9asw0afi"},{"post_id":"cl8ylejrt005o3vsb69lx35m0","category_id":"cl8ylekil00t53vsb5p27ghs9","_id":"cl8ylekk500v03vsbe3vb28kg"},{"post_id":"cl8ylejry005s3vsb9m1043q6","category_id":"cl8ylejxw009l3vsb4u862s7y","_id":"cl8ylekk500v13vsb6a215yfc"},{"post_id":"cl8ylejry005s3vsb9m1043q6","category_id":"cl8ylekbj00lw3vsbhk3b11z8","_id":"cl8ylekk700v33vsbhz4x3xxs"},{"post_id":"cl8ylejry005s3vsb9m1043q6","category_id":"cl8ylekil00t53vsb5p27ghs9","_id":"cl8ylekk800v43vsb7hg67ann"},{"post_id":"cl8ylejs2005t3vsb7vt565k3","category_id":"cl8ylejxw009l3vsb4u862s7y","_id":"cl8ylekk900v63vsb9zzi0uxh"},{"post_id":"cl8ylejs2005t3vsb7vt565k3","category_id":"cl8ylekbj00lw3vsbhk3b11z8","_id":"cl8ylekka00v73vsb6g6r8lhd"},{"post_id":"cl8ylejs2005t3vsb7vt565k3","category_id":"cl8ylekil00t53vsb5p27ghs9","_id":"cl8ylekkc00v93vsbaasl4ymu"},{"post_id":"cl8ylejs6005w3vsb9d1dened","category_id":"cl8ylejxw009l3vsb4u862s7y","_id":"cl8ylekkc00va3vsb20utcpia"},{"post_id":"cl8ylejs6005w3vsb9d1dened","category_id":"cl8ylekbj00lw3vsbhk3b11z8","_id":"cl8ylekke00vc3vsba2a4gqd1"},{"post_id":"cl8ylejs6005w3vsb9d1dened","category_id":"cl8ylekil00t53vsb5p27ghs9","_id":"cl8ylekkf00vd3vsb7f3efikv"},{"post_id":"cl8ylejs9005x3vsb8ru22lx0","category_id":"cl8ylejxw009l3vsb4u862s7y","_id":"cl8ylekkg00vf3vsbcftl1jks"},{"post_id":"cl8ylejs9005x3vsb8ru22lx0","category_id":"cl8ylekbj00lw3vsbhk3b11z8","_id":"cl8ylekkh00vg3vsb7h945jlp"},{"post_id":"cl8ylejs9005x3vsb8ru22lx0","category_id":"cl8ylekil00t53vsb5p27ghs9","_id":"cl8ylekkj00vi3vsbh0hwbeeh"},{"post_id":"cl8ylejsv00643vsb46l80ws8","category_id":"cl8ylejxw009l3vsb4u862s7y","_id":"cl8ylekkj00vj3vsbh0sv7wus"},{"post_id":"cl8ylejsv00643vsb46l80ws8","category_id":"cl8ylekbj00lw3vsbhk3b11z8","_id":"cl8ylekkl00vl3vsb3ytt1x1q"},{"post_id":"cl8ylejsv00643vsb46l80ws8","category_id":"cl8ylekjv00um3vsb8wag59tf","_id":"cl8ylekkm00vm3vsb91i188yp"},{"post_id":"cl8ylejsz00683vsbb9m0a6et","category_id":"cl8ylejxw009l3vsb4u862s7y","_id":"cl8ylekkn00vo3vsb3wwecxfh"},{"post_id":"cl8ylejsz00683vsbb9m0a6et","category_id":"cl8ylekbj00lw3vsbhk3b11z8","_id":"cl8ylekko00vp3vsbfzs58mm9"},{"post_id":"cl8ylejsz00683vsbb9m0a6et","category_id":"cl8ylekjx00up3vsbdcwjgkkr","_id":"cl8ylekkq00vr3vsb8e7u5eqf"},{"post_id":"cl8ylejt300693vsb9sjg33f2","category_id":"cl8ylejxw009l3vsb4u862s7y","_id":"cl8ylekkq00vs3vsb9htccbh8"},{"post_id":"cl8ylejt300693vsb9sjg33f2","category_id":"cl8ylekbj00lw3vsbhk3b11z8","_id":"cl8ylekks00vu3vsbgi2i9lij"},{"post_id":"cl8ylejt300693vsb9sjg33f2","category_id":"cl8ylekjx00up3vsbdcwjgkkr","_id":"cl8ylekkt00vv3vsb52uh5inp"},{"post_id":"cl8ylejta006e3vsb4u4f9k5r","category_id":"cl8ylek3v00ee3vsbgprk8u4s","_id":"cl8ylekku00vx3vsbbgs6getp"},{"post_id":"cl8ylejta006e3vsb4u4f9k5r","category_id":"cl8ylekdl00oa3vsbfrfg44xm","_id":"cl8ylekkv00vy3vsbdzle2367"},{"post_id":"cl8ylejta006e3vsb4u4f9k5r","category_id":"cl8ylekk100uw3vsbelab70m8","_id":"cl8ylekkw00w03vsbbwwyeyjs"},{"post_id":"cl8ylejtd006g3vsbdiwt8f2e","category_id":"cl8ylek3v00ee3vsbgprk8u4s","_id":"cl8ylekkw00w13vsb59tl337t"},{"post_id":"cl8ylejtd006g3vsbdiwt8f2e","category_id":"cl8ylekdl00oa3vsbfrfg44xm","_id":"cl8ylekky00w33vsb866hak64"},{"post_id":"cl8ylejtd006g3vsbdiwt8f2e","category_id":"cl8ylekk100uw3vsbelab70m8","_id":"cl8ylekky00w43vsbewee38q6"},{"post_id":"cl8ylejtj006l3vsb6el6a3oa","category_id":"cl8ylek3v00ee3vsbgprk8u4s","_id":"cl8ylekkz00w53vsbb1iy0z03"},{"post_id":"cl8ylejtj006l3vsb6el6a3oa","category_id":"cl8ylekdl00oa3vsbfrfg44xm","_id":"cl8ylekl000w73vsb51jeadcv"},{"post_id":"cl8ylejtj006l3vsb6el6a3oa","category_id":"cl8ylekk100uw3vsbelab70m8","_id":"cl8ylekl100w83vsb3f0pf6fp"},{"post_id":"cl8ylejtl006n3vsb3a3z4p95","category_id":"cl8ylek3v00ee3vsbgprk8u4s","_id":"cl8ylekl200wa3vsbfimf8n0i"},{"post_id":"cl8ylejtl006n3vsb3a3z4p95","category_id":"cl8ylekdl00oa3vsbfrfg44xm","_id":"cl8ylekl300wb3vsbgmkreypl"},{"post_id":"cl8ylejtl006n3vsb3a3z4p95","category_id":"cl8ylekk100uw3vsbelab70m8","_id":"cl8ylekl500wd3vsbfg5i6010"},{"post_id":"cl8ylejtr006r3vsbabcf3bbj","category_id":"cl8ylek3v00ee3vsbgprk8u4s","_id":"cl8ylekl600we3vsbfdy3ahb8"},{"post_id":"cl8ylejtr006r3vsbabcf3bbj","category_id":"cl8ylekdl00oa3vsbfrfg44xm","_id":"cl8ylekl700wg3vsb1x745hl1"},{"post_id":"cl8ylejtr006r3vsbabcf3bbj","category_id":"cl8ylekk100uw3vsbelab70m8","_id":"cl8ylekl800wh3vsb8vl6bxrd"},{"post_id":"cl8ylejtt006s3vsb0esc8gj4","category_id":"cl8ylek3v00ee3vsbgprk8u4s","_id":"cl8ylekla00wj3vsb947negvm"},{"post_id":"cl8ylejtt006s3vsb0esc8gj4","category_id":"cl8ylekdl00oa3vsbfrfg44xm","_id":"cl8yleklb00wk3vsb0jra5dtn"},{"post_id":"cl8ylejtt006s3vsb0esc8gj4","category_id":"cl8ylekk100uw3vsbelab70m8","_id":"cl8yleklc00wm3vsb1cs5b9h0"},{"post_id":"cl8ylejty006w3vsbbwl89dn2","category_id":"cl8ylek3v00ee3vsbgprk8u4s","_id":"cl8ylekld00wn3vsbc16o3qt9"},{"post_id":"cl8ylejty006w3vsbbwl89dn2","category_id":"cl8ylekdl00oa3vsbfrfg44xm","_id":"cl8yleklf00wp3vsb41to2cr5"},{"post_id":"cl8ylejty006w3vsbbwl89dn2","category_id":"cl8ylekk100uw3vsbelab70m8","_id":"cl8yleklf00wq3vsbeaufglp8"},{"post_id":"cl8yleju1006x3vsbcuxffwz6","category_id":"cl8ylek3v00ee3vsbgprk8u4s","_id":"cl8yleklh00ws3vsb3rru8vc1"},{"post_id":"cl8yleju1006x3vsbcuxffwz6","category_id":"cl8ylekdl00oa3vsbfrfg44xm","_id":"cl8ylekli00wt3vsb2n3hg4td"},{"post_id":"cl8yleju1006x3vsbcuxffwz6","category_id":"cl8ylekk100uw3vsbelab70m8","_id":"cl8yleklj00wv3vsb3aptg742"},{"post_id":"cl8yleju800723vsbhxvebkhf","category_id":"cl8ylek3v00ee3vsbgprk8u4s","_id":"cl8yleklk00ww3vsbh8yvfj9x"},{"post_id":"cl8yleju800723vsbhxvebkhf","category_id":"cl8ylekdl00oa3vsbfrfg44xm","_id":"cl8ylekll00wy3vsbbydl8g80"},{"post_id":"cl8yleju800723vsbhxvebkhf","category_id":"cl8ylekk100uw3vsbelab70m8","_id":"cl8yleklm00wz3vsb4c7nehki"},{"post_id":"cl8ylejub00743vsb8x5i4xho","category_id":"cl8ylek3v00ee3vsbgprk8u4s","_id":"cl8yleklo00x13vsb9v2k6h63"},{"post_id":"cl8ylejub00743vsb8x5i4xho","category_id":"cl8ylekdl00oa3vsbfrfg44xm","_id":"cl8yleklo00x23vsb2n70c8wi"},{"post_id":"cl8ylejub00743vsb8x5i4xho","category_id":"cl8ylekk100uw3vsbelab70m8","_id":"cl8yleklq00x43vsbgy4beejh"},{"post_id":"cl8ylejuh00793vsb84pseeyr","category_id":"cl8ylek3v00ee3vsbgprk8u4s","_id":"cl8yleklr00x53vsbfc2qf4gh"},{"post_id":"cl8ylejuh00793vsb84pseeyr","category_id":"cl8ylekdl00oa3vsbfrfg44xm","_id":"cl8yleklt00x73vsbcf96fnhj"},{"post_id":"cl8ylejuh00793vsb84pseeyr","category_id":"cl8ylekk100uw3vsbelab70m8","_id":"cl8yleklt00x83vsbf7h0hieo"},{"post_id":"cl8ylejuj007a3vsbbt3041qj","category_id":"cl8ylek3v00ee3vsbgprk8u4s","_id":"cl8yleklv00xa3vsbaat5fvyw"},{"post_id":"cl8ylejuj007a3vsbbt3041qj","category_id":"cl8ylekdl00oa3vsbfrfg44xm","_id":"cl8yleklw00xb3vsbct6d3lly"},{"post_id":"cl8ylejuj007a3vsbbt3041qj","category_id":"cl8ylekk100uw3vsbelab70m8","_id":"cl8ylekly00xd3vsbg5kech2x"},{"post_id":"cl8ylejuq007e3vsb2o3e9z43","category_id":"cl8ylek3v00ee3vsbgprk8u4s","_id":"cl8ylekly00xe3vsb7apx0y4w"},{"post_id":"cl8ylejuq007e3vsb2o3e9z43","category_id":"cl8ylekdl00oa3vsbfrfg44xm","_id":"cl8ylekm000xg3vsb3egjc2u3"},{"post_id":"cl8ylejuq007e3vsb2o3e9z43","category_id":"cl8ylekkt00vw3vsb1uk5fan6","_id":"cl8ylekm100xh3vsb55ltecnu"},{"post_id":"cl8ylejut007f3vsbfe5g1jzj","category_id":"cl8ylek3v00ee3vsbgprk8u4s","_id":"cl8ylekm300xj3vsb4mmlfh56"},{"post_id":"cl8ylejut007f3vsbfe5g1jzj","category_id":"cl8ylekdl00oa3vsbfrfg44xm","_id":"cl8ylekm300xk3vsb48tp1se2"},{"post_id":"cl8ylejut007f3vsbfe5g1jzj","category_id":"cl8ylekkv00vz3vsbgpn9hm50","_id":"cl8ylekm500xm3vsb1jd3e24t"},{"post_id":"cl8ylejv0007j3vsbbmus7f5h","category_id":"cl8ylek3v00ee3vsbgprk8u4s","_id":"cl8ylekm500xn3vsb06phgva4"},{"post_id":"cl8ylejv0007j3vsbbmus7f5h","category_id":"cl8ylekdl00oa3vsbfrfg44xm","_id":"cl8ylekm800xp3vsb5rhf88sx"},{"post_id":"cl8ylejv0007j3vsbbmus7f5h","category_id":"cl8ylekkx00w23vsb69j472au","_id":"cl8ylekm800xq3vsb2mowcr8s"},{"post_id":"cl8ylejv3007l3vsbc1utb1oz","category_id":"cl8ylek5x00ge3vsbh51g2xmw","_id":"cl8ylekma00xs3vsb8b77c07g"},{"post_id":"cl8ylejv3007l3vsbc1utb1oz","category_id":"cl8ylekf400pl3vsbb0f5c5vk","_id":"cl8ylekma00xt3vsb0lnu3avr"},{"post_id":"cl8ylejv3007l3vsbc1utb1oz","category_id":"cl8ylekkz00w63vsb9wdf8nq5","_id":"cl8ylekmd00xv3vsb4i0s7ybv"},{"post_id":"cl8ylejv8007o3vsbc6zf3ssr","category_id":"cl8ylek5x00ge3vsbh51g2xmw","_id":"cl8ylekmd00xw3vsbd7lq1p8c"},{"post_id":"cl8ylejv8007o3vsbc6zf3ssr","category_id":"cl8ylekf400pl3vsbb0f5c5vk","_id":"cl8ylekmf00xy3vsbfer9ejdk"},{"post_id":"cl8ylejv8007o3vsbc6zf3ssr","category_id":"cl8ylekkz00w63vsb9wdf8nq5","_id":"cl8ylekmf00xz3vsb1cjobsho"},{"post_id":"cl8ylejvb007q3vsbd68f1vv2","category_id":"cl8ylek5x00ge3vsbh51g2xmw","_id":"cl8ylekmi00y13vsb0ftcebt2"},{"post_id":"cl8ylejvb007q3vsbd68f1vv2","category_id":"cl8ylekf400pl3vsbb0f5c5vk","_id":"cl8ylekmi00y23vsbb89o9bd0"},{"post_id":"cl8ylejvb007q3vsbd68f1vv2","category_id":"cl8ylekkz00w63vsb9wdf8nq5","_id":"cl8ylekmk00y43vsbdmyh9zuv"},{"post_id":"cl8ylejvg007u3vsbdirr60k5","category_id":"cl8ylek5x00ge3vsbh51g2xmw","_id":"cl8ylekmk00y53vsbh3wo9eue"},{"post_id":"cl8ylejvg007u3vsbdirr60k5","category_id":"cl8ylekf400pl3vsbb0f5c5vk","_id":"cl8ylekmn00y73vsb000t83tg"},{"post_id":"cl8ylejvg007u3vsbdirr60k5","category_id":"cl8ylekkz00w63vsb9wdf8nq5","_id":"cl8ylekmn00y83vsbbahrdg7h"},{"post_id":"cl8ylejvj007w3vsb9i686exi","category_id":"cl8ylek5x00ge3vsbh51g2xmw","_id":"cl8ylekmp00ya3vsb3too0b0m"},{"post_id":"cl8ylejvj007w3vsb9i686exi","category_id":"cl8ylekf400pl3vsbb0f5c5vk","_id":"cl8ylekmr00yb3vsbfqf608g5"},{"post_id":"cl8ylejvj007w3vsb9i686exi","category_id":"cl8ylekkz00w63vsb9wdf8nq5","_id":"cl8ylekmu00yd3vsbdn3k8v5f"},{"post_id":"cl8ylejvo00803vsb6e7ia8za","category_id":"cl8ylek5x00ge3vsbh51g2xmw","_id":"cl8ylekmu00ye3vsbcbgjbb8z"},{"post_id":"cl8ylejvo00803vsb6e7ia8za","category_id":"cl8ylekf400pl3vsbb0f5c5vk","_id":"cl8ylekmw00yg3vsb0u1ngmm6"},{"post_id":"cl8ylejvo00803vsb6e7ia8za","category_id":"cl8ylekkz00w63vsb9wdf8nq5","_id":"cl8ylekmx00yh3vsbhmfl3evt"},{"post_id":"cl8ylejvr00833vsb59gyabh2","category_id":"cl8ylek5x00ge3vsbh51g2xmw","_id":"cl8ylekmy00yi3vsb20eu039k"},{"post_id":"cl8ylejvr00833vsb59gyabh2","category_id":"cl8ylekf400pl3vsbb0f5c5vk","_id":"cl8ylekmz00yk3vsb0n7zdg6v"},{"post_id":"cl8ylejvr00833vsb59gyabh2","category_id":"cl8ylekkz00w63vsb9wdf8nq5","_id":"cl8ylekn000yl3vsb5lc53pp3"},{"post_id":"cl8ylejvv00863vsb86ql8ods","category_id":"cl8ylek5x00ge3vsbh51g2xmw","_id":"cl8ylekn100yn3vsbadz6hoz2"},{"post_id":"cl8ylejvv00863vsb86ql8ods","category_id":"cl8ylekf400pl3vsbb0f5c5vk","_id":"cl8ylekn200yo3vsb74aq61cu"},{"post_id":"cl8ylejvv00863vsb86ql8ods","category_id":"cl8ylekkz00w63vsb9wdf8nq5","_id":"cl8ylekn400yq3vsbhgrdhgu7"},{"post_id":"cl8ylejw2008b3vsb1i35h1gc","category_id":"cl8ylek5x00ge3vsbh51g2xmw","_id":"cl8ylekn500yr3vsbcilzgdwe"},{"post_id":"cl8ylejw2008b3vsb1i35h1gc","category_id":"cl8ylekfv00q93vsbfh5qezl6","_id":"cl8ylekn600yt3vsba967cayp"},{"post_id":"cl8ylejw2008b3vsb1i35h1gc","category_id":"cl8ylekli00wu3vsbg2bxe9na","_id":"cl8ylekn700yu3vsb6jgz5ugq"},{"post_id":"cl8ylejw6008e3vsb4rz4431a","category_id":"cl8ylek5x00ge3vsbh51g2xmw","_id":"cl8ylekn900yw3vsbgn5e5rdd"},{"post_id":"cl8ylejw6008e3vsb4rz4431a","category_id":"cl8ylekfv00q93vsbfh5qezl6","_id":"cl8ylekn900yx3vsb0jm3cpzv"},{"post_id":"cl8ylejw6008e3vsb4rz4431a","category_id":"cl8ylekli00wu3vsbg2bxe9na","_id":"cl8yleknb00yz3vsb1wigg720"},{"post_id":"cl8ylejw9008f3vsb392ucxyj","category_id":"cl8ylek5x00ge3vsbh51g2xmw","_id":"cl8yleknc00z03vsbaea5gstf"},{"post_id":"cl8ylejw9008f3vsb392ucxyj","category_id":"cl8ylekfv00q93vsbfh5qezl6","_id":"cl8ylekne00z23vsbg1ie1w7e"},{"post_id":"cl8ylejw9008f3vsb392ucxyj","category_id":"cl8ylekli00wu3vsbg2bxe9na","_id":"cl8ylekne00z33vsbb6enbdvo"},{"post_id":"cl8ylejwe008i3vsb90cka780","category_id":"cl8ylek5x00ge3vsbh51g2xmw","_id":"cl8ylekng00z53vsb64hb85kn"},{"post_id":"cl8ylejwe008i3vsb90cka780","category_id":"cl8ylekfv00q93vsbfh5qezl6","_id":"cl8yleknh00z63vsbf7au51cv"},{"post_id":"cl8ylejwe008i3vsb90cka780","category_id":"cl8ylekli00wu3vsbg2bxe9na","_id":"cl8yleknj00z83vsbgrfmd4r5"},{"post_id":"cl8ylejwg008j3vsbgxk19n0l","category_id":"cl8ylek5x00ge3vsbh51g2xmw","_id":"cl8yleknk00z93vsb2ogbbha2"},{"post_id":"cl8ylejwg008j3vsbgxk19n0l","category_id":"cl8ylekfv00q93vsbfh5qezl6","_id":"cl8yleknl00za3vsb10szbg9m"},{"post_id":"cl8ylejwg008j3vsbgxk19n0l","category_id":"cl8ylekli00wu3vsbg2bxe9na","_id":"cl8yleknm00zb3vsba3mn8rud"},{"post_id":"cl8ylejwl008m3vsb6z6xefbg","category_id":"cl8ylek5x00ge3vsbh51g2xmw","_id":"cl8yleknn00zc3vsb3jjd8fii"},{"post_id":"cl8ylejwl008m3vsb6z6xefbg","category_id":"cl8ylekfv00q93vsbfh5qezl6","_id":"cl8yleknn00zd3vsb0xp695st"},{"post_id":"cl8ylejwl008m3vsb6z6xefbg","category_id":"cl8ylekli00wu3vsbg2bxe9na","_id":"cl8yleknn00ze3vsbh92h1gm5"},{"post_id":"cl8ylejwq008o3vsbd9cs0nug","category_id":"cl8ylek5x00ge3vsbh51g2xmw","_id":"cl8yleknn00zf3vsbha2o7198"},{"post_id":"cl8ylejwq008o3vsbd9cs0nug","category_id":"cl8ylekfv00q93vsbfh5qezl6","_id":"cl8yleknn00zg3vsb0yh84s39"},{"post_id":"cl8ylejwq008o3vsbd9cs0nug","category_id":"cl8ylekli00wu3vsbg2bxe9na","_id":"cl8ylekno00zh3vsbh0hd0c6b"},{"post_id":"cl8ylejwv008t3vsb07vze968","category_id":"cl8ylek5x00ge3vsbh51g2xmw","_id":"cl8ylekno00zi3vsb8vhu948s"},{"post_id":"cl8ylejwv008t3vsb07vze968","category_id":"cl8ylekfv00q93vsbfh5qezl6","_id":"cl8ylekno00zj3vsbaejdbgfi"},{"post_id":"cl8ylejwv008t3vsb07vze968","category_id":"cl8ylekli00wu3vsbg2bxe9na","_id":"cl8yleknp00zk3vsbhgtk2z5a"},{"post_id":"cl8ylejwz008w3vsb8a7ee5m7","category_id":"cl8ylek5x00ge3vsbh51g2xmw","_id":"cl8ylekns00zl3vsbedtzfdam"},{"post_id":"cl8ylejwz008w3vsb8a7ee5m7","category_id":"cl8ylekfv00q93vsbfh5qezl6","_id":"cl8ylekns00zm3vsbdwxl9l6h"},{"post_id":"cl8ylejwz008w3vsb8a7ee5m7","category_id":"cl8ylekli00wu3vsbg2bxe9na","_id":"cl8yleknt00zn3vsbckejcncb"},{"post_id":"cl8ylejx400913vsb3jyv7e8c","category_id":"cl8ylek5x00ge3vsbh51g2xmw","_id":"cl8yleknt00zo3vsbfjrtdlek"},{"post_id":"cl8ylejx400913vsb3jyv7e8c","category_id":"cl8ylekfv00q93vsbfh5qezl6","_id":"cl8yleknt00zp3vsb18bf7a64"},{"post_id":"cl8ylejx400913vsb3jyv7e8c","category_id":"cl8ylekli00wu3vsbg2bxe9na","_id":"cl8yleknt00zq3vsb10ez8ofj"},{"post_id":"cl8ylejx800943vsb2jof4r0k","category_id":"cl8ylek5x00ge3vsbh51g2xmw","_id":"cl8yleknt00zr3vsb1n38bneo"},{"post_id":"cl8ylejx800943vsb2jof4r0k","category_id":"cl8ylekfv00q93vsbfh5qezl6","_id":"cl8yleknt00zs3vsb5y90doo6"},{"post_id":"cl8ylejx800943vsb2jof4r0k","category_id":"cl8ylekli00wu3vsbg2bxe9na","_id":"cl8yleknu00zt3vsbe2kk3btl"},{"post_id":"cl8ylejxc00983vsb0s51bgxk","category_id":"cl8ylek5x00ge3vsbh51g2xmw","_id":"cl8yleknu00zu3vsb3brdf5ka"},{"post_id":"cl8ylejxc00983vsb0s51bgxk","category_id":"cl8ylekfv00q93vsbfh5qezl6","_id":"cl8yleknu00zv3vsb538bfeg8"},{"post_id":"cl8ylejxc00983vsb0s51bgxk","category_id":"cl8ylekli00wu3vsbg2bxe9na","_id":"cl8yleknv00zw3vsb54rd387r"},{"post_id":"cl8ylejxf009a3vsb046rh5hm","category_id":"cl8ylek5x00ge3vsbh51g2xmw","_id":"cl8yleknv00zx3vsb86tb9wdx"},{"post_id":"cl8ylejxf009a3vsb046rh5hm","category_id":"cl8ylekfv00q93vsbfh5qezl6","_id":"cl8yleknv00zy3vsb693v2nvl"},{"post_id":"cl8ylejxf009a3vsb046rh5hm","category_id":"cl8ylekli00wu3vsbg2bxe9na","_id":"cl8yleknw00zz3vsb6i9y34wn"},{"post_id":"cl8ylejxk009e3vsbe3554ebi","category_id":"cl8ylek5x00ge3vsbh51g2xmw","_id":"cl8yleknw01003vsb3x7lgnd9"},{"post_id":"cl8ylejxk009e3vsbe3554ebi","category_id":"cl8ylekfv00q93vsbfh5qezl6","_id":"cl8yleknx01013vsbejd97en9"},{"post_id":"cl8ylejxk009e3vsbe3554ebi","category_id":"cl8ylekli00wu3vsbg2bxe9na","_id":"cl8yleknx01023vsb8dk6gk6h"},{"post_id":"cl8ylejxq009h3vsb9yn80ulz","category_id":"cl8ylek5x00ge3vsbh51g2xmw","_id":"cl8yleknx01033vsb7r4p91xt"},{"post_id":"cl8ylejxq009h3vsb9yn80ulz","category_id":"cl8ylekfv00q93vsbfh5qezl6","_id":"cl8ylekny01043vsb60pe2xon"},{"post_id":"cl8ylejxq009h3vsb9yn80ulz","category_id":"cl8ylekli00wu3vsbg2bxe9na","_id":"cl8ylekny01053vsbdicz3xei"},{"post_id":"cl8ylejxu009k3vsbb3hy2h1s","category_id":"cl8ylek5x00ge3vsbh51g2xmw","_id":"cl8ylekny01063vsbhj0k9yhl"},{"post_id":"cl8ylejxu009k3vsbb3hy2h1s","category_id":"cl8ylekfv00q93vsbfh5qezl6","_id":"cl8ylekny01073vsbc7bv5z08"},{"post_id":"cl8ylejxu009k3vsbb3hy2h1s","category_id":"cl8ylekli00wu3vsbg2bxe9na","_id":"cl8yleknz01083vsbdl96au8w"},{"post_id":"cl8ylejxz009o3vsb686d0jek","category_id":"cl8ylek5x00ge3vsbh51g2xmw","_id":"cl8yleknz01093vsb77qvbr3f"},{"post_id":"cl8ylejxz009o3vsb686d0jek","category_id":"cl8ylekfv00q93vsbfh5qezl6","_id":"cl8yleknz010a3vsb4h7a8wyp"},{"post_id":"cl8ylejxz009o3vsb686d0jek","category_id":"cl8ylekli00wu3vsbg2bxe9na","_id":"cl8yleknz010b3vsb115c84of"},{"post_id":"cl8ylejy2009q3vsbgtq251oc","category_id":"cl8ylek5x00ge3vsbh51g2xmw","_id":"cl8yleko0010c3vsbcr4n5pqy"},{"post_id":"cl8ylejy2009q3vsbgtq251oc","category_id":"cl8ylekfv00q93vsbfh5qezl6","_id":"cl8yleko1010d3vsb0boc79j9"},{"post_id":"cl8ylejy2009q3vsbgtq251oc","category_id":"cl8ylekli00wu3vsbg2bxe9na","_id":"cl8yleko1010e3vsb71bj9abz"},{"post_id":"cl8ylejy8009u3vsbgjxfcbre","category_id":"cl8ylek5x00ge3vsbh51g2xmw","_id":"cl8yleko1010f3vsbgou4dk3d"},{"post_id":"cl8ylejy8009u3vsbgjxfcbre","category_id":"cl8ylekfv00q93vsbfh5qezl6","_id":"cl8yleko2010g3vsb8n9ehkxk"},{"post_id":"cl8ylejy8009u3vsbgjxfcbre","category_id":"cl8ylekmt00yc3vsbavy24aqg","_id":"cl8yleko2010h3vsb5rytfobp"},{"post_id":"cl8ylejyb009x3vsb8443f7h7","category_id":"cl8ylek5x00ge3vsbh51g2xmw","_id":"cl8yleko2010i3vsbfs8n0s40"},{"post_id":"cl8ylejyb009x3vsb8443f7h7","category_id":"cl8ylekfv00q93vsbfh5qezl6","_id":"cl8yleko2010j3vsb4xqq2ju2"},{"post_id":"cl8ylejyb009x3vsb8443f7h7","category_id":"cl8ylekmv00yf3vsb9geu5x64","_id":"cl8yleko2010k3vsb1e8u3q0n"},{"post_id":"cl8ylejyj00a13vsbccba8ev8","category_id":"cl8ylek5x00ge3vsbh51g2xmw","_id":"cl8yleko2010l3vsbcq3ncu6o"},{"post_id":"cl8ylejyj00a13vsbccba8ev8","category_id":"cl8ylekfv00q93vsbfh5qezl6","_id":"cl8yleko3010m3vsb71kdfaju"},{"post_id":"cl8ylejyj00a13vsbccba8ev8","category_id":"cl8ylekmy00yj3vsbf8gd7pdg","_id":"cl8yleko3010n3vsbgyy5c0mg"},{"post_id":"cl8ylejym00a33vsbetxpboh3","category_id":"cl8ylek5x00ge3vsbh51g2xmw","_id":"cl8yleko3010o3vsb9gec8l59"},{"post_id":"cl8ylejym00a33vsbetxpboh3","category_id":"cl8ylekfv00q93vsbfh5qezl6","_id":"cl8yleko3010p3vsbcy2b9o7x"},{"post_id":"cl8ylejym00a33vsbetxpboh3","category_id":"cl8ylekmy00yj3vsbf8gd7pdg","_id":"cl8yleko3010q3vsb1nlwfh63"},{"post_id":"cl8ylejyw00a63vsbhovd2h1r","category_id":"cl8ylek5x00ge3vsbh51g2xmw","_id":"cl8yleko3010r3vsb1yq61efe"},{"post_id":"cl8ylejyw00a63vsbhovd2h1r","category_id":"cl8ylekfv00q93vsbfh5qezl6","_id":"cl8yleko3010s3vsbarix5x6m"},{"post_id":"cl8ylejyw00a63vsbhovd2h1r","category_id":"cl8ylekn300yp3vsb74g8ac3n","_id":"cl8yleko4010t3vsbg7dl3tbi"},{"post_id":"cl8ylejyz00a73vsb6nhka7ry","category_id":"cl8ylek5x00ge3vsbh51g2xmw","_id":"cl8yleko4010u3vsb4nyh397u"},{"post_id":"cl8ylejyz00a73vsb6nhka7ry","category_id":"cl8ylekfv00q93vsbfh5qezl6","_id":"cl8yleko4010v3vsb35shhwwt"},{"post_id":"cl8ylejyz00a73vsb6nhka7ry","category_id":"cl8ylekn300yp3vsb74g8ac3n","_id":"cl8yleko4010w3vsbek8zbcwt"},{"post_id":"cl8ylejz500aa3vsb0fjcellf","category_id":"cl8ylek5x00ge3vsbh51g2xmw","_id":"cl8yleko4010x3vsbc5eb49u0"},{"post_id":"cl8ylejz500aa3vsb0fjcellf","category_id":"cl8ylekfv00q93vsbfh5qezl6","_id":"cl8yleko4010y3vsb1x9ceuod"},{"post_id":"cl8ylejz500aa3vsb0fjcellf","category_id":"cl8ylekn300yp3vsb74g8ac3n","_id":"cl8yleko4010z3vsbdax4fy4c"},{"post_id":"cl8ylejz900ac3vsb3crdc6nz","category_id":"cl8ylek5x00ge3vsbh51g2xmw","_id":"cl8yleko401103vsbaanfazym"},{"post_id":"cl8ylejz900ac3vsb3crdc6nz","category_id":"cl8ylekfv00q93vsbfh5qezl6","_id":"cl8yleko501113vsb5sjidy15"},{"post_id":"cl8ylejz900ac3vsb3crdc6nz","category_id":"cl8ylekn300yp3vsb74g8ac3n","_id":"cl8yleko501123vsb0vcrgpw1"},{"post_id":"cl8ylejze00ag3vsb1hj75oio","category_id":"cl8ylek5x00ge3vsbh51g2xmw","_id":"cl8yleko501133vsb91iiebke"},{"post_id":"cl8ylejze00ag3vsb1hj75oio","category_id":"cl8ylekid00sx3vsb1y8k234z","_id":"cl8yleko501143vsbc1z68n9c"},{"post_id":"cl8ylejze00ag3vsb1hj75oio","category_id":"cl8yleknd00z13vsb39uvhklw","_id":"cl8yleko501153vsbfssnd4yj"},{"post_id":"cl8ylejzh00ah3vsb4st79p3w","category_id":"cl8ylek5x00ge3vsbh51g2xmw","_id":"cl8yleko601163vsbg7nybz0m"},{"post_id":"cl8ylejzh00ah3vsb4st79p3w","category_id":"cl8ylekid00sx3vsb1y8k234z","_id":"cl8yleko601173vsb2p647j20"},{"post_id":"cl8ylejzh00ah3vsb4st79p3w","category_id":"cl8yleknd00z13vsb39uvhklw","_id":"cl8yleko601183vsb91kl073v"},{"post_id":"cl8ylejzr00al3vsbfzr64wp9","category_id":"cl8ylek5x00ge3vsbh51g2xmw","_id":"cl8yleko601193vsb7hghazin"},{"post_id":"cl8ylejzr00al3vsbfzr64wp9","category_id":"cl8ylekid00sx3vsb1y8k234z","_id":"cl8yleko7011a3vsbbbh21uwj"},{"post_id":"cl8ylejzr00al3vsbfzr64wp9","category_id":"cl8yleknd00z13vsb39uvhklw","_id":"cl8yleko7011b3vsb7q1g02yo"}],"PostTag":[{"post_id":"cl8ylejhg00013vsbeptf4c2z","tag_id":"cl8ylejhv00033vsb0u6fe2yf","_id":"cl8ylejif00093vsb3wd49zzy"},{"post_id":"cl8ylejhq00023vsb6q5le0a4","tag_id":"cl8ylejid00083vsbbwzb7ih8","_id":"cl8ylejj3000l3vsbdifm7w9t"},{"post_id":"cl8ylejhq00023vsb6q5le0a4","tag_id":"cl8ylejin000d3vsb3bdpgf1y","_id":"cl8ylejjd000o3vsb5y0c37ig"},{"post_id":"cl8yleji100043vsbg8ea2qzb","tag_id":"cl8ylejix000i3vsb74dp3kkk","_id":"cl8ylejjj000t3vsb5efrfwbp"},{"post_id":"cl8yleji700063vsbadgs888z","tag_id":"cl8ylejjd000p3vsbgi4s1f96","_id":"cl8ylejk300143vsb7qwuhqo3"},{"post_id":"cl8yleji700063vsbadgs888z","tag_id":"cl8ylejjq000w3vsbfww1ajuc","_id":"cl8ylejk700163vsbc5r35f1t"},{"post_id":"cl8ylejia00073vsbg3x9hn1p","tag_id":"cl8ylejjy00113vsb4rlb1xkg","_id":"cl8ylejkq001e3vsbd6b29hv7"},{"post_id":"cl8ylejia00073vsbg3x9hn1p","tag_id":"cl8ylejk700173vsba15965no","_id":"cl8ylejkt001g3vsb27i7hpmu"},{"post_id":"cl8ylejig000a3vsbeervht6a","tag_id":"cl8ylejkj001b3vsb9e2ncnu4","_id":"cl8ylejl5001k3vsb976x0t1k"},{"post_id":"cl8ylejil000c3vsb7oblgkau","tag_id":"cl8ylejkx001j3vsba9gxcjxg","_id":"cl8ylejlj001q3vsbd4yvdpbj"},{"post_id":"cl8ylejip000e3vsb2rnqa7n3","tag_id":"cl8ylejle001o3vsbexfr0zn2","_id":"cl8ylejm5001z3vsb6f680ym9"},{"post_id":"cl8ylejip000e3vsb2rnqa7n3","tag_id":"cl8ylejlp001t3vsbe0bogfeb","_id":"cl8ylejma00223vsbhudteb0j"},{"post_id":"cl8ylejiu000h3vsbb2yk6oyo","tag_id":"cl8ylejm1001x3vsb5nvf0kef","_id":"cl8ylejme00253vsbd8ingqd7"},{"post_id":"cl8ylejiz000j3vsb8imofln6","tag_id":"cl8ylejm1001x3vsb5nvf0kef","_id":"cl8ylejmn002a3vsb3qyt2t89"},{"post_id":"cl8ylejj9000n3vsb1wrx2wr7","tag_id":"cl8ylejm1001x3vsb5nvf0kef","_id":"cl8ylejmv002f3vsb1rw29g9g"},{"post_id":"cl8ylejjf000q3vsb9io2au6i","tag_id":"cl8ylejm1001x3vsb5nvf0kef","_id":"cl8ylejn3002k3vsbeuv30duj"},{"post_id":"cl8ylejjk000u3vsbbgfy2syh","tag_id":"cl8ylejm1001x3vsb5nvf0kef","_id":"cl8ylejnd002p3vsb27ut3hzx"},{"post_id":"cl8ylejjn000v3vsb8iz80v8j","tag_id":"cl8ylejnb002o3vsb2bm04v24","_id":"cl8ylejo600393vsbb79t78n8"},{"post_id":"cl8ylejjn000v3vsb8iz80v8j","tag_id":"cl8ylejnl002u3vsbc0720c4z","_id":"cl8ylejoa003d3vsb384oauo4"},{"post_id":"cl8ylejjn000v3vsb8iz80v8j","tag_id":"cl8ylejnt00303vsb90fncsfy","_id":"cl8ylejof003h3vsbhl51dqbi"},{"post_id":"cl8ylejjs000z3vsbe2n5hnku","tag_id":"cl8ylejo200363vsb1y1fhmju","_id":"cl8ylejol003l3vsbg23khxnl"},{"post_id":"cl8ylejjw00103vsb3vv6aayc","tag_id":"cl8ylejo200363vsb1y1fhmju","_id":"cl8ylejp1003w3vsb4jb65m90"},{"post_id":"cl8ylejjw00103vsb3vv6aayc","tag_id":"cl8ylejoo003n3vsb1icd45o4","_id":"cl8ylejp600403vsb94zf91ht"},{"post_id":"cl8ylejk100133vsba8w5b5ck","tag_id":"cl8ylejo200363vsb1y1fhmju","_id":"cl8ylejpa00443vsb452e07gx"},{"post_id":"cl8ylejp800433vsb66i926ji","tag_id":"cl8ylejin000d3vsb3bdpgf1y","_id":"cl8ylejph004a3vsb161q9gop"},{"post_id":"cl8ylejk500153vsbhs6yb3y5","tag_id":"cl8ylejo200363vsb1y1fhmju","_id":"cl8ylejpn004e3vsbhuipcpsk"},{"post_id":"cl8ylejk900183vsbd8ue3guq","tag_id":"cl8ylejpg00493vsb61fde2ru","_id":"cl8ylejpv004l3vsbeulbbpn9"},{"post_id":"cl8ylejkg001a3vsbckwza62a","tag_id":"cl8ylejpq004h3vsbd46x56ed","_id":"cl8ylejq4004s3vsbabepaz1u"},{"post_id":"cl8ylejkl001c3vsbd1915zck","tag_id":"cl8ylejpq004h3vsbd46x56ed","_id":"cl8ylejqd004y3vsb0q75duke"},{"post_id":"cl8ylejkq001f3vsbgysv8asx","tag_id":"cl8ylejpq004h3vsbd46x56ed","_id":"cl8ylejqm00543vsbbyof05nh"},{"post_id":"cl8ylejku001h3vsb802ee0ll","tag_id":"cl8ylejpq004h3vsbd46x56ed","_id":"cl8ylejr1005a3vsb51pfc7mj"},{"post_id":"cl8ylejl6001l3vsbhqmlfxgw","tag_id":"cl8ylejpq004h3vsbd46x56ed","_id":"cl8ylejrc005f3vsbh1l16nij"},{"post_id":"cl8ylejl9001m3vsb3gvl146e","tag_id":"cl8ylejr6005c3vsbbg0h6hwx","_id":"cl8ylejrn005l3vsb5qej6rbz"},{"post_id":"cl8ylejlg001p3vsbhjm99gui","tag_id":"cl8ylejr6005c3vsbbg0h6hwx","_id":"cl8ylejry005r3vsbe0o8dccs"},{"post_id":"cl8ylejlk001r3vsb8qc0boxg","tag_id":"cl8ylejrw005p3vsbdlt9gpdk","_id":"cl8ylejsu00623vsbe14c1po2"},{"post_id":"cl8ylejlk001r3vsb8qc0boxg","tag_id":"cl8ylejs4005u3vsb03xe2pz0","_id":"cl8ylejsx00653vsbcqlq7up4"},{"post_id":"cl8ylejlr001u3vsbevk8g3dv","tag_id":"cl8ylejsp005y3vsb3fc30t3e","_id":"cl8ylejta006d3vsb2m3e42at"},{"post_id":"cl8ylejlr001u3vsbevk8g3dv","tag_id":"cl8ylejrw005p3vsbdlt9gpdk","_id":"cl8ylejtd006f3vsb01nw2usx"},{"post_id":"cl8ylejlu001v3vsbcgxi7nms","tag_id":"cl8ylejt5006a3vsb838r6q8s","_id":"cl8ylejti006k3vsb735a8bi4"},{"post_id":"cl8ylejm3001y3vsb7b0e1ip8","tag_id":"cl8ylejt5006a3vsb838r6q8s","_id":"cl8ylejtq006q3vsb9uc6a8ds"},{"post_id":"cl8ylejm600203vsb626scbdf","tag_id":"cl8ylejt5006a3vsb838r6q8s","_id":"cl8ylejty006v3vsb4865bo2r"},{"post_id":"cl8ylejma00233vsb6wlu7on4","tag_id":"cl8ylejt5006a3vsb838r6q8s","_id":"cl8yleju800713vsb0t9q6alf"},{"post_id":"cl8ylejmf00263vsbdgbub892","tag_id":"cl8ylejt5006a3vsb838r6q8s","_id":"cl8ylejug00783vsb3pgrdmo0"},{"post_id":"cl8ylejmj00283vsbgpwi7gwn","tag_id":"cl8ylejt5006a3vsb838r6q8s","_id":"cl8ylejuq007d3vsbdvbi7eyk"},{"post_id":"cl8ylejmn002b3vsbd72d10k9","tag_id":"cl8ylejul007b3vsb1schaotq","_id":"cl8ylejva007p3vsb1m7n5d98"},{"post_id":"cl8ylejmn002b3vsbd72d10k9","tag_id":"cl8ylejt5006a3vsb838r6q8s","_id":"cl8ylejvd007r3vsbclq50r6x"},{"post_id":"cl8ylejmr002d3vsb00tf0uxo","tag_id":"cl8ylejt5006a3vsb838r6q8s","_id":"cl8ylejvi007v3vsb5nx2anvn"},{"post_id":"cl8ylejmw002g3vsb4k12ce0s","tag_id":"cl8ylejt5006a3vsb838r6q8s","_id":"cl8ylejvq00813vsbbzlk7tfr"},{"post_id":"cl8ylejn0002i3vsbawa2ag6w","tag_id":"cl8ylejvl007x3vsbc51o2tjy","_id":"cl8ylejvy00873vsbhcfs8tab"},{"post_id":"cl8ylejn4002l3vsb5ddt572r","tag_id":"cl8ylejvu00843vsb1yc8htvp","_id":"cl8ylejwp008n3vsb7hig3hq4"},{"post_id":"cl8ylejn4002l3vsb5ddt572r","tag_id":"cl8ylejw1008a3vsbauqvf35u","_id":"cl8ylejwt008r3vsbb8ah4f1s"},{"post_id":"cl8ylejn4002l3vsb5ddt572r","tag_id":"cl8ylejwc008h3vsb4wj6dt6d","_id":"cl8ylejwy008v3vsbacddb0pa"},{"post_id":"cl8ylejn7002n3vsb93yb6oy3","tag_id":"cl8ylejwc008h3vsb4wj6dt6d","_id":"cl8ylejx1008y3vsb7bp69d7g"},{"post_id":"cl8ylejne002q3vsb3d5natiq","tag_id":"cl8ylejwu008s3vsb0azt8jvm","_id":"cl8ylejx700933vsbd6hualtg"},{"post_id":"cl8ylejnh002t3vsb4g7zfogv","tag_id":"cl8ylejwu008s3vsb0azt8jvm","_id":"cl8ylejxn009g3vsbcpd68r13"},{"post_id":"cl8ylejnh002t3vsb4g7zfogv","tag_id":"cl8ylejxb00973vsba5bt4orv","_id":"cl8ylejxt009j3vsbfnbe7y3x"},{"post_id":"cl8ylejnm002w3vsb6e332q46","tag_id":"cl8ylejxj009d3vsbbvvlfy4b","_id":"cl8ylejya009v3vsb58sqgkp8"},{"post_id":"cl8ylejnm002w3vsb6e332q46","tag_id":"cl8ylejxx009m3vsbce0sbz8h","_id":"cl8ylejyd009y3vsb1oxcev2j"},{"post_id":"cl8ylejnq002y3vsbh4wf3it5","tag_id":"cl8ylejxj009d3vsbbvvlfy4b","_id":"cl8ylejyl00a23vsb3jb7drd3"},{"post_id":"cl8ylejnu00313vsbbqow6wpe","tag_id":"cl8ylejxj009d3vsbbvvlfy4b","_id":"cl8ylejz800ab3vsb4rmjd89m"},{"post_id":"cl8ylejnu00313vsbbqow6wpe","tag_id":"cl8ylejyp00a53vsbfjgi9rsy","_id":"cl8ylejzc00ae3vsb1wm5c3ko"},{"post_id":"cl8ylejny00333vsb0gzsfas8","tag_id":"cl8ylejz400a93vsbe5yzbxwt","_id":"cl8ylejzu00an3vsb2ocme4bd"},{"post_id":"cl8ylejny00333vsb0gzsfas8","tag_id":"cl8ylejxj009d3vsbbvvlfy4b","_id":"cl8ylek0100aq3vsb6vpsgimd"},{"post_id":"cl8ylejo300373vsbbd5vdg4m","tag_id":"cl8ylejzp00ak3vsb4gz33txh","_id":"cl8ylek0500at3vsb60uu33re"},{"post_id":"cl8ylejo6003a3vsb1bf72w5t","tag_id":"cl8ylek0400as3vsbf98o1hcp","_id":"cl8ylek0v00b83vsb4qsl0not"},{"post_id":"cl8ylejo6003a3vsb1bf72w5t","tag_id":"cl8ylek0i00ay3vsbebwlhj4z","_id":"cl8ylek0z00ba3vsb868932vx"},{"post_id":"cl8ylejob003e3vsbdaae3sm0","tag_id":"cl8ylek0r00b43vsb0ozsf5xb","_id":"cl8ylek1400be3vsb5kszb4g8"},{"post_id":"cl8ylejog003i3vsbbcxq0avj","tag_id":"cl8ylek0z00bb3vsb4jau6nwb","_id":"cl8ylek1d00bj3vsb6c4k3o14"},{"post_id":"cl8ylejom003m3vsbgke45yht","tag_id":"cl8ylek0i00ay3vsbebwlhj4z","_id":"cl8ylek1j00br3vsbeo3mcyoi"},{"post_id":"cl8ylejom003m3vsbgke45yht","tag_id":"cl8ylek1e00bk3vsb9ck2e3ng","_id":"cl8ylek1k00bt3vsba1f74xq8"},{"post_id":"cl8ylejoq003p3vsb18qu9u7f","tag_id":"cl8ylek0i00ay3vsbebwlhj4z","_id":"cl8ylek1p00bz3vsb6mizfsa5"},{"post_id":"cl8ylejoq003p3vsb18qu9u7f","tag_id":"cl8ylejsp005y3vsb3fc30t3e","_id":"cl8ylek1q00c13vsb7tdxegrf"},{"post_id":"cl8ylejov003s3vsbh52x7aae","tag_id":"cl8ylek0i00ay3vsbebwlhj4z","_id":"cl8ylek1v00c63vsbbuz4c83x"},{"post_id":"cl8ylejov003s3vsbh52x7aae","tag_id":"cl8ylejsp005y3vsb3fc30t3e","_id":"cl8ylek1v00c73vsb0llq2t76"},{"post_id":"cl8ylejoz003v3vsbbh6q8xaa","tag_id":"cl8ylek0i00ay3vsbebwlhj4z","_id":"cl8ylek1y00ca3vsb0qjk3xn7"},{"post_id":"cl8ylejp4003z3vsbff644u6z","tag_id":"cl8ylek0i00ay3vsbebwlhj4z","_id":"cl8ylek2000cd3vsbh7du3ri0"},{"post_id":"cl8ylejpd00473vsb4pxu8hga","tag_id":"cl8ylek1y00cb3vsb5cvf6nwl","_id":"cl8ylek2a00ck3vsbde7837aw"},{"post_id":"cl8ylejpd00473vsb4pxu8hga","tag_id":"cl8ylejxb00973vsba5bt4orv","_id":"cl8ylek2a00cl3vsbblothwsm"},{"post_id":"cl8ylejph004b3vsb30x994p4","tag_id":"cl8ylek2700cj3vsb1hh22uch","_id":"cl8ylek2d00co3vsbfuok7qis"},{"post_id":"cl8ylejpn004f3vsb7v7d63q8","tag_id":"cl8ylek2700cj3vsb1hh22uch","_id":"cl8ylek2i00ct3vsbhslchaf8"},{"post_id":"cl8ylejpr004i3vsb39kt32hi","tag_id":"cl8ylek2g00cr3vsb21aodfs2","_id":"cl8ylek2m00cw3vsbcrwfgu9h"},{"post_id":"cl8ylejpw004m3vsb8ktbdouk","tag_id":"cl8ylek2g00cr3vsb21aodfs2","_id":"cl8ylek2u00d33vsbclhrcygv"},{"post_id":"cl8ylejpw004m3vsb8ktbdouk","tag_id":"cl8ylek2o00cy3vsbdgmc194e","_id":"cl8ylek2v00d63vsb0i1z1p7i"},{"post_id":"cl8ylejpw004m3vsb8ktbdouk","tag_id":"cl8ylek2q00d03vsbdixq4gkt","_id":"cl8ylek2x00d93vsb3l55h6rt"},{"post_id":"cl8ylejpz004p3vsb4sx2ckp7","tag_id":"cl8ylek2s00d23vsb5rc0ge8d","_id":"cl8ylek2z00db3vsbhfcna1sv"},{"post_id":"cl8ylejq5004t3vsb7g8q0ocb","tag_id":"cl8ylek2w00d83vsb4zrb7voi","_id":"cl8ylek3100de3vsbcbld8w7z"},{"post_id":"cl8ylejq9004w3vsbalx96toq","tag_id":"cl8ylek2w00d83vsb4zrb7voi","_id":"cl8ylek3400di3vsb3jpmdzua"},{"post_id":"cl8ylejqe004z3vsba842drl4","tag_id":"cl8ylek2w00d83vsb4zrb7voi","_id":"cl8ylek3800dm3vsb9hqx11wr"},{"post_id":"cl8ylejqi00513vsb7mi51h9m","tag_id":"cl8ylek2w00d83vsb4zrb7voi","_id":"cl8ylek3b00dp3vsba9rfhb00"},{"post_id":"cl8ylejqn00553vsb7hcr5zeg","tag_id":"cl8ylek2w00d83vsb4zrb7voi","_id":"cl8ylek3e00ds3vsb6soud89t"},{"post_id":"cl8ylejqv00583vsb04ea6rw8","tag_id":"cl8ylejm1001x3vsb5nvf0kef","_id":"cl8ylek3g00dv3vsb0rrpepmp"},{"post_id":"cl8ylejqv00583vsb04ea6rw8","tag_id":"cl8ylek3c00dq3vsbdci5hogn","_id":"cl8ylek3h00dw3vsb1556g57p"},{"post_id":"cl8ylejr3005b3vsbggg5e4r4","tag_id":"cl8ylek3e00dt3vsb8zcr1gcl","_id":"cl8ylek3k00e03vsb8e0sebdn"},{"post_id":"cl8ylejr8005d3vsb0ddn4xrq","tag_id":"cl8ylek2w00d83vsb4zrb7voi","_id":"cl8ylek3n00e43vsb88wq3164"},{"post_id":"cl8ylejrd005g3vsbe49090y2","tag_id":"cl8ylek3l00e23vsbay9z9h7b","_id":"cl8ylek3q00e73vsb7cxkf49j"},{"post_id":"cl8ylejrh005h3vsb1edd6s42","tag_id":"cl8ylek3c00dq3vsbdci5hogn","_id":"cl8ylek3t00eb3vsb7drf4ssj"},{"post_id":"cl8ylejro005m3vsb6qij014f","tag_id":"cl8ylek3c00dq3vsbdci5hogn","_id":"cl8ylek3w00ef3vsb2fb30oh1"},{"post_id":"cl8ylejrt005o3vsb69lx35m0","tag_id":"cl8ylek3c00dq3vsbdci5hogn","_id":"cl8ylek3z00ei3vsb3smp3kin"},{"post_id":"cl8ylejry005s3vsb9m1043q6","tag_id":"cl8ylek3c00dq3vsbdci5hogn","_id":"cl8ylek4b00er3vsb4sbr0l54"},{"post_id":"cl8ylejry005s3vsb9m1043q6","tag_id":"cl8ylek4000ej3vsb7mhd7o8b","_id":"cl8ylek4c00es3vsbh39g7bt0"},{"post_id":"cl8ylejry005s3vsb9m1043q6","tag_id":"cl8ylek3l00e23vsbay9z9h7b","_id":"cl8ylek4f00ev3vsbhbzkexc0"},{"post_id":"cl8ylejs2005t3vsb7vt565k3","tag_id":"cl8ylek2w00d83vsb4zrb7voi","_id":"cl8ylek4h00ew3vsba6rr8xmy"},{"post_id":"cl8ylejs6005w3vsb9d1dened","tag_id":"cl8ylek4c00et3vsb34jd3jnk","_id":"cl8ylek4p00f33vsb14so1bsj"},{"post_id":"cl8ylejs6005w3vsb9d1dened","tag_id":"cl8ylek4j00ez3vsb6v1g0elk","_id":"cl8ylek4q00f53vsb5cdx989o"},{"post_id":"cl8ylejs9005x3vsb8ru22lx0","tag_id":"cl8ylek3c00dq3vsbdci5hogn","_id":"cl8ylek4s00f73vsb6q951708"},{"post_id":"cl8ylejsr00613vsb83y46oc9","tag_id":"cl8ylek4r00f63vsb4vjnbymj","_id":"cl8ylek4v00fa3vsb0pxu1o4h"},{"post_id":"cl8ylejsv00643vsb46l80ws8","tag_id":"cl8ylek4r00f63vsb4vjnbymj","_id":"cl8ylek4z00fd3vsbdfuo4z0m"},{"post_id":"cl8ylejsz00683vsbb9m0a6et","tag_id":"cl8ylek4x00fc3vsbcxjwh7um","_id":"cl8ylek5500fi3vsb45umah84"},{"post_id":"cl8ylejt300693vsb9sjg33f2","tag_id":"cl8ylek4x00fc3vsbcxjwh7um","_id":"cl8ylek5800fl3vsb17je0n23"},{"post_id":"cl8ylejt6006b3vsb12us79dx","tag_id":"cl8ylek5600fk3vsbbes3bw84","_id":"cl8ylek5b00fo3vsbaza058xv"},{"post_id":"cl8ylejt6006b3vsb12us79dx","tag_id":"cl8ylejrw005p3vsbdlt9gpdk","_id":"cl8ylek5c00fr3vsbcun50luf"},{"post_id":"cl8ylejta006e3vsb4u4f9k5r","tag_id":"cl8ylek5900fn3vsb2w2g9osv","_id":"cl8ylek5f00fv3vsbh2y50udg"},{"post_id":"cl8ylejtd006g3vsbdiwt8f2e","tag_id":"cl8ylek5900fn3vsb2w2g9osv","_id":"cl8ylek5i00fy3vsb897yb0ou"},{"post_id":"cl8ylejtj006l3vsb6el6a3oa","tag_id":"cl8ylek5900fn3vsb2w2g9osv","_id":"cl8ylek5l00g13vsbbzrn2q0f"},{"post_id":"cl8ylejtl006n3vsb3a3z4p95","tag_id":"cl8ylek5900fn3vsb2w2g9osv","_id":"cl8ylek5r00g73vsb7qdkcu3k"},{"post_id":"cl8ylejtl006n3vsb3a3z4p95","tag_id":"cl8ylek3c00dq3vsbdci5hogn","_id":"cl8ylek5s00g93vsb12wubvjq"},{"post_id":"cl8ylejtr006r3vsbabcf3bbj","tag_id":"cl8ylek5900fn3vsb2w2g9osv","_id":"cl8ylek5v00gc3vsb9kkm4wa8"},{"post_id":"cl8ylejtt006s3vsb0esc8gj4","tag_id":"cl8ylek5900fn3vsb2w2g9osv","_id":"cl8ylek5y00gf3vsbdgdl2og7"},{"post_id":"cl8ylejty006w3vsbbwl89dn2","tag_id":"cl8ylek5900fn3vsb2w2g9osv","_id":"cl8ylek6000gi3vsbbit5endz"},{"post_id":"cl8yleju1006x3vsbcuxffwz6","tag_id":"cl8ylek5900fn3vsb2w2g9osv","_id":"cl8ylek6300gm3vsb3sa9fkkm"},{"post_id":"cl8yleju800723vsbhxvebkhf","tag_id":"cl8ylek5900fn3vsb2w2g9osv","_id":"cl8ylek6800gp3vsb8uq7bu9q"},{"post_id":"cl8ylejub00743vsb8x5i4xho","tag_id":"cl8ylek5900fn3vsb2w2g9osv","_id":"cl8ylek6c00gs3vsbfoozc3ni"},{"post_id":"cl8ylejuh00793vsb84pseeyr","tag_id":"cl8ylek5900fn3vsb2w2g9osv","_id":"cl8ylek6f00gv3vsb5a225mvq"},{"post_id":"cl8ylejuj007a3vsbbt3041qj","tag_id":"cl8ylek5900fn3vsb2w2g9osv","_id":"cl8ylek6i00gy3vsbgb91bjgl"},{"post_id":"cl8ylejuq007e3vsb2o3e9z43","tag_id":"cl8ylek5900fn3vsb2w2g9osv","_id":"cl8ylek6l00h33vsbgsyv7qyb"},{"post_id":"cl8ylejut007f3vsbfe5g1jzj","tag_id":"cl8ylek5900fn3vsb2w2g9osv","_id":"cl8ylek6s00h93vsb1jytak90"},{"post_id":"cl8ylejut007f3vsbfe5g1jzj","tag_id":"cl8ylek6n00h53vsb3xpmd0j6","_id":"cl8ylek6t00ha3vsb4p1n6x50"},{"post_id":"cl8ylejv0007j3vsbbmus7f5h","tag_id":"cl8ylek5900fn3vsb2w2g9osv","_id":"cl8ylek6x00hf3vsb2cyqd96r"},{"post_id":"cl8ylejv0007j3vsbbmus7f5h","tag_id":"cl8ylek6t00hb3vsbas6z3z9p","_id":"cl8ylek6x00hg3vsbgbhe6cdm"},{"post_id":"cl8ylejv3007l3vsbc1utb1oz","tag_id":"cl8ylek6v00hd3vsb5uvm1heh","_id":"cl8ylek7700hp3vsbe35p9t6l"},{"post_id":"cl8ylejv3007l3vsbc1utb1oz","tag_id":"cl8ylek6y00hh3vsbbhr966j9","_id":"cl8ylek7800hq3vsbhj2pg15u"},{"post_id":"cl8ylejv3007l3vsbc1utb1oz","tag_id":"cl8ylek7100hl3vsba3ygafr4","_id":"cl8ylek7a00hu3vsba5gsg69y"},{"post_id":"cl8ylejv8007o3vsbc6zf3ssr","tag_id":"cl8ylek6v00hd3vsb5uvm1heh","_id":"cl8ylek7g00i03vsbhmydhcxx"},{"post_id":"cl8ylejv8007o3vsbc6zf3ssr","tag_id":"cl8ylek6y00hh3vsbbhr966j9","_id":"cl8ylek7h00i13vsb1cqb1ms5"},{"post_id":"cl8ylejv8007o3vsbc6zf3ssr","tag_id":"cl8ylek7100hl3vsba3ygafr4","_id":"cl8ylek7j00i43vsb9q8n4907"},{"post_id":"cl8ylejvb007q3vsbd68f1vv2","tag_id":"cl8ylek6v00hd3vsb5uvm1heh","_id":"cl8ylek7p00i93vsbakb145tz"},{"post_id":"cl8ylejvb007q3vsbd68f1vv2","tag_id":"cl8ylek6y00hh3vsbbhr966j9","_id":"cl8ylek7p00ia3vsbe27g0pl4"},{"post_id":"cl8ylejvb007q3vsbd68f1vv2","tag_id":"cl8ylek7100hl3vsba3ygafr4","_id":"cl8ylek7s00id3vsbaib6amfk"},{"post_id":"cl8ylejvg007u3vsbdirr60k5","tag_id":"cl8ylek6v00hd3vsb5uvm1heh","_id":"cl8ylek8000ii3vsbdvqcg2kw"},{"post_id":"cl8ylejvg007u3vsbdirr60k5","tag_id":"cl8ylek6y00hh3vsbbhr966j9","_id":"cl8ylek8100ij3vsb1pxf4t2c"},{"post_id":"cl8ylejvg007u3vsbdirr60k5","tag_id":"cl8ylek7100hl3vsba3ygafr4","_id":"cl8ylek8400im3vsb3z24cszy"},{"post_id":"cl8ylejvj007w3vsb9i686exi","tag_id":"cl8ylek6v00hd3vsb5uvm1heh","_id":"cl8ylek8d00ir3vsb1mtw8y9d"},{"post_id":"cl8ylejvj007w3vsb9i686exi","tag_id":"cl8ylek8200il3vsbe4iqh5dq","_id":"cl8ylek8d00it3vsb5vregd0u"},{"post_id":"cl8ylejvj007w3vsb9i686exi","tag_id":"cl8ylek7100hl3vsba3ygafr4","_id":"cl8ylek8g00iv3vsbgkj18ic3"},{"post_id":"cl8ylejvo00803vsb6e7ia8za","tag_id":"cl8ylek6v00hd3vsb5uvm1heh","_id":"cl8ylek8m00j03vsb3bbeej6x"},{"post_id":"cl8ylejvo00803vsb6e7ia8za","tag_id":"cl8ylek6y00hh3vsbbhr966j9","_id":"cl8ylek8m00j13vsbhfks9ol0"},{"post_id":"cl8ylejvo00803vsb6e7ia8za","tag_id":"cl8ylek7100hl3vsba3ygafr4","_id":"cl8ylek8o00j43vsb4v683q31"},{"post_id":"cl8ylejvr00833vsb59gyabh2","tag_id":"cl8ylek6v00hd3vsb5uvm1heh","_id":"cl8ylek8u00j93vsbcuu4dcpb"},{"post_id":"cl8ylejvr00833vsb59gyabh2","tag_id":"cl8ylek6y00hh3vsbbhr966j9","_id":"cl8ylek8u00ja3vsbbt0m1ece"},{"post_id":"cl8ylejvr00833vsb59gyabh2","tag_id":"cl8ylek7100hl3vsba3ygafr4","_id":"cl8ylek8x00jd3vsb53gj49il"},{"post_id":"cl8ylejvv00863vsb86ql8ods","tag_id":"cl8ylek6y00hh3vsbbhr966j9","_id":"cl8ylek9000jg3vsb6dgghfrx"},{"post_id":"cl8ylejvv00863vsb86ql8ods","tag_id":"cl8ylek7100hl3vsba3ygafr4","_id":"cl8ylek9000jh3vsbhyp9g2g0"},{"post_id":"cl8ylejvy00883vsb01r68rrg","tag_id":"cl8ylek6v00hd3vsb5uvm1heh","_id":"cl8ylek9800jo3vsbg01gea2o"},{"post_id":"cl8ylejvy00883vsb01r68rrg","tag_id":"cl8ylek6y00hh3vsbbhr966j9","_id":"cl8ylek9900jq3vsb6o1j1bwl"},{"post_id":"cl8ylejvy00883vsb01r68rrg","tag_id":"cl8ylek9300jl3vsb0v0uctsp","_id":"cl8ylek9b00js3vsb7rg00pv1"},{"post_id":"cl8ylejw2008b3vsb1i35h1gc","tag_id":"cl8ylek6y00hh3vsbbhr966j9","_id":"cl8ylek9m00jx3vsbdqmbc29c"},{"post_id":"cl8ylejw2008b3vsb1i35h1gc","tag_id":"cl8ylek9a00jr3vsb5fjy26g0","_id":"cl8ylek9o00jz3vsb5lxfb70y"},{"post_id":"cl8ylejw2008b3vsb1i35h1gc","tag_id":"cl8ylek3c00dq3vsbdci5hogn","_id":"cl8ylek9q00k13vsbb3xv93cx"},{"post_id":"cl8ylejw6008e3vsb4rz4431a","tag_id":"cl8ylek6y00hh3vsbbhr966j9","_id":"cl8ylek9w00k63vsb7ec968qo"},{"post_id":"cl8ylejw6008e3vsb4rz4431a","tag_id":"cl8ylek3c00dq3vsbdci5hogn","_id":"cl8ylek9y00k83vsbdla370uf"},{"post_id":"cl8ylejw6008e3vsb4rz4431a","tag_id":"cl8ylek9a00jr3vsb5fjy26g0","_id":"cl8ylek9z00ka3vsbc6l5ekx2"},{"post_id":"cl8ylejw9008f3vsb392ucxyj","tag_id":"cl8ylek6y00hh3vsbbhr966j9","_id":"cl8yleka600kf3vsb97bacs4h"},{"post_id":"cl8ylejw9008f3vsb392ucxyj","tag_id":"cl8ylek3c00dq3vsbdci5hogn","_id":"cl8yleka700kh3vsbfic4h7mx"},{"post_id":"cl8ylejw9008f3vsb392ucxyj","tag_id":"cl8ylek9a00jr3vsb5fjy26g0","_id":"cl8yleka900kj3vsb2c31006q"},{"post_id":"cl8ylejwe008i3vsb90cka780","tag_id":"cl8ylek6y00hh3vsbbhr966j9","_id":"cl8ylekap00kq3vsba2ovdgpl"},{"post_id":"cl8ylejwe008i3vsb90cka780","tag_id":"cl8ylek9a00jr3vsb5fjy26g0","_id":"cl8ylekar00kt3vsb2zjq1a0e"},{"post_id":"cl8ylejwe008i3vsb90cka780","tag_id":"cl8ylek3c00dq3vsbdci5hogn","_id":"cl8ylekau00kw3vsb7zge67l8"},{"post_id":"cl8ylejwg008j3vsbgxk19n0l","tag_id":"cl8ylek6y00hh3vsbbhr966j9","_id":"cl8ylekb100l53vsb094425yo"},{"post_id":"cl8ylejwg008j3vsbgxk19n0l","tag_id":"cl8ylek9a00jr3vsb5fjy26g0","_id":"cl8ylekb300l83vsbc25s2b2k"},{"post_id":"cl8ylejwg008j3vsbgxk19n0l","tag_id":"cl8ylek3c00dq3vsbdci5hogn","_id":"cl8ylekb500lb3vsbeapsf812"},{"post_id":"cl8ylejwl008m3vsb6z6xefbg","tag_id":"cl8ylek6y00hh3vsbbhr966j9","_id":"cl8ylekbb00lk3vsbc9z1ebot"},{"post_id":"cl8ylejwl008m3vsb6z6xefbg","tag_id":"cl8ylek9a00jr3vsb5fjy26g0","_id":"cl8ylekbc00lm3vsb9pwvazb8"},{"post_id":"cl8ylejwl008m3vsb6z6xefbg","tag_id":"cl8ylek3c00dq3vsbdci5hogn","_id":"cl8ylekbf00lq3vsbgmdc5ybo"},{"post_id":"cl8ylejwq008o3vsbd9cs0nug","tag_id":"cl8ylek6y00hh3vsbbhr966j9","_id":"cl8ylekbm00lz3vsbass32w0h"},{"post_id":"cl8ylejwq008o3vsbd9cs0nug","tag_id":"cl8ylek9a00jr3vsb5fjy26g0","_id":"cl8ylekbm00m13vsb64e1cube"},{"post_id":"cl8ylejwq008o3vsbd9cs0nug","tag_id":"cl8ylek3c00dq3vsbdci5hogn","_id":"cl8ylekbp00m53vsb89i87zwo"},{"post_id":"cl8ylejwv008t3vsb07vze968","tag_id":"cl8ylek6y00hh3vsbbhr966j9","_id":"cl8ylekbv00me3vsb5m461k30"},{"post_id":"cl8ylejwv008t3vsb07vze968","tag_id":"cl8ylek9a00jr3vsb5fjy26g0","_id":"cl8ylekbw00mg3vsb066v2jt7"},{"post_id":"cl8ylejwv008t3vsb07vze968","tag_id":"cl8ylek3c00dq3vsbdci5hogn","_id":"cl8ylekbz00mk3vsb9tkt53hx"},{"post_id":"cl8ylejwz008w3vsb8a7ee5m7","tag_id":"cl8ylek6y00hh3vsbbhr966j9","_id":"cl8ylekc600mt3vsb6lrg7trj"},{"post_id":"cl8ylejwz008w3vsb8a7ee5m7","tag_id":"cl8ylek9a00jr3vsb5fjy26g0","_id":"cl8ylekc600mu3vsb111n05cr"},{"post_id":"cl8ylejwz008w3vsb8a7ee5m7","tag_id":"cl8ylek3c00dq3vsbdci5hogn","_id":"cl8ylekc900mx3vsbh0n2fkq2"},{"post_id":"cl8ylejx400913vsb3jyv7e8c","tag_id":"cl8ylek6y00hh3vsbbhr966j9","_id":"cl8ylekcf00n23vsb3cl62ybt"},{"post_id":"cl8ylejx400913vsb3jyv7e8c","tag_id":"cl8ylek9a00jr3vsb5fjy26g0","_id":"cl8ylekcf00n33vsb5ci4b5k2"},{"post_id":"cl8ylejx400913vsb3jyv7e8c","tag_id":"cl8ylek3c00dq3vsbdci5hogn","_id":"cl8ylekci00n63vsbf5c41dof"},{"post_id":"cl8ylejx800943vsb2jof4r0k","tag_id":"cl8ylek6y00hh3vsbbhr966j9","_id":"cl8ylekco00nb3vsb2q2mb403"},{"post_id":"cl8ylejx800943vsb2jof4r0k","tag_id":"cl8ylek9a00jr3vsb5fjy26g0","_id":"cl8ylekco00nc3vsbc59y6431"},{"post_id":"cl8ylejx800943vsb2jof4r0k","tag_id":"cl8ylek3c00dq3vsbdci5hogn","_id":"cl8ylekcr00nf3vsbhhj8cvue"},{"post_id":"cl8ylejxc00983vsb0s51bgxk","tag_id":"cl8ylek6y00hh3vsbbhr966j9","_id":"cl8ylekcx00nk3vsb44jfb9lb"},{"post_id":"cl8ylejxc00983vsb0s51bgxk","tag_id":"cl8ylek9a00jr3vsb5fjy26g0","_id":"cl8ylekcx00nl3vsb3aftga7r"},{"post_id":"cl8ylejxc00983vsb0s51bgxk","tag_id":"cl8ylek3c00dq3vsbdci5hogn","_id":"cl8ylekd000no3vsbe07kfwc9"},{"post_id":"cl8ylejxf009a3vsb046rh5hm","tag_id":"cl8ylek6y00hh3vsbbhr966j9","_id":"cl8ylekd600nt3vsb9pjgd2ka"},{"post_id":"cl8ylejxf009a3vsb046rh5hm","tag_id":"cl8ylek9a00jr3vsb5fjy26g0","_id":"cl8ylekd700nu3vsbg5f44v7m"},{"post_id":"cl8ylejxf009a3vsb046rh5hm","tag_id":"cl8ylek3c00dq3vsbdci5hogn","_id":"cl8ylekd900nx3vsbafgg1vso"},{"post_id":"cl8ylejxk009e3vsbe3554ebi","tag_id":"cl8ylek6y00hh3vsbbhr966j9","_id":"cl8ylekdf00o33vsb85d5a733"},{"post_id":"cl8ylejxk009e3vsbe3554ebi","tag_id":"cl8ylek9a00jr3vsb5fjy26g0","_id":"cl8ylekdg00o53vsb9ij48wcg"},{"post_id":"cl8ylejxk009e3vsbe3554ebi","tag_id":"cl8ylek3c00dq3vsbdci5hogn","_id":"cl8ylekdi00o83vsb2vvn2bfi"},{"post_id":"cl8ylejxq009h3vsb9yn80ulz","tag_id":"cl8ylek6y00hh3vsbbhr966j9","_id":"cl8ylekdo00oc3vsb04xlcf7q"},{"post_id":"cl8ylejxq009h3vsb9yn80ulz","tag_id":"cl8ylek9a00jr3vsb5fjy26g0","_id":"cl8ylekdp00oe3vsb2yte4bfu"},{"post_id":"cl8ylejxq009h3vsb9yn80ulz","tag_id":"cl8ylek3c00dq3vsbdci5hogn","_id":"cl8ylekdr00og3vsbfipt0uyv"},{"post_id":"cl8ylejxu009k3vsbb3hy2h1s","tag_id":"cl8ylek6y00hh3vsbbhr966j9","_id":"cl8ylekdx00ol3vsbgfjffx0h"},{"post_id":"cl8ylejxu009k3vsbb3hy2h1s","tag_id":"cl8ylek9a00jr3vsb5fjy26g0","_id":"cl8ylekdz00on3vsb4me46a7o"},{"post_id":"cl8ylejxu009k3vsbb3hy2h1s","tag_id":"cl8ylek3c00dq3vsbdci5hogn","_id":"cl8yleke000op3vsb3f5kdrfj"},{"post_id":"cl8ylejxz009o3vsb686d0jek","tag_id":"cl8ylek6y00hh3vsbbhr966j9","_id":"cl8ylekeb00ou3vsb8aja4b2d"},{"post_id":"cl8ylejxz009o3vsb686d0jek","tag_id":"cl8ylek9a00jr3vsb5fjy26g0","_id":"cl8yleked00ow3vsbc34we2fh"},{"post_id":"cl8ylejxz009o3vsb686d0jek","tag_id":"cl8ylek3c00dq3vsbdci5hogn","_id":"cl8ylekef00oy3vsbeoax66kl"},{"post_id":"cl8ylejy2009q3vsbgtq251oc","tag_id":"cl8ylek6y00hh3vsbbhr966j9","_id":"cl8ylekem00p33vsbd1k12gge"},{"post_id":"cl8ylejy2009q3vsbgtq251oc","tag_id":"cl8ylek9a00jr3vsb5fjy26g0","_id":"cl8ylekep00p53vsbchsi4z4k"},{"post_id":"cl8ylejy2009q3vsbgtq251oc","tag_id":"cl8ylek3c00dq3vsbdci5hogn","_id":"cl8yleker00p73vsb8nyc48l1"},{"post_id":"cl8ylejy8009u3vsbgjxfcbre","tag_id":"cl8ylejkj001b3vsb9e2ncnu4","_id":"cl8yleket00p93vsb2uw6gxie"},{"post_id":"cl8ylejy8009u3vsbgjxfcbre","tag_id":"cl8ylekel00p23vsb9x9k92xe","_id":"cl8ylekev00pb3vsbal193frn"},{"post_id":"cl8ylejyb009x3vsb8443f7h7","tag_id":"cl8ylek6n00h53vsb3xpmd0j6","_id":"cl8ylekex00pd3vsbh9tpfqrz"},{"post_id":"cl8ylejyj00a13vsbccba8ev8","tag_id":"cl8ylek6y00hh3vsbbhr966j9","_id":"cl8ylekf200pi3vsbfvzu4alz"},{"post_id":"cl8ylejyj00a13vsbccba8ev8","tag_id":"cl8ylekex00pe3vsb0zraac8g","_id":"cl8ylekf300pj3vsb3gpi1ql8"},{"post_id":"cl8ylejym00a33vsbetxpboh3","tag_id":"cl8ylek6y00hh3vsbbhr966j9","_id":"cl8ylekf700po3vsb4uphaokl"},{"post_id":"cl8ylejym00a33vsbetxpboh3","tag_id":"cl8ylekex00pe3vsb0zraac8g","_id":"cl8ylekf900pp3vsbhdg1e2ht"},{"post_id":"cl8ylejyw00a63vsbhovd2h1r","tag_id":"cl8ylekf600pm3vsbedwea56z","_id":"cl8ylekfb00ps3vsba6wpb1or"},{"post_id":"cl8ylejyz00a73vsb6nhka7ry","tag_id":"cl8ylekf900pq3vsbdd5qa71k","_id":"cl8ylekfe00pv3vsb8hkddvnp"},{"post_id":"cl8ylejz500aa3vsb0fjcellf","tag_id":"cl8ylekf900pq3vsbdd5qa71k","_id":"cl8ylekfh00py3vsb0d9v7kxa"},{"post_id":"cl8ylejz900ac3vsb3crdc6nz","tag_id":"cl8ylekff00pw3vsb186chpag","_id":"cl8ylekfk00q13vsb6z0c23qt"},{"post_id":"cl8ylejze00ag3vsb1hj75oio","tag_id":"cl8ylekfi00q03vsbg6yc55hv","_id":"cl8ylekfu00q83vsb2laaggo1"},{"post_id":"cl8ylejze00ag3vsb1hj75oio","tag_id":"cl8ylekfm00q33vsb0fa7c8jh","_id":"cl8ylekfw00qa3vsb74td45sw"},{"post_id":"cl8ylejze00ag3vsb1hj75oio","tag_id":"cl8ylekfo00q53vsbfb6o3sav","_id":"cl8ylekfy00qc3vsb5daudwav"},{"post_id":"cl8ylejzh00ah3vsb4st79p3w","tag_id":"cl8ylekfi00q03vsbg6yc55hv","_id":"cl8ylekg500qj3vsb0qi6134h"},{"post_id":"cl8ylejzh00ah3vsb4st79p3w","tag_id":"cl8ylekfm00q33vsb0fa7c8jh","_id":"cl8ylekg600ql3vsb6tpv7264"},{"post_id":"cl8ylejzh00ah3vsb4st79p3w","tag_id":"cl8ylekfo00q53vsbfb6o3sav","_id":"cl8ylekg800qn3vsb71568agc"},{"post_id":"cl8ylejzr00al3vsbfzr64wp9","tag_id":"cl8ylekfi00q03vsbg6yc55hv","_id":"cl8ylekgf00qs3vsbevs885rs"},{"post_id":"cl8ylejzr00al3vsbfzr64wp9","tag_id":"cl8ylekfm00q33vsb0fa7c8jh","_id":"cl8ylekgh00qu3vsb7gqq80gk"},{"post_id":"cl8ylejzr00al3vsbfzr64wp9","tag_id":"cl8ylekfo00q53vsbfb6o3sav","_id":"cl8ylekgj00qw3vsbh7oe7cdk"},{"post_id":"cl8ylejzv00ao3vsb53gf17om","tag_id":"cl8ylejzp00ak3vsb4gz33txh","_id":"cl8ylekgk00qy3vsbha886632"},{"post_id":"cl8ylejzv00ao3vsb53gf17om","tag_id":"cl8ylekgd00qr3vsb1spi8fed","_id":"cl8ylekgm00r03vsbh6qddn2q"},{"post_id":"cl8ylek0200ar3vsb4hj98gqe","tag_id":"cl8ylejxj009d3vsbbvvlfy4b","_id":"cl8ylekgn00r23vsb0yxd05mq"},{"post_id":"cl8ylek0200ar3vsb4hj98gqe","tag_id":"cl8ylekgh00qv3vsbc7x9875n","_id":"cl8ylekgq00r43vsb30nc61ik"},{"post_id":"cl8ylek0600au3vsb7zgsgexh","tag_id":"cl8ylejxj009d3vsbbvvlfy4b","_id":"cl8ylekgr00r63vsb4edtdbcu"},{"post_id":"cl8ylek0600au3vsb7zgsgexh","tag_id":"cl8ylekgh00qv3vsbc7x9875n","_id":"cl8ylekgu00r83vsbducg1lji"},{"post_id":"cl8ylek0f00aw3vsb8rx3ha15","tag_id":"cl8ylejxj009d3vsbbvvlfy4b","_id":"cl8ylekgv00ra3vsb4f2k5ezz"},{"post_id":"cl8ylek0f00aw3vsb8rx3ha15","tag_id":"cl8ylekgh00qv3vsbc7x9875n","_id":"cl8ylekgx00rc3vsbctbhdjxv"},{"post_id":"cl8ylek0k00az3vsbc1a96pp9","tag_id":"cl8ylejxj009d3vsbbvvlfy4b","_id":"cl8ylekgy00re3vsb3y789qzd"},{"post_id":"cl8ylek0k00az3vsbc1a96pp9","tag_id":"cl8ylekgh00qv3vsbc7x9875n","_id":"cl8ylekh100rg3vsb874ygfnv"},{"post_id":"cl8ylek0o00b23vsb4reg6wpg","tag_id":"cl8ylejxj009d3vsbbvvlfy4b","_id":"cl8ylekh200ri3vsbffftdgla"},{"post_id":"cl8ylek0o00b23vsb4reg6wpg","tag_id":"cl8ylekgh00qv3vsbc7x9875n","_id":"cl8ylekh500rk3vsb8kheemj4"},{"post_id":"cl8ylek0s00b53vsbe1st7v32","tag_id":"cl8ylejxj009d3vsbbvvlfy4b","_id":"cl8ylekh600rm3vsb46n4dzai"},{"post_id":"cl8ylek0s00b53vsbe1st7v32","tag_id":"cl8ylekgh00qv3vsbc7x9875n","_id":"cl8ylekh900ro3vsbcth9ee63"},{"post_id":"cl8ylek0x00b93vsb02b42uos","tag_id":"cl8ylejxj009d3vsbbvvlfy4b","_id":"cl8ylekha00rq3vsbap4h92js"},{"post_id":"cl8ylek0x00b93vsb02b42uos","tag_id":"cl8ylekgh00qv3vsbc7x9875n","_id":"cl8ylekhc00rs3vsbejan3mgm"},{"post_id":"cl8ylek1000bc3vsbfalmcvz7","tag_id":"cl8ylejxj009d3vsbbvvlfy4b","_id":"cl8ylekhd00ru3vsb91rh8ivw"},{"post_id":"cl8ylek1000bc3vsbfalmcvz7","tag_id":"cl8ylekgh00qv3vsbc7x9875n","_id":"cl8ylekhf00rw3vsbdyzw5f4g"},{"post_id":"cl8ylek1500bf3vsbal7jdmnq","tag_id":"cl8ylek3c00dq3vsbdci5hogn","_id":"cl8ylekho00s53vsb8ofyf447"},{"post_id":"cl8ylek1500bf3vsbal7jdmnq","tag_id":"cl8ylekhe00rv3vsb8dk5ckhh","_id":"cl8ylekhp00s73vsbcudd9dpn"},{"post_id":"cl8ylek1500bf3vsbal7jdmnq","tag_id":"cl8ylekhh00ry3vsbcmdvbvon","_id":"cl8ylekhr00sa3vsbby7hbp2n"},{"post_id":"cl8ylek1500bf3vsbal7jdmnq","tag_id":"cl8ylekhj00s03vsb0c10123m","_id":"cl8ylekhs00sb3vsbe65d72w9"},{"post_id":"cl8ylek1800bg3vsbaqhv3dv2","tag_id":"cl8ylejsp005y3vsb3fc30t3e","_id":"cl8ylekhs00sc3vsbbqwx5159"},{"post_id":"cl8ylek1800bg3vsbaqhv3dv2","tag_id":"cl8ylejxj009d3vsbbvvlfy4b","_id":"cl8ylekht00se3vsbblhg2hda"},{"post_id":"cl8ylek1800bg3vsbaqhv3dv2","tag_id":"cl8ylekhm00s23vsbg5pkhp05","_id":"cl8ylekhu00sf3vsb2hqscyk8"}],"Tag":[{"name":"welcome","_id":"cl8ylejhv00033vsb0u6fe2yf"},{"name":"编程","_id":"cl8ylejid00083vsbbwzb7ih8"},{"name":"软件","_id":"cl8ylejin000d3vsb3bdpgf1y"},{"name":"支付","_id":"cl8ylejix000i3vsb74dp3kkk"},{"name":"随笔","_id":"cl8ylejjd000p3vsbgi4s1f96"},{"name":"经历","_id":"cl8ylejjq000w3vsbfww1ajuc"},{"name":"想法","_id":"cl8ylejjy00113vsb4rlb1xkg"},{"name":"启发","_id":"cl8ylejk700173vsba15965no"},{"name":"汇编","_id":"cl8ylejkj001b3vsb9e2ncnu4"},{"name":"加密","_id":"cl8ylejkx001j3vsba9gxcjxg"},{"name":"GitBook","_id":"cl8ylejle001o3vsbexfr0zn2"},{"name":"AsciiDoc","_id":"cl8ylejlp001t3vsbe0bogfeb"},{"name":"hexo","_id":"cl8ylejm1001x3vsb5nvf0kef"},{"name":"web","_id":"cl8ylejnb002o3vsb2bm04v24"},{"name":"dns","_id":"cl8ylejnl002u3vsbc0720c4z"},{"name":"dhcp","_id":"cl8ylejnt00303vsb90fncsfy"},{"name":"微信小程序","_id":"cl8ylejo200363vsb1y1fhmju"},{"name":"canvas","_id":"cl8ylejoo003n3vsb1icd45o4"},{"name":"vue","_id":"cl8ylejpg00493vsb61fde2ru"},{"name":"webpack","_id":"cl8ylejpq004h3vsbd46x56ed"},{"name":"leetcode","_id":"cl8ylejr6005c3vsbbg0h6hwx"},{"name":"android","_id":"cl8ylejrw005p3vsbdlt9gpdk"},{"name":"gradle","_id":"cl8ylejs4005u3vsb03xe2pz0"},{"name":"踩坑","_id":"cl8ylejsp005y3vsb3fc30t3e"},{"name":"flutter","_id":"cl8ylejt5006a3vsb838r6q8s"},{"name":"json","_id":"cl8ylejul007b3vsb1schaotq"},{"name":"破解","_id":"cl8ylejvl007x3vsbc51o2tjy"},{"name":"beautiful soup","_id":"cl8ylejvu00843vsb1yc8htvp"},{"name":"reportlab","_id":"cl8ylejw1008a3vsbauqvf35u"},{"name":"python","_id":"cl8ylejwc008h3vsb4wj6dt6d"},{"name":"fastdfs","_id":"cl8ylejwu008s3vsb0azt8jvm"},{"name":"nginx","_id":"cl8ylejxb00973vsba5bt4orv"},{"name":"java","_id":"cl8ylejxj009d3vsbbvvlfy4b"},{"name":"io","_id":"cl8ylejxx009m3vsbce0sbz8h"},{"name":"javafx","_id":"cl8ylejyp00a53vsbfjgi9rsy"},{"name":"jog4j2","_id":"cl8ylejz400a93vsbe5yzbxwt"},{"name":"maven","_id":"cl8ylejzp00ak3vsb4gz33txh"},{"name":"jdbc","_id":"cl8ylek0400as3vsbf98o1hcp"},{"name":"mysql","_id":"cl8ylek0i00ay3vsbebwlhj4z"},{"name":"tomcat","_id":"cl8ylek0r00b43vsb0ozsf5xb"},{"name":"git","_id":"cl8ylek0z00bb3vsb4jau6nwb"},{"name":"mariadb","_id":"cl8ylek1e00bk3vsb9ck2e3ng"},{"name":"跨域","_id":"cl8ylek1y00cb3vsb5cvf6nwl"},{"name":"ngrok","_id":"cl8ylek2700cj3vsb1hh22uch"},{"name":"php","_id":"cl8ylek2g00cr3vsb21aodfs2"},{"name":"apache","_id":"cl8ylek2o00cy3vsbdgmc194e"},{"name":"thinkPHP","_id":"cl8ylek2q00d03vsbdixq4gkt"},{"name":"rocketMQ","_id":"cl8ylek2s00d23vsb5rc0ge8d"},{"name":"linux的使用","_id":"cl8ylek2w00d83vsb4zrb7voi"},{"name":"linux","_id":"cl8ylek3c00dq3vsbdci5hogn"},{"name":"archlinux","_id":"cl8ylek3e00dt3vsb8zcr1gcl"},{"name":"centos","_id":"cl8ylek3l00e23vsbay9z9h7b"},{"name":"ssh","_id":"cl8ylek4000ej3vsb7mhd7o8b"},{"name":"shell","_id":"cl8ylek4c00et3vsb34jd3jnk"},{"name":"raspberry","_id":"cl8ylek4j00ez3vsb6v1g0elk"},{"name":"虚拟机","_id":"cl8ylek4r00f63vsb4vjnbymj"},{"name":"windows","_id":"cl8ylek4x00fc3vsbcxjwh7um"},{"name":"cocos","_id":"cl8ylek5600fk3vsbbes3bw84"},{"name":"商城开发","_id":"cl8ylek5900fn3vsb2w2g9osv"},{"name":"js","_id":"cl8ylek6n00h53vsb3xpmd0j6"},{"name":"小知识点","_id":"cl8ylek6t00hb3vsbas6z3z9p"},{"name":"c++","_id":"cl8ylek6v00hd3vsb5uvm1heh"},{"name":"笔记","_id":"cl8ylek6y00hh3vsbbhr966j9"},{"name":"makefile","_id":"cl8ylek7100hl3vsba3ygafr4"},{"name":"跟我一起写makefile","_id":"cl8ylek8200il3vsbe4iqh5dq"},{"name":"最好的c++教程","_id":"cl8ylek9300jl3vsb0v0uctsp"},{"name":"快乐的Linux命令行","_id":"cl8ylek9a00jr3vsb5fjy26g0"},{"name":"读书笔记","_id":"cl8ylekel00p23vsb9x9k92xe"},{"name":"C","_id":"cl8ylekex00pe3vsb0zraac8g"},{"name":"架构","_id":"cl8ylekf600pm3vsbedwea56z"},{"name":"性能","_id":"cl8ylekf900pq3vsbdd5qa71k"},{"name":"缓存","_id":"cl8ylekff00pw3vsb186chpag"},{"name":"mybatis","_id":"cl8ylekfi00q03vsbg6yc55hv"},{"name":"开源项目","_id":"cl8ylekfm00q33vsb0fa7c8jh"},{"name":"mybatis-enhance","_id":"cl8ylekfo00q53vsbfb6o3sav"},{"name":"servlet","_id":"cl8ylekgd00qr3vsb1spi8fed"},{"name":"spring","_id":"cl8ylekgh00qv3vsbc7x9875n"},{"name":"llvm","_id":"cl8ylekhe00rv3vsb8dk5ckhh"},{"name":"gcc","_id":"cl8ylekhh00ry3vsbcmdvbvon"},{"name":"ycm","_id":"cl8ylekhj00s03vsb0c10123m"},{"name":"jpa","_id":"cl8ylekhm00s23vsbg5pkhp05"}]}}